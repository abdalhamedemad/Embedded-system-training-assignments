
Drivers.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         00003698  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .data         0000001e  00800060  00003698  0000372c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  2 .bss          00000007  0080007e  0080007e  0000374a  2**0
                  ALLOC
  3 .stab         00003294  00000000  00000000  0000374c  2**2
                  CONTENTS, READONLY, DEBUGGING
  4 .stabstr      0000172f  00000000  00000000  000069e0  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_aranges 00000140  00000000  00000000  0000810f  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_pubnames 00000170  00000000  00000000  0000824f  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_info   00001c49  00000000  00000000  000083bf  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_abbrev 00000eeb  00000000  00000000  0000a008  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_line   00000dad  00000000  00000000  0000aef3  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_frame  00000160  00000000  00000000  0000bca0  2**2
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_str    0000028d  00000000  00000000  0000be00  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_loc    000007ce  00000000  00000000  0000c08d  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_ranges 00000050  00000000  00000000  0000c85b  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
       0:	0c 94 2a 00 	jmp	0x54	; 0x54 <__ctors_end>
       4:	0c 94 95 0c 	jmp	0x192a	; 0x192a <__vector_1>
       8:	0c 94 c2 0c 	jmp	0x1984	; 0x1984 <__vector_2>
       c:	0c 94 ef 0c 	jmp	0x19de	; 0x19de <__vector_3>
      10:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      14:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      18:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      1c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      20:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      24:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      28:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      2c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      30:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      34:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      38:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      3c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      40:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      44:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      48:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      4c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      50:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>

00000054 <__ctors_end>:
      54:	11 24       	eor	r1, r1
      56:	1f be       	out	0x3f, r1	; 63
      58:	cf e5       	ldi	r28, 0x5F	; 95
      5a:	d8 e0       	ldi	r29, 0x08	; 8
      5c:	de bf       	out	0x3e, r29	; 62
      5e:	cd bf       	out	0x3d, r28	; 61

00000060 <__do_copy_data>:
      60:	10 e0       	ldi	r17, 0x00	; 0
      62:	a0 e6       	ldi	r26, 0x60	; 96
      64:	b0 e0       	ldi	r27, 0x00	; 0
      66:	e8 e9       	ldi	r30, 0x98	; 152
      68:	f6 e3       	ldi	r31, 0x36	; 54
      6a:	02 c0       	rjmp	.+4      	; 0x70 <.do_copy_data_start>

0000006c <.do_copy_data_loop>:
      6c:	05 90       	lpm	r0, Z+
      6e:	0d 92       	st	X+, r0

00000070 <.do_copy_data_start>:
      70:	ae 37       	cpi	r26, 0x7E	; 126
      72:	b1 07       	cpc	r27, r17
      74:	d9 f7       	brne	.-10     	; 0x6c <.do_copy_data_loop>

00000076 <__do_clear_bss>:
      76:	10 e0       	ldi	r17, 0x00	; 0
      78:	ae e7       	ldi	r26, 0x7E	; 126
      7a:	b0 e0       	ldi	r27, 0x00	; 0
      7c:	01 c0       	rjmp	.+2      	; 0x80 <.do_clear_bss_start>

0000007e <.do_clear_bss_loop>:
      7e:	1d 92       	st	X+, r1

00000080 <.do_clear_bss_start>:
      80:	a5 38       	cpi	r26, 0x85	; 133
      82:	b1 07       	cpc	r27, r17
      84:	e1 f7       	brne	.-8      	; 0x7e <.do_clear_bss_loop>
      86:	0e 94 61 15 	call	0x2ac2	; 0x2ac2 <main>
      8a:	0c 94 4a 1b 	jmp	0x3694	; 0x3694 <_exit>

0000008e <__bad_interrupt>:
      8e:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

00000092 <__fixunssfsi>:
      92:	ef 92       	push	r14
      94:	ff 92       	push	r15
      96:	0f 93       	push	r16
      98:	1f 93       	push	r17
      9a:	7b 01       	movw	r14, r22
      9c:	8c 01       	movw	r16, r24
      9e:	20 e0       	ldi	r18, 0x00	; 0
      a0:	30 e0       	ldi	r19, 0x00	; 0
      a2:	40 e0       	ldi	r20, 0x00	; 0
      a4:	5f e4       	ldi	r21, 0x4F	; 79
      a6:	0e 94 49 03 	call	0x692	; 0x692 <__gesf2>
      aa:	88 23       	and	r24, r24
      ac:	8c f0       	brlt	.+34     	; 0xd0 <__fixunssfsi+0x3e>
      ae:	c8 01       	movw	r24, r16
      b0:	b7 01       	movw	r22, r14
      b2:	20 e0       	ldi	r18, 0x00	; 0
      b4:	30 e0       	ldi	r19, 0x00	; 0
      b6:	40 e0       	ldi	r20, 0x00	; 0
      b8:	5f e4       	ldi	r21, 0x4F	; 79
      ba:	0e 94 c1 01 	call	0x382	; 0x382 <__subsf3>
      be:	0e 94 a9 03 	call	0x752	; 0x752 <__fixsfsi>
      c2:	9b 01       	movw	r18, r22
      c4:	ac 01       	movw	r20, r24
      c6:	20 50       	subi	r18, 0x00	; 0
      c8:	30 40       	sbci	r19, 0x00	; 0
      ca:	40 40       	sbci	r20, 0x00	; 0
      cc:	50 48       	sbci	r21, 0x80	; 128
      ce:	06 c0       	rjmp	.+12     	; 0xdc <__fixunssfsi+0x4a>
      d0:	c8 01       	movw	r24, r16
      d2:	b7 01       	movw	r22, r14
      d4:	0e 94 a9 03 	call	0x752	; 0x752 <__fixsfsi>
      d8:	9b 01       	movw	r18, r22
      da:	ac 01       	movw	r20, r24
      dc:	b9 01       	movw	r22, r18
      de:	ca 01       	movw	r24, r20
      e0:	1f 91       	pop	r17
      e2:	0f 91       	pop	r16
      e4:	ff 90       	pop	r15
      e6:	ef 90       	pop	r14
      e8:	08 95       	ret

000000ea <_fpadd_parts>:
      ea:	a0 e0       	ldi	r26, 0x00	; 0
      ec:	b0 e0       	ldi	r27, 0x00	; 0
      ee:	eb e7       	ldi	r30, 0x7B	; 123
      f0:	f0 e0       	ldi	r31, 0x00	; 0
      f2:	0c 94 13 1b 	jmp	0x3626	; 0x3626 <__prologue_saves__>
      f6:	dc 01       	movw	r26, r24
      f8:	2b 01       	movw	r4, r22
      fa:	fa 01       	movw	r30, r20
      fc:	9c 91       	ld	r25, X
      fe:	92 30       	cpi	r25, 0x02	; 2
     100:	08 f4       	brcc	.+2      	; 0x104 <_fpadd_parts+0x1a>
     102:	39 c1       	rjmp	.+626    	; 0x376 <_fpadd_parts+0x28c>
     104:	eb 01       	movw	r28, r22
     106:	88 81       	ld	r24, Y
     108:	82 30       	cpi	r24, 0x02	; 2
     10a:	08 f4       	brcc	.+2      	; 0x10e <_fpadd_parts+0x24>
     10c:	33 c1       	rjmp	.+614    	; 0x374 <_fpadd_parts+0x28a>
     10e:	94 30       	cpi	r25, 0x04	; 4
     110:	69 f4       	brne	.+26     	; 0x12c <_fpadd_parts+0x42>
     112:	84 30       	cpi	r24, 0x04	; 4
     114:	09 f0       	breq	.+2      	; 0x118 <_fpadd_parts+0x2e>
     116:	2f c1       	rjmp	.+606    	; 0x376 <_fpadd_parts+0x28c>
     118:	11 96       	adiw	r26, 0x01	; 1
     11a:	9c 91       	ld	r25, X
     11c:	11 97       	sbiw	r26, 0x01	; 1
     11e:	89 81       	ldd	r24, Y+1	; 0x01
     120:	98 17       	cp	r25, r24
     122:	09 f4       	brne	.+2      	; 0x126 <_fpadd_parts+0x3c>
     124:	28 c1       	rjmp	.+592    	; 0x376 <_fpadd_parts+0x28c>
     126:	a6 e7       	ldi	r26, 0x76	; 118
     128:	b0 e0       	ldi	r27, 0x00	; 0
     12a:	25 c1       	rjmp	.+586    	; 0x376 <_fpadd_parts+0x28c>
     12c:	84 30       	cpi	r24, 0x04	; 4
     12e:	09 f4       	brne	.+2      	; 0x132 <_fpadd_parts+0x48>
     130:	21 c1       	rjmp	.+578    	; 0x374 <_fpadd_parts+0x28a>
     132:	82 30       	cpi	r24, 0x02	; 2
     134:	a9 f4       	brne	.+42     	; 0x160 <_fpadd_parts+0x76>
     136:	92 30       	cpi	r25, 0x02	; 2
     138:	09 f0       	breq	.+2      	; 0x13c <_fpadd_parts+0x52>
     13a:	1d c1       	rjmp	.+570    	; 0x376 <_fpadd_parts+0x28c>
     13c:	9a 01       	movw	r18, r20
     13e:	ad 01       	movw	r20, r26
     140:	88 e0       	ldi	r24, 0x08	; 8
     142:	ea 01       	movw	r28, r20
     144:	09 90       	ld	r0, Y+
     146:	ae 01       	movw	r20, r28
     148:	e9 01       	movw	r28, r18
     14a:	09 92       	st	Y+, r0
     14c:	9e 01       	movw	r18, r28
     14e:	81 50       	subi	r24, 0x01	; 1
     150:	c1 f7       	brne	.-16     	; 0x142 <_fpadd_parts+0x58>
     152:	e2 01       	movw	r28, r4
     154:	89 81       	ldd	r24, Y+1	; 0x01
     156:	11 96       	adiw	r26, 0x01	; 1
     158:	9c 91       	ld	r25, X
     15a:	89 23       	and	r24, r25
     15c:	81 83       	std	Z+1, r24	; 0x01
     15e:	08 c1       	rjmp	.+528    	; 0x370 <_fpadd_parts+0x286>
     160:	92 30       	cpi	r25, 0x02	; 2
     162:	09 f4       	brne	.+2      	; 0x166 <_fpadd_parts+0x7c>
     164:	07 c1       	rjmp	.+526    	; 0x374 <_fpadd_parts+0x28a>
     166:	12 96       	adiw	r26, 0x02	; 2
     168:	2d 90       	ld	r2, X+
     16a:	3c 90       	ld	r3, X
     16c:	13 97       	sbiw	r26, 0x03	; 3
     16e:	eb 01       	movw	r28, r22
     170:	8a 81       	ldd	r24, Y+2	; 0x02
     172:	9b 81       	ldd	r25, Y+3	; 0x03
     174:	14 96       	adiw	r26, 0x04	; 4
     176:	ad 90       	ld	r10, X+
     178:	bd 90       	ld	r11, X+
     17a:	cd 90       	ld	r12, X+
     17c:	dc 90       	ld	r13, X
     17e:	17 97       	sbiw	r26, 0x07	; 7
     180:	ec 80       	ldd	r14, Y+4	; 0x04
     182:	fd 80       	ldd	r15, Y+5	; 0x05
     184:	0e 81       	ldd	r16, Y+6	; 0x06
     186:	1f 81       	ldd	r17, Y+7	; 0x07
     188:	91 01       	movw	r18, r2
     18a:	28 1b       	sub	r18, r24
     18c:	39 0b       	sbc	r19, r25
     18e:	b9 01       	movw	r22, r18
     190:	37 ff       	sbrs	r19, 7
     192:	04 c0       	rjmp	.+8      	; 0x19c <_fpadd_parts+0xb2>
     194:	66 27       	eor	r22, r22
     196:	77 27       	eor	r23, r23
     198:	62 1b       	sub	r22, r18
     19a:	73 0b       	sbc	r23, r19
     19c:	60 32       	cpi	r22, 0x20	; 32
     19e:	71 05       	cpc	r23, r1
     1a0:	0c f0       	brlt	.+2      	; 0x1a4 <_fpadd_parts+0xba>
     1a2:	61 c0       	rjmp	.+194    	; 0x266 <_fpadd_parts+0x17c>
     1a4:	12 16       	cp	r1, r18
     1a6:	13 06       	cpc	r1, r19
     1a8:	6c f5       	brge	.+90     	; 0x204 <_fpadd_parts+0x11a>
     1aa:	37 01       	movw	r6, r14
     1ac:	48 01       	movw	r8, r16
     1ae:	06 2e       	mov	r0, r22
     1b0:	04 c0       	rjmp	.+8      	; 0x1ba <_fpadd_parts+0xd0>
     1b2:	96 94       	lsr	r9
     1b4:	87 94       	ror	r8
     1b6:	77 94       	ror	r7
     1b8:	67 94       	ror	r6
     1ba:	0a 94       	dec	r0
     1bc:	d2 f7       	brpl	.-12     	; 0x1b2 <_fpadd_parts+0xc8>
     1be:	21 e0       	ldi	r18, 0x01	; 1
     1c0:	30 e0       	ldi	r19, 0x00	; 0
     1c2:	40 e0       	ldi	r20, 0x00	; 0
     1c4:	50 e0       	ldi	r21, 0x00	; 0
     1c6:	04 c0       	rjmp	.+8      	; 0x1d0 <_fpadd_parts+0xe6>
     1c8:	22 0f       	add	r18, r18
     1ca:	33 1f       	adc	r19, r19
     1cc:	44 1f       	adc	r20, r20
     1ce:	55 1f       	adc	r21, r21
     1d0:	6a 95       	dec	r22
     1d2:	d2 f7       	brpl	.-12     	; 0x1c8 <_fpadd_parts+0xde>
     1d4:	21 50       	subi	r18, 0x01	; 1
     1d6:	30 40       	sbci	r19, 0x00	; 0
     1d8:	40 40       	sbci	r20, 0x00	; 0
     1da:	50 40       	sbci	r21, 0x00	; 0
     1dc:	2e 21       	and	r18, r14
     1de:	3f 21       	and	r19, r15
     1e0:	40 23       	and	r20, r16
     1e2:	51 23       	and	r21, r17
     1e4:	21 15       	cp	r18, r1
     1e6:	31 05       	cpc	r19, r1
     1e8:	41 05       	cpc	r20, r1
     1ea:	51 05       	cpc	r21, r1
     1ec:	21 f0       	breq	.+8      	; 0x1f6 <_fpadd_parts+0x10c>
     1ee:	21 e0       	ldi	r18, 0x01	; 1
     1f0:	30 e0       	ldi	r19, 0x00	; 0
     1f2:	40 e0       	ldi	r20, 0x00	; 0
     1f4:	50 e0       	ldi	r21, 0x00	; 0
     1f6:	79 01       	movw	r14, r18
     1f8:	8a 01       	movw	r16, r20
     1fa:	e6 28       	or	r14, r6
     1fc:	f7 28       	or	r15, r7
     1fe:	08 29       	or	r16, r8
     200:	19 29       	or	r17, r9
     202:	3c c0       	rjmp	.+120    	; 0x27c <_fpadd_parts+0x192>
     204:	23 2b       	or	r18, r19
     206:	d1 f1       	breq	.+116    	; 0x27c <_fpadd_parts+0x192>
     208:	26 0e       	add	r2, r22
     20a:	37 1e       	adc	r3, r23
     20c:	35 01       	movw	r6, r10
     20e:	46 01       	movw	r8, r12
     210:	06 2e       	mov	r0, r22
     212:	04 c0       	rjmp	.+8      	; 0x21c <_fpadd_parts+0x132>
     214:	96 94       	lsr	r9
     216:	87 94       	ror	r8
     218:	77 94       	ror	r7
     21a:	67 94       	ror	r6
     21c:	0a 94       	dec	r0
     21e:	d2 f7       	brpl	.-12     	; 0x214 <_fpadd_parts+0x12a>
     220:	21 e0       	ldi	r18, 0x01	; 1
     222:	30 e0       	ldi	r19, 0x00	; 0
     224:	40 e0       	ldi	r20, 0x00	; 0
     226:	50 e0       	ldi	r21, 0x00	; 0
     228:	04 c0       	rjmp	.+8      	; 0x232 <_fpadd_parts+0x148>
     22a:	22 0f       	add	r18, r18
     22c:	33 1f       	adc	r19, r19
     22e:	44 1f       	adc	r20, r20
     230:	55 1f       	adc	r21, r21
     232:	6a 95       	dec	r22
     234:	d2 f7       	brpl	.-12     	; 0x22a <_fpadd_parts+0x140>
     236:	21 50       	subi	r18, 0x01	; 1
     238:	30 40       	sbci	r19, 0x00	; 0
     23a:	40 40       	sbci	r20, 0x00	; 0
     23c:	50 40       	sbci	r21, 0x00	; 0
     23e:	2a 21       	and	r18, r10
     240:	3b 21       	and	r19, r11
     242:	4c 21       	and	r20, r12
     244:	5d 21       	and	r21, r13
     246:	21 15       	cp	r18, r1
     248:	31 05       	cpc	r19, r1
     24a:	41 05       	cpc	r20, r1
     24c:	51 05       	cpc	r21, r1
     24e:	21 f0       	breq	.+8      	; 0x258 <_fpadd_parts+0x16e>
     250:	21 e0       	ldi	r18, 0x01	; 1
     252:	30 e0       	ldi	r19, 0x00	; 0
     254:	40 e0       	ldi	r20, 0x00	; 0
     256:	50 e0       	ldi	r21, 0x00	; 0
     258:	59 01       	movw	r10, r18
     25a:	6a 01       	movw	r12, r20
     25c:	a6 28       	or	r10, r6
     25e:	b7 28       	or	r11, r7
     260:	c8 28       	or	r12, r8
     262:	d9 28       	or	r13, r9
     264:	0b c0       	rjmp	.+22     	; 0x27c <_fpadd_parts+0x192>
     266:	82 15       	cp	r24, r2
     268:	93 05       	cpc	r25, r3
     26a:	2c f0       	brlt	.+10     	; 0x276 <_fpadd_parts+0x18c>
     26c:	1c 01       	movw	r2, r24
     26e:	aa 24       	eor	r10, r10
     270:	bb 24       	eor	r11, r11
     272:	65 01       	movw	r12, r10
     274:	03 c0       	rjmp	.+6      	; 0x27c <_fpadd_parts+0x192>
     276:	ee 24       	eor	r14, r14
     278:	ff 24       	eor	r15, r15
     27a:	87 01       	movw	r16, r14
     27c:	11 96       	adiw	r26, 0x01	; 1
     27e:	9c 91       	ld	r25, X
     280:	d2 01       	movw	r26, r4
     282:	11 96       	adiw	r26, 0x01	; 1
     284:	8c 91       	ld	r24, X
     286:	98 17       	cp	r25, r24
     288:	09 f4       	brne	.+2      	; 0x28c <_fpadd_parts+0x1a2>
     28a:	45 c0       	rjmp	.+138    	; 0x316 <_fpadd_parts+0x22c>
     28c:	99 23       	and	r25, r25
     28e:	39 f0       	breq	.+14     	; 0x29e <_fpadd_parts+0x1b4>
     290:	a8 01       	movw	r20, r16
     292:	97 01       	movw	r18, r14
     294:	2a 19       	sub	r18, r10
     296:	3b 09       	sbc	r19, r11
     298:	4c 09       	sbc	r20, r12
     29a:	5d 09       	sbc	r21, r13
     29c:	06 c0       	rjmp	.+12     	; 0x2aa <_fpadd_parts+0x1c0>
     29e:	a6 01       	movw	r20, r12
     2a0:	95 01       	movw	r18, r10
     2a2:	2e 19       	sub	r18, r14
     2a4:	3f 09       	sbc	r19, r15
     2a6:	40 0b       	sbc	r20, r16
     2a8:	51 0b       	sbc	r21, r17
     2aa:	57 fd       	sbrc	r21, 7
     2ac:	08 c0       	rjmp	.+16     	; 0x2be <_fpadd_parts+0x1d4>
     2ae:	11 82       	std	Z+1, r1	; 0x01
     2b0:	33 82       	std	Z+3, r3	; 0x03
     2b2:	22 82       	std	Z+2, r2	; 0x02
     2b4:	24 83       	std	Z+4, r18	; 0x04
     2b6:	35 83       	std	Z+5, r19	; 0x05
     2b8:	46 83       	std	Z+6, r20	; 0x06
     2ba:	57 83       	std	Z+7, r21	; 0x07
     2bc:	1d c0       	rjmp	.+58     	; 0x2f8 <_fpadd_parts+0x20e>
     2be:	81 e0       	ldi	r24, 0x01	; 1
     2c0:	81 83       	std	Z+1, r24	; 0x01
     2c2:	33 82       	std	Z+3, r3	; 0x03
     2c4:	22 82       	std	Z+2, r2	; 0x02
     2c6:	88 27       	eor	r24, r24
     2c8:	99 27       	eor	r25, r25
     2ca:	dc 01       	movw	r26, r24
     2cc:	82 1b       	sub	r24, r18
     2ce:	93 0b       	sbc	r25, r19
     2d0:	a4 0b       	sbc	r26, r20
     2d2:	b5 0b       	sbc	r27, r21
     2d4:	84 83       	std	Z+4, r24	; 0x04
     2d6:	95 83       	std	Z+5, r25	; 0x05
     2d8:	a6 83       	std	Z+6, r26	; 0x06
     2da:	b7 83       	std	Z+7, r27	; 0x07
     2dc:	0d c0       	rjmp	.+26     	; 0x2f8 <_fpadd_parts+0x20e>
     2de:	22 0f       	add	r18, r18
     2e0:	33 1f       	adc	r19, r19
     2e2:	44 1f       	adc	r20, r20
     2e4:	55 1f       	adc	r21, r21
     2e6:	24 83       	std	Z+4, r18	; 0x04
     2e8:	35 83       	std	Z+5, r19	; 0x05
     2ea:	46 83       	std	Z+6, r20	; 0x06
     2ec:	57 83       	std	Z+7, r21	; 0x07
     2ee:	82 81       	ldd	r24, Z+2	; 0x02
     2f0:	93 81       	ldd	r25, Z+3	; 0x03
     2f2:	01 97       	sbiw	r24, 0x01	; 1
     2f4:	93 83       	std	Z+3, r25	; 0x03
     2f6:	82 83       	std	Z+2, r24	; 0x02
     2f8:	24 81       	ldd	r18, Z+4	; 0x04
     2fa:	35 81       	ldd	r19, Z+5	; 0x05
     2fc:	46 81       	ldd	r20, Z+6	; 0x06
     2fe:	57 81       	ldd	r21, Z+7	; 0x07
     300:	da 01       	movw	r26, r20
     302:	c9 01       	movw	r24, r18
     304:	01 97       	sbiw	r24, 0x01	; 1
     306:	a1 09       	sbc	r26, r1
     308:	b1 09       	sbc	r27, r1
     30a:	8f 5f       	subi	r24, 0xFF	; 255
     30c:	9f 4f       	sbci	r25, 0xFF	; 255
     30e:	af 4f       	sbci	r26, 0xFF	; 255
     310:	bf 43       	sbci	r27, 0x3F	; 63
     312:	28 f3       	brcs	.-54     	; 0x2de <_fpadd_parts+0x1f4>
     314:	0b c0       	rjmp	.+22     	; 0x32c <_fpadd_parts+0x242>
     316:	91 83       	std	Z+1, r25	; 0x01
     318:	33 82       	std	Z+3, r3	; 0x03
     31a:	22 82       	std	Z+2, r2	; 0x02
     31c:	ea 0c       	add	r14, r10
     31e:	fb 1c       	adc	r15, r11
     320:	0c 1d       	adc	r16, r12
     322:	1d 1d       	adc	r17, r13
     324:	e4 82       	std	Z+4, r14	; 0x04
     326:	f5 82       	std	Z+5, r15	; 0x05
     328:	06 83       	std	Z+6, r16	; 0x06
     32a:	17 83       	std	Z+7, r17	; 0x07
     32c:	83 e0       	ldi	r24, 0x03	; 3
     32e:	80 83       	st	Z, r24
     330:	24 81       	ldd	r18, Z+4	; 0x04
     332:	35 81       	ldd	r19, Z+5	; 0x05
     334:	46 81       	ldd	r20, Z+6	; 0x06
     336:	57 81       	ldd	r21, Z+7	; 0x07
     338:	57 ff       	sbrs	r21, 7
     33a:	1a c0       	rjmp	.+52     	; 0x370 <_fpadd_parts+0x286>
     33c:	c9 01       	movw	r24, r18
     33e:	aa 27       	eor	r26, r26
     340:	97 fd       	sbrc	r25, 7
     342:	a0 95       	com	r26
     344:	ba 2f       	mov	r27, r26
     346:	81 70       	andi	r24, 0x01	; 1
     348:	90 70       	andi	r25, 0x00	; 0
     34a:	a0 70       	andi	r26, 0x00	; 0
     34c:	b0 70       	andi	r27, 0x00	; 0
     34e:	56 95       	lsr	r21
     350:	47 95       	ror	r20
     352:	37 95       	ror	r19
     354:	27 95       	ror	r18
     356:	82 2b       	or	r24, r18
     358:	93 2b       	or	r25, r19
     35a:	a4 2b       	or	r26, r20
     35c:	b5 2b       	or	r27, r21
     35e:	84 83       	std	Z+4, r24	; 0x04
     360:	95 83       	std	Z+5, r25	; 0x05
     362:	a6 83       	std	Z+6, r26	; 0x06
     364:	b7 83       	std	Z+7, r27	; 0x07
     366:	82 81       	ldd	r24, Z+2	; 0x02
     368:	93 81       	ldd	r25, Z+3	; 0x03
     36a:	01 96       	adiw	r24, 0x01	; 1
     36c:	93 83       	std	Z+3, r25	; 0x03
     36e:	82 83       	std	Z+2, r24	; 0x02
     370:	df 01       	movw	r26, r30
     372:	01 c0       	rjmp	.+2      	; 0x376 <_fpadd_parts+0x28c>
     374:	d2 01       	movw	r26, r4
     376:	cd 01       	movw	r24, r26
     378:	cd b7       	in	r28, 0x3d	; 61
     37a:	de b7       	in	r29, 0x3e	; 62
     37c:	e2 e1       	ldi	r30, 0x12	; 18
     37e:	0c 94 2f 1b 	jmp	0x365e	; 0x365e <__epilogue_restores__>

00000382 <__subsf3>:
     382:	a0 e2       	ldi	r26, 0x20	; 32
     384:	b0 e0       	ldi	r27, 0x00	; 0
     386:	e7 ec       	ldi	r30, 0xC7	; 199
     388:	f1 e0       	ldi	r31, 0x01	; 1
     38a:	0c 94 1f 1b 	jmp	0x363e	; 0x363e <__prologue_saves__+0x18>
     38e:	69 83       	std	Y+1, r22	; 0x01
     390:	7a 83       	std	Y+2, r23	; 0x02
     392:	8b 83       	std	Y+3, r24	; 0x03
     394:	9c 83       	std	Y+4, r25	; 0x04
     396:	2d 83       	std	Y+5, r18	; 0x05
     398:	3e 83       	std	Y+6, r19	; 0x06
     39a:	4f 83       	std	Y+7, r20	; 0x07
     39c:	58 87       	std	Y+8, r21	; 0x08
     39e:	e9 e0       	ldi	r30, 0x09	; 9
     3a0:	ee 2e       	mov	r14, r30
     3a2:	f1 2c       	mov	r15, r1
     3a4:	ec 0e       	add	r14, r28
     3a6:	fd 1e       	adc	r15, r29
     3a8:	ce 01       	movw	r24, r28
     3aa:	01 96       	adiw	r24, 0x01	; 1
     3ac:	b7 01       	movw	r22, r14
     3ae:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     3b2:	8e 01       	movw	r16, r28
     3b4:	0f 5e       	subi	r16, 0xEF	; 239
     3b6:	1f 4f       	sbci	r17, 0xFF	; 255
     3b8:	ce 01       	movw	r24, r28
     3ba:	05 96       	adiw	r24, 0x05	; 5
     3bc:	b8 01       	movw	r22, r16
     3be:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     3c2:	8a 89       	ldd	r24, Y+18	; 0x12
     3c4:	91 e0       	ldi	r25, 0x01	; 1
     3c6:	89 27       	eor	r24, r25
     3c8:	8a 8b       	std	Y+18, r24	; 0x12
     3ca:	c7 01       	movw	r24, r14
     3cc:	b8 01       	movw	r22, r16
     3ce:	ae 01       	movw	r20, r28
     3d0:	47 5e       	subi	r20, 0xE7	; 231
     3d2:	5f 4f       	sbci	r21, 0xFF	; 255
     3d4:	0e 94 75 00 	call	0xea	; 0xea <_fpadd_parts>
     3d8:	0e 94 fd 03 	call	0x7fa	; 0x7fa <__pack_f>
     3dc:	a0 96       	adiw	r28, 0x20	; 32
     3de:	e6 e0       	ldi	r30, 0x06	; 6
     3e0:	0c 94 3b 1b 	jmp	0x3676	; 0x3676 <__epilogue_restores__+0x18>

000003e4 <__addsf3>:
     3e4:	a0 e2       	ldi	r26, 0x20	; 32
     3e6:	b0 e0       	ldi	r27, 0x00	; 0
     3e8:	e8 ef       	ldi	r30, 0xF8	; 248
     3ea:	f1 e0       	ldi	r31, 0x01	; 1
     3ec:	0c 94 1f 1b 	jmp	0x363e	; 0x363e <__prologue_saves__+0x18>
     3f0:	69 83       	std	Y+1, r22	; 0x01
     3f2:	7a 83       	std	Y+2, r23	; 0x02
     3f4:	8b 83       	std	Y+3, r24	; 0x03
     3f6:	9c 83       	std	Y+4, r25	; 0x04
     3f8:	2d 83       	std	Y+5, r18	; 0x05
     3fa:	3e 83       	std	Y+6, r19	; 0x06
     3fc:	4f 83       	std	Y+7, r20	; 0x07
     3fe:	58 87       	std	Y+8, r21	; 0x08
     400:	f9 e0       	ldi	r31, 0x09	; 9
     402:	ef 2e       	mov	r14, r31
     404:	f1 2c       	mov	r15, r1
     406:	ec 0e       	add	r14, r28
     408:	fd 1e       	adc	r15, r29
     40a:	ce 01       	movw	r24, r28
     40c:	01 96       	adiw	r24, 0x01	; 1
     40e:	b7 01       	movw	r22, r14
     410:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     414:	8e 01       	movw	r16, r28
     416:	0f 5e       	subi	r16, 0xEF	; 239
     418:	1f 4f       	sbci	r17, 0xFF	; 255
     41a:	ce 01       	movw	r24, r28
     41c:	05 96       	adiw	r24, 0x05	; 5
     41e:	b8 01       	movw	r22, r16
     420:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     424:	c7 01       	movw	r24, r14
     426:	b8 01       	movw	r22, r16
     428:	ae 01       	movw	r20, r28
     42a:	47 5e       	subi	r20, 0xE7	; 231
     42c:	5f 4f       	sbci	r21, 0xFF	; 255
     42e:	0e 94 75 00 	call	0xea	; 0xea <_fpadd_parts>
     432:	0e 94 fd 03 	call	0x7fa	; 0x7fa <__pack_f>
     436:	a0 96       	adiw	r28, 0x20	; 32
     438:	e6 e0       	ldi	r30, 0x06	; 6
     43a:	0c 94 3b 1b 	jmp	0x3676	; 0x3676 <__epilogue_restores__+0x18>

0000043e <__mulsf3>:
     43e:	a0 e2       	ldi	r26, 0x20	; 32
     440:	b0 e0       	ldi	r27, 0x00	; 0
     442:	e5 e2       	ldi	r30, 0x25	; 37
     444:	f2 e0       	ldi	r31, 0x02	; 2
     446:	0c 94 13 1b 	jmp	0x3626	; 0x3626 <__prologue_saves__>
     44a:	69 83       	std	Y+1, r22	; 0x01
     44c:	7a 83       	std	Y+2, r23	; 0x02
     44e:	8b 83       	std	Y+3, r24	; 0x03
     450:	9c 83       	std	Y+4, r25	; 0x04
     452:	2d 83       	std	Y+5, r18	; 0x05
     454:	3e 83       	std	Y+6, r19	; 0x06
     456:	4f 83       	std	Y+7, r20	; 0x07
     458:	58 87       	std	Y+8, r21	; 0x08
     45a:	ce 01       	movw	r24, r28
     45c:	01 96       	adiw	r24, 0x01	; 1
     45e:	be 01       	movw	r22, r28
     460:	67 5f       	subi	r22, 0xF7	; 247
     462:	7f 4f       	sbci	r23, 0xFF	; 255
     464:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     468:	ce 01       	movw	r24, r28
     46a:	05 96       	adiw	r24, 0x05	; 5
     46c:	be 01       	movw	r22, r28
     46e:	6f 5e       	subi	r22, 0xEF	; 239
     470:	7f 4f       	sbci	r23, 0xFF	; 255
     472:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     476:	99 85       	ldd	r25, Y+9	; 0x09
     478:	92 30       	cpi	r25, 0x02	; 2
     47a:	88 f0       	brcs	.+34     	; 0x49e <__mulsf3+0x60>
     47c:	89 89       	ldd	r24, Y+17	; 0x11
     47e:	82 30       	cpi	r24, 0x02	; 2
     480:	c8 f0       	brcs	.+50     	; 0x4b4 <__mulsf3+0x76>
     482:	94 30       	cpi	r25, 0x04	; 4
     484:	19 f4       	brne	.+6      	; 0x48c <__mulsf3+0x4e>
     486:	82 30       	cpi	r24, 0x02	; 2
     488:	51 f4       	brne	.+20     	; 0x49e <__mulsf3+0x60>
     48a:	04 c0       	rjmp	.+8      	; 0x494 <__mulsf3+0x56>
     48c:	84 30       	cpi	r24, 0x04	; 4
     48e:	29 f4       	brne	.+10     	; 0x49a <__mulsf3+0x5c>
     490:	92 30       	cpi	r25, 0x02	; 2
     492:	81 f4       	brne	.+32     	; 0x4b4 <__mulsf3+0x76>
     494:	86 e7       	ldi	r24, 0x76	; 118
     496:	90 e0       	ldi	r25, 0x00	; 0
     498:	c6 c0       	rjmp	.+396    	; 0x626 <__mulsf3+0x1e8>
     49a:	92 30       	cpi	r25, 0x02	; 2
     49c:	49 f4       	brne	.+18     	; 0x4b0 <__mulsf3+0x72>
     49e:	20 e0       	ldi	r18, 0x00	; 0
     4a0:	9a 85       	ldd	r25, Y+10	; 0x0a
     4a2:	8a 89       	ldd	r24, Y+18	; 0x12
     4a4:	98 13       	cpse	r25, r24
     4a6:	21 e0       	ldi	r18, 0x01	; 1
     4a8:	2a 87       	std	Y+10, r18	; 0x0a
     4aa:	ce 01       	movw	r24, r28
     4ac:	09 96       	adiw	r24, 0x09	; 9
     4ae:	bb c0       	rjmp	.+374    	; 0x626 <__mulsf3+0x1e8>
     4b0:	82 30       	cpi	r24, 0x02	; 2
     4b2:	49 f4       	brne	.+18     	; 0x4c6 <__mulsf3+0x88>
     4b4:	20 e0       	ldi	r18, 0x00	; 0
     4b6:	9a 85       	ldd	r25, Y+10	; 0x0a
     4b8:	8a 89       	ldd	r24, Y+18	; 0x12
     4ba:	98 13       	cpse	r25, r24
     4bc:	21 e0       	ldi	r18, 0x01	; 1
     4be:	2a 8b       	std	Y+18, r18	; 0x12
     4c0:	ce 01       	movw	r24, r28
     4c2:	41 96       	adiw	r24, 0x11	; 17
     4c4:	b0 c0       	rjmp	.+352    	; 0x626 <__mulsf3+0x1e8>
     4c6:	2d 84       	ldd	r2, Y+13	; 0x0d
     4c8:	3e 84       	ldd	r3, Y+14	; 0x0e
     4ca:	4f 84       	ldd	r4, Y+15	; 0x0f
     4cc:	58 88       	ldd	r5, Y+16	; 0x10
     4ce:	6d 88       	ldd	r6, Y+21	; 0x15
     4d0:	7e 88       	ldd	r7, Y+22	; 0x16
     4d2:	8f 88       	ldd	r8, Y+23	; 0x17
     4d4:	98 8c       	ldd	r9, Y+24	; 0x18
     4d6:	ee 24       	eor	r14, r14
     4d8:	ff 24       	eor	r15, r15
     4da:	87 01       	movw	r16, r14
     4dc:	aa 24       	eor	r10, r10
     4de:	bb 24       	eor	r11, r11
     4e0:	65 01       	movw	r12, r10
     4e2:	40 e0       	ldi	r20, 0x00	; 0
     4e4:	50 e0       	ldi	r21, 0x00	; 0
     4e6:	60 e0       	ldi	r22, 0x00	; 0
     4e8:	70 e0       	ldi	r23, 0x00	; 0
     4ea:	e0 e0       	ldi	r30, 0x00	; 0
     4ec:	f0 e0       	ldi	r31, 0x00	; 0
     4ee:	c1 01       	movw	r24, r2
     4f0:	81 70       	andi	r24, 0x01	; 1
     4f2:	90 70       	andi	r25, 0x00	; 0
     4f4:	89 2b       	or	r24, r25
     4f6:	e9 f0       	breq	.+58     	; 0x532 <__mulsf3+0xf4>
     4f8:	e6 0c       	add	r14, r6
     4fa:	f7 1c       	adc	r15, r7
     4fc:	08 1d       	adc	r16, r8
     4fe:	19 1d       	adc	r17, r9
     500:	9a 01       	movw	r18, r20
     502:	ab 01       	movw	r20, r22
     504:	2a 0d       	add	r18, r10
     506:	3b 1d       	adc	r19, r11
     508:	4c 1d       	adc	r20, r12
     50a:	5d 1d       	adc	r21, r13
     50c:	80 e0       	ldi	r24, 0x00	; 0
     50e:	90 e0       	ldi	r25, 0x00	; 0
     510:	a0 e0       	ldi	r26, 0x00	; 0
     512:	b0 e0       	ldi	r27, 0x00	; 0
     514:	e6 14       	cp	r14, r6
     516:	f7 04       	cpc	r15, r7
     518:	08 05       	cpc	r16, r8
     51a:	19 05       	cpc	r17, r9
     51c:	20 f4       	brcc	.+8      	; 0x526 <__mulsf3+0xe8>
     51e:	81 e0       	ldi	r24, 0x01	; 1
     520:	90 e0       	ldi	r25, 0x00	; 0
     522:	a0 e0       	ldi	r26, 0x00	; 0
     524:	b0 e0       	ldi	r27, 0x00	; 0
     526:	ba 01       	movw	r22, r20
     528:	a9 01       	movw	r20, r18
     52a:	48 0f       	add	r20, r24
     52c:	59 1f       	adc	r21, r25
     52e:	6a 1f       	adc	r22, r26
     530:	7b 1f       	adc	r23, r27
     532:	aa 0c       	add	r10, r10
     534:	bb 1c       	adc	r11, r11
     536:	cc 1c       	adc	r12, r12
     538:	dd 1c       	adc	r13, r13
     53a:	97 fe       	sbrs	r9, 7
     53c:	08 c0       	rjmp	.+16     	; 0x54e <__mulsf3+0x110>
     53e:	81 e0       	ldi	r24, 0x01	; 1
     540:	90 e0       	ldi	r25, 0x00	; 0
     542:	a0 e0       	ldi	r26, 0x00	; 0
     544:	b0 e0       	ldi	r27, 0x00	; 0
     546:	a8 2a       	or	r10, r24
     548:	b9 2a       	or	r11, r25
     54a:	ca 2a       	or	r12, r26
     54c:	db 2a       	or	r13, r27
     54e:	31 96       	adiw	r30, 0x01	; 1
     550:	e0 32       	cpi	r30, 0x20	; 32
     552:	f1 05       	cpc	r31, r1
     554:	49 f0       	breq	.+18     	; 0x568 <__mulsf3+0x12a>
     556:	66 0c       	add	r6, r6
     558:	77 1c       	adc	r7, r7
     55a:	88 1c       	adc	r8, r8
     55c:	99 1c       	adc	r9, r9
     55e:	56 94       	lsr	r5
     560:	47 94       	ror	r4
     562:	37 94       	ror	r3
     564:	27 94       	ror	r2
     566:	c3 cf       	rjmp	.-122    	; 0x4ee <__mulsf3+0xb0>
     568:	fa 85       	ldd	r31, Y+10	; 0x0a
     56a:	ea 89       	ldd	r30, Y+18	; 0x12
     56c:	2b 89       	ldd	r18, Y+19	; 0x13
     56e:	3c 89       	ldd	r19, Y+20	; 0x14
     570:	8b 85       	ldd	r24, Y+11	; 0x0b
     572:	9c 85       	ldd	r25, Y+12	; 0x0c
     574:	28 0f       	add	r18, r24
     576:	39 1f       	adc	r19, r25
     578:	2e 5f       	subi	r18, 0xFE	; 254
     57a:	3f 4f       	sbci	r19, 0xFF	; 255
     57c:	17 c0       	rjmp	.+46     	; 0x5ac <__mulsf3+0x16e>
     57e:	ca 01       	movw	r24, r20
     580:	81 70       	andi	r24, 0x01	; 1
     582:	90 70       	andi	r25, 0x00	; 0
     584:	89 2b       	or	r24, r25
     586:	61 f0       	breq	.+24     	; 0x5a0 <__mulsf3+0x162>
     588:	16 95       	lsr	r17
     58a:	07 95       	ror	r16
     58c:	f7 94       	ror	r15
     58e:	e7 94       	ror	r14
     590:	80 e0       	ldi	r24, 0x00	; 0
     592:	90 e0       	ldi	r25, 0x00	; 0
     594:	a0 e0       	ldi	r26, 0x00	; 0
     596:	b0 e8       	ldi	r27, 0x80	; 128
     598:	e8 2a       	or	r14, r24
     59a:	f9 2a       	or	r15, r25
     59c:	0a 2b       	or	r16, r26
     59e:	1b 2b       	or	r17, r27
     5a0:	76 95       	lsr	r23
     5a2:	67 95       	ror	r22
     5a4:	57 95       	ror	r21
     5a6:	47 95       	ror	r20
     5a8:	2f 5f       	subi	r18, 0xFF	; 255
     5aa:	3f 4f       	sbci	r19, 0xFF	; 255
     5ac:	77 fd       	sbrc	r23, 7
     5ae:	e7 cf       	rjmp	.-50     	; 0x57e <__mulsf3+0x140>
     5b0:	0c c0       	rjmp	.+24     	; 0x5ca <__mulsf3+0x18c>
     5b2:	44 0f       	add	r20, r20
     5b4:	55 1f       	adc	r21, r21
     5b6:	66 1f       	adc	r22, r22
     5b8:	77 1f       	adc	r23, r23
     5ba:	17 fd       	sbrc	r17, 7
     5bc:	41 60       	ori	r20, 0x01	; 1
     5be:	ee 0c       	add	r14, r14
     5c0:	ff 1c       	adc	r15, r15
     5c2:	00 1f       	adc	r16, r16
     5c4:	11 1f       	adc	r17, r17
     5c6:	21 50       	subi	r18, 0x01	; 1
     5c8:	30 40       	sbci	r19, 0x00	; 0
     5ca:	40 30       	cpi	r20, 0x00	; 0
     5cc:	90 e0       	ldi	r25, 0x00	; 0
     5ce:	59 07       	cpc	r21, r25
     5d0:	90 e0       	ldi	r25, 0x00	; 0
     5d2:	69 07       	cpc	r22, r25
     5d4:	90 e4       	ldi	r25, 0x40	; 64
     5d6:	79 07       	cpc	r23, r25
     5d8:	60 f3       	brcs	.-40     	; 0x5b2 <__mulsf3+0x174>
     5da:	2b 8f       	std	Y+27, r18	; 0x1b
     5dc:	3c 8f       	std	Y+28, r19	; 0x1c
     5de:	db 01       	movw	r26, r22
     5e0:	ca 01       	movw	r24, r20
     5e2:	8f 77       	andi	r24, 0x7F	; 127
     5e4:	90 70       	andi	r25, 0x00	; 0
     5e6:	a0 70       	andi	r26, 0x00	; 0
     5e8:	b0 70       	andi	r27, 0x00	; 0
     5ea:	80 34       	cpi	r24, 0x40	; 64
     5ec:	91 05       	cpc	r25, r1
     5ee:	a1 05       	cpc	r26, r1
     5f0:	b1 05       	cpc	r27, r1
     5f2:	61 f4       	brne	.+24     	; 0x60c <__mulsf3+0x1ce>
     5f4:	47 fd       	sbrc	r20, 7
     5f6:	0a c0       	rjmp	.+20     	; 0x60c <__mulsf3+0x1ce>
     5f8:	e1 14       	cp	r14, r1
     5fa:	f1 04       	cpc	r15, r1
     5fc:	01 05       	cpc	r16, r1
     5fe:	11 05       	cpc	r17, r1
     600:	29 f0       	breq	.+10     	; 0x60c <__mulsf3+0x1ce>
     602:	40 5c       	subi	r20, 0xC0	; 192
     604:	5f 4f       	sbci	r21, 0xFF	; 255
     606:	6f 4f       	sbci	r22, 0xFF	; 255
     608:	7f 4f       	sbci	r23, 0xFF	; 255
     60a:	40 78       	andi	r20, 0x80	; 128
     60c:	1a 8e       	std	Y+26, r1	; 0x1a
     60e:	fe 17       	cp	r31, r30
     610:	11 f0       	breq	.+4      	; 0x616 <__mulsf3+0x1d8>
     612:	81 e0       	ldi	r24, 0x01	; 1
     614:	8a 8f       	std	Y+26, r24	; 0x1a
     616:	4d 8f       	std	Y+29, r20	; 0x1d
     618:	5e 8f       	std	Y+30, r21	; 0x1e
     61a:	6f 8f       	std	Y+31, r22	; 0x1f
     61c:	78 a3       	std	Y+32, r23	; 0x20
     61e:	83 e0       	ldi	r24, 0x03	; 3
     620:	89 8f       	std	Y+25, r24	; 0x19
     622:	ce 01       	movw	r24, r28
     624:	49 96       	adiw	r24, 0x19	; 25
     626:	0e 94 fd 03 	call	0x7fa	; 0x7fa <__pack_f>
     62a:	a0 96       	adiw	r28, 0x20	; 32
     62c:	e2 e1       	ldi	r30, 0x12	; 18
     62e:	0c 94 2f 1b 	jmp	0x365e	; 0x365e <__epilogue_restores__>

00000632 <__gtsf2>:
     632:	a8 e1       	ldi	r26, 0x18	; 24
     634:	b0 e0       	ldi	r27, 0x00	; 0
     636:	ef e1       	ldi	r30, 0x1F	; 31
     638:	f3 e0       	ldi	r31, 0x03	; 3
     63a:	0c 94 1f 1b 	jmp	0x363e	; 0x363e <__prologue_saves__+0x18>
     63e:	69 83       	std	Y+1, r22	; 0x01
     640:	7a 83       	std	Y+2, r23	; 0x02
     642:	8b 83       	std	Y+3, r24	; 0x03
     644:	9c 83       	std	Y+4, r25	; 0x04
     646:	2d 83       	std	Y+5, r18	; 0x05
     648:	3e 83       	std	Y+6, r19	; 0x06
     64a:	4f 83       	std	Y+7, r20	; 0x07
     64c:	58 87       	std	Y+8, r21	; 0x08
     64e:	89 e0       	ldi	r24, 0x09	; 9
     650:	e8 2e       	mov	r14, r24
     652:	f1 2c       	mov	r15, r1
     654:	ec 0e       	add	r14, r28
     656:	fd 1e       	adc	r15, r29
     658:	ce 01       	movw	r24, r28
     65a:	01 96       	adiw	r24, 0x01	; 1
     65c:	b7 01       	movw	r22, r14
     65e:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     662:	8e 01       	movw	r16, r28
     664:	0f 5e       	subi	r16, 0xEF	; 239
     666:	1f 4f       	sbci	r17, 0xFF	; 255
     668:	ce 01       	movw	r24, r28
     66a:	05 96       	adiw	r24, 0x05	; 5
     66c:	b8 01       	movw	r22, r16
     66e:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     672:	89 85       	ldd	r24, Y+9	; 0x09
     674:	82 30       	cpi	r24, 0x02	; 2
     676:	40 f0       	brcs	.+16     	; 0x688 <__gtsf2+0x56>
     678:	89 89       	ldd	r24, Y+17	; 0x11
     67a:	82 30       	cpi	r24, 0x02	; 2
     67c:	28 f0       	brcs	.+10     	; 0x688 <__gtsf2+0x56>
     67e:	c7 01       	movw	r24, r14
     680:	b8 01       	movw	r22, r16
     682:	0e 94 4a 05 	call	0xa94	; 0xa94 <__fpcmp_parts_f>
     686:	01 c0       	rjmp	.+2      	; 0x68a <__gtsf2+0x58>
     688:	8f ef       	ldi	r24, 0xFF	; 255
     68a:	68 96       	adiw	r28, 0x18	; 24
     68c:	e6 e0       	ldi	r30, 0x06	; 6
     68e:	0c 94 3b 1b 	jmp	0x3676	; 0x3676 <__epilogue_restores__+0x18>

00000692 <__gesf2>:
     692:	a8 e1       	ldi	r26, 0x18	; 24
     694:	b0 e0       	ldi	r27, 0x00	; 0
     696:	ef e4       	ldi	r30, 0x4F	; 79
     698:	f3 e0       	ldi	r31, 0x03	; 3
     69a:	0c 94 1f 1b 	jmp	0x363e	; 0x363e <__prologue_saves__+0x18>
     69e:	69 83       	std	Y+1, r22	; 0x01
     6a0:	7a 83       	std	Y+2, r23	; 0x02
     6a2:	8b 83       	std	Y+3, r24	; 0x03
     6a4:	9c 83       	std	Y+4, r25	; 0x04
     6a6:	2d 83       	std	Y+5, r18	; 0x05
     6a8:	3e 83       	std	Y+6, r19	; 0x06
     6aa:	4f 83       	std	Y+7, r20	; 0x07
     6ac:	58 87       	std	Y+8, r21	; 0x08
     6ae:	89 e0       	ldi	r24, 0x09	; 9
     6b0:	e8 2e       	mov	r14, r24
     6b2:	f1 2c       	mov	r15, r1
     6b4:	ec 0e       	add	r14, r28
     6b6:	fd 1e       	adc	r15, r29
     6b8:	ce 01       	movw	r24, r28
     6ba:	01 96       	adiw	r24, 0x01	; 1
     6bc:	b7 01       	movw	r22, r14
     6be:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     6c2:	8e 01       	movw	r16, r28
     6c4:	0f 5e       	subi	r16, 0xEF	; 239
     6c6:	1f 4f       	sbci	r17, 0xFF	; 255
     6c8:	ce 01       	movw	r24, r28
     6ca:	05 96       	adiw	r24, 0x05	; 5
     6cc:	b8 01       	movw	r22, r16
     6ce:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     6d2:	89 85       	ldd	r24, Y+9	; 0x09
     6d4:	82 30       	cpi	r24, 0x02	; 2
     6d6:	40 f0       	brcs	.+16     	; 0x6e8 <__gesf2+0x56>
     6d8:	89 89       	ldd	r24, Y+17	; 0x11
     6da:	82 30       	cpi	r24, 0x02	; 2
     6dc:	28 f0       	brcs	.+10     	; 0x6e8 <__gesf2+0x56>
     6de:	c7 01       	movw	r24, r14
     6e0:	b8 01       	movw	r22, r16
     6e2:	0e 94 4a 05 	call	0xa94	; 0xa94 <__fpcmp_parts_f>
     6e6:	01 c0       	rjmp	.+2      	; 0x6ea <__gesf2+0x58>
     6e8:	8f ef       	ldi	r24, 0xFF	; 255
     6ea:	68 96       	adiw	r28, 0x18	; 24
     6ec:	e6 e0       	ldi	r30, 0x06	; 6
     6ee:	0c 94 3b 1b 	jmp	0x3676	; 0x3676 <__epilogue_restores__+0x18>

000006f2 <__ltsf2>:
     6f2:	a8 e1       	ldi	r26, 0x18	; 24
     6f4:	b0 e0       	ldi	r27, 0x00	; 0
     6f6:	ef e7       	ldi	r30, 0x7F	; 127
     6f8:	f3 e0       	ldi	r31, 0x03	; 3
     6fa:	0c 94 1f 1b 	jmp	0x363e	; 0x363e <__prologue_saves__+0x18>
     6fe:	69 83       	std	Y+1, r22	; 0x01
     700:	7a 83       	std	Y+2, r23	; 0x02
     702:	8b 83       	std	Y+3, r24	; 0x03
     704:	9c 83       	std	Y+4, r25	; 0x04
     706:	2d 83       	std	Y+5, r18	; 0x05
     708:	3e 83       	std	Y+6, r19	; 0x06
     70a:	4f 83       	std	Y+7, r20	; 0x07
     70c:	58 87       	std	Y+8, r21	; 0x08
     70e:	89 e0       	ldi	r24, 0x09	; 9
     710:	e8 2e       	mov	r14, r24
     712:	f1 2c       	mov	r15, r1
     714:	ec 0e       	add	r14, r28
     716:	fd 1e       	adc	r15, r29
     718:	ce 01       	movw	r24, r28
     71a:	01 96       	adiw	r24, 0x01	; 1
     71c:	b7 01       	movw	r22, r14
     71e:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     722:	8e 01       	movw	r16, r28
     724:	0f 5e       	subi	r16, 0xEF	; 239
     726:	1f 4f       	sbci	r17, 0xFF	; 255
     728:	ce 01       	movw	r24, r28
     72a:	05 96       	adiw	r24, 0x05	; 5
     72c:	b8 01       	movw	r22, r16
     72e:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     732:	89 85       	ldd	r24, Y+9	; 0x09
     734:	82 30       	cpi	r24, 0x02	; 2
     736:	40 f0       	brcs	.+16     	; 0x748 <__ltsf2+0x56>
     738:	89 89       	ldd	r24, Y+17	; 0x11
     73a:	82 30       	cpi	r24, 0x02	; 2
     73c:	28 f0       	brcs	.+10     	; 0x748 <__ltsf2+0x56>
     73e:	c7 01       	movw	r24, r14
     740:	b8 01       	movw	r22, r16
     742:	0e 94 4a 05 	call	0xa94	; 0xa94 <__fpcmp_parts_f>
     746:	01 c0       	rjmp	.+2      	; 0x74a <__ltsf2+0x58>
     748:	81 e0       	ldi	r24, 0x01	; 1
     74a:	68 96       	adiw	r28, 0x18	; 24
     74c:	e6 e0       	ldi	r30, 0x06	; 6
     74e:	0c 94 3b 1b 	jmp	0x3676	; 0x3676 <__epilogue_restores__+0x18>

00000752 <__fixsfsi>:
     752:	ac e0       	ldi	r26, 0x0C	; 12
     754:	b0 e0       	ldi	r27, 0x00	; 0
     756:	ef ea       	ldi	r30, 0xAF	; 175
     758:	f3 e0       	ldi	r31, 0x03	; 3
     75a:	0c 94 23 1b 	jmp	0x3646	; 0x3646 <__prologue_saves__+0x20>
     75e:	69 83       	std	Y+1, r22	; 0x01
     760:	7a 83       	std	Y+2, r23	; 0x02
     762:	8b 83       	std	Y+3, r24	; 0x03
     764:	9c 83       	std	Y+4, r25	; 0x04
     766:	ce 01       	movw	r24, r28
     768:	01 96       	adiw	r24, 0x01	; 1
     76a:	be 01       	movw	r22, r28
     76c:	6b 5f       	subi	r22, 0xFB	; 251
     76e:	7f 4f       	sbci	r23, 0xFF	; 255
     770:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     774:	8d 81       	ldd	r24, Y+5	; 0x05
     776:	82 30       	cpi	r24, 0x02	; 2
     778:	61 f1       	breq	.+88     	; 0x7d2 <__fixsfsi+0x80>
     77a:	82 30       	cpi	r24, 0x02	; 2
     77c:	50 f1       	brcs	.+84     	; 0x7d2 <__fixsfsi+0x80>
     77e:	84 30       	cpi	r24, 0x04	; 4
     780:	21 f4       	brne	.+8      	; 0x78a <__fixsfsi+0x38>
     782:	8e 81       	ldd	r24, Y+6	; 0x06
     784:	88 23       	and	r24, r24
     786:	51 f1       	breq	.+84     	; 0x7dc <__fixsfsi+0x8a>
     788:	2e c0       	rjmp	.+92     	; 0x7e6 <__fixsfsi+0x94>
     78a:	2f 81       	ldd	r18, Y+7	; 0x07
     78c:	38 85       	ldd	r19, Y+8	; 0x08
     78e:	37 fd       	sbrc	r19, 7
     790:	20 c0       	rjmp	.+64     	; 0x7d2 <__fixsfsi+0x80>
     792:	6e 81       	ldd	r22, Y+6	; 0x06
     794:	2f 31       	cpi	r18, 0x1F	; 31
     796:	31 05       	cpc	r19, r1
     798:	1c f0       	brlt	.+6      	; 0x7a0 <__fixsfsi+0x4e>
     79a:	66 23       	and	r22, r22
     79c:	f9 f0       	breq	.+62     	; 0x7dc <__fixsfsi+0x8a>
     79e:	23 c0       	rjmp	.+70     	; 0x7e6 <__fixsfsi+0x94>
     7a0:	8e e1       	ldi	r24, 0x1E	; 30
     7a2:	90 e0       	ldi	r25, 0x00	; 0
     7a4:	82 1b       	sub	r24, r18
     7a6:	93 0b       	sbc	r25, r19
     7a8:	29 85       	ldd	r18, Y+9	; 0x09
     7aa:	3a 85       	ldd	r19, Y+10	; 0x0a
     7ac:	4b 85       	ldd	r20, Y+11	; 0x0b
     7ae:	5c 85       	ldd	r21, Y+12	; 0x0c
     7b0:	04 c0       	rjmp	.+8      	; 0x7ba <__fixsfsi+0x68>
     7b2:	56 95       	lsr	r21
     7b4:	47 95       	ror	r20
     7b6:	37 95       	ror	r19
     7b8:	27 95       	ror	r18
     7ba:	8a 95       	dec	r24
     7bc:	d2 f7       	brpl	.-12     	; 0x7b2 <__fixsfsi+0x60>
     7be:	66 23       	and	r22, r22
     7c0:	b1 f0       	breq	.+44     	; 0x7ee <__fixsfsi+0x9c>
     7c2:	50 95       	com	r21
     7c4:	40 95       	com	r20
     7c6:	30 95       	com	r19
     7c8:	21 95       	neg	r18
     7ca:	3f 4f       	sbci	r19, 0xFF	; 255
     7cc:	4f 4f       	sbci	r20, 0xFF	; 255
     7ce:	5f 4f       	sbci	r21, 0xFF	; 255
     7d0:	0e c0       	rjmp	.+28     	; 0x7ee <__fixsfsi+0x9c>
     7d2:	20 e0       	ldi	r18, 0x00	; 0
     7d4:	30 e0       	ldi	r19, 0x00	; 0
     7d6:	40 e0       	ldi	r20, 0x00	; 0
     7d8:	50 e0       	ldi	r21, 0x00	; 0
     7da:	09 c0       	rjmp	.+18     	; 0x7ee <__fixsfsi+0x9c>
     7dc:	2f ef       	ldi	r18, 0xFF	; 255
     7de:	3f ef       	ldi	r19, 0xFF	; 255
     7e0:	4f ef       	ldi	r20, 0xFF	; 255
     7e2:	5f e7       	ldi	r21, 0x7F	; 127
     7e4:	04 c0       	rjmp	.+8      	; 0x7ee <__fixsfsi+0x9c>
     7e6:	20 e0       	ldi	r18, 0x00	; 0
     7e8:	30 e0       	ldi	r19, 0x00	; 0
     7ea:	40 e0       	ldi	r20, 0x00	; 0
     7ec:	50 e8       	ldi	r21, 0x80	; 128
     7ee:	b9 01       	movw	r22, r18
     7f0:	ca 01       	movw	r24, r20
     7f2:	2c 96       	adiw	r28, 0x0c	; 12
     7f4:	e2 e0       	ldi	r30, 0x02	; 2
     7f6:	0c 94 3f 1b 	jmp	0x367e	; 0x367e <__epilogue_restores__+0x20>

000007fa <__pack_f>:
     7fa:	df 92       	push	r13
     7fc:	ef 92       	push	r14
     7fe:	ff 92       	push	r15
     800:	0f 93       	push	r16
     802:	1f 93       	push	r17
     804:	fc 01       	movw	r30, r24
     806:	e4 80       	ldd	r14, Z+4	; 0x04
     808:	f5 80       	ldd	r15, Z+5	; 0x05
     80a:	06 81       	ldd	r16, Z+6	; 0x06
     80c:	17 81       	ldd	r17, Z+7	; 0x07
     80e:	d1 80       	ldd	r13, Z+1	; 0x01
     810:	80 81       	ld	r24, Z
     812:	82 30       	cpi	r24, 0x02	; 2
     814:	48 f4       	brcc	.+18     	; 0x828 <__pack_f+0x2e>
     816:	80 e0       	ldi	r24, 0x00	; 0
     818:	90 e0       	ldi	r25, 0x00	; 0
     81a:	a0 e1       	ldi	r26, 0x10	; 16
     81c:	b0 e0       	ldi	r27, 0x00	; 0
     81e:	e8 2a       	or	r14, r24
     820:	f9 2a       	or	r15, r25
     822:	0a 2b       	or	r16, r26
     824:	1b 2b       	or	r17, r27
     826:	a5 c0       	rjmp	.+330    	; 0x972 <__stack+0x113>
     828:	84 30       	cpi	r24, 0x04	; 4
     82a:	09 f4       	brne	.+2      	; 0x82e <__pack_f+0x34>
     82c:	9f c0       	rjmp	.+318    	; 0x96c <__stack+0x10d>
     82e:	82 30       	cpi	r24, 0x02	; 2
     830:	21 f4       	brne	.+8      	; 0x83a <__pack_f+0x40>
     832:	ee 24       	eor	r14, r14
     834:	ff 24       	eor	r15, r15
     836:	87 01       	movw	r16, r14
     838:	05 c0       	rjmp	.+10     	; 0x844 <__pack_f+0x4a>
     83a:	e1 14       	cp	r14, r1
     83c:	f1 04       	cpc	r15, r1
     83e:	01 05       	cpc	r16, r1
     840:	11 05       	cpc	r17, r1
     842:	19 f4       	brne	.+6      	; 0x84a <__pack_f+0x50>
     844:	e0 e0       	ldi	r30, 0x00	; 0
     846:	f0 e0       	ldi	r31, 0x00	; 0
     848:	96 c0       	rjmp	.+300    	; 0x976 <__stack+0x117>
     84a:	62 81       	ldd	r22, Z+2	; 0x02
     84c:	73 81       	ldd	r23, Z+3	; 0x03
     84e:	9f ef       	ldi	r25, 0xFF	; 255
     850:	62 38       	cpi	r22, 0x82	; 130
     852:	79 07       	cpc	r23, r25
     854:	0c f0       	brlt	.+2      	; 0x858 <__pack_f+0x5e>
     856:	5b c0       	rjmp	.+182    	; 0x90e <__stack+0xaf>
     858:	22 e8       	ldi	r18, 0x82	; 130
     85a:	3f ef       	ldi	r19, 0xFF	; 255
     85c:	26 1b       	sub	r18, r22
     85e:	37 0b       	sbc	r19, r23
     860:	2a 31       	cpi	r18, 0x1A	; 26
     862:	31 05       	cpc	r19, r1
     864:	2c f0       	brlt	.+10     	; 0x870 <__stack+0x11>
     866:	20 e0       	ldi	r18, 0x00	; 0
     868:	30 e0       	ldi	r19, 0x00	; 0
     86a:	40 e0       	ldi	r20, 0x00	; 0
     86c:	50 e0       	ldi	r21, 0x00	; 0
     86e:	2a c0       	rjmp	.+84     	; 0x8c4 <__stack+0x65>
     870:	b8 01       	movw	r22, r16
     872:	a7 01       	movw	r20, r14
     874:	02 2e       	mov	r0, r18
     876:	04 c0       	rjmp	.+8      	; 0x880 <__stack+0x21>
     878:	76 95       	lsr	r23
     87a:	67 95       	ror	r22
     87c:	57 95       	ror	r21
     87e:	47 95       	ror	r20
     880:	0a 94       	dec	r0
     882:	d2 f7       	brpl	.-12     	; 0x878 <__stack+0x19>
     884:	81 e0       	ldi	r24, 0x01	; 1
     886:	90 e0       	ldi	r25, 0x00	; 0
     888:	a0 e0       	ldi	r26, 0x00	; 0
     88a:	b0 e0       	ldi	r27, 0x00	; 0
     88c:	04 c0       	rjmp	.+8      	; 0x896 <__stack+0x37>
     88e:	88 0f       	add	r24, r24
     890:	99 1f       	adc	r25, r25
     892:	aa 1f       	adc	r26, r26
     894:	bb 1f       	adc	r27, r27
     896:	2a 95       	dec	r18
     898:	d2 f7       	brpl	.-12     	; 0x88e <__stack+0x2f>
     89a:	01 97       	sbiw	r24, 0x01	; 1
     89c:	a1 09       	sbc	r26, r1
     89e:	b1 09       	sbc	r27, r1
     8a0:	8e 21       	and	r24, r14
     8a2:	9f 21       	and	r25, r15
     8a4:	a0 23       	and	r26, r16
     8a6:	b1 23       	and	r27, r17
     8a8:	00 97       	sbiw	r24, 0x00	; 0
     8aa:	a1 05       	cpc	r26, r1
     8ac:	b1 05       	cpc	r27, r1
     8ae:	21 f0       	breq	.+8      	; 0x8b8 <__stack+0x59>
     8b0:	81 e0       	ldi	r24, 0x01	; 1
     8b2:	90 e0       	ldi	r25, 0x00	; 0
     8b4:	a0 e0       	ldi	r26, 0x00	; 0
     8b6:	b0 e0       	ldi	r27, 0x00	; 0
     8b8:	9a 01       	movw	r18, r20
     8ba:	ab 01       	movw	r20, r22
     8bc:	28 2b       	or	r18, r24
     8be:	39 2b       	or	r19, r25
     8c0:	4a 2b       	or	r20, r26
     8c2:	5b 2b       	or	r21, r27
     8c4:	da 01       	movw	r26, r20
     8c6:	c9 01       	movw	r24, r18
     8c8:	8f 77       	andi	r24, 0x7F	; 127
     8ca:	90 70       	andi	r25, 0x00	; 0
     8cc:	a0 70       	andi	r26, 0x00	; 0
     8ce:	b0 70       	andi	r27, 0x00	; 0
     8d0:	80 34       	cpi	r24, 0x40	; 64
     8d2:	91 05       	cpc	r25, r1
     8d4:	a1 05       	cpc	r26, r1
     8d6:	b1 05       	cpc	r27, r1
     8d8:	39 f4       	brne	.+14     	; 0x8e8 <__stack+0x89>
     8da:	27 ff       	sbrs	r18, 7
     8dc:	09 c0       	rjmp	.+18     	; 0x8f0 <__stack+0x91>
     8de:	20 5c       	subi	r18, 0xC0	; 192
     8e0:	3f 4f       	sbci	r19, 0xFF	; 255
     8e2:	4f 4f       	sbci	r20, 0xFF	; 255
     8e4:	5f 4f       	sbci	r21, 0xFF	; 255
     8e6:	04 c0       	rjmp	.+8      	; 0x8f0 <__stack+0x91>
     8e8:	21 5c       	subi	r18, 0xC1	; 193
     8ea:	3f 4f       	sbci	r19, 0xFF	; 255
     8ec:	4f 4f       	sbci	r20, 0xFF	; 255
     8ee:	5f 4f       	sbci	r21, 0xFF	; 255
     8f0:	e0 e0       	ldi	r30, 0x00	; 0
     8f2:	f0 e0       	ldi	r31, 0x00	; 0
     8f4:	20 30       	cpi	r18, 0x00	; 0
     8f6:	a0 e0       	ldi	r26, 0x00	; 0
     8f8:	3a 07       	cpc	r19, r26
     8fa:	a0 e0       	ldi	r26, 0x00	; 0
     8fc:	4a 07       	cpc	r20, r26
     8fe:	a0 e4       	ldi	r26, 0x40	; 64
     900:	5a 07       	cpc	r21, r26
     902:	10 f0       	brcs	.+4      	; 0x908 <__stack+0xa9>
     904:	e1 e0       	ldi	r30, 0x01	; 1
     906:	f0 e0       	ldi	r31, 0x00	; 0
     908:	79 01       	movw	r14, r18
     90a:	8a 01       	movw	r16, r20
     90c:	27 c0       	rjmp	.+78     	; 0x95c <__stack+0xfd>
     90e:	60 38       	cpi	r22, 0x80	; 128
     910:	71 05       	cpc	r23, r1
     912:	64 f5       	brge	.+88     	; 0x96c <__stack+0x10d>
     914:	fb 01       	movw	r30, r22
     916:	e1 58       	subi	r30, 0x81	; 129
     918:	ff 4f       	sbci	r31, 0xFF	; 255
     91a:	d8 01       	movw	r26, r16
     91c:	c7 01       	movw	r24, r14
     91e:	8f 77       	andi	r24, 0x7F	; 127
     920:	90 70       	andi	r25, 0x00	; 0
     922:	a0 70       	andi	r26, 0x00	; 0
     924:	b0 70       	andi	r27, 0x00	; 0
     926:	80 34       	cpi	r24, 0x40	; 64
     928:	91 05       	cpc	r25, r1
     92a:	a1 05       	cpc	r26, r1
     92c:	b1 05       	cpc	r27, r1
     92e:	39 f4       	brne	.+14     	; 0x93e <__stack+0xdf>
     930:	e7 fe       	sbrs	r14, 7
     932:	0d c0       	rjmp	.+26     	; 0x94e <__stack+0xef>
     934:	80 e4       	ldi	r24, 0x40	; 64
     936:	90 e0       	ldi	r25, 0x00	; 0
     938:	a0 e0       	ldi	r26, 0x00	; 0
     93a:	b0 e0       	ldi	r27, 0x00	; 0
     93c:	04 c0       	rjmp	.+8      	; 0x946 <__stack+0xe7>
     93e:	8f e3       	ldi	r24, 0x3F	; 63
     940:	90 e0       	ldi	r25, 0x00	; 0
     942:	a0 e0       	ldi	r26, 0x00	; 0
     944:	b0 e0       	ldi	r27, 0x00	; 0
     946:	e8 0e       	add	r14, r24
     948:	f9 1e       	adc	r15, r25
     94a:	0a 1f       	adc	r16, r26
     94c:	1b 1f       	adc	r17, r27
     94e:	17 ff       	sbrs	r17, 7
     950:	05 c0       	rjmp	.+10     	; 0x95c <__stack+0xfd>
     952:	16 95       	lsr	r17
     954:	07 95       	ror	r16
     956:	f7 94       	ror	r15
     958:	e7 94       	ror	r14
     95a:	31 96       	adiw	r30, 0x01	; 1
     95c:	87 e0       	ldi	r24, 0x07	; 7
     95e:	16 95       	lsr	r17
     960:	07 95       	ror	r16
     962:	f7 94       	ror	r15
     964:	e7 94       	ror	r14
     966:	8a 95       	dec	r24
     968:	d1 f7       	brne	.-12     	; 0x95e <__stack+0xff>
     96a:	05 c0       	rjmp	.+10     	; 0x976 <__stack+0x117>
     96c:	ee 24       	eor	r14, r14
     96e:	ff 24       	eor	r15, r15
     970:	87 01       	movw	r16, r14
     972:	ef ef       	ldi	r30, 0xFF	; 255
     974:	f0 e0       	ldi	r31, 0x00	; 0
     976:	6e 2f       	mov	r22, r30
     978:	67 95       	ror	r22
     97a:	66 27       	eor	r22, r22
     97c:	67 95       	ror	r22
     97e:	90 2f       	mov	r25, r16
     980:	9f 77       	andi	r25, 0x7F	; 127
     982:	d7 94       	ror	r13
     984:	dd 24       	eor	r13, r13
     986:	d7 94       	ror	r13
     988:	8e 2f       	mov	r24, r30
     98a:	86 95       	lsr	r24
     98c:	49 2f       	mov	r20, r25
     98e:	46 2b       	or	r20, r22
     990:	58 2f       	mov	r21, r24
     992:	5d 29       	or	r21, r13
     994:	b7 01       	movw	r22, r14
     996:	ca 01       	movw	r24, r20
     998:	1f 91       	pop	r17
     99a:	0f 91       	pop	r16
     99c:	ff 90       	pop	r15
     99e:	ef 90       	pop	r14
     9a0:	df 90       	pop	r13
     9a2:	08 95       	ret

000009a4 <__unpack_f>:
     9a4:	fc 01       	movw	r30, r24
     9a6:	db 01       	movw	r26, r22
     9a8:	40 81       	ld	r20, Z
     9aa:	51 81       	ldd	r21, Z+1	; 0x01
     9ac:	22 81       	ldd	r18, Z+2	; 0x02
     9ae:	62 2f       	mov	r22, r18
     9b0:	6f 77       	andi	r22, 0x7F	; 127
     9b2:	70 e0       	ldi	r23, 0x00	; 0
     9b4:	22 1f       	adc	r18, r18
     9b6:	22 27       	eor	r18, r18
     9b8:	22 1f       	adc	r18, r18
     9ba:	93 81       	ldd	r25, Z+3	; 0x03
     9bc:	89 2f       	mov	r24, r25
     9be:	88 0f       	add	r24, r24
     9c0:	82 2b       	or	r24, r18
     9c2:	28 2f       	mov	r18, r24
     9c4:	30 e0       	ldi	r19, 0x00	; 0
     9c6:	99 1f       	adc	r25, r25
     9c8:	99 27       	eor	r25, r25
     9ca:	99 1f       	adc	r25, r25
     9cc:	11 96       	adiw	r26, 0x01	; 1
     9ce:	9c 93       	st	X, r25
     9d0:	11 97       	sbiw	r26, 0x01	; 1
     9d2:	21 15       	cp	r18, r1
     9d4:	31 05       	cpc	r19, r1
     9d6:	a9 f5       	brne	.+106    	; 0xa42 <__unpack_f+0x9e>
     9d8:	41 15       	cp	r20, r1
     9da:	51 05       	cpc	r21, r1
     9dc:	61 05       	cpc	r22, r1
     9de:	71 05       	cpc	r23, r1
     9e0:	11 f4       	brne	.+4      	; 0x9e6 <__unpack_f+0x42>
     9e2:	82 e0       	ldi	r24, 0x02	; 2
     9e4:	37 c0       	rjmp	.+110    	; 0xa54 <__unpack_f+0xb0>
     9e6:	82 e8       	ldi	r24, 0x82	; 130
     9e8:	9f ef       	ldi	r25, 0xFF	; 255
     9ea:	13 96       	adiw	r26, 0x03	; 3
     9ec:	9c 93       	st	X, r25
     9ee:	8e 93       	st	-X, r24
     9f0:	12 97       	sbiw	r26, 0x02	; 2
     9f2:	9a 01       	movw	r18, r20
     9f4:	ab 01       	movw	r20, r22
     9f6:	67 e0       	ldi	r22, 0x07	; 7
     9f8:	22 0f       	add	r18, r18
     9fa:	33 1f       	adc	r19, r19
     9fc:	44 1f       	adc	r20, r20
     9fe:	55 1f       	adc	r21, r21
     a00:	6a 95       	dec	r22
     a02:	d1 f7       	brne	.-12     	; 0x9f8 <__unpack_f+0x54>
     a04:	83 e0       	ldi	r24, 0x03	; 3
     a06:	8c 93       	st	X, r24
     a08:	0d c0       	rjmp	.+26     	; 0xa24 <__unpack_f+0x80>
     a0a:	22 0f       	add	r18, r18
     a0c:	33 1f       	adc	r19, r19
     a0e:	44 1f       	adc	r20, r20
     a10:	55 1f       	adc	r21, r21
     a12:	12 96       	adiw	r26, 0x02	; 2
     a14:	8d 91       	ld	r24, X+
     a16:	9c 91       	ld	r25, X
     a18:	13 97       	sbiw	r26, 0x03	; 3
     a1a:	01 97       	sbiw	r24, 0x01	; 1
     a1c:	13 96       	adiw	r26, 0x03	; 3
     a1e:	9c 93       	st	X, r25
     a20:	8e 93       	st	-X, r24
     a22:	12 97       	sbiw	r26, 0x02	; 2
     a24:	20 30       	cpi	r18, 0x00	; 0
     a26:	80 e0       	ldi	r24, 0x00	; 0
     a28:	38 07       	cpc	r19, r24
     a2a:	80 e0       	ldi	r24, 0x00	; 0
     a2c:	48 07       	cpc	r20, r24
     a2e:	80 e4       	ldi	r24, 0x40	; 64
     a30:	58 07       	cpc	r21, r24
     a32:	58 f3       	brcs	.-42     	; 0xa0a <__unpack_f+0x66>
     a34:	14 96       	adiw	r26, 0x04	; 4
     a36:	2d 93       	st	X+, r18
     a38:	3d 93       	st	X+, r19
     a3a:	4d 93       	st	X+, r20
     a3c:	5c 93       	st	X, r21
     a3e:	17 97       	sbiw	r26, 0x07	; 7
     a40:	08 95       	ret
     a42:	2f 3f       	cpi	r18, 0xFF	; 255
     a44:	31 05       	cpc	r19, r1
     a46:	79 f4       	brne	.+30     	; 0xa66 <__unpack_f+0xc2>
     a48:	41 15       	cp	r20, r1
     a4a:	51 05       	cpc	r21, r1
     a4c:	61 05       	cpc	r22, r1
     a4e:	71 05       	cpc	r23, r1
     a50:	19 f4       	brne	.+6      	; 0xa58 <__unpack_f+0xb4>
     a52:	84 e0       	ldi	r24, 0x04	; 4
     a54:	8c 93       	st	X, r24
     a56:	08 95       	ret
     a58:	64 ff       	sbrs	r22, 4
     a5a:	03 c0       	rjmp	.+6      	; 0xa62 <__unpack_f+0xbe>
     a5c:	81 e0       	ldi	r24, 0x01	; 1
     a5e:	8c 93       	st	X, r24
     a60:	12 c0       	rjmp	.+36     	; 0xa86 <__unpack_f+0xe2>
     a62:	1c 92       	st	X, r1
     a64:	10 c0       	rjmp	.+32     	; 0xa86 <__unpack_f+0xe2>
     a66:	2f 57       	subi	r18, 0x7F	; 127
     a68:	30 40       	sbci	r19, 0x00	; 0
     a6a:	13 96       	adiw	r26, 0x03	; 3
     a6c:	3c 93       	st	X, r19
     a6e:	2e 93       	st	-X, r18
     a70:	12 97       	sbiw	r26, 0x02	; 2
     a72:	83 e0       	ldi	r24, 0x03	; 3
     a74:	8c 93       	st	X, r24
     a76:	87 e0       	ldi	r24, 0x07	; 7
     a78:	44 0f       	add	r20, r20
     a7a:	55 1f       	adc	r21, r21
     a7c:	66 1f       	adc	r22, r22
     a7e:	77 1f       	adc	r23, r23
     a80:	8a 95       	dec	r24
     a82:	d1 f7       	brne	.-12     	; 0xa78 <__unpack_f+0xd4>
     a84:	70 64       	ori	r23, 0x40	; 64
     a86:	14 96       	adiw	r26, 0x04	; 4
     a88:	4d 93       	st	X+, r20
     a8a:	5d 93       	st	X+, r21
     a8c:	6d 93       	st	X+, r22
     a8e:	7c 93       	st	X, r23
     a90:	17 97       	sbiw	r26, 0x07	; 7
     a92:	08 95       	ret

00000a94 <__fpcmp_parts_f>:
     a94:	1f 93       	push	r17
     a96:	dc 01       	movw	r26, r24
     a98:	fb 01       	movw	r30, r22
     a9a:	9c 91       	ld	r25, X
     a9c:	92 30       	cpi	r25, 0x02	; 2
     a9e:	08 f4       	brcc	.+2      	; 0xaa2 <__fpcmp_parts_f+0xe>
     aa0:	47 c0       	rjmp	.+142    	; 0xb30 <__fpcmp_parts_f+0x9c>
     aa2:	80 81       	ld	r24, Z
     aa4:	82 30       	cpi	r24, 0x02	; 2
     aa6:	08 f4       	brcc	.+2      	; 0xaaa <__fpcmp_parts_f+0x16>
     aa8:	43 c0       	rjmp	.+134    	; 0xb30 <__fpcmp_parts_f+0x9c>
     aaa:	94 30       	cpi	r25, 0x04	; 4
     aac:	51 f4       	brne	.+20     	; 0xac2 <__fpcmp_parts_f+0x2e>
     aae:	11 96       	adiw	r26, 0x01	; 1
     ab0:	1c 91       	ld	r17, X
     ab2:	84 30       	cpi	r24, 0x04	; 4
     ab4:	99 f5       	brne	.+102    	; 0xb1c <__fpcmp_parts_f+0x88>
     ab6:	81 81       	ldd	r24, Z+1	; 0x01
     ab8:	68 2f       	mov	r22, r24
     aba:	70 e0       	ldi	r23, 0x00	; 0
     abc:	61 1b       	sub	r22, r17
     abe:	71 09       	sbc	r23, r1
     ac0:	3f c0       	rjmp	.+126    	; 0xb40 <__fpcmp_parts_f+0xac>
     ac2:	84 30       	cpi	r24, 0x04	; 4
     ac4:	21 f0       	breq	.+8      	; 0xace <__fpcmp_parts_f+0x3a>
     ac6:	92 30       	cpi	r25, 0x02	; 2
     ac8:	31 f4       	brne	.+12     	; 0xad6 <__fpcmp_parts_f+0x42>
     aca:	82 30       	cpi	r24, 0x02	; 2
     acc:	b9 f1       	breq	.+110    	; 0xb3c <__fpcmp_parts_f+0xa8>
     ace:	81 81       	ldd	r24, Z+1	; 0x01
     ad0:	88 23       	and	r24, r24
     ad2:	89 f1       	breq	.+98     	; 0xb36 <__fpcmp_parts_f+0xa2>
     ad4:	2d c0       	rjmp	.+90     	; 0xb30 <__fpcmp_parts_f+0x9c>
     ad6:	11 96       	adiw	r26, 0x01	; 1
     ad8:	1c 91       	ld	r17, X
     ada:	11 97       	sbiw	r26, 0x01	; 1
     adc:	82 30       	cpi	r24, 0x02	; 2
     ade:	f1 f0       	breq	.+60     	; 0xb1c <__fpcmp_parts_f+0x88>
     ae0:	81 81       	ldd	r24, Z+1	; 0x01
     ae2:	18 17       	cp	r17, r24
     ae4:	d9 f4       	brne	.+54     	; 0xb1c <__fpcmp_parts_f+0x88>
     ae6:	12 96       	adiw	r26, 0x02	; 2
     ae8:	2d 91       	ld	r18, X+
     aea:	3c 91       	ld	r19, X
     aec:	13 97       	sbiw	r26, 0x03	; 3
     aee:	82 81       	ldd	r24, Z+2	; 0x02
     af0:	93 81       	ldd	r25, Z+3	; 0x03
     af2:	82 17       	cp	r24, r18
     af4:	93 07       	cpc	r25, r19
     af6:	94 f0       	brlt	.+36     	; 0xb1c <__fpcmp_parts_f+0x88>
     af8:	28 17       	cp	r18, r24
     afa:	39 07       	cpc	r19, r25
     afc:	bc f0       	brlt	.+46     	; 0xb2c <__fpcmp_parts_f+0x98>
     afe:	14 96       	adiw	r26, 0x04	; 4
     b00:	8d 91       	ld	r24, X+
     b02:	9d 91       	ld	r25, X+
     b04:	0d 90       	ld	r0, X+
     b06:	bc 91       	ld	r27, X
     b08:	a0 2d       	mov	r26, r0
     b0a:	24 81       	ldd	r18, Z+4	; 0x04
     b0c:	35 81       	ldd	r19, Z+5	; 0x05
     b0e:	46 81       	ldd	r20, Z+6	; 0x06
     b10:	57 81       	ldd	r21, Z+7	; 0x07
     b12:	28 17       	cp	r18, r24
     b14:	39 07       	cpc	r19, r25
     b16:	4a 07       	cpc	r20, r26
     b18:	5b 07       	cpc	r21, r27
     b1a:	18 f4       	brcc	.+6      	; 0xb22 <__fpcmp_parts_f+0x8e>
     b1c:	11 23       	and	r17, r17
     b1e:	41 f0       	breq	.+16     	; 0xb30 <__fpcmp_parts_f+0x9c>
     b20:	0a c0       	rjmp	.+20     	; 0xb36 <__fpcmp_parts_f+0xa2>
     b22:	82 17       	cp	r24, r18
     b24:	93 07       	cpc	r25, r19
     b26:	a4 07       	cpc	r26, r20
     b28:	b5 07       	cpc	r27, r21
     b2a:	40 f4       	brcc	.+16     	; 0xb3c <__fpcmp_parts_f+0xa8>
     b2c:	11 23       	and	r17, r17
     b2e:	19 f0       	breq	.+6      	; 0xb36 <__fpcmp_parts_f+0xa2>
     b30:	61 e0       	ldi	r22, 0x01	; 1
     b32:	70 e0       	ldi	r23, 0x00	; 0
     b34:	05 c0       	rjmp	.+10     	; 0xb40 <__fpcmp_parts_f+0xac>
     b36:	6f ef       	ldi	r22, 0xFF	; 255
     b38:	7f ef       	ldi	r23, 0xFF	; 255
     b3a:	02 c0       	rjmp	.+4      	; 0xb40 <__fpcmp_parts_f+0xac>
     b3c:	60 e0       	ldi	r22, 0x00	; 0
     b3e:	70 e0       	ldi	r23, 0x00	; 0
     b40:	cb 01       	movw	r24, r22
     b42:	1f 91       	pop	r17
     b44:	08 95       	ret

00000b46 <Calculator_Run>:
#include "LCD.h"
#include "Calculator.h"

//u8 Calculator_GetRealNumber (Keypad_ButtonType button);

void Calculator_Run(void) {
     b46:	df 93       	push	r29
     b48:	cf 93       	push	r28
     b4a:	cd b7       	in	r28, 0x3d	; 61
     b4c:	de b7       	in	r29, 0x3e	; 62
     b4e:	2d 97       	sbiw	r28, 0x0d	; 13
     b50:	0f b6       	in	r0, 0x3f	; 63
     b52:	f8 94       	cli
     b54:	de bf       	out	0x3e, r29	; 62
     b56:	0f be       	out	0x3f, r0	; 63
     b58:	cd bf       	out	0x3d, r28	; 61
    s8 num1=0, num2=0, operation=0, result=0;
     b5a:	19 86       	std	Y+9, r1	; 0x09
     b5c:	18 86       	std	Y+8, r1	; 0x08
     b5e:	1f 82       	std	Y+7, r1	; 0x07
     b60:	1e 82       	std	Y+6, r1	; 0x06
    u8 num1_flag=0, num2_flag=0, operation_flag=0, result_flag=0;
     b62:	1d 82       	std	Y+5, r1	; 0x05
     b64:	1c 82       	std	Y+4, r1	; 0x04
     b66:	1b 82       	std	Y+3, r1	; 0x03
     b68:	1a 82       	std	Y+2, r1	; 0x02
    Keypad_ButtonType pressed_button;
    while (1)
    {
        /* Wait for user input */
        do {
            pressed_button = Keypad_GetPressedButton();
     b6a:	0e 94 42 0f 	call	0x1e84	; 0x1e84 <Keypad_GetPressedButton>
     b6e:	89 83       	std	Y+1, r24	; 0x01
        }
        while (pressed_button == KEYPAD_BUTTON_INVALID);
     b70:	89 81       	ldd	r24, Y+1	; 0x01
     b72:	80 31       	cpi	r24, 0x10	; 16
     b74:	d1 f3       	breq	.-12     	; 0xb6a <Calculator_Run+0x24>

        if (pressed_button == CALCULATOR_BUTTON_CLR) {
     b76:	89 81       	ldd	r24, Y+1	; 0x01
     b78:	88 23       	and	r24, r24
     b7a:	39 f4       	brne	.+14     	; 0xb8a <Calculator_Run+0x44>
            num1_flag = 0;
     b7c:	1d 82       	std	Y+5, r1	; 0x05
            num2_flag = 0;
     b7e:	1c 82       	std	Y+4, r1	; 0x04
            operation_flag = 0;
     b80:	1b 82       	std	Y+3, r1	; 0x03
            result_flag = 0;
     b82:	1a 82       	std	Y+2, r1	; 0x02
            LCD_Clear();
     b84:	0e 94 07 10 	call	0x200e	; 0x200e <LCD_Clear>
     b88:	f0 cf       	rjmp	.-32     	; 0xb6a <Calculator_Run+0x24>
            continue;
        }
        if (num1_flag == 0) {
     b8a:	8d 81       	ldd	r24, Y+5	; 0x05
     b8c:	88 23       	and	r24, r24
     b8e:	61 f4       	brne	.+24     	; 0xba8 <Calculator_Run+0x62>
            num1_flag = 1;
     b90:	81 e0       	ldi	r24, 0x01	; 1
     b92:	8d 83       	std	Y+5, r24	; 0x05
            num1 = Calculator_GetRealNumber(pressed_button);
     b94:	89 81       	ldd	r24, Y+1	; 0x01
     b96:	0e 94 69 06 	call	0xcd2	; 0xcd2 <Calculator_GetRealNumber>
     b9a:	89 87       	std	Y+9, r24	; 0x09
            LCD_DisplayNumber(num1);
     b9c:	89 85       	ldd	r24, Y+9	; 0x09
     b9e:	88 2f       	mov	r24, r24
     ba0:	90 e0       	ldi	r25, 0x00	; 0
     ba2:	0e 94 6b 10 	call	0x20d6	; 0x20d6 <LCD_DisplayNumber>
     ba6:	e1 cf       	rjmp	.-62     	; 0xb6a <Calculator_Run+0x24>
        }
        else if (operation_flag == 0) {
     ba8:	8b 81       	ldd	r24, Y+3	; 0x03
     baa:	88 23       	and	r24, r24
     bac:	89 f5       	brne	.+98     	; 0xc10 <Calculator_Run+0xca>
            operation_flag = 1;
     bae:	81 e0       	ldi	r24, 0x01	; 1
     bb0:	8b 83       	std	Y+3, r24	; 0x03
            switch (pressed_button)
     bb2:	89 81       	ldd	r24, Y+1	; 0x01
     bb4:	28 2f       	mov	r18, r24
     bb6:	30 e0       	ldi	r19, 0x00	; 0
     bb8:	3d 87       	std	Y+13, r19	; 0x0d
     bba:	2c 87       	std	Y+12, r18	; 0x0c
     bbc:	8c 85       	ldd	r24, Y+12	; 0x0c
     bbe:	9d 85       	ldd	r25, Y+13	; 0x0d
     bc0:	87 30       	cpi	r24, 0x07	; 7
     bc2:	91 05       	cpc	r25, r1
     bc4:	c9 f0       	breq	.+50     	; 0xbf8 <Calculator_Run+0xb2>
     bc6:	2c 85       	ldd	r18, Y+12	; 0x0c
     bc8:	3d 85       	ldd	r19, Y+13	; 0x0d
     bca:	28 30       	cpi	r18, 0x08	; 8
     bcc:	31 05       	cpc	r19, r1
     bce:	34 f4       	brge	.+12     	; 0xbdc <Calculator_Run+0x96>
     bd0:	8c 85       	ldd	r24, Y+12	; 0x0c
     bd2:	9d 85       	ldd	r25, Y+13	; 0x0d
     bd4:	83 30       	cpi	r24, 0x03	; 3
     bd6:	91 05       	cpc	r25, r1
     bd8:	61 f0       	breq	.+24     	; 0xbf2 <Calculator_Run+0xac>
     bda:	16 c0       	rjmp	.+44     	; 0xc08 <Calculator_Run+0xc2>
     bdc:	2c 85       	ldd	r18, Y+12	; 0x0c
     bde:	3d 85       	ldd	r19, Y+13	; 0x0d
     be0:	2b 30       	cpi	r18, 0x0B	; 11
     be2:	31 05       	cpc	r19, r1
     be4:	61 f0       	breq	.+24     	; 0xbfe <Calculator_Run+0xb8>
     be6:	8c 85       	ldd	r24, Y+12	; 0x0c
     be8:	9d 85       	ldd	r25, Y+13	; 0x0d
     bea:	8f 30       	cpi	r24, 0x0F	; 15
     bec:	91 05       	cpc	r25, r1
     bee:	51 f0       	breq	.+20     	; 0xc04 <Calculator_Run+0xbe>
     bf0:	0b c0       	rjmp	.+22     	; 0xc08 <Calculator_Run+0xc2>
            {
            case CALCULATOR_BUTTON_PLUS:
                operation = '+';
     bf2:	8b e2       	ldi	r24, 0x2B	; 43
     bf4:	8f 83       	std	Y+7, r24	; 0x07
     bf6:	08 c0       	rjmp	.+16     	; 0xc08 <Calculator_Run+0xc2>
                break;
            case CALCULATOR_BUTTON_MINUS:
                operation = '-';
     bf8:	8d e2       	ldi	r24, 0x2D	; 45
     bfa:	8f 83       	std	Y+7, r24	; 0x07
     bfc:	05 c0       	rjmp	.+10     	; 0xc08 <Calculator_Run+0xc2>
                break;
            case CALCULATOR_BUTTON_MUL:
                operation = '*';
     bfe:	8a e2       	ldi	r24, 0x2A	; 42
     c00:	8f 83       	std	Y+7, r24	; 0x07
     c02:	02 c0       	rjmp	.+4      	; 0xc08 <Calculator_Run+0xc2>
                break;
            case CALCULATOR_BUTTON_DIV:
                operation = '/';
     c04:	8f e2       	ldi	r24, 0x2F	; 47
     c06:	8f 83       	std	Y+7, r24	; 0x07
                break;
            default:
                break;
            }
            LCD_DisplayCharacter(operation);
     c08:	8f 81       	ldd	r24, Y+7	; 0x07
     c0a:	0e 94 11 10 	call	0x2022	; 0x2022 <LCD_DisplayCharacter>
     c0e:	ad cf       	rjmp	.-166    	; 0xb6a <Calculator_Run+0x24>
        }
        else if (num2_flag == 0) {
     c10:	8c 81       	ldd	r24, Y+4	; 0x04
     c12:	88 23       	and	r24, r24
     c14:	61 f4       	brne	.+24     	; 0xc2e <Calculator_Run+0xe8>
            num2_flag = 1;
     c16:	81 e0       	ldi	r24, 0x01	; 1
     c18:	8c 83       	std	Y+4, r24	; 0x04
            num2 = Calculator_GetRealNumber(pressed_button);
     c1a:	89 81       	ldd	r24, Y+1	; 0x01
     c1c:	0e 94 69 06 	call	0xcd2	; 0xcd2 <Calculator_GetRealNumber>
     c20:	88 87       	std	Y+8, r24	; 0x08
            LCD_DisplayNumber(num2);
     c22:	88 85       	ldd	r24, Y+8	; 0x08
     c24:	88 2f       	mov	r24, r24
     c26:	90 e0       	ldi	r25, 0x00	; 0
     c28:	0e 94 6b 10 	call	0x20d6	; 0x20d6 <LCD_DisplayNumber>
     c2c:	9e cf       	rjmp	.-196    	; 0xb6a <Calculator_Run+0x24>
        }
        else if (result_flag == 0) {
     c2e:	8a 81       	ldd	r24, Y+2	; 0x02
     c30:	88 23       	and	r24, r24
     c32:	09 f0       	breq	.+2      	; 0xc36 <Calculator_Run+0xf0>
     c34:	9a cf       	rjmp	.-204    	; 0xb6a <Calculator_Run+0x24>
            if (pressed_button == CALCULATOR_BUTTON_EQUAL) {
     c36:	89 81       	ldd	r24, Y+1	; 0x01
     c38:	82 30       	cpi	r24, 0x02	; 2
     c3a:	09 f0       	breq	.+2      	; 0xc3e <Calculator_Run+0xf8>
     c3c:	96 cf       	rjmp	.-212    	; 0xb6a <Calculator_Run+0x24>
                result_flag = 1;
     c3e:	81 e0       	ldi	r24, 0x01	; 1
     c40:	8a 83       	std	Y+2, r24	; 0x02
                switch (operation)
     c42:	8f 81       	ldd	r24, Y+7	; 0x07
     c44:	28 2f       	mov	r18, r24
     c46:	30 e0       	ldi	r19, 0x00	; 0
     c48:	3b 87       	std	Y+11, r19	; 0x0b
     c4a:	2a 87       	std	Y+10, r18	; 0x0a
     c4c:	8a 85       	ldd	r24, Y+10	; 0x0a
     c4e:	9b 85       	ldd	r25, Y+11	; 0x0b
     c50:	8b 32       	cpi	r24, 0x2B	; 43
     c52:	91 05       	cpc	r25, r1
     c54:	b1 f0       	breq	.+44     	; 0xc82 <Calculator_Run+0x13c>
     c56:	2a 85       	ldd	r18, Y+10	; 0x0a
     c58:	3b 85       	ldd	r19, Y+11	; 0x0b
     c5a:	2c 32       	cpi	r18, 0x2C	; 44
     c5c:	31 05       	cpc	r19, r1
     c5e:	34 f4       	brge	.+12     	; 0xc6c <Calculator_Run+0x126>
     c60:	8a 85       	ldd	r24, Y+10	; 0x0a
     c62:	9b 85       	ldd	r25, Y+11	; 0x0b
     c64:	8a 32       	cpi	r24, 0x2A	; 42
     c66:	91 05       	cpc	r25, r1
     c68:	b1 f0       	breq	.+44     	; 0xc96 <Calculator_Run+0x150>
     c6a:	22 c0       	rjmp	.+68     	; 0xcb0 <Calculator_Run+0x16a>
     c6c:	2a 85       	ldd	r18, Y+10	; 0x0a
     c6e:	3b 85       	ldd	r19, Y+11	; 0x0b
     c70:	2d 32       	cpi	r18, 0x2D	; 45
     c72:	31 05       	cpc	r19, r1
     c74:	59 f0       	breq	.+22     	; 0xc8c <Calculator_Run+0x146>
     c76:	8a 85       	ldd	r24, Y+10	; 0x0a
     c78:	9b 85       	ldd	r25, Y+11	; 0x0b
     c7a:	8f 32       	cpi	r24, 0x2F	; 47
     c7c:	91 05       	cpc	r25, r1
     c7e:	91 f0       	breq	.+36     	; 0xca4 <Calculator_Run+0x15e>
     c80:	17 c0       	rjmp	.+46     	; 0xcb0 <Calculator_Run+0x16a>
                {
                case '+':
                    result = num1 + num2;
     c82:	89 85       	ldd	r24, Y+9	; 0x09
     c84:	98 85       	ldd	r25, Y+8	; 0x08
     c86:	89 0f       	add	r24, r25
     c88:	8e 83       	std	Y+6, r24	; 0x06
     c8a:	12 c0       	rjmp	.+36     	; 0xcb0 <Calculator_Run+0x16a>
                    break;
                case '-':
                    result = num1 - num2;
     c8c:	89 85       	ldd	r24, Y+9	; 0x09
     c8e:	98 85       	ldd	r25, Y+8	; 0x08
     c90:	89 1b       	sub	r24, r25
     c92:	8e 83       	std	Y+6, r24	; 0x06
     c94:	0d c0       	rjmp	.+26     	; 0xcb0 <Calculator_Run+0x16a>
                    break;
                case '*':
                    result = num1 * num2;
     c96:	89 85       	ldd	r24, Y+9	; 0x09
     c98:	98 85       	ldd	r25, Y+8	; 0x08
     c9a:	89 9f       	mul	r24, r25
     c9c:	80 2d       	mov	r24, r0
     c9e:	11 24       	eor	r1, r1
     ca0:	8e 83       	std	Y+6, r24	; 0x06
     ca2:	06 c0       	rjmp	.+12     	; 0xcb0 <Calculator_Run+0x16a>
                    break;
                case '/':
                    result = num1 / num2;
     ca4:	89 85       	ldd	r24, Y+9	; 0x09
     ca6:	98 85       	ldd	r25, Y+8	; 0x08
     ca8:	69 2f       	mov	r22, r25
     caa:	0e 94 e0 1a 	call	0x35c0	; 0x35c0 <__udivmodqi4>
     cae:	8e 83       	std	Y+6, r24	; 0x06
                    break;
                default:
                    break;
                }
                LCD_DisplayCharacter('=');
     cb0:	8d e3       	ldi	r24, 0x3D	; 61
     cb2:	0e 94 11 10 	call	0x2022	; 0x2022 <LCD_DisplayCharacter>
                LCD_SetCursorPosition(1,0);
     cb6:	81 e0       	ldi	r24, 0x01	; 1
     cb8:	60 e0       	ldi	r22, 0x00	; 0
     cba:	0e 94 47 10 	call	0x208e	; 0x208e <LCD_SetCursorPosition>
                LCD_DisplayString((u8*)"Result = ");
     cbe:	80 e6       	ldi	r24, 0x60	; 96
     cc0:	90 e0       	ldi	r25, 0x00	; 0
     cc2:	0e 94 1e 10 	call	0x203c	; 0x203c <LCD_DisplayString>
                LCD_DisplayNumber(result);
     cc6:	8e 81       	ldd	r24, Y+6	; 0x06
     cc8:	88 2f       	mov	r24, r24
     cca:	90 e0       	ldi	r25, 0x00	; 0
     ccc:	0e 94 6b 10 	call	0x20d6	; 0x20d6 <LCD_DisplayNumber>
     cd0:	4c cf       	rjmp	.-360    	; 0xb6a <Calculator_Run+0x24>

00000cd2 <Calculator_GetRealNumber>:
            }
        }
    }
}

 u8 Calculator_GetRealNumber (Keypad_ButtonType button) {
     cd2:	df 93       	push	r29
     cd4:	cf 93       	push	r28
     cd6:	00 d0       	rcall	.+0      	; 0xcd8 <Calculator_GetRealNumber+0x6>
     cd8:	00 d0       	rcall	.+0      	; 0xcda <Calculator_GetRealNumber+0x8>
     cda:	cd b7       	in	r28, 0x3d	; 61
     cdc:	de b7       	in	r29, 0x3e	; 62
     cde:	8a 83       	std	Y+2, r24	; 0x02
    u8 num = 0;
     ce0:	19 82       	std	Y+1, r1	; 0x01
    switch (button)
     ce2:	8a 81       	ldd	r24, Y+2	; 0x02
     ce4:	28 2f       	mov	r18, r24
     ce6:	30 e0       	ldi	r19, 0x00	; 0
     ce8:	3c 83       	std	Y+4, r19	; 0x04
     cea:	2b 83       	std	Y+3, r18	; 0x03
     cec:	8b 81       	ldd	r24, Y+3	; 0x03
     cee:	9c 81       	ldd	r25, Y+4	; 0x04
     cf0:	88 30       	cpi	r24, 0x08	; 8
     cf2:	91 05       	cpc	r25, r1
     cf4:	09 f4       	brne	.+2      	; 0xcf8 <Calculator_GetRealNumber+0x26>
     cf6:	4b c0       	rjmp	.+150    	; 0xd8e <Calculator_GetRealNumber+0xbc>
     cf8:	2b 81       	ldd	r18, Y+3	; 0x03
     cfa:	3c 81       	ldd	r19, Y+4	; 0x04
     cfc:	29 30       	cpi	r18, 0x09	; 9
     cfe:	31 05       	cpc	r19, r1
     d00:	dc f4       	brge	.+54     	; 0xd38 <Calculator_GetRealNumber+0x66>
     d02:	8b 81       	ldd	r24, Y+3	; 0x03
     d04:	9c 81       	ldd	r25, Y+4	; 0x04
     d06:	84 30       	cpi	r24, 0x04	; 4
     d08:	91 05       	cpc	r25, r1
     d0a:	c1 f1       	breq	.+112    	; 0xd7c <Calculator_GetRealNumber+0xaa>
     d0c:	2b 81       	ldd	r18, Y+3	; 0x03
     d0e:	3c 81       	ldd	r19, Y+4	; 0x04
     d10:	25 30       	cpi	r18, 0x05	; 5
     d12:	31 05       	cpc	r19, r1
     d14:	34 f4       	brge	.+12     	; 0xd22 <Calculator_GetRealNumber+0x50>
     d16:	8b 81       	ldd	r24, Y+3	; 0x03
     d18:	9c 81       	ldd	r25, Y+4	; 0x04
     d1a:	81 30       	cpi	r24, 0x01	; 1
     d1c:	91 05       	cpc	r25, r1
     d1e:	61 f1       	breq	.+88     	; 0xd78 <Calculator_GetRealNumber+0xa6>
     d20:	47 c0       	rjmp	.+142    	; 0xdb0 <Calculator_GetRealNumber+0xde>
     d22:	2b 81       	ldd	r18, Y+3	; 0x03
     d24:	3c 81       	ldd	r19, Y+4	; 0x04
     d26:	25 30       	cpi	r18, 0x05	; 5
     d28:	31 05       	cpc	r19, r1
     d2a:	59 f1       	breq	.+86     	; 0xd82 <Calculator_GetRealNumber+0xb0>
     d2c:	8b 81       	ldd	r24, Y+3	; 0x03
     d2e:	9c 81       	ldd	r25, Y+4	; 0x04
     d30:	86 30       	cpi	r24, 0x06	; 6
     d32:	91 05       	cpc	r25, r1
     d34:	49 f1       	breq	.+82     	; 0xd88 <Calculator_GetRealNumber+0xb6>
     d36:	3c c0       	rjmp	.+120    	; 0xdb0 <Calculator_GetRealNumber+0xde>
     d38:	2b 81       	ldd	r18, Y+3	; 0x03
     d3a:	3c 81       	ldd	r19, Y+4	; 0x04
     d3c:	2c 30       	cpi	r18, 0x0C	; 12
     d3e:	31 05       	cpc	r19, r1
     d40:	79 f1       	breq	.+94     	; 0xda0 <Calculator_GetRealNumber+0xce>
     d42:	8b 81       	ldd	r24, Y+3	; 0x03
     d44:	9c 81       	ldd	r25, Y+4	; 0x04
     d46:	8d 30       	cpi	r24, 0x0D	; 13
     d48:	91 05       	cpc	r25, r1
     d4a:	5c f4       	brge	.+22     	; 0xd62 <Calculator_GetRealNumber+0x90>
     d4c:	2b 81       	ldd	r18, Y+3	; 0x03
     d4e:	3c 81       	ldd	r19, Y+4	; 0x04
     d50:	29 30       	cpi	r18, 0x09	; 9
     d52:	31 05       	cpc	r19, r1
     d54:	f9 f0       	breq	.+62     	; 0xd94 <Calculator_GetRealNumber+0xc2>
     d56:	8b 81       	ldd	r24, Y+3	; 0x03
     d58:	9c 81       	ldd	r25, Y+4	; 0x04
     d5a:	8a 30       	cpi	r24, 0x0A	; 10
     d5c:	91 05       	cpc	r25, r1
     d5e:	e9 f0       	breq	.+58     	; 0xd9a <Calculator_GetRealNumber+0xc8>
     d60:	27 c0       	rjmp	.+78     	; 0xdb0 <Calculator_GetRealNumber+0xde>
     d62:	2b 81       	ldd	r18, Y+3	; 0x03
     d64:	3c 81       	ldd	r19, Y+4	; 0x04
     d66:	2d 30       	cpi	r18, 0x0D	; 13
     d68:	31 05       	cpc	r19, r1
     d6a:	e9 f0       	breq	.+58     	; 0xda6 <Calculator_GetRealNumber+0xd4>
     d6c:	8b 81       	ldd	r24, Y+3	; 0x03
     d6e:	9c 81       	ldd	r25, Y+4	; 0x04
     d70:	8e 30       	cpi	r24, 0x0E	; 14
     d72:	91 05       	cpc	r25, r1
     d74:	d9 f0       	breq	.+54     	; 0xdac <Calculator_GetRealNumber+0xda>
     d76:	1c c0       	rjmp	.+56     	; 0xdb0 <Calculator_GetRealNumber+0xde>
    {
    case CALCULATOR_BUTTON_NUM0:
        num = 0;
     d78:	19 82       	std	Y+1, r1	; 0x01
     d7a:	1a c0       	rjmp	.+52     	; 0xdb0 <Calculator_GetRealNumber+0xde>
        break;
    case CALCULATOR_BUTTON_NUM1:
        num = 1;
     d7c:	81 e0       	ldi	r24, 0x01	; 1
     d7e:	89 83       	std	Y+1, r24	; 0x01
     d80:	17 c0       	rjmp	.+46     	; 0xdb0 <Calculator_GetRealNumber+0xde>
        break;
    case CALCULATOR_BUTTON_NUM2:
        num = 2;
     d82:	82 e0       	ldi	r24, 0x02	; 2
     d84:	89 83       	std	Y+1, r24	; 0x01
     d86:	14 c0       	rjmp	.+40     	; 0xdb0 <Calculator_GetRealNumber+0xde>
        break;
    case CALCULATOR_BUTTON_NUM3:
        num = 3;
     d88:	83 e0       	ldi	r24, 0x03	; 3
     d8a:	89 83       	std	Y+1, r24	; 0x01
     d8c:	11 c0       	rjmp	.+34     	; 0xdb0 <Calculator_GetRealNumber+0xde>
        break;
    case CALCULATOR_BUTTON_NUM4:
        num = 4;
     d8e:	84 e0       	ldi	r24, 0x04	; 4
     d90:	89 83       	std	Y+1, r24	; 0x01
     d92:	0e c0       	rjmp	.+28     	; 0xdb0 <Calculator_GetRealNumber+0xde>
        break;
    case CALCULATOR_BUTTON_NUM5:
        num = 5;
     d94:	85 e0       	ldi	r24, 0x05	; 5
     d96:	89 83       	std	Y+1, r24	; 0x01
     d98:	0b c0       	rjmp	.+22     	; 0xdb0 <Calculator_GetRealNumber+0xde>
        break;
    case CALCULATOR_BUTTON_NUM6:
        num = 6;
     d9a:	86 e0       	ldi	r24, 0x06	; 6
     d9c:	89 83       	std	Y+1, r24	; 0x01
     d9e:	08 c0       	rjmp	.+16     	; 0xdb0 <Calculator_GetRealNumber+0xde>
        break;
    case CALCULATOR_BUTTON_NUM7:
        num = 7;
     da0:	87 e0       	ldi	r24, 0x07	; 7
     da2:	89 83       	std	Y+1, r24	; 0x01
     da4:	05 c0       	rjmp	.+10     	; 0xdb0 <Calculator_GetRealNumber+0xde>
        break;
    case CALCULATOR_BUTTON_NUM8:
        num = 8;
     da6:	88 e0       	ldi	r24, 0x08	; 8
     da8:	89 83       	std	Y+1, r24	; 0x01
     daa:	02 c0       	rjmp	.+4      	; 0xdb0 <Calculator_GetRealNumber+0xde>
        break;
    case CALCULATOR_BUTTON_NUM9:
        num = 9;
     dac:	89 e0       	ldi	r24, 0x09	; 9
     dae:	89 83       	std	Y+1, r24	; 0x01
        break;
    default:
        break;
    }
    return num;
     db0:	89 81       	ldd	r24, Y+1	; 0x01
}
     db2:	0f 90       	pop	r0
     db4:	0f 90       	pop	r0
     db6:	0f 90       	pop	r0
     db8:	0f 90       	pop	r0
     dba:	cf 91       	pop	r28
     dbc:	df 91       	pop	r29
     dbe:	08 95       	ret

00000dc0 <DIO_SetPinMode>:
#include "std_types.h"
#include "macros.h"
#include "DIO.h"

void DIO_SetPinMode(DIO_PortType port, DIO_PinType pin, DIO_ModeType mode) {
     dc0:	df 93       	push	r29
     dc2:	cf 93       	push	r28
     dc4:	cd b7       	in	r28, 0x3d	; 61
     dc6:	de b7       	in	r29, 0x3e	; 62
     dc8:	29 97       	sbiw	r28, 0x09	; 9
     dca:	0f b6       	in	r0, 0x3f	; 63
     dcc:	f8 94       	cli
     dce:	de bf       	out	0x3e, r29	; 62
     dd0:	0f be       	out	0x3f, r0	; 63
     dd2:	cd bf       	out	0x3d, r28	; 61
     dd4:	89 83       	std	Y+1, r24	; 0x01
     dd6:	6a 83       	std	Y+2, r22	; 0x02
     dd8:	4b 83       	std	Y+3, r20	; 0x03
    if (mode == DIO_INPUT_FLOATING)
     dda:	8b 81       	ldd	r24, Y+3	; 0x03
     ddc:	88 23       	and	r24, r24
     dde:	09 f0       	breq	.+2      	; 0xde2 <DIO_SetPinMode+0x22>
     de0:	c2 c0       	rjmp	.+388    	; 0xf66 <DIO_SetPinMode+0x1a6>
    {
        switch (port)
     de2:	89 81       	ldd	r24, Y+1	; 0x01
     de4:	28 2f       	mov	r18, r24
     de6:	30 e0       	ldi	r19, 0x00	; 0
     de8:	39 87       	std	Y+9, r19	; 0x09
     dea:	28 87       	std	Y+8, r18	; 0x08
     dec:	88 85       	ldd	r24, Y+8	; 0x08
     dee:	99 85       	ldd	r25, Y+9	; 0x09
     df0:	81 30       	cpi	r24, 0x01	; 1
     df2:	91 05       	cpc	r25, r1
     df4:	09 f4       	brne	.+2      	; 0xdf8 <DIO_SetPinMode+0x38>
     df6:	3f c0       	rjmp	.+126    	; 0xe76 <DIO_SetPinMode+0xb6>
     df8:	28 85       	ldd	r18, Y+8	; 0x08
     dfa:	39 85       	ldd	r19, Y+9	; 0x09
     dfc:	22 30       	cpi	r18, 0x02	; 2
     dfe:	31 05       	cpc	r19, r1
     e00:	2c f4       	brge	.+10     	; 0xe0c <DIO_SetPinMode+0x4c>
     e02:	88 85       	ldd	r24, Y+8	; 0x08
     e04:	99 85       	ldd	r25, Y+9	; 0x09
     e06:	00 97       	sbiw	r24, 0x00	; 0
     e08:	71 f0       	breq	.+28     	; 0xe26 <DIO_SetPinMode+0x66>
     e0a:	e1 c1       	rjmp	.+962    	; 0x11ce <DIO_SetPinMode+0x40e>
     e0c:	28 85       	ldd	r18, Y+8	; 0x08
     e0e:	39 85       	ldd	r19, Y+9	; 0x09
     e10:	22 30       	cpi	r18, 0x02	; 2
     e12:	31 05       	cpc	r19, r1
     e14:	09 f4       	brne	.+2      	; 0xe18 <DIO_SetPinMode+0x58>
     e16:	57 c0       	rjmp	.+174    	; 0xec6 <DIO_SetPinMode+0x106>
     e18:	88 85       	ldd	r24, Y+8	; 0x08
     e1a:	99 85       	ldd	r25, Y+9	; 0x09
     e1c:	83 30       	cpi	r24, 0x03	; 3
     e1e:	91 05       	cpc	r25, r1
     e20:	09 f4       	brne	.+2      	; 0xe24 <DIO_SetPinMode+0x64>
     e22:	79 c0       	rjmp	.+242    	; 0xf16 <DIO_SetPinMode+0x156>
     e24:	d4 c1       	rjmp	.+936    	; 0x11ce <DIO_SetPinMode+0x40e>
        {
        case DIO_PORTA:
            CLR_BIT(DDRA, pin);
     e26:	aa e3       	ldi	r26, 0x3A	; 58
     e28:	b0 e0       	ldi	r27, 0x00	; 0
     e2a:	ea e3       	ldi	r30, 0x3A	; 58
     e2c:	f0 e0       	ldi	r31, 0x00	; 0
     e2e:	80 81       	ld	r24, Z
     e30:	48 2f       	mov	r20, r24
     e32:	8a 81       	ldd	r24, Y+2	; 0x02
     e34:	28 2f       	mov	r18, r24
     e36:	30 e0       	ldi	r19, 0x00	; 0
     e38:	81 e0       	ldi	r24, 0x01	; 1
     e3a:	90 e0       	ldi	r25, 0x00	; 0
     e3c:	02 c0       	rjmp	.+4      	; 0xe42 <DIO_SetPinMode+0x82>
     e3e:	88 0f       	add	r24, r24
     e40:	99 1f       	adc	r25, r25
     e42:	2a 95       	dec	r18
     e44:	e2 f7       	brpl	.-8      	; 0xe3e <DIO_SetPinMode+0x7e>
     e46:	80 95       	com	r24
     e48:	84 23       	and	r24, r20
     e4a:	8c 93       	st	X, r24
            CLR_BIT(PORTA, pin);
     e4c:	ab e3       	ldi	r26, 0x3B	; 59
     e4e:	b0 e0       	ldi	r27, 0x00	; 0
     e50:	eb e3       	ldi	r30, 0x3B	; 59
     e52:	f0 e0       	ldi	r31, 0x00	; 0
     e54:	80 81       	ld	r24, Z
     e56:	48 2f       	mov	r20, r24
     e58:	8a 81       	ldd	r24, Y+2	; 0x02
     e5a:	28 2f       	mov	r18, r24
     e5c:	30 e0       	ldi	r19, 0x00	; 0
     e5e:	81 e0       	ldi	r24, 0x01	; 1
     e60:	90 e0       	ldi	r25, 0x00	; 0
     e62:	02 2e       	mov	r0, r18
     e64:	02 c0       	rjmp	.+4      	; 0xe6a <DIO_SetPinMode+0xaa>
     e66:	88 0f       	add	r24, r24
     e68:	99 1f       	adc	r25, r25
     e6a:	0a 94       	dec	r0
     e6c:	e2 f7       	brpl	.-8      	; 0xe66 <DIO_SetPinMode+0xa6>
     e6e:	80 95       	com	r24
     e70:	84 23       	and	r24, r20
     e72:	8c 93       	st	X, r24
     e74:	ac c1       	rjmp	.+856    	; 0x11ce <DIO_SetPinMode+0x40e>
            break;
        case DIO_PORTB:
            CLR_BIT(DDRB, pin);
     e76:	a7 e3       	ldi	r26, 0x37	; 55
     e78:	b0 e0       	ldi	r27, 0x00	; 0
     e7a:	e7 e3       	ldi	r30, 0x37	; 55
     e7c:	f0 e0       	ldi	r31, 0x00	; 0
     e7e:	80 81       	ld	r24, Z
     e80:	48 2f       	mov	r20, r24
     e82:	8a 81       	ldd	r24, Y+2	; 0x02
     e84:	28 2f       	mov	r18, r24
     e86:	30 e0       	ldi	r19, 0x00	; 0
     e88:	81 e0       	ldi	r24, 0x01	; 1
     e8a:	90 e0       	ldi	r25, 0x00	; 0
     e8c:	02 c0       	rjmp	.+4      	; 0xe92 <DIO_SetPinMode+0xd2>
     e8e:	88 0f       	add	r24, r24
     e90:	99 1f       	adc	r25, r25
     e92:	2a 95       	dec	r18
     e94:	e2 f7       	brpl	.-8      	; 0xe8e <DIO_SetPinMode+0xce>
     e96:	80 95       	com	r24
     e98:	84 23       	and	r24, r20
     e9a:	8c 93       	st	X, r24
            CLR_BIT(PORTB, pin);
     e9c:	a8 e3       	ldi	r26, 0x38	; 56
     e9e:	b0 e0       	ldi	r27, 0x00	; 0
     ea0:	e8 e3       	ldi	r30, 0x38	; 56
     ea2:	f0 e0       	ldi	r31, 0x00	; 0
     ea4:	80 81       	ld	r24, Z
     ea6:	48 2f       	mov	r20, r24
     ea8:	8a 81       	ldd	r24, Y+2	; 0x02
     eaa:	28 2f       	mov	r18, r24
     eac:	30 e0       	ldi	r19, 0x00	; 0
     eae:	81 e0       	ldi	r24, 0x01	; 1
     eb0:	90 e0       	ldi	r25, 0x00	; 0
     eb2:	02 2e       	mov	r0, r18
     eb4:	02 c0       	rjmp	.+4      	; 0xeba <DIO_SetPinMode+0xfa>
     eb6:	88 0f       	add	r24, r24
     eb8:	99 1f       	adc	r25, r25
     eba:	0a 94       	dec	r0
     ebc:	e2 f7       	brpl	.-8      	; 0xeb6 <DIO_SetPinMode+0xf6>
     ebe:	80 95       	com	r24
     ec0:	84 23       	and	r24, r20
     ec2:	8c 93       	st	X, r24
     ec4:	84 c1       	rjmp	.+776    	; 0x11ce <DIO_SetPinMode+0x40e>
            break;
        case DIO_PORTC:
            CLR_BIT(DDRC, pin);
     ec6:	a4 e3       	ldi	r26, 0x34	; 52
     ec8:	b0 e0       	ldi	r27, 0x00	; 0
     eca:	e4 e3       	ldi	r30, 0x34	; 52
     ecc:	f0 e0       	ldi	r31, 0x00	; 0
     ece:	80 81       	ld	r24, Z
     ed0:	48 2f       	mov	r20, r24
     ed2:	8a 81       	ldd	r24, Y+2	; 0x02
     ed4:	28 2f       	mov	r18, r24
     ed6:	30 e0       	ldi	r19, 0x00	; 0
     ed8:	81 e0       	ldi	r24, 0x01	; 1
     eda:	90 e0       	ldi	r25, 0x00	; 0
     edc:	02 c0       	rjmp	.+4      	; 0xee2 <DIO_SetPinMode+0x122>
     ede:	88 0f       	add	r24, r24
     ee0:	99 1f       	adc	r25, r25
     ee2:	2a 95       	dec	r18
     ee4:	e2 f7       	brpl	.-8      	; 0xede <DIO_SetPinMode+0x11e>
     ee6:	80 95       	com	r24
     ee8:	84 23       	and	r24, r20
     eea:	8c 93       	st	X, r24
            CLR_BIT(PORTC, pin);
     eec:	a5 e3       	ldi	r26, 0x35	; 53
     eee:	b0 e0       	ldi	r27, 0x00	; 0
     ef0:	e5 e3       	ldi	r30, 0x35	; 53
     ef2:	f0 e0       	ldi	r31, 0x00	; 0
     ef4:	80 81       	ld	r24, Z
     ef6:	48 2f       	mov	r20, r24
     ef8:	8a 81       	ldd	r24, Y+2	; 0x02
     efa:	28 2f       	mov	r18, r24
     efc:	30 e0       	ldi	r19, 0x00	; 0
     efe:	81 e0       	ldi	r24, 0x01	; 1
     f00:	90 e0       	ldi	r25, 0x00	; 0
     f02:	02 2e       	mov	r0, r18
     f04:	02 c0       	rjmp	.+4      	; 0xf0a <DIO_SetPinMode+0x14a>
     f06:	88 0f       	add	r24, r24
     f08:	99 1f       	adc	r25, r25
     f0a:	0a 94       	dec	r0
     f0c:	e2 f7       	brpl	.-8      	; 0xf06 <DIO_SetPinMode+0x146>
     f0e:	80 95       	com	r24
     f10:	84 23       	and	r24, r20
     f12:	8c 93       	st	X, r24
     f14:	5c c1       	rjmp	.+696    	; 0x11ce <DIO_SetPinMode+0x40e>
            break;
        case DIO_PORTD:
            CLR_BIT(DDRD, pin);
     f16:	a1 e3       	ldi	r26, 0x31	; 49
     f18:	b0 e0       	ldi	r27, 0x00	; 0
     f1a:	e1 e3       	ldi	r30, 0x31	; 49
     f1c:	f0 e0       	ldi	r31, 0x00	; 0
     f1e:	80 81       	ld	r24, Z
     f20:	48 2f       	mov	r20, r24
     f22:	8a 81       	ldd	r24, Y+2	; 0x02
     f24:	28 2f       	mov	r18, r24
     f26:	30 e0       	ldi	r19, 0x00	; 0
     f28:	81 e0       	ldi	r24, 0x01	; 1
     f2a:	90 e0       	ldi	r25, 0x00	; 0
     f2c:	02 c0       	rjmp	.+4      	; 0xf32 <DIO_SetPinMode+0x172>
     f2e:	88 0f       	add	r24, r24
     f30:	99 1f       	adc	r25, r25
     f32:	2a 95       	dec	r18
     f34:	e2 f7       	brpl	.-8      	; 0xf2e <DIO_SetPinMode+0x16e>
     f36:	80 95       	com	r24
     f38:	84 23       	and	r24, r20
     f3a:	8c 93       	st	X, r24
            CLR_BIT(PORTD, pin);
     f3c:	a2 e3       	ldi	r26, 0x32	; 50
     f3e:	b0 e0       	ldi	r27, 0x00	; 0
     f40:	e2 e3       	ldi	r30, 0x32	; 50
     f42:	f0 e0       	ldi	r31, 0x00	; 0
     f44:	80 81       	ld	r24, Z
     f46:	48 2f       	mov	r20, r24
     f48:	8a 81       	ldd	r24, Y+2	; 0x02
     f4a:	28 2f       	mov	r18, r24
     f4c:	30 e0       	ldi	r19, 0x00	; 0
     f4e:	81 e0       	ldi	r24, 0x01	; 1
     f50:	90 e0       	ldi	r25, 0x00	; 0
     f52:	02 2e       	mov	r0, r18
     f54:	02 c0       	rjmp	.+4      	; 0xf5a <DIO_SetPinMode+0x19a>
     f56:	88 0f       	add	r24, r24
     f58:	99 1f       	adc	r25, r25
     f5a:	0a 94       	dec	r0
     f5c:	e2 f7       	brpl	.-8      	; 0xf56 <DIO_SetPinMode+0x196>
     f5e:	80 95       	com	r24
     f60:	84 23       	and	r24, r20
     f62:	8c 93       	st	X, r24
     f64:	34 c1       	rjmp	.+616    	; 0x11ce <DIO_SetPinMode+0x40e>
            break;
        default:
            break;
        }
    }
    else if (mode == DIO_INPUT_PULLUP)
     f66:	8b 81       	ldd	r24, Y+3	; 0x03
     f68:	81 30       	cpi	r24, 0x01	; 1
     f6a:	09 f0       	breq	.+2      	; 0xf6e <DIO_SetPinMode+0x1ae>
     f6c:	be c0       	rjmp	.+380    	; 0x10ea <DIO_SetPinMode+0x32a>
    {
        switch (port)
     f6e:	89 81       	ldd	r24, Y+1	; 0x01
     f70:	28 2f       	mov	r18, r24
     f72:	30 e0       	ldi	r19, 0x00	; 0
     f74:	3f 83       	std	Y+7, r19	; 0x07
     f76:	2e 83       	std	Y+6, r18	; 0x06
     f78:	8e 81       	ldd	r24, Y+6	; 0x06
     f7a:	9f 81       	ldd	r25, Y+7	; 0x07
     f7c:	81 30       	cpi	r24, 0x01	; 1
     f7e:	91 05       	cpc	r25, r1
     f80:	09 f4       	brne	.+2      	; 0xf84 <DIO_SetPinMode+0x1c4>
     f82:	3e c0       	rjmp	.+124    	; 0x1000 <DIO_SetPinMode+0x240>
     f84:	2e 81       	ldd	r18, Y+6	; 0x06
     f86:	3f 81       	ldd	r19, Y+7	; 0x07
     f88:	22 30       	cpi	r18, 0x02	; 2
     f8a:	31 05       	cpc	r19, r1
     f8c:	2c f4       	brge	.+10     	; 0xf98 <DIO_SetPinMode+0x1d8>
     f8e:	8e 81       	ldd	r24, Y+6	; 0x06
     f90:	9f 81       	ldd	r25, Y+7	; 0x07
     f92:	00 97       	sbiw	r24, 0x00	; 0
     f94:	71 f0       	breq	.+28     	; 0xfb2 <DIO_SetPinMode+0x1f2>
     f96:	1b c1       	rjmp	.+566    	; 0x11ce <DIO_SetPinMode+0x40e>
     f98:	2e 81       	ldd	r18, Y+6	; 0x06
     f9a:	3f 81       	ldd	r19, Y+7	; 0x07
     f9c:	22 30       	cpi	r18, 0x02	; 2
     f9e:	31 05       	cpc	r19, r1
     fa0:	09 f4       	brne	.+2      	; 0xfa4 <DIO_SetPinMode+0x1e4>
     fa2:	55 c0       	rjmp	.+170    	; 0x104e <DIO_SetPinMode+0x28e>
     fa4:	8e 81       	ldd	r24, Y+6	; 0x06
     fa6:	9f 81       	ldd	r25, Y+7	; 0x07
     fa8:	83 30       	cpi	r24, 0x03	; 3
     faa:	91 05       	cpc	r25, r1
     fac:	09 f4       	brne	.+2      	; 0xfb0 <DIO_SetPinMode+0x1f0>
     fae:	76 c0       	rjmp	.+236    	; 0x109c <DIO_SetPinMode+0x2dc>
     fb0:	0e c1       	rjmp	.+540    	; 0x11ce <DIO_SetPinMode+0x40e>
        {
        case DIO_PORTA:
            CLR_BIT(DDRA, pin);
     fb2:	aa e3       	ldi	r26, 0x3A	; 58
     fb4:	b0 e0       	ldi	r27, 0x00	; 0
     fb6:	ea e3       	ldi	r30, 0x3A	; 58
     fb8:	f0 e0       	ldi	r31, 0x00	; 0
     fba:	80 81       	ld	r24, Z
     fbc:	48 2f       	mov	r20, r24
     fbe:	8a 81       	ldd	r24, Y+2	; 0x02
     fc0:	28 2f       	mov	r18, r24
     fc2:	30 e0       	ldi	r19, 0x00	; 0
     fc4:	81 e0       	ldi	r24, 0x01	; 1
     fc6:	90 e0       	ldi	r25, 0x00	; 0
     fc8:	02 c0       	rjmp	.+4      	; 0xfce <DIO_SetPinMode+0x20e>
     fca:	88 0f       	add	r24, r24
     fcc:	99 1f       	adc	r25, r25
     fce:	2a 95       	dec	r18
     fd0:	e2 f7       	brpl	.-8      	; 0xfca <DIO_SetPinMode+0x20a>
     fd2:	80 95       	com	r24
     fd4:	84 23       	and	r24, r20
     fd6:	8c 93       	st	X, r24
            SET_BIT(PORTA, pin);
     fd8:	ab e3       	ldi	r26, 0x3B	; 59
     fda:	b0 e0       	ldi	r27, 0x00	; 0
     fdc:	eb e3       	ldi	r30, 0x3B	; 59
     fde:	f0 e0       	ldi	r31, 0x00	; 0
     fe0:	80 81       	ld	r24, Z
     fe2:	48 2f       	mov	r20, r24
     fe4:	8a 81       	ldd	r24, Y+2	; 0x02
     fe6:	28 2f       	mov	r18, r24
     fe8:	30 e0       	ldi	r19, 0x00	; 0
     fea:	81 e0       	ldi	r24, 0x01	; 1
     fec:	90 e0       	ldi	r25, 0x00	; 0
     fee:	02 2e       	mov	r0, r18
     ff0:	02 c0       	rjmp	.+4      	; 0xff6 <DIO_SetPinMode+0x236>
     ff2:	88 0f       	add	r24, r24
     ff4:	99 1f       	adc	r25, r25
     ff6:	0a 94       	dec	r0
     ff8:	e2 f7       	brpl	.-8      	; 0xff2 <DIO_SetPinMode+0x232>
     ffa:	84 2b       	or	r24, r20
     ffc:	8c 93       	st	X, r24
     ffe:	e7 c0       	rjmp	.+462    	; 0x11ce <DIO_SetPinMode+0x40e>
            break;
        case DIO_PORTB:
            CLR_BIT(DDRB, pin);
    1000:	a7 e3       	ldi	r26, 0x37	; 55
    1002:	b0 e0       	ldi	r27, 0x00	; 0
    1004:	e7 e3       	ldi	r30, 0x37	; 55
    1006:	f0 e0       	ldi	r31, 0x00	; 0
    1008:	80 81       	ld	r24, Z
    100a:	48 2f       	mov	r20, r24
    100c:	8a 81       	ldd	r24, Y+2	; 0x02
    100e:	28 2f       	mov	r18, r24
    1010:	30 e0       	ldi	r19, 0x00	; 0
    1012:	81 e0       	ldi	r24, 0x01	; 1
    1014:	90 e0       	ldi	r25, 0x00	; 0
    1016:	02 c0       	rjmp	.+4      	; 0x101c <DIO_SetPinMode+0x25c>
    1018:	88 0f       	add	r24, r24
    101a:	99 1f       	adc	r25, r25
    101c:	2a 95       	dec	r18
    101e:	e2 f7       	brpl	.-8      	; 0x1018 <DIO_SetPinMode+0x258>
    1020:	80 95       	com	r24
    1022:	84 23       	and	r24, r20
    1024:	8c 93       	st	X, r24
            SET_BIT(PORTB, pin);
    1026:	a8 e3       	ldi	r26, 0x38	; 56
    1028:	b0 e0       	ldi	r27, 0x00	; 0
    102a:	e8 e3       	ldi	r30, 0x38	; 56
    102c:	f0 e0       	ldi	r31, 0x00	; 0
    102e:	80 81       	ld	r24, Z
    1030:	48 2f       	mov	r20, r24
    1032:	8a 81       	ldd	r24, Y+2	; 0x02
    1034:	28 2f       	mov	r18, r24
    1036:	30 e0       	ldi	r19, 0x00	; 0
    1038:	81 e0       	ldi	r24, 0x01	; 1
    103a:	90 e0       	ldi	r25, 0x00	; 0
    103c:	02 2e       	mov	r0, r18
    103e:	02 c0       	rjmp	.+4      	; 0x1044 <DIO_SetPinMode+0x284>
    1040:	88 0f       	add	r24, r24
    1042:	99 1f       	adc	r25, r25
    1044:	0a 94       	dec	r0
    1046:	e2 f7       	brpl	.-8      	; 0x1040 <DIO_SetPinMode+0x280>
    1048:	84 2b       	or	r24, r20
    104a:	8c 93       	st	X, r24
    104c:	c0 c0       	rjmp	.+384    	; 0x11ce <DIO_SetPinMode+0x40e>
            break;
        case DIO_PORTC:
            CLR_BIT(DDRC, pin);
    104e:	a4 e3       	ldi	r26, 0x34	; 52
    1050:	b0 e0       	ldi	r27, 0x00	; 0
    1052:	e4 e3       	ldi	r30, 0x34	; 52
    1054:	f0 e0       	ldi	r31, 0x00	; 0
    1056:	80 81       	ld	r24, Z
    1058:	48 2f       	mov	r20, r24
    105a:	8a 81       	ldd	r24, Y+2	; 0x02
    105c:	28 2f       	mov	r18, r24
    105e:	30 e0       	ldi	r19, 0x00	; 0
    1060:	81 e0       	ldi	r24, 0x01	; 1
    1062:	90 e0       	ldi	r25, 0x00	; 0
    1064:	02 c0       	rjmp	.+4      	; 0x106a <DIO_SetPinMode+0x2aa>
    1066:	88 0f       	add	r24, r24
    1068:	99 1f       	adc	r25, r25
    106a:	2a 95       	dec	r18
    106c:	e2 f7       	brpl	.-8      	; 0x1066 <DIO_SetPinMode+0x2a6>
    106e:	80 95       	com	r24
    1070:	84 23       	and	r24, r20
    1072:	8c 93       	st	X, r24
            SET_BIT(PORTC, pin);
    1074:	a5 e3       	ldi	r26, 0x35	; 53
    1076:	b0 e0       	ldi	r27, 0x00	; 0
    1078:	e5 e3       	ldi	r30, 0x35	; 53
    107a:	f0 e0       	ldi	r31, 0x00	; 0
    107c:	80 81       	ld	r24, Z
    107e:	48 2f       	mov	r20, r24
    1080:	8a 81       	ldd	r24, Y+2	; 0x02
    1082:	28 2f       	mov	r18, r24
    1084:	30 e0       	ldi	r19, 0x00	; 0
    1086:	81 e0       	ldi	r24, 0x01	; 1
    1088:	90 e0       	ldi	r25, 0x00	; 0
    108a:	02 2e       	mov	r0, r18
    108c:	02 c0       	rjmp	.+4      	; 0x1092 <DIO_SetPinMode+0x2d2>
    108e:	88 0f       	add	r24, r24
    1090:	99 1f       	adc	r25, r25
    1092:	0a 94       	dec	r0
    1094:	e2 f7       	brpl	.-8      	; 0x108e <DIO_SetPinMode+0x2ce>
    1096:	84 2b       	or	r24, r20
    1098:	8c 93       	st	X, r24
    109a:	99 c0       	rjmp	.+306    	; 0x11ce <DIO_SetPinMode+0x40e>
            break;
        case DIO_PORTD:
            CLR_BIT(DDRD, pin);
    109c:	a1 e3       	ldi	r26, 0x31	; 49
    109e:	b0 e0       	ldi	r27, 0x00	; 0
    10a0:	e1 e3       	ldi	r30, 0x31	; 49
    10a2:	f0 e0       	ldi	r31, 0x00	; 0
    10a4:	80 81       	ld	r24, Z
    10a6:	48 2f       	mov	r20, r24
    10a8:	8a 81       	ldd	r24, Y+2	; 0x02
    10aa:	28 2f       	mov	r18, r24
    10ac:	30 e0       	ldi	r19, 0x00	; 0
    10ae:	81 e0       	ldi	r24, 0x01	; 1
    10b0:	90 e0       	ldi	r25, 0x00	; 0
    10b2:	02 c0       	rjmp	.+4      	; 0x10b8 <DIO_SetPinMode+0x2f8>
    10b4:	88 0f       	add	r24, r24
    10b6:	99 1f       	adc	r25, r25
    10b8:	2a 95       	dec	r18
    10ba:	e2 f7       	brpl	.-8      	; 0x10b4 <DIO_SetPinMode+0x2f4>
    10bc:	80 95       	com	r24
    10be:	84 23       	and	r24, r20
    10c0:	8c 93       	st	X, r24
            SET_BIT(PORTD, pin);
    10c2:	a2 e3       	ldi	r26, 0x32	; 50
    10c4:	b0 e0       	ldi	r27, 0x00	; 0
    10c6:	e2 e3       	ldi	r30, 0x32	; 50
    10c8:	f0 e0       	ldi	r31, 0x00	; 0
    10ca:	80 81       	ld	r24, Z
    10cc:	48 2f       	mov	r20, r24
    10ce:	8a 81       	ldd	r24, Y+2	; 0x02
    10d0:	28 2f       	mov	r18, r24
    10d2:	30 e0       	ldi	r19, 0x00	; 0
    10d4:	81 e0       	ldi	r24, 0x01	; 1
    10d6:	90 e0       	ldi	r25, 0x00	; 0
    10d8:	02 2e       	mov	r0, r18
    10da:	02 c0       	rjmp	.+4      	; 0x10e0 <DIO_SetPinMode+0x320>
    10dc:	88 0f       	add	r24, r24
    10de:	99 1f       	adc	r25, r25
    10e0:	0a 94       	dec	r0
    10e2:	e2 f7       	brpl	.-8      	; 0x10dc <DIO_SetPinMode+0x31c>
    10e4:	84 2b       	or	r24, r20
    10e6:	8c 93       	st	X, r24
    10e8:	72 c0       	rjmp	.+228    	; 0x11ce <DIO_SetPinMode+0x40e>
            break;
        default:
            break;
        }
    }
    else if (mode == DIO_OUTPUT)
    10ea:	8b 81       	ldd	r24, Y+3	; 0x03
    10ec:	82 30       	cpi	r24, 0x02	; 2
    10ee:	09 f0       	breq	.+2      	; 0x10f2 <DIO_SetPinMode+0x332>
    10f0:	6e c0       	rjmp	.+220    	; 0x11ce <DIO_SetPinMode+0x40e>
    {
        switch (port)
    10f2:	89 81       	ldd	r24, Y+1	; 0x01
    10f4:	28 2f       	mov	r18, r24
    10f6:	30 e0       	ldi	r19, 0x00	; 0
    10f8:	3d 83       	std	Y+5, r19	; 0x05
    10fa:	2c 83       	std	Y+4, r18	; 0x04
    10fc:	8c 81       	ldd	r24, Y+4	; 0x04
    10fe:	9d 81       	ldd	r25, Y+5	; 0x05
    1100:	81 30       	cpi	r24, 0x01	; 1
    1102:	91 05       	cpc	r25, r1
    1104:	49 f1       	breq	.+82     	; 0x1158 <DIO_SetPinMode+0x398>
    1106:	2c 81       	ldd	r18, Y+4	; 0x04
    1108:	3d 81       	ldd	r19, Y+5	; 0x05
    110a:	22 30       	cpi	r18, 0x02	; 2
    110c:	31 05       	cpc	r19, r1
    110e:	2c f4       	brge	.+10     	; 0x111a <DIO_SetPinMode+0x35a>
    1110:	8c 81       	ldd	r24, Y+4	; 0x04
    1112:	9d 81       	ldd	r25, Y+5	; 0x05
    1114:	00 97       	sbiw	r24, 0x00	; 0
    1116:	61 f0       	breq	.+24     	; 0x1130 <DIO_SetPinMode+0x370>
    1118:	5a c0       	rjmp	.+180    	; 0x11ce <DIO_SetPinMode+0x40e>
    111a:	2c 81       	ldd	r18, Y+4	; 0x04
    111c:	3d 81       	ldd	r19, Y+5	; 0x05
    111e:	22 30       	cpi	r18, 0x02	; 2
    1120:	31 05       	cpc	r19, r1
    1122:	71 f1       	breq	.+92     	; 0x1180 <DIO_SetPinMode+0x3c0>
    1124:	8c 81       	ldd	r24, Y+4	; 0x04
    1126:	9d 81       	ldd	r25, Y+5	; 0x05
    1128:	83 30       	cpi	r24, 0x03	; 3
    112a:	91 05       	cpc	r25, r1
    112c:	e9 f1       	breq	.+122    	; 0x11a8 <DIO_SetPinMode+0x3e8>
    112e:	4f c0       	rjmp	.+158    	; 0x11ce <DIO_SetPinMode+0x40e>
        {
        case DIO_PORTA:
            SET_BIT(DDRA, pin);
    1130:	aa e3       	ldi	r26, 0x3A	; 58
    1132:	b0 e0       	ldi	r27, 0x00	; 0
    1134:	ea e3       	ldi	r30, 0x3A	; 58
    1136:	f0 e0       	ldi	r31, 0x00	; 0
    1138:	80 81       	ld	r24, Z
    113a:	48 2f       	mov	r20, r24
    113c:	8a 81       	ldd	r24, Y+2	; 0x02
    113e:	28 2f       	mov	r18, r24
    1140:	30 e0       	ldi	r19, 0x00	; 0
    1142:	81 e0       	ldi	r24, 0x01	; 1
    1144:	90 e0       	ldi	r25, 0x00	; 0
    1146:	02 2e       	mov	r0, r18
    1148:	02 c0       	rjmp	.+4      	; 0x114e <DIO_SetPinMode+0x38e>
    114a:	88 0f       	add	r24, r24
    114c:	99 1f       	adc	r25, r25
    114e:	0a 94       	dec	r0
    1150:	e2 f7       	brpl	.-8      	; 0x114a <DIO_SetPinMode+0x38a>
    1152:	84 2b       	or	r24, r20
    1154:	8c 93       	st	X, r24
    1156:	3b c0       	rjmp	.+118    	; 0x11ce <DIO_SetPinMode+0x40e>
            break;
        case DIO_PORTB:
            SET_BIT(DDRB, pin);
    1158:	a7 e3       	ldi	r26, 0x37	; 55
    115a:	b0 e0       	ldi	r27, 0x00	; 0
    115c:	e7 e3       	ldi	r30, 0x37	; 55
    115e:	f0 e0       	ldi	r31, 0x00	; 0
    1160:	80 81       	ld	r24, Z
    1162:	48 2f       	mov	r20, r24
    1164:	8a 81       	ldd	r24, Y+2	; 0x02
    1166:	28 2f       	mov	r18, r24
    1168:	30 e0       	ldi	r19, 0x00	; 0
    116a:	81 e0       	ldi	r24, 0x01	; 1
    116c:	90 e0       	ldi	r25, 0x00	; 0
    116e:	02 2e       	mov	r0, r18
    1170:	02 c0       	rjmp	.+4      	; 0x1176 <DIO_SetPinMode+0x3b6>
    1172:	88 0f       	add	r24, r24
    1174:	99 1f       	adc	r25, r25
    1176:	0a 94       	dec	r0
    1178:	e2 f7       	brpl	.-8      	; 0x1172 <DIO_SetPinMode+0x3b2>
    117a:	84 2b       	or	r24, r20
    117c:	8c 93       	st	X, r24
    117e:	27 c0       	rjmp	.+78     	; 0x11ce <DIO_SetPinMode+0x40e>
            break;
        case DIO_PORTC:
            SET_BIT(DDRC, pin);
    1180:	a4 e3       	ldi	r26, 0x34	; 52
    1182:	b0 e0       	ldi	r27, 0x00	; 0
    1184:	e4 e3       	ldi	r30, 0x34	; 52
    1186:	f0 e0       	ldi	r31, 0x00	; 0
    1188:	80 81       	ld	r24, Z
    118a:	48 2f       	mov	r20, r24
    118c:	8a 81       	ldd	r24, Y+2	; 0x02
    118e:	28 2f       	mov	r18, r24
    1190:	30 e0       	ldi	r19, 0x00	; 0
    1192:	81 e0       	ldi	r24, 0x01	; 1
    1194:	90 e0       	ldi	r25, 0x00	; 0
    1196:	02 2e       	mov	r0, r18
    1198:	02 c0       	rjmp	.+4      	; 0x119e <DIO_SetPinMode+0x3de>
    119a:	88 0f       	add	r24, r24
    119c:	99 1f       	adc	r25, r25
    119e:	0a 94       	dec	r0
    11a0:	e2 f7       	brpl	.-8      	; 0x119a <DIO_SetPinMode+0x3da>
    11a2:	84 2b       	or	r24, r20
    11a4:	8c 93       	st	X, r24
    11a6:	13 c0       	rjmp	.+38     	; 0x11ce <DIO_SetPinMode+0x40e>
            break;
        case DIO_PORTD:
            SET_BIT(DDRD, pin);
    11a8:	a1 e3       	ldi	r26, 0x31	; 49
    11aa:	b0 e0       	ldi	r27, 0x00	; 0
    11ac:	e1 e3       	ldi	r30, 0x31	; 49
    11ae:	f0 e0       	ldi	r31, 0x00	; 0
    11b0:	80 81       	ld	r24, Z
    11b2:	48 2f       	mov	r20, r24
    11b4:	8a 81       	ldd	r24, Y+2	; 0x02
    11b6:	28 2f       	mov	r18, r24
    11b8:	30 e0       	ldi	r19, 0x00	; 0
    11ba:	81 e0       	ldi	r24, 0x01	; 1
    11bc:	90 e0       	ldi	r25, 0x00	; 0
    11be:	02 2e       	mov	r0, r18
    11c0:	02 c0       	rjmp	.+4      	; 0x11c6 <DIO_SetPinMode+0x406>
    11c2:	88 0f       	add	r24, r24
    11c4:	99 1f       	adc	r25, r25
    11c6:	0a 94       	dec	r0
    11c8:	e2 f7       	brpl	.-8      	; 0x11c2 <DIO_SetPinMode+0x402>
    11ca:	84 2b       	or	r24, r20
    11cc:	8c 93       	st	X, r24
        default:
            break;
        }

    }
}
    11ce:	29 96       	adiw	r28, 0x09	; 9
    11d0:	0f b6       	in	r0, 0x3f	; 63
    11d2:	f8 94       	cli
    11d4:	de bf       	out	0x3e, r29	; 62
    11d6:	0f be       	out	0x3f, r0	; 63
    11d8:	cd bf       	out	0x3d, r28	; 61
    11da:	cf 91       	pop	r28
    11dc:	df 91       	pop	r29
    11de:	08 95       	ret

000011e0 <DIO_SetPortMode>:

void DIO_SetPortMode(DIO_PortType port, DIO_ModeType mode) {
    11e0:	df 93       	push	r29
    11e2:	cf 93       	push	r28
    11e4:	cd b7       	in	r28, 0x3d	; 61
    11e6:	de b7       	in	r29, 0x3e	; 62
    11e8:	2a 97       	sbiw	r28, 0x0a	; 10
    11ea:	0f b6       	in	r0, 0x3f	; 63
    11ec:	f8 94       	cli
    11ee:	de bf       	out	0x3e, r29	; 62
    11f0:	0f be       	out	0x3f, r0	; 63
    11f2:	cd bf       	out	0x3d, r28	; 61
    11f4:	89 83       	std	Y+1, r24	; 0x01
    11f6:	6a 83       	std	Y+2, r22	; 0x02
    if (mode == DIO_INPUT_FLOATING)
    11f8:	8a 81       	ldd	r24, Y+2	; 0x02
    11fa:	88 23       	and	r24, r24
    11fc:	d9 f5       	brne	.+118    	; 0x1274 <DIO_SetPortMode+0x94>
    {
        switch (port)
    11fe:	89 81       	ldd	r24, Y+1	; 0x01
    1200:	28 2f       	mov	r18, r24
    1202:	30 e0       	ldi	r19, 0x00	; 0
    1204:	3a 87       	std	Y+10, r19	; 0x0a
    1206:	29 87       	std	Y+9, r18	; 0x09
    1208:	89 85       	ldd	r24, Y+9	; 0x09
    120a:	9a 85       	ldd	r25, Y+10	; 0x0a
    120c:	81 30       	cpi	r24, 0x01	; 1
    120e:	91 05       	cpc	r25, r1
    1210:	e1 f0       	breq	.+56     	; 0x124a <DIO_SetPortMode+0x6a>
    1212:	29 85       	ldd	r18, Y+9	; 0x09
    1214:	3a 85       	ldd	r19, Y+10	; 0x0a
    1216:	22 30       	cpi	r18, 0x02	; 2
    1218:	31 05       	cpc	r19, r1
    121a:	2c f4       	brge	.+10     	; 0x1226 <DIO_SetPortMode+0x46>
    121c:	89 85       	ldd	r24, Y+9	; 0x09
    121e:	9a 85       	ldd	r25, Y+10	; 0x0a
    1220:	00 97       	sbiw	r24, 0x00	; 0
    1222:	61 f0       	breq	.+24     	; 0x123c <DIO_SetPortMode+0x5c>
    1224:	d2 c0       	rjmp	.+420    	; 0x13ca <DIO_SetPortMode+0x1ea>
    1226:	29 85       	ldd	r18, Y+9	; 0x09
    1228:	3a 85       	ldd	r19, Y+10	; 0x0a
    122a:	22 30       	cpi	r18, 0x02	; 2
    122c:	31 05       	cpc	r19, r1
    122e:	a1 f0       	breq	.+40     	; 0x1258 <DIO_SetPortMode+0x78>
    1230:	89 85       	ldd	r24, Y+9	; 0x09
    1232:	9a 85       	ldd	r25, Y+10	; 0x0a
    1234:	83 30       	cpi	r24, 0x03	; 3
    1236:	91 05       	cpc	r25, r1
    1238:	b1 f0       	breq	.+44     	; 0x1266 <DIO_SetPortMode+0x86>
    123a:	c7 c0       	rjmp	.+398    	; 0x13ca <DIO_SetPortMode+0x1ea>
        {
        case DIO_PORTA:
            DDRA = 0x00;
    123c:	ea e3       	ldi	r30, 0x3A	; 58
    123e:	f0 e0       	ldi	r31, 0x00	; 0
    1240:	10 82       	st	Z, r1
            PORTA = 0x00;
    1242:	eb e3       	ldi	r30, 0x3B	; 59
    1244:	f0 e0       	ldi	r31, 0x00	; 0
    1246:	10 82       	st	Z, r1
    1248:	c0 c0       	rjmp	.+384    	; 0x13ca <DIO_SetPortMode+0x1ea>
            break;
        case DIO_PORTB:
            DDRB = 0x00;
    124a:	e7 e3       	ldi	r30, 0x37	; 55
    124c:	f0 e0       	ldi	r31, 0x00	; 0
    124e:	10 82       	st	Z, r1
            PORTB = 0x00;
    1250:	e8 e3       	ldi	r30, 0x38	; 56
    1252:	f0 e0       	ldi	r31, 0x00	; 0
    1254:	10 82       	st	Z, r1
    1256:	b9 c0       	rjmp	.+370    	; 0x13ca <DIO_SetPortMode+0x1ea>
            break;
        case DIO_PORTC:
            DDRC = 0x00;
    1258:	e4 e3       	ldi	r30, 0x34	; 52
    125a:	f0 e0       	ldi	r31, 0x00	; 0
    125c:	10 82       	st	Z, r1
            PORTC = 0x00;
    125e:	e5 e3       	ldi	r30, 0x35	; 53
    1260:	f0 e0       	ldi	r31, 0x00	; 0
    1262:	10 82       	st	Z, r1
    1264:	b2 c0       	rjmp	.+356    	; 0x13ca <DIO_SetPortMode+0x1ea>
            break;
        case DIO_PORTD:
            DDRD = 0x00;
    1266:	e1 e3       	ldi	r30, 0x31	; 49
    1268:	f0 e0       	ldi	r31, 0x00	; 0
    126a:	10 82       	st	Z, r1
            PORTD = 0x00;
    126c:	e2 e3       	ldi	r30, 0x32	; 50
    126e:	f0 e0       	ldi	r31, 0x00	; 0
    1270:	10 82       	st	Z, r1
    1272:	ab c0       	rjmp	.+342    	; 0x13ca <DIO_SetPortMode+0x1ea>
            break;
        default:
            break;
        }
    }
    else if (mode == DIO_INPUT_PULLUP)
    1274:	8a 81       	ldd	r24, Y+2	; 0x02
    1276:	81 30       	cpi	r24, 0x01	; 1
    1278:	09 f0       	breq	.+2      	; 0x127c <DIO_SetPortMode+0x9c>
    127a:	3f c0       	rjmp	.+126    	; 0x12fa <DIO_SetPortMode+0x11a>
    {
        switch (port)
    127c:	89 81       	ldd	r24, Y+1	; 0x01
    127e:	28 2f       	mov	r18, r24
    1280:	30 e0       	ldi	r19, 0x00	; 0
    1282:	38 87       	std	Y+8, r19	; 0x08
    1284:	2f 83       	std	Y+7, r18	; 0x07
    1286:	8f 81       	ldd	r24, Y+7	; 0x07
    1288:	98 85       	ldd	r25, Y+8	; 0x08
    128a:	81 30       	cpi	r24, 0x01	; 1
    128c:	91 05       	cpc	r25, r1
    128e:	e9 f0       	breq	.+58     	; 0x12ca <DIO_SetPortMode+0xea>
    1290:	2f 81       	ldd	r18, Y+7	; 0x07
    1292:	38 85       	ldd	r19, Y+8	; 0x08
    1294:	22 30       	cpi	r18, 0x02	; 2
    1296:	31 05       	cpc	r19, r1
    1298:	2c f4       	brge	.+10     	; 0x12a4 <DIO_SetPortMode+0xc4>
    129a:	8f 81       	ldd	r24, Y+7	; 0x07
    129c:	98 85       	ldd	r25, Y+8	; 0x08
    129e:	00 97       	sbiw	r24, 0x00	; 0
    12a0:	61 f0       	breq	.+24     	; 0x12ba <DIO_SetPortMode+0xda>
    12a2:	93 c0       	rjmp	.+294    	; 0x13ca <DIO_SetPortMode+0x1ea>
    12a4:	2f 81       	ldd	r18, Y+7	; 0x07
    12a6:	38 85       	ldd	r19, Y+8	; 0x08
    12a8:	22 30       	cpi	r18, 0x02	; 2
    12aa:	31 05       	cpc	r19, r1
    12ac:	b1 f0       	breq	.+44     	; 0x12da <DIO_SetPortMode+0xfa>
    12ae:	8f 81       	ldd	r24, Y+7	; 0x07
    12b0:	98 85       	ldd	r25, Y+8	; 0x08
    12b2:	83 30       	cpi	r24, 0x03	; 3
    12b4:	91 05       	cpc	r25, r1
    12b6:	c9 f0       	breq	.+50     	; 0x12ea <DIO_SetPortMode+0x10a>
    12b8:	88 c0       	rjmp	.+272    	; 0x13ca <DIO_SetPortMode+0x1ea>
        {
        case DIO_PORTA:
            DDRA = 0x00;
    12ba:	ea e3       	ldi	r30, 0x3A	; 58
    12bc:	f0 e0       	ldi	r31, 0x00	; 0
    12be:	10 82       	st	Z, r1
            PORTA = 0xFF;
    12c0:	eb e3       	ldi	r30, 0x3B	; 59
    12c2:	f0 e0       	ldi	r31, 0x00	; 0
    12c4:	8f ef       	ldi	r24, 0xFF	; 255
    12c6:	80 83       	st	Z, r24
    12c8:	80 c0       	rjmp	.+256    	; 0x13ca <DIO_SetPortMode+0x1ea>
            break;
        case DIO_PORTB:
            DDRB = 0x00;
    12ca:	e7 e3       	ldi	r30, 0x37	; 55
    12cc:	f0 e0       	ldi	r31, 0x00	; 0
    12ce:	10 82       	st	Z, r1
            PORTB = 0xFF;
    12d0:	e8 e3       	ldi	r30, 0x38	; 56
    12d2:	f0 e0       	ldi	r31, 0x00	; 0
    12d4:	8f ef       	ldi	r24, 0xFF	; 255
    12d6:	80 83       	st	Z, r24
    12d8:	78 c0       	rjmp	.+240    	; 0x13ca <DIO_SetPortMode+0x1ea>
            break;
        case DIO_PORTC:
            DDRC = 0x00;
    12da:	e4 e3       	ldi	r30, 0x34	; 52
    12dc:	f0 e0       	ldi	r31, 0x00	; 0
    12de:	10 82       	st	Z, r1
            PORTC = 0xFF;
    12e0:	e5 e3       	ldi	r30, 0x35	; 53
    12e2:	f0 e0       	ldi	r31, 0x00	; 0
    12e4:	8f ef       	ldi	r24, 0xFF	; 255
    12e6:	80 83       	st	Z, r24
    12e8:	70 c0       	rjmp	.+224    	; 0x13ca <DIO_SetPortMode+0x1ea>
            break;
        case DIO_PORTD:
            DDRD = 0x00;
    12ea:	e1 e3       	ldi	r30, 0x31	; 49
    12ec:	f0 e0       	ldi	r31, 0x00	; 0
    12ee:	10 82       	st	Z, r1
            PORTD = 0xFF;
    12f0:	e2 e3       	ldi	r30, 0x32	; 50
    12f2:	f0 e0       	ldi	r31, 0x00	; 0
    12f4:	8f ef       	ldi	r24, 0xFF	; 255
    12f6:	80 83       	st	Z, r24
    12f8:	68 c0       	rjmp	.+208    	; 0x13ca <DIO_SetPortMode+0x1ea>
            break;
        default:
            break;
        }
    }
    else if (mode == DIO_OUTPUT)
    12fa:	8a 81       	ldd	r24, Y+2	; 0x02
    12fc:	82 30       	cpi	r24, 0x02	; 2
    12fe:	99 f5       	brne	.+102    	; 0x1366 <DIO_SetPortMode+0x186>
    {
        switch (port)
    1300:	89 81       	ldd	r24, Y+1	; 0x01
    1302:	28 2f       	mov	r18, r24
    1304:	30 e0       	ldi	r19, 0x00	; 0
    1306:	3e 83       	std	Y+6, r19	; 0x06
    1308:	2d 83       	std	Y+5, r18	; 0x05
    130a:	8d 81       	ldd	r24, Y+5	; 0x05
    130c:	9e 81       	ldd	r25, Y+6	; 0x06
    130e:	81 30       	cpi	r24, 0x01	; 1
    1310:	91 05       	cpc	r25, r1
    1312:	d1 f0       	breq	.+52     	; 0x1348 <DIO_SetPortMode+0x168>
    1314:	2d 81       	ldd	r18, Y+5	; 0x05
    1316:	3e 81       	ldd	r19, Y+6	; 0x06
    1318:	22 30       	cpi	r18, 0x02	; 2
    131a:	31 05       	cpc	r19, r1
    131c:	2c f4       	brge	.+10     	; 0x1328 <DIO_SetPortMode+0x148>
    131e:	8d 81       	ldd	r24, Y+5	; 0x05
    1320:	9e 81       	ldd	r25, Y+6	; 0x06
    1322:	00 97       	sbiw	r24, 0x00	; 0
    1324:	61 f0       	breq	.+24     	; 0x133e <DIO_SetPortMode+0x15e>
    1326:	51 c0       	rjmp	.+162    	; 0x13ca <DIO_SetPortMode+0x1ea>
    1328:	2d 81       	ldd	r18, Y+5	; 0x05
    132a:	3e 81       	ldd	r19, Y+6	; 0x06
    132c:	22 30       	cpi	r18, 0x02	; 2
    132e:	31 05       	cpc	r19, r1
    1330:	81 f0       	breq	.+32     	; 0x1352 <DIO_SetPortMode+0x172>
    1332:	8d 81       	ldd	r24, Y+5	; 0x05
    1334:	9e 81       	ldd	r25, Y+6	; 0x06
    1336:	83 30       	cpi	r24, 0x03	; 3
    1338:	91 05       	cpc	r25, r1
    133a:	81 f0       	breq	.+32     	; 0x135c <DIO_SetPortMode+0x17c>
    133c:	46 c0       	rjmp	.+140    	; 0x13ca <DIO_SetPortMode+0x1ea>
        {
        case DIO_PORTA:
            DDRA = 0xFF;
    133e:	ea e3       	ldi	r30, 0x3A	; 58
    1340:	f0 e0       	ldi	r31, 0x00	; 0
    1342:	8f ef       	ldi	r24, 0xFF	; 255
    1344:	80 83       	st	Z, r24
    1346:	41 c0       	rjmp	.+130    	; 0x13ca <DIO_SetPortMode+0x1ea>
            break;
        case DIO_PORTB:
            DDRB = 0xFF;
    1348:	e7 e3       	ldi	r30, 0x37	; 55
    134a:	f0 e0       	ldi	r31, 0x00	; 0
    134c:	8f ef       	ldi	r24, 0xFF	; 255
    134e:	80 83       	st	Z, r24
    1350:	3c c0       	rjmp	.+120    	; 0x13ca <DIO_SetPortMode+0x1ea>
            break;
        case DIO_PORTC:
            DDRC = 0xFF;
    1352:	e4 e3       	ldi	r30, 0x34	; 52
    1354:	f0 e0       	ldi	r31, 0x00	; 0
    1356:	8f ef       	ldi	r24, 0xFF	; 255
    1358:	80 83       	st	Z, r24
    135a:	37 c0       	rjmp	.+110    	; 0x13ca <DIO_SetPortMode+0x1ea>
            break;
        case DIO_PORTD:
            DDRD = 0xFF;
    135c:	e1 e3       	ldi	r30, 0x31	; 49
    135e:	f0 e0       	ldi	r31, 0x00	; 0
    1360:	8f ef       	ldi	r24, 0xFF	; 255
    1362:	80 83       	st	Z, r24
    1364:	32 c0       	rjmp	.+100    	; 0x13ca <DIO_SetPortMode+0x1ea>
        }

    }
    else
    {
        switch (port)
    1366:	89 81       	ldd	r24, Y+1	; 0x01
    1368:	28 2f       	mov	r18, r24
    136a:	30 e0       	ldi	r19, 0x00	; 0
    136c:	3c 83       	std	Y+4, r19	; 0x04
    136e:	2b 83       	std	Y+3, r18	; 0x03
    1370:	8b 81       	ldd	r24, Y+3	; 0x03
    1372:	9c 81       	ldd	r25, Y+4	; 0x04
    1374:	81 30       	cpi	r24, 0x01	; 1
    1376:	91 05       	cpc	r25, r1
    1378:	d1 f0       	breq	.+52     	; 0x13ae <DIO_SetPortMode+0x1ce>
    137a:	2b 81       	ldd	r18, Y+3	; 0x03
    137c:	3c 81       	ldd	r19, Y+4	; 0x04
    137e:	22 30       	cpi	r18, 0x02	; 2
    1380:	31 05       	cpc	r19, r1
    1382:	2c f4       	brge	.+10     	; 0x138e <DIO_SetPortMode+0x1ae>
    1384:	8b 81       	ldd	r24, Y+3	; 0x03
    1386:	9c 81       	ldd	r25, Y+4	; 0x04
    1388:	00 97       	sbiw	r24, 0x00	; 0
    138a:	61 f0       	breq	.+24     	; 0x13a4 <DIO_SetPortMode+0x1c4>
    138c:	1e c0       	rjmp	.+60     	; 0x13ca <DIO_SetPortMode+0x1ea>
    138e:	2b 81       	ldd	r18, Y+3	; 0x03
    1390:	3c 81       	ldd	r19, Y+4	; 0x04
    1392:	22 30       	cpi	r18, 0x02	; 2
    1394:	31 05       	cpc	r19, r1
    1396:	81 f0       	breq	.+32     	; 0x13b8 <DIO_SetPortMode+0x1d8>
    1398:	8b 81       	ldd	r24, Y+3	; 0x03
    139a:	9c 81       	ldd	r25, Y+4	; 0x04
    139c:	83 30       	cpi	r24, 0x03	; 3
    139e:	91 05       	cpc	r25, r1
    13a0:	81 f0       	breq	.+32     	; 0x13c2 <DIO_SetPortMode+0x1e2>
    13a2:	13 c0       	rjmp	.+38     	; 0x13ca <DIO_SetPortMode+0x1ea>
        {
        case DIO_PORTA:
            DDRA = mode;
    13a4:	ea e3       	ldi	r30, 0x3A	; 58
    13a6:	f0 e0       	ldi	r31, 0x00	; 0
    13a8:	8a 81       	ldd	r24, Y+2	; 0x02
    13aa:	80 83       	st	Z, r24
    13ac:	0e c0       	rjmp	.+28     	; 0x13ca <DIO_SetPortMode+0x1ea>
            break;
        case DIO_PORTB:
            DDRB = mode;
    13ae:	e7 e3       	ldi	r30, 0x37	; 55
    13b0:	f0 e0       	ldi	r31, 0x00	; 0
    13b2:	8a 81       	ldd	r24, Y+2	; 0x02
    13b4:	80 83       	st	Z, r24
    13b6:	09 c0       	rjmp	.+18     	; 0x13ca <DIO_SetPortMode+0x1ea>
            break;
        case DIO_PORTC:
            DDRC = mode;
    13b8:	e4 e3       	ldi	r30, 0x34	; 52
    13ba:	f0 e0       	ldi	r31, 0x00	; 0
    13bc:	8a 81       	ldd	r24, Y+2	; 0x02
    13be:	80 83       	st	Z, r24
    13c0:	04 c0       	rjmp	.+8      	; 0x13ca <DIO_SetPortMode+0x1ea>
            break;
        case DIO_PORTD:
            DDRD = mode;
    13c2:	e1 e3       	ldi	r30, 0x31	; 49
    13c4:	f0 e0       	ldi	r31, 0x00	; 0
    13c6:	8a 81       	ldd	r24, Y+2	; 0x02
    13c8:	80 83       	st	Z, r24
        default:
            break;
        }

    }
}
    13ca:	2a 96       	adiw	r28, 0x0a	; 10
    13cc:	0f b6       	in	r0, 0x3f	; 63
    13ce:	f8 94       	cli
    13d0:	de bf       	out	0x3e, r29	; 62
    13d2:	0f be       	out	0x3f, r0	; 63
    13d4:	cd bf       	out	0x3d, r28	; 61
    13d6:	cf 91       	pop	r28
    13d8:	df 91       	pop	r29
    13da:	08 95       	ret

000013dc <DIO_SetPinLevel>:


void DIO_SetPinLevel(DIO_PortType port, DIO_PinType pin, DIO_LevelType level) {
    13dc:	df 93       	push	r29
    13de:	cf 93       	push	r28
    13e0:	cd b7       	in	r28, 0x3d	; 61
    13e2:	de b7       	in	r29, 0x3e	; 62
    13e4:	27 97       	sbiw	r28, 0x07	; 7
    13e6:	0f b6       	in	r0, 0x3f	; 63
    13e8:	f8 94       	cli
    13ea:	de bf       	out	0x3e, r29	; 62
    13ec:	0f be       	out	0x3f, r0	; 63
    13ee:	cd bf       	out	0x3d, r28	; 61
    13f0:	89 83       	std	Y+1, r24	; 0x01
    13f2:	6a 83       	std	Y+2, r22	; 0x02
    13f4:	4b 83       	std	Y+3, r20	; 0x03
    if (level == DIO_HIGH)
    13f6:	8b 81       	ldd	r24, Y+3	; 0x03
    13f8:	81 30       	cpi	r24, 0x01	; 1
    13fa:	09 f0       	breq	.+2      	; 0x13fe <DIO_SetPinLevel+0x22>
    13fc:	6f c0       	rjmp	.+222    	; 0x14dc <DIO_SetPinLevel+0x100>
    {
        switch (port)
    13fe:	89 81       	ldd	r24, Y+1	; 0x01
    1400:	28 2f       	mov	r18, r24
    1402:	30 e0       	ldi	r19, 0x00	; 0
    1404:	3f 83       	std	Y+7, r19	; 0x07
    1406:	2e 83       	std	Y+6, r18	; 0x06
    1408:	8e 81       	ldd	r24, Y+6	; 0x06
    140a:	9f 81       	ldd	r25, Y+7	; 0x07
    140c:	81 30       	cpi	r24, 0x01	; 1
    140e:	91 05       	cpc	r25, r1
    1410:	49 f1       	breq	.+82     	; 0x1464 <DIO_SetPinLevel+0x88>
    1412:	2e 81       	ldd	r18, Y+6	; 0x06
    1414:	3f 81       	ldd	r19, Y+7	; 0x07
    1416:	22 30       	cpi	r18, 0x02	; 2
    1418:	31 05       	cpc	r19, r1
    141a:	2c f4       	brge	.+10     	; 0x1426 <DIO_SetPinLevel+0x4a>
    141c:	8e 81       	ldd	r24, Y+6	; 0x06
    141e:	9f 81       	ldd	r25, Y+7	; 0x07
    1420:	00 97       	sbiw	r24, 0x00	; 0
    1422:	61 f0       	breq	.+24     	; 0x143c <DIO_SetPinLevel+0x60>
    1424:	d2 c0       	rjmp	.+420    	; 0x15ca <DIO_SetPinLevel+0x1ee>
    1426:	2e 81       	ldd	r18, Y+6	; 0x06
    1428:	3f 81       	ldd	r19, Y+7	; 0x07
    142a:	22 30       	cpi	r18, 0x02	; 2
    142c:	31 05       	cpc	r19, r1
    142e:	71 f1       	breq	.+92     	; 0x148c <DIO_SetPinLevel+0xb0>
    1430:	8e 81       	ldd	r24, Y+6	; 0x06
    1432:	9f 81       	ldd	r25, Y+7	; 0x07
    1434:	83 30       	cpi	r24, 0x03	; 3
    1436:	91 05       	cpc	r25, r1
    1438:	e9 f1       	breq	.+122    	; 0x14b4 <DIO_SetPinLevel+0xd8>
    143a:	c7 c0       	rjmp	.+398    	; 0x15ca <DIO_SetPinLevel+0x1ee>
        {
        case DIO_PORTA:
            SET_BIT(PORTA, pin);
    143c:	ab e3       	ldi	r26, 0x3B	; 59
    143e:	b0 e0       	ldi	r27, 0x00	; 0
    1440:	eb e3       	ldi	r30, 0x3B	; 59
    1442:	f0 e0       	ldi	r31, 0x00	; 0
    1444:	80 81       	ld	r24, Z
    1446:	48 2f       	mov	r20, r24
    1448:	8a 81       	ldd	r24, Y+2	; 0x02
    144a:	28 2f       	mov	r18, r24
    144c:	30 e0       	ldi	r19, 0x00	; 0
    144e:	81 e0       	ldi	r24, 0x01	; 1
    1450:	90 e0       	ldi	r25, 0x00	; 0
    1452:	02 2e       	mov	r0, r18
    1454:	02 c0       	rjmp	.+4      	; 0x145a <DIO_SetPinLevel+0x7e>
    1456:	88 0f       	add	r24, r24
    1458:	99 1f       	adc	r25, r25
    145a:	0a 94       	dec	r0
    145c:	e2 f7       	brpl	.-8      	; 0x1456 <DIO_SetPinLevel+0x7a>
    145e:	84 2b       	or	r24, r20
    1460:	8c 93       	st	X, r24
    1462:	b3 c0       	rjmp	.+358    	; 0x15ca <DIO_SetPinLevel+0x1ee>
            break;
        case DIO_PORTB:
            SET_BIT(PORTB, pin);
    1464:	a8 e3       	ldi	r26, 0x38	; 56
    1466:	b0 e0       	ldi	r27, 0x00	; 0
    1468:	e8 e3       	ldi	r30, 0x38	; 56
    146a:	f0 e0       	ldi	r31, 0x00	; 0
    146c:	80 81       	ld	r24, Z
    146e:	48 2f       	mov	r20, r24
    1470:	8a 81       	ldd	r24, Y+2	; 0x02
    1472:	28 2f       	mov	r18, r24
    1474:	30 e0       	ldi	r19, 0x00	; 0
    1476:	81 e0       	ldi	r24, 0x01	; 1
    1478:	90 e0       	ldi	r25, 0x00	; 0
    147a:	02 2e       	mov	r0, r18
    147c:	02 c0       	rjmp	.+4      	; 0x1482 <DIO_SetPinLevel+0xa6>
    147e:	88 0f       	add	r24, r24
    1480:	99 1f       	adc	r25, r25
    1482:	0a 94       	dec	r0
    1484:	e2 f7       	brpl	.-8      	; 0x147e <DIO_SetPinLevel+0xa2>
    1486:	84 2b       	or	r24, r20
    1488:	8c 93       	st	X, r24
    148a:	9f c0       	rjmp	.+318    	; 0x15ca <DIO_SetPinLevel+0x1ee>
            break;
        case DIO_PORTC:
            SET_BIT(PORTC, pin);
    148c:	a5 e3       	ldi	r26, 0x35	; 53
    148e:	b0 e0       	ldi	r27, 0x00	; 0
    1490:	e5 e3       	ldi	r30, 0x35	; 53
    1492:	f0 e0       	ldi	r31, 0x00	; 0
    1494:	80 81       	ld	r24, Z
    1496:	48 2f       	mov	r20, r24
    1498:	8a 81       	ldd	r24, Y+2	; 0x02
    149a:	28 2f       	mov	r18, r24
    149c:	30 e0       	ldi	r19, 0x00	; 0
    149e:	81 e0       	ldi	r24, 0x01	; 1
    14a0:	90 e0       	ldi	r25, 0x00	; 0
    14a2:	02 2e       	mov	r0, r18
    14a4:	02 c0       	rjmp	.+4      	; 0x14aa <DIO_SetPinLevel+0xce>
    14a6:	88 0f       	add	r24, r24
    14a8:	99 1f       	adc	r25, r25
    14aa:	0a 94       	dec	r0
    14ac:	e2 f7       	brpl	.-8      	; 0x14a6 <DIO_SetPinLevel+0xca>
    14ae:	84 2b       	or	r24, r20
    14b0:	8c 93       	st	X, r24
    14b2:	8b c0       	rjmp	.+278    	; 0x15ca <DIO_SetPinLevel+0x1ee>
            break;
        case DIO_PORTD:
            SET_BIT(PORTD, pin);
    14b4:	a2 e3       	ldi	r26, 0x32	; 50
    14b6:	b0 e0       	ldi	r27, 0x00	; 0
    14b8:	e2 e3       	ldi	r30, 0x32	; 50
    14ba:	f0 e0       	ldi	r31, 0x00	; 0
    14bc:	80 81       	ld	r24, Z
    14be:	48 2f       	mov	r20, r24
    14c0:	8a 81       	ldd	r24, Y+2	; 0x02
    14c2:	28 2f       	mov	r18, r24
    14c4:	30 e0       	ldi	r19, 0x00	; 0
    14c6:	81 e0       	ldi	r24, 0x01	; 1
    14c8:	90 e0       	ldi	r25, 0x00	; 0
    14ca:	02 2e       	mov	r0, r18
    14cc:	02 c0       	rjmp	.+4      	; 0x14d2 <DIO_SetPinLevel+0xf6>
    14ce:	88 0f       	add	r24, r24
    14d0:	99 1f       	adc	r25, r25
    14d2:	0a 94       	dec	r0
    14d4:	e2 f7       	brpl	.-8      	; 0x14ce <DIO_SetPinLevel+0xf2>
    14d6:	84 2b       	or	r24, r20
    14d8:	8c 93       	st	X, r24
    14da:	77 c0       	rjmp	.+238    	; 0x15ca <DIO_SetPinLevel+0x1ee>
            break;
        default:
            break;
        }
    }
    else if (level == DIO_LOW)
    14dc:	8b 81       	ldd	r24, Y+3	; 0x03
    14de:	88 23       	and	r24, r24
    14e0:	09 f0       	breq	.+2      	; 0x14e4 <DIO_SetPinLevel+0x108>
    14e2:	73 c0       	rjmp	.+230    	; 0x15ca <DIO_SetPinLevel+0x1ee>
    {
        switch (port)
    14e4:	89 81       	ldd	r24, Y+1	; 0x01
    14e6:	28 2f       	mov	r18, r24
    14e8:	30 e0       	ldi	r19, 0x00	; 0
    14ea:	3d 83       	std	Y+5, r19	; 0x05
    14ec:	2c 83       	std	Y+4, r18	; 0x04
    14ee:	8c 81       	ldd	r24, Y+4	; 0x04
    14f0:	9d 81       	ldd	r25, Y+5	; 0x05
    14f2:	81 30       	cpi	r24, 0x01	; 1
    14f4:	91 05       	cpc	r25, r1
    14f6:	59 f1       	breq	.+86     	; 0x154e <DIO_SetPinLevel+0x172>
    14f8:	2c 81       	ldd	r18, Y+4	; 0x04
    14fa:	3d 81       	ldd	r19, Y+5	; 0x05
    14fc:	22 30       	cpi	r18, 0x02	; 2
    14fe:	31 05       	cpc	r19, r1
    1500:	2c f4       	brge	.+10     	; 0x150c <DIO_SetPinLevel+0x130>
    1502:	8c 81       	ldd	r24, Y+4	; 0x04
    1504:	9d 81       	ldd	r25, Y+5	; 0x05
    1506:	00 97       	sbiw	r24, 0x00	; 0
    1508:	69 f0       	breq	.+26     	; 0x1524 <DIO_SetPinLevel+0x148>
    150a:	5f c0       	rjmp	.+190    	; 0x15ca <DIO_SetPinLevel+0x1ee>
    150c:	2c 81       	ldd	r18, Y+4	; 0x04
    150e:	3d 81       	ldd	r19, Y+5	; 0x05
    1510:	22 30       	cpi	r18, 0x02	; 2
    1512:	31 05       	cpc	r19, r1
    1514:	89 f1       	breq	.+98     	; 0x1578 <DIO_SetPinLevel+0x19c>
    1516:	8c 81       	ldd	r24, Y+4	; 0x04
    1518:	9d 81       	ldd	r25, Y+5	; 0x05
    151a:	83 30       	cpi	r24, 0x03	; 3
    151c:	91 05       	cpc	r25, r1
    151e:	09 f4       	brne	.+2      	; 0x1522 <DIO_SetPinLevel+0x146>
    1520:	40 c0       	rjmp	.+128    	; 0x15a2 <DIO_SetPinLevel+0x1c6>
    1522:	53 c0       	rjmp	.+166    	; 0x15ca <DIO_SetPinLevel+0x1ee>
        {
        case DIO_PORTA:
            CLR_BIT(PORTA, pin);
    1524:	ab e3       	ldi	r26, 0x3B	; 59
    1526:	b0 e0       	ldi	r27, 0x00	; 0
    1528:	eb e3       	ldi	r30, 0x3B	; 59
    152a:	f0 e0       	ldi	r31, 0x00	; 0
    152c:	80 81       	ld	r24, Z
    152e:	48 2f       	mov	r20, r24
    1530:	8a 81       	ldd	r24, Y+2	; 0x02
    1532:	28 2f       	mov	r18, r24
    1534:	30 e0       	ldi	r19, 0x00	; 0
    1536:	81 e0       	ldi	r24, 0x01	; 1
    1538:	90 e0       	ldi	r25, 0x00	; 0
    153a:	02 2e       	mov	r0, r18
    153c:	02 c0       	rjmp	.+4      	; 0x1542 <DIO_SetPinLevel+0x166>
    153e:	88 0f       	add	r24, r24
    1540:	99 1f       	adc	r25, r25
    1542:	0a 94       	dec	r0
    1544:	e2 f7       	brpl	.-8      	; 0x153e <DIO_SetPinLevel+0x162>
    1546:	80 95       	com	r24
    1548:	84 23       	and	r24, r20
    154a:	8c 93       	st	X, r24
    154c:	3e c0       	rjmp	.+124    	; 0x15ca <DIO_SetPinLevel+0x1ee>
            break;
        case DIO_PORTB:
            CLR_BIT(PORTB, pin);
    154e:	a8 e3       	ldi	r26, 0x38	; 56
    1550:	b0 e0       	ldi	r27, 0x00	; 0
    1552:	e8 e3       	ldi	r30, 0x38	; 56
    1554:	f0 e0       	ldi	r31, 0x00	; 0
    1556:	80 81       	ld	r24, Z
    1558:	48 2f       	mov	r20, r24
    155a:	8a 81       	ldd	r24, Y+2	; 0x02
    155c:	28 2f       	mov	r18, r24
    155e:	30 e0       	ldi	r19, 0x00	; 0
    1560:	81 e0       	ldi	r24, 0x01	; 1
    1562:	90 e0       	ldi	r25, 0x00	; 0
    1564:	02 2e       	mov	r0, r18
    1566:	02 c0       	rjmp	.+4      	; 0x156c <DIO_SetPinLevel+0x190>
    1568:	88 0f       	add	r24, r24
    156a:	99 1f       	adc	r25, r25
    156c:	0a 94       	dec	r0
    156e:	e2 f7       	brpl	.-8      	; 0x1568 <DIO_SetPinLevel+0x18c>
    1570:	80 95       	com	r24
    1572:	84 23       	and	r24, r20
    1574:	8c 93       	st	X, r24
    1576:	29 c0       	rjmp	.+82     	; 0x15ca <DIO_SetPinLevel+0x1ee>
            break;
        case DIO_PORTC:
            CLR_BIT(PORTC, pin);
    1578:	a5 e3       	ldi	r26, 0x35	; 53
    157a:	b0 e0       	ldi	r27, 0x00	; 0
    157c:	e5 e3       	ldi	r30, 0x35	; 53
    157e:	f0 e0       	ldi	r31, 0x00	; 0
    1580:	80 81       	ld	r24, Z
    1582:	48 2f       	mov	r20, r24
    1584:	8a 81       	ldd	r24, Y+2	; 0x02
    1586:	28 2f       	mov	r18, r24
    1588:	30 e0       	ldi	r19, 0x00	; 0
    158a:	81 e0       	ldi	r24, 0x01	; 1
    158c:	90 e0       	ldi	r25, 0x00	; 0
    158e:	02 2e       	mov	r0, r18
    1590:	02 c0       	rjmp	.+4      	; 0x1596 <DIO_SetPinLevel+0x1ba>
    1592:	88 0f       	add	r24, r24
    1594:	99 1f       	adc	r25, r25
    1596:	0a 94       	dec	r0
    1598:	e2 f7       	brpl	.-8      	; 0x1592 <DIO_SetPinLevel+0x1b6>
    159a:	80 95       	com	r24
    159c:	84 23       	and	r24, r20
    159e:	8c 93       	st	X, r24
    15a0:	14 c0       	rjmp	.+40     	; 0x15ca <DIO_SetPinLevel+0x1ee>
            break;
        case DIO_PORTD:
            CLR_BIT(PORTD, pin);
    15a2:	a2 e3       	ldi	r26, 0x32	; 50
    15a4:	b0 e0       	ldi	r27, 0x00	; 0
    15a6:	e2 e3       	ldi	r30, 0x32	; 50
    15a8:	f0 e0       	ldi	r31, 0x00	; 0
    15aa:	80 81       	ld	r24, Z
    15ac:	48 2f       	mov	r20, r24
    15ae:	8a 81       	ldd	r24, Y+2	; 0x02
    15b0:	28 2f       	mov	r18, r24
    15b2:	30 e0       	ldi	r19, 0x00	; 0
    15b4:	81 e0       	ldi	r24, 0x01	; 1
    15b6:	90 e0       	ldi	r25, 0x00	; 0
    15b8:	02 2e       	mov	r0, r18
    15ba:	02 c0       	rjmp	.+4      	; 0x15c0 <DIO_SetPinLevel+0x1e4>
    15bc:	88 0f       	add	r24, r24
    15be:	99 1f       	adc	r25, r25
    15c0:	0a 94       	dec	r0
    15c2:	e2 f7       	brpl	.-8      	; 0x15bc <DIO_SetPinLevel+0x1e0>
    15c4:	80 95       	com	r24
    15c6:	84 23       	and	r24, r20
    15c8:	8c 93       	st	X, r24
            break;
        default:
            break;
        }
    }
}
    15ca:	27 96       	adiw	r28, 0x07	; 7
    15cc:	0f b6       	in	r0, 0x3f	; 63
    15ce:	f8 94       	cli
    15d0:	de bf       	out	0x3e, r29	; 62
    15d2:	0f be       	out	0x3f, r0	; 63
    15d4:	cd bf       	out	0x3d, r28	; 61
    15d6:	cf 91       	pop	r28
    15d8:	df 91       	pop	r29
    15da:	08 95       	ret

000015dc <DIO_SetPortLevel>:

void DIO_SetPortLevel (DIO_PortType port, DIO_LevelType level) {
    15dc:	df 93       	push	r29
    15de:	cf 93       	push	r28
    15e0:	cd b7       	in	r28, 0x3d	; 61
    15e2:	de b7       	in	r29, 0x3e	; 62
    15e4:	28 97       	sbiw	r28, 0x08	; 8
    15e6:	0f b6       	in	r0, 0x3f	; 63
    15e8:	f8 94       	cli
    15ea:	de bf       	out	0x3e, r29	; 62
    15ec:	0f be       	out	0x3f, r0	; 63
    15ee:	cd bf       	out	0x3d, r28	; 61
    15f0:	89 83       	std	Y+1, r24	; 0x01
    15f2:	6a 83       	std	Y+2, r22	; 0x02
    if (level == DIO_HIGH) {
    15f4:	8a 81       	ldd	r24, Y+2	; 0x02
    15f6:	81 30       	cpi	r24, 0x01	; 1
    15f8:	99 f5       	brne	.+102    	; 0x1660 <DIO_SetPortLevel+0x84>
        switch (port)
    15fa:	89 81       	ldd	r24, Y+1	; 0x01
    15fc:	28 2f       	mov	r18, r24
    15fe:	30 e0       	ldi	r19, 0x00	; 0
    1600:	38 87       	std	Y+8, r19	; 0x08
    1602:	2f 83       	std	Y+7, r18	; 0x07
    1604:	8f 81       	ldd	r24, Y+7	; 0x07
    1606:	98 85       	ldd	r25, Y+8	; 0x08
    1608:	81 30       	cpi	r24, 0x01	; 1
    160a:	91 05       	cpc	r25, r1
    160c:	d1 f0       	breq	.+52     	; 0x1642 <DIO_SetPortLevel+0x66>
    160e:	2f 81       	ldd	r18, Y+7	; 0x07
    1610:	38 85       	ldd	r19, Y+8	; 0x08
    1612:	22 30       	cpi	r18, 0x02	; 2
    1614:	31 05       	cpc	r19, r1
    1616:	2c f4       	brge	.+10     	; 0x1622 <DIO_SetPortLevel+0x46>
    1618:	8f 81       	ldd	r24, Y+7	; 0x07
    161a:	98 85       	ldd	r25, Y+8	; 0x08
    161c:	00 97       	sbiw	r24, 0x00	; 0
    161e:	61 f0       	breq	.+24     	; 0x1638 <DIO_SetPortLevel+0x5c>
    1620:	83 c0       	rjmp	.+262    	; 0x1728 <DIO_SetPortLevel+0x14c>
    1622:	2f 81       	ldd	r18, Y+7	; 0x07
    1624:	38 85       	ldd	r19, Y+8	; 0x08
    1626:	22 30       	cpi	r18, 0x02	; 2
    1628:	31 05       	cpc	r19, r1
    162a:	81 f0       	breq	.+32     	; 0x164c <DIO_SetPortLevel+0x70>
    162c:	8f 81       	ldd	r24, Y+7	; 0x07
    162e:	98 85       	ldd	r25, Y+8	; 0x08
    1630:	83 30       	cpi	r24, 0x03	; 3
    1632:	91 05       	cpc	r25, r1
    1634:	81 f0       	breq	.+32     	; 0x1656 <DIO_SetPortLevel+0x7a>
    1636:	78 c0       	rjmp	.+240    	; 0x1728 <DIO_SetPortLevel+0x14c>
        {
        case DIO_PORTA:
            PORTA = 0xFF;
    1638:	eb e3       	ldi	r30, 0x3B	; 59
    163a:	f0 e0       	ldi	r31, 0x00	; 0
    163c:	8f ef       	ldi	r24, 0xFF	; 255
    163e:	80 83       	st	Z, r24
    1640:	73 c0       	rjmp	.+230    	; 0x1728 <DIO_SetPortLevel+0x14c>
            break;
        case DIO_PORTB:
            PORTB = 0xFF;
    1642:	e8 e3       	ldi	r30, 0x38	; 56
    1644:	f0 e0       	ldi	r31, 0x00	; 0
    1646:	8f ef       	ldi	r24, 0xFF	; 255
    1648:	80 83       	st	Z, r24
    164a:	6e c0       	rjmp	.+220    	; 0x1728 <DIO_SetPortLevel+0x14c>
            break;
        case DIO_PORTC:
            PORTC = 0xFF;
    164c:	e5 e3       	ldi	r30, 0x35	; 53
    164e:	f0 e0       	ldi	r31, 0x00	; 0
    1650:	8f ef       	ldi	r24, 0xFF	; 255
    1652:	80 83       	st	Z, r24
    1654:	69 c0       	rjmp	.+210    	; 0x1728 <DIO_SetPortLevel+0x14c>
            break;
        case DIO_PORTD:
            PORTD = 0xFF;
    1656:	e2 e3       	ldi	r30, 0x32	; 50
    1658:	f0 e0       	ldi	r31, 0x00	; 0
    165a:	8f ef       	ldi	r24, 0xFF	; 255
    165c:	80 83       	st	Z, r24
    165e:	64 c0       	rjmp	.+200    	; 0x1728 <DIO_SetPortLevel+0x14c>
            break;
        default:
            break;
        }
    }
    else if (level == DIO_LOW) {
    1660:	8a 81       	ldd	r24, Y+2	; 0x02
    1662:	88 23       	and	r24, r24
    1664:	79 f5       	brne	.+94     	; 0x16c4 <DIO_SetPortLevel+0xe8>
        switch (port)
    1666:	89 81       	ldd	r24, Y+1	; 0x01
    1668:	28 2f       	mov	r18, r24
    166a:	30 e0       	ldi	r19, 0x00	; 0
    166c:	3e 83       	std	Y+6, r19	; 0x06
    166e:	2d 83       	std	Y+5, r18	; 0x05
    1670:	8d 81       	ldd	r24, Y+5	; 0x05
    1672:	9e 81       	ldd	r25, Y+6	; 0x06
    1674:	81 30       	cpi	r24, 0x01	; 1
    1676:	91 05       	cpc	r25, r1
    1678:	c9 f0       	breq	.+50     	; 0x16ac <DIO_SetPortLevel+0xd0>
    167a:	2d 81       	ldd	r18, Y+5	; 0x05
    167c:	3e 81       	ldd	r19, Y+6	; 0x06
    167e:	22 30       	cpi	r18, 0x02	; 2
    1680:	31 05       	cpc	r19, r1
    1682:	2c f4       	brge	.+10     	; 0x168e <DIO_SetPortLevel+0xb2>
    1684:	8d 81       	ldd	r24, Y+5	; 0x05
    1686:	9e 81       	ldd	r25, Y+6	; 0x06
    1688:	00 97       	sbiw	r24, 0x00	; 0
    168a:	61 f0       	breq	.+24     	; 0x16a4 <DIO_SetPortLevel+0xc8>
    168c:	4d c0       	rjmp	.+154    	; 0x1728 <DIO_SetPortLevel+0x14c>
    168e:	2d 81       	ldd	r18, Y+5	; 0x05
    1690:	3e 81       	ldd	r19, Y+6	; 0x06
    1692:	22 30       	cpi	r18, 0x02	; 2
    1694:	31 05       	cpc	r19, r1
    1696:	71 f0       	breq	.+28     	; 0x16b4 <DIO_SetPortLevel+0xd8>
    1698:	8d 81       	ldd	r24, Y+5	; 0x05
    169a:	9e 81       	ldd	r25, Y+6	; 0x06
    169c:	83 30       	cpi	r24, 0x03	; 3
    169e:	91 05       	cpc	r25, r1
    16a0:	69 f0       	breq	.+26     	; 0x16bc <DIO_SetPortLevel+0xe0>
    16a2:	42 c0       	rjmp	.+132    	; 0x1728 <DIO_SetPortLevel+0x14c>
        {
        case DIO_PORTA:
            PORTA = 0x00;
    16a4:	eb e3       	ldi	r30, 0x3B	; 59
    16a6:	f0 e0       	ldi	r31, 0x00	; 0
    16a8:	10 82       	st	Z, r1
    16aa:	3e c0       	rjmp	.+124    	; 0x1728 <DIO_SetPortLevel+0x14c>
            break;
        case DIO_PORTB:
            PORTB = 0x00;
    16ac:	e8 e3       	ldi	r30, 0x38	; 56
    16ae:	f0 e0       	ldi	r31, 0x00	; 0
    16b0:	10 82       	st	Z, r1
    16b2:	3a c0       	rjmp	.+116    	; 0x1728 <DIO_SetPortLevel+0x14c>
            break;
        case DIO_PORTC:
            PORTC = 0x00;
    16b4:	e5 e3       	ldi	r30, 0x35	; 53
    16b6:	f0 e0       	ldi	r31, 0x00	; 0
    16b8:	10 82       	st	Z, r1
    16ba:	36 c0       	rjmp	.+108    	; 0x1728 <DIO_SetPortLevel+0x14c>
            break;
        case DIO_PORTD:
            PORTD = 0x00;
    16bc:	e2 e3       	ldi	r30, 0x32	; 50
    16be:	f0 e0       	ldi	r31, 0x00	; 0
    16c0:	10 82       	st	Z, r1
    16c2:	32 c0       	rjmp	.+100    	; 0x1728 <DIO_SetPortLevel+0x14c>
        default:
            break;
        }
    }
    else {
        switch (port)
    16c4:	89 81       	ldd	r24, Y+1	; 0x01
    16c6:	28 2f       	mov	r18, r24
    16c8:	30 e0       	ldi	r19, 0x00	; 0
    16ca:	3c 83       	std	Y+4, r19	; 0x04
    16cc:	2b 83       	std	Y+3, r18	; 0x03
    16ce:	8b 81       	ldd	r24, Y+3	; 0x03
    16d0:	9c 81       	ldd	r25, Y+4	; 0x04
    16d2:	81 30       	cpi	r24, 0x01	; 1
    16d4:	91 05       	cpc	r25, r1
    16d6:	d1 f0       	breq	.+52     	; 0x170c <DIO_SetPortLevel+0x130>
    16d8:	2b 81       	ldd	r18, Y+3	; 0x03
    16da:	3c 81       	ldd	r19, Y+4	; 0x04
    16dc:	22 30       	cpi	r18, 0x02	; 2
    16de:	31 05       	cpc	r19, r1
    16e0:	2c f4       	brge	.+10     	; 0x16ec <DIO_SetPortLevel+0x110>
    16e2:	8b 81       	ldd	r24, Y+3	; 0x03
    16e4:	9c 81       	ldd	r25, Y+4	; 0x04
    16e6:	00 97       	sbiw	r24, 0x00	; 0
    16e8:	61 f0       	breq	.+24     	; 0x1702 <DIO_SetPortLevel+0x126>
    16ea:	1e c0       	rjmp	.+60     	; 0x1728 <DIO_SetPortLevel+0x14c>
    16ec:	2b 81       	ldd	r18, Y+3	; 0x03
    16ee:	3c 81       	ldd	r19, Y+4	; 0x04
    16f0:	22 30       	cpi	r18, 0x02	; 2
    16f2:	31 05       	cpc	r19, r1
    16f4:	81 f0       	breq	.+32     	; 0x1716 <DIO_SetPortLevel+0x13a>
    16f6:	8b 81       	ldd	r24, Y+3	; 0x03
    16f8:	9c 81       	ldd	r25, Y+4	; 0x04
    16fa:	83 30       	cpi	r24, 0x03	; 3
    16fc:	91 05       	cpc	r25, r1
    16fe:	81 f0       	breq	.+32     	; 0x1720 <DIO_SetPortLevel+0x144>
    1700:	13 c0       	rjmp	.+38     	; 0x1728 <DIO_SetPortLevel+0x14c>
        {
        case DIO_PORTA:
            PORTA = level;
    1702:	eb e3       	ldi	r30, 0x3B	; 59
    1704:	f0 e0       	ldi	r31, 0x00	; 0
    1706:	8a 81       	ldd	r24, Y+2	; 0x02
    1708:	80 83       	st	Z, r24
    170a:	0e c0       	rjmp	.+28     	; 0x1728 <DIO_SetPortLevel+0x14c>
            break;
        case DIO_PORTB:
            PORTB = level;
    170c:	e8 e3       	ldi	r30, 0x38	; 56
    170e:	f0 e0       	ldi	r31, 0x00	; 0
    1710:	8a 81       	ldd	r24, Y+2	; 0x02
    1712:	80 83       	st	Z, r24
    1714:	09 c0       	rjmp	.+18     	; 0x1728 <DIO_SetPortLevel+0x14c>
            break;
        case DIO_PORTC:
            PORTC = level;
    1716:	e5 e3       	ldi	r30, 0x35	; 53
    1718:	f0 e0       	ldi	r31, 0x00	; 0
    171a:	8a 81       	ldd	r24, Y+2	; 0x02
    171c:	80 83       	st	Z, r24
    171e:	04 c0       	rjmp	.+8      	; 0x1728 <DIO_SetPortLevel+0x14c>
            break;
        case DIO_PORTD:
            PORTD = level;
    1720:	e2 e3       	ldi	r30, 0x32	; 50
    1722:	f0 e0       	ldi	r31, 0x00	; 0
    1724:	8a 81       	ldd	r24, Y+2	; 0x02
    1726:	80 83       	st	Z, r24
        default:
            break;
        }

    }
}
    1728:	28 96       	adiw	r28, 0x08	; 8
    172a:	0f b6       	in	r0, 0x3f	; 63
    172c:	f8 94       	cli
    172e:	de bf       	out	0x3e, r29	; 62
    1730:	0f be       	out	0x3f, r0	; 63
    1732:	cd bf       	out	0x3d, r28	; 61
    1734:	cf 91       	pop	r28
    1736:	df 91       	pop	r29
    1738:	08 95       	ret

0000173a <DIO_ReadPinLevel>:



DIO_LevelType DIO_ReadPinLevel(DIO_PortType port, DIO_PinType pin) {
    173a:	df 93       	push	r29
    173c:	cf 93       	push	r28
    173e:	00 d0       	rcall	.+0      	; 0x1740 <DIO_ReadPinLevel+0x6>
    1740:	00 d0       	rcall	.+0      	; 0x1742 <DIO_ReadPinLevel+0x8>
    1742:	0f 92       	push	r0
    1744:	cd b7       	in	r28, 0x3d	; 61
    1746:	de b7       	in	r29, 0x3e	; 62
    1748:	8a 83       	std	Y+2, r24	; 0x02
    174a:	6b 83       	std	Y+3, r22	; 0x03
    DIO_LevelType result = DIO_LOW;
    174c:	19 82       	std	Y+1, r1	; 0x01
    switch (port)
    174e:	8a 81       	ldd	r24, Y+2	; 0x02
    1750:	28 2f       	mov	r18, r24
    1752:	30 e0       	ldi	r19, 0x00	; 0
    1754:	3d 83       	std	Y+5, r19	; 0x05
    1756:	2c 83       	std	Y+4, r18	; 0x04
    1758:	4c 81       	ldd	r20, Y+4	; 0x04
    175a:	5d 81       	ldd	r21, Y+5	; 0x05
    175c:	41 30       	cpi	r20, 0x01	; 1
    175e:	51 05       	cpc	r21, r1
    1760:	41 f1       	breq	.+80     	; 0x17b2 <DIO_ReadPinLevel+0x78>
    1762:	8c 81       	ldd	r24, Y+4	; 0x04
    1764:	9d 81       	ldd	r25, Y+5	; 0x05
    1766:	82 30       	cpi	r24, 0x02	; 2
    1768:	91 05       	cpc	r25, r1
    176a:	34 f4       	brge	.+12     	; 0x1778 <DIO_ReadPinLevel+0x3e>
    176c:	2c 81       	ldd	r18, Y+4	; 0x04
    176e:	3d 81       	ldd	r19, Y+5	; 0x05
    1770:	21 15       	cp	r18, r1
    1772:	31 05       	cpc	r19, r1
    1774:	61 f0       	breq	.+24     	; 0x178e <DIO_ReadPinLevel+0x54>
    1776:	52 c0       	rjmp	.+164    	; 0x181c <DIO_ReadPinLevel+0xe2>
    1778:	4c 81       	ldd	r20, Y+4	; 0x04
    177a:	5d 81       	ldd	r21, Y+5	; 0x05
    177c:	42 30       	cpi	r20, 0x02	; 2
    177e:	51 05       	cpc	r21, r1
    1780:	51 f1       	breq	.+84     	; 0x17d6 <DIO_ReadPinLevel+0x9c>
    1782:	8c 81       	ldd	r24, Y+4	; 0x04
    1784:	9d 81       	ldd	r25, Y+5	; 0x05
    1786:	83 30       	cpi	r24, 0x03	; 3
    1788:	91 05       	cpc	r25, r1
    178a:	b9 f1       	breq	.+110    	; 0x17fa <DIO_ReadPinLevel+0xc0>
    178c:	47 c0       	rjmp	.+142    	; 0x181c <DIO_ReadPinLevel+0xe2>
    {
    case DIO_PORTA:
        result = GET_BIT(PINA, pin);
    178e:	e9 e3       	ldi	r30, 0x39	; 57
    1790:	f0 e0       	ldi	r31, 0x00	; 0
    1792:	80 81       	ld	r24, Z
    1794:	28 2f       	mov	r18, r24
    1796:	30 e0       	ldi	r19, 0x00	; 0
    1798:	8b 81       	ldd	r24, Y+3	; 0x03
    179a:	88 2f       	mov	r24, r24
    179c:	90 e0       	ldi	r25, 0x00	; 0
    179e:	a9 01       	movw	r20, r18
    17a0:	02 c0       	rjmp	.+4      	; 0x17a6 <DIO_ReadPinLevel+0x6c>
    17a2:	55 95       	asr	r21
    17a4:	47 95       	ror	r20
    17a6:	8a 95       	dec	r24
    17a8:	e2 f7       	brpl	.-8      	; 0x17a2 <DIO_ReadPinLevel+0x68>
    17aa:	ca 01       	movw	r24, r20
    17ac:	81 70       	andi	r24, 0x01	; 1
    17ae:	89 83       	std	Y+1, r24	; 0x01
    17b0:	35 c0       	rjmp	.+106    	; 0x181c <DIO_ReadPinLevel+0xe2>
        break;
    case DIO_PORTB:
        result = GET_BIT(PINB, pin);
    17b2:	e6 e3       	ldi	r30, 0x36	; 54
    17b4:	f0 e0       	ldi	r31, 0x00	; 0
    17b6:	80 81       	ld	r24, Z
    17b8:	28 2f       	mov	r18, r24
    17ba:	30 e0       	ldi	r19, 0x00	; 0
    17bc:	8b 81       	ldd	r24, Y+3	; 0x03
    17be:	88 2f       	mov	r24, r24
    17c0:	90 e0       	ldi	r25, 0x00	; 0
    17c2:	a9 01       	movw	r20, r18
    17c4:	02 c0       	rjmp	.+4      	; 0x17ca <DIO_ReadPinLevel+0x90>
    17c6:	55 95       	asr	r21
    17c8:	47 95       	ror	r20
    17ca:	8a 95       	dec	r24
    17cc:	e2 f7       	brpl	.-8      	; 0x17c6 <DIO_ReadPinLevel+0x8c>
    17ce:	ca 01       	movw	r24, r20
    17d0:	81 70       	andi	r24, 0x01	; 1
    17d2:	89 83       	std	Y+1, r24	; 0x01
    17d4:	23 c0       	rjmp	.+70     	; 0x181c <DIO_ReadPinLevel+0xe2>
        break;
    case DIO_PORTC:
        result = GET_BIT(PINC, pin);
    17d6:	e3 e3       	ldi	r30, 0x33	; 51
    17d8:	f0 e0       	ldi	r31, 0x00	; 0
    17da:	80 81       	ld	r24, Z
    17dc:	28 2f       	mov	r18, r24
    17de:	30 e0       	ldi	r19, 0x00	; 0
    17e0:	8b 81       	ldd	r24, Y+3	; 0x03
    17e2:	88 2f       	mov	r24, r24
    17e4:	90 e0       	ldi	r25, 0x00	; 0
    17e6:	a9 01       	movw	r20, r18
    17e8:	02 c0       	rjmp	.+4      	; 0x17ee <DIO_ReadPinLevel+0xb4>
    17ea:	55 95       	asr	r21
    17ec:	47 95       	ror	r20
    17ee:	8a 95       	dec	r24
    17f0:	e2 f7       	brpl	.-8      	; 0x17ea <DIO_ReadPinLevel+0xb0>
    17f2:	ca 01       	movw	r24, r20
    17f4:	81 70       	andi	r24, 0x01	; 1
    17f6:	89 83       	std	Y+1, r24	; 0x01
    17f8:	11 c0       	rjmp	.+34     	; 0x181c <DIO_ReadPinLevel+0xe2>
        break;
    case DIO_PORTD:
        result = GET_BIT(PIND, pin);
    17fa:	e0 e3       	ldi	r30, 0x30	; 48
    17fc:	f0 e0       	ldi	r31, 0x00	; 0
    17fe:	80 81       	ld	r24, Z
    1800:	28 2f       	mov	r18, r24
    1802:	30 e0       	ldi	r19, 0x00	; 0
    1804:	8b 81       	ldd	r24, Y+3	; 0x03
    1806:	88 2f       	mov	r24, r24
    1808:	90 e0       	ldi	r25, 0x00	; 0
    180a:	a9 01       	movw	r20, r18
    180c:	02 c0       	rjmp	.+4      	; 0x1812 <DIO_ReadPinLevel+0xd8>
    180e:	55 95       	asr	r21
    1810:	47 95       	ror	r20
    1812:	8a 95       	dec	r24
    1814:	e2 f7       	brpl	.-8      	; 0x180e <DIO_ReadPinLevel+0xd4>
    1816:	ca 01       	movw	r24, r20
    1818:	81 70       	andi	r24, 0x01	; 1
    181a:	89 83       	std	Y+1, r24	; 0x01
        break;
    default:
        break;
    }
    return result;
    181c:	89 81       	ldd	r24, Y+1	; 0x01
}
    181e:	0f 90       	pop	r0
    1820:	0f 90       	pop	r0
    1822:	0f 90       	pop	r0
    1824:	0f 90       	pop	r0
    1826:	0f 90       	pop	r0
    1828:	cf 91       	pop	r28
    182a:	df 91       	pop	r29
    182c:	08 95       	ret

0000182e <DIO_ReadPortLevel>:

DIO_LevelType DIO_ReadPortLevel (DIO_PortType port) {
    182e:	df 93       	push	r29
    1830:	cf 93       	push	r28
    1832:	00 d0       	rcall	.+0      	; 0x1834 <DIO_ReadPortLevel+0x6>
    1834:	00 d0       	rcall	.+0      	; 0x1836 <DIO_ReadPortLevel+0x8>
    1836:	cd b7       	in	r28, 0x3d	; 61
    1838:	de b7       	in	r29, 0x3e	; 62
    183a:	8a 83       	std	Y+2, r24	; 0x02
    u8 result = 0x00;
    183c:	19 82       	std	Y+1, r1	; 0x01
    switch (port)
    183e:	8a 81       	ldd	r24, Y+2	; 0x02
    1840:	28 2f       	mov	r18, r24
    1842:	30 e0       	ldi	r19, 0x00	; 0
    1844:	3c 83       	std	Y+4, r19	; 0x04
    1846:	2b 83       	std	Y+3, r18	; 0x03
    1848:	8b 81       	ldd	r24, Y+3	; 0x03
    184a:	9c 81       	ldd	r25, Y+4	; 0x04
    184c:	81 30       	cpi	r24, 0x01	; 1
    184e:	91 05       	cpc	r25, r1
    1850:	49 f1       	breq	.+82     	; 0x18a4 <DIO_ReadPortLevel+0x76>
    1852:	2b 81       	ldd	r18, Y+3	; 0x03
    1854:	3c 81       	ldd	r19, Y+4	; 0x04
    1856:	22 30       	cpi	r18, 0x02	; 2
    1858:	31 05       	cpc	r19, r1
    185a:	2c f4       	brge	.+10     	; 0x1866 <DIO_ReadPortLevel+0x38>
    185c:	8b 81       	ldd	r24, Y+3	; 0x03
    185e:	9c 81       	ldd	r25, Y+4	; 0x04
    1860:	00 97       	sbiw	r24, 0x00	; 0
    1862:	61 f0       	breq	.+24     	; 0x187c <DIO_ReadPortLevel+0x4e>
    1864:	5a c0       	rjmp	.+180    	; 0x191a <DIO_ReadPortLevel+0xec>
    1866:	2b 81       	ldd	r18, Y+3	; 0x03
    1868:	3c 81       	ldd	r19, Y+4	; 0x04
    186a:	22 30       	cpi	r18, 0x02	; 2
    186c:	31 05       	cpc	r19, r1
    186e:	71 f1       	breq	.+92     	; 0x18cc <DIO_ReadPortLevel+0x9e>
    1870:	8b 81       	ldd	r24, Y+3	; 0x03
    1872:	9c 81       	ldd	r25, Y+4	; 0x04
    1874:	83 30       	cpi	r24, 0x03	; 3
    1876:	91 05       	cpc	r25, r1
    1878:	e9 f1       	breq	.+122    	; 0x18f4 <DIO_ReadPortLevel+0xc6>
    187a:	4f c0       	rjmp	.+158    	; 0x191a <DIO_ReadPortLevel+0xec>
    {
    case DIO_PORTA:
        if (PINA == 0xFF) {
    187c:	e9 e3       	ldi	r30, 0x39	; 57
    187e:	f0 e0       	ldi	r31, 0x00	; 0
    1880:	80 81       	ld	r24, Z
    1882:	8f 3f       	cpi	r24, 0xFF	; 255
    1884:	19 f4       	brne	.+6      	; 0x188c <DIO_ReadPortLevel+0x5e>
            result = DIO_HIGH;
    1886:	81 e0       	ldi	r24, 0x01	; 1
    1888:	89 83       	std	Y+1, r24	; 0x01
    188a:	47 c0       	rjmp	.+142    	; 0x191a <DIO_ReadPortLevel+0xec>
        }
        else if (PINA == 0x00) {
    188c:	e9 e3       	ldi	r30, 0x39	; 57
    188e:	f0 e0       	ldi	r31, 0x00	; 0
    1890:	80 81       	ld	r24, Z
    1892:	88 23       	and	r24, r24
    1894:	11 f4       	brne	.+4      	; 0x189a <DIO_ReadPortLevel+0x6c>
            result = DIO_LOW;
    1896:	19 82       	std	Y+1, r1	; 0x01
    1898:	40 c0       	rjmp	.+128    	; 0x191a <DIO_ReadPortLevel+0xec>
        }
        else {
            result = PINA;
    189a:	e9 e3       	ldi	r30, 0x39	; 57
    189c:	f0 e0       	ldi	r31, 0x00	; 0
    189e:	80 81       	ld	r24, Z
    18a0:	89 83       	std	Y+1, r24	; 0x01
    18a2:	3b c0       	rjmp	.+118    	; 0x191a <DIO_ReadPortLevel+0xec>
        }
        break;
    case DIO_PORTB:
        if (PINB == 0xFF) {
    18a4:	e6 e3       	ldi	r30, 0x36	; 54
    18a6:	f0 e0       	ldi	r31, 0x00	; 0
    18a8:	80 81       	ld	r24, Z
    18aa:	8f 3f       	cpi	r24, 0xFF	; 255
    18ac:	19 f4       	brne	.+6      	; 0x18b4 <DIO_ReadPortLevel+0x86>
            result = DIO_HIGH;
    18ae:	81 e0       	ldi	r24, 0x01	; 1
    18b0:	89 83       	std	Y+1, r24	; 0x01
    18b2:	33 c0       	rjmp	.+102    	; 0x191a <DIO_ReadPortLevel+0xec>
        }
        else if (PINB == 0x00) {
    18b4:	e6 e3       	ldi	r30, 0x36	; 54
    18b6:	f0 e0       	ldi	r31, 0x00	; 0
    18b8:	80 81       	ld	r24, Z
    18ba:	88 23       	and	r24, r24
    18bc:	11 f4       	brne	.+4      	; 0x18c2 <DIO_ReadPortLevel+0x94>
            result = DIO_LOW;
    18be:	19 82       	std	Y+1, r1	; 0x01
    18c0:	2c c0       	rjmp	.+88     	; 0x191a <DIO_ReadPortLevel+0xec>
        }
        else {
            result = PINB;
    18c2:	e6 e3       	ldi	r30, 0x36	; 54
    18c4:	f0 e0       	ldi	r31, 0x00	; 0
    18c6:	80 81       	ld	r24, Z
    18c8:	89 83       	std	Y+1, r24	; 0x01
    18ca:	27 c0       	rjmp	.+78     	; 0x191a <DIO_ReadPortLevel+0xec>
        }
        break;
    case DIO_PORTC:
        if (PINC == 0xFF) {
    18cc:	e3 e3       	ldi	r30, 0x33	; 51
    18ce:	f0 e0       	ldi	r31, 0x00	; 0
    18d0:	80 81       	ld	r24, Z
    18d2:	8f 3f       	cpi	r24, 0xFF	; 255
    18d4:	19 f4       	brne	.+6      	; 0x18dc <DIO_ReadPortLevel+0xae>
            result = DIO_HIGH;
    18d6:	81 e0       	ldi	r24, 0x01	; 1
    18d8:	89 83       	std	Y+1, r24	; 0x01
    18da:	1f c0       	rjmp	.+62     	; 0x191a <DIO_ReadPortLevel+0xec>
        }
        else if (PINC == 0x00) {
    18dc:	e3 e3       	ldi	r30, 0x33	; 51
    18de:	f0 e0       	ldi	r31, 0x00	; 0
    18e0:	80 81       	ld	r24, Z
    18e2:	88 23       	and	r24, r24
    18e4:	11 f4       	brne	.+4      	; 0x18ea <DIO_ReadPortLevel+0xbc>
            result = DIO_LOW;
    18e6:	19 82       	std	Y+1, r1	; 0x01
    18e8:	18 c0       	rjmp	.+48     	; 0x191a <DIO_ReadPortLevel+0xec>
        }
        else {
            result = PINC;
    18ea:	e3 e3       	ldi	r30, 0x33	; 51
    18ec:	f0 e0       	ldi	r31, 0x00	; 0
    18ee:	80 81       	ld	r24, Z
    18f0:	89 83       	std	Y+1, r24	; 0x01
    18f2:	13 c0       	rjmp	.+38     	; 0x191a <DIO_ReadPortLevel+0xec>
        }
        break;
    case DIO_PORTD:
        if (PIND == 0xFF) {
    18f4:	e0 e3       	ldi	r30, 0x30	; 48
    18f6:	f0 e0       	ldi	r31, 0x00	; 0
    18f8:	80 81       	ld	r24, Z
    18fa:	8f 3f       	cpi	r24, 0xFF	; 255
    18fc:	19 f4       	brne	.+6      	; 0x1904 <DIO_ReadPortLevel+0xd6>
            result = DIO_HIGH;
    18fe:	81 e0       	ldi	r24, 0x01	; 1
    1900:	89 83       	std	Y+1, r24	; 0x01
    1902:	0b c0       	rjmp	.+22     	; 0x191a <DIO_ReadPortLevel+0xec>
        }
        else if (PIND == 0x00) {
    1904:	e0 e3       	ldi	r30, 0x30	; 48
    1906:	f0 e0       	ldi	r31, 0x00	; 0
    1908:	80 81       	ld	r24, Z
    190a:	88 23       	and	r24, r24
    190c:	11 f4       	brne	.+4      	; 0x1912 <DIO_ReadPortLevel+0xe4>
            result = DIO_LOW;
    190e:	19 82       	std	Y+1, r1	; 0x01
    1910:	04 c0       	rjmp	.+8      	; 0x191a <DIO_ReadPortLevel+0xec>
        }
        else {
            result = PIND;
    1912:	e0 e3       	ldi	r30, 0x30	; 48
    1914:	f0 e0       	ldi	r31, 0x00	; 0
    1916:	80 81       	ld	r24, Z
    1918:	89 83       	std	Y+1, r24	; 0x01
        }
        break;
    default:
        break;
    }
    return result;
    191a:	89 81       	ldd	r24, Y+1	; 0x01
}
    191c:	0f 90       	pop	r0
    191e:	0f 90       	pop	r0
    1920:	0f 90       	pop	r0
    1922:	0f 90       	pop	r0
    1924:	cf 91       	pop	r28
    1926:	df 91       	pop	r29
    1928:	08 95       	ret

0000192a <__vector_1>:
void (*ExtInterrupt_INT0Callback) (void);
void (*ExtInterrupt_INT1Callback) (void);
void (*ExtInterrupt_INT2Callback) (void);

void __vector_1 (void) __attribute__ ((signal));
void __vector_1 (void) {
    192a:	1f 92       	push	r1
    192c:	0f 92       	push	r0
    192e:	0f b6       	in	r0, 0x3f	; 63
    1930:	0f 92       	push	r0
    1932:	11 24       	eor	r1, r1
    1934:	2f 93       	push	r18
    1936:	3f 93       	push	r19
    1938:	4f 93       	push	r20
    193a:	5f 93       	push	r21
    193c:	6f 93       	push	r22
    193e:	7f 93       	push	r23
    1940:	8f 93       	push	r24
    1942:	9f 93       	push	r25
    1944:	af 93       	push	r26
    1946:	bf 93       	push	r27
    1948:	ef 93       	push	r30
    194a:	ff 93       	push	r31
    194c:	df 93       	push	r29
    194e:	cf 93       	push	r28
    1950:	cd b7       	in	r28, 0x3d	; 61
    1952:	de b7       	in	r29, 0x3e	; 62
	ExtInterrupt_INT0Callback();
    1954:	e0 91 80 00 	lds	r30, 0x0080
    1958:	f0 91 81 00 	lds	r31, 0x0081
    195c:	09 95       	icall
}
    195e:	cf 91       	pop	r28
    1960:	df 91       	pop	r29
    1962:	ff 91       	pop	r31
    1964:	ef 91       	pop	r30
    1966:	bf 91       	pop	r27
    1968:	af 91       	pop	r26
    196a:	9f 91       	pop	r25
    196c:	8f 91       	pop	r24
    196e:	7f 91       	pop	r23
    1970:	6f 91       	pop	r22
    1972:	5f 91       	pop	r21
    1974:	4f 91       	pop	r20
    1976:	3f 91       	pop	r19
    1978:	2f 91       	pop	r18
    197a:	0f 90       	pop	r0
    197c:	0f be       	out	0x3f, r0	; 63
    197e:	0f 90       	pop	r0
    1980:	1f 90       	pop	r1
    1982:	18 95       	reti

00001984 <__vector_2>:
void __vector_2 (void) __attribute__ ((signal));
void __vector_2 (void) {
    1984:	1f 92       	push	r1
    1986:	0f 92       	push	r0
    1988:	0f b6       	in	r0, 0x3f	; 63
    198a:	0f 92       	push	r0
    198c:	11 24       	eor	r1, r1
    198e:	2f 93       	push	r18
    1990:	3f 93       	push	r19
    1992:	4f 93       	push	r20
    1994:	5f 93       	push	r21
    1996:	6f 93       	push	r22
    1998:	7f 93       	push	r23
    199a:	8f 93       	push	r24
    199c:	9f 93       	push	r25
    199e:	af 93       	push	r26
    19a0:	bf 93       	push	r27
    19a2:	ef 93       	push	r30
    19a4:	ff 93       	push	r31
    19a6:	df 93       	push	r29
    19a8:	cf 93       	push	r28
    19aa:	cd b7       	in	r28, 0x3d	; 61
    19ac:	de b7       	in	r29, 0x3e	; 62
	ExtInterrupt_INT1Callback();
    19ae:	e0 91 7e 00 	lds	r30, 0x007E
    19b2:	f0 91 7f 00 	lds	r31, 0x007F
    19b6:	09 95       	icall
}
    19b8:	cf 91       	pop	r28
    19ba:	df 91       	pop	r29
    19bc:	ff 91       	pop	r31
    19be:	ef 91       	pop	r30
    19c0:	bf 91       	pop	r27
    19c2:	af 91       	pop	r26
    19c4:	9f 91       	pop	r25
    19c6:	8f 91       	pop	r24
    19c8:	7f 91       	pop	r23
    19ca:	6f 91       	pop	r22
    19cc:	5f 91       	pop	r21
    19ce:	4f 91       	pop	r20
    19d0:	3f 91       	pop	r19
    19d2:	2f 91       	pop	r18
    19d4:	0f 90       	pop	r0
    19d6:	0f be       	out	0x3f, r0	; 63
    19d8:	0f 90       	pop	r0
    19da:	1f 90       	pop	r1
    19dc:	18 95       	reti

000019de <__vector_3>:
void __vector_3 (void) __attribute__ ((signal));
void __vector_3 (void) {
    19de:	1f 92       	push	r1
    19e0:	0f 92       	push	r0
    19e2:	0f b6       	in	r0, 0x3f	; 63
    19e4:	0f 92       	push	r0
    19e6:	11 24       	eor	r1, r1
    19e8:	2f 93       	push	r18
    19ea:	3f 93       	push	r19
    19ec:	4f 93       	push	r20
    19ee:	5f 93       	push	r21
    19f0:	6f 93       	push	r22
    19f2:	7f 93       	push	r23
    19f4:	8f 93       	push	r24
    19f6:	9f 93       	push	r25
    19f8:	af 93       	push	r26
    19fa:	bf 93       	push	r27
    19fc:	ef 93       	push	r30
    19fe:	ff 93       	push	r31
    1a00:	df 93       	push	r29
    1a02:	cf 93       	push	r28
    1a04:	cd b7       	in	r28, 0x3d	; 61
    1a06:	de b7       	in	r29, 0x3e	; 62
	ExtInterrupt_INT2Callback();
    1a08:	e0 91 82 00 	lds	r30, 0x0082
    1a0c:	f0 91 83 00 	lds	r31, 0x0083
    1a10:	09 95       	icall
}
    1a12:	cf 91       	pop	r28
    1a14:	df 91       	pop	r29
    1a16:	ff 91       	pop	r31
    1a18:	ef 91       	pop	r30
    1a1a:	bf 91       	pop	r27
    1a1c:	af 91       	pop	r26
    1a1e:	9f 91       	pop	r25
    1a20:	8f 91       	pop	r24
    1a22:	7f 91       	pop	r23
    1a24:	6f 91       	pop	r22
    1a26:	5f 91       	pop	r21
    1a28:	4f 91       	pop	r20
    1a2a:	3f 91       	pop	r19
    1a2c:	2f 91       	pop	r18
    1a2e:	0f 90       	pop	r0
    1a30:	0f be       	out	0x3f, r0	; 63
    1a32:	0f 90       	pop	r0
    1a34:	1f 90       	pop	r1
    1a36:	18 95       	reti

00001a38 <ExtInterrupt_Init>:
//void __vector_1 (void) __attribute__ ((signal));
//void __vector_1 (void) {
//	// TODO
//}

void ExtInterrupt_Init(void) {
    1a38:	df 93       	push	r29
    1a3a:	cf 93       	push	r28
    1a3c:	cd b7       	in	r28, 0x3d	; 61
    1a3e:	de b7       	in	r29, 0x3e	; 62

    /*************************** Interrupt 0 Init ***************************/
#ifdef EXT_INTERRUPT_INT0
    /* Interrupt Enable */
#if EXT_INTERRUPT_INT0_INT_ENABLE == EXT_INTERRUPT_ENABLE
    SET_BIT(GICR, GICR_INT0); // External Interrupt Request 0 Enable
    1a40:	ab e5       	ldi	r26, 0x5B	; 91
    1a42:	b0 e0       	ldi	r27, 0x00	; 0
    1a44:	eb e5       	ldi	r30, 0x5B	; 91
    1a46:	f0 e0       	ldi	r31, 0x00	; 0
    1a48:	80 81       	ld	r24, Z
    1a4a:	80 64       	ori	r24, 0x40	; 64
    1a4c:	8c 93       	st	X, r24
    GlobalInterrupt_Enable(); // Global Interrupt Enable
    1a4e:	0e 94 93 0d 	call	0x1b26	; 0x1b26 <GlobalInterrupt_Enable>
    SET_BIT(MCUCR, MCUCR_ISC00);
    SET_BIT(MCUCR, MCUCR_ISC01);
    // TODO
#elif EXT_INTERRUPT_INT0_SENSE == EXT_INTERRUPT_ON_CHANGE
    /* Any logical change on INT0 generates an interrupt request. */
    SET_BIT(MCUCR, MCUCR_ISC00);
    1a52:	a5 e5       	ldi	r26, 0x55	; 85
    1a54:	b0 e0       	ldi	r27, 0x00	; 0
    1a56:	e5 e5       	ldi	r30, 0x55	; 85
    1a58:	f0 e0       	ldi	r31, 0x00	; 0
    1a5a:	80 81       	ld	r24, Z
    1a5c:	81 60       	ori	r24, 0x01	; 1
    1a5e:	8c 93       	st	X, r24
    CLR_BIT(MCUCR, MCUCR_ISC01);
    1a60:	a5 e5       	ldi	r26, 0x55	; 85
    1a62:	b0 e0       	ldi	r27, 0x00	; 0
    1a64:	e5 e5       	ldi	r30, 0x55	; 85
    1a66:	f0 e0       	ldi	r31, 0x00	; 0
    1a68:	80 81       	ld	r24, Z
    1a6a:	8d 7f       	andi	r24, 0xFD	; 253
    1a6c:	8c 93       	st	X, r24
    /*************************** Interrupt 1 Init ***************************/

#ifdef EXT_INTERRUPT_INT1
    /* Interrupt Enable */
#if EXT_INTERRUPT_INT1_INT_ENABLE == EXT_INTERRUPT_ENABLE
    SET_BIT(GICR, GICR_INT1); // External Interrupt Request 1 Enable
    1a6e:	ab e5       	ldi	r26, 0x5B	; 91
    1a70:	b0 e0       	ldi	r27, 0x00	; 0
    1a72:	eb e5       	ldi	r30, 0x5B	; 91
    1a74:	f0 e0       	ldi	r31, 0x00	; 0
    1a76:	80 81       	ld	r24, Z
    1a78:	80 68       	ori	r24, 0x80	; 128
    1a7a:	8c 93       	st	X, r24
#elif EXT_INTERRUPT_INT1_SENSE == EXT_INTERRUPT_RISING_EDGE
    SET_BIT(MCUCR, MCUCR_ISC10);
    SET_BIT(MCUCR, MCUCR_ISC11);
    // TODO
#elif EXT_INTERRUPT_INT1_SENSE == EXT_INTERRUPT_ON_CHANGE
    SET_BIT(MCUCR, MCUCR_ISC10);
    1a7c:	a5 e5       	ldi	r26, 0x55	; 85
    1a7e:	b0 e0       	ldi	r27, 0x00	; 0
    1a80:	e5 e5       	ldi	r30, 0x55	; 85
    1a82:	f0 e0       	ldi	r31, 0x00	; 0
    1a84:	80 81       	ld	r24, Z
    1a86:	84 60       	ori	r24, 0x04	; 4
    1a88:	8c 93       	st	X, r24
    CLR_BIT(MCUCR, MCUCR_ISC11);
    1a8a:	a5 e5       	ldi	r26, 0x55	; 85
    1a8c:	b0 e0       	ldi	r27, 0x00	; 0
    1a8e:	e5 e5       	ldi	r30, 0x55	; 85
    1a90:	f0 e0       	ldi	r31, 0x00	; 0
    1a92:	80 81       	ld	r24, Z
    1a94:	87 7f       	andi	r24, 0xF7	; 247
    1a96:	8c 93       	st	X, r24

    /*************************** Interrupt 2 Init ***************************/
#ifdef EXT_INTERRUPT_INT2
    /* Interrupt Enable */
#if EXT_INTERRUPT_INT2_INT_ENABLE == EXT_INTERRUPT_ENABLE
    SET_BIT(GICR, GICR_INT2); // External Interrupt Request 1 Enable
    1a98:	ab e5       	ldi	r26, 0x5B	; 91
    1a9a:	b0 e0       	ldi	r27, 0x00	; 0
    1a9c:	eb e5       	ldi	r30, 0x5B	; 91
    1a9e:	f0 e0       	ldi	r31, 0x00	; 0
    1aa0:	80 81       	ld	r24, Z
    1aa2:	80 62       	ori	r24, 0x20	; 32
    1aa4:	8c 93       	st	X, r24
    // TODO
#endif

    /* Sense Control */
#if EXT_INTERRUPT_INT2_SENSE == EXT_INTERRUPT_FALLING_EDGE
    CLR_BIT(MCUCR, MCUCSR_ISC2);
    1aa6:	a5 e5       	ldi	r26, 0x55	; 85
    1aa8:	b0 e0       	ldi	r27, 0x00	; 0
    1aaa:	e5 e5       	ldi	r30, 0x55	; 85
    1aac:	f0 e0       	ldi	r31, 0x00	; 0
    1aae:	80 81       	ld	r24, Z
    1ab0:	8f 7b       	andi	r24, 0xBF	; 191
    1ab2:	8c 93       	st	X, r24
#endif
#endif



}
    1ab4:	cf 91       	pop	r28
    1ab6:	df 91       	pop	r29
    1ab8:	08 95       	ret

00001aba <ExtInterrupt_SetINT0Callback>:

void ExtInterrupt_SetINT0Callback (void (*callback) (void)) {
    1aba:	df 93       	push	r29
    1abc:	cf 93       	push	r28
    1abe:	00 d0       	rcall	.+0      	; 0x1ac0 <ExtInterrupt_SetINT0Callback+0x6>
    1ac0:	cd b7       	in	r28, 0x3d	; 61
    1ac2:	de b7       	in	r29, 0x3e	; 62
    1ac4:	9a 83       	std	Y+2, r25	; 0x02
    1ac6:	89 83       	std	Y+1, r24	; 0x01
    ExtInterrupt_INT0Callback = callback;
    1ac8:	89 81       	ldd	r24, Y+1	; 0x01
    1aca:	9a 81       	ldd	r25, Y+2	; 0x02
    1acc:	90 93 81 00 	sts	0x0081, r25
    1ad0:	80 93 80 00 	sts	0x0080, r24
}
    1ad4:	0f 90       	pop	r0
    1ad6:	0f 90       	pop	r0
    1ad8:	cf 91       	pop	r28
    1ada:	df 91       	pop	r29
    1adc:	08 95       	ret

00001ade <ExtInterrupt_SetINT1Callback>:

void ExtInterrupt_SetINT1Callback (void (*callback) (void)) {
    1ade:	df 93       	push	r29
    1ae0:	cf 93       	push	r28
    1ae2:	00 d0       	rcall	.+0      	; 0x1ae4 <ExtInterrupt_SetINT1Callback+0x6>
    1ae4:	cd b7       	in	r28, 0x3d	; 61
    1ae6:	de b7       	in	r29, 0x3e	; 62
    1ae8:	9a 83       	std	Y+2, r25	; 0x02
    1aea:	89 83       	std	Y+1, r24	; 0x01
    ExtInterrupt_INT1Callback = callback;
    1aec:	89 81       	ldd	r24, Y+1	; 0x01
    1aee:	9a 81       	ldd	r25, Y+2	; 0x02
    1af0:	90 93 7f 00 	sts	0x007F, r25
    1af4:	80 93 7e 00 	sts	0x007E, r24
   // TODO
}
    1af8:	0f 90       	pop	r0
    1afa:	0f 90       	pop	r0
    1afc:	cf 91       	pop	r28
    1afe:	df 91       	pop	r29
    1b00:	08 95       	ret

00001b02 <ExtInterrupt_SetINT2Callback>:

void ExtInterrupt_SetINT2Callback (void (*callback) (void)) {
    1b02:	df 93       	push	r29
    1b04:	cf 93       	push	r28
    1b06:	00 d0       	rcall	.+0      	; 0x1b08 <ExtInterrupt_SetINT2Callback+0x6>
    1b08:	cd b7       	in	r28, 0x3d	; 61
    1b0a:	de b7       	in	r29, 0x3e	; 62
    1b0c:	9a 83       	std	Y+2, r25	; 0x02
    1b0e:	89 83       	std	Y+1, r24	; 0x01
    ExtInterrupt_INT2Callback = callback;
    1b10:	89 81       	ldd	r24, Y+1	; 0x01
    1b12:	9a 81       	ldd	r25, Y+2	; 0x02
    1b14:	90 93 83 00 	sts	0x0083, r25
    1b18:	80 93 82 00 	sts	0x0082, r24
   // TODO
}
    1b1c:	0f 90       	pop	r0
    1b1e:	0f 90       	pop	r0
    1b20:	cf 91       	pop	r28
    1b22:	df 91       	pop	r29
    1b24:	08 95       	ret

00001b26 <GlobalInterrupt_Enable>:
#include "std_types.h"
#include "macros.h"
#include "Registers.h"
#include "GlobalInterrupt.h"

void GlobalInterrupt_Enable(void) {
    1b26:	df 93       	push	r29
    1b28:	cf 93       	push	r28
    1b2a:	cd b7       	in	r28, 0x3d	; 61
    1b2c:	de b7       	in	r29, 0x3e	; 62
	SET_BIT(SREG, SREG_I);
    1b2e:	af e5       	ldi	r26, 0x5F	; 95
    1b30:	b0 e0       	ldi	r27, 0x00	; 0
    1b32:	ef e5       	ldi	r30, 0x5F	; 95
    1b34:	f0 e0       	ldi	r31, 0x00	; 0
    1b36:	80 81       	ld	r24, Z
    1b38:	80 68       	ori	r24, 0x80	; 128
    1b3a:	8c 93       	st	X, r24
}
    1b3c:	cf 91       	pop	r28
    1b3e:	df 91       	pop	r29
    1b40:	08 95       	ret

00001b42 <GlobalInterrupt_Disable>:

void GlobalInterrupt_Disable(void) {
    1b42:	df 93       	push	r29
    1b44:	cf 93       	push	r28
    1b46:	cd b7       	in	r28, 0x3d	; 61
    1b48:	de b7       	in	r29, 0x3e	; 62
	CLR_BIT(SREG, SREG_I);
    1b4a:	af e5       	ldi	r26, 0x5F	; 95
    1b4c:	b0 e0       	ldi	r27, 0x00	; 0
    1b4e:	ef e5       	ldi	r30, 0x5F	; 95
    1b50:	f0 e0       	ldi	r31, 0x00	; 0
    1b52:	80 81       	ld	r24, Z
    1b54:	8f 77       	andi	r24, 0x7F	; 127
    1b56:	8c 93       	st	X, r24
}
    1b58:	cf 91       	pop	r28
    1b5a:	df 91       	pop	r29
    1b5c:	08 95       	ret

00001b5e <Keypad_Init>:
#include "std_types.h"
#include "macros.h"
#include "DIO.h"
#include "Keypad.h"

void Keypad_Init(void) {
    1b5e:	df 93       	push	r29
    1b60:	cf 93       	push	r28
    1b62:	cd b7       	in	r28, 0x3d	; 61
    1b64:	de b7       	in	r29, 0x3e	; 62
    /* Set all rows to input pullup */
    DIO_SetPinMode(KEYPAD_PIN_R0, DIO_INPUT_PULLUP);
    1b66:	83 e0       	ldi	r24, 0x03	; 3
    1b68:	60 e0       	ldi	r22, 0x00	; 0
    1b6a:	41 e0       	ldi	r20, 0x01	; 1
    1b6c:	0e 94 e0 06 	call	0xdc0	; 0xdc0 <DIO_SetPinMode>
    DIO_SetPinMode(KEYPAD_PIN_R1, DIO_INPUT_PULLUP);
    1b70:	83 e0       	ldi	r24, 0x03	; 3
    1b72:	61 e0       	ldi	r22, 0x01	; 1
    1b74:	41 e0       	ldi	r20, 0x01	; 1
    1b76:	0e 94 e0 06 	call	0xdc0	; 0xdc0 <DIO_SetPinMode>
    DIO_SetPinMode(KEYPAD_PIN_R2, DIO_INPUT_PULLUP);
    1b7a:	83 e0       	ldi	r24, 0x03	; 3
    1b7c:	62 e0       	ldi	r22, 0x02	; 2
    1b7e:	41 e0       	ldi	r20, 0x01	; 1
    1b80:	0e 94 e0 06 	call	0xdc0	; 0xdc0 <DIO_SetPinMode>
    DIO_SetPinMode(KEYPAD_PIN_R3, DIO_INPUT_PULLUP);
    1b84:	83 e0       	ldi	r24, 0x03	; 3
    1b86:	63 e0       	ldi	r22, 0x03	; 3
    1b88:	41 e0       	ldi	r20, 0x01	; 1
    1b8a:	0e 94 e0 06 	call	0xdc0	; 0xdc0 <DIO_SetPinMode>
    /* Set all columns to output */
    DIO_SetPinMode(KEYPAD_PIN_C0, DIO_OUTPUT);
    1b8e:	83 e0       	ldi	r24, 0x03	; 3
    1b90:	64 e0       	ldi	r22, 0x04	; 4
    1b92:	42 e0       	ldi	r20, 0x02	; 2
    1b94:	0e 94 e0 06 	call	0xdc0	; 0xdc0 <DIO_SetPinMode>
    DIO_SetPinMode(KEYPAD_PIN_C1, DIO_OUTPUT);
    1b98:	83 e0       	ldi	r24, 0x03	; 3
    1b9a:	65 e0       	ldi	r22, 0x05	; 5
    1b9c:	42 e0       	ldi	r20, 0x02	; 2
    1b9e:	0e 94 e0 06 	call	0xdc0	; 0xdc0 <DIO_SetPinMode>
    DIO_SetPinMode(KEYPAD_PIN_C2, DIO_OUTPUT);
    1ba2:	83 e0       	ldi	r24, 0x03	; 3
    1ba4:	66 e0       	ldi	r22, 0x06	; 6
    1ba6:	42 e0       	ldi	r20, 0x02	; 2
    1ba8:	0e 94 e0 06 	call	0xdc0	; 0xdc0 <DIO_SetPinMode>
    DIO_SetPinMode(KEYPAD_PIN_C3, DIO_OUTPUT);
    1bac:	83 e0       	ldi	r24, 0x03	; 3
    1bae:	67 e0       	ldi	r22, 0x07	; 7
    1bb0:	42 e0       	ldi	r20, 0x02	; 2
    1bb2:	0e 94 e0 06 	call	0xdc0	; 0xdc0 <DIO_SetPinMode>
}
    1bb6:	cf 91       	pop	r28
    1bb8:	df 91       	pop	r29
    1bba:	08 95       	ret

00001bbc <Keypad_GetButtonState>:
	low  -> Pressed

*/


Keypad_StateType Keypad_GetButtonState(Keypad_ButtonType button) {
    1bbc:	df 93       	push	r29
    1bbe:	cf 93       	push	r28
    1bc0:	cd b7       	in	r28, 0x3d	; 61
    1bc2:	de b7       	in	r29, 0x3e	; 62
    1bc4:	28 97       	sbiw	r28, 0x08	; 8
    1bc6:	0f b6       	in	r0, 0x3f	; 63
    1bc8:	f8 94       	cli
    1bca:	de bf       	out	0x3e, r29	; 62
    1bcc:	0f be       	out	0x3f, r0	; 63
    1bce:	cd bf       	out	0x3d, r28	; 61
    1bd0:	8c 83       	std	Y+4, r24	; 0x04
    Keypad_StateType state = KEYPAD_STATE_NOT_PRESSED;
    1bd2:	81 e0       	ldi	r24, 0x01	; 1
    1bd4:	8b 83       	std	Y+3, r24	; 0x03
    u8 row = button / 4;
    1bd6:	8c 81       	ldd	r24, Y+4	; 0x04
    1bd8:	86 95       	lsr	r24
    1bda:	86 95       	lsr	r24
    1bdc:	8a 83       	std	Y+2, r24	; 0x02
    u8 column = button % 4;
    1bde:	8c 81       	ldd	r24, Y+4	; 0x04
    1be0:	83 70       	andi	r24, 0x03	; 3
    1be2:	89 83       	std	Y+1, r24	; 0x01
    DIO_SetPinLevel(KEYPAD_PIN_C0, DIO_HIGH);
    1be4:	83 e0       	ldi	r24, 0x03	; 3
    1be6:	64 e0       	ldi	r22, 0x04	; 4
    1be8:	41 e0       	ldi	r20, 0x01	; 1
    1bea:	0e 94 ee 09 	call	0x13dc	; 0x13dc <DIO_SetPinLevel>
    DIO_SetPinLevel(KEYPAD_PIN_C1, DIO_HIGH);
    1bee:	83 e0       	ldi	r24, 0x03	; 3
    1bf0:	65 e0       	ldi	r22, 0x05	; 5
    1bf2:	41 e0       	ldi	r20, 0x01	; 1
    1bf4:	0e 94 ee 09 	call	0x13dc	; 0x13dc <DIO_SetPinLevel>
    DIO_SetPinLevel(KEYPAD_PIN_C2, DIO_HIGH);
    1bf8:	83 e0       	ldi	r24, 0x03	; 3
    1bfa:	66 e0       	ldi	r22, 0x06	; 6
    1bfc:	41 e0       	ldi	r20, 0x01	; 1
    1bfe:	0e 94 ee 09 	call	0x13dc	; 0x13dc <DIO_SetPinLevel>
    DIO_SetPinLevel(KEYPAD_PIN_C3, DIO_HIGH);
    1c02:	83 e0       	ldi	r24, 0x03	; 3
    1c04:	67 e0       	ldi	r22, 0x07	; 7
    1c06:	41 e0       	ldi	r20, 0x01	; 1
    1c08:	0e 94 ee 09 	call	0x13dc	; 0x13dc <DIO_SetPinLevel>
    switch (column)
    1c0c:	89 81       	ldd	r24, Y+1	; 0x01
    1c0e:	28 2f       	mov	r18, r24
    1c10:	30 e0       	ldi	r19, 0x00	; 0
    1c12:	38 87       	std	Y+8, r19	; 0x08
    1c14:	2f 83       	std	Y+7, r18	; 0x07
    1c16:	8f 81       	ldd	r24, Y+7	; 0x07
    1c18:	98 85       	ldd	r25, Y+8	; 0x08
    1c1a:	81 30       	cpi	r24, 0x01	; 1
    1c1c:	91 05       	cpc	r25, r1
    1c1e:	d9 f0       	breq	.+54     	; 0x1c56 <Keypad_GetButtonState+0x9a>
    1c20:	2f 81       	ldd	r18, Y+7	; 0x07
    1c22:	38 85       	ldd	r19, Y+8	; 0x08
    1c24:	22 30       	cpi	r18, 0x02	; 2
    1c26:	31 05       	cpc	r19, r1
    1c28:	2c f4       	brge	.+10     	; 0x1c34 <Keypad_GetButtonState+0x78>
    1c2a:	8f 81       	ldd	r24, Y+7	; 0x07
    1c2c:	98 85       	ldd	r25, Y+8	; 0x08
    1c2e:	00 97       	sbiw	r24, 0x00	; 0
    1c30:	61 f0       	breq	.+24     	; 0x1c4a <Keypad_GetButtonState+0x8e>
    1c32:	22 c0       	rjmp	.+68     	; 0x1c78 <Keypad_GetButtonState+0xbc>
    1c34:	2f 81       	ldd	r18, Y+7	; 0x07
    1c36:	38 85       	ldd	r19, Y+8	; 0x08
    1c38:	22 30       	cpi	r18, 0x02	; 2
    1c3a:	31 05       	cpc	r19, r1
    1c3c:	91 f0       	breq	.+36     	; 0x1c62 <Keypad_GetButtonState+0xa6>
    1c3e:	8f 81       	ldd	r24, Y+7	; 0x07
    1c40:	98 85       	ldd	r25, Y+8	; 0x08
    1c42:	83 30       	cpi	r24, 0x03	; 3
    1c44:	91 05       	cpc	r25, r1
    1c46:	99 f0       	breq	.+38     	; 0x1c6e <Keypad_GetButtonState+0xb2>
    1c48:	17 c0       	rjmp	.+46     	; 0x1c78 <Keypad_GetButtonState+0xbc>
    {
    case 0:
        DIO_SetPinLevel(KEYPAD_PIN_C0, DIO_LOW);
    1c4a:	83 e0       	ldi	r24, 0x03	; 3
    1c4c:	64 e0       	ldi	r22, 0x04	; 4
    1c4e:	40 e0       	ldi	r20, 0x00	; 0
    1c50:	0e 94 ee 09 	call	0x13dc	; 0x13dc <DIO_SetPinLevel>
    1c54:	11 c0       	rjmp	.+34     	; 0x1c78 <Keypad_GetButtonState+0xbc>
        break;
    case 1:
        DIO_SetPinLevel(KEYPAD_PIN_C1, DIO_LOW);
    1c56:	83 e0       	ldi	r24, 0x03	; 3
    1c58:	65 e0       	ldi	r22, 0x05	; 5
    1c5a:	40 e0       	ldi	r20, 0x00	; 0
    1c5c:	0e 94 ee 09 	call	0x13dc	; 0x13dc <DIO_SetPinLevel>
    1c60:	0b c0       	rjmp	.+22     	; 0x1c78 <Keypad_GetButtonState+0xbc>
        break;
    case 2:
        DIO_SetPinLevel(KEYPAD_PIN_C2, DIO_LOW);
    1c62:	83 e0       	ldi	r24, 0x03	; 3
    1c64:	66 e0       	ldi	r22, 0x06	; 6
    1c66:	40 e0       	ldi	r20, 0x00	; 0
    1c68:	0e 94 ee 09 	call	0x13dc	; 0x13dc <DIO_SetPinLevel>
    1c6c:	05 c0       	rjmp	.+10     	; 0x1c78 <Keypad_GetButtonState+0xbc>
        break;
    case 3:
        DIO_SetPinLevel(KEYPAD_PIN_C3, DIO_LOW);
    1c6e:	83 e0       	ldi	r24, 0x03	; 3
    1c70:	67 e0       	ldi	r22, 0x07	; 7
    1c72:	40 e0       	ldi	r20, 0x00	; 0
    1c74:	0e 94 ee 09 	call	0x13dc	; 0x13dc <DIO_SetPinLevel>
        break;
    default:
        break;
    }
    switch (row)
    1c78:	8a 81       	ldd	r24, Y+2	; 0x02
    1c7a:	28 2f       	mov	r18, r24
    1c7c:	30 e0       	ldi	r19, 0x00	; 0
    1c7e:	3e 83       	std	Y+6, r19	; 0x06
    1c80:	2d 83       	std	Y+5, r18	; 0x05
    1c82:	8d 81       	ldd	r24, Y+5	; 0x05
    1c84:	9e 81       	ldd	r25, Y+6	; 0x06
    1c86:	81 30       	cpi	r24, 0x01	; 1
    1c88:	91 05       	cpc	r25, r1
    1c8a:	e9 f0       	breq	.+58     	; 0x1cc6 <Keypad_GetButtonState+0x10a>
    1c8c:	2d 81       	ldd	r18, Y+5	; 0x05
    1c8e:	3e 81       	ldd	r19, Y+6	; 0x06
    1c90:	22 30       	cpi	r18, 0x02	; 2
    1c92:	31 05       	cpc	r19, r1
    1c94:	2c f4       	brge	.+10     	; 0x1ca0 <Keypad_GetButtonState+0xe4>
    1c96:	8d 81       	ldd	r24, Y+5	; 0x05
    1c98:	9e 81       	ldd	r25, Y+6	; 0x06
    1c9a:	00 97       	sbiw	r24, 0x00	; 0
    1c9c:	61 f0       	breq	.+24     	; 0x1cb6 <Keypad_GetButtonState+0xfa>
    1c9e:	2a c0       	rjmp	.+84     	; 0x1cf4 <Keypad_GetButtonState+0x138>
    1ca0:	2d 81       	ldd	r18, Y+5	; 0x05
    1ca2:	3e 81       	ldd	r19, Y+6	; 0x06
    1ca4:	22 30       	cpi	r18, 0x02	; 2
    1ca6:	31 05       	cpc	r19, r1
    1ca8:	b1 f0       	breq	.+44     	; 0x1cd6 <Keypad_GetButtonState+0x11a>
    1caa:	8d 81       	ldd	r24, Y+5	; 0x05
    1cac:	9e 81       	ldd	r25, Y+6	; 0x06
    1cae:	83 30       	cpi	r24, 0x03	; 3
    1cb0:	91 05       	cpc	r25, r1
    1cb2:	c9 f0       	breq	.+50     	; 0x1ce6 <Keypad_GetButtonState+0x12a>
    1cb4:	1f c0       	rjmp	.+62     	; 0x1cf4 <Keypad_GetButtonState+0x138>
    {
    case 0:
        if (DIO_ReadPinLevel(KEYPAD_PIN_R0) == DIO_LOW) {
    1cb6:	83 e0       	ldi	r24, 0x03	; 3
    1cb8:	60 e0       	ldi	r22, 0x00	; 0
    1cba:	0e 94 9d 0b 	call	0x173a	; 0x173a <DIO_ReadPinLevel>
    1cbe:	88 23       	and	r24, r24
    1cc0:	c9 f4       	brne	.+50     	; 0x1cf4 <Keypad_GetButtonState+0x138>
            state = KEYPAD_STATE_PRESSED;
    1cc2:	1b 82       	std	Y+3, r1	; 0x03
    1cc4:	17 c0       	rjmp	.+46     	; 0x1cf4 <Keypad_GetButtonState+0x138>
        }
        break;
    case 1:
        if (DIO_ReadPinLevel(KEYPAD_PIN_R1) == DIO_LOW) {
    1cc6:	83 e0       	ldi	r24, 0x03	; 3
    1cc8:	61 e0       	ldi	r22, 0x01	; 1
    1cca:	0e 94 9d 0b 	call	0x173a	; 0x173a <DIO_ReadPinLevel>
    1cce:	88 23       	and	r24, r24
    1cd0:	89 f4       	brne	.+34     	; 0x1cf4 <Keypad_GetButtonState+0x138>
            state = KEYPAD_STATE_PRESSED;
    1cd2:	1b 82       	std	Y+3, r1	; 0x03
    1cd4:	0f c0       	rjmp	.+30     	; 0x1cf4 <Keypad_GetButtonState+0x138>
        }
        break;
    case 2:
        if (DIO_ReadPinLevel(KEYPAD_PIN_R2) == DIO_LOW) {
    1cd6:	83 e0       	ldi	r24, 0x03	; 3
    1cd8:	62 e0       	ldi	r22, 0x02	; 2
    1cda:	0e 94 9d 0b 	call	0x173a	; 0x173a <DIO_ReadPinLevel>
    1cde:	88 23       	and	r24, r24
    1ce0:	49 f4       	brne	.+18     	; 0x1cf4 <Keypad_GetButtonState+0x138>
            state = KEYPAD_STATE_PRESSED;
    1ce2:	1b 82       	std	Y+3, r1	; 0x03
    1ce4:	07 c0       	rjmp	.+14     	; 0x1cf4 <Keypad_GetButtonState+0x138>
        }
        break;
    case 3:
        if (DIO_ReadPinLevel(KEYPAD_PIN_R3) == DIO_LOW) {
    1ce6:	83 e0       	ldi	r24, 0x03	; 3
    1ce8:	63 e0       	ldi	r22, 0x03	; 3
    1cea:	0e 94 9d 0b 	call	0x173a	; 0x173a <DIO_ReadPinLevel>
    1cee:	88 23       	and	r24, r24
    1cf0:	09 f4       	brne	.+2      	; 0x1cf4 <Keypad_GetButtonState+0x138>
            state = KEYPAD_STATE_PRESSED;
    1cf2:	1b 82       	std	Y+3, r1	; 0x03
        }
        break;
    default:
        break;
    }
    return state;
    1cf4:	8b 81       	ldd	r24, Y+3	; 0x03
}
    1cf6:	28 96       	adiw	r28, 0x08	; 8
    1cf8:	0f b6       	in	r0, 0x3f	; 63
    1cfa:	f8 94       	cli
    1cfc:	de bf       	out	0x3e, r29	; 62
    1cfe:	0f be       	out	0x3f, r0	; 63
    1d00:	cd bf       	out	0x3d, r28	; 61
    1d02:	cf 91       	pop	r28
    1d04:	df 91       	pop	r29
    1d06:	08 95       	ret

00001d08 <Keypad_GetButtonStatePooling>:

Keypad_StateType Keypad_GetButtonStatePooling(Keypad_ButtonType button) {
    1d08:	df 93       	push	r29
    1d0a:	cf 93       	push	r28
    1d0c:	cd b7       	in	r28, 0x3d	; 61
    1d0e:	de b7       	in	r29, 0x3e	; 62
    1d10:	28 97       	sbiw	r28, 0x08	; 8
    1d12:	0f b6       	in	r0, 0x3f	; 63
    1d14:	f8 94       	cli
    1d16:	de bf       	out	0x3e, r29	; 62
    1d18:	0f be       	out	0x3f, r0	; 63
    1d1a:	cd bf       	out	0x3d, r28	; 61
    1d1c:	8c 83       	std	Y+4, r24	; 0x04
    Keypad_StateType state = KEYPAD_STATE_NOT_PRESSED;
    1d1e:	81 e0       	ldi	r24, 0x01	; 1
    1d20:	8b 83       	std	Y+3, r24	; 0x03
    u8 row = button / 4;
    1d22:	8c 81       	ldd	r24, Y+4	; 0x04
    1d24:	86 95       	lsr	r24
    1d26:	86 95       	lsr	r24
    1d28:	8a 83       	std	Y+2, r24	; 0x02
    u8 column = button % 4;
    1d2a:	8c 81       	ldd	r24, Y+4	; 0x04
    1d2c:	83 70       	andi	r24, 0x03	; 3
    1d2e:	89 83       	std	Y+1, r24	; 0x01
    DIO_SetPinLevel(KEYPAD_PIN_C0, DIO_HIGH);
    1d30:	83 e0       	ldi	r24, 0x03	; 3
    1d32:	64 e0       	ldi	r22, 0x04	; 4
    1d34:	41 e0       	ldi	r20, 0x01	; 1
    1d36:	0e 94 ee 09 	call	0x13dc	; 0x13dc <DIO_SetPinLevel>
    DIO_SetPinLevel(KEYPAD_PIN_C1, DIO_HIGH);
    1d3a:	83 e0       	ldi	r24, 0x03	; 3
    1d3c:	65 e0       	ldi	r22, 0x05	; 5
    1d3e:	41 e0       	ldi	r20, 0x01	; 1
    1d40:	0e 94 ee 09 	call	0x13dc	; 0x13dc <DIO_SetPinLevel>
    DIO_SetPinLevel(KEYPAD_PIN_C2, DIO_HIGH);
    1d44:	83 e0       	ldi	r24, 0x03	; 3
    1d46:	66 e0       	ldi	r22, 0x06	; 6
    1d48:	41 e0       	ldi	r20, 0x01	; 1
    1d4a:	0e 94 ee 09 	call	0x13dc	; 0x13dc <DIO_SetPinLevel>
    DIO_SetPinLevel(KEYPAD_PIN_C3, DIO_HIGH);
    1d4e:	83 e0       	ldi	r24, 0x03	; 3
    1d50:	67 e0       	ldi	r22, 0x07	; 7
    1d52:	41 e0       	ldi	r20, 0x01	; 1
    1d54:	0e 94 ee 09 	call	0x13dc	; 0x13dc <DIO_SetPinLevel>
    switch (column)
    1d58:	89 81       	ldd	r24, Y+1	; 0x01
    1d5a:	28 2f       	mov	r18, r24
    1d5c:	30 e0       	ldi	r19, 0x00	; 0
    1d5e:	38 87       	std	Y+8, r19	; 0x08
    1d60:	2f 83       	std	Y+7, r18	; 0x07
    1d62:	8f 81       	ldd	r24, Y+7	; 0x07
    1d64:	98 85       	ldd	r25, Y+8	; 0x08
    1d66:	81 30       	cpi	r24, 0x01	; 1
    1d68:	91 05       	cpc	r25, r1
    1d6a:	d9 f0       	breq	.+54     	; 0x1da2 <Keypad_GetButtonStatePooling+0x9a>
    1d6c:	2f 81       	ldd	r18, Y+7	; 0x07
    1d6e:	38 85       	ldd	r19, Y+8	; 0x08
    1d70:	22 30       	cpi	r18, 0x02	; 2
    1d72:	31 05       	cpc	r19, r1
    1d74:	2c f4       	brge	.+10     	; 0x1d80 <Keypad_GetButtonStatePooling+0x78>
    1d76:	8f 81       	ldd	r24, Y+7	; 0x07
    1d78:	98 85       	ldd	r25, Y+8	; 0x08
    1d7a:	00 97       	sbiw	r24, 0x00	; 0
    1d7c:	61 f0       	breq	.+24     	; 0x1d96 <Keypad_GetButtonStatePooling+0x8e>
    1d7e:	22 c0       	rjmp	.+68     	; 0x1dc4 <Keypad_GetButtonStatePooling+0xbc>
    1d80:	2f 81       	ldd	r18, Y+7	; 0x07
    1d82:	38 85       	ldd	r19, Y+8	; 0x08
    1d84:	22 30       	cpi	r18, 0x02	; 2
    1d86:	31 05       	cpc	r19, r1
    1d88:	91 f0       	breq	.+36     	; 0x1dae <Keypad_GetButtonStatePooling+0xa6>
    1d8a:	8f 81       	ldd	r24, Y+7	; 0x07
    1d8c:	98 85       	ldd	r25, Y+8	; 0x08
    1d8e:	83 30       	cpi	r24, 0x03	; 3
    1d90:	91 05       	cpc	r25, r1
    1d92:	99 f0       	breq	.+38     	; 0x1dba <Keypad_GetButtonStatePooling+0xb2>
    1d94:	17 c0       	rjmp	.+46     	; 0x1dc4 <Keypad_GetButtonStatePooling+0xbc>
    {
    case 0:
        DIO_SetPinLevel(KEYPAD_PIN_C0, DIO_LOW);
    1d96:	83 e0       	ldi	r24, 0x03	; 3
    1d98:	64 e0       	ldi	r22, 0x04	; 4
    1d9a:	40 e0       	ldi	r20, 0x00	; 0
    1d9c:	0e 94 ee 09 	call	0x13dc	; 0x13dc <DIO_SetPinLevel>
    1da0:	11 c0       	rjmp	.+34     	; 0x1dc4 <Keypad_GetButtonStatePooling+0xbc>
        break;
    case 1:
        DIO_SetPinLevel(KEYPAD_PIN_C1, DIO_LOW);
    1da2:	83 e0       	ldi	r24, 0x03	; 3
    1da4:	65 e0       	ldi	r22, 0x05	; 5
    1da6:	40 e0       	ldi	r20, 0x00	; 0
    1da8:	0e 94 ee 09 	call	0x13dc	; 0x13dc <DIO_SetPinLevel>
    1dac:	0b c0       	rjmp	.+22     	; 0x1dc4 <Keypad_GetButtonStatePooling+0xbc>
        break;
    case 2:
        DIO_SetPinLevel(KEYPAD_PIN_C2, DIO_LOW);
    1dae:	83 e0       	ldi	r24, 0x03	; 3
    1db0:	66 e0       	ldi	r22, 0x06	; 6
    1db2:	40 e0       	ldi	r20, 0x00	; 0
    1db4:	0e 94 ee 09 	call	0x13dc	; 0x13dc <DIO_SetPinLevel>
    1db8:	05 c0       	rjmp	.+10     	; 0x1dc4 <Keypad_GetButtonStatePooling+0xbc>
        break;
    case 3:
        DIO_SetPinLevel(KEYPAD_PIN_C3, DIO_LOW);
    1dba:	83 e0       	ldi	r24, 0x03	; 3
    1dbc:	67 e0       	ldi	r22, 0x07	; 7
    1dbe:	40 e0       	ldi	r20, 0x00	; 0
    1dc0:	0e 94 ee 09 	call	0x13dc	; 0x13dc <DIO_SetPinLevel>
        break;
    default:
        break;
    }
    switch (row)
    1dc4:	8a 81       	ldd	r24, Y+2	; 0x02
    1dc6:	28 2f       	mov	r18, r24
    1dc8:	30 e0       	ldi	r19, 0x00	; 0
    1dca:	3e 83       	std	Y+6, r19	; 0x06
    1dcc:	2d 83       	std	Y+5, r18	; 0x05
    1dce:	8d 81       	ldd	r24, Y+5	; 0x05
    1dd0:	9e 81       	ldd	r25, Y+6	; 0x06
    1dd2:	81 30       	cpi	r24, 0x01	; 1
    1dd4:	91 05       	cpc	r25, r1
    1dd6:	19 f1       	breq	.+70     	; 0x1e1e <Keypad_GetButtonStatePooling+0x116>
    1dd8:	2d 81       	ldd	r18, Y+5	; 0x05
    1dda:	3e 81       	ldd	r19, Y+6	; 0x06
    1ddc:	22 30       	cpi	r18, 0x02	; 2
    1dde:	31 05       	cpc	r19, r1
    1de0:	2c f4       	brge	.+10     	; 0x1dec <Keypad_GetButtonStatePooling+0xe4>
    1de2:	8d 81       	ldd	r24, Y+5	; 0x05
    1de4:	9e 81       	ldd	r25, Y+6	; 0x06
    1de6:	00 97       	sbiw	r24, 0x00	; 0
    1de8:	61 f0       	breq	.+24     	; 0x1e02 <Keypad_GetButtonStatePooling+0xfa>
    1dea:	42 c0       	rjmp	.+132    	; 0x1e70 <Keypad_GetButtonStatePooling+0x168>
    1dec:	2d 81       	ldd	r18, Y+5	; 0x05
    1dee:	3e 81       	ldd	r19, Y+6	; 0x06
    1df0:	22 30       	cpi	r18, 0x02	; 2
    1df2:	31 05       	cpc	r19, r1
    1df4:	11 f1       	breq	.+68     	; 0x1e3a <Keypad_GetButtonStatePooling+0x132>
    1df6:	8d 81       	ldd	r24, Y+5	; 0x05
    1df8:	9e 81       	ldd	r25, Y+6	; 0x06
    1dfa:	83 30       	cpi	r24, 0x03	; 3
    1dfc:	91 05       	cpc	r25, r1
    1dfe:	59 f1       	breq	.+86     	; 0x1e56 <Keypad_GetButtonStatePooling+0x14e>
    1e00:	37 c0       	rjmp	.+110    	; 0x1e70 <Keypad_GetButtonStatePooling+0x168>
    {
    case 0:
        if (DIO_ReadPinLevel(KEYPAD_PIN_R0) == DIO_LOW) {
    1e02:	83 e0       	ldi	r24, 0x03	; 3
    1e04:	60 e0       	ldi	r22, 0x00	; 0
    1e06:	0e 94 9d 0b 	call	0x173a	; 0x173a <DIO_ReadPinLevel>
    1e0a:	88 23       	and	r24, r24
    1e0c:	89 f5       	brne	.+98     	; 0x1e70 <Keypad_GetButtonStatePooling+0x168>
            state = KEYPAD_STATE_PRESSED;
    1e0e:	1b 82       	std	Y+3, r1	; 0x03
            while (DIO_ReadPinLevel(KEYPAD_PIN_R0) == DIO_LOW);
    1e10:	83 e0       	ldi	r24, 0x03	; 3
    1e12:	60 e0       	ldi	r22, 0x00	; 0
    1e14:	0e 94 9d 0b 	call	0x173a	; 0x173a <DIO_ReadPinLevel>
    1e18:	88 23       	and	r24, r24
    1e1a:	d1 f3       	breq	.-12     	; 0x1e10 <Keypad_GetButtonStatePooling+0x108>
    1e1c:	29 c0       	rjmp	.+82     	; 0x1e70 <Keypad_GetButtonStatePooling+0x168>
        }
        break;
    case 1:
        if (DIO_ReadPinLevel(KEYPAD_PIN_R1) == DIO_LOW) {
    1e1e:	83 e0       	ldi	r24, 0x03	; 3
    1e20:	61 e0       	ldi	r22, 0x01	; 1
    1e22:	0e 94 9d 0b 	call	0x173a	; 0x173a <DIO_ReadPinLevel>
    1e26:	88 23       	and	r24, r24
    1e28:	19 f5       	brne	.+70     	; 0x1e70 <Keypad_GetButtonStatePooling+0x168>
            state = KEYPAD_STATE_PRESSED;
    1e2a:	1b 82       	std	Y+3, r1	; 0x03
            while (DIO_ReadPinLevel(KEYPAD_PIN_R1) == DIO_LOW);
    1e2c:	83 e0       	ldi	r24, 0x03	; 3
    1e2e:	61 e0       	ldi	r22, 0x01	; 1
    1e30:	0e 94 9d 0b 	call	0x173a	; 0x173a <DIO_ReadPinLevel>
    1e34:	88 23       	and	r24, r24
    1e36:	d1 f3       	breq	.-12     	; 0x1e2c <Keypad_GetButtonStatePooling+0x124>
    1e38:	1b c0       	rjmp	.+54     	; 0x1e70 <Keypad_GetButtonStatePooling+0x168>
        }
        break;
    case 2:
        if (DIO_ReadPinLevel(KEYPAD_PIN_R2) == DIO_LOW) {
    1e3a:	83 e0       	ldi	r24, 0x03	; 3
    1e3c:	62 e0       	ldi	r22, 0x02	; 2
    1e3e:	0e 94 9d 0b 	call	0x173a	; 0x173a <DIO_ReadPinLevel>
    1e42:	88 23       	and	r24, r24
    1e44:	a9 f4       	brne	.+42     	; 0x1e70 <Keypad_GetButtonStatePooling+0x168>
            state = KEYPAD_STATE_PRESSED;
    1e46:	1b 82       	std	Y+3, r1	; 0x03
            while (DIO_ReadPinLevel(KEYPAD_PIN_R2) == DIO_LOW);
    1e48:	83 e0       	ldi	r24, 0x03	; 3
    1e4a:	62 e0       	ldi	r22, 0x02	; 2
    1e4c:	0e 94 9d 0b 	call	0x173a	; 0x173a <DIO_ReadPinLevel>
    1e50:	88 23       	and	r24, r24
    1e52:	d1 f3       	breq	.-12     	; 0x1e48 <Keypad_GetButtonStatePooling+0x140>
    1e54:	0d c0       	rjmp	.+26     	; 0x1e70 <Keypad_GetButtonStatePooling+0x168>
        }
        break;
    case 3:
        if (DIO_ReadPinLevel(KEYPAD_PIN_R3) == DIO_LOW) {
    1e56:	83 e0       	ldi	r24, 0x03	; 3
    1e58:	63 e0       	ldi	r22, 0x03	; 3
    1e5a:	0e 94 9d 0b 	call	0x173a	; 0x173a <DIO_ReadPinLevel>
    1e5e:	88 23       	and	r24, r24
    1e60:	39 f4       	brne	.+14     	; 0x1e70 <Keypad_GetButtonStatePooling+0x168>
            state = KEYPAD_STATE_PRESSED;
    1e62:	1b 82       	std	Y+3, r1	; 0x03
            while (DIO_ReadPinLevel(KEYPAD_PIN_R3) == DIO_LOW);
    1e64:	83 e0       	ldi	r24, 0x03	; 3
    1e66:	63 e0       	ldi	r22, 0x03	; 3
    1e68:	0e 94 9d 0b 	call	0x173a	; 0x173a <DIO_ReadPinLevel>
    1e6c:	88 23       	and	r24, r24
    1e6e:	d1 f3       	breq	.-12     	; 0x1e64 <Keypad_GetButtonStatePooling+0x15c>
        }
        break;
    default:
        break;
    }
    return state;
    1e70:	8b 81       	ldd	r24, Y+3	; 0x03
}
    1e72:	28 96       	adiw	r28, 0x08	; 8
    1e74:	0f b6       	in	r0, 0x3f	; 63
    1e76:	f8 94       	cli
    1e78:	de bf       	out	0x3e, r29	; 62
    1e7a:	0f be       	out	0x3f, r0	; 63
    1e7c:	cd bf       	out	0x3d, r28	; 61
    1e7e:	cf 91       	pop	r28
    1e80:	df 91       	pop	r29
    1e82:	08 95       	ret

00001e84 <Keypad_GetPressedButton>:


Keypad_ButtonType Keypad_GetPressedButton(void) {
    1e84:	df 93       	push	r29
    1e86:	cf 93       	push	r28
    1e88:	00 d0       	rcall	.+0      	; 0x1e8a <Keypad_GetPressedButton+0x6>
    1e8a:	cd b7       	in	r28, 0x3d	; 61
    1e8c:	de b7       	in	r29, 0x3e	; 62
    u8 i=0;
    1e8e:	1a 82       	std	Y+2, r1	; 0x02
    Keypad_ButtonType pressed_button = KEYPAD_BUTTON_INVALID;
    1e90:	80 e1       	ldi	r24, 0x10	; 16
    1e92:	89 83       	std	Y+1, r24	; 0x01
    for (i=0; i<16; i++) {
    1e94:	1a 82       	std	Y+2, r1	; 0x02
    1e96:	0b c0       	rjmp	.+22     	; 0x1eae <Keypad_GetPressedButton+0x2a>
        if (Keypad_GetButtonStatePooling(i) == KEYPAD_STATE_PRESSED) {
    1e98:	8a 81       	ldd	r24, Y+2	; 0x02
    1e9a:	0e 94 84 0e 	call	0x1d08	; 0x1d08 <Keypad_GetButtonStatePooling>
    1e9e:	88 23       	and	r24, r24
    1ea0:	19 f4       	brne	.+6      	; 0x1ea8 <Keypad_GetPressedButton+0x24>
            pressed_button = i;
    1ea2:	8a 81       	ldd	r24, Y+2	; 0x02
    1ea4:	89 83       	std	Y+1, r24	; 0x01
    1ea6:	06 c0       	rjmp	.+12     	; 0x1eb4 <Keypad_GetPressedButton+0x30>


Keypad_ButtonType Keypad_GetPressedButton(void) {
    u8 i=0;
    Keypad_ButtonType pressed_button = KEYPAD_BUTTON_INVALID;
    for (i=0; i<16; i++) {
    1ea8:	8a 81       	ldd	r24, Y+2	; 0x02
    1eaa:	8f 5f       	subi	r24, 0xFF	; 255
    1eac:	8a 83       	std	Y+2, r24	; 0x02
    1eae:	8a 81       	ldd	r24, Y+2	; 0x02
    1eb0:	80 31       	cpi	r24, 0x10	; 16
    1eb2:	90 f3       	brcs	.-28     	; 0x1e98 <Keypad_GetPressedButton+0x14>
        if (Keypad_GetButtonStatePooling(i) == KEYPAD_STATE_PRESSED) {
            pressed_button = i;
            break;
        }
    }
    return pressed_button;
    1eb4:	89 81       	ldd	r24, Y+1	; 0x01
}
    1eb6:	0f 90       	pop	r0
    1eb8:	0f 90       	pop	r0
    1eba:	cf 91       	pop	r28
    1ebc:	df 91       	pop	r29
    1ebe:	08 95       	ret

00001ec0 <LCD_Init>:

static void LCD_SendData(u8 data);
static void LCD_SendCommand(u8 command);
static void LCD_InitPinsMode(void);

void LCD_Init(void) {
    1ec0:	df 93       	push	r29
    1ec2:	cf 93       	push	r28
    1ec4:	cd b7       	in	r28, 0x3d	; 61
    1ec6:	de b7       	in	r29, 0x3e	; 62
    1ec8:	2f 97       	sbiw	r28, 0x0f	; 15
    1eca:	0f b6       	in	r0, 0x3f	; 63
    1ecc:	f8 94       	cli
    1ece:	de bf       	out	0x3e, r29	; 62
    1ed0:	0f be       	out	0x3f, r0	; 63
    1ed2:	cd bf       	out	0x3d, r28	; 61
    u8 command = 0;
    1ed4:	1f 86       	std	Y+15, r1	; 0x0f
    LCD_InitPinsMode();
    1ed6:	0e 94 ee 12 	call	0x25dc	; 0x25dc <LCD_InitPinsMode>
    1eda:	80 e0       	ldi	r24, 0x00	; 0
    1edc:	90 e0       	ldi	r25, 0x00	; 0
    1ede:	a0 ef       	ldi	r26, 0xF0	; 240
    1ee0:	b1 e4       	ldi	r27, 0x41	; 65
    1ee2:	8b 87       	std	Y+11, r24	; 0x0b
    1ee4:	9c 87       	std	Y+12, r25	; 0x0c
    1ee6:	ad 87       	std	Y+13, r26	; 0x0d
    1ee8:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    1eea:	6b 85       	ldd	r22, Y+11	; 0x0b
    1eec:	7c 85       	ldd	r23, Y+12	; 0x0c
    1eee:	8d 85       	ldd	r24, Y+13	; 0x0d
    1ef0:	9e 85       	ldd	r25, Y+14	; 0x0e
    1ef2:	20 e0       	ldi	r18, 0x00	; 0
    1ef4:	30 e0       	ldi	r19, 0x00	; 0
    1ef6:	4a ef       	ldi	r20, 0xFA	; 250
    1ef8:	54 e4       	ldi	r21, 0x44	; 68
    1efa:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1efe:	dc 01       	movw	r26, r24
    1f00:	cb 01       	movw	r24, r22
    1f02:	8f 83       	std	Y+7, r24	; 0x07
    1f04:	98 87       	std	Y+8, r25	; 0x08
    1f06:	a9 87       	std	Y+9, r26	; 0x09
    1f08:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    1f0a:	6f 81       	ldd	r22, Y+7	; 0x07
    1f0c:	78 85       	ldd	r23, Y+8	; 0x08
    1f0e:	89 85       	ldd	r24, Y+9	; 0x09
    1f10:	9a 85       	ldd	r25, Y+10	; 0x0a
    1f12:	20 e0       	ldi	r18, 0x00	; 0
    1f14:	30 e0       	ldi	r19, 0x00	; 0
    1f16:	40 e8       	ldi	r20, 0x80	; 128
    1f18:	5f e3       	ldi	r21, 0x3F	; 63
    1f1a:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    1f1e:	88 23       	and	r24, r24
    1f20:	2c f4       	brge	.+10     	; 0x1f2c <LCD_Init+0x6c>
		__ticks = 1;
    1f22:	81 e0       	ldi	r24, 0x01	; 1
    1f24:	90 e0       	ldi	r25, 0x00	; 0
    1f26:	9e 83       	std	Y+6, r25	; 0x06
    1f28:	8d 83       	std	Y+5, r24	; 0x05
    1f2a:	3f c0       	rjmp	.+126    	; 0x1faa <LCD_Init+0xea>
	else if (__tmp > 65535)
    1f2c:	6f 81       	ldd	r22, Y+7	; 0x07
    1f2e:	78 85       	ldd	r23, Y+8	; 0x08
    1f30:	89 85       	ldd	r24, Y+9	; 0x09
    1f32:	9a 85       	ldd	r25, Y+10	; 0x0a
    1f34:	20 e0       	ldi	r18, 0x00	; 0
    1f36:	3f ef       	ldi	r19, 0xFF	; 255
    1f38:	4f e7       	ldi	r20, 0x7F	; 127
    1f3a:	57 e4       	ldi	r21, 0x47	; 71
    1f3c:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    1f40:	18 16       	cp	r1, r24
    1f42:	4c f5       	brge	.+82     	; 0x1f96 <LCD_Init+0xd6>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    1f44:	6b 85       	ldd	r22, Y+11	; 0x0b
    1f46:	7c 85       	ldd	r23, Y+12	; 0x0c
    1f48:	8d 85       	ldd	r24, Y+13	; 0x0d
    1f4a:	9e 85       	ldd	r25, Y+14	; 0x0e
    1f4c:	20 e0       	ldi	r18, 0x00	; 0
    1f4e:	30 e0       	ldi	r19, 0x00	; 0
    1f50:	40 e2       	ldi	r20, 0x20	; 32
    1f52:	51 e4       	ldi	r21, 0x41	; 65
    1f54:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1f58:	dc 01       	movw	r26, r24
    1f5a:	cb 01       	movw	r24, r22
    1f5c:	bc 01       	movw	r22, r24
    1f5e:	cd 01       	movw	r24, r26
    1f60:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1f64:	dc 01       	movw	r26, r24
    1f66:	cb 01       	movw	r24, r22
    1f68:	9e 83       	std	Y+6, r25	; 0x06
    1f6a:	8d 83       	std	Y+5, r24	; 0x05
    1f6c:	0f c0       	rjmp	.+30     	; 0x1f8c <LCD_Init+0xcc>
    1f6e:	88 ec       	ldi	r24, 0xC8	; 200
    1f70:	90 e0       	ldi	r25, 0x00	; 0
    1f72:	9c 83       	std	Y+4, r25	; 0x04
    1f74:	8b 83       	std	Y+3, r24	; 0x03
    milliseconds can be achieved.
 */
void
_delay_loop_2(uint16_t __count)
{
	__asm__ volatile (
    1f76:	8b 81       	ldd	r24, Y+3	; 0x03
    1f78:	9c 81       	ldd	r25, Y+4	; 0x04
    1f7a:	01 97       	sbiw	r24, 0x01	; 1
    1f7c:	f1 f7       	brne	.-4      	; 0x1f7a <LCD_Init+0xba>
    1f7e:	9c 83       	std	Y+4, r25	; 0x04
    1f80:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    1f82:	8d 81       	ldd	r24, Y+5	; 0x05
    1f84:	9e 81       	ldd	r25, Y+6	; 0x06
    1f86:	01 97       	sbiw	r24, 0x01	; 1
    1f88:	9e 83       	std	Y+6, r25	; 0x06
    1f8a:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    1f8c:	8d 81       	ldd	r24, Y+5	; 0x05
    1f8e:	9e 81       	ldd	r25, Y+6	; 0x06
    1f90:	00 97       	sbiw	r24, 0x00	; 0
    1f92:	69 f7       	brne	.-38     	; 0x1f6e <LCD_Init+0xae>
    1f94:	14 c0       	rjmp	.+40     	; 0x1fbe <LCD_Init+0xfe>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    1f96:	6f 81       	ldd	r22, Y+7	; 0x07
    1f98:	78 85       	ldd	r23, Y+8	; 0x08
    1f9a:	89 85       	ldd	r24, Y+9	; 0x09
    1f9c:	9a 85       	ldd	r25, Y+10	; 0x0a
    1f9e:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1fa2:	dc 01       	movw	r26, r24
    1fa4:	cb 01       	movw	r24, r22
    1fa6:	9e 83       	std	Y+6, r25	; 0x06
    1fa8:	8d 83       	std	Y+5, r24	; 0x05
    1faa:	8d 81       	ldd	r24, Y+5	; 0x05
    1fac:	9e 81       	ldd	r25, Y+6	; 0x06
    1fae:	9a 83       	std	Y+2, r25	; 0x02
    1fb0:	89 83       	std	Y+1, r24	; 0x01
    1fb2:	89 81       	ldd	r24, Y+1	; 0x01
    1fb4:	9a 81       	ldd	r25, Y+2	; 0x02
    1fb6:	01 97       	sbiw	r24, 0x01	; 1
    1fb8:	f1 f7       	brne	.-4      	; 0x1fb6 <LCD_Init+0xf6>
    1fba:	9a 83       	std	Y+2, r25	; 0x02
    1fbc:	89 83       	std	Y+1, r24	; 0x01

    /* Function Set:
        N: 1 (two lines)
        F: 0 (5x7)
    */
    command = 0b00110000;
    1fbe:	80 e3       	ldi	r24, 0x30	; 48
    1fc0:	8f 87       	std	Y+15, r24	; 0x0f
    #if (LCD_MODE_LINES == LCD_TWO_LINES)
        SET_BIT(command, 3);
    1fc2:	8f 85       	ldd	r24, Y+15	; 0x0f
    1fc4:	88 60       	ori	r24, 0x08	; 8
    1fc6:	8f 87       	std	Y+15, r24	; 0x0f
    #endif
    #if (LCD_MODE_DOTS == LCD_DOTS_5X10)
        SET_BIT(command, 2);
    1fc8:	8f 85       	ldd	r24, Y+15	; 0x0f
    1fca:	84 60       	ori	r24, 0x04	; 4
    1fcc:	8f 87       	std	Y+15, r24	; 0x0f
    #endif
    LCD_SendCommand(command);
    1fce:	8f 85       	ldd	r24, Y+15	; 0x0f
    1fd0:	0e 94 18 11 	call	0x2230	; 0x2230 <LCD_SendCommand>
    /* Display ON/OFF
        D: 1 (Display ON)
        C: 0 (Cursor off)
        B: 0 (Cursor not blink)
    */
    command = 0b00001000;
    1fd4:	88 e0       	ldi	r24, 0x08	; 8
    1fd6:	8f 87       	std	Y+15, r24	; 0x0f
    #if (LCD_MODE_DISPLAY == LCD_DISPLAY_ON)
        SET_BIT(command, 2);
    1fd8:	8f 85       	ldd	r24, Y+15	; 0x0f
    1fda:	84 60       	ori	r24, 0x04	; 4
    1fdc:	8f 87       	std	Y+15, r24	; 0x0f
    #endif
    #if (LCD_MODE_CURSOR == LCD_CURSOR_ON_BLINK)
        SET_BIT(command, 0);
    1fde:	8f 85       	ldd	r24, Y+15	; 0x0f
    1fe0:	81 60       	ori	r24, 0x01	; 1
    1fe2:	8f 87       	std	Y+15, r24	; 0x0f
        SET_BIT(command, 1);
    1fe4:	8f 85       	ldd	r24, Y+15	; 0x0f
    1fe6:	82 60       	ori	r24, 0x02	; 2
    1fe8:	8f 87       	std	Y+15, r24	; 0x0f
    #endif
    #if (LCD_MODE_CURSOR == LCD_CURSOR_ON_NO_BLINK)
        SET_BIT(command, 1);
    1fea:	8f 85       	ldd	r24, Y+15	; 0x0f
    1fec:	82 60       	ori	r24, 0x02	; 2
    1fee:	8f 87       	std	Y+15, r24	; 0x0f
    #endif
    LCD_SendCommand(command);
    1ff0:	8f 85       	ldd	r24, Y+15	; 0x0f
    1ff2:	0e 94 18 11 	call	0x2230	; 0x2230 <LCD_SendCommand>

    /* Display Clear */
    LCD_SendCommand(0b00000001);
    1ff6:	81 e0       	ldi	r24, 0x01	; 1
    1ff8:	0e 94 18 11 	call	0x2230	; 0x2230 <LCD_SendCommand>
}
    1ffc:	2f 96       	adiw	r28, 0x0f	; 15
    1ffe:	0f b6       	in	r0, 0x3f	; 63
    2000:	f8 94       	cli
    2002:	de bf       	out	0x3e, r29	; 62
    2004:	0f be       	out	0x3f, r0	; 63
    2006:	cd bf       	out	0x3d, r28	; 61
    2008:	cf 91       	pop	r28
    200a:	df 91       	pop	r29
    200c:	08 95       	ret

0000200e <LCD_Clear>:


void LCD_Clear (void) {
    200e:	df 93       	push	r29
    2010:	cf 93       	push	r28
    2012:	cd b7       	in	r28, 0x3d	; 61
    2014:	de b7       	in	r29, 0x3e	; 62
    LCD_SendCommand(0b00000001);
    2016:	81 e0       	ldi	r24, 0x01	; 1
    2018:	0e 94 18 11 	call	0x2230	; 0x2230 <LCD_SendCommand>
}
    201c:	cf 91       	pop	r28
    201e:	df 91       	pop	r29
    2020:	08 95       	ret

00002022 <LCD_DisplayCharacter>:

void LCD_DisplayCharacter (u8 data) {
    2022:	df 93       	push	r29
    2024:	cf 93       	push	r28
    2026:	0f 92       	push	r0
    2028:	cd b7       	in	r28, 0x3d	; 61
    202a:	de b7       	in	r29, 0x3e	; 62
    202c:	89 83       	std	Y+1, r24	; 0x01
    LCD_SendData(data);
    202e:	89 81       	ldd	r24, Y+1	; 0x01
    2030:	0e 94 03 12 	call	0x2406	; 0x2406 <LCD_SendData>
}
    2034:	0f 90       	pop	r0
    2036:	cf 91       	pop	r28
    2038:	df 91       	pop	r29
    203a:	08 95       	ret

0000203c <LCD_DisplayString>:

void LCD_DisplayString (u8 *str) {
    203c:	df 93       	push	r29
    203e:	cf 93       	push	r28
    2040:	00 d0       	rcall	.+0      	; 0x2042 <LCD_DisplayString+0x6>
    2042:	0f 92       	push	r0
    2044:	cd b7       	in	r28, 0x3d	; 61
    2046:	de b7       	in	r29, 0x3e	; 62
    2048:	9b 83       	std	Y+3, r25	; 0x03
    204a:	8a 83       	std	Y+2, r24	; 0x02
    u8 i=0;
    204c:	19 82       	std	Y+1, r1	; 0x01
    204e:	0e c0       	rjmp	.+28     	; 0x206c <LCD_DisplayString+0x30>
    while(str[i] != '\0') {
        LCD_DisplayCharacter(str[i]);
    2050:	89 81       	ldd	r24, Y+1	; 0x01
    2052:	28 2f       	mov	r18, r24
    2054:	30 e0       	ldi	r19, 0x00	; 0
    2056:	8a 81       	ldd	r24, Y+2	; 0x02
    2058:	9b 81       	ldd	r25, Y+3	; 0x03
    205a:	fc 01       	movw	r30, r24
    205c:	e2 0f       	add	r30, r18
    205e:	f3 1f       	adc	r31, r19
    2060:	80 81       	ld	r24, Z
    2062:	0e 94 11 10 	call	0x2022	; 0x2022 <LCD_DisplayCharacter>
        i++;
    2066:	89 81       	ldd	r24, Y+1	; 0x01
    2068:	8f 5f       	subi	r24, 0xFF	; 255
    206a:	89 83       	std	Y+1, r24	; 0x01
    LCD_SendData(data);
}

void LCD_DisplayString (u8 *str) {
    u8 i=0;
    while(str[i] != '\0') {
    206c:	89 81       	ldd	r24, Y+1	; 0x01
    206e:	28 2f       	mov	r18, r24
    2070:	30 e0       	ldi	r19, 0x00	; 0
    2072:	8a 81       	ldd	r24, Y+2	; 0x02
    2074:	9b 81       	ldd	r25, Y+3	; 0x03
    2076:	fc 01       	movw	r30, r24
    2078:	e2 0f       	add	r30, r18
    207a:	f3 1f       	adc	r31, r19
    207c:	80 81       	ld	r24, Z
    207e:	88 23       	and	r24, r24
    2080:	39 f7       	brne	.-50     	; 0x2050 <LCD_DisplayString+0x14>
        LCD_DisplayCharacter(str[i]);
        i++;
    }
}
    2082:	0f 90       	pop	r0
    2084:	0f 90       	pop	r0
    2086:	0f 90       	pop	r0
    2088:	cf 91       	pop	r28
    208a:	df 91       	pop	r29
    208c:	08 95       	ret

0000208e <LCD_SetCursorPosition>:

void LCD_SetCursorPosition(u8 row, u8 column) {
    208e:	df 93       	push	r29
    2090:	cf 93       	push	r28
    2092:	00 d0       	rcall	.+0      	; 0x2094 <LCD_SetCursorPosition+0x6>
    2094:	0f 92       	push	r0
    2096:	cd b7       	in	r28, 0x3d	; 61
    2098:	de b7       	in	r29, 0x3e	; 62
    209a:	8a 83       	std	Y+2, r24	; 0x02
    209c:	6b 83       	std	Y+3, r22	; 0x03
    u8 address = column + row*0x40;
    209e:	8a 81       	ldd	r24, Y+2	; 0x02
    20a0:	88 2f       	mov	r24, r24
    20a2:	90 e0       	ldi	r25, 0x00	; 0
    20a4:	00 24       	eor	r0, r0
    20a6:	96 95       	lsr	r25
    20a8:	87 95       	ror	r24
    20aa:	07 94       	ror	r0
    20ac:	96 95       	lsr	r25
    20ae:	87 95       	ror	r24
    20b0:	07 94       	ror	r0
    20b2:	98 2f       	mov	r25, r24
    20b4:	80 2d       	mov	r24, r0
    20b6:	98 2f       	mov	r25, r24
    20b8:	8b 81       	ldd	r24, Y+3	; 0x03
    20ba:	89 0f       	add	r24, r25
    20bc:	89 83       	std	Y+1, r24	; 0x01
    SET_BIT(address, 7);
    20be:	89 81       	ldd	r24, Y+1	; 0x01
    20c0:	80 68       	ori	r24, 0x80	; 128
    20c2:	89 83       	std	Y+1, r24	; 0x01
    LCD_SendCommand(address);
    20c4:	89 81       	ldd	r24, Y+1	; 0x01
    20c6:	0e 94 18 11 	call	0x2230	; 0x2230 <LCD_SendCommand>
}
    20ca:	0f 90       	pop	r0
    20cc:	0f 90       	pop	r0
    20ce:	0f 90       	pop	r0
    20d0:	cf 91       	pop	r28
    20d2:	df 91       	pop	r29
    20d4:	08 95       	ret

000020d6 <LCD_DisplayNumber>:


void LCD_DisplayNumber (s32 number) {
    20d6:	df 93       	push	r29
    20d8:	cf 93       	push	r28
    20da:	00 d0       	rcall	.+0      	; 0x20dc <LCD_DisplayNumber+0x6>
    20dc:	00 d0       	rcall	.+0      	; 0x20de <LCD_DisplayNumber+0x8>
    20de:	00 d0       	rcall	.+0      	; 0x20e0 <LCD_DisplayNumber+0xa>
    20e0:	cd b7       	in	r28, 0x3d	; 61
    20e2:	de b7       	in	r29, 0x3e	; 62
    20e4:	9e 83       	std	Y+6, r25	; 0x06
    20e6:	8d 83       	std	Y+5, r24	; 0x05
    u32 reversed_number = 0;
    20e8:	1c 82       	std	Y+4, r1	; 0x04
    20ea:	1b 82       	std	Y+3, r1	; 0x03
    u8 digits = 0;
    20ec:	1a 82       	std	Y+2, r1	; 0x02
    if (number < 0) {
    20ee:	8d 81       	ldd	r24, Y+5	; 0x05
    20f0:	9e 81       	ldd	r25, Y+6	; 0x06
    20f2:	99 23       	and	r25, r25
    20f4:	5c f4       	brge	.+22     	; 0x210c <LCD_DisplayNumber+0x36>
        number = number*-1;
    20f6:	8d 81       	ldd	r24, Y+5	; 0x05
    20f8:	9e 81       	ldd	r25, Y+6	; 0x06
    20fa:	90 95       	com	r25
    20fc:	81 95       	neg	r24
    20fe:	9f 4f       	sbci	r25, 0xFF	; 255
    2100:	9e 83       	std	Y+6, r25	; 0x06
    2102:	8d 83       	std	Y+5, r24	; 0x05
        LCD_DisplayCharacter('-');
    2104:	8d e2       	ldi	r24, 0x2D	; 45
    2106:	0e 94 11 10 	call	0x2022	; 0x2022 <LCD_DisplayCharacter>
    210a:	2d c0       	rjmp	.+90     	; 0x2166 <LCD_DisplayNumber+0x90>
    }
    else if (number == 0) {
    210c:	8d 81       	ldd	r24, Y+5	; 0x05
    210e:	9e 81       	ldd	r25, Y+6	; 0x06
    2110:	00 97       	sbiw	r24, 0x00	; 0
    2112:	49 f5       	brne	.+82     	; 0x2166 <LCD_DisplayNumber+0x90>
        LCD_DisplayCharacter('0');
    2114:	80 e3       	ldi	r24, 0x30	; 48
    2116:	0e 94 11 10 	call	0x2022	; 0x2022 <LCD_DisplayCharacter>
    211a:	25 c0       	rjmp	.+74     	; 0x2166 <LCD_DisplayNumber+0x90>
    }
    while (number != 0)
    {
        reversed_number = (reversed_number*10) + (number%10);
    211c:	8b 81       	ldd	r24, Y+3	; 0x03
    211e:	9c 81       	ldd	r25, Y+4	; 0x04
    2120:	9c 01       	movw	r18, r24
    2122:	22 0f       	add	r18, r18
    2124:	33 1f       	adc	r19, r19
    2126:	c9 01       	movw	r24, r18
    2128:	88 0f       	add	r24, r24
    212a:	99 1f       	adc	r25, r25
    212c:	88 0f       	add	r24, r24
    212e:	99 1f       	adc	r25, r25
    2130:	f9 01       	movw	r30, r18
    2132:	e8 0f       	add	r30, r24
    2134:	f9 1f       	adc	r31, r25
    2136:	8d 81       	ldd	r24, Y+5	; 0x05
    2138:	9e 81       	ldd	r25, Y+6	; 0x06
    213a:	2a e0       	ldi	r18, 0x0A	; 10
    213c:	30 e0       	ldi	r19, 0x00	; 0
    213e:	b9 01       	movw	r22, r18
    2140:	0e 94 00 1b 	call	0x3600	; 0x3600 <__divmodhi4>
    2144:	8e 0f       	add	r24, r30
    2146:	9f 1f       	adc	r25, r31
    2148:	9c 83       	std	Y+4, r25	; 0x04
    214a:	8b 83       	std	Y+3, r24	; 0x03
        number = number / 10;
    214c:	8d 81       	ldd	r24, Y+5	; 0x05
    214e:	9e 81       	ldd	r25, Y+6	; 0x06
    2150:	2a e0       	ldi	r18, 0x0A	; 10
    2152:	30 e0       	ldi	r19, 0x00	; 0
    2154:	b9 01       	movw	r22, r18
    2156:	0e 94 00 1b 	call	0x3600	; 0x3600 <__divmodhi4>
    215a:	cb 01       	movw	r24, r22
    215c:	9e 83       	std	Y+6, r25	; 0x06
    215e:	8d 83       	std	Y+5, r24	; 0x05
        digits++;
    2160:	8a 81       	ldd	r24, Y+2	; 0x02
    2162:	8f 5f       	subi	r24, 0xFF	; 255
    2164:	8a 83       	std	Y+2, r24	; 0x02
        LCD_DisplayCharacter('-');
    }
    else if (number == 0) {
        LCD_DisplayCharacter('0');
    }
    while (number != 0)
    2166:	8d 81       	ldd	r24, Y+5	; 0x05
    2168:	9e 81       	ldd	r25, Y+6	; 0x06
    216a:	00 97       	sbiw	r24, 0x00	; 0
    216c:	b9 f6       	brne	.-82     	; 0x211c <LCD_DisplayNumber+0x46>
    216e:	1b c0       	rjmp	.+54     	; 0x21a6 <LCD_DisplayNumber+0xd0>
        number = number / 10;
        digits++;
    }
    while (reversed_number != 0)
    {
        u8 data = reversed_number % 10;
    2170:	8b 81       	ldd	r24, Y+3	; 0x03
    2172:	9c 81       	ldd	r25, Y+4	; 0x04
    2174:	2a e0       	ldi	r18, 0x0A	; 10
    2176:	30 e0       	ldi	r19, 0x00	; 0
    2178:	b9 01       	movw	r22, r18
    217a:	0e 94 ec 1a 	call	0x35d8	; 0x35d8 <__udivmodhi4>
    217e:	89 83       	std	Y+1, r24	; 0x01
        data = data + '0';
    2180:	89 81       	ldd	r24, Y+1	; 0x01
    2182:	80 5d       	subi	r24, 0xD0	; 208
    2184:	89 83       	std	Y+1, r24	; 0x01
        LCD_DisplayCharacter(data);
    2186:	89 81       	ldd	r24, Y+1	; 0x01
    2188:	0e 94 11 10 	call	0x2022	; 0x2022 <LCD_DisplayCharacter>
        reversed_number = reversed_number / 10;
    218c:	8b 81       	ldd	r24, Y+3	; 0x03
    218e:	9c 81       	ldd	r25, Y+4	; 0x04
    2190:	2a e0       	ldi	r18, 0x0A	; 10
    2192:	30 e0       	ldi	r19, 0x00	; 0
    2194:	b9 01       	movw	r22, r18
    2196:	0e 94 ec 1a 	call	0x35d8	; 0x35d8 <__udivmodhi4>
    219a:	cb 01       	movw	r24, r22
    219c:	9c 83       	std	Y+4, r25	; 0x04
    219e:	8b 83       	std	Y+3, r24	; 0x03
        digits--;
    21a0:	8a 81       	ldd	r24, Y+2	; 0x02
    21a2:	81 50       	subi	r24, 0x01	; 1
    21a4:	8a 83       	std	Y+2, r24	; 0x02
    {
        reversed_number = (reversed_number*10) + (number%10);
        number = number / 10;
        digits++;
    }
    while (reversed_number != 0)
    21a6:	8b 81       	ldd	r24, Y+3	; 0x03
    21a8:	9c 81       	ldd	r25, Y+4	; 0x04
    21aa:	00 97       	sbiw	r24, 0x00	; 0
    21ac:	09 f7       	brne	.-62     	; 0x2170 <LCD_DisplayNumber+0x9a>
    21ae:	06 c0       	rjmp	.+12     	; 0x21bc <LCD_DisplayNumber+0xe6>
        LCD_DisplayCharacter(data);
        reversed_number = reversed_number / 10;
        digits--;
    }
    while (digits != 0) {
        LCD_DisplayCharacter('0');
    21b0:	80 e3       	ldi	r24, 0x30	; 48
    21b2:	0e 94 11 10 	call	0x2022	; 0x2022 <LCD_DisplayCharacter>
        digits--;
    21b6:	8a 81       	ldd	r24, Y+2	; 0x02
    21b8:	81 50       	subi	r24, 0x01	; 1
    21ba:	8a 83       	std	Y+2, r24	; 0x02
        data = data + '0';
        LCD_DisplayCharacter(data);
        reversed_number = reversed_number / 10;
        digits--;
    }
    while (digits != 0) {
    21bc:	8a 81       	ldd	r24, Y+2	; 0x02
    21be:	88 23       	and	r24, r24
    21c0:	b9 f7       	brne	.-18     	; 0x21b0 <LCD_DisplayNumber+0xda>
        LCD_DisplayCharacter('0');
        digits--;
    }

}
    21c2:	26 96       	adiw	r28, 0x06	; 6
    21c4:	0f b6       	in	r0, 0x3f	; 63
    21c6:	f8 94       	cli
    21c8:	de bf       	out	0x3e, r29	; 62
    21ca:	0f be       	out	0x3f, r0	; 63
    21cc:	cd bf       	out	0x3d, r28	; 61
    21ce:	cf 91       	pop	r28
    21d0:	df 91       	pop	r29
    21d2:	08 95       	ret

000021d4 <LCD_ShiftLeft>:

void LCD_ShiftLeft (u8 counter) {
    21d4:	df 93       	push	r29
    21d6:	cf 93       	push	r28
    21d8:	00 d0       	rcall	.+0      	; 0x21da <LCD_ShiftLeft+0x6>
    21da:	cd b7       	in	r28, 0x3d	; 61
    21dc:	de b7       	in	r29, 0x3e	; 62
    21de:	8a 83       	std	Y+2, r24	; 0x02
    u8 i;
    for (i=0; i<counter; i++) {
    21e0:	19 82       	std	Y+1, r1	; 0x01
    21e2:	06 c0       	rjmp	.+12     	; 0x21f0 <LCD_ShiftLeft+0x1c>
        LCD_SendCommand(0b00011000);
    21e4:	88 e1       	ldi	r24, 0x18	; 24
    21e6:	0e 94 18 11 	call	0x2230	; 0x2230 <LCD_SendCommand>

}

void LCD_ShiftLeft (u8 counter) {
    u8 i;
    for (i=0; i<counter; i++) {
    21ea:	89 81       	ldd	r24, Y+1	; 0x01
    21ec:	8f 5f       	subi	r24, 0xFF	; 255
    21ee:	89 83       	std	Y+1, r24	; 0x01
    21f0:	99 81       	ldd	r25, Y+1	; 0x01
    21f2:	8a 81       	ldd	r24, Y+2	; 0x02
    21f4:	98 17       	cp	r25, r24
    21f6:	b0 f3       	brcs	.-20     	; 0x21e4 <LCD_ShiftLeft+0x10>
        LCD_SendCommand(0b00011000);
    }
}
    21f8:	0f 90       	pop	r0
    21fa:	0f 90       	pop	r0
    21fc:	cf 91       	pop	r28
    21fe:	df 91       	pop	r29
    2200:	08 95       	ret

00002202 <LCD_ShiftRight>:
void LCD_ShiftRight (u8 counter) {
    2202:	df 93       	push	r29
    2204:	cf 93       	push	r28
    2206:	00 d0       	rcall	.+0      	; 0x2208 <LCD_ShiftRight+0x6>
    2208:	cd b7       	in	r28, 0x3d	; 61
    220a:	de b7       	in	r29, 0x3e	; 62
    220c:	8a 83       	std	Y+2, r24	; 0x02
    u8 i;
    for (i=0; i<counter; i++) {
    220e:	19 82       	std	Y+1, r1	; 0x01
    2210:	06 c0       	rjmp	.+12     	; 0x221e <LCD_ShiftRight+0x1c>
        LCD_SendCommand(0b00011100);
    2212:	8c e1       	ldi	r24, 0x1C	; 28
    2214:	0e 94 18 11 	call	0x2230	; 0x2230 <LCD_SendCommand>
        LCD_SendCommand(0b00011000);
    }
}
void LCD_ShiftRight (u8 counter) {
    u8 i;
    for (i=0; i<counter; i++) {
    2218:	89 81       	ldd	r24, Y+1	; 0x01
    221a:	8f 5f       	subi	r24, 0xFF	; 255
    221c:	89 83       	std	Y+1, r24	; 0x01
    221e:	99 81       	ldd	r25, Y+1	; 0x01
    2220:	8a 81       	ldd	r24, Y+2	; 0x02
    2222:	98 17       	cp	r25, r24
    2224:	b0 f3       	brcs	.-20     	; 0x2212 <LCD_ShiftRight+0x10>
        LCD_SendCommand(0b00011100);
    }
}
    2226:	0f 90       	pop	r0
    2228:	0f 90       	pop	r0
    222a:	cf 91       	pop	r28
    222c:	df 91       	pop	r29
    222e:	08 95       	ret

00002230 <LCD_SendCommand>:

static void LCD_SendCommand(u8 command) {
    2230:	df 93       	push	r29
    2232:	cf 93       	push	r28
    2234:	cd b7       	in	r28, 0x3d	; 61
    2236:	de b7       	in	r29, 0x3e	; 62
    2238:	2f 97       	sbiw	r28, 0x0f	; 15
    223a:	0f b6       	in	r0, 0x3f	; 63
    223c:	f8 94       	cli
    223e:	de bf       	out	0x3e, r29	; 62
    2240:	0f be       	out	0x3f, r0	; 63
    2242:	cd bf       	out	0x3d, r28	; 61
    2244:	8f 87       	std	Y+15, r24	; 0x0f
    /* Set Control Pins:
        RS : 0 Command
        RW : 0 Write
    */
    DIO_SetPinLevel(LCD_PIN_RS, DIO_LOW);
    2246:	81 e0       	ldi	r24, 0x01	; 1
    2248:	62 e0       	ldi	r22, 0x02	; 2
    224a:	40 e0       	ldi	r20, 0x00	; 0
    224c:	0e 94 ee 09 	call	0x13dc	; 0x13dc <DIO_SetPinLevel>
    DIO_SetPinLevel(LCD_PIN_RW, DIO_LOW);
    2250:	81 e0       	ldi	r24, 0x01	; 1
    2252:	61 e0       	ldi	r22, 0x01	; 1
    2254:	40 e0       	ldi	r20, 0x00	; 0
    2256:	0e 94 ee 09 	call	0x13dc	; 0x13dc <DIO_SetPinLevel>

    /* Set Data Pins */
    DIO_SetPinLevel(LCD_PIN_D0, GET_BIT(command, 0));
    225a:	8f 85       	ldd	r24, Y+15	; 0x0f
    225c:	98 2f       	mov	r25, r24
    225e:	91 70       	andi	r25, 0x01	; 1
    2260:	80 e0       	ldi	r24, 0x00	; 0
    2262:	67 e0       	ldi	r22, 0x07	; 7
    2264:	49 2f       	mov	r20, r25
    2266:	0e 94 ee 09 	call	0x13dc	; 0x13dc <DIO_SetPinLevel>
    DIO_SetPinLevel(LCD_PIN_D1, GET_BIT(command, 1));
    226a:	8f 85       	ldd	r24, Y+15	; 0x0f
    226c:	86 95       	lsr	r24
    226e:	98 2f       	mov	r25, r24
    2270:	91 70       	andi	r25, 0x01	; 1
    2272:	80 e0       	ldi	r24, 0x00	; 0
    2274:	66 e0       	ldi	r22, 0x06	; 6
    2276:	49 2f       	mov	r20, r25
    2278:	0e 94 ee 09 	call	0x13dc	; 0x13dc <DIO_SetPinLevel>
    DIO_SetPinLevel(LCD_PIN_D2, GET_BIT(command, 2));
    227c:	8f 85       	ldd	r24, Y+15	; 0x0f
    227e:	86 95       	lsr	r24
    2280:	86 95       	lsr	r24
    2282:	98 2f       	mov	r25, r24
    2284:	91 70       	andi	r25, 0x01	; 1
    2286:	80 e0       	ldi	r24, 0x00	; 0
    2288:	65 e0       	ldi	r22, 0x05	; 5
    228a:	49 2f       	mov	r20, r25
    228c:	0e 94 ee 09 	call	0x13dc	; 0x13dc <DIO_SetPinLevel>
    DIO_SetPinLevel(LCD_PIN_D3, GET_BIT(command, 3));
    2290:	8f 85       	ldd	r24, Y+15	; 0x0f
    2292:	86 95       	lsr	r24
    2294:	86 95       	lsr	r24
    2296:	86 95       	lsr	r24
    2298:	98 2f       	mov	r25, r24
    229a:	91 70       	andi	r25, 0x01	; 1
    229c:	80 e0       	ldi	r24, 0x00	; 0
    229e:	64 e0       	ldi	r22, 0x04	; 4
    22a0:	49 2f       	mov	r20, r25
    22a2:	0e 94 ee 09 	call	0x13dc	; 0x13dc <DIO_SetPinLevel>
    DIO_SetPinLevel(LCD_PIN_D4, GET_BIT(command, 4));
    22a6:	8f 85       	ldd	r24, Y+15	; 0x0f
    22a8:	82 95       	swap	r24
    22aa:	8f 70       	andi	r24, 0x0F	; 15
    22ac:	98 2f       	mov	r25, r24
    22ae:	91 70       	andi	r25, 0x01	; 1
    22b0:	80 e0       	ldi	r24, 0x00	; 0
    22b2:	63 e0       	ldi	r22, 0x03	; 3
    22b4:	49 2f       	mov	r20, r25
    22b6:	0e 94 ee 09 	call	0x13dc	; 0x13dc <DIO_SetPinLevel>
    DIO_SetPinLevel(LCD_PIN_D5, GET_BIT(command, 5));
    22ba:	8f 85       	ldd	r24, Y+15	; 0x0f
    22bc:	82 95       	swap	r24
    22be:	86 95       	lsr	r24
    22c0:	87 70       	andi	r24, 0x07	; 7
    22c2:	98 2f       	mov	r25, r24
    22c4:	91 70       	andi	r25, 0x01	; 1
    22c6:	80 e0       	ldi	r24, 0x00	; 0
    22c8:	62 e0       	ldi	r22, 0x02	; 2
    22ca:	49 2f       	mov	r20, r25
    22cc:	0e 94 ee 09 	call	0x13dc	; 0x13dc <DIO_SetPinLevel>
    DIO_SetPinLevel(LCD_PIN_D6, GET_BIT(command, 6));
    22d0:	8f 85       	ldd	r24, Y+15	; 0x0f
    22d2:	82 95       	swap	r24
    22d4:	86 95       	lsr	r24
    22d6:	86 95       	lsr	r24
    22d8:	83 70       	andi	r24, 0x03	; 3
    22da:	98 2f       	mov	r25, r24
    22dc:	91 70       	andi	r25, 0x01	; 1
    22de:	80 e0       	ldi	r24, 0x00	; 0
    22e0:	61 e0       	ldi	r22, 0x01	; 1
    22e2:	49 2f       	mov	r20, r25
    22e4:	0e 94 ee 09 	call	0x13dc	; 0x13dc <DIO_SetPinLevel>
    DIO_SetPinLevel(LCD_PIN_D7, GET_BIT(command, 7));
    22e8:	8f 85       	ldd	r24, Y+15	; 0x0f
    22ea:	98 2f       	mov	r25, r24
    22ec:	99 1f       	adc	r25, r25
    22ee:	99 27       	eor	r25, r25
    22f0:	99 1f       	adc	r25, r25
    22f2:	80 e0       	ldi	r24, 0x00	; 0
    22f4:	60 e0       	ldi	r22, 0x00	; 0
    22f6:	49 2f       	mov	r20, r25
    22f8:	0e 94 ee 09 	call	0x13dc	; 0x13dc <DIO_SetPinLevel>

    DIO_SetPinLevel(LCD_PIN_E, DIO_HIGH);
    22fc:	81 e0       	ldi	r24, 0x01	; 1
    22fe:	60 e0       	ldi	r22, 0x00	; 0
    2300:	41 e0       	ldi	r20, 0x01	; 1
    2302:	0e 94 ee 09 	call	0x13dc	; 0x13dc <DIO_SetPinLevel>
    2306:	80 e0       	ldi	r24, 0x00	; 0
    2308:	90 e0       	ldi	r25, 0x00	; 0
    230a:	a0 e0       	ldi	r26, 0x00	; 0
    230c:	b0 e4       	ldi	r27, 0x40	; 64
    230e:	8b 87       	std	Y+11, r24	; 0x0b
    2310:	9c 87       	std	Y+12, r25	; 0x0c
    2312:	ad 87       	std	Y+13, r26	; 0x0d
    2314:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    2316:	6b 85       	ldd	r22, Y+11	; 0x0b
    2318:	7c 85       	ldd	r23, Y+12	; 0x0c
    231a:	8d 85       	ldd	r24, Y+13	; 0x0d
    231c:	9e 85       	ldd	r25, Y+14	; 0x0e
    231e:	20 e0       	ldi	r18, 0x00	; 0
    2320:	30 e0       	ldi	r19, 0x00	; 0
    2322:	4a ef       	ldi	r20, 0xFA	; 250
    2324:	54 e4       	ldi	r21, 0x44	; 68
    2326:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    232a:	dc 01       	movw	r26, r24
    232c:	cb 01       	movw	r24, r22
    232e:	8f 83       	std	Y+7, r24	; 0x07
    2330:	98 87       	std	Y+8, r25	; 0x08
    2332:	a9 87       	std	Y+9, r26	; 0x09
    2334:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    2336:	6f 81       	ldd	r22, Y+7	; 0x07
    2338:	78 85       	ldd	r23, Y+8	; 0x08
    233a:	89 85       	ldd	r24, Y+9	; 0x09
    233c:	9a 85       	ldd	r25, Y+10	; 0x0a
    233e:	20 e0       	ldi	r18, 0x00	; 0
    2340:	30 e0       	ldi	r19, 0x00	; 0
    2342:	40 e8       	ldi	r20, 0x80	; 128
    2344:	5f e3       	ldi	r21, 0x3F	; 63
    2346:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    234a:	88 23       	and	r24, r24
    234c:	2c f4       	brge	.+10     	; 0x2358 <LCD_SendCommand+0x128>
		__ticks = 1;
    234e:	81 e0       	ldi	r24, 0x01	; 1
    2350:	90 e0       	ldi	r25, 0x00	; 0
    2352:	9e 83       	std	Y+6, r25	; 0x06
    2354:	8d 83       	std	Y+5, r24	; 0x05
    2356:	3f c0       	rjmp	.+126    	; 0x23d6 <LCD_SendCommand+0x1a6>
	else if (__tmp > 65535)
    2358:	6f 81       	ldd	r22, Y+7	; 0x07
    235a:	78 85       	ldd	r23, Y+8	; 0x08
    235c:	89 85       	ldd	r24, Y+9	; 0x09
    235e:	9a 85       	ldd	r25, Y+10	; 0x0a
    2360:	20 e0       	ldi	r18, 0x00	; 0
    2362:	3f ef       	ldi	r19, 0xFF	; 255
    2364:	4f e7       	ldi	r20, 0x7F	; 127
    2366:	57 e4       	ldi	r21, 0x47	; 71
    2368:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    236c:	18 16       	cp	r1, r24
    236e:	4c f5       	brge	.+82     	; 0x23c2 <LCD_SendCommand+0x192>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    2370:	6b 85       	ldd	r22, Y+11	; 0x0b
    2372:	7c 85       	ldd	r23, Y+12	; 0x0c
    2374:	8d 85       	ldd	r24, Y+13	; 0x0d
    2376:	9e 85       	ldd	r25, Y+14	; 0x0e
    2378:	20 e0       	ldi	r18, 0x00	; 0
    237a:	30 e0       	ldi	r19, 0x00	; 0
    237c:	40 e2       	ldi	r20, 0x20	; 32
    237e:	51 e4       	ldi	r21, 0x41	; 65
    2380:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2384:	dc 01       	movw	r26, r24
    2386:	cb 01       	movw	r24, r22
    2388:	bc 01       	movw	r22, r24
    238a:	cd 01       	movw	r24, r26
    238c:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2390:	dc 01       	movw	r26, r24
    2392:	cb 01       	movw	r24, r22
    2394:	9e 83       	std	Y+6, r25	; 0x06
    2396:	8d 83       	std	Y+5, r24	; 0x05
    2398:	0f c0       	rjmp	.+30     	; 0x23b8 <LCD_SendCommand+0x188>
    239a:	88 ec       	ldi	r24, 0xC8	; 200
    239c:	90 e0       	ldi	r25, 0x00	; 0
    239e:	9c 83       	std	Y+4, r25	; 0x04
    23a0:	8b 83       	std	Y+3, r24	; 0x03
    23a2:	8b 81       	ldd	r24, Y+3	; 0x03
    23a4:	9c 81       	ldd	r25, Y+4	; 0x04
    23a6:	01 97       	sbiw	r24, 0x01	; 1
    23a8:	f1 f7       	brne	.-4      	; 0x23a6 <LCD_SendCommand+0x176>
    23aa:	9c 83       	std	Y+4, r25	; 0x04
    23ac:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    23ae:	8d 81       	ldd	r24, Y+5	; 0x05
    23b0:	9e 81       	ldd	r25, Y+6	; 0x06
    23b2:	01 97       	sbiw	r24, 0x01	; 1
    23b4:	9e 83       	std	Y+6, r25	; 0x06
    23b6:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    23b8:	8d 81       	ldd	r24, Y+5	; 0x05
    23ba:	9e 81       	ldd	r25, Y+6	; 0x06
    23bc:	00 97       	sbiw	r24, 0x00	; 0
    23be:	69 f7       	brne	.-38     	; 0x239a <LCD_SendCommand+0x16a>
    23c0:	14 c0       	rjmp	.+40     	; 0x23ea <LCD_SendCommand+0x1ba>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    23c2:	6f 81       	ldd	r22, Y+7	; 0x07
    23c4:	78 85       	ldd	r23, Y+8	; 0x08
    23c6:	89 85       	ldd	r24, Y+9	; 0x09
    23c8:	9a 85       	ldd	r25, Y+10	; 0x0a
    23ca:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    23ce:	dc 01       	movw	r26, r24
    23d0:	cb 01       	movw	r24, r22
    23d2:	9e 83       	std	Y+6, r25	; 0x06
    23d4:	8d 83       	std	Y+5, r24	; 0x05
    23d6:	8d 81       	ldd	r24, Y+5	; 0x05
    23d8:	9e 81       	ldd	r25, Y+6	; 0x06
    23da:	9a 83       	std	Y+2, r25	; 0x02
    23dc:	89 83       	std	Y+1, r24	; 0x01
    23de:	89 81       	ldd	r24, Y+1	; 0x01
    23e0:	9a 81       	ldd	r25, Y+2	; 0x02
    23e2:	01 97       	sbiw	r24, 0x01	; 1
    23e4:	f1 f7       	brne	.-4      	; 0x23e2 <LCD_SendCommand+0x1b2>
    23e6:	9a 83       	std	Y+2, r25	; 0x02
    23e8:	89 83       	std	Y+1, r24	; 0x01
    _delay_ms(2);
    DIO_SetPinLevel(LCD_PIN_E, DIO_LOW);
    23ea:	81 e0       	ldi	r24, 0x01	; 1
    23ec:	60 e0       	ldi	r22, 0x00	; 0
    23ee:	40 e0       	ldi	r20, 0x00	; 0
    23f0:	0e 94 ee 09 	call	0x13dc	; 0x13dc <DIO_SetPinLevel>
}
    23f4:	2f 96       	adiw	r28, 0x0f	; 15
    23f6:	0f b6       	in	r0, 0x3f	; 63
    23f8:	f8 94       	cli
    23fa:	de bf       	out	0x3e, r29	; 62
    23fc:	0f be       	out	0x3f, r0	; 63
    23fe:	cd bf       	out	0x3d, r28	; 61
    2400:	cf 91       	pop	r28
    2402:	df 91       	pop	r29
    2404:	08 95       	ret

00002406 <LCD_SendData>:

static void LCD_SendData(u8 data) {
    2406:	df 93       	push	r29
    2408:	cf 93       	push	r28
    240a:	cd b7       	in	r28, 0x3d	; 61
    240c:	de b7       	in	r29, 0x3e	; 62
    240e:	2f 97       	sbiw	r28, 0x0f	; 15
    2410:	0f b6       	in	r0, 0x3f	; 63
    2412:	f8 94       	cli
    2414:	de bf       	out	0x3e, r29	; 62
    2416:	0f be       	out	0x3f, r0	; 63
    2418:	cd bf       	out	0x3d, r28	; 61
    241a:	8f 87       	std	Y+15, r24	; 0x0f
    /* Set Control Pins:
        RS : 1 Data
        RW : 0 Write
    */
    DIO_SetPinLevel(LCD_PIN_RS, DIO_HIGH);
    241c:	81 e0       	ldi	r24, 0x01	; 1
    241e:	62 e0       	ldi	r22, 0x02	; 2
    2420:	41 e0       	ldi	r20, 0x01	; 1
    2422:	0e 94 ee 09 	call	0x13dc	; 0x13dc <DIO_SetPinLevel>
    DIO_SetPinLevel(LCD_PIN_RW, DIO_LOW);
    2426:	81 e0       	ldi	r24, 0x01	; 1
    2428:	61 e0       	ldi	r22, 0x01	; 1
    242a:	40 e0       	ldi	r20, 0x00	; 0
    242c:	0e 94 ee 09 	call	0x13dc	; 0x13dc <DIO_SetPinLevel>

    /* Set Data Pins */
    DIO_SetPinLevel(LCD_PIN_D0, GET_BIT(data, 0));
    2430:	8f 85       	ldd	r24, Y+15	; 0x0f
    2432:	98 2f       	mov	r25, r24
    2434:	91 70       	andi	r25, 0x01	; 1
    2436:	80 e0       	ldi	r24, 0x00	; 0
    2438:	67 e0       	ldi	r22, 0x07	; 7
    243a:	49 2f       	mov	r20, r25
    243c:	0e 94 ee 09 	call	0x13dc	; 0x13dc <DIO_SetPinLevel>
    DIO_SetPinLevel(LCD_PIN_D1, GET_BIT(data, 1));
    2440:	8f 85       	ldd	r24, Y+15	; 0x0f
    2442:	86 95       	lsr	r24
    2444:	98 2f       	mov	r25, r24
    2446:	91 70       	andi	r25, 0x01	; 1
    2448:	80 e0       	ldi	r24, 0x00	; 0
    244a:	66 e0       	ldi	r22, 0x06	; 6
    244c:	49 2f       	mov	r20, r25
    244e:	0e 94 ee 09 	call	0x13dc	; 0x13dc <DIO_SetPinLevel>
    DIO_SetPinLevel(LCD_PIN_D2, GET_BIT(data, 2));
    2452:	8f 85       	ldd	r24, Y+15	; 0x0f
    2454:	86 95       	lsr	r24
    2456:	86 95       	lsr	r24
    2458:	98 2f       	mov	r25, r24
    245a:	91 70       	andi	r25, 0x01	; 1
    245c:	80 e0       	ldi	r24, 0x00	; 0
    245e:	65 e0       	ldi	r22, 0x05	; 5
    2460:	49 2f       	mov	r20, r25
    2462:	0e 94 ee 09 	call	0x13dc	; 0x13dc <DIO_SetPinLevel>
    DIO_SetPinLevel(LCD_PIN_D3, GET_BIT(data, 3));
    2466:	8f 85       	ldd	r24, Y+15	; 0x0f
    2468:	86 95       	lsr	r24
    246a:	86 95       	lsr	r24
    246c:	86 95       	lsr	r24
    246e:	98 2f       	mov	r25, r24
    2470:	91 70       	andi	r25, 0x01	; 1
    2472:	80 e0       	ldi	r24, 0x00	; 0
    2474:	64 e0       	ldi	r22, 0x04	; 4
    2476:	49 2f       	mov	r20, r25
    2478:	0e 94 ee 09 	call	0x13dc	; 0x13dc <DIO_SetPinLevel>
    DIO_SetPinLevel(LCD_PIN_D4, GET_BIT(data, 4));
    247c:	8f 85       	ldd	r24, Y+15	; 0x0f
    247e:	82 95       	swap	r24
    2480:	8f 70       	andi	r24, 0x0F	; 15
    2482:	98 2f       	mov	r25, r24
    2484:	91 70       	andi	r25, 0x01	; 1
    2486:	80 e0       	ldi	r24, 0x00	; 0
    2488:	63 e0       	ldi	r22, 0x03	; 3
    248a:	49 2f       	mov	r20, r25
    248c:	0e 94 ee 09 	call	0x13dc	; 0x13dc <DIO_SetPinLevel>
    DIO_SetPinLevel(LCD_PIN_D5, GET_BIT(data, 5));
    2490:	8f 85       	ldd	r24, Y+15	; 0x0f
    2492:	82 95       	swap	r24
    2494:	86 95       	lsr	r24
    2496:	87 70       	andi	r24, 0x07	; 7
    2498:	98 2f       	mov	r25, r24
    249a:	91 70       	andi	r25, 0x01	; 1
    249c:	80 e0       	ldi	r24, 0x00	; 0
    249e:	62 e0       	ldi	r22, 0x02	; 2
    24a0:	49 2f       	mov	r20, r25
    24a2:	0e 94 ee 09 	call	0x13dc	; 0x13dc <DIO_SetPinLevel>
    DIO_SetPinLevel(LCD_PIN_D6, GET_BIT(data, 6));
    24a6:	8f 85       	ldd	r24, Y+15	; 0x0f
    24a8:	82 95       	swap	r24
    24aa:	86 95       	lsr	r24
    24ac:	86 95       	lsr	r24
    24ae:	83 70       	andi	r24, 0x03	; 3
    24b0:	98 2f       	mov	r25, r24
    24b2:	91 70       	andi	r25, 0x01	; 1
    24b4:	80 e0       	ldi	r24, 0x00	; 0
    24b6:	61 e0       	ldi	r22, 0x01	; 1
    24b8:	49 2f       	mov	r20, r25
    24ba:	0e 94 ee 09 	call	0x13dc	; 0x13dc <DIO_SetPinLevel>
    DIO_SetPinLevel(LCD_PIN_D7, GET_BIT(data, 7));
    24be:	8f 85       	ldd	r24, Y+15	; 0x0f
    24c0:	98 2f       	mov	r25, r24
    24c2:	99 1f       	adc	r25, r25
    24c4:	99 27       	eor	r25, r25
    24c6:	99 1f       	adc	r25, r25
    24c8:	80 e0       	ldi	r24, 0x00	; 0
    24ca:	60 e0       	ldi	r22, 0x00	; 0
    24cc:	49 2f       	mov	r20, r25
    24ce:	0e 94 ee 09 	call	0x13dc	; 0x13dc <DIO_SetPinLevel>

    DIO_SetPinLevel(LCD_PIN_E, DIO_HIGH);
    24d2:	81 e0       	ldi	r24, 0x01	; 1
    24d4:	60 e0       	ldi	r22, 0x00	; 0
    24d6:	41 e0       	ldi	r20, 0x01	; 1
    24d8:	0e 94 ee 09 	call	0x13dc	; 0x13dc <DIO_SetPinLevel>
    24dc:	80 e0       	ldi	r24, 0x00	; 0
    24de:	90 e0       	ldi	r25, 0x00	; 0
    24e0:	a0 e0       	ldi	r26, 0x00	; 0
    24e2:	b0 e4       	ldi	r27, 0x40	; 64
    24e4:	8b 87       	std	Y+11, r24	; 0x0b
    24e6:	9c 87       	std	Y+12, r25	; 0x0c
    24e8:	ad 87       	std	Y+13, r26	; 0x0d
    24ea:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    24ec:	6b 85       	ldd	r22, Y+11	; 0x0b
    24ee:	7c 85       	ldd	r23, Y+12	; 0x0c
    24f0:	8d 85       	ldd	r24, Y+13	; 0x0d
    24f2:	9e 85       	ldd	r25, Y+14	; 0x0e
    24f4:	20 e0       	ldi	r18, 0x00	; 0
    24f6:	30 e0       	ldi	r19, 0x00	; 0
    24f8:	4a ef       	ldi	r20, 0xFA	; 250
    24fa:	54 e4       	ldi	r21, 0x44	; 68
    24fc:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2500:	dc 01       	movw	r26, r24
    2502:	cb 01       	movw	r24, r22
    2504:	8f 83       	std	Y+7, r24	; 0x07
    2506:	98 87       	std	Y+8, r25	; 0x08
    2508:	a9 87       	std	Y+9, r26	; 0x09
    250a:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    250c:	6f 81       	ldd	r22, Y+7	; 0x07
    250e:	78 85       	ldd	r23, Y+8	; 0x08
    2510:	89 85       	ldd	r24, Y+9	; 0x09
    2512:	9a 85       	ldd	r25, Y+10	; 0x0a
    2514:	20 e0       	ldi	r18, 0x00	; 0
    2516:	30 e0       	ldi	r19, 0x00	; 0
    2518:	40 e8       	ldi	r20, 0x80	; 128
    251a:	5f e3       	ldi	r21, 0x3F	; 63
    251c:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    2520:	88 23       	and	r24, r24
    2522:	2c f4       	brge	.+10     	; 0x252e <LCD_SendData+0x128>
		__ticks = 1;
    2524:	81 e0       	ldi	r24, 0x01	; 1
    2526:	90 e0       	ldi	r25, 0x00	; 0
    2528:	9e 83       	std	Y+6, r25	; 0x06
    252a:	8d 83       	std	Y+5, r24	; 0x05
    252c:	3f c0       	rjmp	.+126    	; 0x25ac <LCD_SendData+0x1a6>
	else if (__tmp > 65535)
    252e:	6f 81       	ldd	r22, Y+7	; 0x07
    2530:	78 85       	ldd	r23, Y+8	; 0x08
    2532:	89 85       	ldd	r24, Y+9	; 0x09
    2534:	9a 85       	ldd	r25, Y+10	; 0x0a
    2536:	20 e0       	ldi	r18, 0x00	; 0
    2538:	3f ef       	ldi	r19, 0xFF	; 255
    253a:	4f e7       	ldi	r20, 0x7F	; 127
    253c:	57 e4       	ldi	r21, 0x47	; 71
    253e:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    2542:	18 16       	cp	r1, r24
    2544:	4c f5       	brge	.+82     	; 0x2598 <LCD_SendData+0x192>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    2546:	6b 85       	ldd	r22, Y+11	; 0x0b
    2548:	7c 85       	ldd	r23, Y+12	; 0x0c
    254a:	8d 85       	ldd	r24, Y+13	; 0x0d
    254c:	9e 85       	ldd	r25, Y+14	; 0x0e
    254e:	20 e0       	ldi	r18, 0x00	; 0
    2550:	30 e0       	ldi	r19, 0x00	; 0
    2552:	40 e2       	ldi	r20, 0x20	; 32
    2554:	51 e4       	ldi	r21, 0x41	; 65
    2556:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    255a:	dc 01       	movw	r26, r24
    255c:	cb 01       	movw	r24, r22
    255e:	bc 01       	movw	r22, r24
    2560:	cd 01       	movw	r24, r26
    2562:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2566:	dc 01       	movw	r26, r24
    2568:	cb 01       	movw	r24, r22
    256a:	9e 83       	std	Y+6, r25	; 0x06
    256c:	8d 83       	std	Y+5, r24	; 0x05
    256e:	0f c0       	rjmp	.+30     	; 0x258e <LCD_SendData+0x188>
    2570:	88 ec       	ldi	r24, 0xC8	; 200
    2572:	90 e0       	ldi	r25, 0x00	; 0
    2574:	9c 83       	std	Y+4, r25	; 0x04
    2576:	8b 83       	std	Y+3, r24	; 0x03
    2578:	8b 81       	ldd	r24, Y+3	; 0x03
    257a:	9c 81       	ldd	r25, Y+4	; 0x04
    257c:	01 97       	sbiw	r24, 0x01	; 1
    257e:	f1 f7       	brne	.-4      	; 0x257c <LCD_SendData+0x176>
    2580:	9c 83       	std	Y+4, r25	; 0x04
    2582:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    2584:	8d 81       	ldd	r24, Y+5	; 0x05
    2586:	9e 81       	ldd	r25, Y+6	; 0x06
    2588:	01 97       	sbiw	r24, 0x01	; 1
    258a:	9e 83       	std	Y+6, r25	; 0x06
    258c:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    258e:	8d 81       	ldd	r24, Y+5	; 0x05
    2590:	9e 81       	ldd	r25, Y+6	; 0x06
    2592:	00 97       	sbiw	r24, 0x00	; 0
    2594:	69 f7       	brne	.-38     	; 0x2570 <LCD_SendData+0x16a>
    2596:	14 c0       	rjmp	.+40     	; 0x25c0 <LCD_SendData+0x1ba>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    2598:	6f 81       	ldd	r22, Y+7	; 0x07
    259a:	78 85       	ldd	r23, Y+8	; 0x08
    259c:	89 85       	ldd	r24, Y+9	; 0x09
    259e:	9a 85       	ldd	r25, Y+10	; 0x0a
    25a0:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    25a4:	dc 01       	movw	r26, r24
    25a6:	cb 01       	movw	r24, r22
    25a8:	9e 83       	std	Y+6, r25	; 0x06
    25aa:	8d 83       	std	Y+5, r24	; 0x05
    25ac:	8d 81       	ldd	r24, Y+5	; 0x05
    25ae:	9e 81       	ldd	r25, Y+6	; 0x06
    25b0:	9a 83       	std	Y+2, r25	; 0x02
    25b2:	89 83       	std	Y+1, r24	; 0x01
    25b4:	89 81       	ldd	r24, Y+1	; 0x01
    25b6:	9a 81       	ldd	r25, Y+2	; 0x02
    25b8:	01 97       	sbiw	r24, 0x01	; 1
    25ba:	f1 f7       	brne	.-4      	; 0x25b8 <LCD_SendData+0x1b2>
    25bc:	9a 83       	std	Y+2, r25	; 0x02
    25be:	89 83       	std	Y+1, r24	; 0x01
    _delay_ms(2);
    DIO_SetPinLevel(LCD_PIN_E, DIO_LOW);
    25c0:	81 e0       	ldi	r24, 0x01	; 1
    25c2:	60 e0       	ldi	r22, 0x00	; 0
    25c4:	40 e0       	ldi	r20, 0x00	; 0
    25c6:	0e 94 ee 09 	call	0x13dc	; 0x13dc <DIO_SetPinLevel>
}
    25ca:	2f 96       	adiw	r28, 0x0f	; 15
    25cc:	0f b6       	in	r0, 0x3f	; 63
    25ce:	f8 94       	cli
    25d0:	de bf       	out	0x3e, r29	; 62
    25d2:	0f be       	out	0x3f, r0	; 63
    25d4:	cd bf       	out	0x3d, r28	; 61
    25d6:	cf 91       	pop	r28
    25d8:	df 91       	pop	r29
    25da:	08 95       	ret

000025dc <LCD_InitPinsMode>:


static void LCD_InitPinsMode(void) {
    25dc:	df 93       	push	r29
    25de:	cf 93       	push	r28
    25e0:	cd b7       	in	r28, 0x3d	; 61
    25e2:	de b7       	in	r29, 0x3e	; 62
    DIO_SetPinMode(LCD_PIN_RS, DIO_OUTPUT);
    25e4:	81 e0       	ldi	r24, 0x01	; 1
    25e6:	62 e0       	ldi	r22, 0x02	; 2
    25e8:	42 e0       	ldi	r20, 0x02	; 2
    25ea:	0e 94 e0 06 	call	0xdc0	; 0xdc0 <DIO_SetPinMode>
    DIO_SetPinMode(LCD_PIN_RW, DIO_OUTPUT);
    25ee:	81 e0       	ldi	r24, 0x01	; 1
    25f0:	61 e0       	ldi	r22, 0x01	; 1
    25f2:	42 e0       	ldi	r20, 0x02	; 2
    25f4:	0e 94 e0 06 	call	0xdc0	; 0xdc0 <DIO_SetPinMode>
    DIO_SetPinMode(LCD_PIN_E , DIO_OUTPUT);
    25f8:	81 e0       	ldi	r24, 0x01	; 1
    25fa:	60 e0       	ldi	r22, 0x00	; 0
    25fc:	42 e0       	ldi	r20, 0x02	; 2
    25fe:	0e 94 e0 06 	call	0xdc0	; 0xdc0 <DIO_SetPinMode>
    DIO_SetPinMode(LCD_PIN_D0, DIO_OUTPUT);
    2602:	80 e0       	ldi	r24, 0x00	; 0
    2604:	67 e0       	ldi	r22, 0x07	; 7
    2606:	42 e0       	ldi	r20, 0x02	; 2
    2608:	0e 94 e0 06 	call	0xdc0	; 0xdc0 <DIO_SetPinMode>
    DIO_SetPinMode(LCD_PIN_D1, DIO_OUTPUT);
    260c:	80 e0       	ldi	r24, 0x00	; 0
    260e:	66 e0       	ldi	r22, 0x06	; 6
    2610:	42 e0       	ldi	r20, 0x02	; 2
    2612:	0e 94 e0 06 	call	0xdc0	; 0xdc0 <DIO_SetPinMode>
    DIO_SetPinMode(LCD_PIN_D2, DIO_OUTPUT);
    2616:	80 e0       	ldi	r24, 0x00	; 0
    2618:	65 e0       	ldi	r22, 0x05	; 5
    261a:	42 e0       	ldi	r20, 0x02	; 2
    261c:	0e 94 e0 06 	call	0xdc0	; 0xdc0 <DIO_SetPinMode>
    DIO_SetPinMode(LCD_PIN_D3, DIO_OUTPUT);
    2620:	80 e0       	ldi	r24, 0x00	; 0
    2622:	64 e0       	ldi	r22, 0x04	; 4
    2624:	42 e0       	ldi	r20, 0x02	; 2
    2626:	0e 94 e0 06 	call	0xdc0	; 0xdc0 <DIO_SetPinMode>
    DIO_SetPinMode(LCD_PIN_D4, DIO_OUTPUT);
    262a:	80 e0       	ldi	r24, 0x00	; 0
    262c:	63 e0       	ldi	r22, 0x03	; 3
    262e:	42 e0       	ldi	r20, 0x02	; 2
    2630:	0e 94 e0 06 	call	0xdc0	; 0xdc0 <DIO_SetPinMode>
    DIO_SetPinMode(LCD_PIN_D5, DIO_OUTPUT);
    2634:	80 e0       	ldi	r24, 0x00	; 0
    2636:	62 e0       	ldi	r22, 0x02	; 2
    2638:	42 e0       	ldi	r20, 0x02	; 2
    263a:	0e 94 e0 06 	call	0xdc0	; 0xdc0 <DIO_SetPinMode>
    DIO_SetPinMode(LCD_PIN_D6, DIO_OUTPUT);
    263e:	80 e0       	ldi	r24, 0x00	; 0
    2640:	61 e0       	ldi	r22, 0x01	; 1
    2642:	42 e0       	ldi	r20, 0x02	; 2
    2644:	0e 94 e0 06 	call	0xdc0	; 0xdc0 <DIO_SetPinMode>
    DIO_SetPinMode(LCD_PIN_D7, DIO_OUTPUT);
    2648:	80 e0       	ldi	r24, 0x00	; 0
    264a:	60 e0       	ldi	r22, 0x00	; 0
    264c:	42 e0       	ldi	r20, 0x02	; 2
    264e:	0e 94 e0 06 	call	0xdc0	; 0xdc0 <DIO_SetPinMode>
}
    2652:	cf 91       	pop	r28
    2654:	df 91       	pop	r29
    2656:	08 95       	ret

00002658 <SSD_Init>:
	_delay_ms(500);
	PORTD = 0b01101111; // Print 9
	_delay_ms(500);
	PORTD = 0b00000000; // off*/

void SSD_Init(void) {
    2658:	df 93       	push	r29
    265a:	cf 93       	push	r28
    265c:	cd b7       	in	r28, 0x3d	; 61
    265e:	de b7       	in	r29, 0x3e	; 62
    DIO_SetPinMode(SSD_PIN_A, DIO_OUTPUT);
    2660:	82 e0       	ldi	r24, 0x02	; 2
    2662:	60 e0       	ldi	r22, 0x00	; 0
    2664:	42 e0       	ldi	r20, 0x02	; 2
    2666:	0e 94 e0 06 	call	0xdc0	; 0xdc0 <DIO_SetPinMode>
    DIO_SetPinMode(SSD_PIN_B, DIO_OUTPUT);
    266a:	82 e0       	ldi	r24, 0x02	; 2
    266c:	61 e0       	ldi	r22, 0x01	; 1
    266e:	42 e0       	ldi	r20, 0x02	; 2
    2670:	0e 94 e0 06 	call	0xdc0	; 0xdc0 <DIO_SetPinMode>
    DIO_SetPinMode(SSD_PIN_C, DIO_OUTPUT);
    2674:	82 e0       	ldi	r24, 0x02	; 2
    2676:	62 e0       	ldi	r22, 0x02	; 2
    2678:	42 e0       	ldi	r20, 0x02	; 2
    267a:	0e 94 e0 06 	call	0xdc0	; 0xdc0 <DIO_SetPinMode>
    DIO_SetPinMode(SSD_PIN_D, DIO_OUTPUT);
    267e:	82 e0       	ldi	r24, 0x02	; 2
    2680:	63 e0       	ldi	r22, 0x03	; 3
    2682:	42 e0       	ldi	r20, 0x02	; 2
    2684:	0e 94 e0 06 	call	0xdc0	; 0xdc0 <DIO_SetPinMode>
    DIO_SetPinMode(SSD_PIN_E, DIO_OUTPUT);
    2688:	82 e0       	ldi	r24, 0x02	; 2
    268a:	64 e0       	ldi	r22, 0x04	; 4
    268c:	42 e0       	ldi	r20, 0x02	; 2
    268e:	0e 94 e0 06 	call	0xdc0	; 0xdc0 <DIO_SetPinMode>
    DIO_SetPinMode(SSD_PIN_F, DIO_OUTPUT);
    2692:	82 e0       	ldi	r24, 0x02	; 2
    2694:	65 e0       	ldi	r22, 0x05	; 5
    2696:	42 e0       	ldi	r20, 0x02	; 2
    2698:	0e 94 e0 06 	call	0xdc0	; 0xdc0 <DIO_SetPinMode>
    DIO_SetPinMode(SSD_PIN_G, DIO_OUTPUT);
    269c:	82 e0       	ldi	r24, 0x02	; 2
    269e:	66 e0       	ldi	r22, 0x06	; 6
    26a0:	42 e0       	ldi	r20, 0x02	; 2
    26a2:	0e 94 e0 06 	call	0xdc0	; 0xdc0 <DIO_SetPinMode>

}
    26a6:	cf 91       	pop	r28
    26a8:	df 91       	pop	r29
    26aa:	08 95       	ret

000026ac <SSD_Write>:
void SSD_Write (SSD_NumberType number) {
    26ac:	df 93       	push	r29
    26ae:	cf 93       	push	r28
    26b0:	00 d0       	rcall	.+0      	; 0x26b2 <SSD_Write+0x6>
    26b2:	0f 92       	push	r0
    26b4:	cd b7       	in	r28, 0x3d	; 61
    26b6:	de b7       	in	r29, 0x3e	; 62
    26b8:	89 83       	std	Y+1, r24	; 0x01
    switch (number)
    26ba:	89 81       	ldd	r24, Y+1	; 0x01
    26bc:	28 2f       	mov	r18, r24
    26be:	30 e0       	ldi	r19, 0x00	; 0
    26c0:	3b 83       	std	Y+3, r19	; 0x03
    26c2:	2a 83       	std	Y+2, r18	; 0x02
    26c4:	8a 81       	ldd	r24, Y+2	; 0x02
    26c6:	9b 81       	ldd	r25, Y+3	; 0x03
    26c8:	84 30       	cpi	r24, 0x04	; 4
    26ca:	91 05       	cpc	r25, r1
    26cc:	09 f4       	brne	.+2      	; 0x26d0 <SSD_Write+0x24>
    26ce:	d7 c0       	rjmp	.+430    	; 0x287e <SSD_Write+0x1d2>
    26d0:	2a 81       	ldd	r18, Y+2	; 0x02
    26d2:	3b 81       	ldd	r19, Y+3	; 0x03
    26d4:	25 30       	cpi	r18, 0x05	; 5
    26d6:	31 05       	cpc	r19, r1
    26d8:	ec f4       	brge	.+58     	; 0x2714 <SSD_Write+0x68>
    26da:	8a 81       	ldd	r24, Y+2	; 0x02
    26dc:	9b 81       	ldd	r25, Y+3	; 0x03
    26de:	81 30       	cpi	r24, 0x01	; 1
    26e0:	91 05       	cpc	r25, r1
    26e2:	09 f4       	brne	.+2      	; 0x26e6 <SSD_Write+0x3a>
    26e4:	60 c0       	rjmp	.+192    	; 0x27a6 <SSD_Write+0xfa>
    26e6:	2a 81       	ldd	r18, Y+2	; 0x02
    26e8:	3b 81       	ldd	r19, Y+3	; 0x03
    26ea:	22 30       	cpi	r18, 0x02	; 2
    26ec:	31 05       	cpc	r19, r1
    26ee:	2c f4       	brge	.+10     	; 0x26fa <SSD_Write+0x4e>
    26f0:	8a 81       	ldd	r24, Y+2	; 0x02
    26f2:	9b 81       	ldd	r25, Y+3	; 0x03
    26f4:	00 97       	sbiw	r24, 0x00	; 0
    26f6:	99 f1       	breq	.+102    	; 0x275e <SSD_Write+0xb2>
    26f8:	9a c1       	rjmp	.+820    	; 0x2a2e <SSD_Write+0x382>
    26fa:	2a 81       	ldd	r18, Y+2	; 0x02
    26fc:	3b 81       	ldd	r19, Y+3	; 0x03
    26fe:	22 30       	cpi	r18, 0x02	; 2
    2700:	31 05       	cpc	r19, r1
    2702:	09 f4       	brne	.+2      	; 0x2706 <SSD_Write+0x5a>
    2704:	74 c0       	rjmp	.+232    	; 0x27ee <SSD_Write+0x142>
    2706:	8a 81       	ldd	r24, Y+2	; 0x02
    2708:	9b 81       	ldd	r25, Y+3	; 0x03
    270a:	83 30       	cpi	r24, 0x03	; 3
    270c:	91 05       	cpc	r25, r1
    270e:	09 f4       	brne	.+2      	; 0x2712 <SSD_Write+0x66>
    2710:	92 c0       	rjmp	.+292    	; 0x2836 <SSD_Write+0x18a>
    2712:	8d c1       	rjmp	.+794    	; 0x2a2e <SSD_Write+0x382>
    2714:	2a 81       	ldd	r18, Y+2	; 0x02
    2716:	3b 81       	ldd	r19, Y+3	; 0x03
    2718:	27 30       	cpi	r18, 0x07	; 7
    271a:	31 05       	cpc	r19, r1
    271c:	09 f4       	brne	.+2      	; 0x2720 <SSD_Write+0x74>
    271e:	1b c1       	rjmp	.+566    	; 0x2956 <SSD_Write+0x2aa>
    2720:	8a 81       	ldd	r24, Y+2	; 0x02
    2722:	9b 81       	ldd	r25, Y+3	; 0x03
    2724:	88 30       	cpi	r24, 0x08	; 8
    2726:	91 05       	cpc	r25, r1
    2728:	6c f4       	brge	.+26     	; 0x2744 <SSD_Write+0x98>
    272a:	2a 81       	ldd	r18, Y+2	; 0x02
    272c:	3b 81       	ldd	r19, Y+3	; 0x03
    272e:	25 30       	cpi	r18, 0x05	; 5
    2730:	31 05       	cpc	r19, r1
    2732:	09 f4       	brne	.+2      	; 0x2736 <SSD_Write+0x8a>
    2734:	c8 c0       	rjmp	.+400    	; 0x28c6 <SSD_Write+0x21a>
    2736:	8a 81       	ldd	r24, Y+2	; 0x02
    2738:	9b 81       	ldd	r25, Y+3	; 0x03
    273a:	86 30       	cpi	r24, 0x06	; 6
    273c:	91 05       	cpc	r25, r1
    273e:	09 f4       	brne	.+2      	; 0x2742 <SSD_Write+0x96>
    2740:	e6 c0       	rjmp	.+460    	; 0x290e <SSD_Write+0x262>
    2742:	75 c1       	rjmp	.+746    	; 0x2a2e <SSD_Write+0x382>
    2744:	2a 81       	ldd	r18, Y+2	; 0x02
    2746:	3b 81       	ldd	r19, Y+3	; 0x03
    2748:	28 30       	cpi	r18, 0x08	; 8
    274a:	31 05       	cpc	r19, r1
    274c:	09 f4       	brne	.+2      	; 0x2750 <SSD_Write+0xa4>
    274e:	27 c1       	rjmp	.+590    	; 0x299e <SSD_Write+0x2f2>
    2750:	8a 81       	ldd	r24, Y+2	; 0x02
    2752:	9b 81       	ldd	r25, Y+3	; 0x03
    2754:	89 30       	cpi	r24, 0x09	; 9
    2756:	91 05       	cpc	r25, r1
    2758:	09 f4       	brne	.+2      	; 0x275c <SSD_Write+0xb0>
    275a:	45 c1       	rjmp	.+650    	; 0x29e6 <SSD_Write+0x33a>
    275c:	68 c1       	rjmp	.+720    	; 0x2a2e <SSD_Write+0x382>
    {

    case SSD_NUMBER_0: // 0b00111111
    #if SSD_TYPE == COMM_CATHODE
        DIO_SetPinLevel(SSD_PIN_A, DIO_HIGH);
    275e:	82 e0       	ldi	r24, 0x02	; 2
    2760:	60 e0       	ldi	r22, 0x00	; 0
    2762:	41 e0       	ldi	r20, 0x01	; 1
    2764:	0e 94 ee 09 	call	0x13dc	; 0x13dc <DIO_SetPinLevel>
        DIO_SetPinLevel(SSD_PIN_B, DIO_HIGH);
    2768:	82 e0       	ldi	r24, 0x02	; 2
    276a:	61 e0       	ldi	r22, 0x01	; 1
    276c:	41 e0       	ldi	r20, 0x01	; 1
    276e:	0e 94 ee 09 	call	0x13dc	; 0x13dc <DIO_SetPinLevel>
        DIO_SetPinLevel(SSD_PIN_C, DIO_HIGH);
    2772:	82 e0       	ldi	r24, 0x02	; 2
    2774:	62 e0       	ldi	r22, 0x02	; 2
    2776:	41 e0       	ldi	r20, 0x01	; 1
    2778:	0e 94 ee 09 	call	0x13dc	; 0x13dc <DIO_SetPinLevel>
        DIO_SetPinLevel(SSD_PIN_D, DIO_HIGH);
    277c:	82 e0       	ldi	r24, 0x02	; 2
    277e:	63 e0       	ldi	r22, 0x03	; 3
    2780:	41 e0       	ldi	r20, 0x01	; 1
    2782:	0e 94 ee 09 	call	0x13dc	; 0x13dc <DIO_SetPinLevel>
        DIO_SetPinLevel(SSD_PIN_E, DIO_HIGH);
    2786:	82 e0       	ldi	r24, 0x02	; 2
    2788:	64 e0       	ldi	r22, 0x04	; 4
    278a:	41 e0       	ldi	r20, 0x01	; 1
    278c:	0e 94 ee 09 	call	0x13dc	; 0x13dc <DIO_SetPinLevel>
        DIO_SetPinLevel(SSD_PIN_F, DIO_HIGH);
    2790:	82 e0       	ldi	r24, 0x02	; 2
    2792:	65 e0       	ldi	r22, 0x05	; 5
    2794:	41 e0       	ldi	r20, 0x01	; 1
    2796:	0e 94 ee 09 	call	0x13dc	; 0x13dc <DIO_SetPinLevel>
        DIO_SetPinLevel(SSD_PIN_G, DIO_LOW);
    279a:	82 e0       	ldi	r24, 0x02	; 2
    279c:	66 e0       	ldi	r22, 0x06	; 6
    279e:	40 e0       	ldi	r20, 0x00	; 0
    27a0:	0e 94 ee 09 	call	0x13dc	; 0x13dc <DIO_SetPinLevel>
    27a4:	67 c1       	rjmp	.+718    	; 0x2a74 <SSD_Write+0x3c8>
    #endif
        break;

    case SSD_NUMBER_1: // 0b00000110
    #if SSD_TYPE == COMM_CATHODE
        DIO_SetPinLevel(SSD_PIN_A, DIO_LOW);
    27a6:	82 e0       	ldi	r24, 0x02	; 2
    27a8:	60 e0       	ldi	r22, 0x00	; 0
    27aa:	40 e0       	ldi	r20, 0x00	; 0
    27ac:	0e 94 ee 09 	call	0x13dc	; 0x13dc <DIO_SetPinLevel>
        DIO_SetPinLevel(SSD_PIN_B, DIO_HIGH);
    27b0:	82 e0       	ldi	r24, 0x02	; 2
    27b2:	61 e0       	ldi	r22, 0x01	; 1
    27b4:	41 e0       	ldi	r20, 0x01	; 1
    27b6:	0e 94 ee 09 	call	0x13dc	; 0x13dc <DIO_SetPinLevel>
        DIO_SetPinLevel(SSD_PIN_C, DIO_HIGH);
    27ba:	82 e0       	ldi	r24, 0x02	; 2
    27bc:	62 e0       	ldi	r22, 0x02	; 2
    27be:	41 e0       	ldi	r20, 0x01	; 1
    27c0:	0e 94 ee 09 	call	0x13dc	; 0x13dc <DIO_SetPinLevel>
        DIO_SetPinLevel(SSD_PIN_D, DIO_LOW);
    27c4:	82 e0       	ldi	r24, 0x02	; 2
    27c6:	63 e0       	ldi	r22, 0x03	; 3
    27c8:	40 e0       	ldi	r20, 0x00	; 0
    27ca:	0e 94 ee 09 	call	0x13dc	; 0x13dc <DIO_SetPinLevel>
        DIO_SetPinLevel(SSD_PIN_E, DIO_LOW);
    27ce:	82 e0       	ldi	r24, 0x02	; 2
    27d0:	64 e0       	ldi	r22, 0x04	; 4
    27d2:	40 e0       	ldi	r20, 0x00	; 0
    27d4:	0e 94 ee 09 	call	0x13dc	; 0x13dc <DIO_SetPinLevel>
        DIO_SetPinLevel(SSD_PIN_F, DIO_LOW);
    27d8:	82 e0       	ldi	r24, 0x02	; 2
    27da:	65 e0       	ldi	r22, 0x05	; 5
    27dc:	40 e0       	ldi	r20, 0x00	; 0
    27de:	0e 94 ee 09 	call	0x13dc	; 0x13dc <DIO_SetPinLevel>
        DIO_SetPinLevel(SSD_PIN_G, DIO_LOW);
    27e2:	82 e0       	ldi	r24, 0x02	; 2
    27e4:	66 e0       	ldi	r22, 0x06	; 6
    27e6:	40 e0       	ldi	r20, 0x00	; 0
    27e8:	0e 94 ee 09 	call	0x13dc	; 0x13dc <DIO_SetPinLevel>
    27ec:	43 c1       	rjmp	.+646    	; 0x2a74 <SSD_Write+0x3c8>
    #endif
        break;

    case SSD_NUMBER_2: // 0b01011011
    #if SSD_TYPE == COMM_CATHODE
        DIO_SetPinLevel(SSD_PIN_A, DIO_HIGH);
    27ee:	82 e0       	ldi	r24, 0x02	; 2
    27f0:	60 e0       	ldi	r22, 0x00	; 0
    27f2:	41 e0       	ldi	r20, 0x01	; 1
    27f4:	0e 94 ee 09 	call	0x13dc	; 0x13dc <DIO_SetPinLevel>
        DIO_SetPinLevel(SSD_PIN_B, DIO_HIGH);
    27f8:	82 e0       	ldi	r24, 0x02	; 2
    27fa:	61 e0       	ldi	r22, 0x01	; 1
    27fc:	41 e0       	ldi	r20, 0x01	; 1
    27fe:	0e 94 ee 09 	call	0x13dc	; 0x13dc <DIO_SetPinLevel>
        DIO_SetPinLevel(SSD_PIN_C, DIO_LOW);
    2802:	82 e0       	ldi	r24, 0x02	; 2
    2804:	62 e0       	ldi	r22, 0x02	; 2
    2806:	40 e0       	ldi	r20, 0x00	; 0
    2808:	0e 94 ee 09 	call	0x13dc	; 0x13dc <DIO_SetPinLevel>
        DIO_SetPinLevel(SSD_PIN_D, DIO_HIGH);
    280c:	82 e0       	ldi	r24, 0x02	; 2
    280e:	63 e0       	ldi	r22, 0x03	; 3
    2810:	41 e0       	ldi	r20, 0x01	; 1
    2812:	0e 94 ee 09 	call	0x13dc	; 0x13dc <DIO_SetPinLevel>
        DIO_SetPinLevel(SSD_PIN_E, DIO_HIGH);
    2816:	82 e0       	ldi	r24, 0x02	; 2
    2818:	64 e0       	ldi	r22, 0x04	; 4
    281a:	41 e0       	ldi	r20, 0x01	; 1
    281c:	0e 94 ee 09 	call	0x13dc	; 0x13dc <DIO_SetPinLevel>
        DIO_SetPinLevel(SSD_PIN_F, DIO_LOW);
    2820:	82 e0       	ldi	r24, 0x02	; 2
    2822:	65 e0       	ldi	r22, 0x05	; 5
    2824:	40 e0       	ldi	r20, 0x00	; 0
    2826:	0e 94 ee 09 	call	0x13dc	; 0x13dc <DIO_SetPinLevel>
        DIO_SetPinLevel(SSD_PIN_G, DIO_HIGH);
    282a:	82 e0       	ldi	r24, 0x02	; 2
    282c:	66 e0       	ldi	r22, 0x06	; 6
    282e:	41 e0       	ldi	r20, 0x01	; 1
    2830:	0e 94 ee 09 	call	0x13dc	; 0x13dc <DIO_SetPinLevel>
    2834:	1f c1       	rjmp	.+574    	; 0x2a74 <SSD_Write+0x3c8>

        break;

    case SSD_NUMBER_3: // 0b01001111
    #if SSD_TYPE == COMM_CATHODE
        DIO_SetPinLevel(SSD_PIN_A, DIO_HIGH);
    2836:	82 e0       	ldi	r24, 0x02	; 2
    2838:	60 e0       	ldi	r22, 0x00	; 0
    283a:	41 e0       	ldi	r20, 0x01	; 1
    283c:	0e 94 ee 09 	call	0x13dc	; 0x13dc <DIO_SetPinLevel>
        DIO_SetPinLevel(SSD_PIN_B, DIO_HIGH);
    2840:	82 e0       	ldi	r24, 0x02	; 2
    2842:	61 e0       	ldi	r22, 0x01	; 1
    2844:	41 e0       	ldi	r20, 0x01	; 1
    2846:	0e 94 ee 09 	call	0x13dc	; 0x13dc <DIO_SetPinLevel>
        DIO_SetPinLevel(SSD_PIN_C, DIO_HIGH);
    284a:	82 e0       	ldi	r24, 0x02	; 2
    284c:	62 e0       	ldi	r22, 0x02	; 2
    284e:	41 e0       	ldi	r20, 0x01	; 1
    2850:	0e 94 ee 09 	call	0x13dc	; 0x13dc <DIO_SetPinLevel>
        DIO_SetPinLevel(SSD_PIN_D, DIO_HIGH);
    2854:	82 e0       	ldi	r24, 0x02	; 2
    2856:	63 e0       	ldi	r22, 0x03	; 3
    2858:	41 e0       	ldi	r20, 0x01	; 1
    285a:	0e 94 ee 09 	call	0x13dc	; 0x13dc <DIO_SetPinLevel>
        DIO_SetPinLevel(SSD_PIN_E, DIO_LOW);
    285e:	82 e0       	ldi	r24, 0x02	; 2
    2860:	64 e0       	ldi	r22, 0x04	; 4
    2862:	40 e0       	ldi	r20, 0x00	; 0
    2864:	0e 94 ee 09 	call	0x13dc	; 0x13dc <DIO_SetPinLevel>
        DIO_SetPinLevel(SSD_PIN_F, DIO_LOW);
    2868:	82 e0       	ldi	r24, 0x02	; 2
    286a:	65 e0       	ldi	r22, 0x05	; 5
    286c:	40 e0       	ldi	r20, 0x00	; 0
    286e:	0e 94 ee 09 	call	0x13dc	; 0x13dc <DIO_SetPinLevel>
        DIO_SetPinLevel(SSD_PIN_G, DIO_HIGH);
    2872:	82 e0       	ldi	r24, 0x02	; 2
    2874:	66 e0       	ldi	r22, 0x06	; 6
    2876:	41 e0       	ldi	r20, 0x01	; 1
    2878:	0e 94 ee 09 	call	0x13dc	; 0x13dc <DIO_SetPinLevel>
    287c:	fb c0       	rjmp	.+502    	; 0x2a74 <SSD_Write+0x3c8>
    #endif

        break;
    case SSD_NUMBER_4: // 0b01100110
    #if SSD_TYPE == COMM_CATHODE
        DIO_SetPinLevel(SSD_PIN_A, DIO_LOW);
    287e:	82 e0       	ldi	r24, 0x02	; 2
    2880:	60 e0       	ldi	r22, 0x00	; 0
    2882:	40 e0       	ldi	r20, 0x00	; 0
    2884:	0e 94 ee 09 	call	0x13dc	; 0x13dc <DIO_SetPinLevel>
        DIO_SetPinLevel(SSD_PIN_B, DIO_HIGH);
    2888:	82 e0       	ldi	r24, 0x02	; 2
    288a:	61 e0       	ldi	r22, 0x01	; 1
    288c:	41 e0       	ldi	r20, 0x01	; 1
    288e:	0e 94 ee 09 	call	0x13dc	; 0x13dc <DIO_SetPinLevel>
        DIO_SetPinLevel(SSD_PIN_C, DIO_HIGH);
    2892:	82 e0       	ldi	r24, 0x02	; 2
    2894:	62 e0       	ldi	r22, 0x02	; 2
    2896:	41 e0       	ldi	r20, 0x01	; 1
    2898:	0e 94 ee 09 	call	0x13dc	; 0x13dc <DIO_SetPinLevel>
        DIO_SetPinLevel(SSD_PIN_D, DIO_LOW);
    289c:	82 e0       	ldi	r24, 0x02	; 2
    289e:	63 e0       	ldi	r22, 0x03	; 3
    28a0:	40 e0       	ldi	r20, 0x00	; 0
    28a2:	0e 94 ee 09 	call	0x13dc	; 0x13dc <DIO_SetPinLevel>
        DIO_SetPinLevel(SSD_PIN_E, DIO_LOW);
    28a6:	82 e0       	ldi	r24, 0x02	; 2
    28a8:	64 e0       	ldi	r22, 0x04	; 4
    28aa:	40 e0       	ldi	r20, 0x00	; 0
    28ac:	0e 94 ee 09 	call	0x13dc	; 0x13dc <DIO_SetPinLevel>
        DIO_SetPinLevel(SSD_PIN_F, DIO_HIGH);
    28b0:	82 e0       	ldi	r24, 0x02	; 2
    28b2:	65 e0       	ldi	r22, 0x05	; 5
    28b4:	41 e0       	ldi	r20, 0x01	; 1
    28b6:	0e 94 ee 09 	call	0x13dc	; 0x13dc <DIO_SetPinLevel>
        DIO_SetPinLevel(SSD_PIN_G, DIO_HIGH);
    28ba:	82 e0       	ldi	r24, 0x02	; 2
    28bc:	66 e0       	ldi	r22, 0x06	; 6
    28be:	41 e0       	ldi	r20, 0x01	; 1
    28c0:	0e 94 ee 09 	call	0x13dc	; 0x13dc <DIO_SetPinLevel>
    28c4:	d7 c0       	rjmp	.+430    	; 0x2a74 <SSD_Write+0x3c8>
    #endif

        break;
    case SSD_NUMBER_5: // 0b01101101
    #if SSD_TYPE == COMM_CATHODE
        DIO_SetPinLevel(SSD_PIN_A, DIO_HIGH);
    28c6:	82 e0       	ldi	r24, 0x02	; 2
    28c8:	60 e0       	ldi	r22, 0x00	; 0
    28ca:	41 e0       	ldi	r20, 0x01	; 1
    28cc:	0e 94 ee 09 	call	0x13dc	; 0x13dc <DIO_SetPinLevel>
        DIO_SetPinLevel(SSD_PIN_B, DIO_LOW);
    28d0:	82 e0       	ldi	r24, 0x02	; 2
    28d2:	61 e0       	ldi	r22, 0x01	; 1
    28d4:	40 e0       	ldi	r20, 0x00	; 0
    28d6:	0e 94 ee 09 	call	0x13dc	; 0x13dc <DIO_SetPinLevel>
        DIO_SetPinLevel(SSD_PIN_C, DIO_HIGH);
    28da:	82 e0       	ldi	r24, 0x02	; 2
    28dc:	62 e0       	ldi	r22, 0x02	; 2
    28de:	41 e0       	ldi	r20, 0x01	; 1
    28e0:	0e 94 ee 09 	call	0x13dc	; 0x13dc <DIO_SetPinLevel>
        DIO_SetPinLevel(SSD_PIN_D, DIO_HIGH);
    28e4:	82 e0       	ldi	r24, 0x02	; 2
    28e6:	63 e0       	ldi	r22, 0x03	; 3
    28e8:	41 e0       	ldi	r20, 0x01	; 1
    28ea:	0e 94 ee 09 	call	0x13dc	; 0x13dc <DIO_SetPinLevel>
        DIO_SetPinLevel(SSD_PIN_E, DIO_LOW);
    28ee:	82 e0       	ldi	r24, 0x02	; 2
    28f0:	64 e0       	ldi	r22, 0x04	; 4
    28f2:	40 e0       	ldi	r20, 0x00	; 0
    28f4:	0e 94 ee 09 	call	0x13dc	; 0x13dc <DIO_SetPinLevel>
        DIO_SetPinLevel(SSD_PIN_F, DIO_HIGH);
    28f8:	82 e0       	ldi	r24, 0x02	; 2
    28fa:	65 e0       	ldi	r22, 0x05	; 5
    28fc:	41 e0       	ldi	r20, 0x01	; 1
    28fe:	0e 94 ee 09 	call	0x13dc	; 0x13dc <DIO_SetPinLevel>
        DIO_SetPinLevel(SSD_PIN_G, DIO_HIGH);
    2902:	82 e0       	ldi	r24, 0x02	; 2
    2904:	66 e0       	ldi	r22, 0x06	; 6
    2906:	41 e0       	ldi	r20, 0x01	; 1
    2908:	0e 94 ee 09 	call	0x13dc	; 0x13dc <DIO_SetPinLevel>
    290c:	b3 c0       	rjmp	.+358    	; 0x2a74 <SSD_Write+0x3c8>
    #endif

        break;
    case SSD_NUMBER_6: // 0b01111101
            #if SSD_TYPE == COMM_CATHODE
        DIO_SetPinLevel(SSD_PIN_A, DIO_HIGH);
    290e:	82 e0       	ldi	r24, 0x02	; 2
    2910:	60 e0       	ldi	r22, 0x00	; 0
    2912:	41 e0       	ldi	r20, 0x01	; 1
    2914:	0e 94 ee 09 	call	0x13dc	; 0x13dc <DIO_SetPinLevel>
        DIO_SetPinLevel(SSD_PIN_B, DIO_LOW);
    2918:	82 e0       	ldi	r24, 0x02	; 2
    291a:	61 e0       	ldi	r22, 0x01	; 1
    291c:	40 e0       	ldi	r20, 0x00	; 0
    291e:	0e 94 ee 09 	call	0x13dc	; 0x13dc <DIO_SetPinLevel>
        DIO_SetPinLevel(SSD_PIN_C, DIO_HIGH);
    2922:	82 e0       	ldi	r24, 0x02	; 2
    2924:	62 e0       	ldi	r22, 0x02	; 2
    2926:	41 e0       	ldi	r20, 0x01	; 1
    2928:	0e 94 ee 09 	call	0x13dc	; 0x13dc <DIO_SetPinLevel>
        DIO_SetPinLevel(SSD_PIN_D, DIO_HIGH);
    292c:	82 e0       	ldi	r24, 0x02	; 2
    292e:	63 e0       	ldi	r22, 0x03	; 3
    2930:	41 e0       	ldi	r20, 0x01	; 1
    2932:	0e 94 ee 09 	call	0x13dc	; 0x13dc <DIO_SetPinLevel>
        DIO_SetPinLevel(SSD_PIN_E, DIO_HIGH);
    2936:	82 e0       	ldi	r24, 0x02	; 2
    2938:	64 e0       	ldi	r22, 0x04	; 4
    293a:	41 e0       	ldi	r20, 0x01	; 1
    293c:	0e 94 ee 09 	call	0x13dc	; 0x13dc <DIO_SetPinLevel>
        DIO_SetPinLevel(SSD_PIN_F, DIO_HIGH);
    2940:	82 e0       	ldi	r24, 0x02	; 2
    2942:	65 e0       	ldi	r22, 0x05	; 5
    2944:	41 e0       	ldi	r20, 0x01	; 1
    2946:	0e 94 ee 09 	call	0x13dc	; 0x13dc <DIO_SetPinLevel>
        DIO_SetPinLevel(SSD_PIN_G, DIO_HIGH);
    294a:	82 e0       	ldi	r24, 0x02	; 2
    294c:	66 e0       	ldi	r22, 0x06	; 6
    294e:	41 e0       	ldi	r20, 0x01	; 1
    2950:	0e 94 ee 09 	call	0x13dc	; 0x13dc <DIO_SetPinLevel>
    2954:	8f c0       	rjmp	.+286    	; 0x2a74 <SSD_Write+0x3c8>
        #error "Invalid SSD Type"
    #endif
        break;
    case SSD_NUMBER_7: // 0b00000111
        #if SSD_TYPE == COMM_CATHODE
        DIO_SetPinLevel(SSD_PIN_A, DIO_HIGH);
    2956:	82 e0       	ldi	r24, 0x02	; 2
    2958:	60 e0       	ldi	r22, 0x00	; 0
    295a:	41 e0       	ldi	r20, 0x01	; 1
    295c:	0e 94 ee 09 	call	0x13dc	; 0x13dc <DIO_SetPinLevel>
        DIO_SetPinLevel(SSD_PIN_B, DIO_HIGH);
    2960:	82 e0       	ldi	r24, 0x02	; 2
    2962:	61 e0       	ldi	r22, 0x01	; 1
    2964:	41 e0       	ldi	r20, 0x01	; 1
    2966:	0e 94 ee 09 	call	0x13dc	; 0x13dc <DIO_SetPinLevel>
        DIO_SetPinLevel(SSD_PIN_C, DIO_HIGH);
    296a:	82 e0       	ldi	r24, 0x02	; 2
    296c:	62 e0       	ldi	r22, 0x02	; 2
    296e:	41 e0       	ldi	r20, 0x01	; 1
    2970:	0e 94 ee 09 	call	0x13dc	; 0x13dc <DIO_SetPinLevel>
        DIO_SetPinLevel(SSD_PIN_D, DIO_LOW);
    2974:	82 e0       	ldi	r24, 0x02	; 2
    2976:	63 e0       	ldi	r22, 0x03	; 3
    2978:	40 e0       	ldi	r20, 0x00	; 0
    297a:	0e 94 ee 09 	call	0x13dc	; 0x13dc <DIO_SetPinLevel>
        DIO_SetPinLevel(SSD_PIN_E, DIO_LOW);
    297e:	82 e0       	ldi	r24, 0x02	; 2
    2980:	64 e0       	ldi	r22, 0x04	; 4
    2982:	40 e0       	ldi	r20, 0x00	; 0
    2984:	0e 94 ee 09 	call	0x13dc	; 0x13dc <DIO_SetPinLevel>
        DIO_SetPinLevel(SSD_PIN_F, DIO_LOW);
    2988:	82 e0       	ldi	r24, 0x02	; 2
    298a:	65 e0       	ldi	r22, 0x05	; 5
    298c:	40 e0       	ldi	r20, 0x00	; 0
    298e:	0e 94 ee 09 	call	0x13dc	; 0x13dc <DIO_SetPinLevel>
        DIO_SetPinLevel(SSD_PIN_G, DIO_LOW);
    2992:	82 e0       	ldi	r24, 0x02	; 2
    2994:	66 e0       	ldi	r22, 0x06	; 6
    2996:	40 e0       	ldi	r20, 0x00	; 0
    2998:	0e 94 ee 09 	call	0x13dc	; 0x13dc <DIO_SetPinLevel>
    299c:	6b c0       	rjmp	.+214    	; 0x2a74 <SSD_Write+0x3c8>
    #endif

        break;
    case SSD_NUMBER_8: // 0b01111111
    #if SSD_TYPE == COMM_CATHODE
        DIO_SetPinLevel(SSD_PIN_A, DIO_HIGH);
    299e:	82 e0       	ldi	r24, 0x02	; 2
    29a0:	60 e0       	ldi	r22, 0x00	; 0
    29a2:	41 e0       	ldi	r20, 0x01	; 1
    29a4:	0e 94 ee 09 	call	0x13dc	; 0x13dc <DIO_SetPinLevel>
        DIO_SetPinLevel(SSD_PIN_B, DIO_HIGH);
    29a8:	82 e0       	ldi	r24, 0x02	; 2
    29aa:	61 e0       	ldi	r22, 0x01	; 1
    29ac:	41 e0       	ldi	r20, 0x01	; 1
    29ae:	0e 94 ee 09 	call	0x13dc	; 0x13dc <DIO_SetPinLevel>
        DIO_SetPinLevel(SSD_PIN_C, DIO_HIGH);
    29b2:	82 e0       	ldi	r24, 0x02	; 2
    29b4:	62 e0       	ldi	r22, 0x02	; 2
    29b6:	41 e0       	ldi	r20, 0x01	; 1
    29b8:	0e 94 ee 09 	call	0x13dc	; 0x13dc <DIO_SetPinLevel>
        DIO_SetPinLevel(SSD_PIN_D, DIO_HIGH);
    29bc:	82 e0       	ldi	r24, 0x02	; 2
    29be:	63 e0       	ldi	r22, 0x03	; 3
    29c0:	41 e0       	ldi	r20, 0x01	; 1
    29c2:	0e 94 ee 09 	call	0x13dc	; 0x13dc <DIO_SetPinLevel>
        DIO_SetPinLevel(SSD_PIN_E, DIO_HIGH);
    29c6:	82 e0       	ldi	r24, 0x02	; 2
    29c8:	64 e0       	ldi	r22, 0x04	; 4
    29ca:	41 e0       	ldi	r20, 0x01	; 1
    29cc:	0e 94 ee 09 	call	0x13dc	; 0x13dc <DIO_SetPinLevel>
        DIO_SetPinLevel(SSD_PIN_F, DIO_HIGH);
    29d0:	82 e0       	ldi	r24, 0x02	; 2
    29d2:	65 e0       	ldi	r22, 0x05	; 5
    29d4:	41 e0       	ldi	r20, 0x01	; 1
    29d6:	0e 94 ee 09 	call	0x13dc	; 0x13dc <DIO_SetPinLevel>
        DIO_SetPinLevel(SSD_PIN_G, DIO_HIGH);
    29da:	82 e0       	ldi	r24, 0x02	; 2
    29dc:	66 e0       	ldi	r22, 0x06	; 6
    29de:	41 e0       	ldi	r20, 0x01	; 1
    29e0:	0e 94 ee 09 	call	0x13dc	; 0x13dc <DIO_SetPinLevel>
    29e4:	47 c0       	rjmp	.+142    	; 0x2a74 <SSD_Write+0x3c8>
    #endif

        break;
    case SSD_NUMBER_9: // 0b01101111
    #if SSD_TYPE == COMM_CATHODE
        DIO_SetPinLevel(SSD_PIN_A, DIO_HIGH);
    29e6:	82 e0       	ldi	r24, 0x02	; 2
    29e8:	60 e0       	ldi	r22, 0x00	; 0
    29ea:	41 e0       	ldi	r20, 0x01	; 1
    29ec:	0e 94 ee 09 	call	0x13dc	; 0x13dc <DIO_SetPinLevel>
        DIO_SetPinLevel(SSD_PIN_B, DIO_HIGH);
    29f0:	82 e0       	ldi	r24, 0x02	; 2
    29f2:	61 e0       	ldi	r22, 0x01	; 1
    29f4:	41 e0       	ldi	r20, 0x01	; 1
    29f6:	0e 94 ee 09 	call	0x13dc	; 0x13dc <DIO_SetPinLevel>
        DIO_SetPinLevel(SSD_PIN_C, DIO_HIGH);
    29fa:	82 e0       	ldi	r24, 0x02	; 2
    29fc:	62 e0       	ldi	r22, 0x02	; 2
    29fe:	41 e0       	ldi	r20, 0x01	; 1
    2a00:	0e 94 ee 09 	call	0x13dc	; 0x13dc <DIO_SetPinLevel>
        DIO_SetPinLevel(SSD_PIN_D, DIO_HIGH);
    2a04:	82 e0       	ldi	r24, 0x02	; 2
    2a06:	63 e0       	ldi	r22, 0x03	; 3
    2a08:	41 e0       	ldi	r20, 0x01	; 1
    2a0a:	0e 94 ee 09 	call	0x13dc	; 0x13dc <DIO_SetPinLevel>
        DIO_SetPinLevel(SSD_PIN_E, DIO_LOW);
    2a0e:	82 e0       	ldi	r24, 0x02	; 2
    2a10:	64 e0       	ldi	r22, 0x04	; 4
    2a12:	40 e0       	ldi	r20, 0x00	; 0
    2a14:	0e 94 ee 09 	call	0x13dc	; 0x13dc <DIO_SetPinLevel>
        DIO_SetPinLevel(SSD_PIN_F, DIO_HIGH);
    2a18:	82 e0       	ldi	r24, 0x02	; 2
    2a1a:	65 e0       	ldi	r22, 0x05	; 5
    2a1c:	41 e0       	ldi	r20, 0x01	; 1
    2a1e:	0e 94 ee 09 	call	0x13dc	; 0x13dc <DIO_SetPinLevel>
        DIO_SetPinLevel(SSD_PIN_G, DIO_HIGH);
    2a22:	82 e0       	ldi	r24, 0x02	; 2
    2a24:	66 e0       	ldi	r22, 0x06	; 6
    2a26:	41 e0       	ldi	r20, 0x01	; 1
    2a28:	0e 94 ee 09 	call	0x13dc	; 0x13dc <DIO_SetPinLevel>
    2a2c:	23 c0       	rjmp	.+70     	; 0x2a74 <SSD_Write+0x3c8>
        break;

    case SSD_OFF:
    default:
    #if SSD_TYPE == COMM_CATHODE
        DIO_SetPinLevel(SSD_PIN_A, DIO_LOW);
    2a2e:	82 e0       	ldi	r24, 0x02	; 2
    2a30:	60 e0       	ldi	r22, 0x00	; 0
    2a32:	40 e0       	ldi	r20, 0x00	; 0
    2a34:	0e 94 ee 09 	call	0x13dc	; 0x13dc <DIO_SetPinLevel>
        DIO_SetPinLevel(SSD_PIN_B, DIO_LOW);
    2a38:	82 e0       	ldi	r24, 0x02	; 2
    2a3a:	61 e0       	ldi	r22, 0x01	; 1
    2a3c:	40 e0       	ldi	r20, 0x00	; 0
    2a3e:	0e 94 ee 09 	call	0x13dc	; 0x13dc <DIO_SetPinLevel>
        DIO_SetPinLevel(SSD_PIN_C, DIO_LOW);
    2a42:	82 e0       	ldi	r24, 0x02	; 2
    2a44:	62 e0       	ldi	r22, 0x02	; 2
    2a46:	40 e0       	ldi	r20, 0x00	; 0
    2a48:	0e 94 ee 09 	call	0x13dc	; 0x13dc <DIO_SetPinLevel>
        DIO_SetPinLevel(SSD_PIN_D, DIO_LOW);
    2a4c:	82 e0       	ldi	r24, 0x02	; 2
    2a4e:	63 e0       	ldi	r22, 0x03	; 3
    2a50:	40 e0       	ldi	r20, 0x00	; 0
    2a52:	0e 94 ee 09 	call	0x13dc	; 0x13dc <DIO_SetPinLevel>
        DIO_SetPinLevel(SSD_PIN_E, DIO_LOW);
    2a56:	82 e0       	ldi	r24, 0x02	; 2
    2a58:	64 e0       	ldi	r22, 0x04	; 4
    2a5a:	40 e0       	ldi	r20, 0x00	; 0
    2a5c:	0e 94 ee 09 	call	0x13dc	; 0x13dc <DIO_SetPinLevel>
        DIO_SetPinLevel(SSD_PIN_F, DIO_LOW);
    2a60:	82 e0       	ldi	r24, 0x02	; 2
    2a62:	65 e0       	ldi	r22, 0x05	; 5
    2a64:	40 e0       	ldi	r20, 0x00	; 0
    2a66:	0e 94 ee 09 	call	0x13dc	; 0x13dc <DIO_SetPinLevel>
        DIO_SetPinLevel(SSD_PIN_G, DIO_LOW);
    2a6a:	82 e0       	ldi	r24, 0x02	; 2
    2a6c:	66 e0       	ldi	r22, 0x06	; 6
    2a6e:	40 e0       	ldi	r20, 0x00	; 0
    2a70:	0e 94 ee 09 	call	0x13dc	; 0x13dc <DIO_SetPinLevel>
    #else
        #error "Invalid SSD Type"
    #endif
        break;
    }
}
    2a74:	0f 90       	pop	r0
    2a76:	0f 90       	pop	r0
    2a78:	0f 90       	pop	r0
    2a7a:	cf 91       	pop	r28
    2a7c:	df 91       	pop	r29
    2a7e:	08 95       	ret

00002a80 <INT0_Handler>:
void keypad();
u8 Check_IS_NOtANumber (Keypad_ButtonType pressed_button );
void interrupt();
u8 i;

void INT0_Handler (void) {
    2a80:	df 93       	push	r29
    2a82:	cf 93       	push	r28
    2a84:	cd b7       	in	r28, 0x3d	; 61
    2a86:	de b7       	in	r29, 0x3e	; 62
	i = 0;
    2a88:	10 92 84 00 	sts	0x0084, r1
}
    2a8c:	cf 91       	pop	r28
    2a8e:	df 91       	pop	r29
    2a90:	08 95       	ret

00002a92 <INT1_Handler>:
void INT1_Handler (void) {
    2a92:	df 93       	push	r29
    2a94:	cf 93       	push	r28
    2a96:	cd b7       	in	r28, 0x3d	; 61
    2a98:	de b7       	in	r29, 0x3e	; 62
	DIO_SetPinLevel(DIO_PORTD,DIO_PIN4,DIO_HIGH);
    2a9a:	83 e0       	ldi	r24, 0x03	; 3
    2a9c:	64 e0       	ldi	r22, 0x04	; 4
    2a9e:	41 e0       	ldi	r20, 0x01	; 1
    2aa0:	0e 94 ee 09 	call	0x13dc	; 0x13dc <DIO_SetPinLevel>
}
    2aa4:	cf 91       	pop	r28
    2aa6:	df 91       	pop	r29
    2aa8:	08 95       	ret

00002aaa <INT2_Handler>:
void INT2_Handler (void) {
    2aaa:	df 93       	push	r29
    2aac:	cf 93       	push	r28
    2aae:	cd b7       	in	r28, 0x3d	; 61
    2ab0:	de b7       	in	r29, 0x3e	; 62
	DIO_SetPinLevel(DIO_PORTD,DIO_PIN5,DIO_HIGH);
    2ab2:	83 e0       	ldi	r24, 0x03	; 3
    2ab4:	65 e0       	ldi	r22, 0x05	; 5
    2ab6:	41 e0       	ldi	r20, 0x01	; 1
    2ab8:	0e 94 ee 09 	call	0x13dc	; 0x13dc <DIO_SetPinLevel>
}
    2abc:	cf 91       	pop	r28
    2abe:	df 91       	pop	r29
    2ac0:	08 95       	ret

00002ac2 <main>:
int main(void)
{
    2ac2:	df 93       	push	r29
    2ac4:	cf 93       	push	r28
    2ac6:	cd b7       	in	r28, 0x3d	; 61
    2ac8:	de b7       	in	r29, 0x3e	; 62


	interrupt();
    2aca:	0e 94 6c 15 	call	0x2ad8	; 0x2ad8 <interrupt>
    2ace:	80 e0       	ldi	r24, 0x00	; 0
    2ad0:	90 e0       	ldi	r25, 0x00	; 0
    //     else if(DIO_ReadPinLevel(DIO_PORTA,DIO_PIN1)==DIO_LOW){
    //         //DIO_SetPinLevel(DIO_PORTA,DIO_PIN2,DIO_LOW);
    //         countdown();
    //     }
    // }
}
    2ad2:	cf 91       	pop	r28
    2ad4:	df 91       	pop	r29
    2ad6:	08 95       	ret

00002ad8 <interrupt>:
void interrupt(){
    2ad8:	df 93       	push	r29
    2ada:	cf 93       	push	r28
    2adc:	cd b7       	in	r28, 0x3d	; 61
    2ade:	de b7       	in	r29, 0x3e	; 62
    2ae0:	2e 97       	sbiw	r28, 0x0e	; 14
    2ae2:	0f b6       	in	r0, 0x3f	; 63
    2ae4:	f8 94       	cli
    2ae6:	de bf       	out	0x3e, r29	; 62
    2ae8:	0f be       	out	0x3f, r0	; 63
    2aea:	cd bf       	out	0x3d, r28	; 61
  //  DIO_SetPinLevel(DIO_PORTD,DIO_PIN3,DIO_HIGH);
	    DIO_SetPinMode(DIO_PORTD, DIO_PIN2, DIO_INPUT_PULLUP); // INT0
    2aec:	83 e0       	ldi	r24, 0x03	; 3
    2aee:	62 e0       	ldi	r22, 0x02	; 2
    2af0:	41 e0       	ldi	r20, 0x01	; 1
    2af2:	0e 94 e0 06 	call	0xdc0	; 0xdc0 <DIO_SetPinMode>
        DIO_SetPinMode(DIO_PORTD, DIO_PIN3, DIO_INPUT_PULLUP); // INT0
    2af6:	83 e0       	ldi	r24, 0x03	; 3
    2af8:	63 e0       	ldi	r22, 0x03	; 3
    2afa:	41 e0       	ldi	r20, 0x01	; 1
    2afc:	0e 94 e0 06 	call	0xdc0	; 0xdc0 <DIO_SetPinMode>
        DIO_SetPinMode(DIO_PORTB, DIO_PIN2, DIO_INPUT_PULLUP); // INT0
    2b00:	81 e0       	ldi	r24, 0x01	; 1
    2b02:	62 e0       	ldi	r22, 0x02	; 2
    2b04:	41 e0       	ldi	r20, 0x01	; 1
    2b06:	0e 94 e0 06 	call	0xdc0	; 0xdc0 <DIO_SetPinMode>
        DIO_SetPinMode(DIO_PORTD, DIO_PIN4, DIO_OUTPUT);
    2b0a:	83 e0       	ldi	r24, 0x03	; 3
    2b0c:	64 e0       	ldi	r22, 0x04	; 4
    2b0e:	42 e0       	ldi	r20, 0x02	; 2
    2b10:	0e 94 e0 06 	call	0xdc0	; 0xdc0 <DIO_SetPinMode>
        DIO_SetPinMode(DIO_PORTD, DIO_PIN5, DIO_OUTPUT);
    2b14:	83 e0       	ldi	r24, 0x03	; 3
    2b16:	65 e0       	ldi	r22, 0x05	; 5
    2b18:	42 e0       	ldi	r20, 0x02	; 2
    2b1a:	0e 94 e0 06 	call	0xdc0	; 0xdc0 <DIO_SetPinMode>
        SSD_Init();
    2b1e:	0e 94 2c 13 	call	0x2658	; 0x2658 <SSD_Init>
		ExtInterrupt_SetINT0Callback(INT0_Handler);
    2b22:	80 e4       	ldi	r24, 0x40	; 64
    2b24:	95 e1       	ldi	r25, 0x15	; 21
    2b26:	0e 94 5d 0d 	call	0x1aba	; 0x1aba <ExtInterrupt_SetINT0Callback>
        ExtInterrupt_SetINT1Callback(INT1_Handler);
    2b2a:	89 e4       	ldi	r24, 0x49	; 73
    2b2c:	95 e1       	ldi	r25, 0x15	; 21
    2b2e:	0e 94 6f 0d 	call	0x1ade	; 0x1ade <ExtInterrupt_SetINT1Callback>
        ExtInterrupt_SetINT2Callback(INT2_Handler);
    2b32:	85 e5       	ldi	r24, 0x55	; 85
    2b34:	95 e1       	ldi	r25, 0x15	; 21
    2b36:	0e 94 81 0d 	call	0x1b02	; 0x1b02 <ExtInterrupt_SetINT2Callback>
		ExtInterrupt_Init();
    2b3a:	0e 94 1c 0d 	call	0x1a38	; 0x1a38 <ExtInterrupt_Init>
		while (1)
		{
			for (i=0; i<10; i++)
    2b3e:	10 92 84 00 	sts	0x0084, r1
    2b42:	7b c0       	rjmp	.+246    	; 0x2c3a <interrupt+0x162>
			{
				SSD_Write(i);
    2b44:	80 91 84 00 	lds	r24, 0x0084
    2b48:	0e 94 56 13 	call	0x26ac	; 0x26ac <SSD_Write>
    2b4c:	80 e0       	ldi	r24, 0x00	; 0
    2b4e:	90 e0       	ldi	r25, 0x00	; 0
    2b50:	aa ef       	ldi	r26, 0xFA	; 250
    2b52:	b3 e4       	ldi	r27, 0x43	; 67
    2b54:	8b 87       	std	Y+11, r24	; 0x0b
    2b56:	9c 87       	std	Y+12, r25	; 0x0c
    2b58:	ad 87       	std	Y+13, r26	; 0x0d
    2b5a:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    2b5c:	6b 85       	ldd	r22, Y+11	; 0x0b
    2b5e:	7c 85       	ldd	r23, Y+12	; 0x0c
    2b60:	8d 85       	ldd	r24, Y+13	; 0x0d
    2b62:	9e 85       	ldd	r25, Y+14	; 0x0e
    2b64:	20 e0       	ldi	r18, 0x00	; 0
    2b66:	30 e0       	ldi	r19, 0x00	; 0
    2b68:	4a ef       	ldi	r20, 0xFA	; 250
    2b6a:	54 e4       	ldi	r21, 0x44	; 68
    2b6c:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2b70:	dc 01       	movw	r26, r24
    2b72:	cb 01       	movw	r24, r22
    2b74:	8f 83       	std	Y+7, r24	; 0x07
    2b76:	98 87       	std	Y+8, r25	; 0x08
    2b78:	a9 87       	std	Y+9, r26	; 0x09
    2b7a:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    2b7c:	6f 81       	ldd	r22, Y+7	; 0x07
    2b7e:	78 85       	ldd	r23, Y+8	; 0x08
    2b80:	89 85       	ldd	r24, Y+9	; 0x09
    2b82:	9a 85       	ldd	r25, Y+10	; 0x0a
    2b84:	20 e0       	ldi	r18, 0x00	; 0
    2b86:	30 e0       	ldi	r19, 0x00	; 0
    2b88:	40 e8       	ldi	r20, 0x80	; 128
    2b8a:	5f e3       	ldi	r21, 0x3F	; 63
    2b8c:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    2b90:	88 23       	and	r24, r24
    2b92:	2c f4       	brge	.+10     	; 0x2b9e <interrupt+0xc6>
		__ticks = 1;
    2b94:	81 e0       	ldi	r24, 0x01	; 1
    2b96:	90 e0       	ldi	r25, 0x00	; 0
    2b98:	9e 83       	std	Y+6, r25	; 0x06
    2b9a:	8d 83       	std	Y+5, r24	; 0x05
    2b9c:	3f c0       	rjmp	.+126    	; 0x2c1c <interrupt+0x144>
	else if (__tmp > 65535)
    2b9e:	6f 81       	ldd	r22, Y+7	; 0x07
    2ba0:	78 85       	ldd	r23, Y+8	; 0x08
    2ba2:	89 85       	ldd	r24, Y+9	; 0x09
    2ba4:	9a 85       	ldd	r25, Y+10	; 0x0a
    2ba6:	20 e0       	ldi	r18, 0x00	; 0
    2ba8:	3f ef       	ldi	r19, 0xFF	; 255
    2baa:	4f e7       	ldi	r20, 0x7F	; 127
    2bac:	57 e4       	ldi	r21, 0x47	; 71
    2bae:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    2bb2:	18 16       	cp	r1, r24
    2bb4:	4c f5       	brge	.+82     	; 0x2c08 <interrupt+0x130>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    2bb6:	6b 85       	ldd	r22, Y+11	; 0x0b
    2bb8:	7c 85       	ldd	r23, Y+12	; 0x0c
    2bba:	8d 85       	ldd	r24, Y+13	; 0x0d
    2bbc:	9e 85       	ldd	r25, Y+14	; 0x0e
    2bbe:	20 e0       	ldi	r18, 0x00	; 0
    2bc0:	30 e0       	ldi	r19, 0x00	; 0
    2bc2:	40 e2       	ldi	r20, 0x20	; 32
    2bc4:	51 e4       	ldi	r21, 0x41	; 65
    2bc6:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2bca:	dc 01       	movw	r26, r24
    2bcc:	cb 01       	movw	r24, r22
    2bce:	bc 01       	movw	r22, r24
    2bd0:	cd 01       	movw	r24, r26
    2bd2:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2bd6:	dc 01       	movw	r26, r24
    2bd8:	cb 01       	movw	r24, r22
    2bda:	9e 83       	std	Y+6, r25	; 0x06
    2bdc:	8d 83       	std	Y+5, r24	; 0x05
    2bde:	0f c0       	rjmp	.+30     	; 0x2bfe <interrupt+0x126>
    2be0:	88 ec       	ldi	r24, 0xC8	; 200
    2be2:	90 e0       	ldi	r25, 0x00	; 0
    2be4:	9c 83       	std	Y+4, r25	; 0x04
    2be6:	8b 83       	std	Y+3, r24	; 0x03
    2be8:	8b 81       	ldd	r24, Y+3	; 0x03
    2bea:	9c 81       	ldd	r25, Y+4	; 0x04
    2bec:	01 97       	sbiw	r24, 0x01	; 1
    2bee:	f1 f7       	brne	.-4      	; 0x2bec <interrupt+0x114>
    2bf0:	9c 83       	std	Y+4, r25	; 0x04
    2bf2:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    2bf4:	8d 81       	ldd	r24, Y+5	; 0x05
    2bf6:	9e 81       	ldd	r25, Y+6	; 0x06
    2bf8:	01 97       	sbiw	r24, 0x01	; 1
    2bfa:	9e 83       	std	Y+6, r25	; 0x06
    2bfc:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    2bfe:	8d 81       	ldd	r24, Y+5	; 0x05
    2c00:	9e 81       	ldd	r25, Y+6	; 0x06
    2c02:	00 97       	sbiw	r24, 0x00	; 0
    2c04:	69 f7       	brne	.-38     	; 0x2be0 <interrupt+0x108>
    2c06:	14 c0       	rjmp	.+40     	; 0x2c30 <interrupt+0x158>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    2c08:	6f 81       	ldd	r22, Y+7	; 0x07
    2c0a:	78 85       	ldd	r23, Y+8	; 0x08
    2c0c:	89 85       	ldd	r24, Y+9	; 0x09
    2c0e:	9a 85       	ldd	r25, Y+10	; 0x0a
    2c10:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2c14:	dc 01       	movw	r26, r24
    2c16:	cb 01       	movw	r24, r22
    2c18:	9e 83       	std	Y+6, r25	; 0x06
    2c1a:	8d 83       	std	Y+5, r24	; 0x05
    2c1c:	8d 81       	ldd	r24, Y+5	; 0x05
    2c1e:	9e 81       	ldd	r25, Y+6	; 0x06
    2c20:	9a 83       	std	Y+2, r25	; 0x02
    2c22:	89 83       	std	Y+1, r24	; 0x01
    2c24:	89 81       	ldd	r24, Y+1	; 0x01
    2c26:	9a 81       	ldd	r25, Y+2	; 0x02
    2c28:	01 97       	sbiw	r24, 0x01	; 1
    2c2a:	f1 f7       	brne	.-4      	; 0x2c28 <interrupt+0x150>
    2c2c:	9a 83       	std	Y+2, r25	; 0x02
    2c2e:	89 83       	std	Y+1, r24	; 0x01
        ExtInterrupt_SetINT1Callback(INT1_Handler);
        ExtInterrupt_SetINT2Callback(INT2_Handler);
		ExtInterrupt_Init();
		while (1)
		{
			for (i=0; i<10; i++)
    2c30:	80 91 84 00 	lds	r24, 0x0084
    2c34:	8f 5f       	subi	r24, 0xFF	; 255
    2c36:	80 93 84 00 	sts	0x0084, r24
    2c3a:	80 91 84 00 	lds	r24, 0x0084
    2c3e:	8a 30       	cpi	r24, 0x0A	; 10
    2c40:	08 f4       	brcc	.+2      	; 0x2c44 <interrupt+0x16c>
    2c42:	80 cf       	rjmp	.-256    	; 0x2b44 <interrupt+0x6c>
    2c44:	7c cf       	rjmp	.-264    	; 0x2b3e <interrupt+0x66>

00002c46 <calmuldiv>:
				_delay_ms(500);
			}
		}
}
void calmuldiv(s32 arr [],u8 x)
{////////// 1111 + 2 + 3 + 5 ///////6  // 1+2+6*2*2+5*2
    2c46:	0f 93       	push	r16
    2c48:	1f 93       	push	r17
    2c4a:	df 93       	push	r29
    2c4c:	cf 93       	push	r28
    2c4e:	cd b7       	in	r28, 0x3d	; 61
    2c50:	de b7       	in	r29, 0x3e	; 62
    2c52:	e7 97       	sbiw	r28, 0x37	; 55
    2c54:	0f b6       	in	r0, 0x3f	; 63
    2c56:	f8 94       	cli
    2c58:	de bf       	out	0x3e, r29	; 62
    2c5a:	0f be       	out	0x3f, r0	; 63
    2c5c:	cd bf       	out	0x3d, r28	; 61
    2c5e:	9a ab       	std	Y+50, r25	; 0x32
    2c60:	89 ab       	std	Y+49, r24	; 0x31
    2c62:	6b ab       	std	Y+51, r22	; 0x33
   /// 1 + 2 + 3
  // s32 arr[20]={1,'+',2,'+',3};
  //LCD_Clear();
   //x=5;
    s32 arr2[20];
    int c=0;
    2c64:	18 86       	std	Y+8, r1	; 0x08
    2c66:	1f 82       	std	Y+7, r1	; 0x07
    int divzerr=0;
    2c68:	1e 82       	std	Y+6, r1	; 0x06
    2c6a:	1d 82       	std	Y+5, r1	; 0x05
    s32 m=0;
    2c6c:	1c 82       	std	Y+4, r1	; 0x04
    2c6e:	1b 82       	std	Y+3, r1	; 0x03
    for (u8 i = 1; i < x+1; i+=2)
    2c70:	81 e0       	ldi	r24, 0x01	; 1
    2c72:	8a 83       	std	Y+2, r24	; 0x02
    2c74:	fb c0       	rjmp	.+502    	; 0x2e6c <calmuldiv+0x226>
    {
        //LCD_DisplayNumber(arr[i]);
        switch (arr[i])
    2c76:	8a 81       	ldd	r24, Y+2	; 0x02
    2c78:	88 2f       	mov	r24, r24
    2c7a:	90 e0       	ldi	r25, 0x00	; 0
    2c7c:	9c 01       	movw	r18, r24
    2c7e:	22 0f       	add	r18, r18
    2c80:	33 1f       	adc	r19, r19
    2c82:	89 a9       	ldd	r24, Y+49	; 0x31
    2c84:	9a a9       	ldd	r25, Y+50	; 0x32
    2c86:	fc 01       	movw	r30, r24
    2c88:	e2 0f       	add	r30, r18
    2c8a:	f3 1f       	adc	r31, r19
    2c8c:	20 81       	ld	r18, Z
    2c8e:	31 81       	ldd	r19, Z+1	; 0x01
    2c90:	3f ab       	std	Y+55, r19	; 0x37
    2c92:	2e ab       	std	Y+54, r18	; 0x36
    2c94:	8e a9       	ldd	r24, Y+54	; 0x36
    2c96:	9f a9       	ldd	r25, Y+55	; 0x37
    2c98:	8a 32       	cpi	r24, 0x2A	; 42
    2c9a:	91 05       	cpc	r25, r1
    2c9c:	39 f0       	breq	.+14     	; 0x2cac <calmuldiv+0x66>
    2c9e:	ee a9       	ldd	r30, Y+54	; 0x36
    2ca0:	ff a9       	ldd	r31, Y+55	; 0x37
    2ca2:	ef 32       	cpi	r30, 0x2F	; 47
    2ca4:	f1 05       	cpc	r31, r1
    2ca6:	09 f4       	brne	.+2      	; 0x2caa <calmuldiv+0x64>
    2ca8:	4b c0       	rjmp	.+150    	; 0x2d40 <calmuldiv+0xfa>
    2caa:	96 c0       	rjmp	.+300    	; 0x2dd8 <calmuldiv+0x192>
        {
            case '*':
            arr[i+1]=arr[i-1]*arr[i+1];
    2cac:	8a 81       	ldd	r24, Y+2	; 0x02
    2cae:	88 2f       	mov	r24, r24
    2cb0:	90 e0       	ldi	r25, 0x00	; 0
    2cb2:	01 96       	adiw	r24, 0x01	; 1
    2cb4:	9c 01       	movw	r18, r24
    2cb6:	22 0f       	add	r18, r18
    2cb8:	33 1f       	adc	r19, r19
    2cba:	89 a9       	ldd	r24, Y+49	; 0x31
    2cbc:	9a a9       	ldd	r25, Y+50	; 0x32
    2cbe:	dc 01       	movw	r26, r24
    2cc0:	a2 0f       	add	r26, r18
    2cc2:	b3 1f       	adc	r27, r19
    2cc4:	8a 81       	ldd	r24, Y+2	; 0x02
    2cc6:	28 2f       	mov	r18, r24
    2cc8:	30 e0       	ldi	r19, 0x00	; 0
    2cca:	81 e0       	ldi	r24, 0x01	; 1
    2ccc:	90 e0       	ldi	r25, 0x00	; 0
    2cce:	82 1b       	sub	r24, r18
    2cd0:	93 0b       	sbc	r25, r19
    2cd2:	88 0f       	add	r24, r24
    2cd4:	99 1f       	adc	r25, r25
    2cd6:	22 27       	eor	r18, r18
    2cd8:	33 27       	eor	r19, r19
    2cda:	28 1b       	sub	r18, r24
    2cdc:	39 0b       	sbc	r19, r25
    2cde:	89 a9       	ldd	r24, Y+49	; 0x31
    2ce0:	9a a9       	ldd	r25, Y+50	; 0x32
    2ce2:	fc 01       	movw	r30, r24
    2ce4:	e2 0f       	add	r30, r18
    2ce6:	f3 1f       	adc	r31, r19
    2ce8:	40 81       	ld	r20, Z
    2cea:	51 81       	ldd	r21, Z+1	; 0x01
    2cec:	8a 81       	ldd	r24, Y+2	; 0x02
    2cee:	88 2f       	mov	r24, r24
    2cf0:	90 e0       	ldi	r25, 0x00	; 0
    2cf2:	01 96       	adiw	r24, 0x01	; 1
    2cf4:	9c 01       	movw	r18, r24
    2cf6:	22 0f       	add	r18, r18
    2cf8:	33 1f       	adc	r19, r19
    2cfa:	89 a9       	ldd	r24, Y+49	; 0x31
    2cfc:	9a a9       	ldd	r25, Y+50	; 0x32
    2cfe:	fc 01       	movw	r30, r24
    2d00:	e2 0f       	add	r30, r18
    2d02:	f3 1f       	adc	r31, r19
    2d04:	80 81       	ld	r24, Z
    2d06:	91 81       	ldd	r25, Z+1	; 0x01
    2d08:	9c 01       	movw	r18, r24
    2d0a:	42 9f       	mul	r20, r18
    2d0c:	c0 01       	movw	r24, r0
    2d0e:	43 9f       	mul	r20, r19
    2d10:	90 0d       	add	r25, r0
    2d12:	52 9f       	mul	r21, r18
    2d14:	90 0d       	add	r25, r0
    2d16:	11 24       	eor	r1, r1
    2d18:	11 96       	adiw	r26, 0x01	; 1
    2d1a:	9c 93       	st	X, r25
    2d1c:	8e 93       	st	-X, r24
            m=arr[i+1];
    2d1e:	8a 81       	ldd	r24, Y+2	; 0x02
    2d20:	88 2f       	mov	r24, r24
    2d22:	90 e0       	ldi	r25, 0x00	; 0
    2d24:	01 96       	adiw	r24, 0x01	; 1
    2d26:	9c 01       	movw	r18, r24
    2d28:	22 0f       	add	r18, r18
    2d2a:	33 1f       	adc	r19, r19
    2d2c:	89 a9       	ldd	r24, Y+49	; 0x31
    2d2e:	9a a9       	ldd	r25, Y+50	; 0x32
    2d30:	fc 01       	movw	r30, r24
    2d32:	e2 0f       	add	r30, r18
    2d34:	f3 1f       	adc	r31, r19
    2d36:	80 81       	ld	r24, Z
    2d38:	91 81       	ldd	r25, Z+1	; 0x01
    2d3a:	9c 83       	std	Y+4, r25	; 0x04
    2d3c:	8b 83       	std	Y+3, r24	; 0x03
    2d3e:	8f c0       	rjmp	.+286    	; 0x2e5e <calmuldiv+0x218>
            break;
            case '/':
            if(arr[i+1]==0)
    2d40:	8a 81       	ldd	r24, Y+2	; 0x02
    2d42:	88 2f       	mov	r24, r24
    2d44:	90 e0       	ldi	r25, 0x00	; 0
    2d46:	01 96       	adiw	r24, 0x01	; 1
    2d48:	9c 01       	movw	r18, r24
    2d4a:	22 0f       	add	r18, r18
    2d4c:	33 1f       	adc	r19, r19
    2d4e:	89 a9       	ldd	r24, Y+49	; 0x31
    2d50:	9a a9       	ldd	r25, Y+50	; 0x32
    2d52:	fc 01       	movw	r30, r24
    2d54:	e2 0f       	add	r30, r18
    2d56:	f3 1f       	adc	r31, r19
    2d58:	80 81       	ld	r24, Z
    2d5a:	91 81       	ldd	r25, Z+1	; 0x01
    2d5c:	00 97       	sbiw	r24, 0x00	; 0
    2d5e:	29 f4       	brne	.+10     	; 0x2d6a <calmuldiv+0x124>
                {divzerr=1;
    2d60:	81 e0       	ldi	r24, 0x01	; 1
    2d62:	90 e0       	ldi	r25, 0x00	; 0
    2d64:	9e 83       	std	Y+6, r25	; 0x06
    2d66:	8d 83       	std	Y+5, r24	; 0x05
    2d68:	7a c0       	rjmp	.+244    	; 0x2e5e <calmuldiv+0x218>
                break;
                }
            arr[i+1]=arr[i-1]/arr[i+1];
    2d6a:	8a 81       	ldd	r24, Y+2	; 0x02
    2d6c:	88 2f       	mov	r24, r24
    2d6e:	90 e0       	ldi	r25, 0x00	; 0
    2d70:	01 96       	adiw	r24, 0x01	; 1
    2d72:	9c 01       	movw	r18, r24
    2d74:	22 0f       	add	r18, r18
    2d76:	33 1f       	adc	r19, r19
    2d78:	89 a9       	ldd	r24, Y+49	; 0x31
    2d7a:	9a a9       	ldd	r25, Y+50	; 0x32
    2d7c:	8c 01       	movw	r16, r24
    2d7e:	02 0f       	add	r16, r18
    2d80:	13 1f       	adc	r17, r19
    2d82:	8a 81       	ldd	r24, Y+2	; 0x02
    2d84:	28 2f       	mov	r18, r24
    2d86:	30 e0       	ldi	r19, 0x00	; 0
    2d88:	81 e0       	ldi	r24, 0x01	; 1
    2d8a:	90 e0       	ldi	r25, 0x00	; 0
    2d8c:	82 1b       	sub	r24, r18
    2d8e:	93 0b       	sbc	r25, r19
    2d90:	88 0f       	add	r24, r24
    2d92:	99 1f       	adc	r25, r25
    2d94:	22 27       	eor	r18, r18
    2d96:	33 27       	eor	r19, r19
    2d98:	28 1b       	sub	r18, r24
    2d9a:	39 0b       	sbc	r19, r25
    2d9c:	89 a9       	ldd	r24, Y+49	; 0x31
    2d9e:	9a a9       	ldd	r25, Y+50	; 0x32
    2da0:	fc 01       	movw	r30, r24
    2da2:	e2 0f       	add	r30, r18
    2da4:	f3 1f       	adc	r31, r19
    2da6:	40 81       	ld	r20, Z
    2da8:	51 81       	ldd	r21, Z+1	; 0x01
    2daa:	8a 81       	ldd	r24, Y+2	; 0x02
    2dac:	88 2f       	mov	r24, r24
    2dae:	90 e0       	ldi	r25, 0x00	; 0
    2db0:	01 96       	adiw	r24, 0x01	; 1
    2db2:	9c 01       	movw	r18, r24
    2db4:	22 0f       	add	r18, r18
    2db6:	33 1f       	adc	r19, r19
    2db8:	89 a9       	ldd	r24, Y+49	; 0x31
    2dba:	9a a9       	ldd	r25, Y+50	; 0x32
    2dbc:	fc 01       	movw	r30, r24
    2dbe:	e2 0f       	add	r30, r18
    2dc0:	f3 1f       	adc	r31, r19
    2dc2:	20 81       	ld	r18, Z
    2dc4:	31 81       	ldd	r19, Z+1	; 0x01
    2dc6:	ca 01       	movw	r24, r20
    2dc8:	b9 01       	movw	r22, r18
    2dca:	0e 94 00 1b 	call	0x3600	; 0x3600 <__divmodhi4>
    2dce:	cb 01       	movw	r24, r22
    2dd0:	f8 01       	movw	r30, r16
    2dd2:	91 83       	std	Z+1, r25	; 0x01
    2dd4:	80 83       	st	Z, r24
    2dd6:	43 c0       	rjmp	.+134    	; 0x2e5e <calmuldiv+0x218>
            
            break;
            default:
            arr2[c]=arr[i-1];
    2dd8:	6f 81       	ldd	r22, Y+7	; 0x07
    2dda:	78 85       	ldd	r23, Y+8	; 0x08
    2ddc:	8a 81       	ldd	r24, Y+2	; 0x02
    2dde:	28 2f       	mov	r18, r24
    2de0:	30 e0       	ldi	r19, 0x00	; 0
    2de2:	81 e0       	ldi	r24, 0x01	; 1
    2de4:	90 e0       	ldi	r25, 0x00	; 0
    2de6:	82 1b       	sub	r24, r18
    2de8:	93 0b       	sbc	r25, r19
    2dea:	88 0f       	add	r24, r24
    2dec:	99 1f       	adc	r25, r25
    2dee:	22 27       	eor	r18, r18
    2df0:	33 27       	eor	r19, r19
    2df2:	28 1b       	sub	r18, r24
    2df4:	39 0b       	sbc	r19, r25
    2df6:	89 a9       	ldd	r24, Y+49	; 0x31
    2df8:	9a a9       	ldd	r25, Y+50	; 0x32
    2dfa:	fc 01       	movw	r30, r24
    2dfc:	e2 0f       	add	r30, r18
    2dfe:	f3 1f       	adc	r31, r19
    2e00:	40 81       	ld	r20, Z
    2e02:	51 81       	ldd	r21, Z+1	; 0x01
    2e04:	9b 01       	movw	r18, r22
    2e06:	22 0f       	add	r18, r18
    2e08:	33 1f       	adc	r19, r19
    2e0a:	ce 01       	movw	r24, r28
    2e0c:	01 96       	adiw	r24, 0x01	; 1
    2e0e:	82 0f       	add	r24, r18
    2e10:	93 1f       	adc	r25, r19
    2e12:	fc 01       	movw	r30, r24
    2e14:	38 96       	adiw	r30, 0x08	; 8
    2e16:	51 83       	std	Z+1, r21	; 0x01
    2e18:	40 83       	st	Z, r20
            arr2[c+1]=arr[i];
    2e1a:	8f 81       	ldd	r24, Y+7	; 0x07
    2e1c:	98 85       	ldd	r25, Y+8	; 0x08
    2e1e:	bc 01       	movw	r22, r24
    2e20:	6f 5f       	subi	r22, 0xFF	; 255
    2e22:	7f 4f       	sbci	r23, 0xFF	; 255
    2e24:	8a 81       	ldd	r24, Y+2	; 0x02
    2e26:	88 2f       	mov	r24, r24
    2e28:	90 e0       	ldi	r25, 0x00	; 0
    2e2a:	9c 01       	movw	r18, r24
    2e2c:	22 0f       	add	r18, r18
    2e2e:	33 1f       	adc	r19, r19
    2e30:	89 a9       	ldd	r24, Y+49	; 0x31
    2e32:	9a a9       	ldd	r25, Y+50	; 0x32
    2e34:	fc 01       	movw	r30, r24
    2e36:	e2 0f       	add	r30, r18
    2e38:	f3 1f       	adc	r31, r19
    2e3a:	40 81       	ld	r20, Z
    2e3c:	51 81       	ldd	r21, Z+1	; 0x01
    2e3e:	9b 01       	movw	r18, r22
    2e40:	22 0f       	add	r18, r18
    2e42:	33 1f       	adc	r19, r19
    2e44:	ce 01       	movw	r24, r28
    2e46:	01 96       	adiw	r24, 0x01	; 1
    2e48:	82 0f       	add	r24, r18
    2e4a:	93 1f       	adc	r25, r19
    2e4c:	fc 01       	movw	r30, r24
    2e4e:	38 96       	adiw	r30, 0x08	; 8
    2e50:	51 83       	std	Z+1, r21	; 0x01
    2e52:	40 83       	st	Z, r20
            c+=2;
    2e54:	8f 81       	ldd	r24, Y+7	; 0x07
    2e56:	98 85       	ldd	r25, Y+8	; 0x08
    2e58:	02 96       	adiw	r24, 0x02	; 2
    2e5a:	98 87       	std	Y+8, r25	; 0x08
    2e5c:	8f 83       	std	Y+7, r24	; 0x07
            break;
        }
        if(divzerr)
    2e5e:	8d 81       	ldd	r24, Y+5	; 0x05
    2e60:	9e 81       	ldd	r25, Y+6	; 0x06
    2e62:	00 97       	sbiw	r24, 0x00	; 0
    2e64:	71 f4       	brne	.+28     	; 0x2e82 <calmuldiv+0x23c>
   //x=5;
    s32 arr2[20];
    int c=0;
    int divzerr=0;
    s32 m=0;
    for (u8 i = 1; i < x+1; i+=2)
    2e66:	8a 81       	ldd	r24, Y+2	; 0x02
    2e68:	8e 5f       	subi	r24, 0xFE	; 254
    2e6a:	8a 83       	std	Y+2, r24	; 0x02
    2e6c:	8a 81       	ldd	r24, Y+2	; 0x02
    2e6e:	28 2f       	mov	r18, r24
    2e70:	30 e0       	ldi	r19, 0x00	; 0
    2e72:	8b a9       	ldd	r24, Y+51	; 0x33
    2e74:	88 2f       	mov	r24, r24
    2e76:	90 e0       	ldi	r25, 0x00	; 0
    2e78:	01 96       	adiw	r24, 0x01	; 1
    2e7a:	28 17       	cp	r18, r24
    2e7c:	39 07       	cpc	r19, r25
    2e7e:	0c f4       	brge	.+2      	; 0x2e82 <calmuldiv+0x23c>
    2e80:	fa ce       	rjmp	.-524    	; 0x2c76 <calmuldiv+0x30>
        }
        if(divzerr)
            break;
        /* code */
    }
    if(!divzerr){
    2e82:	8d 81       	ldd	r24, Y+5	; 0x05
    2e84:	9e 81       	ldd	r25, Y+6	; 0x06
    2e86:	00 97       	sbiw	r24, 0x00	; 0
    2e88:	09 f0       	breq	.+2      	; 0x2e8c <calmuldiv+0x246>
    2e8a:	40 c1       	rjmp	.+640    	; 0x310c <calmuldiv+0x4c6>
   // if(arr[x-1]=='x' || arr[x-1]=='/')
        {
            arr2[c]=arr[x];
    2e8c:	6f 81       	ldd	r22, Y+7	; 0x07
    2e8e:	78 85       	ldd	r23, Y+8	; 0x08
    2e90:	8b a9       	ldd	r24, Y+51	; 0x33
    2e92:	88 2f       	mov	r24, r24
    2e94:	90 e0       	ldi	r25, 0x00	; 0
    2e96:	9c 01       	movw	r18, r24
    2e98:	22 0f       	add	r18, r18
    2e9a:	33 1f       	adc	r19, r19
    2e9c:	89 a9       	ldd	r24, Y+49	; 0x31
    2e9e:	9a a9       	ldd	r25, Y+50	; 0x32
    2ea0:	fc 01       	movw	r30, r24
    2ea2:	e2 0f       	add	r30, r18
    2ea4:	f3 1f       	adc	r31, r19
    2ea6:	40 81       	ld	r20, Z
    2ea8:	51 81       	ldd	r21, Z+1	; 0x01
    2eaa:	9b 01       	movw	r18, r22
    2eac:	22 0f       	add	r18, r18
    2eae:	33 1f       	adc	r19, r19
    2eb0:	ce 01       	movw	r24, r28
    2eb2:	01 96       	adiw	r24, 0x01	; 1
    2eb4:	82 0f       	add	r24, r18
    2eb6:	93 1f       	adc	r25, r19
    2eb8:	fc 01       	movw	r30, r24
    2eba:	38 96       	adiw	r30, 0x08	; 8
    2ebc:	51 83       	std	Z+1, r21	; 0x01
    2ebe:	40 83       	st	Z, r20


        ///////////////////////////////////////
       // _delay_ms(2000);
        //LCD_Clear();
        for (u8 i = 1; i < c+1; i+=2)
    2ec0:	81 e0       	ldi	r24, 0x01	; 1
    2ec2:	89 83       	std	Y+1, r24	; 0x01
    2ec4:	01 c1       	rjmp	.+514    	; 0x30c8 <calmuldiv+0x482>
        {
            //LCD_DisplayNumber(arr[i]);
            switch (arr2[i])
    2ec6:	89 81       	ldd	r24, Y+1	; 0x01
    2ec8:	88 2f       	mov	r24, r24
    2eca:	90 e0       	ldi	r25, 0x00	; 0
    2ecc:	9c 01       	movw	r18, r24
    2ece:	22 0f       	add	r18, r18
    2ed0:	33 1f       	adc	r19, r19
    2ed2:	ce 01       	movw	r24, r28
    2ed4:	01 96       	adiw	r24, 0x01	; 1
    2ed6:	82 0f       	add	r24, r18
    2ed8:	93 1f       	adc	r25, r19
    2eda:	fc 01       	movw	r30, r24
    2edc:	38 96       	adiw	r30, 0x08	; 8
    2ede:	20 81       	ld	r18, Z
    2ee0:	31 81       	ldd	r19, Z+1	; 0x01
    2ee2:	3d ab       	std	Y+53, r19	; 0x35
    2ee4:	2c ab       	std	Y+52, r18	; 0x34
    2ee6:	8c a9       	ldd	r24, Y+52	; 0x34
    2ee8:	9d a9       	ldd	r25, Y+53	; 0x35
    2eea:	8b 32       	cpi	r24, 0x2B	; 43
    2eec:	91 05       	cpc	r25, r1
    2eee:	c1 f0       	breq	.+48     	; 0x2f20 <calmuldiv+0x2da>
    2ef0:	ec a9       	ldd	r30, Y+52	; 0x34
    2ef2:	fd a9       	ldd	r31, Y+53	; 0x35
    2ef4:	ec 32       	cpi	r30, 0x2C	; 44
    2ef6:	f1 05       	cpc	r31, r1
    2ef8:	3c f4       	brge	.+14     	; 0x2f08 <calmuldiv+0x2c2>
    2efa:	2c a9       	ldd	r18, Y+52	; 0x34
    2efc:	3d a9       	ldd	r19, Y+53	; 0x35
    2efe:	2a 32       	cpi	r18, 0x2A	; 42
    2f00:	31 05       	cpc	r19, r1
    2f02:	09 f4       	brne	.+2      	; 0x2f06 <calmuldiv+0x2c0>
    2f04:	71 c0       	rjmp	.+226    	; 0x2fe8 <calmuldiv+0x3a2>
    2f06:	dd c0       	rjmp	.+442    	; 0x30c2 <calmuldiv+0x47c>
    2f08:	8c a9       	ldd	r24, Y+52	; 0x34
    2f0a:	9d a9       	ldd	r25, Y+53	; 0x35
    2f0c:	8d 32       	cpi	r24, 0x2D	; 45
    2f0e:	91 05       	cpc	r25, r1
    2f10:	c9 f1       	breq	.+114    	; 0x2f84 <calmuldiv+0x33e>
    2f12:	ec a9       	ldd	r30, Y+52	; 0x34
    2f14:	fd a9       	ldd	r31, Y+53	; 0x35
    2f16:	ef 32       	cpi	r30, 0x2F	; 47
    2f18:	f1 05       	cpc	r31, r1
    2f1a:	09 f4       	brne	.+2      	; 0x2f1e <calmuldiv+0x2d8>
    2f1c:	9c c0       	rjmp	.+312    	; 0x3056 <calmuldiv+0x410>
    2f1e:	d1 c0       	rjmp	.+418    	; 0x30c2 <calmuldiv+0x47c>
            {
                case '+':
                arr2[i+1]=arr2[i-1]+arr2[i+1];
    2f20:	89 81       	ldd	r24, Y+1	; 0x01
    2f22:	88 2f       	mov	r24, r24
    2f24:	90 e0       	ldi	r25, 0x00	; 0
    2f26:	bc 01       	movw	r22, r24
    2f28:	6f 5f       	subi	r22, 0xFF	; 255
    2f2a:	7f 4f       	sbci	r23, 0xFF	; 255
    2f2c:	89 81       	ldd	r24, Y+1	; 0x01
    2f2e:	88 2f       	mov	r24, r24
    2f30:	90 e0       	ldi	r25, 0x00	; 0
    2f32:	01 97       	sbiw	r24, 0x01	; 1
    2f34:	9c 01       	movw	r18, r24
    2f36:	22 0f       	add	r18, r18
    2f38:	33 1f       	adc	r19, r19
    2f3a:	ce 01       	movw	r24, r28
    2f3c:	01 96       	adiw	r24, 0x01	; 1
    2f3e:	82 0f       	add	r24, r18
    2f40:	93 1f       	adc	r25, r19
    2f42:	fc 01       	movw	r30, r24
    2f44:	38 96       	adiw	r30, 0x08	; 8
    2f46:	40 81       	ld	r20, Z
    2f48:	51 81       	ldd	r21, Z+1	; 0x01
    2f4a:	89 81       	ldd	r24, Y+1	; 0x01
    2f4c:	88 2f       	mov	r24, r24
    2f4e:	90 e0       	ldi	r25, 0x00	; 0
    2f50:	01 96       	adiw	r24, 0x01	; 1
    2f52:	9c 01       	movw	r18, r24
    2f54:	22 0f       	add	r18, r18
    2f56:	33 1f       	adc	r19, r19
    2f58:	ce 01       	movw	r24, r28
    2f5a:	01 96       	adiw	r24, 0x01	; 1
    2f5c:	82 0f       	add	r24, r18
    2f5e:	93 1f       	adc	r25, r19
    2f60:	fc 01       	movw	r30, r24
    2f62:	38 96       	adiw	r30, 0x08	; 8
    2f64:	80 81       	ld	r24, Z
    2f66:	91 81       	ldd	r25, Z+1	; 0x01
    2f68:	48 0f       	add	r20, r24
    2f6a:	59 1f       	adc	r21, r25
    2f6c:	9b 01       	movw	r18, r22
    2f6e:	22 0f       	add	r18, r18
    2f70:	33 1f       	adc	r19, r19
    2f72:	ce 01       	movw	r24, r28
    2f74:	01 96       	adiw	r24, 0x01	; 1
    2f76:	82 0f       	add	r24, r18
    2f78:	93 1f       	adc	r25, r19
    2f7a:	fc 01       	movw	r30, r24
    2f7c:	38 96       	adiw	r30, 0x08	; 8
    2f7e:	51 83       	std	Z+1, r21	; 0x01
    2f80:	40 83       	st	Z, r20
    2f82:	9f c0       	rjmp	.+318    	; 0x30c2 <calmuldiv+0x47c>
                break;
                case '-':
                arr2[i+1]=arr2[i-1]-arr2[i+1];
    2f84:	89 81       	ldd	r24, Y+1	; 0x01
    2f86:	88 2f       	mov	r24, r24
    2f88:	90 e0       	ldi	r25, 0x00	; 0
    2f8a:	bc 01       	movw	r22, r24
    2f8c:	6f 5f       	subi	r22, 0xFF	; 255
    2f8e:	7f 4f       	sbci	r23, 0xFF	; 255
    2f90:	89 81       	ldd	r24, Y+1	; 0x01
    2f92:	88 2f       	mov	r24, r24
    2f94:	90 e0       	ldi	r25, 0x00	; 0
    2f96:	01 97       	sbiw	r24, 0x01	; 1
    2f98:	9c 01       	movw	r18, r24
    2f9a:	22 0f       	add	r18, r18
    2f9c:	33 1f       	adc	r19, r19
    2f9e:	ce 01       	movw	r24, r28
    2fa0:	01 96       	adiw	r24, 0x01	; 1
    2fa2:	82 0f       	add	r24, r18
    2fa4:	93 1f       	adc	r25, r19
    2fa6:	fc 01       	movw	r30, r24
    2fa8:	38 96       	adiw	r30, 0x08	; 8
    2faa:	40 81       	ld	r20, Z
    2fac:	51 81       	ldd	r21, Z+1	; 0x01
    2fae:	89 81       	ldd	r24, Y+1	; 0x01
    2fb0:	88 2f       	mov	r24, r24
    2fb2:	90 e0       	ldi	r25, 0x00	; 0
    2fb4:	01 96       	adiw	r24, 0x01	; 1
    2fb6:	9c 01       	movw	r18, r24
    2fb8:	22 0f       	add	r18, r18
    2fba:	33 1f       	adc	r19, r19
    2fbc:	ce 01       	movw	r24, r28
    2fbe:	01 96       	adiw	r24, 0x01	; 1
    2fc0:	82 0f       	add	r24, r18
    2fc2:	93 1f       	adc	r25, r19
    2fc4:	fc 01       	movw	r30, r24
    2fc6:	38 96       	adiw	r30, 0x08	; 8
    2fc8:	80 81       	ld	r24, Z
    2fca:	91 81       	ldd	r25, Z+1	; 0x01
    2fcc:	48 1b       	sub	r20, r24
    2fce:	59 0b       	sbc	r21, r25
    2fd0:	9b 01       	movw	r18, r22
    2fd2:	22 0f       	add	r18, r18
    2fd4:	33 1f       	adc	r19, r19
    2fd6:	ce 01       	movw	r24, r28
    2fd8:	01 96       	adiw	r24, 0x01	; 1
    2fda:	82 0f       	add	r24, r18
    2fdc:	93 1f       	adc	r25, r19
    2fde:	fc 01       	movw	r30, r24
    2fe0:	38 96       	adiw	r30, 0x08	; 8
    2fe2:	51 83       	std	Z+1, r21	; 0x01
    2fe4:	40 83       	st	Z, r20
    2fe6:	6d c0       	rjmp	.+218    	; 0x30c2 <calmuldiv+0x47c>
                break;
                case '*':
                arr2[i+1]=arr2[i-1]*arr[i+1];
    2fe8:	89 81       	ldd	r24, Y+1	; 0x01
    2fea:	88 2f       	mov	r24, r24
    2fec:	90 e0       	ldi	r25, 0x00	; 0
    2fee:	bc 01       	movw	r22, r24
    2ff0:	6f 5f       	subi	r22, 0xFF	; 255
    2ff2:	7f 4f       	sbci	r23, 0xFF	; 255
    2ff4:	89 81       	ldd	r24, Y+1	; 0x01
    2ff6:	88 2f       	mov	r24, r24
    2ff8:	90 e0       	ldi	r25, 0x00	; 0
    2ffa:	01 97       	sbiw	r24, 0x01	; 1
    2ffc:	9c 01       	movw	r18, r24
    2ffe:	22 0f       	add	r18, r18
    3000:	33 1f       	adc	r19, r19
    3002:	ce 01       	movw	r24, r28
    3004:	01 96       	adiw	r24, 0x01	; 1
    3006:	82 0f       	add	r24, r18
    3008:	93 1f       	adc	r25, r19
    300a:	fc 01       	movw	r30, r24
    300c:	38 96       	adiw	r30, 0x08	; 8
    300e:	40 81       	ld	r20, Z
    3010:	51 81       	ldd	r21, Z+1	; 0x01
    3012:	89 81       	ldd	r24, Y+1	; 0x01
    3014:	88 2f       	mov	r24, r24
    3016:	90 e0       	ldi	r25, 0x00	; 0
    3018:	01 96       	adiw	r24, 0x01	; 1
    301a:	9c 01       	movw	r18, r24
    301c:	22 0f       	add	r18, r18
    301e:	33 1f       	adc	r19, r19
    3020:	89 a9       	ldd	r24, Y+49	; 0x31
    3022:	9a a9       	ldd	r25, Y+50	; 0x32
    3024:	fc 01       	movw	r30, r24
    3026:	e2 0f       	add	r30, r18
    3028:	f3 1f       	adc	r31, r19
    302a:	80 81       	ld	r24, Z
    302c:	91 81       	ldd	r25, Z+1	; 0x01
    302e:	9a 01       	movw	r18, r20
    3030:	28 9f       	mul	r18, r24
    3032:	a0 01       	movw	r20, r0
    3034:	29 9f       	mul	r18, r25
    3036:	50 0d       	add	r21, r0
    3038:	38 9f       	mul	r19, r24
    303a:	50 0d       	add	r21, r0
    303c:	11 24       	eor	r1, r1
    303e:	9b 01       	movw	r18, r22
    3040:	22 0f       	add	r18, r18
    3042:	33 1f       	adc	r19, r19
    3044:	ce 01       	movw	r24, r28
    3046:	01 96       	adiw	r24, 0x01	; 1
    3048:	82 0f       	add	r24, r18
    304a:	93 1f       	adc	r25, r19
    304c:	fc 01       	movw	r30, r24
    304e:	38 96       	adiw	r30, 0x08	; 8
    3050:	51 83       	std	Z+1, r21	; 0x01
    3052:	40 83       	st	Z, r20
    3054:	36 c0       	rjmp	.+108    	; 0x30c2 <calmuldiv+0x47c>
                break;
                case '/':
                arr[i+1]=arr[i-1]/arr[i+1];
    3056:	89 81       	ldd	r24, Y+1	; 0x01
    3058:	88 2f       	mov	r24, r24
    305a:	90 e0       	ldi	r25, 0x00	; 0
    305c:	01 96       	adiw	r24, 0x01	; 1
    305e:	9c 01       	movw	r18, r24
    3060:	22 0f       	add	r18, r18
    3062:	33 1f       	adc	r19, r19
    3064:	89 a9       	ldd	r24, Y+49	; 0x31
    3066:	9a a9       	ldd	r25, Y+50	; 0x32
    3068:	8c 01       	movw	r16, r24
    306a:	02 0f       	add	r16, r18
    306c:	13 1f       	adc	r17, r19
    306e:	89 81       	ldd	r24, Y+1	; 0x01
    3070:	28 2f       	mov	r18, r24
    3072:	30 e0       	ldi	r19, 0x00	; 0
    3074:	81 e0       	ldi	r24, 0x01	; 1
    3076:	90 e0       	ldi	r25, 0x00	; 0
    3078:	82 1b       	sub	r24, r18
    307a:	93 0b       	sbc	r25, r19
    307c:	88 0f       	add	r24, r24
    307e:	99 1f       	adc	r25, r25
    3080:	22 27       	eor	r18, r18
    3082:	33 27       	eor	r19, r19
    3084:	28 1b       	sub	r18, r24
    3086:	39 0b       	sbc	r19, r25
    3088:	89 a9       	ldd	r24, Y+49	; 0x31
    308a:	9a a9       	ldd	r25, Y+50	; 0x32
    308c:	fc 01       	movw	r30, r24
    308e:	e2 0f       	add	r30, r18
    3090:	f3 1f       	adc	r31, r19
    3092:	40 81       	ld	r20, Z
    3094:	51 81       	ldd	r21, Z+1	; 0x01
    3096:	89 81       	ldd	r24, Y+1	; 0x01
    3098:	88 2f       	mov	r24, r24
    309a:	90 e0       	ldi	r25, 0x00	; 0
    309c:	01 96       	adiw	r24, 0x01	; 1
    309e:	9c 01       	movw	r18, r24
    30a0:	22 0f       	add	r18, r18
    30a2:	33 1f       	adc	r19, r19
    30a4:	89 a9       	ldd	r24, Y+49	; 0x31
    30a6:	9a a9       	ldd	r25, Y+50	; 0x32
    30a8:	fc 01       	movw	r30, r24
    30aa:	e2 0f       	add	r30, r18
    30ac:	f3 1f       	adc	r31, r19
    30ae:	20 81       	ld	r18, Z
    30b0:	31 81       	ldd	r19, Z+1	; 0x01
    30b2:	ca 01       	movw	r24, r20
    30b4:	b9 01       	movw	r22, r18
    30b6:	0e 94 00 1b 	call	0x3600	; 0x3600 <__divmodhi4>
    30ba:	cb 01       	movw	r24, r22
    30bc:	f8 01       	movw	r30, r16
    30be:	91 83       	std	Z+1, r25	; 0x01
    30c0:	80 83       	st	Z, r24


        ///////////////////////////////////////
       // _delay_ms(2000);
        //LCD_Clear();
        for (u8 i = 1; i < c+1; i+=2)
    30c2:	89 81       	ldd	r24, Y+1	; 0x01
    30c4:	8e 5f       	subi	r24, 0xFE	; 254
    30c6:	89 83       	std	Y+1, r24	; 0x01
    30c8:	89 81       	ldd	r24, Y+1	; 0x01
    30ca:	28 2f       	mov	r18, r24
    30cc:	30 e0       	ldi	r19, 0x00	; 0
    30ce:	8f 81       	ldd	r24, Y+7	; 0x07
    30d0:	98 85       	ldd	r25, Y+8	; 0x08
    30d2:	01 96       	adiw	r24, 0x01	; 1
    30d4:	28 17       	cp	r18, r24
    30d6:	39 07       	cpc	r19, r25
    30d8:	0c f4       	brge	.+2      	; 0x30dc <calmuldiv+0x496>
    30da:	f5 ce       	rjmp	.-534    	; 0x2ec6 <calmuldiv+0x280>
                default:
                break;
            }
            /* code */
        }
        c=arr2[c];
    30dc:	8f 81       	ldd	r24, Y+7	; 0x07
    30de:	98 85       	ldd	r25, Y+8	; 0x08
    30e0:	9c 01       	movw	r18, r24
    30e2:	22 0f       	add	r18, r18
    30e4:	33 1f       	adc	r19, r19
    30e6:	ce 01       	movw	r24, r28
    30e8:	01 96       	adiw	r24, 0x01	; 1
    30ea:	82 0f       	add	r24, r18
    30ec:	93 1f       	adc	r25, r19
    30ee:	fc 01       	movw	r30, r24
    30f0:	38 96       	adiw	r30, 0x08	; 8
    30f2:	80 81       	ld	r24, Z
    30f4:	91 81       	ldd	r25, Z+1	; 0x01
    30f6:	98 87       	std	Y+8, r25	; 0x08
    30f8:	8f 83       	std	Y+7, r24	; 0x07
        LCD_SetCursorPosition(1,0);
    30fa:	81 e0       	ldi	r24, 0x01	; 1
    30fc:	60 e0       	ldi	r22, 0x00	; 0
    30fe:	0e 94 47 10 	call	0x208e	; 0x208e <LCD_SetCursorPosition>
        LCD_DisplayNumber(c);
    3102:	8f 81       	ldd	r24, Y+7	; 0x07
    3104:	98 85       	ldd	r25, Y+8	; 0x08
    3106:	0e 94 6b 10 	call	0x20d6	; 0x20d6 <LCD_DisplayNumber>
    310a:	06 c0       	rjmp	.+12     	; 0x3118 <calmuldiv+0x4d2>
    } else{
        LCD_Clear();
    310c:	0e 94 07 10 	call	0x200e	; 0x200e <LCD_Clear>
        LCD_DisplayString("maths error");
    3110:	8a e6       	ldi	r24, 0x6A	; 106
    3112:	90 e0       	ldi	r25, 0x00	; 0
    3114:	0e 94 1e 10 	call	0x203c	; 0x203c <LCD_DisplayString>

//    c=arr[x];
//    LCD_DisplayNumber(c);


}
    3118:	e7 96       	adiw	r28, 0x37	; 55
    311a:	0f b6       	in	r0, 0x3f	; 63
    311c:	f8 94       	cli
    311e:	de bf       	out	0x3e, r29	; 62
    3120:	0f be       	out	0x3f, r0	; 63
    3122:	cd bf       	out	0x3d, r28	; 61
    3124:	cf 91       	pop	r28
    3126:	df 91       	pop	r29
    3128:	1f 91       	pop	r17
    312a:	0f 91       	pop	r16
    312c:	08 95       	ret

0000312e <calcarr>:
void calcarr(s32 arr [],u8 x)
{////////// 1111 + 2 + 3 + 5 ///////6  // 1+2*2*2*2+5*2
    312e:	0f 93       	push	r16
    3130:	1f 93       	push	r17
    3132:	df 93       	push	r29
    3134:	cf 93       	push	r28
    3136:	cd b7       	in	r28, 0x3d	; 61
    3138:	de b7       	in	r29, 0x3e	; 62
    313a:	28 97       	sbiw	r28, 0x08	; 8
    313c:	0f b6       	in	r0, 0x3f	; 63
    313e:	f8 94       	cli
    3140:	de bf       	out	0x3e, r29	; 62
    3142:	0f be       	out	0x3f, r0	; 63
    3144:	cd bf       	out	0x3d, r28	; 61
    3146:	9d 83       	std	Y+5, r25	; 0x05
    3148:	8c 83       	std	Y+4, r24	; 0x04
    314a:	6e 83       	std	Y+6, r22	; 0x06
	//
   /// 1 + 2 + 3
  // s32 arr[20]={1,'+',2,'+',3};
LCD_Clear();
    314c:	0e 94 07 10 	call	0x200e	; 0x200e <LCD_Clear>
   //x=5;
    int c=0;
    3150:	1b 82       	std	Y+3, r1	; 0x03
    3152:	1a 82       	std	Y+2, r1	; 0x02
    for (u8 i = 1; i < x+1; i+=2)
    3154:	81 e0       	ldi	r24, 0x01	; 1
    3156:	89 83       	std	Y+1, r24	; 0x01
    3158:	09 c1       	rjmp	.+530    	; 0x336c <calcarr+0x23e>
    {
        //LCD_DisplayNumber(arr[i]);
        switch (arr[i])
    315a:	89 81       	ldd	r24, Y+1	; 0x01
    315c:	88 2f       	mov	r24, r24
    315e:	90 e0       	ldi	r25, 0x00	; 0
    3160:	9c 01       	movw	r18, r24
    3162:	22 0f       	add	r18, r18
    3164:	33 1f       	adc	r19, r19
    3166:	8c 81       	ldd	r24, Y+4	; 0x04
    3168:	9d 81       	ldd	r25, Y+5	; 0x05
    316a:	fc 01       	movw	r30, r24
    316c:	e2 0f       	add	r30, r18
    316e:	f3 1f       	adc	r31, r19
    3170:	20 81       	ld	r18, Z
    3172:	31 81       	ldd	r19, Z+1	; 0x01
    3174:	38 87       	std	Y+8, r19	; 0x08
    3176:	2f 83       	std	Y+7, r18	; 0x07
    3178:	8f 81       	ldd	r24, Y+7	; 0x07
    317a:	98 85       	ldd	r25, Y+8	; 0x08
    317c:	8b 32       	cpi	r24, 0x2B	; 43
    317e:	91 05       	cpc	r25, r1
    3180:	c1 f0       	breq	.+48     	; 0x31b2 <calcarr+0x84>
    3182:	ef 81       	ldd	r30, Y+7	; 0x07
    3184:	f8 85       	ldd	r31, Y+8	; 0x08
    3186:	ec 32       	cpi	r30, 0x2C	; 44
    3188:	f1 05       	cpc	r31, r1
    318a:	3c f4       	brge	.+14     	; 0x319a <calcarr+0x6c>
    318c:	2f 81       	ldd	r18, Y+7	; 0x07
    318e:	38 85       	ldd	r19, Y+8	; 0x08
    3190:	2a 32       	cpi	r18, 0x2A	; 42
    3192:	31 05       	cpc	r19, r1
    3194:	09 f4       	brne	.+2      	; 0x3198 <calcarr+0x6a>
    3196:	77 c0       	rjmp	.+238    	; 0x3286 <calcarr+0x158>
    3198:	e6 c0       	rjmp	.+460    	; 0x3366 <calcarr+0x238>
    319a:	8f 81       	ldd	r24, Y+7	; 0x07
    319c:	98 85       	ldd	r25, Y+8	; 0x08
    319e:	8d 32       	cpi	r24, 0x2D	; 45
    31a0:	91 05       	cpc	r25, r1
    31a2:	d9 f1       	breq	.+118    	; 0x321a <calcarr+0xec>
    31a4:	ef 81       	ldd	r30, Y+7	; 0x07
    31a6:	f8 85       	ldd	r31, Y+8	; 0x08
    31a8:	ef 32       	cpi	r30, 0x2F	; 47
    31aa:	f1 05       	cpc	r31, r1
    31ac:	09 f4       	brne	.+2      	; 0x31b0 <calcarr+0x82>
    31ae:	a5 c0       	rjmp	.+330    	; 0x32fa <calcarr+0x1cc>
    31b0:	da c0       	rjmp	.+436    	; 0x3366 <calcarr+0x238>
        {
            case '+':
            arr[i+1]=arr[i-1]+arr[i+1];
    31b2:	89 81       	ldd	r24, Y+1	; 0x01
    31b4:	88 2f       	mov	r24, r24
    31b6:	90 e0       	ldi	r25, 0x00	; 0
    31b8:	01 96       	adiw	r24, 0x01	; 1
    31ba:	9c 01       	movw	r18, r24
    31bc:	22 0f       	add	r18, r18
    31be:	33 1f       	adc	r19, r19
    31c0:	8c 81       	ldd	r24, Y+4	; 0x04
    31c2:	9d 81       	ldd	r25, Y+5	; 0x05
    31c4:	dc 01       	movw	r26, r24
    31c6:	a2 0f       	add	r26, r18
    31c8:	b3 1f       	adc	r27, r19
    31ca:	89 81       	ldd	r24, Y+1	; 0x01
    31cc:	28 2f       	mov	r18, r24
    31ce:	30 e0       	ldi	r19, 0x00	; 0
    31d0:	81 e0       	ldi	r24, 0x01	; 1
    31d2:	90 e0       	ldi	r25, 0x00	; 0
    31d4:	82 1b       	sub	r24, r18
    31d6:	93 0b       	sbc	r25, r19
    31d8:	88 0f       	add	r24, r24
    31da:	99 1f       	adc	r25, r25
    31dc:	22 27       	eor	r18, r18
    31de:	33 27       	eor	r19, r19
    31e0:	28 1b       	sub	r18, r24
    31e2:	39 0b       	sbc	r19, r25
    31e4:	8c 81       	ldd	r24, Y+4	; 0x04
    31e6:	9d 81       	ldd	r25, Y+5	; 0x05
    31e8:	fc 01       	movw	r30, r24
    31ea:	e2 0f       	add	r30, r18
    31ec:	f3 1f       	adc	r31, r19
    31ee:	40 81       	ld	r20, Z
    31f0:	51 81       	ldd	r21, Z+1	; 0x01
    31f2:	89 81       	ldd	r24, Y+1	; 0x01
    31f4:	88 2f       	mov	r24, r24
    31f6:	90 e0       	ldi	r25, 0x00	; 0
    31f8:	01 96       	adiw	r24, 0x01	; 1
    31fa:	9c 01       	movw	r18, r24
    31fc:	22 0f       	add	r18, r18
    31fe:	33 1f       	adc	r19, r19
    3200:	8c 81       	ldd	r24, Y+4	; 0x04
    3202:	9d 81       	ldd	r25, Y+5	; 0x05
    3204:	fc 01       	movw	r30, r24
    3206:	e2 0f       	add	r30, r18
    3208:	f3 1f       	adc	r31, r19
    320a:	80 81       	ld	r24, Z
    320c:	91 81       	ldd	r25, Z+1	; 0x01
    320e:	84 0f       	add	r24, r20
    3210:	95 1f       	adc	r25, r21
    3212:	11 96       	adiw	r26, 0x01	; 1
    3214:	9c 93       	st	X, r25
    3216:	8e 93       	st	-X, r24
    3218:	a6 c0       	rjmp	.+332    	; 0x3366 <calcarr+0x238>
            break;
            case '-':
            arr[i+1]=arr[i-1]-arr[i+1];
    321a:	89 81       	ldd	r24, Y+1	; 0x01
    321c:	88 2f       	mov	r24, r24
    321e:	90 e0       	ldi	r25, 0x00	; 0
    3220:	01 96       	adiw	r24, 0x01	; 1
    3222:	9c 01       	movw	r18, r24
    3224:	22 0f       	add	r18, r18
    3226:	33 1f       	adc	r19, r19
    3228:	8c 81       	ldd	r24, Y+4	; 0x04
    322a:	9d 81       	ldd	r25, Y+5	; 0x05
    322c:	dc 01       	movw	r26, r24
    322e:	a2 0f       	add	r26, r18
    3230:	b3 1f       	adc	r27, r19
    3232:	89 81       	ldd	r24, Y+1	; 0x01
    3234:	28 2f       	mov	r18, r24
    3236:	30 e0       	ldi	r19, 0x00	; 0
    3238:	81 e0       	ldi	r24, 0x01	; 1
    323a:	90 e0       	ldi	r25, 0x00	; 0
    323c:	82 1b       	sub	r24, r18
    323e:	93 0b       	sbc	r25, r19
    3240:	88 0f       	add	r24, r24
    3242:	99 1f       	adc	r25, r25
    3244:	22 27       	eor	r18, r18
    3246:	33 27       	eor	r19, r19
    3248:	28 1b       	sub	r18, r24
    324a:	39 0b       	sbc	r19, r25
    324c:	8c 81       	ldd	r24, Y+4	; 0x04
    324e:	9d 81       	ldd	r25, Y+5	; 0x05
    3250:	fc 01       	movw	r30, r24
    3252:	e2 0f       	add	r30, r18
    3254:	f3 1f       	adc	r31, r19
    3256:	40 81       	ld	r20, Z
    3258:	51 81       	ldd	r21, Z+1	; 0x01
    325a:	89 81       	ldd	r24, Y+1	; 0x01
    325c:	88 2f       	mov	r24, r24
    325e:	90 e0       	ldi	r25, 0x00	; 0
    3260:	01 96       	adiw	r24, 0x01	; 1
    3262:	9c 01       	movw	r18, r24
    3264:	22 0f       	add	r18, r18
    3266:	33 1f       	adc	r19, r19
    3268:	8c 81       	ldd	r24, Y+4	; 0x04
    326a:	9d 81       	ldd	r25, Y+5	; 0x05
    326c:	fc 01       	movw	r30, r24
    326e:	e2 0f       	add	r30, r18
    3270:	f3 1f       	adc	r31, r19
    3272:	80 81       	ld	r24, Z
    3274:	91 81       	ldd	r25, Z+1	; 0x01
    3276:	9a 01       	movw	r18, r20
    3278:	28 1b       	sub	r18, r24
    327a:	39 0b       	sbc	r19, r25
    327c:	c9 01       	movw	r24, r18
    327e:	11 96       	adiw	r26, 0x01	; 1
    3280:	9c 93       	st	X, r25
    3282:	8e 93       	st	-X, r24
    3284:	70 c0       	rjmp	.+224    	; 0x3366 <calcarr+0x238>
            break;
            case '*':
            arr[i+1]=arr[i-1]*arr[i+1];
    3286:	89 81       	ldd	r24, Y+1	; 0x01
    3288:	88 2f       	mov	r24, r24
    328a:	90 e0       	ldi	r25, 0x00	; 0
    328c:	01 96       	adiw	r24, 0x01	; 1
    328e:	9c 01       	movw	r18, r24
    3290:	22 0f       	add	r18, r18
    3292:	33 1f       	adc	r19, r19
    3294:	8c 81       	ldd	r24, Y+4	; 0x04
    3296:	9d 81       	ldd	r25, Y+5	; 0x05
    3298:	dc 01       	movw	r26, r24
    329a:	a2 0f       	add	r26, r18
    329c:	b3 1f       	adc	r27, r19
    329e:	89 81       	ldd	r24, Y+1	; 0x01
    32a0:	28 2f       	mov	r18, r24
    32a2:	30 e0       	ldi	r19, 0x00	; 0
    32a4:	81 e0       	ldi	r24, 0x01	; 1
    32a6:	90 e0       	ldi	r25, 0x00	; 0
    32a8:	82 1b       	sub	r24, r18
    32aa:	93 0b       	sbc	r25, r19
    32ac:	88 0f       	add	r24, r24
    32ae:	99 1f       	adc	r25, r25
    32b0:	22 27       	eor	r18, r18
    32b2:	33 27       	eor	r19, r19
    32b4:	28 1b       	sub	r18, r24
    32b6:	39 0b       	sbc	r19, r25
    32b8:	8c 81       	ldd	r24, Y+4	; 0x04
    32ba:	9d 81       	ldd	r25, Y+5	; 0x05
    32bc:	fc 01       	movw	r30, r24
    32be:	e2 0f       	add	r30, r18
    32c0:	f3 1f       	adc	r31, r19
    32c2:	40 81       	ld	r20, Z
    32c4:	51 81       	ldd	r21, Z+1	; 0x01
    32c6:	89 81       	ldd	r24, Y+1	; 0x01
    32c8:	88 2f       	mov	r24, r24
    32ca:	90 e0       	ldi	r25, 0x00	; 0
    32cc:	01 96       	adiw	r24, 0x01	; 1
    32ce:	9c 01       	movw	r18, r24
    32d0:	22 0f       	add	r18, r18
    32d2:	33 1f       	adc	r19, r19
    32d4:	8c 81       	ldd	r24, Y+4	; 0x04
    32d6:	9d 81       	ldd	r25, Y+5	; 0x05
    32d8:	fc 01       	movw	r30, r24
    32da:	e2 0f       	add	r30, r18
    32dc:	f3 1f       	adc	r31, r19
    32de:	80 81       	ld	r24, Z
    32e0:	91 81       	ldd	r25, Z+1	; 0x01
    32e2:	fc 01       	movw	r30, r24
    32e4:	4e 9f       	mul	r20, r30
    32e6:	c0 01       	movw	r24, r0
    32e8:	4f 9f       	mul	r20, r31
    32ea:	90 0d       	add	r25, r0
    32ec:	5e 9f       	mul	r21, r30
    32ee:	90 0d       	add	r25, r0
    32f0:	11 24       	eor	r1, r1
    32f2:	11 96       	adiw	r26, 0x01	; 1
    32f4:	9c 93       	st	X, r25
    32f6:	8e 93       	st	-X, r24
    32f8:	36 c0       	rjmp	.+108    	; 0x3366 <calcarr+0x238>
            break;
            case '/':
            arr[i+1]=arr[i-1]/arr[i+1];
    32fa:	89 81       	ldd	r24, Y+1	; 0x01
    32fc:	88 2f       	mov	r24, r24
    32fe:	90 e0       	ldi	r25, 0x00	; 0
    3300:	01 96       	adiw	r24, 0x01	; 1
    3302:	9c 01       	movw	r18, r24
    3304:	22 0f       	add	r18, r18
    3306:	33 1f       	adc	r19, r19
    3308:	8c 81       	ldd	r24, Y+4	; 0x04
    330a:	9d 81       	ldd	r25, Y+5	; 0x05
    330c:	8c 01       	movw	r16, r24
    330e:	02 0f       	add	r16, r18
    3310:	13 1f       	adc	r17, r19
    3312:	89 81       	ldd	r24, Y+1	; 0x01
    3314:	28 2f       	mov	r18, r24
    3316:	30 e0       	ldi	r19, 0x00	; 0
    3318:	81 e0       	ldi	r24, 0x01	; 1
    331a:	90 e0       	ldi	r25, 0x00	; 0
    331c:	82 1b       	sub	r24, r18
    331e:	93 0b       	sbc	r25, r19
    3320:	88 0f       	add	r24, r24
    3322:	99 1f       	adc	r25, r25
    3324:	22 27       	eor	r18, r18
    3326:	33 27       	eor	r19, r19
    3328:	28 1b       	sub	r18, r24
    332a:	39 0b       	sbc	r19, r25
    332c:	8c 81       	ldd	r24, Y+4	; 0x04
    332e:	9d 81       	ldd	r25, Y+5	; 0x05
    3330:	fc 01       	movw	r30, r24
    3332:	e2 0f       	add	r30, r18
    3334:	f3 1f       	adc	r31, r19
    3336:	40 81       	ld	r20, Z
    3338:	51 81       	ldd	r21, Z+1	; 0x01
    333a:	89 81       	ldd	r24, Y+1	; 0x01
    333c:	88 2f       	mov	r24, r24
    333e:	90 e0       	ldi	r25, 0x00	; 0
    3340:	01 96       	adiw	r24, 0x01	; 1
    3342:	9c 01       	movw	r18, r24
    3344:	22 0f       	add	r18, r18
    3346:	33 1f       	adc	r19, r19
    3348:	8c 81       	ldd	r24, Y+4	; 0x04
    334a:	9d 81       	ldd	r25, Y+5	; 0x05
    334c:	fc 01       	movw	r30, r24
    334e:	e2 0f       	add	r30, r18
    3350:	f3 1f       	adc	r31, r19
    3352:	20 81       	ld	r18, Z
    3354:	31 81       	ldd	r19, Z+1	; 0x01
    3356:	ca 01       	movw	r24, r20
    3358:	b9 01       	movw	r22, r18
    335a:	0e 94 00 1b 	call	0x3600	; 0x3600 <__divmodhi4>
    335e:	cb 01       	movw	r24, r22
    3360:	f8 01       	movw	r30, r16
    3362:	91 83       	std	Z+1, r25	; 0x01
    3364:	80 83       	st	Z, r24
   /// 1 + 2 + 3
  // s32 arr[20]={1,'+',2,'+',3};
LCD_Clear();
   //x=5;
    int c=0;
    for (u8 i = 1; i < x+1; i+=2)
    3366:	89 81       	ldd	r24, Y+1	; 0x01
    3368:	8e 5f       	subi	r24, 0xFE	; 254
    336a:	89 83       	std	Y+1, r24	; 0x01
    336c:	89 81       	ldd	r24, Y+1	; 0x01
    336e:	28 2f       	mov	r18, r24
    3370:	30 e0       	ldi	r19, 0x00	; 0
    3372:	8e 81       	ldd	r24, Y+6	; 0x06
    3374:	88 2f       	mov	r24, r24
    3376:	90 e0       	ldi	r25, 0x00	; 0
    3378:	01 96       	adiw	r24, 0x01	; 1
    337a:	28 17       	cp	r18, r24
    337c:	39 07       	cpc	r19, r25
    337e:	0c f4       	brge	.+2      	; 0x3382 <calcarr+0x254>
    3380:	ec ce       	rjmp	.-552    	; 0x315a <calcarr+0x2c>
            default:
            break;
        }
        /* code */
    }
    c=arr[x];
    3382:	8e 81       	ldd	r24, Y+6	; 0x06
    3384:	88 2f       	mov	r24, r24
    3386:	90 e0       	ldi	r25, 0x00	; 0
    3388:	9c 01       	movw	r18, r24
    338a:	22 0f       	add	r18, r18
    338c:	33 1f       	adc	r19, r19
    338e:	8c 81       	ldd	r24, Y+4	; 0x04
    3390:	9d 81       	ldd	r25, Y+5	; 0x05
    3392:	fc 01       	movw	r30, r24
    3394:	e2 0f       	add	r30, r18
    3396:	f3 1f       	adc	r31, r19
    3398:	80 81       	ld	r24, Z
    339a:	91 81       	ldd	r25, Z+1	; 0x01
    339c:	9b 83       	std	Y+3, r25	; 0x03
    339e:	8a 83       	std	Y+2, r24	; 0x02
    LCD_DisplayNumber(c);
    33a0:	8a 81       	ldd	r24, Y+2	; 0x02
    33a2:	9b 81       	ldd	r25, Y+3	; 0x03
    33a4:	0e 94 6b 10 	call	0x20d6	; 0x20d6 <LCD_DisplayNumber>

    
}
    33a8:	28 96       	adiw	r28, 0x08	; 8
    33aa:	0f b6       	in	r0, 0x3f	; 63
    33ac:	f8 94       	cli
    33ae:	de bf       	out	0x3e, r29	; 62
    33b0:	0f be       	out	0x3f, r0	; 63
    33b2:	cd bf       	out	0x3d, r28	; 61
    33b4:	cf 91       	pop	r28
    33b6:	df 91       	pop	r29
    33b8:	1f 91       	pop	r17
    33ba:	0f 91       	pop	r16
    33bc:	08 95       	ret

000033be <keypad>:
void keypad(){
    33be:	df 93       	push	r29
    33c0:	cf 93       	push	r28
    33c2:	cd b7       	in	r28, 0x3d	; 61
    33c4:	de b7       	in	r29, 0x3e	; 62
    33c6:	e2 97       	sbiw	r28, 0x32	; 50
    33c8:	0f b6       	in	r0, 0x3f	; 63
    33ca:	f8 94       	cli
    33cc:	de bf       	out	0x3e, r29	; 62
    33ce:	0f be       	out	0x3f, r0	; 63
    33d0:	cd bf       	out	0x3d, r28	; 61
    LCD_Init();
    33d2:	0e 94 60 0f 	call	0x1ec0	; 0x1ec0 <LCD_Init>
    Keypad_Init();
    33d6:	0e 94 af 0d 	call	0x1b5e	; 0x1b5e <Keypad_Init>
    Keypad_ButtonType pressed_button ;
    u8 c=0;
    33da:	1f 82       	std	Y+7, r1	; 0x07
    u8 cn=0;
    33dc:	1e 82       	std	Y+6, r1	; 0x06
    s32 arr[20]={0};
    33de:	88 e2       	ldi	r24, 0x28	; 40
    33e0:	fe 01       	movw	r30, r28
    33e2:	39 96       	adiw	r30, 0x09	; 9
    33e4:	df 01       	movw	r26, r30
    33e6:	28 2f       	mov	r18, r24
    33e8:	1d 92       	st	X+, r1
    33ea:	2a 95       	dec	r18
    33ec:	e9 f7       	brne	.-6      	; 0x33e8 <keypad+0x2a>
    {
        /* code */
    
    
        do{
            pressed_button= Keypad_GetPressedButton();
    33ee:	0e 94 42 0f 	call	0x1e84	; 0x1e84 <Keypad_GetPressedButton>
    33f2:	88 87       	std	Y+8, r24	; 0x08
        }while (pressed_button==KEYPAD_BUTTON_INVALID);
    33f4:	88 85       	ldd	r24, Y+8	; 0x08
    33f6:	80 31       	cpi	r24, 0x10	; 16
    33f8:	d1 f3       	breq	.-12     	; 0x33ee <keypad+0x30>
        if (pressed_button == CALCULATOR_BUTTON_CLR) {
    33fa:	88 85       	ldd	r24, Y+8	; 0x08
    33fc:	88 23       	and	r24, r24
    33fe:	d1 f4       	brne	.+52     	; 0x3434 <keypad+0x76>
                
                LCD_Clear();
    3400:	0e 94 07 10 	call	0x200e	; 0x200e <LCD_Clear>
                c=0;
    3404:	1f 82       	std	Y+7, r1	; 0x07
                for (u8 i = 0; i < 20; i++)
    3406:	1d 82       	std	Y+5, r1	; 0x05
    3408:	11 c0       	rjmp	.+34     	; 0x342c <keypad+0x6e>
                {
                arr[i]=0;
    340a:	8d 81       	ldd	r24, Y+5	; 0x05
    340c:	88 2f       	mov	r24, r24
    340e:	90 e0       	ldi	r25, 0x00	; 0
    3410:	9c 01       	movw	r18, r24
    3412:	22 0f       	add	r18, r18
    3414:	33 1f       	adc	r19, r19
    3416:	ce 01       	movw	r24, r28
    3418:	01 96       	adiw	r24, 0x01	; 1
    341a:	82 0f       	add	r24, r18
    341c:	93 1f       	adc	r25, r19
    341e:	fc 01       	movw	r30, r24
    3420:	38 96       	adiw	r30, 0x08	; 8
    3422:	11 82       	std	Z+1, r1	; 0x01
    3424:	10 82       	st	Z, r1
        }while (pressed_button==KEYPAD_BUTTON_INVALID);
        if (pressed_button == CALCULATOR_BUTTON_CLR) {
                
                LCD_Clear();
                c=0;
                for (u8 i = 0; i < 20; i++)
    3426:	8d 81       	ldd	r24, Y+5	; 0x05
    3428:	8f 5f       	subi	r24, 0xFF	; 255
    342a:	8d 83       	std	Y+5, r24	; 0x05
    342c:	8d 81       	ldd	r24, Y+5	; 0x05
    342e:	84 31       	cpi	r24, 0x14	; 20
    3430:	60 f3       	brcs	.-40     	; 0x340a <keypad+0x4c>
    3432:	dd cf       	rjmp	.-70     	; 0x33ee <keypad+0x30>
                arr[i]=0;
                /* code */
                }
                continue;
        }
        if(Check_IS_NOtANumber(pressed_button)){
    3434:	88 85       	ldd	r24, Y+8	; 0x08
    3436:	0e 94 be 1a 	call	0x357c	; 0x357c <Check_IS_NOtANumber>
    343a:	88 23       	and	r24, r24
    343c:	b9 f1       	breq	.+110    	; 0x34ac <keypad+0xee>
            s32 ss = Calculator_GetRealNumber(pressed_button);
    343e:	88 85       	ldd	r24, Y+8	; 0x08
    3440:	0e 94 69 06 	call	0xcd2	; 0xcd2 <Calculator_GetRealNumber>
    3444:	88 2f       	mov	r24, r24
    3446:	90 e0       	ldi	r25, 0x00	; 0
    3448:	9c 83       	std	Y+4, r25	; 0x04
    344a:	8b 83       	std	Y+3, r24	; 0x03
            LCD_DisplayNumber(ss);
    344c:	8b 81       	ldd	r24, Y+3	; 0x03
    344e:	9c 81       	ldd	r25, Y+4	; 0x04
    3450:	0e 94 6b 10 	call	0x20d6	; 0x20d6 <LCD_DisplayNumber>
            arr[c]=arr[c]*10+ss; // 0*1+1->1   1*10+1 1 2 3         
    3454:	8f 81       	ldd	r24, Y+7	; 0x07
    3456:	68 2f       	mov	r22, r24
    3458:	70 e0       	ldi	r23, 0x00	; 0
    345a:	8f 81       	ldd	r24, Y+7	; 0x07
    345c:	88 2f       	mov	r24, r24
    345e:	90 e0       	ldi	r25, 0x00	; 0
    3460:	9c 01       	movw	r18, r24
    3462:	22 0f       	add	r18, r18
    3464:	33 1f       	adc	r19, r19
    3466:	ce 01       	movw	r24, r28
    3468:	01 96       	adiw	r24, 0x01	; 1
    346a:	82 0f       	add	r24, r18
    346c:	93 1f       	adc	r25, r19
    346e:	fc 01       	movw	r30, r24
    3470:	38 96       	adiw	r30, 0x08	; 8
    3472:	80 81       	ld	r24, Z
    3474:	91 81       	ldd	r25, Z+1	; 0x01
    3476:	9c 01       	movw	r18, r24
    3478:	22 0f       	add	r18, r18
    347a:	33 1f       	adc	r19, r19
    347c:	c9 01       	movw	r24, r18
    347e:	88 0f       	add	r24, r24
    3480:	99 1f       	adc	r25, r25
    3482:	88 0f       	add	r24, r24
    3484:	99 1f       	adc	r25, r25
    3486:	28 0f       	add	r18, r24
    3488:	39 1f       	adc	r19, r25
    348a:	8b 81       	ldd	r24, Y+3	; 0x03
    348c:	9c 81       	ldd	r25, Y+4	; 0x04
    348e:	a9 01       	movw	r20, r18
    3490:	48 0f       	add	r20, r24
    3492:	59 1f       	adc	r21, r25
    3494:	9b 01       	movw	r18, r22
    3496:	22 0f       	add	r18, r18
    3498:	33 1f       	adc	r19, r19
    349a:	ce 01       	movw	r24, r28
    349c:	01 96       	adiw	r24, 0x01	; 1
    349e:	82 0f       	add	r24, r18
    34a0:	93 1f       	adc	r25, r19
    34a2:	fc 01       	movw	r30, r24
    34a4:	38 96       	adiw	r30, 0x08	; 8
    34a6:	51 83       	std	Z+1, r21	; 0x01
    34a8:	40 83       	st	Z, r20
    34aa:	a1 cf       	rjmp	.-190    	; 0x33ee <keypad+0x30>
            //arr[c]=ss;
        }else if(pressed_button != CALCULATOR_BUTTON_EQUAL){
    34ac:	88 85       	ldd	r24, Y+8	; 0x08
    34ae:	82 30       	cpi	r24, 0x02	; 2
    34b0:	09 f4       	brne	.+2      	; 0x34b4 <keypad+0xf6>
    34b2:	47 c0       	rjmp	.+142    	; 0x3542 <keypad+0x184>
            u8 operation=0;
    34b4:	1a 82       	std	Y+2, r1	; 0x02
            switch (pressed_button)
    34b6:	88 85       	ldd	r24, Y+8	; 0x08
    34b8:	a8 2f       	mov	r26, r24
    34ba:	b0 e0       	ldi	r27, 0x00	; 0
    34bc:	ba ab       	std	Y+50, r27	; 0x32
    34be:	a9 ab       	std	Y+49, r26	; 0x31
    34c0:	29 a9       	ldd	r18, Y+49	; 0x31
    34c2:	3a a9       	ldd	r19, Y+50	; 0x32
    34c4:	27 30       	cpi	r18, 0x07	; 7
    34c6:	31 05       	cpc	r19, r1
    34c8:	c9 f0       	breq	.+50     	; 0x34fc <keypad+0x13e>
    34ca:	89 a9       	ldd	r24, Y+49	; 0x31
    34cc:	9a a9       	ldd	r25, Y+50	; 0x32
    34ce:	88 30       	cpi	r24, 0x08	; 8
    34d0:	91 05       	cpc	r25, r1
    34d2:	34 f4       	brge	.+12     	; 0x34e0 <keypad+0x122>
    34d4:	a9 a9       	ldd	r26, Y+49	; 0x31
    34d6:	ba a9       	ldd	r27, Y+50	; 0x32
    34d8:	a3 30       	cpi	r26, 0x03	; 3
    34da:	b1 05       	cpc	r27, r1
    34dc:	61 f0       	breq	.+24     	; 0x34f6 <keypad+0x138>
    34de:	16 c0       	rjmp	.+44     	; 0x350c <keypad+0x14e>
    34e0:	29 a9       	ldd	r18, Y+49	; 0x31
    34e2:	3a a9       	ldd	r19, Y+50	; 0x32
    34e4:	2b 30       	cpi	r18, 0x0B	; 11
    34e6:	31 05       	cpc	r19, r1
    34e8:	61 f0       	breq	.+24     	; 0x3502 <keypad+0x144>
    34ea:	89 a9       	ldd	r24, Y+49	; 0x31
    34ec:	9a a9       	ldd	r25, Y+50	; 0x32
    34ee:	8f 30       	cpi	r24, 0x0F	; 15
    34f0:	91 05       	cpc	r25, r1
    34f2:	51 f0       	breq	.+20     	; 0x3508 <keypad+0x14a>
    34f4:	0b c0       	rjmp	.+22     	; 0x350c <keypad+0x14e>
            {
            case CALCULATOR_BUTTON_PLUS:
                operation = '+';
    34f6:	8b e2       	ldi	r24, 0x2B	; 43
    34f8:	8a 83       	std	Y+2, r24	; 0x02
    34fa:	08 c0       	rjmp	.+16     	; 0x350c <keypad+0x14e>
                break;
            case CALCULATOR_BUTTON_MINUS:
                operation = '-';
    34fc:	8d e2       	ldi	r24, 0x2D	; 45
    34fe:	8a 83       	std	Y+2, r24	; 0x02
    3500:	05 c0       	rjmp	.+10     	; 0x350c <keypad+0x14e>
                break;
            case CALCULATOR_BUTTON_MUL:
                operation = '*';
    3502:	8a e2       	ldi	r24, 0x2A	; 42
    3504:	8a 83       	std	Y+2, r24	; 0x02
    3506:	02 c0       	rjmp	.+4      	; 0x350c <keypad+0x14e>
                break;
            case CALCULATOR_BUTTON_DIV:
                operation = '/';
    3508:	8f e2       	ldi	r24, 0x2F	; 47
    350a:	8a 83       	std	Y+2, r24	; 0x02
                break;
            default:
                break;
            }
            LCD_DisplayCharacter(operation);
    350c:	8a 81       	ldd	r24, Y+2	; 0x02
    350e:	0e 94 11 10 	call	0x2022	; 0x2022 <LCD_DisplayCharacter>
            cn=0;
    3512:	1e 82       	std	Y+6, r1	; 0x06
            c++;
    3514:	8f 81       	ldd	r24, Y+7	; 0x07
    3516:	8f 5f       	subi	r24, 0xFF	; 255
    3518:	8f 83       	std	Y+7, r24	; 0x07
            arr[c]=operation;
    351a:	8f 81       	ldd	r24, Y+7	; 0x07
    351c:	28 2f       	mov	r18, r24
    351e:	30 e0       	ldi	r19, 0x00	; 0
    3520:	8a 81       	ldd	r24, Y+2	; 0x02
    3522:	48 2f       	mov	r20, r24
    3524:	50 e0       	ldi	r21, 0x00	; 0
    3526:	22 0f       	add	r18, r18
    3528:	33 1f       	adc	r19, r19
    352a:	ce 01       	movw	r24, r28
    352c:	01 96       	adiw	r24, 0x01	; 1
    352e:	82 0f       	add	r24, r18
    3530:	93 1f       	adc	r25, r19
    3532:	fc 01       	movw	r30, r24
    3534:	38 96       	adiw	r30, 0x08	; 8
    3536:	51 83       	std	Z+1, r21	; 0x01
    3538:	40 83       	st	Z, r20
            c++;
    353a:	8f 81       	ldd	r24, Y+7	; 0x07
    353c:	8f 5f       	subi	r24, 0xFF	; 255
    353e:	8f 83       	std	Y+7, r24	; 0x07
    3540:	56 cf       	rjmp	.-340    	; 0x33ee <keypad+0x30>
            
        } else{
            calmuldiv(arr,c);
    3542:	ce 01       	movw	r24, r28
    3544:	09 96       	adiw	r24, 0x09	; 9
    3546:	6f 81       	ldd	r22, Y+7	; 0x07
    3548:	0e 94 23 16 	call	0x2c46	; 0x2c46 <calmuldiv>
            c=0;
    354c:	1f 82       	std	Y+7, r1	; 0x07
            for (u8 i = 0; i < 20; i++)
    354e:	19 82       	std	Y+1, r1	; 0x01
    3550:	11 c0       	rjmp	.+34     	; 0x3574 <keypad+0x1b6>
            {
                arr[i]=0;
    3552:	89 81       	ldd	r24, Y+1	; 0x01
    3554:	88 2f       	mov	r24, r24
    3556:	90 e0       	ldi	r25, 0x00	; 0
    3558:	9c 01       	movw	r18, r24
    355a:	22 0f       	add	r18, r18
    355c:	33 1f       	adc	r19, r19
    355e:	ce 01       	movw	r24, r28
    3560:	01 96       	adiw	r24, 0x01	; 1
    3562:	82 0f       	add	r24, r18
    3564:	93 1f       	adc	r25, r19
    3566:	fc 01       	movw	r30, r24
    3568:	38 96       	adiw	r30, 0x08	; 8
    356a:	11 82       	std	Z+1, r1	; 0x01
    356c:	10 82       	st	Z, r1
            c++;
            
        } else{
            calmuldiv(arr,c);
            c=0;
            for (u8 i = 0; i < 20; i++)
    356e:	89 81       	ldd	r24, Y+1	; 0x01
    3570:	8f 5f       	subi	r24, 0xFF	; 255
    3572:	89 83       	std	Y+1, r24	; 0x01
    3574:	89 81       	ldd	r24, Y+1	; 0x01
    3576:	84 31       	cpi	r24, 0x14	; 20
    3578:	60 f3       	brcs	.-40     	; 0x3552 <keypad+0x194>
    357a:	39 cf       	rjmp	.-398    	; 0x33ee <keypad+0x30>

0000357c <Check_IS_NOtANumber>:
    }



}
u8 Check_IS_NOtANumber (Keypad_ButtonType pressed_button ){
    357c:	df 93       	push	r29
    357e:	cf 93       	push	r28
    3580:	00 d0       	rcall	.+0      	; 0x3582 <Check_IS_NOtANumber+0x6>
    3582:	cd b7       	in	r28, 0x3d	; 61
    3584:	de b7       	in	r29, 0x3e	; 62
    3586:	89 83       	std	Y+1, r24	; 0x01
    if(pressed_button != CALCULATOR_BUTTON_CLR && pressed_button != CALCULATOR_BUTTON_PLUS && pressed_button !=CALCULATOR_BUTTON_MINUS && pressed_button != CALCULATOR_BUTTON_MUL && pressed_button !=CALCULATOR_BUTTON_DIV && pressed_button !=CALCULATOR_BUTTON_EQUAL)
    3588:	89 81       	ldd	r24, Y+1	; 0x01
    358a:	88 23       	and	r24, r24
    358c:	91 f0       	breq	.+36     	; 0x35b2 <Check_IS_NOtANumber+0x36>
    358e:	89 81       	ldd	r24, Y+1	; 0x01
    3590:	83 30       	cpi	r24, 0x03	; 3
    3592:	79 f0       	breq	.+30     	; 0x35b2 <Check_IS_NOtANumber+0x36>
    3594:	89 81       	ldd	r24, Y+1	; 0x01
    3596:	87 30       	cpi	r24, 0x07	; 7
    3598:	61 f0       	breq	.+24     	; 0x35b2 <Check_IS_NOtANumber+0x36>
    359a:	89 81       	ldd	r24, Y+1	; 0x01
    359c:	8b 30       	cpi	r24, 0x0B	; 11
    359e:	49 f0       	breq	.+18     	; 0x35b2 <Check_IS_NOtANumber+0x36>
    35a0:	89 81       	ldd	r24, Y+1	; 0x01
    35a2:	8f 30       	cpi	r24, 0x0F	; 15
    35a4:	31 f0       	breq	.+12     	; 0x35b2 <Check_IS_NOtANumber+0x36>
    35a6:	89 81       	ldd	r24, Y+1	; 0x01
    35a8:	82 30       	cpi	r24, 0x02	; 2
    35aa:	19 f0       	breq	.+6      	; 0x35b2 <Check_IS_NOtANumber+0x36>
    return 1;
    35ac:	81 e0       	ldi	r24, 0x01	; 1
    35ae:	8a 83       	std	Y+2, r24	; 0x02
    35b0:	01 c0       	rjmp	.+2      	; 0x35b4 <Check_IS_NOtANumber+0x38>
    return 0;
    35b2:	1a 82       	std	Y+2, r1	; 0x02
    35b4:	8a 81       	ldd	r24, Y+2	; 0x02
}
    35b6:	0f 90       	pop	r0
    35b8:	0f 90       	pop	r0
    35ba:	cf 91       	pop	r28
    35bc:	df 91       	pop	r29
    35be:	08 95       	ret

000035c0 <__udivmodqi4>:
    35c0:	99 1b       	sub	r25, r25
    35c2:	79 e0       	ldi	r23, 0x09	; 9
    35c4:	04 c0       	rjmp	.+8      	; 0x35ce <__udivmodqi4_ep>

000035c6 <__udivmodqi4_loop>:
    35c6:	99 1f       	adc	r25, r25
    35c8:	96 17       	cp	r25, r22
    35ca:	08 f0       	brcs	.+2      	; 0x35ce <__udivmodqi4_ep>
    35cc:	96 1b       	sub	r25, r22

000035ce <__udivmodqi4_ep>:
    35ce:	88 1f       	adc	r24, r24
    35d0:	7a 95       	dec	r23
    35d2:	c9 f7       	brne	.-14     	; 0x35c6 <__udivmodqi4_loop>
    35d4:	80 95       	com	r24
    35d6:	08 95       	ret

000035d8 <__udivmodhi4>:
    35d8:	aa 1b       	sub	r26, r26
    35da:	bb 1b       	sub	r27, r27
    35dc:	51 e1       	ldi	r21, 0x11	; 17
    35de:	07 c0       	rjmp	.+14     	; 0x35ee <__udivmodhi4_ep>

000035e0 <__udivmodhi4_loop>:
    35e0:	aa 1f       	adc	r26, r26
    35e2:	bb 1f       	adc	r27, r27
    35e4:	a6 17       	cp	r26, r22
    35e6:	b7 07       	cpc	r27, r23
    35e8:	10 f0       	brcs	.+4      	; 0x35ee <__udivmodhi4_ep>
    35ea:	a6 1b       	sub	r26, r22
    35ec:	b7 0b       	sbc	r27, r23

000035ee <__udivmodhi4_ep>:
    35ee:	88 1f       	adc	r24, r24
    35f0:	99 1f       	adc	r25, r25
    35f2:	5a 95       	dec	r21
    35f4:	a9 f7       	brne	.-22     	; 0x35e0 <__udivmodhi4_loop>
    35f6:	80 95       	com	r24
    35f8:	90 95       	com	r25
    35fa:	bc 01       	movw	r22, r24
    35fc:	cd 01       	movw	r24, r26
    35fe:	08 95       	ret

00003600 <__divmodhi4>:
    3600:	97 fb       	bst	r25, 7
    3602:	09 2e       	mov	r0, r25
    3604:	07 26       	eor	r0, r23
    3606:	0a d0       	rcall	.+20     	; 0x361c <__divmodhi4_neg1>
    3608:	77 fd       	sbrc	r23, 7
    360a:	04 d0       	rcall	.+8      	; 0x3614 <__divmodhi4_neg2>
    360c:	e5 df       	rcall	.-54     	; 0x35d8 <__udivmodhi4>
    360e:	06 d0       	rcall	.+12     	; 0x361c <__divmodhi4_neg1>
    3610:	00 20       	and	r0, r0
    3612:	1a f4       	brpl	.+6      	; 0x361a <__divmodhi4_exit>

00003614 <__divmodhi4_neg2>:
    3614:	70 95       	com	r23
    3616:	61 95       	neg	r22
    3618:	7f 4f       	sbci	r23, 0xFF	; 255

0000361a <__divmodhi4_exit>:
    361a:	08 95       	ret

0000361c <__divmodhi4_neg1>:
    361c:	f6 f7       	brtc	.-4      	; 0x361a <__divmodhi4_exit>
    361e:	90 95       	com	r25
    3620:	81 95       	neg	r24
    3622:	9f 4f       	sbci	r25, 0xFF	; 255
    3624:	08 95       	ret

00003626 <__prologue_saves__>:
    3626:	2f 92       	push	r2
    3628:	3f 92       	push	r3
    362a:	4f 92       	push	r4
    362c:	5f 92       	push	r5
    362e:	6f 92       	push	r6
    3630:	7f 92       	push	r7
    3632:	8f 92       	push	r8
    3634:	9f 92       	push	r9
    3636:	af 92       	push	r10
    3638:	bf 92       	push	r11
    363a:	cf 92       	push	r12
    363c:	df 92       	push	r13
    363e:	ef 92       	push	r14
    3640:	ff 92       	push	r15
    3642:	0f 93       	push	r16
    3644:	1f 93       	push	r17
    3646:	cf 93       	push	r28
    3648:	df 93       	push	r29
    364a:	cd b7       	in	r28, 0x3d	; 61
    364c:	de b7       	in	r29, 0x3e	; 62
    364e:	ca 1b       	sub	r28, r26
    3650:	db 0b       	sbc	r29, r27
    3652:	0f b6       	in	r0, 0x3f	; 63
    3654:	f8 94       	cli
    3656:	de bf       	out	0x3e, r29	; 62
    3658:	0f be       	out	0x3f, r0	; 63
    365a:	cd bf       	out	0x3d, r28	; 61
    365c:	09 94       	ijmp

0000365e <__epilogue_restores__>:
    365e:	2a 88       	ldd	r2, Y+18	; 0x12
    3660:	39 88       	ldd	r3, Y+17	; 0x11
    3662:	48 88       	ldd	r4, Y+16	; 0x10
    3664:	5f 84       	ldd	r5, Y+15	; 0x0f
    3666:	6e 84       	ldd	r6, Y+14	; 0x0e
    3668:	7d 84       	ldd	r7, Y+13	; 0x0d
    366a:	8c 84       	ldd	r8, Y+12	; 0x0c
    366c:	9b 84       	ldd	r9, Y+11	; 0x0b
    366e:	aa 84       	ldd	r10, Y+10	; 0x0a
    3670:	b9 84       	ldd	r11, Y+9	; 0x09
    3672:	c8 84       	ldd	r12, Y+8	; 0x08
    3674:	df 80       	ldd	r13, Y+7	; 0x07
    3676:	ee 80       	ldd	r14, Y+6	; 0x06
    3678:	fd 80       	ldd	r15, Y+5	; 0x05
    367a:	0c 81       	ldd	r16, Y+4	; 0x04
    367c:	1b 81       	ldd	r17, Y+3	; 0x03
    367e:	aa 81       	ldd	r26, Y+2	; 0x02
    3680:	b9 81       	ldd	r27, Y+1	; 0x01
    3682:	ce 0f       	add	r28, r30
    3684:	d1 1d       	adc	r29, r1
    3686:	0f b6       	in	r0, 0x3f	; 63
    3688:	f8 94       	cli
    368a:	de bf       	out	0x3e, r29	; 62
    368c:	0f be       	out	0x3f, r0	; 63
    368e:	cd bf       	out	0x3d, r28	; 61
    3690:	ed 01       	movw	r28, r26
    3692:	08 95       	ret

00003694 <_exit>:
    3694:	f8 94       	cli

00003696 <__stop_program>:
    3696:	ff cf       	rjmp	.-2      	; 0x3696 <__stop_program>
