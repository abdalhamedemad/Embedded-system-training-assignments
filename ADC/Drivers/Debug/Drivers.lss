
Drivers.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         00005090  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .data         00000126  00800060  00005090  00005124  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  2 .bss          00000018  00800186  00800186  0000524a  2**0
                  ALLOC
  3 .stab         000051b4  00000000  00000000  0000524c  2**2
                  CONTENTS, READONLY, DEBUGGING
  4 .stabstr      00002608  00000000  00000000  0000a400  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_aranges 00000180  00000000  00000000  0000ca08  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_pubnames 000001d3  00000000  00000000  0000cb88  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_info   0000200f  00000000  00000000  0000cd5b  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_abbrev 00001170  00000000  00000000  0000ed6a  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_line   00001001  00000000  00000000  0000feda  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_frame  000001a0  00000000  00000000  00010edc  2**2
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_str    000002c1  00000000  00000000  0001107c  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_loc    000008ae  00000000  00000000  0001133d  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_ranges 00000050  00000000  00000000  00011beb  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
       0:	0c 94 2a 00 	jmp	0x54	; 0x54 <__ctors_end>
       4:	0c 94 2f 0f 	jmp	0x1e5e	; 0x1e5e <__vector_1>
       8:	0c 94 5c 0f 	jmp	0x1eb8	; 0x1eb8 <__vector_2>
       c:	0c 94 89 0f 	jmp	0x1f12	; 0x1f12 <__vector_3>
      10:	0c 94 2a 11 	jmp	0x2254	; 0x2254 <__vector_4>
      14:	0c 94 57 11 	jmp	0x22ae	; 0x22ae <__vector_5>
      18:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      1c:	0c 94 a3 10 	jmp	0x2146	; 0x2146 <__vector_7>
      20:	0c 94 fd 10 	jmp	0x21fa	; 0x21fa <__vector_8>
      24:	0c 94 d0 10 	jmp	0x21a0	; 0x21a0 <__vector_9>
      28:	0c 94 49 10 	jmp	0x2092	; 0x2092 <__vector_10>
      2c:	0c 94 76 10 	jmp	0x20ec	; 0x20ec <__vector_11>
      30:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      34:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      38:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      3c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      40:	0c 94 6b 06 	jmp	0xcd6	; 0xcd6 <__vector_16>
      44:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      48:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      4c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      50:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>

00000054 <__ctors_end>:
      54:	11 24       	eor	r1, r1
      56:	1f be       	out	0x3f, r1	; 63
      58:	cf e5       	ldi	r28, 0x5F	; 95
      5a:	d8 e0       	ldi	r29, 0x08	; 8
      5c:	de bf       	out	0x3e, r29	; 62
      5e:	cd bf       	out	0x3d, r28	; 61

00000060 <__do_copy_data>:
      60:	11 e0       	ldi	r17, 0x01	; 1
      62:	a0 e6       	ldi	r26, 0x60	; 96
      64:	b0 e0       	ldi	r27, 0x00	; 0
      66:	e0 e9       	ldi	r30, 0x90	; 144
      68:	f0 e5       	ldi	r31, 0x50	; 80
      6a:	02 c0       	rjmp	.+4      	; 0x70 <.do_copy_data_start>

0000006c <.do_copy_data_loop>:
      6c:	05 90       	lpm	r0, Z+
      6e:	0d 92       	st	X+, r0

00000070 <.do_copy_data_start>:
      70:	a6 38       	cpi	r26, 0x86	; 134
      72:	b1 07       	cpc	r27, r17
      74:	d9 f7       	brne	.-10     	; 0x6c <.do_copy_data_loop>

00000076 <__do_clear_bss>:
      76:	11 e0       	ldi	r17, 0x01	; 1
      78:	a6 e8       	ldi	r26, 0x86	; 134
      7a:	b1 e0       	ldi	r27, 0x01	; 1
      7c:	01 c0       	rjmp	.+2      	; 0x80 <.do_clear_bss_start>

0000007e <.do_clear_bss_loop>:
      7e:	1d 92       	st	X+, r1

00000080 <.do_clear_bss_start>:
      80:	ae 39       	cpi	r26, 0x9E	; 158
      82:	b1 07       	cpc	r27, r17
      84:	e1 f7       	brne	.-8      	; 0x7e <.do_clear_bss_loop>
      86:	0e 94 73 26 	call	0x4ce6	; 0x4ce6 <main>
      8a:	0c 94 46 28 	jmp	0x508c	; 0x508c <_exit>

0000008e <__bad_interrupt>:
      8e:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

00000092 <__fixunssfsi>:
      92:	ef 92       	push	r14
      94:	ff 92       	push	r15
      96:	0f 93       	push	r16
      98:	1f 93       	push	r17
      9a:	7b 01       	movw	r14, r22
      9c:	8c 01       	movw	r16, r24
      9e:	20 e0       	ldi	r18, 0x00	; 0
      a0:	30 e0       	ldi	r19, 0x00	; 0
      a2:	40 e0       	ldi	r20, 0x00	; 0
      a4:	5f e4       	ldi	r21, 0x4F	; 79
      a6:	0e 94 49 03 	call	0x692	; 0x692 <__gesf2>
      aa:	88 23       	and	r24, r24
      ac:	8c f0       	brlt	.+34     	; 0xd0 <__fixunssfsi+0x3e>
      ae:	c8 01       	movw	r24, r16
      b0:	b7 01       	movw	r22, r14
      b2:	20 e0       	ldi	r18, 0x00	; 0
      b4:	30 e0       	ldi	r19, 0x00	; 0
      b6:	40 e0       	ldi	r20, 0x00	; 0
      b8:	5f e4       	ldi	r21, 0x4F	; 79
      ba:	0e 94 c1 01 	call	0x382	; 0x382 <__subsf3>
      be:	0e 94 a9 03 	call	0x752	; 0x752 <__fixsfsi>
      c2:	9b 01       	movw	r18, r22
      c4:	ac 01       	movw	r20, r24
      c6:	20 50       	subi	r18, 0x00	; 0
      c8:	30 40       	sbci	r19, 0x00	; 0
      ca:	40 40       	sbci	r20, 0x00	; 0
      cc:	50 48       	sbci	r21, 0x80	; 128
      ce:	06 c0       	rjmp	.+12     	; 0xdc <__fixunssfsi+0x4a>
      d0:	c8 01       	movw	r24, r16
      d2:	b7 01       	movw	r22, r14
      d4:	0e 94 a9 03 	call	0x752	; 0x752 <__fixsfsi>
      d8:	9b 01       	movw	r18, r22
      da:	ac 01       	movw	r20, r24
      dc:	b9 01       	movw	r22, r18
      de:	ca 01       	movw	r24, r20
      e0:	1f 91       	pop	r17
      e2:	0f 91       	pop	r16
      e4:	ff 90       	pop	r15
      e6:	ef 90       	pop	r14
      e8:	08 95       	ret

000000ea <_fpadd_parts>:
      ea:	a0 e0       	ldi	r26, 0x00	; 0
      ec:	b0 e0       	ldi	r27, 0x00	; 0
      ee:	eb e7       	ldi	r30, 0x7B	; 123
      f0:	f0 e0       	ldi	r31, 0x00	; 0
      f2:	0c 94 0f 28 	jmp	0x501e	; 0x501e <__prologue_saves__>
      f6:	dc 01       	movw	r26, r24
      f8:	2b 01       	movw	r4, r22
      fa:	fa 01       	movw	r30, r20
      fc:	9c 91       	ld	r25, X
      fe:	92 30       	cpi	r25, 0x02	; 2
     100:	08 f4       	brcc	.+2      	; 0x104 <_fpadd_parts+0x1a>
     102:	39 c1       	rjmp	.+626    	; 0x376 <_fpadd_parts+0x28c>
     104:	eb 01       	movw	r28, r22
     106:	88 81       	ld	r24, Y
     108:	82 30       	cpi	r24, 0x02	; 2
     10a:	08 f4       	brcc	.+2      	; 0x10e <_fpadd_parts+0x24>
     10c:	33 c1       	rjmp	.+614    	; 0x374 <_fpadd_parts+0x28a>
     10e:	94 30       	cpi	r25, 0x04	; 4
     110:	69 f4       	brne	.+26     	; 0x12c <_fpadd_parts+0x42>
     112:	84 30       	cpi	r24, 0x04	; 4
     114:	09 f0       	breq	.+2      	; 0x118 <_fpadd_parts+0x2e>
     116:	2f c1       	rjmp	.+606    	; 0x376 <_fpadd_parts+0x28c>
     118:	11 96       	adiw	r26, 0x01	; 1
     11a:	9c 91       	ld	r25, X
     11c:	11 97       	sbiw	r26, 0x01	; 1
     11e:	89 81       	ldd	r24, Y+1	; 0x01
     120:	98 17       	cp	r25, r24
     122:	09 f4       	brne	.+2      	; 0x126 <_fpadd_parts+0x3c>
     124:	28 c1       	rjmp	.+592    	; 0x376 <_fpadd_parts+0x28c>
     126:	ad e7       	ldi	r26, 0x7D	; 125
     128:	b0 e0       	ldi	r27, 0x00	; 0
     12a:	25 c1       	rjmp	.+586    	; 0x376 <_fpadd_parts+0x28c>
     12c:	84 30       	cpi	r24, 0x04	; 4
     12e:	09 f4       	brne	.+2      	; 0x132 <_fpadd_parts+0x48>
     130:	21 c1       	rjmp	.+578    	; 0x374 <_fpadd_parts+0x28a>
     132:	82 30       	cpi	r24, 0x02	; 2
     134:	a9 f4       	brne	.+42     	; 0x160 <_fpadd_parts+0x76>
     136:	92 30       	cpi	r25, 0x02	; 2
     138:	09 f0       	breq	.+2      	; 0x13c <_fpadd_parts+0x52>
     13a:	1d c1       	rjmp	.+570    	; 0x376 <_fpadd_parts+0x28c>
     13c:	9a 01       	movw	r18, r20
     13e:	ad 01       	movw	r20, r26
     140:	88 e0       	ldi	r24, 0x08	; 8
     142:	ea 01       	movw	r28, r20
     144:	09 90       	ld	r0, Y+
     146:	ae 01       	movw	r20, r28
     148:	e9 01       	movw	r28, r18
     14a:	09 92       	st	Y+, r0
     14c:	9e 01       	movw	r18, r28
     14e:	81 50       	subi	r24, 0x01	; 1
     150:	c1 f7       	brne	.-16     	; 0x142 <_fpadd_parts+0x58>
     152:	e2 01       	movw	r28, r4
     154:	89 81       	ldd	r24, Y+1	; 0x01
     156:	11 96       	adiw	r26, 0x01	; 1
     158:	9c 91       	ld	r25, X
     15a:	89 23       	and	r24, r25
     15c:	81 83       	std	Z+1, r24	; 0x01
     15e:	08 c1       	rjmp	.+528    	; 0x370 <_fpadd_parts+0x286>
     160:	92 30       	cpi	r25, 0x02	; 2
     162:	09 f4       	brne	.+2      	; 0x166 <_fpadd_parts+0x7c>
     164:	07 c1       	rjmp	.+526    	; 0x374 <_fpadd_parts+0x28a>
     166:	12 96       	adiw	r26, 0x02	; 2
     168:	2d 90       	ld	r2, X+
     16a:	3c 90       	ld	r3, X
     16c:	13 97       	sbiw	r26, 0x03	; 3
     16e:	eb 01       	movw	r28, r22
     170:	8a 81       	ldd	r24, Y+2	; 0x02
     172:	9b 81       	ldd	r25, Y+3	; 0x03
     174:	14 96       	adiw	r26, 0x04	; 4
     176:	ad 90       	ld	r10, X+
     178:	bd 90       	ld	r11, X+
     17a:	cd 90       	ld	r12, X+
     17c:	dc 90       	ld	r13, X
     17e:	17 97       	sbiw	r26, 0x07	; 7
     180:	ec 80       	ldd	r14, Y+4	; 0x04
     182:	fd 80       	ldd	r15, Y+5	; 0x05
     184:	0e 81       	ldd	r16, Y+6	; 0x06
     186:	1f 81       	ldd	r17, Y+7	; 0x07
     188:	91 01       	movw	r18, r2
     18a:	28 1b       	sub	r18, r24
     18c:	39 0b       	sbc	r19, r25
     18e:	b9 01       	movw	r22, r18
     190:	37 ff       	sbrs	r19, 7
     192:	04 c0       	rjmp	.+8      	; 0x19c <_fpadd_parts+0xb2>
     194:	66 27       	eor	r22, r22
     196:	77 27       	eor	r23, r23
     198:	62 1b       	sub	r22, r18
     19a:	73 0b       	sbc	r23, r19
     19c:	60 32       	cpi	r22, 0x20	; 32
     19e:	71 05       	cpc	r23, r1
     1a0:	0c f0       	brlt	.+2      	; 0x1a4 <_fpadd_parts+0xba>
     1a2:	61 c0       	rjmp	.+194    	; 0x266 <_fpadd_parts+0x17c>
     1a4:	12 16       	cp	r1, r18
     1a6:	13 06       	cpc	r1, r19
     1a8:	6c f5       	brge	.+90     	; 0x204 <_fpadd_parts+0x11a>
     1aa:	37 01       	movw	r6, r14
     1ac:	48 01       	movw	r8, r16
     1ae:	06 2e       	mov	r0, r22
     1b0:	04 c0       	rjmp	.+8      	; 0x1ba <_fpadd_parts+0xd0>
     1b2:	96 94       	lsr	r9
     1b4:	87 94       	ror	r8
     1b6:	77 94       	ror	r7
     1b8:	67 94       	ror	r6
     1ba:	0a 94       	dec	r0
     1bc:	d2 f7       	brpl	.-12     	; 0x1b2 <_fpadd_parts+0xc8>
     1be:	21 e0       	ldi	r18, 0x01	; 1
     1c0:	30 e0       	ldi	r19, 0x00	; 0
     1c2:	40 e0       	ldi	r20, 0x00	; 0
     1c4:	50 e0       	ldi	r21, 0x00	; 0
     1c6:	04 c0       	rjmp	.+8      	; 0x1d0 <_fpadd_parts+0xe6>
     1c8:	22 0f       	add	r18, r18
     1ca:	33 1f       	adc	r19, r19
     1cc:	44 1f       	adc	r20, r20
     1ce:	55 1f       	adc	r21, r21
     1d0:	6a 95       	dec	r22
     1d2:	d2 f7       	brpl	.-12     	; 0x1c8 <_fpadd_parts+0xde>
     1d4:	21 50       	subi	r18, 0x01	; 1
     1d6:	30 40       	sbci	r19, 0x00	; 0
     1d8:	40 40       	sbci	r20, 0x00	; 0
     1da:	50 40       	sbci	r21, 0x00	; 0
     1dc:	2e 21       	and	r18, r14
     1de:	3f 21       	and	r19, r15
     1e0:	40 23       	and	r20, r16
     1e2:	51 23       	and	r21, r17
     1e4:	21 15       	cp	r18, r1
     1e6:	31 05       	cpc	r19, r1
     1e8:	41 05       	cpc	r20, r1
     1ea:	51 05       	cpc	r21, r1
     1ec:	21 f0       	breq	.+8      	; 0x1f6 <_fpadd_parts+0x10c>
     1ee:	21 e0       	ldi	r18, 0x01	; 1
     1f0:	30 e0       	ldi	r19, 0x00	; 0
     1f2:	40 e0       	ldi	r20, 0x00	; 0
     1f4:	50 e0       	ldi	r21, 0x00	; 0
     1f6:	79 01       	movw	r14, r18
     1f8:	8a 01       	movw	r16, r20
     1fa:	e6 28       	or	r14, r6
     1fc:	f7 28       	or	r15, r7
     1fe:	08 29       	or	r16, r8
     200:	19 29       	or	r17, r9
     202:	3c c0       	rjmp	.+120    	; 0x27c <_fpadd_parts+0x192>
     204:	23 2b       	or	r18, r19
     206:	d1 f1       	breq	.+116    	; 0x27c <_fpadd_parts+0x192>
     208:	26 0e       	add	r2, r22
     20a:	37 1e       	adc	r3, r23
     20c:	35 01       	movw	r6, r10
     20e:	46 01       	movw	r8, r12
     210:	06 2e       	mov	r0, r22
     212:	04 c0       	rjmp	.+8      	; 0x21c <_fpadd_parts+0x132>
     214:	96 94       	lsr	r9
     216:	87 94       	ror	r8
     218:	77 94       	ror	r7
     21a:	67 94       	ror	r6
     21c:	0a 94       	dec	r0
     21e:	d2 f7       	brpl	.-12     	; 0x214 <_fpadd_parts+0x12a>
     220:	21 e0       	ldi	r18, 0x01	; 1
     222:	30 e0       	ldi	r19, 0x00	; 0
     224:	40 e0       	ldi	r20, 0x00	; 0
     226:	50 e0       	ldi	r21, 0x00	; 0
     228:	04 c0       	rjmp	.+8      	; 0x232 <_fpadd_parts+0x148>
     22a:	22 0f       	add	r18, r18
     22c:	33 1f       	adc	r19, r19
     22e:	44 1f       	adc	r20, r20
     230:	55 1f       	adc	r21, r21
     232:	6a 95       	dec	r22
     234:	d2 f7       	brpl	.-12     	; 0x22a <_fpadd_parts+0x140>
     236:	21 50       	subi	r18, 0x01	; 1
     238:	30 40       	sbci	r19, 0x00	; 0
     23a:	40 40       	sbci	r20, 0x00	; 0
     23c:	50 40       	sbci	r21, 0x00	; 0
     23e:	2a 21       	and	r18, r10
     240:	3b 21       	and	r19, r11
     242:	4c 21       	and	r20, r12
     244:	5d 21       	and	r21, r13
     246:	21 15       	cp	r18, r1
     248:	31 05       	cpc	r19, r1
     24a:	41 05       	cpc	r20, r1
     24c:	51 05       	cpc	r21, r1
     24e:	21 f0       	breq	.+8      	; 0x258 <_fpadd_parts+0x16e>
     250:	21 e0       	ldi	r18, 0x01	; 1
     252:	30 e0       	ldi	r19, 0x00	; 0
     254:	40 e0       	ldi	r20, 0x00	; 0
     256:	50 e0       	ldi	r21, 0x00	; 0
     258:	59 01       	movw	r10, r18
     25a:	6a 01       	movw	r12, r20
     25c:	a6 28       	or	r10, r6
     25e:	b7 28       	or	r11, r7
     260:	c8 28       	or	r12, r8
     262:	d9 28       	or	r13, r9
     264:	0b c0       	rjmp	.+22     	; 0x27c <_fpadd_parts+0x192>
     266:	82 15       	cp	r24, r2
     268:	93 05       	cpc	r25, r3
     26a:	2c f0       	brlt	.+10     	; 0x276 <_fpadd_parts+0x18c>
     26c:	1c 01       	movw	r2, r24
     26e:	aa 24       	eor	r10, r10
     270:	bb 24       	eor	r11, r11
     272:	65 01       	movw	r12, r10
     274:	03 c0       	rjmp	.+6      	; 0x27c <_fpadd_parts+0x192>
     276:	ee 24       	eor	r14, r14
     278:	ff 24       	eor	r15, r15
     27a:	87 01       	movw	r16, r14
     27c:	11 96       	adiw	r26, 0x01	; 1
     27e:	9c 91       	ld	r25, X
     280:	d2 01       	movw	r26, r4
     282:	11 96       	adiw	r26, 0x01	; 1
     284:	8c 91       	ld	r24, X
     286:	98 17       	cp	r25, r24
     288:	09 f4       	brne	.+2      	; 0x28c <_fpadd_parts+0x1a2>
     28a:	45 c0       	rjmp	.+138    	; 0x316 <_fpadd_parts+0x22c>
     28c:	99 23       	and	r25, r25
     28e:	39 f0       	breq	.+14     	; 0x29e <_fpadd_parts+0x1b4>
     290:	a8 01       	movw	r20, r16
     292:	97 01       	movw	r18, r14
     294:	2a 19       	sub	r18, r10
     296:	3b 09       	sbc	r19, r11
     298:	4c 09       	sbc	r20, r12
     29a:	5d 09       	sbc	r21, r13
     29c:	06 c0       	rjmp	.+12     	; 0x2aa <_fpadd_parts+0x1c0>
     29e:	a6 01       	movw	r20, r12
     2a0:	95 01       	movw	r18, r10
     2a2:	2e 19       	sub	r18, r14
     2a4:	3f 09       	sbc	r19, r15
     2a6:	40 0b       	sbc	r20, r16
     2a8:	51 0b       	sbc	r21, r17
     2aa:	57 fd       	sbrc	r21, 7
     2ac:	08 c0       	rjmp	.+16     	; 0x2be <_fpadd_parts+0x1d4>
     2ae:	11 82       	std	Z+1, r1	; 0x01
     2b0:	33 82       	std	Z+3, r3	; 0x03
     2b2:	22 82       	std	Z+2, r2	; 0x02
     2b4:	24 83       	std	Z+4, r18	; 0x04
     2b6:	35 83       	std	Z+5, r19	; 0x05
     2b8:	46 83       	std	Z+6, r20	; 0x06
     2ba:	57 83       	std	Z+7, r21	; 0x07
     2bc:	1d c0       	rjmp	.+58     	; 0x2f8 <_fpadd_parts+0x20e>
     2be:	81 e0       	ldi	r24, 0x01	; 1
     2c0:	81 83       	std	Z+1, r24	; 0x01
     2c2:	33 82       	std	Z+3, r3	; 0x03
     2c4:	22 82       	std	Z+2, r2	; 0x02
     2c6:	88 27       	eor	r24, r24
     2c8:	99 27       	eor	r25, r25
     2ca:	dc 01       	movw	r26, r24
     2cc:	82 1b       	sub	r24, r18
     2ce:	93 0b       	sbc	r25, r19
     2d0:	a4 0b       	sbc	r26, r20
     2d2:	b5 0b       	sbc	r27, r21
     2d4:	84 83       	std	Z+4, r24	; 0x04
     2d6:	95 83       	std	Z+5, r25	; 0x05
     2d8:	a6 83       	std	Z+6, r26	; 0x06
     2da:	b7 83       	std	Z+7, r27	; 0x07
     2dc:	0d c0       	rjmp	.+26     	; 0x2f8 <_fpadd_parts+0x20e>
     2de:	22 0f       	add	r18, r18
     2e0:	33 1f       	adc	r19, r19
     2e2:	44 1f       	adc	r20, r20
     2e4:	55 1f       	adc	r21, r21
     2e6:	24 83       	std	Z+4, r18	; 0x04
     2e8:	35 83       	std	Z+5, r19	; 0x05
     2ea:	46 83       	std	Z+6, r20	; 0x06
     2ec:	57 83       	std	Z+7, r21	; 0x07
     2ee:	82 81       	ldd	r24, Z+2	; 0x02
     2f0:	93 81       	ldd	r25, Z+3	; 0x03
     2f2:	01 97       	sbiw	r24, 0x01	; 1
     2f4:	93 83       	std	Z+3, r25	; 0x03
     2f6:	82 83       	std	Z+2, r24	; 0x02
     2f8:	24 81       	ldd	r18, Z+4	; 0x04
     2fa:	35 81       	ldd	r19, Z+5	; 0x05
     2fc:	46 81       	ldd	r20, Z+6	; 0x06
     2fe:	57 81       	ldd	r21, Z+7	; 0x07
     300:	da 01       	movw	r26, r20
     302:	c9 01       	movw	r24, r18
     304:	01 97       	sbiw	r24, 0x01	; 1
     306:	a1 09       	sbc	r26, r1
     308:	b1 09       	sbc	r27, r1
     30a:	8f 5f       	subi	r24, 0xFF	; 255
     30c:	9f 4f       	sbci	r25, 0xFF	; 255
     30e:	af 4f       	sbci	r26, 0xFF	; 255
     310:	bf 43       	sbci	r27, 0x3F	; 63
     312:	28 f3       	brcs	.-54     	; 0x2de <_fpadd_parts+0x1f4>
     314:	0b c0       	rjmp	.+22     	; 0x32c <_fpadd_parts+0x242>
     316:	91 83       	std	Z+1, r25	; 0x01
     318:	33 82       	std	Z+3, r3	; 0x03
     31a:	22 82       	std	Z+2, r2	; 0x02
     31c:	ea 0c       	add	r14, r10
     31e:	fb 1c       	adc	r15, r11
     320:	0c 1d       	adc	r16, r12
     322:	1d 1d       	adc	r17, r13
     324:	e4 82       	std	Z+4, r14	; 0x04
     326:	f5 82       	std	Z+5, r15	; 0x05
     328:	06 83       	std	Z+6, r16	; 0x06
     32a:	17 83       	std	Z+7, r17	; 0x07
     32c:	83 e0       	ldi	r24, 0x03	; 3
     32e:	80 83       	st	Z, r24
     330:	24 81       	ldd	r18, Z+4	; 0x04
     332:	35 81       	ldd	r19, Z+5	; 0x05
     334:	46 81       	ldd	r20, Z+6	; 0x06
     336:	57 81       	ldd	r21, Z+7	; 0x07
     338:	57 ff       	sbrs	r21, 7
     33a:	1a c0       	rjmp	.+52     	; 0x370 <_fpadd_parts+0x286>
     33c:	c9 01       	movw	r24, r18
     33e:	aa 27       	eor	r26, r26
     340:	97 fd       	sbrc	r25, 7
     342:	a0 95       	com	r26
     344:	ba 2f       	mov	r27, r26
     346:	81 70       	andi	r24, 0x01	; 1
     348:	90 70       	andi	r25, 0x00	; 0
     34a:	a0 70       	andi	r26, 0x00	; 0
     34c:	b0 70       	andi	r27, 0x00	; 0
     34e:	56 95       	lsr	r21
     350:	47 95       	ror	r20
     352:	37 95       	ror	r19
     354:	27 95       	ror	r18
     356:	82 2b       	or	r24, r18
     358:	93 2b       	or	r25, r19
     35a:	a4 2b       	or	r26, r20
     35c:	b5 2b       	or	r27, r21
     35e:	84 83       	std	Z+4, r24	; 0x04
     360:	95 83       	std	Z+5, r25	; 0x05
     362:	a6 83       	std	Z+6, r26	; 0x06
     364:	b7 83       	std	Z+7, r27	; 0x07
     366:	82 81       	ldd	r24, Z+2	; 0x02
     368:	93 81       	ldd	r25, Z+3	; 0x03
     36a:	01 96       	adiw	r24, 0x01	; 1
     36c:	93 83       	std	Z+3, r25	; 0x03
     36e:	82 83       	std	Z+2, r24	; 0x02
     370:	df 01       	movw	r26, r30
     372:	01 c0       	rjmp	.+2      	; 0x376 <_fpadd_parts+0x28c>
     374:	d2 01       	movw	r26, r4
     376:	cd 01       	movw	r24, r26
     378:	cd b7       	in	r28, 0x3d	; 61
     37a:	de b7       	in	r29, 0x3e	; 62
     37c:	e2 e1       	ldi	r30, 0x12	; 18
     37e:	0c 94 2b 28 	jmp	0x5056	; 0x5056 <__epilogue_restores__>

00000382 <__subsf3>:
     382:	a0 e2       	ldi	r26, 0x20	; 32
     384:	b0 e0       	ldi	r27, 0x00	; 0
     386:	e7 ec       	ldi	r30, 0xC7	; 199
     388:	f1 e0       	ldi	r31, 0x01	; 1
     38a:	0c 94 1b 28 	jmp	0x5036	; 0x5036 <__prologue_saves__+0x18>
     38e:	69 83       	std	Y+1, r22	; 0x01
     390:	7a 83       	std	Y+2, r23	; 0x02
     392:	8b 83       	std	Y+3, r24	; 0x03
     394:	9c 83       	std	Y+4, r25	; 0x04
     396:	2d 83       	std	Y+5, r18	; 0x05
     398:	3e 83       	std	Y+6, r19	; 0x06
     39a:	4f 83       	std	Y+7, r20	; 0x07
     39c:	58 87       	std	Y+8, r21	; 0x08
     39e:	e9 e0       	ldi	r30, 0x09	; 9
     3a0:	ee 2e       	mov	r14, r30
     3a2:	f1 2c       	mov	r15, r1
     3a4:	ec 0e       	add	r14, r28
     3a6:	fd 1e       	adc	r15, r29
     3a8:	ce 01       	movw	r24, r28
     3aa:	01 96       	adiw	r24, 0x01	; 1
     3ac:	b7 01       	movw	r22, r14
     3ae:	0e 94 9a 05 	call	0xb34	; 0xb34 <__unpack_f>
     3b2:	8e 01       	movw	r16, r28
     3b4:	0f 5e       	subi	r16, 0xEF	; 239
     3b6:	1f 4f       	sbci	r17, 0xFF	; 255
     3b8:	ce 01       	movw	r24, r28
     3ba:	05 96       	adiw	r24, 0x05	; 5
     3bc:	b8 01       	movw	r22, r16
     3be:	0e 94 9a 05 	call	0xb34	; 0xb34 <__unpack_f>
     3c2:	8a 89       	ldd	r24, Y+18	; 0x12
     3c4:	91 e0       	ldi	r25, 0x01	; 1
     3c6:	89 27       	eor	r24, r25
     3c8:	8a 8b       	std	Y+18, r24	; 0x12
     3ca:	c7 01       	movw	r24, r14
     3cc:	b8 01       	movw	r22, r16
     3ce:	ae 01       	movw	r20, r28
     3d0:	47 5e       	subi	r20, 0xE7	; 231
     3d2:	5f 4f       	sbci	r21, 0xFF	; 255
     3d4:	0e 94 75 00 	call	0xea	; 0xea <_fpadd_parts>
     3d8:	0e 94 c5 04 	call	0x98a	; 0x98a <__pack_f>
     3dc:	a0 96       	adiw	r28, 0x20	; 32
     3de:	e6 e0       	ldi	r30, 0x06	; 6
     3e0:	0c 94 37 28 	jmp	0x506e	; 0x506e <__epilogue_restores__+0x18>

000003e4 <__addsf3>:
     3e4:	a0 e2       	ldi	r26, 0x20	; 32
     3e6:	b0 e0       	ldi	r27, 0x00	; 0
     3e8:	e8 ef       	ldi	r30, 0xF8	; 248
     3ea:	f1 e0       	ldi	r31, 0x01	; 1
     3ec:	0c 94 1b 28 	jmp	0x5036	; 0x5036 <__prologue_saves__+0x18>
     3f0:	69 83       	std	Y+1, r22	; 0x01
     3f2:	7a 83       	std	Y+2, r23	; 0x02
     3f4:	8b 83       	std	Y+3, r24	; 0x03
     3f6:	9c 83       	std	Y+4, r25	; 0x04
     3f8:	2d 83       	std	Y+5, r18	; 0x05
     3fa:	3e 83       	std	Y+6, r19	; 0x06
     3fc:	4f 83       	std	Y+7, r20	; 0x07
     3fe:	58 87       	std	Y+8, r21	; 0x08
     400:	f9 e0       	ldi	r31, 0x09	; 9
     402:	ef 2e       	mov	r14, r31
     404:	f1 2c       	mov	r15, r1
     406:	ec 0e       	add	r14, r28
     408:	fd 1e       	adc	r15, r29
     40a:	ce 01       	movw	r24, r28
     40c:	01 96       	adiw	r24, 0x01	; 1
     40e:	b7 01       	movw	r22, r14
     410:	0e 94 9a 05 	call	0xb34	; 0xb34 <__unpack_f>
     414:	8e 01       	movw	r16, r28
     416:	0f 5e       	subi	r16, 0xEF	; 239
     418:	1f 4f       	sbci	r17, 0xFF	; 255
     41a:	ce 01       	movw	r24, r28
     41c:	05 96       	adiw	r24, 0x05	; 5
     41e:	b8 01       	movw	r22, r16
     420:	0e 94 9a 05 	call	0xb34	; 0xb34 <__unpack_f>
     424:	c7 01       	movw	r24, r14
     426:	b8 01       	movw	r22, r16
     428:	ae 01       	movw	r20, r28
     42a:	47 5e       	subi	r20, 0xE7	; 231
     42c:	5f 4f       	sbci	r21, 0xFF	; 255
     42e:	0e 94 75 00 	call	0xea	; 0xea <_fpadd_parts>
     432:	0e 94 c5 04 	call	0x98a	; 0x98a <__pack_f>
     436:	a0 96       	adiw	r28, 0x20	; 32
     438:	e6 e0       	ldi	r30, 0x06	; 6
     43a:	0c 94 37 28 	jmp	0x506e	; 0x506e <__epilogue_restores__+0x18>

0000043e <__mulsf3>:
     43e:	a0 e2       	ldi	r26, 0x20	; 32
     440:	b0 e0       	ldi	r27, 0x00	; 0
     442:	e5 e2       	ldi	r30, 0x25	; 37
     444:	f2 e0       	ldi	r31, 0x02	; 2
     446:	0c 94 0f 28 	jmp	0x501e	; 0x501e <__prologue_saves__>
     44a:	69 83       	std	Y+1, r22	; 0x01
     44c:	7a 83       	std	Y+2, r23	; 0x02
     44e:	8b 83       	std	Y+3, r24	; 0x03
     450:	9c 83       	std	Y+4, r25	; 0x04
     452:	2d 83       	std	Y+5, r18	; 0x05
     454:	3e 83       	std	Y+6, r19	; 0x06
     456:	4f 83       	std	Y+7, r20	; 0x07
     458:	58 87       	std	Y+8, r21	; 0x08
     45a:	ce 01       	movw	r24, r28
     45c:	01 96       	adiw	r24, 0x01	; 1
     45e:	be 01       	movw	r22, r28
     460:	67 5f       	subi	r22, 0xF7	; 247
     462:	7f 4f       	sbci	r23, 0xFF	; 255
     464:	0e 94 9a 05 	call	0xb34	; 0xb34 <__unpack_f>
     468:	ce 01       	movw	r24, r28
     46a:	05 96       	adiw	r24, 0x05	; 5
     46c:	be 01       	movw	r22, r28
     46e:	6f 5e       	subi	r22, 0xEF	; 239
     470:	7f 4f       	sbci	r23, 0xFF	; 255
     472:	0e 94 9a 05 	call	0xb34	; 0xb34 <__unpack_f>
     476:	99 85       	ldd	r25, Y+9	; 0x09
     478:	92 30       	cpi	r25, 0x02	; 2
     47a:	88 f0       	brcs	.+34     	; 0x49e <__mulsf3+0x60>
     47c:	89 89       	ldd	r24, Y+17	; 0x11
     47e:	82 30       	cpi	r24, 0x02	; 2
     480:	c8 f0       	brcs	.+50     	; 0x4b4 <__mulsf3+0x76>
     482:	94 30       	cpi	r25, 0x04	; 4
     484:	19 f4       	brne	.+6      	; 0x48c <__mulsf3+0x4e>
     486:	82 30       	cpi	r24, 0x02	; 2
     488:	51 f4       	brne	.+20     	; 0x49e <__mulsf3+0x60>
     48a:	04 c0       	rjmp	.+8      	; 0x494 <__mulsf3+0x56>
     48c:	84 30       	cpi	r24, 0x04	; 4
     48e:	29 f4       	brne	.+10     	; 0x49a <__mulsf3+0x5c>
     490:	92 30       	cpi	r25, 0x02	; 2
     492:	81 f4       	brne	.+32     	; 0x4b4 <__mulsf3+0x76>
     494:	8d e7       	ldi	r24, 0x7D	; 125
     496:	90 e0       	ldi	r25, 0x00	; 0
     498:	c6 c0       	rjmp	.+396    	; 0x626 <__mulsf3+0x1e8>
     49a:	92 30       	cpi	r25, 0x02	; 2
     49c:	49 f4       	brne	.+18     	; 0x4b0 <__mulsf3+0x72>
     49e:	20 e0       	ldi	r18, 0x00	; 0
     4a0:	9a 85       	ldd	r25, Y+10	; 0x0a
     4a2:	8a 89       	ldd	r24, Y+18	; 0x12
     4a4:	98 13       	cpse	r25, r24
     4a6:	21 e0       	ldi	r18, 0x01	; 1
     4a8:	2a 87       	std	Y+10, r18	; 0x0a
     4aa:	ce 01       	movw	r24, r28
     4ac:	09 96       	adiw	r24, 0x09	; 9
     4ae:	bb c0       	rjmp	.+374    	; 0x626 <__mulsf3+0x1e8>
     4b0:	82 30       	cpi	r24, 0x02	; 2
     4b2:	49 f4       	brne	.+18     	; 0x4c6 <__mulsf3+0x88>
     4b4:	20 e0       	ldi	r18, 0x00	; 0
     4b6:	9a 85       	ldd	r25, Y+10	; 0x0a
     4b8:	8a 89       	ldd	r24, Y+18	; 0x12
     4ba:	98 13       	cpse	r25, r24
     4bc:	21 e0       	ldi	r18, 0x01	; 1
     4be:	2a 8b       	std	Y+18, r18	; 0x12
     4c0:	ce 01       	movw	r24, r28
     4c2:	41 96       	adiw	r24, 0x11	; 17
     4c4:	b0 c0       	rjmp	.+352    	; 0x626 <__mulsf3+0x1e8>
     4c6:	2d 84       	ldd	r2, Y+13	; 0x0d
     4c8:	3e 84       	ldd	r3, Y+14	; 0x0e
     4ca:	4f 84       	ldd	r4, Y+15	; 0x0f
     4cc:	58 88       	ldd	r5, Y+16	; 0x10
     4ce:	6d 88       	ldd	r6, Y+21	; 0x15
     4d0:	7e 88       	ldd	r7, Y+22	; 0x16
     4d2:	8f 88       	ldd	r8, Y+23	; 0x17
     4d4:	98 8c       	ldd	r9, Y+24	; 0x18
     4d6:	ee 24       	eor	r14, r14
     4d8:	ff 24       	eor	r15, r15
     4da:	87 01       	movw	r16, r14
     4dc:	aa 24       	eor	r10, r10
     4de:	bb 24       	eor	r11, r11
     4e0:	65 01       	movw	r12, r10
     4e2:	40 e0       	ldi	r20, 0x00	; 0
     4e4:	50 e0       	ldi	r21, 0x00	; 0
     4e6:	60 e0       	ldi	r22, 0x00	; 0
     4e8:	70 e0       	ldi	r23, 0x00	; 0
     4ea:	e0 e0       	ldi	r30, 0x00	; 0
     4ec:	f0 e0       	ldi	r31, 0x00	; 0
     4ee:	c1 01       	movw	r24, r2
     4f0:	81 70       	andi	r24, 0x01	; 1
     4f2:	90 70       	andi	r25, 0x00	; 0
     4f4:	89 2b       	or	r24, r25
     4f6:	e9 f0       	breq	.+58     	; 0x532 <__mulsf3+0xf4>
     4f8:	e6 0c       	add	r14, r6
     4fa:	f7 1c       	adc	r15, r7
     4fc:	08 1d       	adc	r16, r8
     4fe:	19 1d       	adc	r17, r9
     500:	9a 01       	movw	r18, r20
     502:	ab 01       	movw	r20, r22
     504:	2a 0d       	add	r18, r10
     506:	3b 1d       	adc	r19, r11
     508:	4c 1d       	adc	r20, r12
     50a:	5d 1d       	adc	r21, r13
     50c:	80 e0       	ldi	r24, 0x00	; 0
     50e:	90 e0       	ldi	r25, 0x00	; 0
     510:	a0 e0       	ldi	r26, 0x00	; 0
     512:	b0 e0       	ldi	r27, 0x00	; 0
     514:	e6 14       	cp	r14, r6
     516:	f7 04       	cpc	r15, r7
     518:	08 05       	cpc	r16, r8
     51a:	19 05       	cpc	r17, r9
     51c:	20 f4       	brcc	.+8      	; 0x526 <__mulsf3+0xe8>
     51e:	81 e0       	ldi	r24, 0x01	; 1
     520:	90 e0       	ldi	r25, 0x00	; 0
     522:	a0 e0       	ldi	r26, 0x00	; 0
     524:	b0 e0       	ldi	r27, 0x00	; 0
     526:	ba 01       	movw	r22, r20
     528:	a9 01       	movw	r20, r18
     52a:	48 0f       	add	r20, r24
     52c:	59 1f       	adc	r21, r25
     52e:	6a 1f       	adc	r22, r26
     530:	7b 1f       	adc	r23, r27
     532:	aa 0c       	add	r10, r10
     534:	bb 1c       	adc	r11, r11
     536:	cc 1c       	adc	r12, r12
     538:	dd 1c       	adc	r13, r13
     53a:	97 fe       	sbrs	r9, 7
     53c:	08 c0       	rjmp	.+16     	; 0x54e <__mulsf3+0x110>
     53e:	81 e0       	ldi	r24, 0x01	; 1
     540:	90 e0       	ldi	r25, 0x00	; 0
     542:	a0 e0       	ldi	r26, 0x00	; 0
     544:	b0 e0       	ldi	r27, 0x00	; 0
     546:	a8 2a       	or	r10, r24
     548:	b9 2a       	or	r11, r25
     54a:	ca 2a       	or	r12, r26
     54c:	db 2a       	or	r13, r27
     54e:	31 96       	adiw	r30, 0x01	; 1
     550:	e0 32       	cpi	r30, 0x20	; 32
     552:	f1 05       	cpc	r31, r1
     554:	49 f0       	breq	.+18     	; 0x568 <__mulsf3+0x12a>
     556:	66 0c       	add	r6, r6
     558:	77 1c       	adc	r7, r7
     55a:	88 1c       	adc	r8, r8
     55c:	99 1c       	adc	r9, r9
     55e:	56 94       	lsr	r5
     560:	47 94       	ror	r4
     562:	37 94       	ror	r3
     564:	27 94       	ror	r2
     566:	c3 cf       	rjmp	.-122    	; 0x4ee <__mulsf3+0xb0>
     568:	fa 85       	ldd	r31, Y+10	; 0x0a
     56a:	ea 89       	ldd	r30, Y+18	; 0x12
     56c:	2b 89       	ldd	r18, Y+19	; 0x13
     56e:	3c 89       	ldd	r19, Y+20	; 0x14
     570:	8b 85       	ldd	r24, Y+11	; 0x0b
     572:	9c 85       	ldd	r25, Y+12	; 0x0c
     574:	28 0f       	add	r18, r24
     576:	39 1f       	adc	r19, r25
     578:	2e 5f       	subi	r18, 0xFE	; 254
     57a:	3f 4f       	sbci	r19, 0xFF	; 255
     57c:	17 c0       	rjmp	.+46     	; 0x5ac <__mulsf3+0x16e>
     57e:	ca 01       	movw	r24, r20
     580:	81 70       	andi	r24, 0x01	; 1
     582:	90 70       	andi	r25, 0x00	; 0
     584:	89 2b       	or	r24, r25
     586:	61 f0       	breq	.+24     	; 0x5a0 <__mulsf3+0x162>
     588:	16 95       	lsr	r17
     58a:	07 95       	ror	r16
     58c:	f7 94       	ror	r15
     58e:	e7 94       	ror	r14
     590:	80 e0       	ldi	r24, 0x00	; 0
     592:	90 e0       	ldi	r25, 0x00	; 0
     594:	a0 e0       	ldi	r26, 0x00	; 0
     596:	b0 e8       	ldi	r27, 0x80	; 128
     598:	e8 2a       	or	r14, r24
     59a:	f9 2a       	or	r15, r25
     59c:	0a 2b       	or	r16, r26
     59e:	1b 2b       	or	r17, r27
     5a0:	76 95       	lsr	r23
     5a2:	67 95       	ror	r22
     5a4:	57 95       	ror	r21
     5a6:	47 95       	ror	r20
     5a8:	2f 5f       	subi	r18, 0xFF	; 255
     5aa:	3f 4f       	sbci	r19, 0xFF	; 255
     5ac:	77 fd       	sbrc	r23, 7
     5ae:	e7 cf       	rjmp	.-50     	; 0x57e <__mulsf3+0x140>
     5b0:	0c c0       	rjmp	.+24     	; 0x5ca <__mulsf3+0x18c>
     5b2:	44 0f       	add	r20, r20
     5b4:	55 1f       	adc	r21, r21
     5b6:	66 1f       	adc	r22, r22
     5b8:	77 1f       	adc	r23, r23
     5ba:	17 fd       	sbrc	r17, 7
     5bc:	41 60       	ori	r20, 0x01	; 1
     5be:	ee 0c       	add	r14, r14
     5c0:	ff 1c       	adc	r15, r15
     5c2:	00 1f       	adc	r16, r16
     5c4:	11 1f       	adc	r17, r17
     5c6:	21 50       	subi	r18, 0x01	; 1
     5c8:	30 40       	sbci	r19, 0x00	; 0
     5ca:	40 30       	cpi	r20, 0x00	; 0
     5cc:	90 e0       	ldi	r25, 0x00	; 0
     5ce:	59 07       	cpc	r21, r25
     5d0:	90 e0       	ldi	r25, 0x00	; 0
     5d2:	69 07       	cpc	r22, r25
     5d4:	90 e4       	ldi	r25, 0x40	; 64
     5d6:	79 07       	cpc	r23, r25
     5d8:	60 f3       	brcs	.-40     	; 0x5b2 <__mulsf3+0x174>
     5da:	2b 8f       	std	Y+27, r18	; 0x1b
     5dc:	3c 8f       	std	Y+28, r19	; 0x1c
     5de:	db 01       	movw	r26, r22
     5e0:	ca 01       	movw	r24, r20
     5e2:	8f 77       	andi	r24, 0x7F	; 127
     5e4:	90 70       	andi	r25, 0x00	; 0
     5e6:	a0 70       	andi	r26, 0x00	; 0
     5e8:	b0 70       	andi	r27, 0x00	; 0
     5ea:	80 34       	cpi	r24, 0x40	; 64
     5ec:	91 05       	cpc	r25, r1
     5ee:	a1 05       	cpc	r26, r1
     5f0:	b1 05       	cpc	r27, r1
     5f2:	61 f4       	brne	.+24     	; 0x60c <__mulsf3+0x1ce>
     5f4:	47 fd       	sbrc	r20, 7
     5f6:	0a c0       	rjmp	.+20     	; 0x60c <__mulsf3+0x1ce>
     5f8:	e1 14       	cp	r14, r1
     5fa:	f1 04       	cpc	r15, r1
     5fc:	01 05       	cpc	r16, r1
     5fe:	11 05       	cpc	r17, r1
     600:	29 f0       	breq	.+10     	; 0x60c <__mulsf3+0x1ce>
     602:	40 5c       	subi	r20, 0xC0	; 192
     604:	5f 4f       	sbci	r21, 0xFF	; 255
     606:	6f 4f       	sbci	r22, 0xFF	; 255
     608:	7f 4f       	sbci	r23, 0xFF	; 255
     60a:	40 78       	andi	r20, 0x80	; 128
     60c:	1a 8e       	std	Y+26, r1	; 0x1a
     60e:	fe 17       	cp	r31, r30
     610:	11 f0       	breq	.+4      	; 0x616 <__mulsf3+0x1d8>
     612:	81 e0       	ldi	r24, 0x01	; 1
     614:	8a 8f       	std	Y+26, r24	; 0x1a
     616:	4d 8f       	std	Y+29, r20	; 0x1d
     618:	5e 8f       	std	Y+30, r21	; 0x1e
     61a:	6f 8f       	std	Y+31, r22	; 0x1f
     61c:	78 a3       	std	Y+32, r23	; 0x20
     61e:	83 e0       	ldi	r24, 0x03	; 3
     620:	89 8f       	std	Y+25, r24	; 0x19
     622:	ce 01       	movw	r24, r28
     624:	49 96       	adiw	r24, 0x19	; 25
     626:	0e 94 c5 04 	call	0x98a	; 0x98a <__pack_f>
     62a:	a0 96       	adiw	r28, 0x20	; 32
     62c:	e2 e1       	ldi	r30, 0x12	; 18
     62e:	0c 94 2b 28 	jmp	0x5056	; 0x5056 <__epilogue_restores__>

00000632 <__gtsf2>:
     632:	a8 e1       	ldi	r26, 0x18	; 24
     634:	b0 e0       	ldi	r27, 0x00	; 0
     636:	ef e1       	ldi	r30, 0x1F	; 31
     638:	f3 e0       	ldi	r31, 0x03	; 3
     63a:	0c 94 1b 28 	jmp	0x5036	; 0x5036 <__prologue_saves__+0x18>
     63e:	69 83       	std	Y+1, r22	; 0x01
     640:	7a 83       	std	Y+2, r23	; 0x02
     642:	8b 83       	std	Y+3, r24	; 0x03
     644:	9c 83       	std	Y+4, r25	; 0x04
     646:	2d 83       	std	Y+5, r18	; 0x05
     648:	3e 83       	std	Y+6, r19	; 0x06
     64a:	4f 83       	std	Y+7, r20	; 0x07
     64c:	58 87       	std	Y+8, r21	; 0x08
     64e:	89 e0       	ldi	r24, 0x09	; 9
     650:	e8 2e       	mov	r14, r24
     652:	f1 2c       	mov	r15, r1
     654:	ec 0e       	add	r14, r28
     656:	fd 1e       	adc	r15, r29
     658:	ce 01       	movw	r24, r28
     65a:	01 96       	adiw	r24, 0x01	; 1
     65c:	b7 01       	movw	r22, r14
     65e:	0e 94 9a 05 	call	0xb34	; 0xb34 <__unpack_f>
     662:	8e 01       	movw	r16, r28
     664:	0f 5e       	subi	r16, 0xEF	; 239
     666:	1f 4f       	sbci	r17, 0xFF	; 255
     668:	ce 01       	movw	r24, r28
     66a:	05 96       	adiw	r24, 0x05	; 5
     66c:	b8 01       	movw	r22, r16
     66e:	0e 94 9a 05 	call	0xb34	; 0xb34 <__unpack_f>
     672:	89 85       	ldd	r24, Y+9	; 0x09
     674:	82 30       	cpi	r24, 0x02	; 2
     676:	40 f0       	brcs	.+16     	; 0x688 <__gtsf2+0x56>
     678:	89 89       	ldd	r24, Y+17	; 0x11
     67a:	82 30       	cpi	r24, 0x02	; 2
     67c:	28 f0       	brcs	.+10     	; 0x688 <__gtsf2+0x56>
     67e:	c7 01       	movw	r24, r14
     680:	b8 01       	movw	r22, r16
     682:	0e 94 12 06 	call	0xc24	; 0xc24 <__fpcmp_parts_f>
     686:	01 c0       	rjmp	.+2      	; 0x68a <__gtsf2+0x58>
     688:	8f ef       	ldi	r24, 0xFF	; 255
     68a:	68 96       	adiw	r28, 0x18	; 24
     68c:	e6 e0       	ldi	r30, 0x06	; 6
     68e:	0c 94 37 28 	jmp	0x506e	; 0x506e <__epilogue_restores__+0x18>

00000692 <__gesf2>:
     692:	a8 e1       	ldi	r26, 0x18	; 24
     694:	b0 e0       	ldi	r27, 0x00	; 0
     696:	ef e4       	ldi	r30, 0x4F	; 79
     698:	f3 e0       	ldi	r31, 0x03	; 3
     69a:	0c 94 1b 28 	jmp	0x5036	; 0x5036 <__prologue_saves__+0x18>
     69e:	69 83       	std	Y+1, r22	; 0x01
     6a0:	7a 83       	std	Y+2, r23	; 0x02
     6a2:	8b 83       	std	Y+3, r24	; 0x03
     6a4:	9c 83       	std	Y+4, r25	; 0x04
     6a6:	2d 83       	std	Y+5, r18	; 0x05
     6a8:	3e 83       	std	Y+6, r19	; 0x06
     6aa:	4f 83       	std	Y+7, r20	; 0x07
     6ac:	58 87       	std	Y+8, r21	; 0x08
     6ae:	89 e0       	ldi	r24, 0x09	; 9
     6b0:	e8 2e       	mov	r14, r24
     6b2:	f1 2c       	mov	r15, r1
     6b4:	ec 0e       	add	r14, r28
     6b6:	fd 1e       	adc	r15, r29
     6b8:	ce 01       	movw	r24, r28
     6ba:	01 96       	adiw	r24, 0x01	; 1
     6bc:	b7 01       	movw	r22, r14
     6be:	0e 94 9a 05 	call	0xb34	; 0xb34 <__unpack_f>
     6c2:	8e 01       	movw	r16, r28
     6c4:	0f 5e       	subi	r16, 0xEF	; 239
     6c6:	1f 4f       	sbci	r17, 0xFF	; 255
     6c8:	ce 01       	movw	r24, r28
     6ca:	05 96       	adiw	r24, 0x05	; 5
     6cc:	b8 01       	movw	r22, r16
     6ce:	0e 94 9a 05 	call	0xb34	; 0xb34 <__unpack_f>
     6d2:	89 85       	ldd	r24, Y+9	; 0x09
     6d4:	82 30       	cpi	r24, 0x02	; 2
     6d6:	40 f0       	brcs	.+16     	; 0x6e8 <__gesf2+0x56>
     6d8:	89 89       	ldd	r24, Y+17	; 0x11
     6da:	82 30       	cpi	r24, 0x02	; 2
     6dc:	28 f0       	brcs	.+10     	; 0x6e8 <__gesf2+0x56>
     6de:	c7 01       	movw	r24, r14
     6e0:	b8 01       	movw	r22, r16
     6e2:	0e 94 12 06 	call	0xc24	; 0xc24 <__fpcmp_parts_f>
     6e6:	01 c0       	rjmp	.+2      	; 0x6ea <__gesf2+0x58>
     6e8:	8f ef       	ldi	r24, 0xFF	; 255
     6ea:	68 96       	adiw	r28, 0x18	; 24
     6ec:	e6 e0       	ldi	r30, 0x06	; 6
     6ee:	0c 94 37 28 	jmp	0x506e	; 0x506e <__epilogue_restores__+0x18>

000006f2 <__ltsf2>:
     6f2:	a8 e1       	ldi	r26, 0x18	; 24
     6f4:	b0 e0       	ldi	r27, 0x00	; 0
     6f6:	ef e7       	ldi	r30, 0x7F	; 127
     6f8:	f3 e0       	ldi	r31, 0x03	; 3
     6fa:	0c 94 1b 28 	jmp	0x5036	; 0x5036 <__prologue_saves__+0x18>
     6fe:	69 83       	std	Y+1, r22	; 0x01
     700:	7a 83       	std	Y+2, r23	; 0x02
     702:	8b 83       	std	Y+3, r24	; 0x03
     704:	9c 83       	std	Y+4, r25	; 0x04
     706:	2d 83       	std	Y+5, r18	; 0x05
     708:	3e 83       	std	Y+6, r19	; 0x06
     70a:	4f 83       	std	Y+7, r20	; 0x07
     70c:	58 87       	std	Y+8, r21	; 0x08
     70e:	89 e0       	ldi	r24, 0x09	; 9
     710:	e8 2e       	mov	r14, r24
     712:	f1 2c       	mov	r15, r1
     714:	ec 0e       	add	r14, r28
     716:	fd 1e       	adc	r15, r29
     718:	ce 01       	movw	r24, r28
     71a:	01 96       	adiw	r24, 0x01	; 1
     71c:	b7 01       	movw	r22, r14
     71e:	0e 94 9a 05 	call	0xb34	; 0xb34 <__unpack_f>
     722:	8e 01       	movw	r16, r28
     724:	0f 5e       	subi	r16, 0xEF	; 239
     726:	1f 4f       	sbci	r17, 0xFF	; 255
     728:	ce 01       	movw	r24, r28
     72a:	05 96       	adiw	r24, 0x05	; 5
     72c:	b8 01       	movw	r22, r16
     72e:	0e 94 9a 05 	call	0xb34	; 0xb34 <__unpack_f>
     732:	89 85       	ldd	r24, Y+9	; 0x09
     734:	82 30       	cpi	r24, 0x02	; 2
     736:	40 f0       	brcs	.+16     	; 0x748 <__ltsf2+0x56>
     738:	89 89       	ldd	r24, Y+17	; 0x11
     73a:	82 30       	cpi	r24, 0x02	; 2
     73c:	28 f0       	brcs	.+10     	; 0x748 <__ltsf2+0x56>
     73e:	c7 01       	movw	r24, r14
     740:	b8 01       	movw	r22, r16
     742:	0e 94 12 06 	call	0xc24	; 0xc24 <__fpcmp_parts_f>
     746:	01 c0       	rjmp	.+2      	; 0x74a <__ltsf2+0x58>
     748:	81 e0       	ldi	r24, 0x01	; 1
     74a:	68 96       	adiw	r28, 0x18	; 24
     74c:	e6 e0       	ldi	r30, 0x06	; 6
     74e:	0c 94 37 28 	jmp	0x506e	; 0x506e <__epilogue_restores__+0x18>

00000752 <__fixsfsi>:
     752:	ac e0       	ldi	r26, 0x0C	; 12
     754:	b0 e0       	ldi	r27, 0x00	; 0
     756:	ef ea       	ldi	r30, 0xAF	; 175
     758:	f3 e0       	ldi	r31, 0x03	; 3
     75a:	0c 94 1f 28 	jmp	0x503e	; 0x503e <__prologue_saves__+0x20>
     75e:	69 83       	std	Y+1, r22	; 0x01
     760:	7a 83       	std	Y+2, r23	; 0x02
     762:	8b 83       	std	Y+3, r24	; 0x03
     764:	9c 83       	std	Y+4, r25	; 0x04
     766:	ce 01       	movw	r24, r28
     768:	01 96       	adiw	r24, 0x01	; 1
     76a:	be 01       	movw	r22, r28
     76c:	6b 5f       	subi	r22, 0xFB	; 251
     76e:	7f 4f       	sbci	r23, 0xFF	; 255
     770:	0e 94 9a 05 	call	0xb34	; 0xb34 <__unpack_f>
     774:	8d 81       	ldd	r24, Y+5	; 0x05
     776:	82 30       	cpi	r24, 0x02	; 2
     778:	61 f1       	breq	.+88     	; 0x7d2 <__fixsfsi+0x80>
     77a:	82 30       	cpi	r24, 0x02	; 2
     77c:	50 f1       	brcs	.+84     	; 0x7d2 <__fixsfsi+0x80>
     77e:	84 30       	cpi	r24, 0x04	; 4
     780:	21 f4       	brne	.+8      	; 0x78a <__fixsfsi+0x38>
     782:	8e 81       	ldd	r24, Y+6	; 0x06
     784:	88 23       	and	r24, r24
     786:	51 f1       	breq	.+84     	; 0x7dc <__fixsfsi+0x8a>
     788:	2e c0       	rjmp	.+92     	; 0x7e6 <__fixsfsi+0x94>
     78a:	2f 81       	ldd	r18, Y+7	; 0x07
     78c:	38 85       	ldd	r19, Y+8	; 0x08
     78e:	37 fd       	sbrc	r19, 7
     790:	20 c0       	rjmp	.+64     	; 0x7d2 <__fixsfsi+0x80>
     792:	6e 81       	ldd	r22, Y+6	; 0x06
     794:	2f 31       	cpi	r18, 0x1F	; 31
     796:	31 05       	cpc	r19, r1
     798:	1c f0       	brlt	.+6      	; 0x7a0 <__fixsfsi+0x4e>
     79a:	66 23       	and	r22, r22
     79c:	f9 f0       	breq	.+62     	; 0x7dc <__fixsfsi+0x8a>
     79e:	23 c0       	rjmp	.+70     	; 0x7e6 <__fixsfsi+0x94>
     7a0:	8e e1       	ldi	r24, 0x1E	; 30
     7a2:	90 e0       	ldi	r25, 0x00	; 0
     7a4:	82 1b       	sub	r24, r18
     7a6:	93 0b       	sbc	r25, r19
     7a8:	29 85       	ldd	r18, Y+9	; 0x09
     7aa:	3a 85       	ldd	r19, Y+10	; 0x0a
     7ac:	4b 85       	ldd	r20, Y+11	; 0x0b
     7ae:	5c 85       	ldd	r21, Y+12	; 0x0c
     7b0:	04 c0       	rjmp	.+8      	; 0x7ba <__fixsfsi+0x68>
     7b2:	56 95       	lsr	r21
     7b4:	47 95       	ror	r20
     7b6:	37 95       	ror	r19
     7b8:	27 95       	ror	r18
     7ba:	8a 95       	dec	r24
     7bc:	d2 f7       	brpl	.-12     	; 0x7b2 <__fixsfsi+0x60>
     7be:	66 23       	and	r22, r22
     7c0:	b1 f0       	breq	.+44     	; 0x7ee <__fixsfsi+0x9c>
     7c2:	50 95       	com	r21
     7c4:	40 95       	com	r20
     7c6:	30 95       	com	r19
     7c8:	21 95       	neg	r18
     7ca:	3f 4f       	sbci	r19, 0xFF	; 255
     7cc:	4f 4f       	sbci	r20, 0xFF	; 255
     7ce:	5f 4f       	sbci	r21, 0xFF	; 255
     7d0:	0e c0       	rjmp	.+28     	; 0x7ee <__fixsfsi+0x9c>
     7d2:	20 e0       	ldi	r18, 0x00	; 0
     7d4:	30 e0       	ldi	r19, 0x00	; 0
     7d6:	40 e0       	ldi	r20, 0x00	; 0
     7d8:	50 e0       	ldi	r21, 0x00	; 0
     7da:	09 c0       	rjmp	.+18     	; 0x7ee <__fixsfsi+0x9c>
     7dc:	2f ef       	ldi	r18, 0xFF	; 255
     7de:	3f ef       	ldi	r19, 0xFF	; 255
     7e0:	4f ef       	ldi	r20, 0xFF	; 255
     7e2:	5f e7       	ldi	r21, 0x7F	; 127
     7e4:	04 c0       	rjmp	.+8      	; 0x7ee <__fixsfsi+0x9c>
     7e6:	20 e0       	ldi	r18, 0x00	; 0
     7e8:	30 e0       	ldi	r19, 0x00	; 0
     7ea:	40 e0       	ldi	r20, 0x00	; 0
     7ec:	50 e8       	ldi	r21, 0x80	; 128
     7ee:	b9 01       	movw	r22, r18
     7f0:	ca 01       	movw	r24, r20
     7f2:	2c 96       	adiw	r28, 0x0c	; 12
     7f4:	e2 e0       	ldi	r30, 0x02	; 2
     7f6:	0c 94 3b 28 	jmp	0x5076	; 0x5076 <__epilogue_restores__+0x20>

000007fa <__floatunsisf>:
     7fa:	a8 e0       	ldi	r26, 0x08	; 8
     7fc:	b0 e0       	ldi	r27, 0x00	; 0
     7fe:	e3 e0       	ldi	r30, 0x03	; 3
     800:	f4 e0       	ldi	r31, 0x04	; 4
     802:	0c 94 17 28 	jmp	0x502e	; 0x502e <__prologue_saves__+0x10>
     806:	7b 01       	movw	r14, r22
     808:	8c 01       	movw	r16, r24
     80a:	61 15       	cp	r22, r1
     80c:	71 05       	cpc	r23, r1
     80e:	81 05       	cpc	r24, r1
     810:	91 05       	cpc	r25, r1
     812:	19 f4       	brne	.+6      	; 0x81a <__floatunsisf+0x20>
     814:	82 e0       	ldi	r24, 0x02	; 2
     816:	89 83       	std	Y+1, r24	; 0x01
     818:	60 c0       	rjmp	.+192    	; 0x8da <__stack+0x7b>
     81a:	83 e0       	ldi	r24, 0x03	; 3
     81c:	89 83       	std	Y+1, r24	; 0x01
     81e:	8e e1       	ldi	r24, 0x1E	; 30
     820:	c8 2e       	mov	r12, r24
     822:	d1 2c       	mov	r13, r1
     824:	dc 82       	std	Y+4, r13	; 0x04
     826:	cb 82       	std	Y+3, r12	; 0x03
     828:	ed 82       	std	Y+5, r14	; 0x05
     82a:	fe 82       	std	Y+6, r15	; 0x06
     82c:	0f 83       	std	Y+7, r16	; 0x07
     82e:	18 87       	std	Y+8, r17	; 0x08
     830:	c8 01       	movw	r24, r16
     832:	b7 01       	movw	r22, r14
     834:	0e 94 76 04 	call	0x8ec	; 0x8ec <__clzsi2>
     838:	fc 01       	movw	r30, r24
     83a:	31 97       	sbiw	r30, 0x01	; 1
     83c:	f7 ff       	sbrs	r31, 7
     83e:	3b c0       	rjmp	.+118    	; 0x8b6 <__stack+0x57>
     840:	22 27       	eor	r18, r18
     842:	33 27       	eor	r19, r19
     844:	2e 1b       	sub	r18, r30
     846:	3f 0b       	sbc	r19, r31
     848:	57 01       	movw	r10, r14
     84a:	68 01       	movw	r12, r16
     84c:	02 2e       	mov	r0, r18
     84e:	04 c0       	rjmp	.+8      	; 0x858 <__floatunsisf+0x5e>
     850:	d6 94       	lsr	r13
     852:	c7 94       	ror	r12
     854:	b7 94       	ror	r11
     856:	a7 94       	ror	r10
     858:	0a 94       	dec	r0
     85a:	d2 f7       	brpl	.-12     	; 0x850 <__floatunsisf+0x56>
     85c:	40 e0       	ldi	r20, 0x00	; 0
     85e:	50 e0       	ldi	r21, 0x00	; 0
     860:	60 e0       	ldi	r22, 0x00	; 0
     862:	70 e0       	ldi	r23, 0x00	; 0
     864:	81 e0       	ldi	r24, 0x01	; 1
     866:	90 e0       	ldi	r25, 0x00	; 0
     868:	a0 e0       	ldi	r26, 0x00	; 0
     86a:	b0 e0       	ldi	r27, 0x00	; 0
     86c:	04 c0       	rjmp	.+8      	; 0x876 <__stack+0x17>
     86e:	88 0f       	add	r24, r24
     870:	99 1f       	adc	r25, r25
     872:	aa 1f       	adc	r26, r26
     874:	bb 1f       	adc	r27, r27
     876:	2a 95       	dec	r18
     878:	d2 f7       	brpl	.-12     	; 0x86e <__stack+0xf>
     87a:	01 97       	sbiw	r24, 0x01	; 1
     87c:	a1 09       	sbc	r26, r1
     87e:	b1 09       	sbc	r27, r1
     880:	8e 21       	and	r24, r14
     882:	9f 21       	and	r25, r15
     884:	a0 23       	and	r26, r16
     886:	b1 23       	and	r27, r17
     888:	00 97       	sbiw	r24, 0x00	; 0
     88a:	a1 05       	cpc	r26, r1
     88c:	b1 05       	cpc	r27, r1
     88e:	21 f0       	breq	.+8      	; 0x898 <__stack+0x39>
     890:	41 e0       	ldi	r20, 0x01	; 1
     892:	50 e0       	ldi	r21, 0x00	; 0
     894:	60 e0       	ldi	r22, 0x00	; 0
     896:	70 e0       	ldi	r23, 0x00	; 0
     898:	4a 29       	or	r20, r10
     89a:	5b 29       	or	r21, r11
     89c:	6c 29       	or	r22, r12
     89e:	7d 29       	or	r23, r13
     8a0:	4d 83       	std	Y+5, r20	; 0x05
     8a2:	5e 83       	std	Y+6, r21	; 0x06
     8a4:	6f 83       	std	Y+7, r22	; 0x07
     8a6:	78 87       	std	Y+8, r23	; 0x08
     8a8:	8e e1       	ldi	r24, 0x1E	; 30
     8aa:	90 e0       	ldi	r25, 0x00	; 0
     8ac:	8e 1b       	sub	r24, r30
     8ae:	9f 0b       	sbc	r25, r31
     8b0:	9c 83       	std	Y+4, r25	; 0x04
     8b2:	8b 83       	std	Y+3, r24	; 0x03
     8b4:	12 c0       	rjmp	.+36     	; 0x8da <__stack+0x7b>
     8b6:	30 97       	sbiw	r30, 0x00	; 0
     8b8:	81 f0       	breq	.+32     	; 0x8da <__stack+0x7b>
     8ba:	0e 2e       	mov	r0, r30
     8bc:	04 c0       	rjmp	.+8      	; 0x8c6 <__stack+0x67>
     8be:	ee 0c       	add	r14, r14
     8c0:	ff 1c       	adc	r15, r15
     8c2:	00 1f       	adc	r16, r16
     8c4:	11 1f       	adc	r17, r17
     8c6:	0a 94       	dec	r0
     8c8:	d2 f7       	brpl	.-12     	; 0x8be <__stack+0x5f>
     8ca:	ed 82       	std	Y+5, r14	; 0x05
     8cc:	fe 82       	std	Y+6, r15	; 0x06
     8ce:	0f 83       	std	Y+7, r16	; 0x07
     8d0:	18 87       	std	Y+8, r17	; 0x08
     8d2:	ce 1a       	sub	r12, r30
     8d4:	df 0a       	sbc	r13, r31
     8d6:	dc 82       	std	Y+4, r13	; 0x04
     8d8:	cb 82       	std	Y+3, r12	; 0x03
     8da:	1a 82       	std	Y+2, r1	; 0x02
     8dc:	ce 01       	movw	r24, r28
     8de:	01 96       	adiw	r24, 0x01	; 1
     8e0:	0e 94 c5 04 	call	0x98a	; 0x98a <__pack_f>
     8e4:	28 96       	adiw	r28, 0x08	; 8
     8e6:	ea e0       	ldi	r30, 0x0A	; 10
     8e8:	0c 94 33 28 	jmp	0x5066	; 0x5066 <__epilogue_restores__+0x10>

000008ec <__clzsi2>:
     8ec:	ef 92       	push	r14
     8ee:	ff 92       	push	r15
     8f0:	0f 93       	push	r16
     8f2:	1f 93       	push	r17
     8f4:	7b 01       	movw	r14, r22
     8f6:	8c 01       	movw	r16, r24
     8f8:	80 e0       	ldi	r24, 0x00	; 0
     8fa:	e8 16       	cp	r14, r24
     8fc:	80 e0       	ldi	r24, 0x00	; 0
     8fe:	f8 06       	cpc	r15, r24
     900:	81 e0       	ldi	r24, 0x01	; 1
     902:	08 07       	cpc	r16, r24
     904:	80 e0       	ldi	r24, 0x00	; 0
     906:	18 07       	cpc	r17, r24
     908:	88 f4       	brcc	.+34     	; 0x92c <__clzsi2+0x40>
     90a:	8f ef       	ldi	r24, 0xFF	; 255
     90c:	e8 16       	cp	r14, r24
     90e:	f1 04       	cpc	r15, r1
     910:	01 05       	cpc	r16, r1
     912:	11 05       	cpc	r17, r1
     914:	31 f0       	breq	.+12     	; 0x922 <__clzsi2+0x36>
     916:	28 f0       	brcs	.+10     	; 0x922 <__clzsi2+0x36>
     918:	88 e0       	ldi	r24, 0x08	; 8
     91a:	90 e0       	ldi	r25, 0x00	; 0
     91c:	a0 e0       	ldi	r26, 0x00	; 0
     91e:	b0 e0       	ldi	r27, 0x00	; 0
     920:	17 c0       	rjmp	.+46     	; 0x950 <__clzsi2+0x64>
     922:	80 e0       	ldi	r24, 0x00	; 0
     924:	90 e0       	ldi	r25, 0x00	; 0
     926:	a0 e0       	ldi	r26, 0x00	; 0
     928:	b0 e0       	ldi	r27, 0x00	; 0
     92a:	12 c0       	rjmp	.+36     	; 0x950 <__clzsi2+0x64>
     92c:	80 e0       	ldi	r24, 0x00	; 0
     92e:	e8 16       	cp	r14, r24
     930:	80 e0       	ldi	r24, 0x00	; 0
     932:	f8 06       	cpc	r15, r24
     934:	80 e0       	ldi	r24, 0x00	; 0
     936:	08 07       	cpc	r16, r24
     938:	81 e0       	ldi	r24, 0x01	; 1
     93a:	18 07       	cpc	r17, r24
     93c:	28 f0       	brcs	.+10     	; 0x948 <__clzsi2+0x5c>
     93e:	88 e1       	ldi	r24, 0x18	; 24
     940:	90 e0       	ldi	r25, 0x00	; 0
     942:	a0 e0       	ldi	r26, 0x00	; 0
     944:	b0 e0       	ldi	r27, 0x00	; 0
     946:	04 c0       	rjmp	.+8      	; 0x950 <__clzsi2+0x64>
     948:	80 e1       	ldi	r24, 0x10	; 16
     94a:	90 e0       	ldi	r25, 0x00	; 0
     94c:	a0 e0       	ldi	r26, 0x00	; 0
     94e:	b0 e0       	ldi	r27, 0x00	; 0
     950:	20 e2       	ldi	r18, 0x20	; 32
     952:	30 e0       	ldi	r19, 0x00	; 0
     954:	40 e0       	ldi	r20, 0x00	; 0
     956:	50 e0       	ldi	r21, 0x00	; 0
     958:	28 1b       	sub	r18, r24
     95a:	39 0b       	sbc	r19, r25
     95c:	4a 0b       	sbc	r20, r26
     95e:	5b 0b       	sbc	r21, r27
     960:	04 c0       	rjmp	.+8      	; 0x96a <__clzsi2+0x7e>
     962:	16 95       	lsr	r17
     964:	07 95       	ror	r16
     966:	f7 94       	ror	r15
     968:	e7 94       	ror	r14
     96a:	8a 95       	dec	r24
     96c:	d2 f7       	brpl	.-12     	; 0x962 <__clzsi2+0x76>
     96e:	f7 01       	movw	r30, r14
     970:	eb 57       	subi	r30, 0x7B	; 123
     972:	ff 4f       	sbci	r31, 0xFF	; 255
     974:	80 81       	ld	r24, Z
     976:	28 1b       	sub	r18, r24
     978:	31 09       	sbc	r19, r1
     97a:	41 09       	sbc	r20, r1
     97c:	51 09       	sbc	r21, r1
     97e:	c9 01       	movw	r24, r18
     980:	1f 91       	pop	r17
     982:	0f 91       	pop	r16
     984:	ff 90       	pop	r15
     986:	ef 90       	pop	r14
     988:	08 95       	ret

0000098a <__pack_f>:
     98a:	df 92       	push	r13
     98c:	ef 92       	push	r14
     98e:	ff 92       	push	r15
     990:	0f 93       	push	r16
     992:	1f 93       	push	r17
     994:	fc 01       	movw	r30, r24
     996:	e4 80       	ldd	r14, Z+4	; 0x04
     998:	f5 80       	ldd	r15, Z+5	; 0x05
     99a:	06 81       	ldd	r16, Z+6	; 0x06
     99c:	17 81       	ldd	r17, Z+7	; 0x07
     99e:	d1 80       	ldd	r13, Z+1	; 0x01
     9a0:	80 81       	ld	r24, Z
     9a2:	82 30       	cpi	r24, 0x02	; 2
     9a4:	48 f4       	brcc	.+18     	; 0x9b8 <__pack_f+0x2e>
     9a6:	80 e0       	ldi	r24, 0x00	; 0
     9a8:	90 e0       	ldi	r25, 0x00	; 0
     9aa:	a0 e1       	ldi	r26, 0x10	; 16
     9ac:	b0 e0       	ldi	r27, 0x00	; 0
     9ae:	e8 2a       	or	r14, r24
     9b0:	f9 2a       	or	r15, r25
     9b2:	0a 2b       	or	r16, r26
     9b4:	1b 2b       	or	r17, r27
     9b6:	a5 c0       	rjmp	.+330    	; 0xb02 <__pack_f+0x178>
     9b8:	84 30       	cpi	r24, 0x04	; 4
     9ba:	09 f4       	brne	.+2      	; 0x9be <__pack_f+0x34>
     9bc:	9f c0       	rjmp	.+318    	; 0xafc <__pack_f+0x172>
     9be:	82 30       	cpi	r24, 0x02	; 2
     9c0:	21 f4       	brne	.+8      	; 0x9ca <__pack_f+0x40>
     9c2:	ee 24       	eor	r14, r14
     9c4:	ff 24       	eor	r15, r15
     9c6:	87 01       	movw	r16, r14
     9c8:	05 c0       	rjmp	.+10     	; 0x9d4 <__pack_f+0x4a>
     9ca:	e1 14       	cp	r14, r1
     9cc:	f1 04       	cpc	r15, r1
     9ce:	01 05       	cpc	r16, r1
     9d0:	11 05       	cpc	r17, r1
     9d2:	19 f4       	brne	.+6      	; 0x9da <__pack_f+0x50>
     9d4:	e0 e0       	ldi	r30, 0x00	; 0
     9d6:	f0 e0       	ldi	r31, 0x00	; 0
     9d8:	96 c0       	rjmp	.+300    	; 0xb06 <__pack_f+0x17c>
     9da:	62 81       	ldd	r22, Z+2	; 0x02
     9dc:	73 81       	ldd	r23, Z+3	; 0x03
     9de:	9f ef       	ldi	r25, 0xFF	; 255
     9e0:	62 38       	cpi	r22, 0x82	; 130
     9e2:	79 07       	cpc	r23, r25
     9e4:	0c f0       	brlt	.+2      	; 0x9e8 <__pack_f+0x5e>
     9e6:	5b c0       	rjmp	.+182    	; 0xa9e <__pack_f+0x114>
     9e8:	22 e8       	ldi	r18, 0x82	; 130
     9ea:	3f ef       	ldi	r19, 0xFF	; 255
     9ec:	26 1b       	sub	r18, r22
     9ee:	37 0b       	sbc	r19, r23
     9f0:	2a 31       	cpi	r18, 0x1A	; 26
     9f2:	31 05       	cpc	r19, r1
     9f4:	2c f0       	brlt	.+10     	; 0xa00 <__pack_f+0x76>
     9f6:	20 e0       	ldi	r18, 0x00	; 0
     9f8:	30 e0       	ldi	r19, 0x00	; 0
     9fa:	40 e0       	ldi	r20, 0x00	; 0
     9fc:	50 e0       	ldi	r21, 0x00	; 0
     9fe:	2a c0       	rjmp	.+84     	; 0xa54 <__pack_f+0xca>
     a00:	b8 01       	movw	r22, r16
     a02:	a7 01       	movw	r20, r14
     a04:	02 2e       	mov	r0, r18
     a06:	04 c0       	rjmp	.+8      	; 0xa10 <__pack_f+0x86>
     a08:	76 95       	lsr	r23
     a0a:	67 95       	ror	r22
     a0c:	57 95       	ror	r21
     a0e:	47 95       	ror	r20
     a10:	0a 94       	dec	r0
     a12:	d2 f7       	brpl	.-12     	; 0xa08 <__pack_f+0x7e>
     a14:	81 e0       	ldi	r24, 0x01	; 1
     a16:	90 e0       	ldi	r25, 0x00	; 0
     a18:	a0 e0       	ldi	r26, 0x00	; 0
     a1a:	b0 e0       	ldi	r27, 0x00	; 0
     a1c:	04 c0       	rjmp	.+8      	; 0xa26 <__pack_f+0x9c>
     a1e:	88 0f       	add	r24, r24
     a20:	99 1f       	adc	r25, r25
     a22:	aa 1f       	adc	r26, r26
     a24:	bb 1f       	adc	r27, r27
     a26:	2a 95       	dec	r18
     a28:	d2 f7       	brpl	.-12     	; 0xa1e <__pack_f+0x94>
     a2a:	01 97       	sbiw	r24, 0x01	; 1
     a2c:	a1 09       	sbc	r26, r1
     a2e:	b1 09       	sbc	r27, r1
     a30:	8e 21       	and	r24, r14
     a32:	9f 21       	and	r25, r15
     a34:	a0 23       	and	r26, r16
     a36:	b1 23       	and	r27, r17
     a38:	00 97       	sbiw	r24, 0x00	; 0
     a3a:	a1 05       	cpc	r26, r1
     a3c:	b1 05       	cpc	r27, r1
     a3e:	21 f0       	breq	.+8      	; 0xa48 <__pack_f+0xbe>
     a40:	81 e0       	ldi	r24, 0x01	; 1
     a42:	90 e0       	ldi	r25, 0x00	; 0
     a44:	a0 e0       	ldi	r26, 0x00	; 0
     a46:	b0 e0       	ldi	r27, 0x00	; 0
     a48:	9a 01       	movw	r18, r20
     a4a:	ab 01       	movw	r20, r22
     a4c:	28 2b       	or	r18, r24
     a4e:	39 2b       	or	r19, r25
     a50:	4a 2b       	or	r20, r26
     a52:	5b 2b       	or	r21, r27
     a54:	da 01       	movw	r26, r20
     a56:	c9 01       	movw	r24, r18
     a58:	8f 77       	andi	r24, 0x7F	; 127
     a5a:	90 70       	andi	r25, 0x00	; 0
     a5c:	a0 70       	andi	r26, 0x00	; 0
     a5e:	b0 70       	andi	r27, 0x00	; 0
     a60:	80 34       	cpi	r24, 0x40	; 64
     a62:	91 05       	cpc	r25, r1
     a64:	a1 05       	cpc	r26, r1
     a66:	b1 05       	cpc	r27, r1
     a68:	39 f4       	brne	.+14     	; 0xa78 <__pack_f+0xee>
     a6a:	27 ff       	sbrs	r18, 7
     a6c:	09 c0       	rjmp	.+18     	; 0xa80 <__pack_f+0xf6>
     a6e:	20 5c       	subi	r18, 0xC0	; 192
     a70:	3f 4f       	sbci	r19, 0xFF	; 255
     a72:	4f 4f       	sbci	r20, 0xFF	; 255
     a74:	5f 4f       	sbci	r21, 0xFF	; 255
     a76:	04 c0       	rjmp	.+8      	; 0xa80 <__pack_f+0xf6>
     a78:	21 5c       	subi	r18, 0xC1	; 193
     a7a:	3f 4f       	sbci	r19, 0xFF	; 255
     a7c:	4f 4f       	sbci	r20, 0xFF	; 255
     a7e:	5f 4f       	sbci	r21, 0xFF	; 255
     a80:	e0 e0       	ldi	r30, 0x00	; 0
     a82:	f0 e0       	ldi	r31, 0x00	; 0
     a84:	20 30       	cpi	r18, 0x00	; 0
     a86:	a0 e0       	ldi	r26, 0x00	; 0
     a88:	3a 07       	cpc	r19, r26
     a8a:	a0 e0       	ldi	r26, 0x00	; 0
     a8c:	4a 07       	cpc	r20, r26
     a8e:	a0 e4       	ldi	r26, 0x40	; 64
     a90:	5a 07       	cpc	r21, r26
     a92:	10 f0       	brcs	.+4      	; 0xa98 <__pack_f+0x10e>
     a94:	e1 e0       	ldi	r30, 0x01	; 1
     a96:	f0 e0       	ldi	r31, 0x00	; 0
     a98:	79 01       	movw	r14, r18
     a9a:	8a 01       	movw	r16, r20
     a9c:	27 c0       	rjmp	.+78     	; 0xaec <__pack_f+0x162>
     a9e:	60 38       	cpi	r22, 0x80	; 128
     aa0:	71 05       	cpc	r23, r1
     aa2:	64 f5       	brge	.+88     	; 0xafc <__pack_f+0x172>
     aa4:	fb 01       	movw	r30, r22
     aa6:	e1 58       	subi	r30, 0x81	; 129
     aa8:	ff 4f       	sbci	r31, 0xFF	; 255
     aaa:	d8 01       	movw	r26, r16
     aac:	c7 01       	movw	r24, r14
     aae:	8f 77       	andi	r24, 0x7F	; 127
     ab0:	90 70       	andi	r25, 0x00	; 0
     ab2:	a0 70       	andi	r26, 0x00	; 0
     ab4:	b0 70       	andi	r27, 0x00	; 0
     ab6:	80 34       	cpi	r24, 0x40	; 64
     ab8:	91 05       	cpc	r25, r1
     aba:	a1 05       	cpc	r26, r1
     abc:	b1 05       	cpc	r27, r1
     abe:	39 f4       	brne	.+14     	; 0xace <__pack_f+0x144>
     ac0:	e7 fe       	sbrs	r14, 7
     ac2:	0d c0       	rjmp	.+26     	; 0xade <__pack_f+0x154>
     ac4:	80 e4       	ldi	r24, 0x40	; 64
     ac6:	90 e0       	ldi	r25, 0x00	; 0
     ac8:	a0 e0       	ldi	r26, 0x00	; 0
     aca:	b0 e0       	ldi	r27, 0x00	; 0
     acc:	04 c0       	rjmp	.+8      	; 0xad6 <__pack_f+0x14c>
     ace:	8f e3       	ldi	r24, 0x3F	; 63
     ad0:	90 e0       	ldi	r25, 0x00	; 0
     ad2:	a0 e0       	ldi	r26, 0x00	; 0
     ad4:	b0 e0       	ldi	r27, 0x00	; 0
     ad6:	e8 0e       	add	r14, r24
     ad8:	f9 1e       	adc	r15, r25
     ada:	0a 1f       	adc	r16, r26
     adc:	1b 1f       	adc	r17, r27
     ade:	17 ff       	sbrs	r17, 7
     ae0:	05 c0       	rjmp	.+10     	; 0xaec <__pack_f+0x162>
     ae2:	16 95       	lsr	r17
     ae4:	07 95       	ror	r16
     ae6:	f7 94       	ror	r15
     ae8:	e7 94       	ror	r14
     aea:	31 96       	adiw	r30, 0x01	; 1
     aec:	87 e0       	ldi	r24, 0x07	; 7
     aee:	16 95       	lsr	r17
     af0:	07 95       	ror	r16
     af2:	f7 94       	ror	r15
     af4:	e7 94       	ror	r14
     af6:	8a 95       	dec	r24
     af8:	d1 f7       	brne	.-12     	; 0xaee <__pack_f+0x164>
     afa:	05 c0       	rjmp	.+10     	; 0xb06 <__pack_f+0x17c>
     afc:	ee 24       	eor	r14, r14
     afe:	ff 24       	eor	r15, r15
     b00:	87 01       	movw	r16, r14
     b02:	ef ef       	ldi	r30, 0xFF	; 255
     b04:	f0 e0       	ldi	r31, 0x00	; 0
     b06:	6e 2f       	mov	r22, r30
     b08:	67 95       	ror	r22
     b0a:	66 27       	eor	r22, r22
     b0c:	67 95       	ror	r22
     b0e:	90 2f       	mov	r25, r16
     b10:	9f 77       	andi	r25, 0x7F	; 127
     b12:	d7 94       	ror	r13
     b14:	dd 24       	eor	r13, r13
     b16:	d7 94       	ror	r13
     b18:	8e 2f       	mov	r24, r30
     b1a:	86 95       	lsr	r24
     b1c:	49 2f       	mov	r20, r25
     b1e:	46 2b       	or	r20, r22
     b20:	58 2f       	mov	r21, r24
     b22:	5d 29       	or	r21, r13
     b24:	b7 01       	movw	r22, r14
     b26:	ca 01       	movw	r24, r20
     b28:	1f 91       	pop	r17
     b2a:	0f 91       	pop	r16
     b2c:	ff 90       	pop	r15
     b2e:	ef 90       	pop	r14
     b30:	df 90       	pop	r13
     b32:	08 95       	ret

00000b34 <__unpack_f>:
     b34:	fc 01       	movw	r30, r24
     b36:	db 01       	movw	r26, r22
     b38:	40 81       	ld	r20, Z
     b3a:	51 81       	ldd	r21, Z+1	; 0x01
     b3c:	22 81       	ldd	r18, Z+2	; 0x02
     b3e:	62 2f       	mov	r22, r18
     b40:	6f 77       	andi	r22, 0x7F	; 127
     b42:	70 e0       	ldi	r23, 0x00	; 0
     b44:	22 1f       	adc	r18, r18
     b46:	22 27       	eor	r18, r18
     b48:	22 1f       	adc	r18, r18
     b4a:	93 81       	ldd	r25, Z+3	; 0x03
     b4c:	89 2f       	mov	r24, r25
     b4e:	88 0f       	add	r24, r24
     b50:	82 2b       	or	r24, r18
     b52:	28 2f       	mov	r18, r24
     b54:	30 e0       	ldi	r19, 0x00	; 0
     b56:	99 1f       	adc	r25, r25
     b58:	99 27       	eor	r25, r25
     b5a:	99 1f       	adc	r25, r25
     b5c:	11 96       	adiw	r26, 0x01	; 1
     b5e:	9c 93       	st	X, r25
     b60:	11 97       	sbiw	r26, 0x01	; 1
     b62:	21 15       	cp	r18, r1
     b64:	31 05       	cpc	r19, r1
     b66:	a9 f5       	brne	.+106    	; 0xbd2 <__unpack_f+0x9e>
     b68:	41 15       	cp	r20, r1
     b6a:	51 05       	cpc	r21, r1
     b6c:	61 05       	cpc	r22, r1
     b6e:	71 05       	cpc	r23, r1
     b70:	11 f4       	brne	.+4      	; 0xb76 <__unpack_f+0x42>
     b72:	82 e0       	ldi	r24, 0x02	; 2
     b74:	37 c0       	rjmp	.+110    	; 0xbe4 <__unpack_f+0xb0>
     b76:	82 e8       	ldi	r24, 0x82	; 130
     b78:	9f ef       	ldi	r25, 0xFF	; 255
     b7a:	13 96       	adiw	r26, 0x03	; 3
     b7c:	9c 93       	st	X, r25
     b7e:	8e 93       	st	-X, r24
     b80:	12 97       	sbiw	r26, 0x02	; 2
     b82:	9a 01       	movw	r18, r20
     b84:	ab 01       	movw	r20, r22
     b86:	67 e0       	ldi	r22, 0x07	; 7
     b88:	22 0f       	add	r18, r18
     b8a:	33 1f       	adc	r19, r19
     b8c:	44 1f       	adc	r20, r20
     b8e:	55 1f       	adc	r21, r21
     b90:	6a 95       	dec	r22
     b92:	d1 f7       	brne	.-12     	; 0xb88 <__unpack_f+0x54>
     b94:	83 e0       	ldi	r24, 0x03	; 3
     b96:	8c 93       	st	X, r24
     b98:	0d c0       	rjmp	.+26     	; 0xbb4 <__unpack_f+0x80>
     b9a:	22 0f       	add	r18, r18
     b9c:	33 1f       	adc	r19, r19
     b9e:	44 1f       	adc	r20, r20
     ba0:	55 1f       	adc	r21, r21
     ba2:	12 96       	adiw	r26, 0x02	; 2
     ba4:	8d 91       	ld	r24, X+
     ba6:	9c 91       	ld	r25, X
     ba8:	13 97       	sbiw	r26, 0x03	; 3
     baa:	01 97       	sbiw	r24, 0x01	; 1
     bac:	13 96       	adiw	r26, 0x03	; 3
     bae:	9c 93       	st	X, r25
     bb0:	8e 93       	st	-X, r24
     bb2:	12 97       	sbiw	r26, 0x02	; 2
     bb4:	20 30       	cpi	r18, 0x00	; 0
     bb6:	80 e0       	ldi	r24, 0x00	; 0
     bb8:	38 07       	cpc	r19, r24
     bba:	80 e0       	ldi	r24, 0x00	; 0
     bbc:	48 07       	cpc	r20, r24
     bbe:	80 e4       	ldi	r24, 0x40	; 64
     bc0:	58 07       	cpc	r21, r24
     bc2:	58 f3       	brcs	.-42     	; 0xb9a <__unpack_f+0x66>
     bc4:	14 96       	adiw	r26, 0x04	; 4
     bc6:	2d 93       	st	X+, r18
     bc8:	3d 93       	st	X+, r19
     bca:	4d 93       	st	X+, r20
     bcc:	5c 93       	st	X, r21
     bce:	17 97       	sbiw	r26, 0x07	; 7
     bd0:	08 95       	ret
     bd2:	2f 3f       	cpi	r18, 0xFF	; 255
     bd4:	31 05       	cpc	r19, r1
     bd6:	79 f4       	brne	.+30     	; 0xbf6 <__unpack_f+0xc2>
     bd8:	41 15       	cp	r20, r1
     bda:	51 05       	cpc	r21, r1
     bdc:	61 05       	cpc	r22, r1
     bde:	71 05       	cpc	r23, r1
     be0:	19 f4       	brne	.+6      	; 0xbe8 <__unpack_f+0xb4>
     be2:	84 e0       	ldi	r24, 0x04	; 4
     be4:	8c 93       	st	X, r24
     be6:	08 95       	ret
     be8:	64 ff       	sbrs	r22, 4
     bea:	03 c0       	rjmp	.+6      	; 0xbf2 <__unpack_f+0xbe>
     bec:	81 e0       	ldi	r24, 0x01	; 1
     bee:	8c 93       	st	X, r24
     bf0:	12 c0       	rjmp	.+36     	; 0xc16 <__unpack_f+0xe2>
     bf2:	1c 92       	st	X, r1
     bf4:	10 c0       	rjmp	.+32     	; 0xc16 <__unpack_f+0xe2>
     bf6:	2f 57       	subi	r18, 0x7F	; 127
     bf8:	30 40       	sbci	r19, 0x00	; 0
     bfa:	13 96       	adiw	r26, 0x03	; 3
     bfc:	3c 93       	st	X, r19
     bfe:	2e 93       	st	-X, r18
     c00:	12 97       	sbiw	r26, 0x02	; 2
     c02:	83 e0       	ldi	r24, 0x03	; 3
     c04:	8c 93       	st	X, r24
     c06:	87 e0       	ldi	r24, 0x07	; 7
     c08:	44 0f       	add	r20, r20
     c0a:	55 1f       	adc	r21, r21
     c0c:	66 1f       	adc	r22, r22
     c0e:	77 1f       	adc	r23, r23
     c10:	8a 95       	dec	r24
     c12:	d1 f7       	brne	.-12     	; 0xc08 <__unpack_f+0xd4>
     c14:	70 64       	ori	r23, 0x40	; 64
     c16:	14 96       	adiw	r26, 0x04	; 4
     c18:	4d 93       	st	X+, r20
     c1a:	5d 93       	st	X+, r21
     c1c:	6d 93       	st	X+, r22
     c1e:	7c 93       	st	X, r23
     c20:	17 97       	sbiw	r26, 0x07	; 7
     c22:	08 95       	ret

00000c24 <__fpcmp_parts_f>:
     c24:	1f 93       	push	r17
     c26:	dc 01       	movw	r26, r24
     c28:	fb 01       	movw	r30, r22
     c2a:	9c 91       	ld	r25, X
     c2c:	92 30       	cpi	r25, 0x02	; 2
     c2e:	08 f4       	brcc	.+2      	; 0xc32 <__fpcmp_parts_f+0xe>
     c30:	47 c0       	rjmp	.+142    	; 0xcc0 <__fpcmp_parts_f+0x9c>
     c32:	80 81       	ld	r24, Z
     c34:	82 30       	cpi	r24, 0x02	; 2
     c36:	08 f4       	brcc	.+2      	; 0xc3a <__fpcmp_parts_f+0x16>
     c38:	43 c0       	rjmp	.+134    	; 0xcc0 <__fpcmp_parts_f+0x9c>
     c3a:	94 30       	cpi	r25, 0x04	; 4
     c3c:	51 f4       	brne	.+20     	; 0xc52 <__fpcmp_parts_f+0x2e>
     c3e:	11 96       	adiw	r26, 0x01	; 1
     c40:	1c 91       	ld	r17, X
     c42:	84 30       	cpi	r24, 0x04	; 4
     c44:	99 f5       	brne	.+102    	; 0xcac <__fpcmp_parts_f+0x88>
     c46:	81 81       	ldd	r24, Z+1	; 0x01
     c48:	68 2f       	mov	r22, r24
     c4a:	70 e0       	ldi	r23, 0x00	; 0
     c4c:	61 1b       	sub	r22, r17
     c4e:	71 09       	sbc	r23, r1
     c50:	3f c0       	rjmp	.+126    	; 0xcd0 <__fpcmp_parts_f+0xac>
     c52:	84 30       	cpi	r24, 0x04	; 4
     c54:	21 f0       	breq	.+8      	; 0xc5e <__fpcmp_parts_f+0x3a>
     c56:	92 30       	cpi	r25, 0x02	; 2
     c58:	31 f4       	brne	.+12     	; 0xc66 <__fpcmp_parts_f+0x42>
     c5a:	82 30       	cpi	r24, 0x02	; 2
     c5c:	b9 f1       	breq	.+110    	; 0xccc <__fpcmp_parts_f+0xa8>
     c5e:	81 81       	ldd	r24, Z+1	; 0x01
     c60:	88 23       	and	r24, r24
     c62:	89 f1       	breq	.+98     	; 0xcc6 <__fpcmp_parts_f+0xa2>
     c64:	2d c0       	rjmp	.+90     	; 0xcc0 <__fpcmp_parts_f+0x9c>
     c66:	11 96       	adiw	r26, 0x01	; 1
     c68:	1c 91       	ld	r17, X
     c6a:	11 97       	sbiw	r26, 0x01	; 1
     c6c:	82 30       	cpi	r24, 0x02	; 2
     c6e:	f1 f0       	breq	.+60     	; 0xcac <__fpcmp_parts_f+0x88>
     c70:	81 81       	ldd	r24, Z+1	; 0x01
     c72:	18 17       	cp	r17, r24
     c74:	d9 f4       	brne	.+54     	; 0xcac <__fpcmp_parts_f+0x88>
     c76:	12 96       	adiw	r26, 0x02	; 2
     c78:	2d 91       	ld	r18, X+
     c7a:	3c 91       	ld	r19, X
     c7c:	13 97       	sbiw	r26, 0x03	; 3
     c7e:	82 81       	ldd	r24, Z+2	; 0x02
     c80:	93 81       	ldd	r25, Z+3	; 0x03
     c82:	82 17       	cp	r24, r18
     c84:	93 07       	cpc	r25, r19
     c86:	94 f0       	brlt	.+36     	; 0xcac <__fpcmp_parts_f+0x88>
     c88:	28 17       	cp	r18, r24
     c8a:	39 07       	cpc	r19, r25
     c8c:	bc f0       	brlt	.+46     	; 0xcbc <__fpcmp_parts_f+0x98>
     c8e:	14 96       	adiw	r26, 0x04	; 4
     c90:	8d 91       	ld	r24, X+
     c92:	9d 91       	ld	r25, X+
     c94:	0d 90       	ld	r0, X+
     c96:	bc 91       	ld	r27, X
     c98:	a0 2d       	mov	r26, r0
     c9a:	24 81       	ldd	r18, Z+4	; 0x04
     c9c:	35 81       	ldd	r19, Z+5	; 0x05
     c9e:	46 81       	ldd	r20, Z+6	; 0x06
     ca0:	57 81       	ldd	r21, Z+7	; 0x07
     ca2:	28 17       	cp	r18, r24
     ca4:	39 07       	cpc	r19, r25
     ca6:	4a 07       	cpc	r20, r26
     ca8:	5b 07       	cpc	r21, r27
     caa:	18 f4       	brcc	.+6      	; 0xcb2 <__fpcmp_parts_f+0x8e>
     cac:	11 23       	and	r17, r17
     cae:	41 f0       	breq	.+16     	; 0xcc0 <__fpcmp_parts_f+0x9c>
     cb0:	0a c0       	rjmp	.+20     	; 0xcc6 <__fpcmp_parts_f+0xa2>
     cb2:	82 17       	cp	r24, r18
     cb4:	93 07       	cpc	r25, r19
     cb6:	a4 07       	cpc	r26, r20
     cb8:	b5 07       	cpc	r27, r21
     cba:	40 f4       	brcc	.+16     	; 0xccc <__fpcmp_parts_f+0xa8>
     cbc:	11 23       	and	r17, r17
     cbe:	19 f0       	breq	.+6      	; 0xcc6 <__fpcmp_parts_f+0xa2>
     cc0:	61 e0       	ldi	r22, 0x01	; 1
     cc2:	70 e0       	ldi	r23, 0x00	; 0
     cc4:	05 c0       	rjmp	.+10     	; 0xcd0 <__fpcmp_parts_f+0xac>
     cc6:	6f ef       	ldi	r22, 0xFF	; 255
     cc8:	7f ef       	ldi	r23, 0xFF	; 255
     cca:	02 c0       	rjmp	.+4      	; 0xcd0 <__fpcmp_parts_f+0xac>
     ccc:	60 e0       	ldi	r22, 0x00	; 0
     cce:	70 e0       	ldi	r23, 0x00	; 0
     cd0:	cb 01       	movw	r24, r22
     cd2:	1f 91       	pop	r17
     cd4:	08 95       	ret

00000cd6 <__vector_16>:
#include "Adc_cfg.h"
#include "GlobalInterrupt.h"

void (*Adc_Callback) (u16 res);

ISR(VECTOR_ADC) {
     cd6:	1f 92       	push	r1
     cd8:	0f 92       	push	r0
     cda:	0f b6       	in	r0, 0x3f	; 63
     cdc:	0f 92       	push	r0
     cde:	11 24       	eor	r1, r1
     ce0:	2f 93       	push	r18
     ce2:	3f 93       	push	r19
     ce4:	4f 93       	push	r20
     ce6:	5f 93       	push	r21
     ce8:	6f 93       	push	r22
     cea:	7f 93       	push	r23
     cec:	8f 93       	push	r24
     cee:	9f 93       	push	r25
     cf0:	af 93       	push	r26
     cf2:	bf 93       	push	r27
     cf4:	ef 93       	push	r30
     cf6:	ff 93       	push	r31
     cf8:	df 93       	push	r29
     cfa:	cf 93       	push	r28
     cfc:	cd b7       	in	r28, 0x3d	; 61
     cfe:	de b7       	in	r29, 0x3e	; 62
    Adc_Callback((ADC_DATA_REGISTER & 0b0000001111111111));
     d00:	20 91 88 01 	lds	r18, 0x0188
     d04:	30 91 89 01 	lds	r19, 0x0189
     d08:	e4 e2       	ldi	r30, 0x24	; 36
     d0a:	f0 e0       	ldi	r31, 0x00	; 0
     d0c:	80 81       	ld	r24, Z
     d0e:	91 81       	ldd	r25, Z+1	; 0x01
     d10:	93 70       	andi	r25, 0x03	; 3
     d12:	f9 01       	movw	r30, r18
     d14:	09 95       	icall
}
     d16:	cf 91       	pop	r28
     d18:	df 91       	pop	r29
     d1a:	ff 91       	pop	r31
     d1c:	ef 91       	pop	r30
     d1e:	bf 91       	pop	r27
     d20:	af 91       	pop	r26
     d22:	9f 91       	pop	r25
     d24:	8f 91       	pop	r24
     d26:	7f 91       	pop	r23
     d28:	6f 91       	pop	r22
     d2a:	5f 91       	pop	r21
     d2c:	4f 91       	pop	r20
     d2e:	3f 91       	pop	r19
     d30:	2f 91       	pop	r18
     d32:	0f 90       	pop	r0
     d34:	0f be       	out	0x3f, r0	; 63
     d36:	0f 90       	pop	r0
     d38:	1f 90       	pop	r1
     d3a:	18 95       	reti

00000d3c <Adc_Init>:

void Adc_Init(void) {
     d3c:	df 93       	push	r29
     d3e:	cf 93       	push	r28
     d40:	cd b7       	in	r28, 0x3d	; 61
     d42:	de b7       	in	r29, 0x3e	; 62
    /*Reference Selection Bits*/
#if (ADC_REF_SELECTION == ADC_REF_AREF)
    CLR_BIT(ADMUX, ADMUX_REFS1);
     d44:	a7 e2       	ldi	r26, 0x27	; 39
     d46:	b0 e0       	ldi	r27, 0x00	; 0
     d48:	e7 e2       	ldi	r30, 0x27	; 39
     d4a:	f0 e0       	ldi	r31, 0x00	; 0
     d4c:	80 81       	ld	r24, Z
     d4e:	8f 77       	andi	r24, 0x7F	; 127
     d50:	8c 93       	st	X, r24
    CLR_BIT(ADMUX, ADMUX_REFS0);
     d52:	a7 e2       	ldi	r26, 0x27	; 39
     d54:	b0 e0       	ldi	r27, 0x00	; 0
     d56:	e7 e2       	ldi	r30, 0x27	; 39
     d58:	f0 e0       	ldi	r31, 0x00	; 0
     d5a:	80 81       	ld	r24, Z
     d5c:	8f 7b       	andi	r24, 0xBF	; 191
     d5e:	8c 93       	st	X, r24
#else
    #error "Error Ref Selection Choise"
#endif

    /* No Left Adjust */
    CLR_BIT(ADMUX, ADMUX_ADLAR);
     d60:	a7 e2       	ldi	r26, 0x27	; 39
     d62:	b0 e0       	ldi	r27, 0x00	; 0
     d64:	e7 e2       	ldi	r30, 0x27	; 39
     d66:	f0 e0       	ldi	r31, 0x00	; 0
     d68:	80 81       	ld	r24, Z
     d6a:	8f 7d       	andi	r24, 0xDF	; 223
     d6c:	8c 93       	st	X, r24

    /* ADC Enable */
    SET_BIT(ADCSRA, ADCSRA_ADEN);
     d6e:	a6 e2       	ldi	r26, 0x26	; 38
     d70:	b0 e0       	ldi	r27, 0x00	; 0
     d72:	e6 e2       	ldi	r30, 0x26	; 38
     d74:	f0 e0       	ldi	r31, 0x00	; 0
     d76:	80 81       	ld	r24, Z
     d78:	80 68       	ori	r24, 0x80	; 128
     d7a:	8c 93       	st	X, r24

    /* ADC Interrupt Enable */
#if (ADC_INT_STATE == ADC_INT_DISABLE)
    CLR_BIT(ADCSRA, ADCSRA_ADIE);
#elif (ADC_INT_STATE == ADC_INT_ENABLE)
    SET_BIT(ADCSRA, ADCSRA_ADIE);
     d7c:	a6 e2       	ldi	r26, 0x26	; 38
     d7e:	b0 e0       	ldi	r27, 0x00	; 0
     d80:	e6 e2       	ldi	r30, 0x26	; 38
     d82:	f0 e0       	ldi	r31, 0x00	; 0
     d84:	80 81       	ld	r24, Z
     d86:	88 60       	ori	r24, 0x08	; 8
     d88:	8c 93       	st	X, r24
    GlobalInterrupt_Enable();
     d8a:	0e 94 2d 10 	call	0x205a	; 0x205a <GlobalInterrupt_Enable>
#endif

    /* ADC Prescaler Select */

#if (ADC_PRESCALER == 128)
    SET_BIT(ADCSRA, ADCSRA_ADPS0);
     d8e:	a6 e2       	ldi	r26, 0x26	; 38
     d90:	b0 e0       	ldi	r27, 0x00	; 0
     d92:	e6 e2       	ldi	r30, 0x26	; 38
     d94:	f0 e0       	ldi	r31, 0x00	; 0
     d96:	80 81       	ld	r24, Z
     d98:	81 60       	ori	r24, 0x01	; 1
     d9a:	8c 93       	st	X, r24
    SET_BIT(ADCSRA, ADCSRA_ADPS1);
     d9c:	a6 e2       	ldi	r26, 0x26	; 38
     d9e:	b0 e0       	ldi	r27, 0x00	; 0
     da0:	e6 e2       	ldi	r30, 0x26	; 38
     da2:	f0 e0       	ldi	r31, 0x00	; 0
     da4:	80 81       	ld	r24, Z
     da6:	82 60       	ori	r24, 0x02	; 2
     da8:	8c 93       	st	X, r24
    SET_BIT(ADCSRA, ADCSRA_ADPS2);
     daa:	a6 e2       	ldi	r26, 0x26	; 38
     dac:	b0 e0       	ldi	r27, 0x00	; 0
     dae:	e6 e2       	ldi	r30, 0x26	; 38
     db0:	f0 e0       	ldi	r31, 0x00	; 0
     db2:	80 81       	ld	r24, Z
     db4:	84 60       	ori	r24, 0x04	; 4
     db6:	8c 93       	st	X, r24
    CLR_BIT(ADCSRA, ADCSRA_ADPS2);
    // TODO
#else
    #error "Error Prescaler Choise"
#endif
}
     db8:	cf 91       	pop	r28
     dba:	df 91       	pop	r29
     dbc:	08 95       	ret

00000dbe <Adc_StartConversion>:

void Adc_StartConversion(Adc_ChannelType channel) {
     dbe:	df 93       	push	r29
     dc0:	cf 93       	push	r28
     dc2:	0f 92       	push	r0
     dc4:	cd b7       	in	r28, 0x3d	; 61
     dc6:	de b7       	in	r29, 0x3e	; 62
     dc8:	89 83       	std	Y+1, r24	; 0x01
    ADMUX &= 0b11100000;
     dca:	a7 e2       	ldi	r26, 0x27	; 39
     dcc:	b0 e0       	ldi	r27, 0x00	; 0
     dce:	e7 e2       	ldi	r30, 0x27	; 39
     dd0:	f0 e0       	ldi	r31, 0x00	; 0
     dd2:	80 81       	ld	r24, Z
     dd4:	80 7e       	andi	r24, 0xE0	; 224
     dd6:	8c 93       	st	X, r24
    ADMUX |= channel;
     dd8:	a7 e2       	ldi	r26, 0x27	; 39
     dda:	b0 e0       	ldi	r27, 0x00	; 0
     ddc:	e7 e2       	ldi	r30, 0x27	; 39
     dde:	f0 e0       	ldi	r31, 0x00	; 0
     de0:	90 81       	ld	r25, Z
     de2:	89 81       	ldd	r24, Y+1	; 0x01
     de4:	89 2b       	or	r24, r25
     de6:	8c 93       	st	X, r24
    SET_BIT(ADCSRA, ADCSRA_ADSC);
     de8:	a6 e2       	ldi	r26, 0x26	; 38
     dea:	b0 e0       	ldi	r27, 0x00	; 0
     dec:	e6 e2       	ldi	r30, 0x26	; 38
     dee:	f0 e0       	ldi	r31, 0x00	; 0
     df0:	80 81       	ld	r24, Z
     df2:	80 64       	ori	r24, 0x40	; 64
     df4:	8c 93       	st	X, r24
}
     df6:	0f 90       	pop	r0
     df8:	cf 91       	pop	r28
     dfa:	df 91       	pop	r29
     dfc:	08 95       	ret

00000dfe <Adc_Enable>:

void Adc_Enable(void) {
     dfe:	df 93       	push	r29
     e00:	cf 93       	push	r28
     e02:	cd b7       	in	r28, 0x3d	; 61
     e04:	de b7       	in	r29, 0x3e	; 62
    SET_BIT(ADCSRA, ADCSRA_ADEN);
     e06:	a6 e2       	ldi	r26, 0x26	; 38
     e08:	b0 e0       	ldi	r27, 0x00	; 0
     e0a:	e6 e2       	ldi	r30, 0x26	; 38
     e0c:	f0 e0       	ldi	r31, 0x00	; 0
     e0e:	80 81       	ld	r24, Z
     e10:	80 68       	ori	r24, 0x80	; 128
     e12:	8c 93       	st	X, r24
    // TODO
}
     e14:	cf 91       	pop	r28
     e16:	df 91       	pop	r29
     e18:	08 95       	ret

00000e1a <Adc_Disable>:

void Adc_Disable(void) {
     e1a:	df 93       	push	r29
     e1c:	cf 93       	push	r28
     e1e:	cd b7       	in	r28, 0x3d	; 61
     e20:	de b7       	in	r29, 0x3e	; 62
    CLR_BIT(ADCSRA, ADCSRA_ADEN);
     e22:	a6 e2       	ldi	r26, 0x26	; 38
     e24:	b0 e0       	ldi	r27, 0x00	; 0
     e26:	e6 e2       	ldi	r30, 0x26	; 38
     e28:	f0 e0       	ldi	r31, 0x00	; 0
     e2a:	80 81       	ld	r24, Z
     e2c:	8f 77       	andi	r24, 0x7F	; 127
     e2e:	8c 93       	st	X, r24
    // TODO
}
     e30:	cf 91       	pop	r28
     e32:	df 91       	pop	r29
     e34:	08 95       	ret

00000e36 <Adc_GetResult>:


Adc_ConversionStateType Adc_GetResult(u16* result) {
     e36:	df 93       	push	r29
     e38:	cf 93       	push	r28
     e3a:	00 d0       	rcall	.+0      	; 0xe3c <Adc_GetResult+0x6>
     e3c:	0f 92       	push	r0
     e3e:	cd b7       	in	r28, 0x3d	; 61
     e40:	de b7       	in	r29, 0x3e	; 62
     e42:	9b 83       	std	Y+3, r25	; 0x03
     e44:	8a 83       	std	Y+2, r24	; 0x02
    Adc_ConversionStateType flag = ADC_CONVERSION_NOT_COMPLETE;
     e46:	19 82       	std	Y+1, r1	; 0x01
    if (GET_BIT(ADCSRA, ADCSRA_ADIF) == 1) {
     e48:	e6 e2       	ldi	r30, 0x26	; 38
     e4a:	f0 e0       	ldi	r31, 0x00	; 0
     e4c:	80 81       	ld	r24, Z
     e4e:	82 95       	swap	r24
     e50:	8f 70       	andi	r24, 0x0F	; 15
     e52:	88 2f       	mov	r24, r24
     e54:	90 e0       	ldi	r25, 0x00	; 0
     e56:	81 70       	andi	r24, 0x01	; 1
     e58:	90 70       	andi	r25, 0x00	; 0
     e5a:	88 23       	and	r24, r24
     e5c:	91 f0       	breq	.+36     	; 0xe82 <Adc_GetResult+0x4c>
        SET_BIT(ADCSRA, ADCSRA_ADIF);
     e5e:	a6 e2       	ldi	r26, 0x26	; 38
     e60:	b0 e0       	ldi	r27, 0x00	; 0
     e62:	e6 e2       	ldi	r30, 0x26	; 38
     e64:	f0 e0       	ldi	r31, 0x00	; 0
     e66:	80 81       	ld	r24, Z
     e68:	80 61       	ori	r24, 0x10	; 16
     e6a:	8c 93       	st	X, r24
        *result = ADC_DATA_REGISTER & 0b0000001111111111;
     e6c:	e4 e2       	ldi	r30, 0x24	; 36
     e6e:	f0 e0       	ldi	r31, 0x00	; 0
     e70:	80 81       	ld	r24, Z
     e72:	91 81       	ldd	r25, Z+1	; 0x01
     e74:	93 70       	andi	r25, 0x03	; 3
     e76:	ea 81       	ldd	r30, Y+2	; 0x02
     e78:	fb 81       	ldd	r31, Y+3	; 0x03
     e7a:	91 83       	std	Z+1, r25	; 0x01
     e7c:	80 83       	st	Z, r24
        flag = ADC_CONVERSION_COMPLETE;
     e7e:	81 e0       	ldi	r24, 0x01	; 1
     e80:	89 83       	std	Y+1, r24	; 0x01
    }
    return flag;
     e82:	89 81       	ldd	r24, Y+1	; 0x01
}
     e84:	0f 90       	pop	r0
     e86:	0f 90       	pop	r0
     e88:	0f 90       	pop	r0
     e8a:	cf 91       	pop	r28
     e8c:	df 91       	pop	r29
     e8e:	08 95       	ret

00000e90 <Adc_GetResultPolling>:

u16 Adc_GetResultPolling(void) {
     e90:	df 93       	push	r29
     e92:	cf 93       	push	r28
     e94:	cd b7       	in	r28, 0x3d	; 61
     e96:	de b7       	in	r29, 0x3e	; 62
    while (GET_BIT(ADCSRA, ADCSRA_ADIF) == 0);
     e98:	e6 e2       	ldi	r30, 0x26	; 38
     e9a:	f0 e0       	ldi	r31, 0x00	; 0
     e9c:	80 81       	ld	r24, Z
     e9e:	82 95       	swap	r24
     ea0:	8f 70       	andi	r24, 0x0F	; 15
     ea2:	88 2f       	mov	r24, r24
     ea4:	90 e0       	ldi	r25, 0x00	; 0
     ea6:	81 70       	andi	r24, 0x01	; 1
     ea8:	90 70       	andi	r25, 0x00	; 0
     eaa:	00 97       	sbiw	r24, 0x00	; 0
     eac:	a9 f3       	breq	.-22     	; 0xe98 <Adc_GetResultPolling+0x8>
    return (ADC_DATA_REGISTER & 0b0000001111111111);
     eae:	e4 e2       	ldi	r30, 0x24	; 36
     eb0:	f0 e0       	ldi	r31, 0x00	; 0
     eb2:	80 81       	ld	r24, Z
     eb4:	91 81       	ldd	r25, Z+1	; 0x01
     eb6:	93 70       	andi	r25, 0x03	; 3
}
     eb8:	cf 91       	pop	r28
     eba:	df 91       	pop	r29
     ebc:	08 95       	ret

00000ebe <Adc_SetCallback>:


void Adc_SetCallback (void (*callback) (u16 res)) {
     ebe:	df 93       	push	r29
     ec0:	cf 93       	push	r28
     ec2:	00 d0       	rcall	.+0      	; 0xec4 <Adc_SetCallback+0x6>
     ec4:	cd b7       	in	r28, 0x3d	; 61
     ec6:	de b7       	in	r29, 0x3e	; 62
     ec8:	9a 83       	std	Y+2, r25	; 0x02
     eca:	89 83       	std	Y+1, r24	; 0x01
    Adc_Callback = callback;
     ecc:	89 81       	ldd	r24, Y+1	; 0x01
     ece:	9a 81       	ldd	r25, Y+2	; 0x02
     ed0:	90 93 89 01 	sts	0x0189, r25
     ed4:	80 93 88 01 	sts	0x0188, r24
}
     ed8:	0f 90       	pop	r0
     eda:	0f 90       	pop	r0
     edc:	cf 91       	pop	r28
     ede:	df 91       	pop	r29
     ee0:	08 95       	ret

00000ee2 <Calculator_Run>:
#include "LCD.h"
#include "Calculator.h"

//u8 Calculator_GetRealNumber (Keypad_ButtonType button);

void Calculator_Run(void) {
     ee2:	df 93       	push	r29
     ee4:	cf 93       	push	r28
     ee6:	cd b7       	in	r28, 0x3d	; 61
     ee8:	de b7       	in	r29, 0x3e	; 62
     eea:	2d 97       	sbiw	r28, 0x0d	; 13
     eec:	0f b6       	in	r0, 0x3f	; 63
     eee:	f8 94       	cli
     ef0:	de bf       	out	0x3e, r29	; 62
     ef2:	0f be       	out	0x3f, r0	; 63
     ef4:	cd bf       	out	0x3d, r28	; 61
    s8 num1=0, num2=0, operation=0, result=0;
     ef6:	19 86       	std	Y+9, r1	; 0x09
     ef8:	18 86       	std	Y+8, r1	; 0x08
     efa:	1f 82       	std	Y+7, r1	; 0x07
     efc:	1e 82       	std	Y+6, r1	; 0x06
    u8 num1_flag=0, num2_flag=0, operation_flag=0, result_flag=0;
     efe:	1d 82       	std	Y+5, r1	; 0x05
     f00:	1c 82       	std	Y+4, r1	; 0x04
     f02:	1b 82       	std	Y+3, r1	; 0x03
     f04:	1a 82       	std	Y+2, r1	; 0x02
    Keypad_ButtonType pressed_button;
    while (1)
    {
        /* Wait for user input */
        do {
            pressed_button = Keypad_GetPressedButton();
     f06:	0e 94 23 1d 	call	0x3a46	; 0x3a46 <Keypad_GetPressedButton>
     f0a:	89 83       	std	Y+1, r24	; 0x01
        }
        while (pressed_button == KEYPAD_BUTTON_INVALID);
     f0c:	89 81       	ldd	r24, Y+1	; 0x01
     f0e:	80 31       	cpi	r24, 0x10	; 16
     f10:	d1 f3       	breq	.-12     	; 0xf06 <Calculator_Run+0x24>

        if (pressed_button == CALCULATOR_BUTTON_CLR) {
     f12:	89 81       	ldd	r24, Y+1	; 0x01
     f14:	88 23       	and	r24, r24
     f16:	39 f4       	brne	.+14     	; 0xf26 <Calculator_Run+0x44>
            num1_flag = 0;
     f18:	1d 82       	std	Y+5, r1	; 0x05
            num2_flag = 0;
     f1a:	1c 82       	std	Y+4, r1	; 0x04
            operation_flag = 0;
     f1c:	1b 82       	std	Y+3, r1	; 0x03
            result_flag = 0;
     f1e:	1a 82       	std	Y+2, r1	; 0x02
            LCD_Clear();
     f20:	0e 94 e8 1d 	call	0x3bd0	; 0x3bd0 <LCD_Clear>
     f24:	f0 cf       	rjmp	.-32     	; 0xf06 <Calculator_Run+0x24>
            continue;
        }
        if (num1_flag == 0) {
     f26:	8d 81       	ldd	r24, Y+5	; 0x05
     f28:	88 23       	and	r24, r24
     f2a:	81 f4       	brne	.+32     	; 0xf4c <Calculator_Run+0x6a>
            num1_flag = 1;
     f2c:	81 e0       	ldi	r24, 0x01	; 1
     f2e:	8d 83       	std	Y+5, r24	; 0x05
            num1 = Calculator_GetRealNumber(pressed_button);
     f30:	89 81       	ldd	r24, Y+1	; 0x01
     f32:	0e 94 43 08 	call	0x1086	; 0x1086 <Calculator_GetRealNumber>
     f36:	89 87       	std	Y+9, r24	; 0x09
            LCD_DisplayNumber(num1);
     f38:	89 85       	ldd	r24, Y+9	; 0x09
     f3a:	88 2f       	mov	r24, r24
     f3c:	90 e0       	ldi	r25, 0x00	; 0
     f3e:	a0 e0       	ldi	r26, 0x00	; 0
     f40:	b0 e0       	ldi	r27, 0x00	; 0
     f42:	bc 01       	movw	r22, r24
     f44:	cd 01       	movw	r24, r26
     f46:	0e 94 4c 1e 	call	0x3c98	; 0x3c98 <LCD_DisplayNumber>
     f4a:	dd cf       	rjmp	.-70     	; 0xf06 <Calculator_Run+0x24>
        }
        else if (operation_flag == 0) {
     f4c:	8b 81       	ldd	r24, Y+3	; 0x03
     f4e:	88 23       	and	r24, r24
     f50:	89 f5       	brne	.+98     	; 0xfb4 <Calculator_Run+0xd2>
            operation_flag = 1;
     f52:	81 e0       	ldi	r24, 0x01	; 1
     f54:	8b 83       	std	Y+3, r24	; 0x03
            switch (pressed_button)
     f56:	89 81       	ldd	r24, Y+1	; 0x01
     f58:	28 2f       	mov	r18, r24
     f5a:	30 e0       	ldi	r19, 0x00	; 0
     f5c:	3d 87       	std	Y+13, r19	; 0x0d
     f5e:	2c 87       	std	Y+12, r18	; 0x0c
     f60:	8c 85       	ldd	r24, Y+12	; 0x0c
     f62:	9d 85       	ldd	r25, Y+13	; 0x0d
     f64:	87 30       	cpi	r24, 0x07	; 7
     f66:	91 05       	cpc	r25, r1
     f68:	c9 f0       	breq	.+50     	; 0xf9c <Calculator_Run+0xba>
     f6a:	2c 85       	ldd	r18, Y+12	; 0x0c
     f6c:	3d 85       	ldd	r19, Y+13	; 0x0d
     f6e:	28 30       	cpi	r18, 0x08	; 8
     f70:	31 05       	cpc	r19, r1
     f72:	34 f4       	brge	.+12     	; 0xf80 <Calculator_Run+0x9e>
     f74:	8c 85       	ldd	r24, Y+12	; 0x0c
     f76:	9d 85       	ldd	r25, Y+13	; 0x0d
     f78:	83 30       	cpi	r24, 0x03	; 3
     f7a:	91 05       	cpc	r25, r1
     f7c:	61 f0       	breq	.+24     	; 0xf96 <Calculator_Run+0xb4>
     f7e:	16 c0       	rjmp	.+44     	; 0xfac <Calculator_Run+0xca>
     f80:	2c 85       	ldd	r18, Y+12	; 0x0c
     f82:	3d 85       	ldd	r19, Y+13	; 0x0d
     f84:	2b 30       	cpi	r18, 0x0B	; 11
     f86:	31 05       	cpc	r19, r1
     f88:	61 f0       	breq	.+24     	; 0xfa2 <Calculator_Run+0xc0>
     f8a:	8c 85       	ldd	r24, Y+12	; 0x0c
     f8c:	9d 85       	ldd	r25, Y+13	; 0x0d
     f8e:	8f 30       	cpi	r24, 0x0F	; 15
     f90:	91 05       	cpc	r25, r1
     f92:	51 f0       	breq	.+20     	; 0xfa8 <Calculator_Run+0xc6>
     f94:	0b c0       	rjmp	.+22     	; 0xfac <Calculator_Run+0xca>
            {
            case CALCULATOR_BUTTON_PLUS:
                operation = '+';
     f96:	8b e2       	ldi	r24, 0x2B	; 43
     f98:	8f 83       	std	Y+7, r24	; 0x07
     f9a:	08 c0       	rjmp	.+16     	; 0xfac <Calculator_Run+0xca>
                break;
            case CALCULATOR_BUTTON_MINUS:
                operation = '-';
     f9c:	8d e2       	ldi	r24, 0x2D	; 45
     f9e:	8f 83       	std	Y+7, r24	; 0x07
     fa0:	05 c0       	rjmp	.+10     	; 0xfac <Calculator_Run+0xca>
                break;
            case CALCULATOR_BUTTON_MUL:
                operation = '*';
     fa2:	8a e2       	ldi	r24, 0x2A	; 42
     fa4:	8f 83       	std	Y+7, r24	; 0x07
     fa6:	02 c0       	rjmp	.+4      	; 0xfac <Calculator_Run+0xca>
                break;
            case CALCULATOR_BUTTON_DIV:
                operation = '/';
     fa8:	8f e2       	ldi	r24, 0x2F	; 47
     faa:	8f 83       	std	Y+7, r24	; 0x07
                break;
            default:
                break;
            }
            LCD_DisplayCharacter(operation);
     fac:	8f 81       	ldd	r24, Y+7	; 0x07
     fae:	0e 94 f2 1d 	call	0x3be4	; 0x3be4 <LCD_DisplayCharacter>
     fb2:	a9 cf       	rjmp	.-174    	; 0xf06 <Calculator_Run+0x24>
        }
        else if (num2_flag == 0) {
     fb4:	8c 81       	ldd	r24, Y+4	; 0x04
     fb6:	88 23       	and	r24, r24
     fb8:	81 f4       	brne	.+32     	; 0xfda <Calculator_Run+0xf8>
            num2_flag = 1;
     fba:	81 e0       	ldi	r24, 0x01	; 1
     fbc:	8c 83       	std	Y+4, r24	; 0x04
            num2 = Calculator_GetRealNumber(pressed_button);
     fbe:	89 81       	ldd	r24, Y+1	; 0x01
     fc0:	0e 94 43 08 	call	0x1086	; 0x1086 <Calculator_GetRealNumber>
     fc4:	88 87       	std	Y+8, r24	; 0x08
            LCD_DisplayNumber(num2);
     fc6:	88 85       	ldd	r24, Y+8	; 0x08
     fc8:	88 2f       	mov	r24, r24
     fca:	90 e0       	ldi	r25, 0x00	; 0
     fcc:	a0 e0       	ldi	r26, 0x00	; 0
     fce:	b0 e0       	ldi	r27, 0x00	; 0
     fd0:	bc 01       	movw	r22, r24
     fd2:	cd 01       	movw	r24, r26
     fd4:	0e 94 4c 1e 	call	0x3c98	; 0x3c98 <LCD_DisplayNumber>
     fd8:	96 cf       	rjmp	.-212    	; 0xf06 <Calculator_Run+0x24>
        }
        else if (result_flag == 0) {
     fda:	8a 81       	ldd	r24, Y+2	; 0x02
     fdc:	88 23       	and	r24, r24
     fde:	09 f0       	breq	.+2      	; 0xfe2 <Calculator_Run+0x100>
     fe0:	92 cf       	rjmp	.-220    	; 0xf06 <Calculator_Run+0x24>
            if (pressed_button == CALCULATOR_BUTTON_EQUAL) {
     fe2:	89 81       	ldd	r24, Y+1	; 0x01
     fe4:	82 30       	cpi	r24, 0x02	; 2
     fe6:	09 f0       	breq	.+2      	; 0xfea <Calculator_Run+0x108>
     fe8:	8e cf       	rjmp	.-228    	; 0xf06 <Calculator_Run+0x24>
                result_flag = 1;
     fea:	81 e0       	ldi	r24, 0x01	; 1
     fec:	8a 83       	std	Y+2, r24	; 0x02
                switch (operation)
     fee:	8f 81       	ldd	r24, Y+7	; 0x07
     ff0:	28 2f       	mov	r18, r24
     ff2:	30 e0       	ldi	r19, 0x00	; 0
     ff4:	3b 87       	std	Y+11, r19	; 0x0b
     ff6:	2a 87       	std	Y+10, r18	; 0x0a
     ff8:	8a 85       	ldd	r24, Y+10	; 0x0a
     ffa:	9b 85       	ldd	r25, Y+11	; 0x0b
     ffc:	8b 32       	cpi	r24, 0x2B	; 43
     ffe:	91 05       	cpc	r25, r1
    1000:	b1 f0       	breq	.+44     	; 0x102e <Calculator_Run+0x14c>
    1002:	2a 85       	ldd	r18, Y+10	; 0x0a
    1004:	3b 85       	ldd	r19, Y+11	; 0x0b
    1006:	2c 32       	cpi	r18, 0x2C	; 44
    1008:	31 05       	cpc	r19, r1
    100a:	34 f4       	brge	.+12     	; 0x1018 <Calculator_Run+0x136>
    100c:	8a 85       	ldd	r24, Y+10	; 0x0a
    100e:	9b 85       	ldd	r25, Y+11	; 0x0b
    1010:	8a 32       	cpi	r24, 0x2A	; 42
    1012:	91 05       	cpc	r25, r1
    1014:	b1 f0       	breq	.+44     	; 0x1042 <Calculator_Run+0x160>
    1016:	22 c0       	rjmp	.+68     	; 0x105c <Calculator_Run+0x17a>
    1018:	2a 85       	ldd	r18, Y+10	; 0x0a
    101a:	3b 85       	ldd	r19, Y+11	; 0x0b
    101c:	2d 32       	cpi	r18, 0x2D	; 45
    101e:	31 05       	cpc	r19, r1
    1020:	59 f0       	breq	.+22     	; 0x1038 <Calculator_Run+0x156>
    1022:	8a 85       	ldd	r24, Y+10	; 0x0a
    1024:	9b 85       	ldd	r25, Y+11	; 0x0b
    1026:	8f 32       	cpi	r24, 0x2F	; 47
    1028:	91 05       	cpc	r25, r1
    102a:	91 f0       	breq	.+36     	; 0x1050 <Calculator_Run+0x16e>
    102c:	17 c0       	rjmp	.+46     	; 0x105c <Calculator_Run+0x17a>
                {
                case '+':
                    result = num1 + num2;
    102e:	89 85       	ldd	r24, Y+9	; 0x09
    1030:	98 85       	ldd	r25, Y+8	; 0x08
    1032:	89 0f       	add	r24, r25
    1034:	8e 83       	std	Y+6, r24	; 0x06
    1036:	12 c0       	rjmp	.+36     	; 0x105c <Calculator_Run+0x17a>
                    break;
                case '-':
                    result = num1 - num2;
    1038:	89 85       	ldd	r24, Y+9	; 0x09
    103a:	98 85       	ldd	r25, Y+8	; 0x08
    103c:	89 1b       	sub	r24, r25
    103e:	8e 83       	std	Y+6, r24	; 0x06
    1040:	0d c0       	rjmp	.+26     	; 0x105c <Calculator_Run+0x17a>
                    break;
                case '*':
                    result = num1 * num2;
    1042:	89 85       	ldd	r24, Y+9	; 0x09
    1044:	98 85       	ldd	r25, Y+8	; 0x08
    1046:	89 9f       	mul	r24, r25
    1048:	80 2d       	mov	r24, r0
    104a:	11 24       	eor	r1, r1
    104c:	8e 83       	std	Y+6, r24	; 0x06
    104e:	06 c0       	rjmp	.+12     	; 0x105c <Calculator_Run+0x17a>
                    break;
                case '/':
                    result = num1 / num2;
    1050:	89 85       	ldd	r24, Y+9	; 0x09
    1052:	98 85       	ldd	r25, Y+8	; 0x08
    1054:	69 2f       	mov	r22, r25
    1056:	0e 94 b2 27 	call	0x4f64	; 0x4f64 <__udivmodqi4>
    105a:	8e 83       	std	Y+6, r24	; 0x06
                    break;
                default:
                    break;
                }
                LCD_DisplayCharacter('=');
    105c:	8d e3       	ldi	r24, 0x3D	; 61
    105e:	0e 94 f2 1d 	call	0x3be4	; 0x3be4 <LCD_DisplayCharacter>
                LCD_SetCursorPosition(1,0);
    1062:	81 e0       	ldi	r24, 0x01	; 1
    1064:	60 e0       	ldi	r22, 0x00	; 0
    1066:	0e 94 28 1e 	call	0x3c50	; 0x3c50 <LCD_SetCursorPosition>
                LCD_DisplayString((u8*)"Result = ");
    106a:	80 e6       	ldi	r24, 0x60	; 96
    106c:	90 e0       	ldi	r25, 0x00	; 0
    106e:	0e 94 ff 1d 	call	0x3bfe	; 0x3bfe <LCD_DisplayString>
                LCD_DisplayNumber(result);
    1072:	8e 81       	ldd	r24, Y+6	; 0x06
    1074:	88 2f       	mov	r24, r24
    1076:	90 e0       	ldi	r25, 0x00	; 0
    1078:	a0 e0       	ldi	r26, 0x00	; 0
    107a:	b0 e0       	ldi	r27, 0x00	; 0
    107c:	bc 01       	movw	r22, r24
    107e:	cd 01       	movw	r24, r26
    1080:	0e 94 4c 1e 	call	0x3c98	; 0x3c98 <LCD_DisplayNumber>
    1084:	40 cf       	rjmp	.-384    	; 0xf06 <Calculator_Run+0x24>

00001086 <Calculator_GetRealNumber>:
            }
        }
    }
}

 u8 Calculator_GetRealNumber (Keypad_ButtonType button) {
    1086:	df 93       	push	r29
    1088:	cf 93       	push	r28
    108a:	00 d0       	rcall	.+0      	; 0x108c <Calculator_GetRealNumber+0x6>
    108c:	00 d0       	rcall	.+0      	; 0x108e <Calculator_GetRealNumber+0x8>
    108e:	cd b7       	in	r28, 0x3d	; 61
    1090:	de b7       	in	r29, 0x3e	; 62
    1092:	8a 83       	std	Y+2, r24	; 0x02
    u8 num = 0;
    1094:	19 82       	std	Y+1, r1	; 0x01
    switch (button)
    1096:	8a 81       	ldd	r24, Y+2	; 0x02
    1098:	28 2f       	mov	r18, r24
    109a:	30 e0       	ldi	r19, 0x00	; 0
    109c:	3c 83       	std	Y+4, r19	; 0x04
    109e:	2b 83       	std	Y+3, r18	; 0x03
    10a0:	8b 81       	ldd	r24, Y+3	; 0x03
    10a2:	9c 81       	ldd	r25, Y+4	; 0x04
    10a4:	88 30       	cpi	r24, 0x08	; 8
    10a6:	91 05       	cpc	r25, r1
    10a8:	09 f4       	brne	.+2      	; 0x10ac <Calculator_GetRealNumber+0x26>
    10aa:	4b c0       	rjmp	.+150    	; 0x1142 <Calculator_GetRealNumber+0xbc>
    10ac:	2b 81       	ldd	r18, Y+3	; 0x03
    10ae:	3c 81       	ldd	r19, Y+4	; 0x04
    10b0:	29 30       	cpi	r18, 0x09	; 9
    10b2:	31 05       	cpc	r19, r1
    10b4:	dc f4       	brge	.+54     	; 0x10ec <Calculator_GetRealNumber+0x66>
    10b6:	8b 81       	ldd	r24, Y+3	; 0x03
    10b8:	9c 81       	ldd	r25, Y+4	; 0x04
    10ba:	84 30       	cpi	r24, 0x04	; 4
    10bc:	91 05       	cpc	r25, r1
    10be:	c1 f1       	breq	.+112    	; 0x1130 <Calculator_GetRealNumber+0xaa>
    10c0:	2b 81       	ldd	r18, Y+3	; 0x03
    10c2:	3c 81       	ldd	r19, Y+4	; 0x04
    10c4:	25 30       	cpi	r18, 0x05	; 5
    10c6:	31 05       	cpc	r19, r1
    10c8:	34 f4       	brge	.+12     	; 0x10d6 <Calculator_GetRealNumber+0x50>
    10ca:	8b 81       	ldd	r24, Y+3	; 0x03
    10cc:	9c 81       	ldd	r25, Y+4	; 0x04
    10ce:	81 30       	cpi	r24, 0x01	; 1
    10d0:	91 05       	cpc	r25, r1
    10d2:	61 f1       	breq	.+88     	; 0x112c <Calculator_GetRealNumber+0xa6>
    10d4:	47 c0       	rjmp	.+142    	; 0x1164 <Calculator_GetRealNumber+0xde>
    10d6:	2b 81       	ldd	r18, Y+3	; 0x03
    10d8:	3c 81       	ldd	r19, Y+4	; 0x04
    10da:	25 30       	cpi	r18, 0x05	; 5
    10dc:	31 05       	cpc	r19, r1
    10de:	59 f1       	breq	.+86     	; 0x1136 <Calculator_GetRealNumber+0xb0>
    10e0:	8b 81       	ldd	r24, Y+3	; 0x03
    10e2:	9c 81       	ldd	r25, Y+4	; 0x04
    10e4:	86 30       	cpi	r24, 0x06	; 6
    10e6:	91 05       	cpc	r25, r1
    10e8:	49 f1       	breq	.+82     	; 0x113c <Calculator_GetRealNumber+0xb6>
    10ea:	3c c0       	rjmp	.+120    	; 0x1164 <Calculator_GetRealNumber+0xde>
    10ec:	2b 81       	ldd	r18, Y+3	; 0x03
    10ee:	3c 81       	ldd	r19, Y+4	; 0x04
    10f0:	2c 30       	cpi	r18, 0x0C	; 12
    10f2:	31 05       	cpc	r19, r1
    10f4:	79 f1       	breq	.+94     	; 0x1154 <Calculator_GetRealNumber+0xce>
    10f6:	8b 81       	ldd	r24, Y+3	; 0x03
    10f8:	9c 81       	ldd	r25, Y+4	; 0x04
    10fa:	8d 30       	cpi	r24, 0x0D	; 13
    10fc:	91 05       	cpc	r25, r1
    10fe:	5c f4       	brge	.+22     	; 0x1116 <Calculator_GetRealNumber+0x90>
    1100:	2b 81       	ldd	r18, Y+3	; 0x03
    1102:	3c 81       	ldd	r19, Y+4	; 0x04
    1104:	29 30       	cpi	r18, 0x09	; 9
    1106:	31 05       	cpc	r19, r1
    1108:	f9 f0       	breq	.+62     	; 0x1148 <Calculator_GetRealNumber+0xc2>
    110a:	8b 81       	ldd	r24, Y+3	; 0x03
    110c:	9c 81       	ldd	r25, Y+4	; 0x04
    110e:	8a 30       	cpi	r24, 0x0A	; 10
    1110:	91 05       	cpc	r25, r1
    1112:	e9 f0       	breq	.+58     	; 0x114e <Calculator_GetRealNumber+0xc8>
    1114:	27 c0       	rjmp	.+78     	; 0x1164 <Calculator_GetRealNumber+0xde>
    1116:	2b 81       	ldd	r18, Y+3	; 0x03
    1118:	3c 81       	ldd	r19, Y+4	; 0x04
    111a:	2d 30       	cpi	r18, 0x0D	; 13
    111c:	31 05       	cpc	r19, r1
    111e:	e9 f0       	breq	.+58     	; 0x115a <Calculator_GetRealNumber+0xd4>
    1120:	8b 81       	ldd	r24, Y+3	; 0x03
    1122:	9c 81       	ldd	r25, Y+4	; 0x04
    1124:	8e 30       	cpi	r24, 0x0E	; 14
    1126:	91 05       	cpc	r25, r1
    1128:	d9 f0       	breq	.+54     	; 0x1160 <Calculator_GetRealNumber+0xda>
    112a:	1c c0       	rjmp	.+56     	; 0x1164 <Calculator_GetRealNumber+0xde>
    {
    case CALCULATOR_BUTTON_NUM0:
        num = 0;
    112c:	19 82       	std	Y+1, r1	; 0x01
    112e:	1a c0       	rjmp	.+52     	; 0x1164 <Calculator_GetRealNumber+0xde>
        break;
    case CALCULATOR_BUTTON_NUM1:
        num = 1;
    1130:	81 e0       	ldi	r24, 0x01	; 1
    1132:	89 83       	std	Y+1, r24	; 0x01
    1134:	17 c0       	rjmp	.+46     	; 0x1164 <Calculator_GetRealNumber+0xde>
        break;
    case CALCULATOR_BUTTON_NUM2:
        num = 2;
    1136:	82 e0       	ldi	r24, 0x02	; 2
    1138:	89 83       	std	Y+1, r24	; 0x01
    113a:	14 c0       	rjmp	.+40     	; 0x1164 <Calculator_GetRealNumber+0xde>
        break;
    case CALCULATOR_BUTTON_NUM3:
        num = 3;
    113c:	83 e0       	ldi	r24, 0x03	; 3
    113e:	89 83       	std	Y+1, r24	; 0x01
    1140:	11 c0       	rjmp	.+34     	; 0x1164 <Calculator_GetRealNumber+0xde>
        break;
    case CALCULATOR_BUTTON_NUM4:
        num = 4;
    1142:	84 e0       	ldi	r24, 0x04	; 4
    1144:	89 83       	std	Y+1, r24	; 0x01
    1146:	0e c0       	rjmp	.+28     	; 0x1164 <Calculator_GetRealNumber+0xde>
        break;
    case CALCULATOR_BUTTON_NUM5:
        num = 5;
    1148:	85 e0       	ldi	r24, 0x05	; 5
    114a:	89 83       	std	Y+1, r24	; 0x01
    114c:	0b c0       	rjmp	.+22     	; 0x1164 <Calculator_GetRealNumber+0xde>
        break;
    case CALCULATOR_BUTTON_NUM6:
        num = 6;
    114e:	86 e0       	ldi	r24, 0x06	; 6
    1150:	89 83       	std	Y+1, r24	; 0x01
    1152:	08 c0       	rjmp	.+16     	; 0x1164 <Calculator_GetRealNumber+0xde>
        break;
    case CALCULATOR_BUTTON_NUM7:
        num = 7;
    1154:	87 e0       	ldi	r24, 0x07	; 7
    1156:	89 83       	std	Y+1, r24	; 0x01
    1158:	05 c0       	rjmp	.+10     	; 0x1164 <Calculator_GetRealNumber+0xde>
        break;
    case CALCULATOR_BUTTON_NUM8:
        num = 8;
    115a:	88 e0       	ldi	r24, 0x08	; 8
    115c:	89 83       	std	Y+1, r24	; 0x01
    115e:	02 c0       	rjmp	.+4      	; 0x1164 <Calculator_GetRealNumber+0xde>
        break;
    case CALCULATOR_BUTTON_NUM9:
        num = 9;
    1160:	89 e0       	ldi	r24, 0x09	; 9
    1162:	89 83       	std	Y+1, r24	; 0x01
        break;
    default:
        break;
    }
    return num;
    1164:	89 81       	ldd	r24, Y+1	; 0x01
}
    1166:	0f 90       	pop	r0
    1168:	0f 90       	pop	r0
    116a:	0f 90       	pop	r0
    116c:	0f 90       	pop	r0
    116e:	cf 91       	pop	r28
    1170:	df 91       	pop	r29
    1172:	08 95       	ret

00001174 <DIO_FlipPinLevel>:
#include "std_types.h"
#include "macros.h"
#include "DIO.h"

void DIO_FlipPinLevel(DIO_PortType port, DIO_PinType pin) {
    1174:	df 93       	push	r29
    1176:	cf 93       	push	r28
    1178:	00 d0       	rcall	.+0      	; 0x117a <DIO_FlipPinLevel+0x6>
    117a:	00 d0       	rcall	.+0      	; 0x117c <DIO_FlipPinLevel+0x8>
    117c:	cd b7       	in	r28, 0x3d	; 61
    117e:	de b7       	in	r29, 0x3e	; 62
    1180:	89 83       	std	Y+1, r24	; 0x01
    1182:	6a 83       	std	Y+2, r22	; 0x02
    switch (port)
    1184:	89 81       	ldd	r24, Y+1	; 0x01
    1186:	28 2f       	mov	r18, r24
    1188:	30 e0       	ldi	r19, 0x00	; 0
    118a:	3c 83       	std	Y+4, r19	; 0x04
    118c:	2b 83       	std	Y+3, r18	; 0x03
    118e:	8b 81       	ldd	r24, Y+3	; 0x03
    1190:	9c 81       	ldd	r25, Y+4	; 0x04
    1192:	81 30       	cpi	r24, 0x01	; 1
    1194:	91 05       	cpc	r25, r1
    1196:	49 f1       	breq	.+82     	; 0x11ea <DIO_FlipPinLevel+0x76>
    1198:	2b 81       	ldd	r18, Y+3	; 0x03
    119a:	3c 81       	ldd	r19, Y+4	; 0x04
    119c:	22 30       	cpi	r18, 0x02	; 2
    119e:	31 05       	cpc	r19, r1
    11a0:	2c f4       	brge	.+10     	; 0x11ac <DIO_FlipPinLevel+0x38>
    11a2:	8b 81       	ldd	r24, Y+3	; 0x03
    11a4:	9c 81       	ldd	r25, Y+4	; 0x04
    11a6:	00 97       	sbiw	r24, 0x00	; 0
    11a8:	61 f0       	breq	.+24     	; 0x11c2 <DIO_FlipPinLevel+0x4e>
    11aa:	5a c0       	rjmp	.+180    	; 0x1260 <DIO_FlipPinLevel+0xec>
    11ac:	2b 81       	ldd	r18, Y+3	; 0x03
    11ae:	3c 81       	ldd	r19, Y+4	; 0x04
    11b0:	22 30       	cpi	r18, 0x02	; 2
    11b2:	31 05       	cpc	r19, r1
    11b4:	71 f1       	breq	.+92     	; 0x1212 <DIO_FlipPinLevel+0x9e>
    11b6:	8b 81       	ldd	r24, Y+3	; 0x03
    11b8:	9c 81       	ldd	r25, Y+4	; 0x04
    11ba:	83 30       	cpi	r24, 0x03	; 3
    11bc:	91 05       	cpc	r25, r1
    11be:	e9 f1       	breq	.+122    	; 0x123a <DIO_FlipPinLevel+0xc6>
    11c0:	4f c0       	rjmp	.+158    	; 0x1260 <DIO_FlipPinLevel+0xec>
    {
    case DIO_PORTA:
        TOG_BIT(PORTA, pin);
    11c2:	ab e3       	ldi	r26, 0x3B	; 59
    11c4:	b0 e0       	ldi	r27, 0x00	; 0
    11c6:	eb e3       	ldi	r30, 0x3B	; 59
    11c8:	f0 e0       	ldi	r31, 0x00	; 0
    11ca:	80 81       	ld	r24, Z
    11cc:	48 2f       	mov	r20, r24
    11ce:	8a 81       	ldd	r24, Y+2	; 0x02
    11d0:	28 2f       	mov	r18, r24
    11d2:	30 e0       	ldi	r19, 0x00	; 0
    11d4:	81 e0       	ldi	r24, 0x01	; 1
    11d6:	90 e0       	ldi	r25, 0x00	; 0
    11d8:	02 2e       	mov	r0, r18
    11da:	02 c0       	rjmp	.+4      	; 0x11e0 <DIO_FlipPinLevel+0x6c>
    11dc:	88 0f       	add	r24, r24
    11de:	99 1f       	adc	r25, r25
    11e0:	0a 94       	dec	r0
    11e2:	e2 f7       	brpl	.-8      	; 0x11dc <DIO_FlipPinLevel+0x68>
    11e4:	84 27       	eor	r24, r20
    11e6:	8c 93       	st	X, r24
    11e8:	3b c0       	rjmp	.+118    	; 0x1260 <DIO_FlipPinLevel+0xec>
        break;
    case DIO_PORTB:
        TOG_BIT(PORTB, pin);
    11ea:	a8 e3       	ldi	r26, 0x38	; 56
    11ec:	b0 e0       	ldi	r27, 0x00	; 0
    11ee:	e8 e3       	ldi	r30, 0x38	; 56
    11f0:	f0 e0       	ldi	r31, 0x00	; 0
    11f2:	80 81       	ld	r24, Z
    11f4:	48 2f       	mov	r20, r24
    11f6:	8a 81       	ldd	r24, Y+2	; 0x02
    11f8:	28 2f       	mov	r18, r24
    11fa:	30 e0       	ldi	r19, 0x00	; 0
    11fc:	81 e0       	ldi	r24, 0x01	; 1
    11fe:	90 e0       	ldi	r25, 0x00	; 0
    1200:	02 2e       	mov	r0, r18
    1202:	02 c0       	rjmp	.+4      	; 0x1208 <DIO_FlipPinLevel+0x94>
    1204:	88 0f       	add	r24, r24
    1206:	99 1f       	adc	r25, r25
    1208:	0a 94       	dec	r0
    120a:	e2 f7       	brpl	.-8      	; 0x1204 <DIO_FlipPinLevel+0x90>
    120c:	84 27       	eor	r24, r20
    120e:	8c 93       	st	X, r24
    1210:	27 c0       	rjmp	.+78     	; 0x1260 <DIO_FlipPinLevel+0xec>
        break;
    case DIO_PORTC:
        TOG_BIT(PORTC, pin);
    1212:	a5 e3       	ldi	r26, 0x35	; 53
    1214:	b0 e0       	ldi	r27, 0x00	; 0
    1216:	e5 e3       	ldi	r30, 0x35	; 53
    1218:	f0 e0       	ldi	r31, 0x00	; 0
    121a:	80 81       	ld	r24, Z
    121c:	48 2f       	mov	r20, r24
    121e:	8a 81       	ldd	r24, Y+2	; 0x02
    1220:	28 2f       	mov	r18, r24
    1222:	30 e0       	ldi	r19, 0x00	; 0
    1224:	81 e0       	ldi	r24, 0x01	; 1
    1226:	90 e0       	ldi	r25, 0x00	; 0
    1228:	02 2e       	mov	r0, r18
    122a:	02 c0       	rjmp	.+4      	; 0x1230 <DIO_FlipPinLevel+0xbc>
    122c:	88 0f       	add	r24, r24
    122e:	99 1f       	adc	r25, r25
    1230:	0a 94       	dec	r0
    1232:	e2 f7       	brpl	.-8      	; 0x122c <DIO_FlipPinLevel+0xb8>
    1234:	84 27       	eor	r24, r20
    1236:	8c 93       	st	X, r24
    1238:	13 c0       	rjmp	.+38     	; 0x1260 <DIO_FlipPinLevel+0xec>
        break;
    case DIO_PORTD:
        TOG_BIT(PORTD, pin);
    123a:	a2 e3       	ldi	r26, 0x32	; 50
    123c:	b0 e0       	ldi	r27, 0x00	; 0
    123e:	e2 e3       	ldi	r30, 0x32	; 50
    1240:	f0 e0       	ldi	r31, 0x00	; 0
    1242:	80 81       	ld	r24, Z
    1244:	48 2f       	mov	r20, r24
    1246:	8a 81       	ldd	r24, Y+2	; 0x02
    1248:	28 2f       	mov	r18, r24
    124a:	30 e0       	ldi	r19, 0x00	; 0
    124c:	81 e0       	ldi	r24, 0x01	; 1
    124e:	90 e0       	ldi	r25, 0x00	; 0
    1250:	02 2e       	mov	r0, r18
    1252:	02 c0       	rjmp	.+4      	; 0x1258 <DIO_FlipPinLevel+0xe4>
    1254:	88 0f       	add	r24, r24
    1256:	99 1f       	adc	r25, r25
    1258:	0a 94       	dec	r0
    125a:	e2 f7       	brpl	.-8      	; 0x1254 <DIO_FlipPinLevel+0xe0>
    125c:	84 27       	eor	r24, r20
    125e:	8c 93       	st	X, r24
        break;
    default:
        break;
    }
}
    1260:	0f 90       	pop	r0
    1262:	0f 90       	pop	r0
    1264:	0f 90       	pop	r0
    1266:	0f 90       	pop	r0
    1268:	cf 91       	pop	r28
    126a:	df 91       	pop	r29
    126c:	08 95       	ret

0000126e <DIO_SetPinMode>:
void DIO_SetPinMode(DIO_PortType port, DIO_PinType pin, DIO_ModeType mode) {
    126e:	df 93       	push	r29
    1270:	cf 93       	push	r28
    1272:	cd b7       	in	r28, 0x3d	; 61
    1274:	de b7       	in	r29, 0x3e	; 62
    1276:	29 97       	sbiw	r28, 0x09	; 9
    1278:	0f b6       	in	r0, 0x3f	; 63
    127a:	f8 94       	cli
    127c:	de bf       	out	0x3e, r29	; 62
    127e:	0f be       	out	0x3f, r0	; 63
    1280:	cd bf       	out	0x3d, r28	; 61
    1282:	89 83       	std	Y+1, r24	; 0x01
    1284:	6a 83       	std	Y+2, r22	; 0x02
    1286:	4b 83       	std	Y+3, r20	; 0x03
    if (mode == DIO_INPUT_FLOATING)
    1288:	8b 81       	ldd	r24, Y+3	; 0x03
    128a:	88 23       	and	r24, r24
    128c:	09 f0       	breq	.+2      	; 0x1290 <DIO_SetPinMode+0x22>
    128e:	c2 c0       	rjmp	.+388    	; 0x1414 <DIO_SetPinMode+0x1a6>
    {
        switch (port)
    1290:	89 81       	ldd	r24, Y+1	; 0x01
    1292:	28 2f       	mov	r18, r24
    1294:	30 e0       	ldi	r19, 0x00	; 0
    1296:	39 87       	std	Y+9, r19	; 0x09
    1298:	28 87       	std	Y+8, r18	; 0x08
    129a:	88 85       	ldd	r24, Y+8	; 0x08
    129c:	99 85       	ldd	r25, Y+9	; 0x09
    129e:	81 30       	cpi	r24, 0x01	; 1
    12a0:	91 05       	cpc	r25, r1
    12a2:	09 f4       	brne	.+2      	; 0x12a6 <DIO_SetPinMode+0x38>
    12a4:	3f c0       	rjmp	.+126    	; 0x1324 <DIO_SetPinMode+0xb6>
    12a6:	28 85       	ldd	r18, Y+8	; 0x08
    12a8:	39 85       	ldd	r19, Y+9	; 0x09
    12aa:	22 30       	cpi	r18, 0x02	; 2
    12ac:	31 05       	cpc	r19, r1
    12ae:	2c f4       	brge	.+10     	; 0x12ba <DIO_SetPinMode+0x4c>
    12b0:	88 85       	ldd	r24, Y+8	; 0x08
    12b2:	99 85       	ldd	r25, Y+9	; 0x09
    12b4:	00 97       	sbiw	r24, 0x00	; 0
    12b6:	71 f0       	breq	.+28     	; 0x12d4 <DIO_SetPinMode+0x66>
    12b8:	e1 c1       	rjmp	.+962    	; 0x167c <DIO_SetPinMode+0x40e>
    12ba:	28 85       	ldd	r18, Y+8	; 0x08
    12bc:	39 85       	ldd	r19, Y+9	; 0x09
    12be:	22 30       	cpi	r18, 0x02	; 2
    12c0:	31 05       	cpc	r19, r1
    12c2:	09 f4       	brne	.+2      	; 0x12c6 <DIO_SetPinMode+0x58>
    12c4:	57 c0       	rjmp	.+174    	; 0x1374 <DIO_SetPinMode+0x106>
    12c6:	88 85       	ldd	r24, Y+8	; 0x08
    12c8:	99 85       	ldd	r25, Y+9	; 0x09
    12ca:	83 30       	cpi	r24, 0x03	; 3
    12cc:	91 05       	cpc	r25, r1
    12ce:	09 f4       	brne	.+2      	; 0x12d2 <DIO_SetPinMode+0x64>
    12d0:	79 c0       	rjmp	.+242    	; 0x13c4 <DIO_SetPinMode+0x156>
    12d2:	d4 c1       	rjmp	.+936    	; 0x167c <DIO_SetPinMode+0x40e>
        {
        case DIO_PORTA:
            CLR_BIT(DDRA, pin);
    12d4:	aa e3       	ldi	r26, 0x3A	; 58
    12d6:	b0 e0       	ldi	r27, 0x00	; 0
    12d8:	ea e3       	ldi	r30, 0x3A	; 58
    12da:	f0 e0       	ldi	r31, 0x00	; 0
    12dc:	80 81       	ld	r24, Z
    12de:	48 2f       	mov	r20, r24
    12e0:	8a 81       	ldd	r24, Y+2	; 0x02
    12e2:	28 2f       	mov	r18, r24
    12e4:	30 e0       	ldi	r19, 0x00	; 0
    12e6:	81 e0       	ldi	r24, 0x01	; 1
    12e8:	90 e0       	ldi	r25, 0x00	; 0
    12ea:	02 c0       	rjmp	.+4      	; 0x12f0 <DIO_SetPinMode+0x82>
    12ec:	88 0f       	add	r24, r24
    12ee:	99 1f       	adc	r25, r25
    12f0:	2a 95       	dec	r18
    12f2:	e2 f7       	brpl	.-8      	; 0x12ec <DIO_SetPinMode+0x7e>
    12f4:	80 95       	com	r24
    12f6:	84 23       	and	r24, r20
    12f8:	8c 93       	st	X, r24
            CLR_BIT(PORTA, pin);
    12fa:	ab e3       	ldi	r26, 0x3B	; 59
    12fc:	b0 e0       	ldi	r27, 0x00	; 0
    12fe:	eb e3       	ldi	r30, 0x3B	; 59
    1300:	f0 e0       	ldi	r31, 0x00	; 0
    1302:	80 81       	ld	r24, Z
    1304:	48 2f       	mov	r20, r24
    1306:	8a 81       	ldd	r24, Y+2	; 0x02
    1308:	28 2f       	mov	r18, r24
    130a:	30 e0       	ldi	r19, 0x00	; 0
    130c:	81 e0       	ldi	r24, 0x01	; 1
    130e:	90 e0       	ldi	r25, 0x00	; 0
    1310:	02 2e       	mov	r0, r18
    1312:	02 c0       	rjmp	.+4      	; 0x1318 <DIO_SetPinMode+0xaa>
    1314:	88 0f       	add	r24, r24
    1316:	99 1f       	adc	r25, r25
    1318:	0a 94       	dec	r0
    131a:	e2 f7       	brpl	.-8      	; 0x1314 <DIO_SetPinMode+0xa6>
    131c:	80 95       	com	r24
    131e:	84 23       	and	r24, r20
    1320:	8c 93       	st	X, r24
    1322:	ac c1       	rjmp	.+856    	; 0x167c <DIO_SetPinMode+0x40e>
            break;
        case DIO_PORTB:
            CLR_BIT(DDRB, pin);
    1324:	a7 e3       	ldi	r26, 0x37	; 55
    1326:	b0 e0       	ldi	r27, 0x00	; 0
    1328:	e7 e3       	ldi	r30, 0x37	; 55
    132a:	f0 e0       	ldi	r31, 0x00	; 0
    132c:	80 81       	ld	r24, Z
    132e:	48 2f       	mov	r20, r24
    1330:	8a 81       	ldd	r24, Y+2	; 0x02
    1332:	28 2f       	mov	r18, r24
    1334:	30 e0       	ldi	r19, 0x00	; 0
    1336:	81 e0       	ldi	r24, 0x01	; 1
    1338:	90 e0       	ldi	r25, 0x00	; 0
    133a:	02 c0       	rjmp	.+4      	; 0x1340 <DIO_SetPinMode+0xd2>
    133c:	88 0f       	add	r24, r24
    133e:	99 1f       	adc	r25, r25
    1340:	2a 95       	dec	r18
    1342:	e2 f7       	brpl	.-8      	; 0x133c <DIO_SetPinMode+0xce>
    1344:	80 95       	com	r24
    1346:	84 23       	and	r24, r20
    1348:	8c 93       	st	X, r24
            CLR_BIT(PORTB, pin);
    134a:	a8 e3       	ldi	r26, 0x38	; 56
    134c:	b0 e0       	ldi	r27, 0x00	; 0
    134e:	e8 e3       	ldi	r30, 0x38	; 56
    1350:	f0 e0       	ldi	r31, 0x00	; 0
    1352:	80 81       	ld	r24, Z
    1354:	48 2f       	mov	r20, r24
    1356:	8a 81       	ldd	r24, Y+2	; 0x02
    1358:	28 2f       	mov	r18, r24
    135a:	30 e0       	ldi	r19, 0x00	; 0
    135c:	81 e0       	ldi	r24, 0x01	; 1
    135e:	90 e0       	ldi	r25, 0x00	; 0
    1360:	02 2e       	mov	r0, r18
    1362:	02 c0       	rjmp	.+4      	; 0x1368 <DIO_SetPinMode+0xfa>
    1364:	88 0f       	add	r24, r24
    1366:	99 1f       	adc	r25, r25
    1368:	0a 94       	dec	r0
    136a:	e2 f7       	brpl	.-8      	; 0x1364 <DIO_SetPinMode+0xf6>
    136c:	80 95       	com	r24
    136e:	84 23       	and	r24, r20
    1370:	8c 93       	st	X, r24
    1372:	84 c1       	rjmp	.+776    	; 0x167c <DIO_SetPinMode+0x40e>
            break;
        case DIO_PORTC:
            CLR_BIT(DDRC, pin);
    1374:	a4 e3       	ldi	r26, 0x34	; 52
    1376:	b0 e0       	ldi	r27, 0x00	; 0
    1378:	e4 e3       	ldi	r30, 0x34	; 52
    137a:	f0 e0       	ldi	r31, 0x00	; 0
    137c:	80 81       	ld	r24, Z
    137e:	48 2f       	mov	r20, r24
    1380:	8a 81       	ldd	r24, Y+2	; 0x02
    1382:	28 2f       	mov	r18, r24
    1384:	30 e0       	ldi	r19, 0x00	; 0
    1386:	81 e0       	ldi	r24, 0x01	; 1
    1388:	90 e0       	ldi	r25, 0x00	; 0
    138a:	02 c0       	rjmp	.+4      	; 0x1390 <DIO_SetPinMode+0x122>
    138c:	88 0f       	add	r24, r24
    138e:	99 1f       	adc	r25, r25
    1390:	2a 95       	dec	r18
    1392:	e2 f7       	brpl	.-8      	; 0x138c <DIO_SetPinMode+0x11e>
    1394:	80 95       	com	r24
    1396:	84 23       	and	r24, r20
    1398:	8c 93       	st	X, r24
            CLR_BIT(PORTC, pin);
    139a:	a5 e3       	ldi	r26, 0x35	; 53
    139c:	b0 e0       	ldi	r27, 0x00	; 0
    139e:	e5 e3       	ldi	r30, 0x35	; 53
    13a0:	f0 e0       	ldi	r31, 0x00	; 0
    13a2:	80 81       	ld	r24, Z
    13a4:	48 2f       	mov	r20, r24
    13a6:	8a 81       	ldd	r24, Y+2	; 0x02
    13a8:	28 2f       	mov	r18, r24
    13aa:	30 e0       	ldi	r19, 0x00	; 0
    13ac:	81 e0       	ldi	r24, 0x01	; 1
    13ae:	90 e0       	ldi	r25, 0x00	; 0
    13b0:	02 2e       	mov	r0, r18
    13b2:	02 c0       	rjmp	.+4      	; 0x13b8 <DIO_SetPinMode+0x14a>
    13b4:	88 0f       	add	r24, r24
    13b6:	99 1f       	adc	r25, r25
    13b8:	0a 94       	dec	r0
    13ba:	e2 f7       	brpl	.-8      	; 0x13b4 <DIO_SetPinMode+0x146>
    13bc:	80 95       	com	r24
    13be:	84 23       	and	r24, r20
    13c0:	8c 93       	st	X, r24
    13c2:	5c c1       	rjmp	.+696    	; 0x167c <DIO_SetPinMode+0x40e>
            break;
        case DIO_PORTD:
            CLR_BIT(DDRD, pin);
    13c4:	a1 e3       	ldi	r26, 0x31	; 49
    13c6:	b0 e0       	ldi	r27, 0x00	; 0
    13c8:	e1 e3       	ldi	r30, 0x31	; 49
    13ca:	f0 e0       	ldi	r31, 0x00	; 0
    13cc:	80 81       	ld	r24, Z
    13ce:	48 2f       	mov	r20, r24
    13d0:	8a 81       	ldd	r24, Y+2	; 0x02
    13d2:	28 2f       	mov	r18, r24
    13d4:	30 e0       	ldi	r19, 0x00	; 0
    13d6:	81 e0       	ldi	r24, 0x01	; 1
    13d8:	90 e0       	ldi	r25, 0x00	; 0
    13da:	02 c0       	rjmp	.+4      	; 0x13e0 <DIO_SetPinMode+0x172>
    13dc:	88 0f       	add	r24, r24
    13de:	99 1f       	adc	r25, r25
    13e0:	2a 95       	dec	r18
    13e2:	e2 f7       	brpl	.-8      	; 0x13dc <DIO_SetPinMode+0x16e>
    13e4:	80 95       	com	r24
    13e6:	84 23       	and	r24, r20
    13e8:	8c 93       	st	X, r24
            CLR_BIT(PORTD, pin);
    13ea:	a2 e3       	ldi	r26, 0x32	; 50
    13ec:	b0 e0       	ldi	r27, 0x00	; 0
    13ee:	e2 e3       	ldi	r30, 0x32	; 50
    13f0:	f0 e0       	ldi	r31, 0x00	; 0
    13f2:	80 81       	ld	r24, Z
    13f4:	48 2f       	mov	r20, r24
    13f6:	8a 81       	ldd	r24, Y+2	; 0x02
    13f8:	28 2f       	mov	r18, r24
    13fa:	30 e0       	ldi	r19, 0x00	; 0
    13fc:	81 e0       	ldi	r24, 0x01	; 1
    13fe:	90 e0       	ldi	r25, 0x00	; 0
    1400:	02 2e       	mov	r0, r18
    1402:	02 c0       	rjmp	.+4      	; 0x1408 <DIO_SetPinMode+0x19a>
    1404:	88 0f       	add	r24, r24
    1406:	99 1f       	adc	r25, r25
    1408:	0a 94       	dec	r0
    140a:	e2 f7       	brpl	.-8      	; 0x1404 <DIO_SetPinMode+0x196>
    140c:	80 95       	com	r24
    140e:	84 23       	and	r24, r20
    1410:	8c 93       	st	X, r24
    1412:	34 c1       	rjmp	.+616    	; 0x167c <DIO_SetPinMode+0x40e>
            break;
        default:
            break;
        }
    }
    else if (mode == DIO_INPUT_PULLUP)
    1414:	8b 81       	ldd	r24, Y+3	; 0x03
    1416:	81 30       	cpi	r24, 0x01	; 1
    1418:	09 f0       	breq	.+2      	; 0x141c <DIO_SetPinMode+0x1ae>
    141a:	be c0       	rjmp	.+380    	; 0x1598 <DIO_SetPinMode+0x32a>
    {
        switch (port)
    141c:	89 81       	ldd	r24, Y+1	; 0x01
    141e:	28 2f       	mov	r18, r24
    1420:	30 e0       	ldi	r19, 0x00	; 0
    1422:	3f 83       	std	Y+7, r19	; 0x07
    1424:	2e 83       	std	Y+6, r18	; 0x06
    1426:	8e 81       	ldd	r24, Y+6	; 0x06
    1428:	9f 81       	ldd	r25, Y+7	; 0x07
    142a:	81 30       	cpi	r24, 0x01	; 1
    142c:	91 05       	cpc	r25, r1
    142e:	09 f4       	brne	.+2      	; 0x1432 <DIO_SetPinMode+0x1c4>
    1430:	3e c0       	rjmp	.+124    	; 0x14ae <DIO_SetPinMode+0x240>
    1432:	2e 81       	ldd	r18, Y+6	; 0x06
    1434:	3f 81       	ldd	r19, Y+7	; 0x07
    1436:	22 30       	cpi	r18, 0x02	; 2
    1438:	31 05       	cpc	r19, r1
    143a:	2c f4       	brge	.+10     	; 0x1446 <DIO_SetPinMode+0x1d8>
    143c:	8e 81       	ldd	r24, Y+6	; 0x06
    143e:	9f 81       	ldd	r25, Y+7	; 0x07
    1440:	00 97       	sbiw	r24, 0x00	; 0
    1442:	71 f0       	breq	.+28     	; 0x1460 <DIO_SetPinMode+0x1f2>
    1444:	1b c1       	rjmp	.+566    	; 0x167c <DIO_SetPinMode+0x40e>
    1446:	2e 81       	ldd	r18, Y+6	; 0x06
    1448:	3f 81       	ldd	r19, Y+7	; 0x07
    144a:	22 30       	cpi	r18, 0x02	; 2
    144c:	31 05       	cpc	r19, r1
    144e:	09 f4       	brne	.+2      	; 0x1452 <DIO_SetPinMode+0x1e4>
    1450:	55 c0       	rjmp	.+170    	; 0x14fc <DIO_SetPinMode+0x28e>
    1452:	8e 81       	ldd	r24, Y+6	; 0x06
    1454:	9f 81       	ldd	r25, Y+7	; 0x07
    1456:	83 30       	cpi	r24, 0x03	; 3
    1458:	91 05       	cpc	r25, r1
    145a:	09 f4       	brne	.+2      	; 0x145e <DIO_SetPinMode+0x1f0>
    145c:	76 c0       	rjmp	.+236    	; 0x154a <DIO_SetPinMode+0x2dc>
    145e:	0e c1       	rjmp	.+540    	; 0x167c <DIO_SetPinMode+0x40e>
        {
        case DIO_PORTA:
            CLR_BIT(DDRA, pin);
    1460:	aa e3       	ldi	r26, 0x3A	; 58
    1462:	b0 e0       	ldi	r27, 0x00	; 0
    1464:	ea e3       	ldi	r30, 0x3A	; 58
    1466:	f0 e0       	ldi	r31, 0x00	; 0
    1468:	80 81       	ld	r24, Z
    146a:	48 2f       	mov	r20, r24
    146c:	8a 81       	ldd	r24, Y+2	; 0x02
    146e:	28 2f       	mov	r18, r24
    1470:	30 e0       	ldi	r19, 0x00	; 0
    1472:	81 e0       	ldi	r24, 0x01	; 1
    1474:	90 e0       	ldi	r25, 0x00	; 0
    1476:	02 c0       	rjmp	.+4      	; 0x147c <DIO_SetPinMode+0x20e>
    1478:	88 0f       	add	r24, r24
    147a:	99 1f       	adc	r25, r25
    147c:	2a 95       	dec	r18
    147e:	e2 f7       	brpl	.-8      	; 0x1478 <DIO_SetPinMode+0x20a>
    1480:	80 95       	com	r24
    1482:	84 23       	and	r24, r20
    1484:	8c 93       	st	X, r24
            SET_BIT(PORTA, pin);
    1486:	ab e3       	ldi	r26, 0x3B	; 59
    1488:	b0 e0       	ldi	r27, 0x00	; 0
    148a:	eb e3       	ldi	r30, 0x3B	; 59
    148c:	f0 e0       	ldi	r31, 0x00	; 0
    148e:	80 81       	ld	r24, Z
    1490:	48 2f       	mov	r20, r24
    1492:	8a 81       	ldd	r24, Y+2	; 0x02
    1494:	28 2f       	mov	r18, r24
    1496:	30 e0       	ldi	r19, 0x00	; 0
    1498:	81 e0       	ldi	r24, 0x01	; 1
    149a:	90 e0       	ldi	r25, 0x00	; 0
    149c:	02 2e       	mov	r0, r18
    149e:	02 c0       	rjmp	.+4      	; 0x14a4 <DIO_SetPinMode+0x236>
    14a0:	88 0f       	add	r24, r24
    14a2:	99 1f       	adc	r25, r25
    14a4:	0a 94       	dec	r0
    14a6:	e2 f7       	brpl	.-8      	; 0x14a0 <DIO_SetPinMode+0x232>
    14a8:	84 2b       	or	r24, r20
    14aa:	8c 93       	st	X, r24
    14ac:	e7 c0       	rjmp	.+462    	; 0x167c <DIO_SetPinMode+0x40e>
            break;
        case DIO_PORTB:
            CLR_BIT(DDRB, pin);
    14ae:	a7 e3       	ldi	r26, 0x37	; 55
    14b0:	b0 e0       	ldi	r27, 0x00	; 0
    14b2:	e7 e3       	ldi	r30, 0x37	; 55
    14b4:	f0 e0       	ldi	r31, 0x00	; 0
    14b6:	80 81       	ld	r24, Z
    14b8:	48 2f       	mov	r20, r24
    14ba:	8a 81       	ldd	r24, Y+2	; 0x02
    14bc:	28 2f       	mov	r18, r24
    14be:	30 e0       	ldi	r19, 0x00	; 0
    14c0:	81 e0       	ldi	r24, 0x01	; 1
    14c2:	90 e0       	ldi	r25, 0x00	; 0
    14c4:	02 c0       	rjmp	.+4      	; 0x14ca <DIO_SetPinMode+0x25c>
    14c6:	88 0f       	add	r24, r24
    14c8:	99 1f       	adc	r25, r25
    14ca:	2a 95       	dec	r18
    14cc:	e2 f7       	brpl	.-8      	; 0x14c6 <DIO_SetPinMode+0x258>
    14ce:	80 95       	com	r24
    14d0:	84 23       	and	r24, r20
    14d2:	8c 93       	st	X, r24
            SET_BIT(PORTB, pin);
    14d4:	a8 e3       	ldi	r26, 0x38	; 56
    14d6:	b0 e0       	ldi	r27, 0x00	; 0
    14d8:	e8 e3       	ldi	r30, 0x38	; 56
    14da:	f0 e0       	ldi	r31, 0x00	; 0
    14dc:	80 81       	ld	r24, Z
    14de:	48 2f       	mov	r20, r24
    14e0:	8a 81       	ldd	r24, Y+2	; 0x02
    14e2:	28 2f       	mov	r18, r24
    14e4:	30 e0       	ldi	r19, 0x00	; 0
    14e6:	81 e0       	ldi	r24, 0x01	; 1
    14e8:	90 e0       	ldi	r25, 0x00	; 0
    14ea:	02 2e       	mov	r0, r18
    14ec:	02 c0       	rjmp	.+4      	; 0x14f2 <DIO_SetPinMode+0x284>
    14ee:	88 0f       	add	r24, r24
    14f0:	99 1f       	adc	r25, r25
    14f2:	0a 94       	dec	r0
    14f4:	e2 f7       	brpl	.-8      	; 0x14ee <DIO_SetPinMode+0x280>
    14f6:	84 2b       	or	r24, r20
    14f8:	8c 93       	st	X, r24
    14fa:	c0 c0       	rjmp	.+384    	; 0x167c <DIO_SetPinMode+0x40e>
            break;
        case DIO_PORTC:
            CLR_BIT(DDRC, pin);
    14fc:	a4 e3       	ldi	r26, 0x34	; 52
    14fe:	b0 e0       	ldi	r27, 0x00	; 0
    1500:	e4 e3       	ldi	r30, 0x34	; 52
    1502:	f0 e0       	ldi	r31, 0x00	; 0
    1504:	80 81       	ld	r24, Z
    1506:	48 2f       	mov	r20, r24
    1508:	8a 81       	ldd	r24, Y+2	; 0x02
    150a:	28 2f       	mov	r18, r24
    150c:	30 e0       	ldi	r19, 0x00	; 0
    150e:	81 e0       	ldi	r24, 0x01	; 1
    1510:	90 e0       	ldi	r25, 0x00	; 0
    1512:	02 c0       	rjmp	.+4      	; 0x1518 <DIO_SetPinMode+0x2aa>
    1514:	88 0f       	add	r24, r24
    1516:	99 1f       	adc	r25, r25
    1518:	2a 95       	dec	r18
    151a:	e2 f7       	brpl	.-8      	; 0x1514 <DIO_SetPinMode+0x2a6>
    151c:	80 95       	com	r24
    151e:	84 23       	and	r24, r20
    1520:	8c 93       	st	X, r24
            SET_BIT(PORTC, pin);
    1522:	a5 e3       	ldi	r26, 0x35	; 53
    1524:	b0 e0       	ldi	r27, 0x00	; 0
    1526:	e5 e3       	ldi	r30, 0x35	; 53
    1528:	f0 e0       	ldi	r31, 0x00	; 0
    152a:	80 81       	ld	r24, Z
    152c:	48 2f       	mov	r20, r24
    152e:	8a 81       	ldd	r24, Y+2	; 0x02
    1530:	28 2f       	mov	r18, r24
    1532:	30 e0       	ldi	r19, 0x00	; 0
    1534:	81 e0       	ldi	r24, 0x01	; 1
    1536:	90 e0       	ldi	r25, 0x00	; 0
    1538:	02 2e       	mov	r0, r18
    153a:	02 c0       	rjmp	.+4      	; 0x1540 <DIO_SetPinMode+0x2d2>
    153c:	88 0f       	add	r24, r24
    153e:	99 1f       	adc	r25, r25
    1540:	0a 94       	dec	r0
    1542:	e2 f7       	brpl	.-8      	; 0x153c <DIO_SetPinMode+0x2ce>
    1544:	84 2b       	or	r24, r20
    1546:	8c 93       	st	X, r24
    1548:	99 c0       	rjmp	.+306    	; 0x167c <DIO_SetPinMode+0x40e>
            break;
        case DIO_PORTD:
            CLR_BIT(DDRD, pin);
    154a:	a1 e3       	ldi	r26, 0x31	; 49
    154c:	b0 e0       	ldi	r27, 0x00	; 0
    154e:	e1 e3       	ldi	r30, 0x31	; 49
    1550:	f0 e0       	ldi	r31, 0x00	; 0
    1552:	80 81       	ld	r24, Z
    1554:	48 2f       	mov	r20, r24
    1556:	8a 81       	ldd	r24, Y+2	; 0x02
    1558:	28 2f       	mov	r18, r24
    155a:	30 e0       	ldi	r19, 0x00	; 0
    155c:	81 e0       	ldi	r24, 0x01	; 1
    155e:	90 e0       	ldi	r25, 0x00	; 0
    1560:	02 c0       	rjmp	.+4      	; 0x1566 <DIO_SetPinMode+0x2f8>
    1562:	88 0f       	add	r24, r24
    1564:	99 1f       	adc	r25, r25
    1566:	2a 95       	dec	r18
    1568:	e2 f7       	brpl	.-8      	; 0x1562 <DIO_SetPinMode+0x2f4>
    156a:	80 95       	com	r24
    156c:	84 23       	and	r24, r20
    156e:	8c 93       	st	X, r24
            SET_BIT(PORTD, pin);
    1570:	a2 e3       	ldi	r26, 0x32	; 50
    1572:	b0 e0       	ldi	r27, 0x00	; 0
    1574:	e2 e3       	ldi	r30, 0x32	; 50
    1576:	f0 e0       	ldi	r31, 0x00	; 0
    1578:	80 81       	ld	r24, Z
    157a:	48 2f       	mov	r20, r24
    157c:	8a 81       	ldd	r24, Y+2	; 0x02
    157e:	28 2f       	mov	r18, r24
    1580:	30 e0       	ldi	r19, 0x00	; 0
    1582:	81 e0       	ldi	r24, 0x01	; 1
    1584:	90 e0       	ldi	r25, 0x00	; 0
    1586:	02 2e       	mov	r0, r18
    1588:	02 c0       	rjmp	.+4      	; 0x158e <DIO_SetPinMode+0x320>
    158a:	88 0f       	add	r24, r24
    158c:	99 1f       	adc	r25, r25
    158e:	0a 94       	dec	r0
    1590:	e2 f7       	brpl	.-8      	; 0x158a <DIO_SetPinMode+0x31c>
    1592:	84 2b       	or	r24, r20
    1594:	8c 93       	st	X, r24
    1596:	72 c0       	rjmp	.+228    	; 0x167c <DIO_SetPinMode+0x40e>
            break;
        default:
            break;
        }
    }
    else if (mode == DIO_OUTPUT)
    1598:	8b 81       	ldd	r24, Y+3	; 0x03
    159a:	82 30       	cpi	r24, 0x02	; 2
    159c:	09 f0       	breq	.+2      	; 0x15a0 <DIO_SetPinMode+0x332>
    159e:	6e c0       	rjmp	.+220    	; 0x167c <DIO_SetPinMode+0x40e>
    {
        switch (port)
    15a0:	89 81       	ldd	r24, Y+1	; 0x01
    15a2:	28 2f       	mov	r18, r24
    15a4:	30 e0       	ldi	r19, 0x00	; 0
    15a6:	3d 83       	std	Y+5, r19	; 0x05
    15a8:	2c 83       	std	Y+4, r18	; 0x04
    15aa:	8c 81       	ldd	r24, Y+4	; 0x04
    15ac:	9d 81       	ldd	r25, Y+5	; 0x05
    15ae:	81 30       	cpi	r24, 0x01	; 1
    15b0:	91 05       	cpc	r25, r1
    15b2:	49 f1       	breq	.+82     	; 0x1606 <DIO_SetPinMode+0x398>
    15b4:	2c 81       	ldd	r18, Y+4	; 0x04
    15b6:	3d 81       	ldd	r19, Y+5	; 0x05
    15b8:	22 30       	cpi	r18, 0x02	; 2
    15ba:	31 05       	cpc	r19, r1
    15bc:	2c f4       	brge	.+10     	; 0x15c8 <DIO_SetPinMode+0x35a>
    15be:	8c 81       	ldd	r24, Y+4	; 0x04
    15c0:	9d 81       	ldd	r25, Y+5	; 0x05
    15c2:	00 97       	sbiw	r24, 0x00	; 0
    15c4:	61 f0       	breq	.+24     	; 0x15de <DIO_SetPinMode+0x370>
    15c6:	5a c0       	rjmp	.+180    	; 0x167c <DIO_SetPinMode+0x40e>
    15c8:	2c 81       	ldd	r18, Y+4	; 0x04
    15ca:	3d 81       	ldd	r19, Y+5	; 0x05
    15cc:	22 30       	cpi	r18, 0x02	; 2
    15ce:	31 05       	cpc	r19, r1
    15d0:	71 f1       	breq	.+92     	; 0x162e <DIO_SetPinMode+0x3c0>
    15d2:	8c 81       	ldd	r24, Y+4	; 0x04
    15d4:	9d 81       	ldd	r25, Y+5	; 0x05
    15d6:	83 30       	cpi	r24, 0x03	; 3
    15d8:	91 05       	cpc	r25, r1
    15da:	e9 f1       	breq	.+122    	; 0x1656 <DIO_SetPinMode+0x3e8>
    15dc:	4f c0       	rjmp	.+158    	; 0x167c <DIO_SetPinMode+0x40e>
        {
        case DIO_PORTA:
            SET_BIT(DDRA, pin);
    15de:	aa e3       	ldi	r26, 0x3A	; 58
    15e0:	b0 e0       	ldi	r27, 0x00	; 0
    15e2:	ea e3       	ldi	r30, 0x3A	; 58
    15e4:	f0 e0       	ldi	r31, 0x00	; 0
    15e6:	80 81       	ld	r24, Z
    15e8:	48 2f       	mov	r20, r24
    15ea:	8a 81       	ldd	r24, Y+2	; 0x02
    15ec:	28 2f       	mov	r18, r24
    15ee:	30 e0       	ldi	r19, 0x00	; 0
    15f0:	81 e0       	ldi	r24, 0x01	; 1
    15f2:	90 e0       	ldi	r25, 0x00	; 0
    15f4:	02 2e       	mov	r0, r18
    15f6:	02 c0       	rjmp	.+4      	; 0x15fc <DIO_SetPinMode+0x38e>
    15f8:	88 0f       	add	r24, r24
    15fa:	99 1f       	adc	r25, r25
    15fc:	0a 94       	dec	r0
    15fe:	e2 f7       	brpl	.-8      	; 0x15f8 <DIO_SetPinMode+0x38a>
    1600:	84 2b       	or	r24, r20
    1602:	8c 93       	st	X, r24
    1604:	3b c0       	rjmp	.+118    	; 0x167c <DIO_SetPinMode+0x40e>
            break;
        case DIO_PORTB:
            SET_BIT(DDRB, pin);
    1606:	a7 e3       	ldi	r26, 0x37	; 55
    1608:	b0 e0       	ldi	r27, 0x00	; 0
    160a:	e7 e3       	ldi	r30, 0x37	; 55
    160c:	f0 e0       	ldi	r31, 0x00	; 0
    160e:	80 81       	ld	r24, Z
    1610:	48 2f       	mov	r20, r24
    1612:	8a 81       	ldd	r24, Y+2	; 0x02
    1614:	28 2f       	mov	r18, r24
    1616:	30 e0       	ldi	r19, 0x00	; 0
    1618:	81 e0       	ldi	r24, 0x01	; 1
    161a:	90 e0       	ldi	r25, 0x00	; 0
    161c:	02 2e       	mov	r0, r18
    161e:	02 c0       	rjmp	.+4      	; 0x1624 <DIO_SetPinMode+0x3b6>
    1620:	88 0f       	add	r24, r24
    1622:	99 1f       	adc	r25, r25
    1624:	0a 94       	dec	r0
    1626:	e2 f7       	brpl	.-8      	; 0x1620 <DIO_SetPinMode+0x3b2>
    1628:	84 2b       	or	r24, r20
    162a:	8c 93       	st	X, r24
    162c:	27 c0       	rjmp	.+78     	; 0x167c <DIO_SetPinMode+0x40e>
            break;
        case DIO_PORTC:
            SET_BIT(DDRC, pin);
    162e:	a4 e3       	ldi	r26, 0x34	; 52
    1630:	b0 e0       	ldi	r27, 0x00	; 0
    1632:	e4 e3       	ldi	r30, 0x34	; 52
    1634:	f0 e0       	ldi	r31, 0x00	; 0
    1636:	80 81       	ld	r24, Z
    1638:	48 2f       	mov	r20, r24
    163a:	8a 81       	ldd	r24, Y+2	; 0x02
    163c:	28 2f       	mov	r18, r24
    163e:	30 e0       	ldi	r19, 0x00	; 0
    1640:	81 e0       	ldi	r24, 0x01	; 1
    1642:	90 e0       	ldi	r25, 0x00	; 0
    1644:	02 2e       	mov	r0, r18
    1646:	02 c0       	rjmp	.+4      	; 0x164c <DIO_SetPinMode+0x3de>
    1648:	88 0f       	add	r24, r24
    164a:	99 1f       	adc	r25, r25
    164c:	0a 94       	dec	r0
    164e:	e2 f7       	brpl	.-8      	; 0x1648 <DIO_SetPinMode+0x3da>
    1650:	84 2b       	or	r24, r20
    1652:	8c 93       	st	X, r24
    1654:	13 c0       	rjmp	.+38     	; 0x167c <DIO_SetPinMode+0x40e>
            break;
        case DIO_PORTD:
            SET_BIT(DDRD, pin);
    1656:	a1 e3       	ldi	r26, 0x31	; 49
    1658:	b0 e0       	ldi	r27, 0x00	; 0
    165a:	e1 e3       	ldi	r30, 0x31	; 49
    165c:	f0 e0       	ldi	r31, 0x00	; 0
    165e:	80 81       	ld	r24, Z
    1660:	48 2f       	mov	r20, r24
    1662:	8a 81       	ldd	r24, Y+2	; 0x02
    1664:	28 2f       	mov	r18, r24
    1666:	30 e0       	ldi	r19, 0x00	; 0
    1668:	81 e0       	ldi	r24, 0x01	; 1
    166a:	90 e0       	ldi	r25, 0x00	; 0
    166c:	02 2e       	mov	r0, r18
    166e:	02 c0       	rjmp	.+4      	; 0x1674 <DIO_SetPinMode+0x406>
    1670:	88 0f       	add	r24, r24
    1672:	99 1f       	adc	r25, r25
    1674:	0a 94       	dec	r0
    1676:	e2 f7       	brpl	.-8      	; 0x1670 <DIO_SetPinMode+0x402>
    1678:	84 2b       	or	r24, r20
    167a:	8c 93       	st	X, r24
        default:
            break;
        }

    }
}
    167c:	29 96       	adiw	r28, 0x09	; 9
    167e:	0f b6       	in	r0, 0x3f	; 63
    1680:	f8 94       	cli
    1682:	de bf       	out	0x3e, r29	; 62
    1684:	0f be       	out	0x3f, r0	; 63
    1686:	cd bf       	out	0x3d, r28	; 61
    1688:	cf 91       	pop	r28
    168a:	df 91       	pop	r29
    168c:	08 95       	ret

0000168e <DIO_SetPortMode>:

void DIO_SetPortMode(DIO_PortType port, DIO_ModeType mode) {
    168e:	df 93       	push	r29
    1690:	cf 93       	push	r28
    1692:	cd b7       	in	r28, 0x3d	; 61
    1694:	de b7       	in	r29, 0x3e	; 62
    1696:	2a 97       	sbiw	r28, 0x0a	; 10
    1698:	0f b6       	in	r0, 0x3f	; 63
    169a:	f8 94       	cli
    169c:	de bf       	out	0x3e, r29	; 62
    169e:	0f be       	out	0x3f, r0	; 63
    16a0:	cd bf       	out	0x3d, r28	; 61
    16a2:	89 83       	std	Y+1, r24	; 0x01
    16a4:	6a 83       	std	Y+2, r22	; 0x02
    if (mode == DIO_INPUT_FLOATING)
    16a6:	8a 81       	ldd	r24, Y+2	; 0x02
    16a8:	88 23       	and	r24, r24
    16aa:	d9 f5       	brne	.+118    	; 0x1722 <DIO_SetPortMode+0x94>
    {
        switch (port)
    16ac:	89 81       	ldd	r24, Y+1	; 0x01
    16ae:	28 2f       	mov	r18, r24
    16b0:	30 e0       	ldi	r19, 0x00	; 0
    16b2:	3a 87       	std	Y+10, r19	; 0x0a
    16b4:	29 87       	std	Y+9, r18	; 0x09
    16b6:	89 85       	ldd	r24, Y+9	; 0x09
    16b8:	9a 85       	ldd	r25, Y+10	; 0x0a
    16ba:	81 30       	cpi	r24, 0x01	; 1
    16bc:	91 05       	cpc	r25, r1
    16be:	e1 f0       	breq	.+56     	; 0x16f8 <DIO_SetPortMode+0x6a>
    16c0:	29 85       	ldd	r18, Y+9	; 0x09
    16c2:	3a 85       	ldd	r19, Y+10	; 0x0a
    16c4:	22 30       	cpi	r18, 0x02	; 2
    16c6:	31 05       	cpc	r19, r1
    16c8:	2c f4       	brge	.+10     	; 0x16d4 <DIO_SetPortMode+0x46>
    16ca:	89 85       	ldd	r24, Y+9	; 0x09
    16cc:	9a 85       	ldd	r25, Y+10	; 0x0a
    16ce:	00 97       	sbiw	r24, 0x00	; 0
    16d0:	61 f0       	breq	.+24     	; 0x16ea <DIO_SetPortMode+0x5c>
    16d2:	d2 c0       	rjmp	.+420    	; 0x1878 <DIO_SetPortMode+0x1ea>
    16d4:	29 85       	ldd	r18, Y+9	; 0x09
    16d6:	3a 85       	ldd	r19, Y+10	; 0x0a
    16d8:	22 30       	cpi	r18, 0x02	; 2
    16da:	31 05       	cpc	r19, r1
    16dc:	a1 f0       	breq	.+40     	; 0x1706 <DIO_SetPortMode+0x78>
    16de:	89 85       	ldd	r24, Y+9	; 0x09
    16e0:	9a 85       	ldd	r25, Y+10	; 0x0a
    16e2:	83 30       	cpi	r24, 0x03	; 3
    16e4:	91 05       	cpc	r25, r1
    16e6:	b1 f0       	breq	.+44     	; 0x1714 <DIO_SetPortMode+0x86>
    16e8:	c7 c0       	rjmp	.+398    	; 0x1878 <DIO_SetPortMode+0x1ea>
        {
        case DIO_PORTA:
            DDRA = 0x00;
    16ea:	ea e3       	ldi	r30, 0x3A	; 58
    16ec:	f0 e0       	ldi	r31, 0x00	; 0
    16ee:	10 82       	st	Z, r1
            PORTA = 0x00;
    16f0:	eb e3       	ldi	r30, 0x3B	; 59
    16f2:	f0 e0       	ldi	r31, 0x00	; 0
    16f4:	10 82       	st	Z, r1
    16f6:	c0 c0       	rjmp	.+384    	; 0x1878 <DIO_SetPortMode+0x1ea>
            break;
        case DIO_PORTB:
            DDRB = 0x00;
    16f8:	e7 e3       	ldi	r30, 0x37	; 55
    16fa:	f0 e0       	ldi	r31, 0x00	; 0
    16fc:	10 82       	st	Z, r1
            PORTB = 0x00;
    16fe:	e8 e3       	ldi	r30, 0x38	; 56
    1700:	f0 e0       	ldi	r31, 0x00	; 0
    1702:	10 82       	st	Z, r1
    1704:	b9 c0       	rjmp	.+370    	; 0x1878 <DIO_SetPortMode+0x1ea>
            break;
        case DIO_PORTC:
            DDRC = 0x00;
    1706:	e4 e3       	ldi	r30, 0x34	; 52
    1708:	f0 e0       	ldi	r31, 0x00	; 0
    170a:	10 82       	st	Z, r1
            PORTC = 0x00;
    170c:	e5 e3       	ldi	r30, 0x35	; 53
    170e:	f0 e0       	ldi	r31, 0x00	; 0
    1710:	10 82       	st	Z, r1
    1712:	b2 c0       	rjmp	.+356    	; 0x1878 <DIO_SetPortMode+0x1ea>
            break;
        case DIO_PORTD:
            DDRD = 0x00;
    1714:	e1 e3       	ldi	r30, 0x31	; 49
    1716:	f0 e0       	ldi	r31, 0x00	; 0
    1718:	10 82       	st	Z, r1
            PORTD = 0x00;
    171a:	e2 e3       	ldi	r30, 0x32	; 50
    171c:	f0 e0       	ldi	r31, 0x00	; 0
    171e:	10 82       	st	Z, r1
    1720:	ab c0       	rjmp	.+342    	; 0x1878 <DIO_SetPortMode+0x1ea>
            break;
        default:
            break;
        }
    }
    else if (mode == DIO_INPUT_PULLUP)
    1722:	8a 81       	ldd	r24, Y+2	; 0x02
    1724:	81 30       	cpi	r24, 0x01	; 1
    1726:	09 f0       	breq	.+2      	; 0x172a <DIO_SetPortMode+0x9c>
    1728:	3f c0       	rjmp	.+126    	; 0x17a8 <DIO_SetPortMode+0x11a>
    {
        switch (port)
    172a:	89 81       	ldd	r24, Y+1	; 0x01
    172c:	28 2f       	mov	r18, r24
    172e:	30 e0       	ldi	r19, 0x00	; 0
    1730:	38 87       	std	Y+8, r19	; 0x08
    1732:	2f 83       	std	Y+7, r18	; 0x07
    1734:	8f 81       	ldd	r24, Y+7	; 0x07
    1736:	98 85       	ldd	r25, Y+8	; 0x08
    1738:	81 30       	cpi	r24, 0x01	; 1
    173a:	91 05       	cpc	r25, r1
    173c:	e9 f0       	breq	.+58     	; 0x1778 <DIO_SetPortMode+0xea>
    173e:	2f 81       	ldd	r18, Y+7	; 0x07
    1740:	38 85       	ldd	r19, Y+8	; 0x08
    1742:	22 30       	cpi	r18, 0x02	; 2
    1744:	31 05       	cpc	r19, r1
    1746:	2c f4       	brge	.+10     	; 0x1752 <DIO_SetPortMode+0xc4>
    1748:	8f 81       	ldd	r24, Y+7	; 0x07
    174a:	98 85       	ldd	r25, Y+8	; 0x08
    174c:	00 97       	sbiw	r24, 0x00	; 0
    174e:	61 f0       	breq	.+24     	; 0x1768 <DIO_SetPortMode+0xda>
    1750:	93 c0       	rjmp	.+294    	; 0x1878 <DIO_SetPortMode+0x1ea>
    1752:	2f 81       	ldd	r18, Y+7	; 0x07
    1754:	38 85       	ldd	r19, Y+8	; 0x08
    1756:	22 30       	cpi	r18, 0x02	; 2
    1758:	31 05       	cpc	r19, r1
    175a:	b1 f0       	breq	.+44     	; 0x1788 <DIO_SetPortMode+0xfa>
    175c:	8f 81       	ldd	r24, Y+7	; 0x07
    175e:	98 85       	ldd	r25, Y+8	; 0x08
    1760:	83 30       	cpi	r24, 0x03	; 3
    1762:	91 05       	cpc	r25, r1
    1764:	c9 f0       	breq	.+50     	; 0x1798 <DIO_SetPortMode+0x10a>
    1766:	88 c0       	rjmp	.+272    	; 0x1878 <DIO_SetPortMode+0x1ea>
        {
        case DIO_PORTA:
            DDRA = 0x00;
    1768:	ea e3       	ldi	r30, 0x3A	; 58
    176a:	f0 e0       	ldi	r31, 0x00	; 0
    176c:	10 82       	st	Z, r1
            PORTA = 0xFF;
    176e:	eb e3       	ldi	r30, 0x3B	; 59
    1770:	f0 e0       	ldi	r31, 0x00	; 0
    1772:	8f ef       	ldi	r24, 0xFF	; 255
    1774:	80 83       	st	Z, r24
    1776:	80 c0       	rjmp	.+256    	; 0x1878 <DIO_SetPortMode+0x1ea>
            break;
        case DIO_PORTB:
            DDRB = 0x00;
    1778:	e7 e3       	ldi	r30, 0x37	; 55
    177a:	f0 e0       	ldi	r31, 0x00	; 0
    177c:	10 82       	st	Z, r1
            PORTB = 0xFF;
    177e:	e8 e3       	ldi	r30, 0x38	; 56
    1780:	f0 e0       	ldi	r31, 0x00	; 0
    1782:	8f ef       	ldi	r24, 0xFF	; 255
    1784:	80 83       	st	Z, r24
    1786:	78 c0       	rjmp	.+240    	; 0x1878 <DIO_SetPortMode+0x1ea>
            break;
        case DIO_PORTC:
            DDRC = 0x00;
    1788:	e4 e3       	ldi	r30, 0x34	; 52
    178a:	f0 e0       	ldi	r31, 0x00	; 0
    178c:	10 82       	st	Z, r1
            PORTC = 0xFF;
    178e:	e5 e3       	ldi	r30, 0x35	; 53
    1790:	f0 e0       	ldi	r31, 0x00	; 0
    1792:	8f ef       	ldi	r24, 0xFF	; 255
    1794:	80 83       	st	Z, r24
    1796:	70 c0       	rjmp	.+224    	; 0x1878 <DIO_SetPortMode+0x1ea>
            break;
        case DIO_PORTD:
            DDRD = 0x00;
    1798:	e1 e3       	ldi	r30, 0x31	; 49
    179a:	f0 e0       	ldi	r31, 0x00	; 0
    179c:	10 82       	st	Z, r1
            PORTD = 0xFF;
    179e:	e2 e3       	ldi	r30, 0x32	; 50
    17a0:	f0 e0       	ldi	r31, 0x00	; 0
    17a2:	8f ef       	ldi	r24, 0xFF	; 255
    17a4:	80 83       	st	Z, r24
    17a6:	68 c0       	rjmp	.+208    	; 0x1878 <DIO_SetPortMode+0x1ea>
            break;
        default:
            break;
        }
    }
    else if (mode == DIO_OUTPUT)
    17a8:	8a 81       	ldd	r24, Y+2	; 0x02
    17aa:	82 30       	cpi	r24, 0x02	; 2
    17ac:	99 f5       	brne	.+102    	; 0x1814 <DIO_SetPortMode+0x186>
    {
        switch (port)
    17ae:	89 81       	ldd	r24, Y+1	; 0x01
    17b0:	28 2f       	mov	r18, r24
    17b2:	30 e0       	ldi	r19, 0x00	; 0
    17b4:	3e 83       	std	Y+6, r19	; 0x06
    17b6:	2d 83       	std	Y+5, r18	; 0x05
    17b8:	8d 81       	ldd	r24, Y+5	; 0x05
    17ba:	9e 81       	ldd	r25, Y+6	; 0x06
    17bc:	81 30       	cpi	r24, 0x01	; 1
    17be:	91 05       	cpc	r25, r1
    17c0:	d1 f0       	breq	.+52     	; 0x17f6 <DIO_SetPortMode+0x168>
    17c2:	2d 81       	ldd	r18, Y+5	; 0x05
    17c4:	3e 81       	ldd	r19, Y+6	; 0x06
    17c6:	22 30       	cpi	r18, 0x02	; 2
    17c8:	31 05       	cpc	r19, r1
    17ca:	2c f4       	brge	.+10     	; 0x17d6 <DIO_SetPortMode+0x148>
    17cc:	8d 81       	ldd	r24, Y+5	; 0x05
    17ce:	9e 81       	ldd	r25, Y+6	; 0x06
    17d0:	00 97       	sbiw	r24, 0x00	; 0
    17d2:	61 f0       	breq	.+24     	; 0x17ec <DIO_SetPortMode+0x15e>
    17d4:	51 c0       	rjmp	.+162    	; 0x1878 <DIO_SetPortMode+0x1ea>
    17d6:	2d 81       	ldd	r18, Y+5	; 0x05
    17d8:	3e 81       	ldd	r19, Y+6	; 0x06
    17da:	22 30       	cpi	r18, 0x02	; 2
    17dc:	31 05       	cpc	r19, r1
    17de:	81 f0       	breq	.+32     	; 0x1800 <DIO_SetPortMode+0x172>
    17e0:	8d 81       	ldd	r24, Y+5	; 0x05
    17e2:	9e 81       	ldd	r25, Y+6	; 0x06
    17e4:	83 30       	cpi	r24, 0x03	; 3
    17e6:	91 05       	cpc	r25, r1
    17e8:	81 f0       	breq	.+32     	; 0x180a <DIO_SetPortMode+0x17c>
    17ea:	46 c0       	rjmp	.+140    	; 0x1878 <DIO_SetPortMode+0x1ea>
        {
        case DIO_PORTA:
            DDRA = 0xFF;
    17ec:	ea e3       	ldi	r30, 0x3A	; 58
    17ee:	f0 e0       	ldi	r31, 0x00	; 0
    17f0:	8f ef       	ldi	r24, 0xFF	; 255
    17f2:	80 83       	st	Z, r24
    17f4:	41 c0       	rjmp	.+130    	; 0x1878 <DIO_SetPortMode+0x1ea>
            break;
        case DIO_PORTB:
            DDRB = 0xFF;
    17f6:	e7 e3       	ldi	r30, 0x37	; 55
    17f8:	f0 e0       	ldi	r31, 0x00	; 0
    17fa:	8f ef       	ldi	r24, 0xFF	; 255
    17fc:	80 83       	st	Z, r24
    17fe:	3c c0       	rjmp	.+120    	; 0x1878 <DIO_SetPortMode+0x1ea>
            break;
        case DIO_PORTC:
            DDRC = 0xFF;
    1800:	e4 e3       	ldi	r30, 0x34	; 52
    1802:	f0 e0       	ldi	r31, 0x00	; 0
    1804:	8f ef       	ldi	r24, 0xFF	; 255
    1806:	80 83       	st	Z, r24
    1808:	37 c0       	rjmp	.+110    	; 0x1878 <DIO_SetPortMode+0x1ea>
            break;
        case DIO_PORTD:
            DDRD = 0xFF;
    180a:	e1 e3       	ldi	r30, 0x31	; 49
    180c:	f0 e0       	ldi	r31, 0x00	; 0
    180e:	8f ef       	ldi	r24, 0xFF	; 255
    1810:	80 83       	st	Z, r24
    1812:	32 c0       	rjmp	.+100    	; 0x1878 <DIO_SetPortMode+0x1ea>
        }

    }
    else
    {
        switch (port)
    1814:	89 81       	ldd	r24, Y+1	; 0x01
    1816:	28 2f       	mov	r18, r24
    1818:	30 e0       	ldi	r19, 0x00	; 0
    181a:	3c 83       	std	Y+4, r19	; 0x04
    181c:	2b 83       	std	Y+3, r18	; 0x03
    181e:	8b 81       	ldd	r24, Y+3	; 0x03
    1820:	9c 81       	ldd	r25, Y+4	; 0x04
    1822:	81 30       	cpi	r24, 0x01	; 1
    1824:	91 05       	cpc	r25, r1
    1826:	d1 f0       	breq	.+52     	; 0x185c <DIO_SetPortMode+0x1ce>
    1828:	2b 81       	ldd	r18, Y+3	; 0x03
    182a:	3c 81       	ldd	r19, Y+4	; 0x04
    182c:	22 30       	cpi	r18, 0x02	; 2
    182e:	31 05       	cpc	r19, r1
    1830:	2c f4       	brge	.+10     	; 0x183c <DIO_SetPortMode+0x1ae>
    1832:	8b 81       	ldd	r24, Y+3	; 0x03
    1834:	9c 81       	ldd	r25, Y+4	; 0x04
    1836:	00 97       	sbiw	r24, 0x00	; 0
    1838:	61 f0       	breq	.+24     	; 0x1852 <DIO_SetPortMode+0x1c4>
    183a:	1e c0       	rjmp	.+60     	; 0x1878 <DIO_SetPortMode+0x1ea>
    183c:	2b 81       	ldd	r18, Y+3	; 0x03
    183e:	3c 81       	ldd	r19, Y+4	; 0x04
    1840:	22 30       	cpi	r18, 0x02	; 2
    1842:	31 05       	cpc	r19, r1
    1844:	81 f0       	breq	.+32     	; 0x1866 <DIO_SetPortMode+0x1d8>
    1846:	8b 81       	ldd	r24, Y+3	; 0x03
    1848:	9c 81       	ldd	r25, Y+4	; 0x04
    184a:	83 30       	cpi	r24, 0x03	; 3
    184c:	91 05       	cpc	r25, r1
    184e:	81 f0       	breq	.+32     	; 0x1870 <DIO_SetPortMode+0x1e2>
    1850:	13 c0       	rjmp	.+38     	; 0x1878 <DIO_SetPortMode+0x1ea>
        {
        case DIO_PORTA:
            DDRA = mode;
    1852:	ea e3       	ldi	r30, 0x3A	; 58
    1854:	f0 e0       	ldi	r31, 0x00	; 0
    1856:	8a 81       	ldd	r24, Y+2	; 0x02
    1858:	80 83       	st	Z, r24
    185a:	0e c0       	rjmp	.+28     	; 0x1878 <DIO_SetPortMode+0x1ea>
            break;
        case DIO_PORTB:
            DDRB = mode;
    185c:	e7 e3       	ldi	r30, 0x37	; 55
    185e:	f0 e0       	ldi	r31, 0x00	; 0
    1860:	8a 81       	ldd	r24, Y+2	; 0x02
    1862:	80 83       	st	Z, r24
    1864:	09 c0       	rjmp	.+18     	; 0x1878 <DIO_SetPortMode+0x1ea>
            break;
        case DIO_PORTC:
            DDRC = mode;
    1866:	e4 e3       	ldi	r30, 0x34	; 52
    1868:	f0 e0       	ldi	r31, 0x00	; 0
    186a:	8a 81       	ldd	r24, Y+2	; 0x02
    186c:	80 83       	st	Z, r24
    186e:	04 c0       	rjmp	.+8      	; 0x1878 <DIO_SetPortMode+0x1ea>
            break;
        case DIO_PORTD:
            DDRD = mode;
    1870:	e1 e3       	ldi	r30, 0x31	; 49
    1872:	f0 e0       	ldi	r31, 0x00	; 0
    1874:	8a 81       	ldd	r24, Y+2	; 0x02
    1876:	80 83       	st	Z, r24
        default:
            break;
        }

    }
}
    1878:	2a 96       	adiw	r28, 0x0a	; 10
    187a:	0f b6       	in	r0, 0x3f	; 63
    187c:	f8 94       	cli
    187e:	de bf       	out	0x3e, r29	; 62
    1880:	0f be       	out	0x3f, r0	; 63
    1882:	cd bf       	out	0x3d, r28	; 61
    1884:	cf 91       	pop	r28
    1886:	df 91       	pop	r29
    1888:	08 95       	ret

0000188a <DIO_SetPinLevel>:


void DIO_SetPinLevel(DIO_PortType port, DIO_PinType pin, DIO_LevelType level) {
    188a:	df 93       	push	r29
    188c:	cf 93       	push	r28
    188e:	cd b7       	in	r28, 0x3d	; 61
    1890:	de b7       	in	r29, 0x3e	; 62
    1892:	27 97       	sbiw	r28, 0x07	; 7
    1894:	0f b6       	in	r0, 0x3f	; 63
    1896:	f8 94       	cli
    1898:	de bf       	out	0x3e, r29	; 62
    189a:	0f be       	out	0x3f, r0	; 63
    189c:	cd bf       	out	0x3d, r28	; 61
    189e:	89 83       	std	Y+1, r24	; 0x01
    18a0:	6a 83       	std	Y+2, r22	; 0x02
    18a2:	4b 83       	std	Y+3, r20	; 0x03
    if (level == DIO_HIGH)
    18a4:	8b 81       	ldd	r24, Y+3	; 0x03
    18a6:	81 30       	cpi	r24, 0x01	; 1
    18a8:	09 f0       	breq	.+2      	; 0x18ac <DIO_SetPinLevel+0x22>
    18aa:	6f c0       	rjmp	.+222    	; 0x198a <DIO_SetPinLevel+0x100>
    {
        switch (port)
    18ac:	89 81       	ldd	r24, Y+1	; 0x01
    18ae:	28 2f       	mov	r18, r24
    18b0:	30 e0       	ldi	r19, 0x00	; 0
    18b2:	3f 83       	std	Y+7, r19	; 0x07
    18b4:	2e 83       	std	Y+6, r18	; 0x06
    18b6:	8e 81       	ldd	r24, Y+6	; 0x06
    18b8:	9f 81       	ldd	r25, Y+7	; 0x07
    18ba:	81 30       	cpi	r24, 0x01	; 1
    18bc:	91 05       	cpc	r25, r1
    18be:	49 f1       	breq	.+82     	; 0x1912 <DIO_SetPinLevel+0x88>
    18c0:	2e 81       	ldd	r18, Y+6	; 0x06
    18c2:	3f 81       	ldd	r19, Y+7	; 0x07
    18c4:	22 30       	cpi	r18, 0x02	; 2
    18c6:	31 05       	cpc	r19, r1
    18c8:	2c f4       	brge	.+10     	; 0x18d4 <DIO_SetPinLevel+0x4a>
    18ca:	8e 81       	ldd	r24, Y+6	; 0x06
    18cc:	9f 81       	ldd	r25, Y+7	; 0x07
    18ce:	00 97       	sbiw	r24, 0x00	; 0
    18d0:	61 f0       	breq	.+24     	; 0x18ea <DIO_SetPinLevel+0x60>
    18d2:	d2 c0       	rjmp	.+420    	; 0x1a78 <DIO_SetPinLevel+0x1ee>
    18d4:	2e 81       	ldd	r18, Y+6	; 0x06
    18d6:	3f 81       	ldd	r19, Y+7	; 0x07
    18d8:	22 30       	cpi	r18, 0x02	; 2
    18da:	31 05       	cpc	r19, r1
    18dc:	71 f1       	breq	.+92     	; 0x193a <DIO_SetPinLevel+0xb0>
    18de:	8e 81       	ldd	r24, Y+6	; 0x06
    18e0:	9f 81       	ldd	r25, Y+7	; 0x07
    18e2:	83 30       	cpi	r24, 0x03	; 3
    18e4:	91 05       	cpc	r25, r1
    18e6:	e9 f1       	breq	.+122    	; 0x1962 <DIO_SetPinLevel+0xd8>
    18e8:	c7 c0       	rjmp	.+398    	; 0x1a78 <DIO_SetPinLevel+0x1ee>
        {
        case DIO_PORTA:
            SET_BIT(PORTA, pin);
    18ea:	ab e3       	ldi	r26, 0x3B	; 59
    18ec:	b0 e0       	ldi	r27, 0x00	; 0
    18ee:	eb e3       	ldi	r30, 0x3B	; 59
    18f0:	f0 e0       	ldi	r31, 0x00	; 0
    18f2:	80 81       	ld	r24, Z
    18f4:	48 2f       	mov	r20, r24
    18f6:	8a 81       	ldd	r24, Y+2	; 0x02
    18f8:	28 2f       	mov	r18, r24
    18fa:	30 e0       	ldi	r19, 0x00	; 0
    18fc:	81 e0       	ldi	r24, 0x01	; 1
    18fe:	90 e0       	ldi	r25, 0x00	; 0
    1900:	02 2e       	mov	r0, r18
    1902:	02 c0       	rjmp	.+4      	; 0x1908 <DIO_SetPinLevel+0x7e>
    1904:	88 0f       	add	r24, r24
    1906:	99 1f       	adc	r25, r25
    1908:	0a 94       	dec	r0
    190a:	e2 f7       	brpl	.-8      	; 0x1904 <DIO_SetPinLevel+0x7a>
    190c:	84 2b       	or	r24, r20
    190e:	8c 93       	st	X, r24
    1910:	b3 c0       	rjmp	.+358    	; 0x1a78 <DIO_SetPinLevel+0x1ee>
            break;
        case DIO_PORTB:
            SET_BIT(PORTB, pin);
    1912:	a8 e3       	ldi	r26, 0x38	; 56
    1914:	b0 e0       	ldi	r27, 0x00	; 0
    1916:	e8 e3       	ldi	r30, 0x38	; 56
    1918:	f0 e0       	ldi	r31, 0x00	; 0
    191a:	80 81       	ld	r24, Z
    191c:	48 2f       	mov	r20, r24
    191e:	8a 81       	ldd	r24, Y+2	; 0x02
    1920:	28 2f       	mov	r18, r24
    1922:	30 e0       	ldi	r19, 0x00	; 0
    1924:	81 e0       	ldi	r24, 0x01	; 1
    1926:	90 e0       	ldi	r25, 0x00	; 0
    1928:	02 2e       	mov	r0, r18
    192a:	02 c0       	rjmp	.+4      	; 0x1930 <DIO_SetPinLevel+0xa6>
    192c:	88 0f       	add	r24, r24
    192e:	99 1f       	adc	r25, r25
    1930:	0a 94       	dec	r0
    1932:	e2 f7       	brpl	.-8      	; 0x192c <DIO_SetPinLevel+0xa2>
    1934:	84 2b       	or	r24, r20
    1936:	8c 93       	st	X, r24
    1938:	9f c0       	rjmp	.+318    	; 0x1a78 <DIO_SetPinLevel+0x1ee>
            break;
        case DIO_PORTC:
            SET_BIT(PORTC, pin);
    193a:	a5 e3       	ldi	r26, 0x35	; 53
    193c:	b0 e0       	ldi	r27, 0x00	; 0
    193e:	e5 e3       	ldi	r30, 0x35	; 53
    1940:	f0 e0       	ldi	r31, 0x00	; 0
    1942:	80 81       	ld	r24, Z
    1944:	48 2f       	mov	r20, r24
    1946:	8a 81       	ldd	r24, Y+2	; 0x02
    1948:	28 2f       	mov	r18, r24
    194a:	30 e0       	ldi	r19, 0x00	; 0
    194c:	81 e0       	ldi	r24, 0x01	; 1
    194e:	90 e0       	ldi	r25, 0x00	; 0
    1950:	02 2e       	mov	r0, r18
    1952:	02 c0       	rjmp	.+4      	; 0x1958 <DIO_SetPinLevel+0xce>
    1954:	88 0f       	add	r24, r24
    1956:	99 1f       	adc	r25, r25
    1958:	0a 94       	dec	r0
    195a:	e2 f7       	brpl	.-8      	; 0x1954 <DIO_SetPinLevel+0xca>
    195c:	84 2b       	or	r24, r20
    195e:	8c 93       	st	X, r24
    1960:	8b c0       	rjmp	.+278    	; 0x1a78 <DIO_SetPinLevel+0x1ee>
            break;
        case DIO_PORTD:
            SET_BIT(PORTD, pin);
    1962:	a2 e3       	ldi	r26, 0x32	; 50
    1964:	b0 e0       	ldi	r27, 0x00	; 0
    1966:	e2 e3       	ldi	r30, 0x32	; 50
    1968:	f0 e0       	ldi	r31, 0x00	; 0
    196a:	80 81       	ld	r24, Z
    196c:	48 2f       	mov	r20, r24
    196e:	8a 81       	ldd	r24, Y+2	; 0x02
    1970:	28 2f       	mov	r18, r24
    1972:	30 e0       	ldi	r19, 0x00	; 0
    1974:	81 e0       	ldi	r24, 0x01	; 1
    1976:	90 e0       	ldi	r25, 0x00	; 0
    1978:	02 2e       	mov	r0, r18
    197a:	02 c0       	rjmp	.+4      	; 0x1980 <DIO_SetPinLevel+0xf6>
    197c:	88 0f       	add	r24, r24
    197e:	99 1f       	adc	r25, r25
    1980:	0a 94       	dec	r0
    1982:	e2 f7       	brpl	.-8      	; 0x197c <DIO_SetPinLevel+0xf2>
    1984:	84 2b       	or	r24, r20
    1986:	8c 93       	st	X, r24
    1988:	77 c0       	rjmp	.+238    	; 0x1a78 <DIO_SetPinLevel+0x1ee>
            break;
        default:
            break;
        }
    }
    else if (level == DIO_LOW)
    198a:	8b 81       	ldd	r24, Y+3	; 0x03
    198c:	88 23       	and	r24, r24
    198e:	09 f0       	breq	.+2      	; 0x1992 <DIO_SetPinLevel+0x108>
    1990:	73 c0       	rjmp	.+230    	; 0x1a78 <DIO_SetPinLevel+0x1ee>
    {
        switch (port)
    1992:	89 81       	ldd	r24, Y+1	; 0x01
    1994:	28 2f       	mov	r18, r24
    1996:	30 e0       	ldi	r19, 0x00	; 0
    1998:	3d 83       	std	Y+5, r19	; 0x05
    199a:	2c 83       	std	Y+4, r18	; 0x04
    199c:	8c 81       	ldd	r24, Y+4	; 0x04
    199e:	9d 81       	ldd	r25, Y+5	; 0x05
    19a0:	81 30       	cpi	r24, 0x01	; 1
    19a2:	91 05       	cpc	r25, r1
    19a4:	59 f1       	breq	.+86     	; 0x19fc <DIO_SetPinLevel+0x172>
    19a6:	2c 81       	ldd	r18, Y+4	; 0x04
    19a8:	3d 81       	ldd	r19, Y+5	; 0x05
    19aa:	22 30       	cpi	r18, 0x02	; 2
    19ac:	31 05       	cpc	r19, r1
    19ae:	2c f4       	brge	.+10     	; 0x19ba <DIO_SetPinLevel+0x130>
    19b0:	8c 81       	ldd	r24, Y+4	; 0x04
    19b2:	9d 81       	ldd	r25, Y+5	; 0x05
    19b4:	00 97       	sbiw	r24, 0x00	; 0
    19b6:	69 f0       	breq	.+26     	; 0x19d2 <DIO_SetPinLevel+0x148>
    19b8:	5f c0       	rjmp	.+190    	; 0x1a78 <DIO_SetPinLevel+0x1ee>
    19ba:	2c 81       	ldd	r18, Y+4	; 0x04
    19bc:	3d 81       	ldd	r19, Y+5	; 0x05
    19be:	22 30       	cpi	r18, 0x02	; 2
    19c0:	31 05       	cpc	r19, r1
    19c2:	89 f1       	breq	.+98     	; 0x1a26 <DIO_SetPinLevel+0x19c>
    19c4:	8c 81       	ldd	r24, Y+4	; 0x04
    19c6:	9d 81       	ldd	r25, Y+5	; 0x05
    19c8:	83 30       	cpi	r24, 0x03	; 3
    19ca:	91 05       	cpc	r25, r1
    19cc:	09 f4       	brne	.+2      	; 0x19d0 <DIO_SetPinLevel+0x146>
    19ce:	40 c0       	rjmp	.+128    	; 0x1a50 <DIO_SetPinLevel+0x1c6>
    19d0:	53 c0       	rjmp	.+166    	; 0x1a78 <DIO_SetPinLevel+0x1ee>
        {
        case DIO_PORTA:
            CLR_BIT(PORTA, pin);
    19d2:	ab e3       	ldi	r26, 0x3B	; 59
    19d4:	b0 e0       	ldi	r27, 0x00	; 0
    19d6:	eb e3       	ldi	r30, 0x3B	; 59
    19d8:	f0 e0       	ldi	r31, 0x00	; 0
    19da:	80 81       	ld	r24, Z
    19dc:	48 2f       	mov	r20, r24
    19de:	8a 81       	ldd	r24, Y+2	; 0x02
    19e0:	28 2f       	mov	r18, r24
    19e2:	30 e0       	ldi	r19, 0x00	; 0
    19e4:	81 e0       	ldi	r24, 0x01	; 1
    19e6:	90 e0       	ldi	r25, 0x00	; 0
    19e8:	02 2e       	mov	r0, r18
    19ea:	02 c0       	rjmp	.+4      	; 0x19f0 <DIO_SetPinLevel+0x166>
    19ec:	88 0f       	add	r24, r24
    19ee:	99 1f       	adc	r25, r25
    19f0:	0a 94       	dec	r0
    19f2:	e2 f7       	brpl	.-8      	; 0x19ec <DIO_SetPinLevel+0x162>
    19f4:	80 95       	com	r24
    19f6:	84 23       	and	r24, r20
    19f8:	8c 93       	st	X, r24
    19fa:	3e c0       	rjmp	.+124    	; 0x1a78 <DIO_SetPinLevel+0x1ee>
            break;
        case DIO_PORTB:
            CLR_BIT(PORTB, pin);
    19fc:	a8 e3       	ldi	r26, 0x38	; 56
    19fe:	b0 e0       	ldi	r27, 0x00	; 0
    1a00:	e8 e3       	ldi	r30, 0x38	; 56
    1a02:	f0 e0       	ldi	r31, 0x00	; 0
    1a04:	80 81       	ld	r24, Z
    1a06:	48 2f       	mov	r20, r24
    1a08:	8a 81       	ldd	r24, Y+2	; 0x02
    1a0a:	28 2f       	mov	r18, r24
    1a0c:	30 e0       	ldi	r19, 0x00	; 0
    1a0e:	81 e0       	ldi	r24, 0x01	; 1
    1a10:	90 e0       	ldi	r25, 0x00	; 0
    1a12:	02 2e       	mov	r0, r18
    1a14:	02 c0       	rjmp	.+4      	; 0x1a1a <DIO_SetPinLevel+0x190>
    1a16:	88 0f       	add	r24, r24
    1a18:	99 1f       	adc	r25, r25
    1a1a:	0a 94       	dec	r0
    1a1c:	e2 f7       	brpl	.-8      	; 0x1a16 <DIO_SetPinLevel+0x18c>
    1a1e:	80 95       	com	r24
    1a20:	84 23       	and	r24, r20
    1a22:	8c 93       	st	X, r24
    1a24:	29 c0       	rjmp	.+82     	; 0x1a78 <DIO_SetPinLevel+0x1ee>
            break;
        case DIO_PORTC:
            CLR_BIT(PORTC, pin);
    1a26:	a5 e3       	ldi	r26, 0x35	; 53
    1a28:	b0 e0       	ldi	r27, 0x00	; 0
    1a2a:	e5 e3       	ldi	r30, 0x35	; 53
    1a2c:	f0 e0       	ldi	r31, 0x00	; 0
    1a2e:	80 81       	ld	r24, Z
    1a30:	48 2f       	mov	r20, r24
    1a32:	8a 81       	ldd	r24, Y+2	; 0x02
    1a34:	28 2f       	mov	r18, r24
    1a36:	30 e0       	ldi	r19, 0x00	; 0
    1a38:	81 e0       	ldi	r24, 0x01	; 1
    1a3a:	90 e0       	ldi	r25, 0x00	; 0
    1a3c:	02 2e       	mov	r0, r18
    1a3e:	02 c0       	rjmp	.+4      	; 0x1a44 <DIO_SetPinLevel+0x1ba>
    1a40:	88 0f       	add	r24, r24
    1a42:	99 1f       	adc	r25, r25
    1a44:	0a 94       	dec	r0
    1a46:	e2 f7       	brpl	.-8      	; 0x1a40 <DIO_SetPinLevel+0x1b6>
    1a48:	80 95       	com	r24
    1a4a:	84 23       	and	r24, r20
    1a4c:	8c 93       	st	X, r24
    1a4e:	14 c0       	rjmp	.+40     	; 0x1a78 <DIO_SetPinLevel+0x1ee>
            break;
        case DIO_PORTD:
            CLR_BIT(PORTD, pin);
    1a50:	a2 e3       	ldi	r26, 0x32	; 50
    1a52:	b0 e0       	ldi	r27, 0x00	; 0
    1a54:	e2 e3       	ldi	r30, 0x32	; 50
    1a56:	f0 e0       	ldi	r31, 0x00	; 0
    1a58:	80 81       	ld	r24, Z
    1a5a:	48 2f       	mov	r20, r24
    1a5c:	8a 81       	ldd	r24, Y+2	; 0x02
    1a5e:	28 2f       	mov	r18, r24
    1a60:	30 e0       	ldi	r19, 0x00	; 0
    1a62:	81 e0       	ldi	r24, 0x01	; 1
    1a64:	90 e0       	ldi	r25, 0x00	; 0
    1a66:	02 2e       	mov	r0, r18
    1a68:	02 c0       	rjmp	.+4      	; 0x1a6e <DIO_SetPinLevel+0x1e4>
    1a6a:	88 0f       	add	r24, r24
    1a6c:	99 1f       	adc	r25, r25
    1a6e:	0a 94       	dec	r0
    1a70:	e2 f7       	brpl	.-8      	; 0x1a6a <DIO_SetPinLevel+0x1e0>
    1a72:	80 95       	com	r24
    1a74:	84 23       	and	r24, r20
    1a76:	8c 93       	st	X, r24
            break;
        default:
            break;
        }
    }
}
    1a78:	27 96       	adiw	r28, 0x07	; 7
    1a7a:	0f b6       	in	r0, 0x3f	; 63
    1a7c:	f8 94       	cli
    1a7e:	de bf       	out	0x3e, r29	; 62
    1a80:	0f be       	out	0x3f, r0	; 63
    1a82:	cd bf       	out	0x3d, r28	; 61
    1a84:	cf 91       	pop	r28
    1a86:	df 91       	pop	r29
    1a88:	08 95       	ret

00001a8a <DIO_SetPortLevel>:

void DIO_SetPortLevel (DIO_PortType port, DIO_LevelType level) {
    1a8a:	df 93       	push	r29
    1a8c:	cf 93       	push	r28
    1a8e:	cd b7       	in	r28, 0x3d	; 61
    1a90:	de b7       	in	r29, 0x3e	; 62
    1a92:	28 97       	sbiw	r28, 0x08	; 8
    1a94:	0f b6       	in	r0, 0x3f	; 63
    1a96:	f8 94       	cli
    1a98:	de bf       	out	0x3e, r29	; 62
    1a9a:	0f be       	out	0x3f, r0	; 63
    1a9c:	cd bf       	out	0x3d, r28	; 61
    1a9e:	89 83       	std	Y+1, r24	; 0x01
    1aa0:	6a 83       	std	Y+2, r22	; 0x02
    if (level == DIO_HIGH) {
    1aa2:	8a 81       	ldd	r24, Y+2	; 0x02
    1aa4:	81 30       	cpi	r24, 0x01	; 1
    1aa6:	99 f5       	brne	.+102    	; 0x1b0e <DIO_SetPortLevel+0x84>
        switch (port)
    1aa8:	89 81       	ldd	r24, Y+1	; 0x01
    1aaa:	28 2f       	mov	r18, r24
    1aac:	30 e0       	ldi	r19, 0x00	; 0
    1aae:	38 87       	std	Y+8, r19	; 0x08
    1ab0:	2f 83       	std	Y+7, r18	; 0x07
    1ab2:	8f 81       	ldd	r24, Y+7	; 0x07
    1ab4:	98 85       	ldd	r25, Y+8	; 0x08
    1ab6:	81 30       	cpi	r24, 0x01	; 1
    1ab8:	91 05       	cpc	r25, r1
    1aba:	d1 f0       	breq	.+52     	; 0x1af0 <DIO_SetPortLevel+0x66>
    1abc:	2f 81       	ldd	r18, Y+7	; 0x07
    1abe:	38 85       	ldd	r19, Y+8	; 0x08
    1ac0:	22 30       	cpi	r18, 0x02	; 2
    1ac2:	31 05       	cpc	r19, r1
    1ac4:	2c f4       	brge	.+10     	; 0x1ad0 <DIO_SetPortLevel+0x46>
    1ac6:	8f 81       	ldd	r24, Y+7	; 0x07
    1ac8:	98 85       	ldd	r25, Y+8	; 0x08
    1aca:	00 97       	sbiw	r24, 0x00	; 0
    1acc:	61 f0       	breq	.+24     	; 0x1ae6 <DIO_SetPortLevel+0x5c>
    1ace:	83 c0       	rjmp	.+262    	; 0x1bd6 <DIO_SetPortLevel+0x14c>
    1ad0:	2f 81       	ldd	r18, Y+7	; 0x07
    1ad2:	38 85       	ldd	r19, Y+8	; 0x08
    1ad4:	22 30       	cpi	r18, 0x02	; 2
    1ad6:	31 05       	cpc	r19, r1
    1ad8:	81 f0       	breq	.+32     	; 0x1afa <DIO_SetPortLevel+0x70>
    1ada:	8f 81       	ldd	r24, Y+7	; 0x07
    1adc:	98 85       	ldd	r25, Y+8	; 0x08
    1ade:	83 30       	cpi	r24, 0x03	; 3
    1ae0:	91 05       	cpc	r25, r1
    1ae2:	81 f0       	breq	.+32     	; 0x1b04 <DIO_SetPortLevel+0x7a>
    1ae4:	78 c0       	rjmp	.+240    	; 0x1bd6 <DIO_SetPortLevel+0x14c>
        {
        case DIO_PORTA:
            PORTA = 0xFF;
    1ae6:	eb e3       	ldi	r30, 0x3B	; 59
    1ae8:	f0 e0       	ldi	r31, 0x00	; 0
    1aea:	8f ef       	ldi	r24, 0xFF	; 255
    1aec:	80 83       	st	Z, r24
    1aee:	73 c0       	rjmp	.+230    	; 0x1bd6 <DIO_SetPortLevel+0x14c>
            break;
        case DIO_PORTB:
            PORTB = 0xFF;
    1af0:	e8 e3       	ldi	r30, 0x38	; 56
    1af2:	f0 e0       	ldi	r31, 0x00	; 0
    1af4:	8f ef       	ldi	r24, 0xFF	; 255
    1af6:	80 83       	st	Z, r24
    1af8:	6e c0       	rjmp	.+220    	; 0x1bd6 <DIO_SetPortLevel+0x14c>
            break;
        case DIO_PORTC:
            PORTC = 0xFF;
    1afa:	e5 e3       	ldi	r30, 0x35	; 53
    1afc:	f0 e0       	ldi	r31, 0x00	; 0
    1afe:	8f ef       	ldi	r24, 0xFF	; 255
    1b00:	80 83       	st	Z, r24
    1b02:	69 c0       	rjmp	.+210    	; 0x1bd6 <DIO_SetPortLevel+0x14c>
            break;
        case DIO_PORTD:
            PORTD = 0xFF;
    1b04:	e2 e3       	ldi	r30, 0x32	; 50
    1b06:	f0 e0       	ldi	r31, 0x00	; 0
    1b08:	8f ef       	ldi	r24, 0xFF	; 255
    1b0a:	80 83       	st	Z, r24
    1b0c:	64 c0       	rjmp	.+200    	; 0x1bd6 <DIO_SetPortLevel+0x14c>
            break;
        default:
            break;
        }
    }
    else if (level == DIO_LOW) {
    1b0e:	8a 81       	ldd	r24, Y+2	; 0x02
    1b10:	88 23       	and	r24, r24
    1b12:	79 f5       	brne	.+94     	; 0x1b72 <DIO_SetPortLevel+0xe8>
        switch (port)
    1b14:	89 81       	ldd	r24, Y+1	; 0x01
    1b16:	28 2f       	mov	r18, r24
    1b18:	30 e0       	ldi	r19, 0x00	; 0
    1b1a:	3e 83       	std	Y+6, r19	; 0x06
    1b1c:	2d 83       	std	Y+5, r18	; 0x05
    1b1e:	8d 81       	ldd	r24, Y+5	; 0x05
    1b20:	9e 81       	ldd	r25, Y+6	; 0x06
    1b22:	81 30       	cpi	r24, 0x01	; 1
    1b24:	91 05       	cpc	r25, r1
    1b26:	c9 f0       	breq	.+50     	; 0x1b5a <DIO_SetPortLevel+0xd0>
    1b28:	2d 81       	ldd	r18, Y+5	; 0x05
    1b2a:	3e 81       	ldd	r19, Y+6	; 0x06
    1b2c:	22 30       	cpi	r18, 0x02	; 2
    1b2e:	31 05       	cpc	r19, r1
    1b30:	2c f4       	brge	.+10     	; 0x1b3c <DIO_SetPortLevel+0xb2>
    1b32:	8d 81       	ldd	r24, Y+5	; 0x05
    1b34:	9e 81       	ldd	r25, Y+6	; 0x06
    1b36:	00 97       	sbiw	r24, 0x00	; 0
    1b38:	61 f0       	breq	.+24     	; 0x1b52 <DIO_SetPortLevel+0xc8>
    1b3a:	4d c0       	rjmp	.+154    	; 0x1bd6 <DIO_SetPortLevel+0x14c>
    1b3c:	2d 81       	ldd	r18, Y+5	; 0x05
    1b3e:	3e 81       	ldd	r19, Y+6	; 0x06
    1b40:	22 30       	cpi	r18, 0x02	; 2
    1b42:	31 05       	cpc	r19, r1
    1b44:	71 f0       	breq	.+28     	; 0x1b62 <DIO_SetPortLevel+0xd8>
    1b46:	8d 81       	ldd	r24, Y+5	; 0x05
    1b48:	9e 81       	ldd	r25, Y+6	; 0x06
    1b4a:	83 30       	cpi	r24, 0x03	; 3
    1b4c:	91 05       	cpc	r25, r1
    1b4e:	69 f0       	breq	.+26     	; 0x1b6a <DIO_SetPortLevel+0xe0>
    1b50:	42 c0       	rjmp	.+132    	; 0x1bd6 <DIO_SetPortLevel+0x14c>
        {
        case DIO_PORTA:
            PORTA = 0x00;
    1b52:	eb e3       	ldi	r30, 0x3B	; 59
    1b54:	f0 e0       	ldi	r31, 0x00	; 0
    1b56:	10 82       	st	Z, r1
    1b58:	3e c0       	rjmp	.+124    	; 0x1bd6 <DIO_SetPortLevel+0x14c>
            break;
        case DIO_PORTB:
            PORTB = 0x00;
    1b5a:	e8 e3       	ldi	r30, 0x38	; 56
    1b5c:	f0 e0       	ldi	r31, 0x00	; 0
    1b5e:	10 82       	st	Z, r1
    1b60:	3a c0       	rjmp	.+116    	; 0x1bd6 <DIO_SetPortLevel+0x14c>
            break;
        case DIO_PORTC:
            PORTC = 0x00;
    1b62:	e5 e3       	ldi	r30, 0x35	; 53
    1b64:	f0 e0       	ldi	r31, 0x00	; 0
    1b66:	10 82       	st	Z, r1
    1b68:	36 c0       	rjmp	.+108    	; 0x1bd6 <DIO_SetPortLevel+0x14c>
            break;
        case DIO_PORTD:
            PORTD = 0x00;
    1b6a:	e2 e3       	ldi	r30, 0x32	; 50
    1b6c:	f0 e0       	ldi	r31, 0x00	; 0
    1b6e:	10 82       	st	Z, r1
    1b70:	32 c0       	rjmp	.+100    	; 0x1bd6 <DIO_SetPortLevel+0x14c>
        default:
            break;
        }
    }
    else {
        switch (port)
    1b72:	89 81       	ldd	r24, Y+1	; 0x01
    1b74:	28 2f       	mov	r18, r24
    1b76:	30 e0       	ldi	r19, 0x00	; 0
    1b78:	3c 83       	std	Y+4, r19	; 0x04
    1b7a:	2b 83       	std	Y+3, r18	; 0x03
    1b7c:	8b 81       	ldd	r24, Y+3	; 0x03
    1b7e:	9c 81       	ldd	r25, Y+4	; 0x04
    1b80:	81 30       	cpi	r24, 0x01	; 1
    1b82:	91 05       	cpc	r25, r1
    1b84:	d1 f0       	breq	.+52     	; 0x1bba <DIO_SetPortLevel+0x130>
    1b86:	2b 81       	ldd	r18, Y+3	; 0x03
    1b88:	3c 81       	ldd	r19, Y+4	; 0x04
    1b8a:	22 30       	cpi	r18, 0x02	; 2
    1b8c:	31 05       	cpc	r19, r1
    1b8e:	2c f4       	brge	.+10     	; 0x1b9a <DIO_SetPortLevel+0x110>
    1b90:	8b 81       	ldd	r24, Y+3	; 0x03
    1b92:	9c 81       	ldd	r25, Y+4	; 0x04
    1b94:	00 97       	sbiw	r24, 0x00	; 0
    1b96:	61 f0       	breq	.+24     	; 0x1bb0 <DIO_SetPortLevel+0x126>
    1b98:	1e c0       	rjmp	.+60     	; 0x1bd6 <DIO_SetPortLevel+0x14c>
    1b9a:	2b 81       	ldd	r18, Y+3	; 0x03
    1b9c:	3c 81       	ldd	r19, Y+4	; 0x04
    1b9e:	22 30       	cpi	r18, 0x02	; 2
    1ba0:	31 05       	cpc	r19, r1
    1ba2:	81 f0       	breq	.+32     	; 0x1bc4 <DIO_SetPortLevel+0x13a>
    1ba4:	8b 81       	ldd	r24, Y+3	; 0x03
    1ba6:	9c 81       	ldd	r25, Y+4	; 0x04
    1ba8:	83 30       	cpi	r24, 0x03	; 3
    1baa:	91 05       	cpc	r25, r1
    1bac:	81 f0       	breq	.+32     	; 0x1bce <DIO_SetPortLevel+0x144>
    1bae:	13 c0       	rjmp	.+38     	; 0x1bd6 <DIO_SetPortLevel+0x14c>
        {
        case DIO_PORTA:
            PORTA = level;
    1bb0:	eb e3       	ldi	r30, 0x3B	; 59
    1bb2:	f0 e0       	ldi	r31, 0x00	; 0
    1bb4:	8a 81       	ldd	r24, Y+2	; 0x02
    1bb6:	80 83       	st	Z, r24
    1bb8:	0e c0       	rjmp	.+28     	; 0x1bd6 <DIO_SetPortLevel+0x14c>
            break;
        case DIO_PORTB:
            PORTB = level;
    1bba:	e8 e3       	ldi	r30, 0x38	; 56
    1bbc:	f0 e0       	ldi	r31, 0x00	; 0
    1bbe:	8a 81       	ldd	r24, Y+2	; 0x02
    1bc0:	80 83       	st	Z, r24
    1bc2:	09 c0       	rjmp	.+18     	; 0x1bd6 <DIO_SetPortLevel+0x14c>
            break;
        case DIO_PORTC:
            PORTC = level;
    1bc4:	e5 e3       	ldi	r30, 0x35	; 53
    1bc6:	f0 e0       	ldi	r31, 0x00	; 0
    1bc8:	8a 81       	ldd	r24, Y+2	; 0x02
    1bca:	80 83       	st	Z, r24
    1bcc:	04 c0       	rjmp	.+8      	; 0x1bd6 <DIO_SetPortLevel+0x14c>
            break;
        case DIO_PORTD:
            PORTD = level;
    1bce:	e2 e3       	ldi	r30, 0x32	; 50
    1bd0:	f0 e0       	ldi	r31, 0x00	; 0
    1bd2:	8a 81       	ldd	r24, Y+2	; 0x02
    1bd4:	80 83       	st	Z, r24
        default:
            break;
        }

    }
}
    1bd6:	28 96       	adiw	r28, 0x08	; 8
    1bd8:	0f b6       	in	r0, 0x3f	; 63
    1bda:	f8 94       	cli
    1bdc:	de bf       	out	0x3e, r29	; 62
    1bde:	0f be       	out	0x3f, r0	; 63
    1be0:	cd bf       	out	0x3d, r28	; 61
    1be2:	cf 91       	pop	r28
    1be4:	df 91       	pop	r29
    1be6:	08 95       	ret

00001be8 <DIO_ReadPinLevel>:



DIO_LevelType DIO_ReadPinLevel(DIO_PortType port, DIO_PinType pin) {
    1be8:	df 93       	push	r29
    1bea:	cf 93       	push	r28
    1bec:	00 d0       	rcall	.+0      	; 0x1bee <DIO_ReadPinLevel+0x6>
    1bee:	00 d0       	rcall	.+0      	; 0x1bf0 <DIO_ReadPinLevel+0x8>
    1bf0:	0f 92       	push	r0
    1bf2:	cd b7       	in	r28, 0x3d	; 61
    1bf4:	de b7       	in	r29, 0x3e	; 62
    1bf6:	8a 83       	std	Y+2, r24	; 0x02
    1bf8:	6b 83       	std	Y+3, r22	; 0x03
    DIO_LevelType result = DIO_LOW;
    1bfa:	19 82       	std	Y+1, r1	; 0x01
    switch (port)
    1bfc:	8a 81       	ldd	r24, Y+2	; 0x02
    1bfe:	28 2f       	mov	r18, r24
    1c00:	30 e0       	ldi	r19, 0x00	; 0
    1c02:	3d 83       	std	Y+5, r19	; 0x05
    1c04:	2c 83       	std	Y+4, r18	; 0x04
    1c06:	4c 81       	ldd	r20, Y+4	; 0x04
    1c08:	5d 81       	ldd	r21, Y+5	; 0x05
    1c0a:	41 30       	cpi	r20, 0x01	; 1
    1c0c:	51 05       	cpc	r21, r1
    1c0e:	41 f1       	breq	.+80     	; 0x1c60 <DIO_ReadPinLevel+0x78>
    1c10:	8c 81       	ldd	r24, Y+4	; 0x04
    1c12:	9d 81       	ldd	r25, Y+5	; 0x05
    1c14:	82 30       	cpi	r24, 0x02	; 2
    1c16:	91 05       	cpc	r25, r1
    1c18:	34 f4       	brge	.+12     	; 0x1c26 <DIO_ReadPinLevel+0x3e>
    1c1a:	2c 81       	ldd	r18, Y+4	; 0x04
    1c1c:	3d 81       	ldd	r19, Y+5	; 0x05
    1c1e:	21 15       	cp	r18, r1
    1c20:	31 05       	cpc	r19, r1
    1c22:	61 f0       	breq	.+24     	; 0x1c3c <DIO_ReadPinLevel+0x54>
    1c24:	52 c0       	rjmp	.+164    	; 0x1cca <DIO_ReadPinLevel+0xe2>
    1c26:	4c 81       	ldd	r20, Y+4	; 0x04
    1c28:	5d 81       	ldd	r21, Y+5	; 0x05
    1c2a:	42 30       	cpi	r20, 0x02	; 2
    1c2c:	51 05       	cpc	r21, r1
    1c2e:	51 f1       	breq	.+84     	; 0x1c84 <DIO_ReadPinLevel+0x9c>
    1c30:	8c 81       	ldd	r24, Y+4	; 0x04
    1c32:	9d 81       	ldd	r25, Y+5	; 0x05
    1c34:	83 30       	cpi	r24, 0x03	; 3
    1c36:	91 05       	cpc	r25, r1
    1c38:	b9 f1       	breq	.+110    	; 0x1ca8 <DIO_ReadPinLevel+0xc0>
    1c3a:	47 c0       	rjmp	.+142    	; 0x1cca <DIO_ReadPinLevel+0xe2>
    {
    case DIO_PORTA:
        result = GET_BIT(PINA, pin);
    1c3c:	e9 e3       	ldi	r30, 0x39	; 57
    1c3e:	f0 e0       	ldi	r31, 0x00	; 0
    1c40:	80 81       	ld	r24, Z
    1c42:	28 2f       	mov	r18, r24
    1c44:	30 e0       	ldi	r19, 0x00	; 0
    1c46:	8b 81       	ldd	r24, Y+3	; 0x03
    1c48:	88 2f       	mov	r24, r24
    1c4a:	90 e0       	ldi	r25, 0x00	; 0
    1c4c:	a9 01       	movw	r20, r18
    1c4e:	02 c0       	rjmp	.+4      	; 0x1c54 <DIO_ReadPinLevel+0x6c>
    1c50:	55 95       	asr	r21
    1c52:	47 95       	ror	r20
    1c54:	8a 95       	dec	r24
    1c56:	e2 f7       	brpl	.-8      	; 0x1c50 <DIO_ReadPinLevel+0x68>
    1c58:	ca 01       	movw	r24, r20
    1c5a:	81 70       	andi	r24, 0x01	; 1
    1c5c:	89 83       	std	Y+1, r24	; 0x01
    1c5e:	35 c0       	rjmp	.+106    	; 0x1cca <DIO_ReadPinLevel+0xe2>
        break;
    case DIO_PORTB:
        result = GET_BIT(PINB, pin);
    1c60:	e6 e3       	ldi	r30, 0x36	; 54
    1c62:	f0 e0       	ldi	r31, 0x00	; 0
    1c64:	80 81       	ld	r24, Z
    1c66:	28 2f       	mov	r18, r24
    1c68:	30 e0       	ldi	r19, 0x00	; 0
    1c6a:	8b 81       	ldd	r24, Y+3	; 0x03
    1c6c:	88 2f       	mov	r24, r24
    1c6e:	90 e0       	ldi	r25, 0x00	; 0
    1c70:	a9 01       	movw	r20, r18
    1c72:	02 c0       	rjmp	.+4      	; 0x1c78 <DIO_ReadPinLevel+0x90>
    1c74:	55 95       	asr	r21
    1c76:	47 95       	ror	r20
    1c78:	8a 95       	dec	r24
    1c7a:	e2 f7       	brpl	.-8      	; 0x1c74 <DIO_ReadPinLevel+0x8c>
    1c7c:	ca 01       	movw	r24, r20
    1c7e:	81 70       	andi	r24, 0x01	; 1
    1c80:	89 83       	std	Y+1, r24	; 0x01
    1c82:	23 c0       	rjmp	.+70     	; 0x1cca <DIO_ReadPinLevel+0xe2>
        break;
    case DIO_PORTC:
        result = GET_BIT(PINC, pin);
    1c84:	e3 e3       	ldi	r30, 0x33	; 51
    1c86:	f0 e0       	ldi	r31, 0x00	; 0
    1c88:	80 81       	ld	r24, Z
    1c8a:	28 2f       	mov	r18, r24
    1c8c:	30 e0       	ldi	r19, 0x00	; 0
    1c8e:	8b 81       	ldd	r24, Y+3	; 0x03
    1c90:	88 2f       	mov	r24, r24
    1c92:	90 e0       	ldi	r25, 0x00	; 0
    1c94:	a9 01       	movw	r20, r18
    1c96:	02 c0       	rjmp	.+4      	; 0x1c9c <DIO_ReadPinLevel+0xb4>
    1c98:	55 95       	asr	r21
    1c9a:	47 95       	ror	r20
    1c9c:	8a 95       	dec	r24
    1c9e:	e2 f7       	brpl	.-8      	; 0x1c98 <DIO_ReadPinLevel+0xb0>
    1ca0:	ca 01       	movw	r24, r20
    1ca2:	81 70       	andi	r24, 0x01	; 1
    1ca4:	89 83       	std	Y+1, r24	; 0x01
    1ca6:	11 c0       	rjmp	.+34     	; 0x1cca <DIO_ReadPinLevel+0xe2>
        break;
    case DIO_PORTD:
        result = GET_BIT(PIND, pin);
    1ca8:	e0 e3       	ldi	r30, 0x30	; 48
    1caa:	f0 e0       	ldi	r31, 0x00	; 0
    1cac:	80 81       	ld	r24, Z
    1cae:	28 2f       	mov	r18, r24
    1cb0:	30 e0       	ldi	r19, 0x00	; 0
    1cb2:	8b 81       	ldd	r24, Y+3	; 0x03
    1cb4:	88 2f       	mov	r24, r24
    1cb6:	90 e0       	ldi	r25, 0x00	; 0
    1cb8:	a9 01       	movw	r20, r18
    1cba:	02 c0       	rjmp	.+4      	; 0x1cc0 <DIO_ReadPinLevel+0xd8>
    1cbc:	55 95       	asr	r21
    1cbe:	47 95       	ror	r20
    1cc0:	8a 95       	dec	r24
    1cc2:	e2 f7       	brpl	.-8      	; 0x1cbc <DIO_ReadPinLevel+0xd4>
    1cc4:	ca 01       	movw	r24, r20
    1cc6:	81 70       	andi	r24, 0x01	; 1
    1cc8:	89 83       	std	Y+1, r24	; 0x01
        break;
    default:
        break;
    }
    return result;
    1cca:	89 81       	ldd	r24, Y+1	; 0x01
}
    1ccc:	0f 90       	pop	r0
    1cce:	0f 90       	pop	r0
    1cd0:	0f 90       	pop	r0
    1cd2:	0f 90       	pop	r0
    1cd4:	0f 90       	pop	r0
    1cd6:	cf 91       	pop	r28
    1cd8:	df 91       	pop	r29
    1cda:	08 95       	ret

00001cdc <DIO_ReadPortLevel>:

DIO_LevelType DIO_ReadPortLevel (DIO_PortType port) {
    1cdc:	df 93       	push	r29
    1cde:	cf 93       	push	r28
    1ce0:	00 d0       	rcall	.+0      	; 0x1ce2 <DIO_ReadPortLevel+0x6>
    1ce2:	00 d0       	rcall	.+0      	; 0x1ce4 <DIO_ReadPortLevel+0x8>
    1ce4:	cd b7       	in	r28, 0x3d	; 61
    1ce6:	de b7       	in	r29, 0x3e	; 62
    1ce8:	8a 83       	std	Y+2, r24	; 0x02
    u8 result = 0x00;
    1cea:	19 82       	std	Y+1, r1	; 0x01
    switch (port)
    1cec:	8a 81       	ldd	r24, Y+2	; 0x02
    1cee:	28 2f       	mov	r18, r24
    1cf0:	30 e0       	ldi	r19, 0x00	; 0
    1cf2:	3c 83       	std	Y+4, r19	; 0x04
    1cf4:	2b 83       	std	Y+3, r18	; 0x03
    1cf6:	8b 81       	ldd	r24, Y+3	; 0x03
    1cf8:	9c 81       	ldd	r25, Y+4	; 0x04
    1cfa:	81 30       	cpi	r24, 0x01	; 1
    1cfc:	91 05       	cpc	r25, r1
    1cfe:	49 f1       	breq	.+82     	; 0x1d52 <DIO_ReadPortLevel+0x76>
    1d00:	2b 81       	ldd	r18, Y+3	; 0x03
    1d02:	3c 81       	ldd	r19, Y+4	; 0x04
    1d04:	22 30       	cpi	r18, 0x02	; 2
    1d06:	31 05       	cpc	r19, r1
    1d08:	2c f4       	brge	.+10     	; 0x1d14 <DIO_ReadPortLevel+0x38>
    1d0a:	8b 81       	ldd	r24, Y+3	; 0x03
    1d0c:	9c 81       	ldd	r25, Y+4	; 0x04
    1d0e:	00 97       	sbiw	r24, 0x00	; 0
    1d10:	61 f0       	breq	.+24     	; 0x1d2a <DIO_ReadPortLevel+0x4e>
    1d12:	5a c0       	rjmp	.+180    	; 0x1dc8 <DIO_ReadPortLevel+0xec>
    1d14:	2b 81       	ldd	r18, Y+3	; 0x03
    1d16:	3c 81       	ldd	r19, Y+4	; 0x04
    1d18:	22 30       	cpi	r18, 0x02	; 2
    1d1a:	31 05       	cpc	r19, r1
    1d1c:	71 f1       	breq	.+92     	; 0x1d7a <DIO_ReadPortLevel+0x9e>
    1d1e:	8b 81       	ldd	r24, Y+3	; 0x03
    1d20:	9c 81       	ldd	r25, Y+4	; 0x04
    1d22:	83 30       	cpi	r24, 0x03	; 3
    1d24:	91 05       	cpc	r25, r1
    1d26:	e9 f1       	breq	.+122    	; 0x1da2 <DIO_ReadPortLevel+0xc6>
    1d28:	4f c0       	rjmp	.+158    	; 0x1dc8 <DIO_ReadPortLevel+0xec>
    {
    case DIO_PORTA:
        if (PINA == 0xFF) {
    1d2a:	e9 e3       	ldi	r30, 0x39	; 57
    1d2c:	f0 e0       	ldi	r31, 0x00	; 0
    1d2e:	80 81       	ld	r24, Z
    1d30:	8f 3f       	cpi	r24, 0xFF	; 255
    1d32:	19 f4       	brne	.+6      	; 0x1d3a <DIO_ReadPortLevel+0x5e>
            result = DIO_HIGH;
    1d34:	81 e0       	ldi	r24, 0x01	; 1
    1d36:	89 83       	std	Y+1, r24	; 0x01
    1d38:	47 c0       	rjmp	.+142    	; 0x1dc8 <DIO_ReadPortLevel+0xec>
        }
        else if (PINA == 0x00) {
    1d3a:	e9 e3       	ldi	r30, 0x39	; 57
    1d3c:	f0 e0       	ldi	r31, 0x00	; 0
    1d3e:	80 81       	ld	r24, Z
    1d40:	88 23       	and	r24, r24
    1d42:	11 f4       	brne	.+4      	; 0x1d48 <DIO_ReadPortLevel+0x6c>
            result = DIO_LOW;
    1d44:	19 82       	std	Y+1, r1	; 0x01
    1d46:	40 c0       	rjmp	.+128    	; 0x1dc8 <DIO_ReadPortLevel+0xec>
        }
        else {
            result = PINA;
    1d48:	e9 e3       	ldi	r30, 0x39	; 57
    1d4a:	f0 e0       	ldi	r31, 0x00	; 0
    1d4c:	80 81       	ld	r24, Z
    1d4e:	89 83       	std	Y+1, r24	; 0x01
    1d50:	3b c0       	rjmp	.+118    	; 0x1dc8 <DIO_ReadPortLevel+0xec>
        }
        break;
    case DIO_PORTB:
        if (PINB == 0xFF) {
    1d52:	e6 e3       	ldi	r30, 0x36	; 54
    1d54:	f0 e0       	ldi	r31, 0x00	; 0
    1d56:	80 81       	ld	r24, Z
    1d58:	8f 3f       	cpi	r24, 0xFF	; 255
    1d5a:	19 f4       	brne	.+6      	; 0x1d62 <DIO_ReadPortLevel+0x86>
            result = DIO_HIGH;
    1d5c:	81 e0       	ldi	r24, 0x01	; 1
    1d5e:	89 83       	std	Y+1, r24	; 0x01
    1d60:	33 c0       	rjmp	.+102    	; 0x1dc8 <DIO_ReadPortLevel+0xec>
        }
        else if (PINB == 0x00) {
    1d62:	e6 e3       	ldi	r30, 0x36	; 54
    1d64:	f0 e0       	ldi	r31, 0x00	; 0
    1d66:	80 81       	ld	r24, Z
    1d68:	88 23       	and	r24, r24
    1d6a:	11 f4       	brne	.+4      	; 0x1d70 <DIO_ReadPortLevel+0x94>
            result = DIO_LOW;
    1d6c:	19 82       	std	Y+1, r1	; 0x01
    1d6e:	2c c0       	rjmp	.+88     	; 0x1dc8 <DIO_ReadPortLevel+0xec>
        }
        else {
            result = PINB;
    1d70:	e6 e3       	ldi	r30, 0x36	; 54
    1d72:	f0 e0       	ldi	r31, 0x00	; 0
    1d74:	80 81       	ld	r24, Z
    1d76:	89 83       	std	Y+1, r24	; 0x01
    1d78:	27 c0       	rjmp	.+78     	; 0x1dc8 <DIO_ReadPortLevel+0xec>
        }
        break;
    case DIO_PORTC:
        if (PINC == 0xFF) {
    1d7a:	e3 e3       	ldi	r30, 0x33	; 51
    1d7c:	f0 e0       	ldi	r31, 0x00	; 0
    1d7e:	80 81       	ld	r24, Z
    1d80:	8f 3f       	cpi	r24, 0xFF	; 255
    1d82:	19 f4       	brne	.+6      	; 0x1d8a <DIO_ReadPortLevel+0xae>
            result = DIO_HIGH;
    1d84:	81 e0       	ldi	r24, 0x01	; 1
    1d86:	89 83       	std	Y+1, r24	; 0x01
    1d88:	1f c0       	rjmp	.+62     	; 0x1dc8 <DIO_ReadPortLevel+0xec>
        }
        else if (PINC == 0x00) {
    1d8a:	e3 e3       	ldi	r30, 0x33	; 51
    1d8c:	f0 e0       	ldi	r31, 0x00	; 0
    1d8e:	80 81       	ld	r24, Z
    1d90:	88 23       	and	r24, r24
    1d92:	11 f4       	brne	.+4      	; 0x1d98 <DIO_ReadPortLevel+0xbc>
            result = DIO_LOW;
    1d94:	19 82       	std	Y+1, r1	; 0x01
    1d96:	18 c0       	rjmp	.+48     	; 0x1dc8 <DIO_ReadPortLevel+0xec>
        }
        else {
            result = PINC;
    1d98:	e3 e3       	ldi	r30, 0x33	; 51
    1d9a:	f0 e0       	ldi	r31, 0x00	; 0
    1d9c:	80 81       	ld	r24, Z
    1d9e:	89 83       	std	Y+1, r24	; 0x01
    1da0:	13 c0       	rjmp	.+38     	; 0x1dc8 <DIO_ReadPortLevel+0xec>
        }
        break;
    case DIO_PORTD:
        if (PIND == 0xFF) {
    1da2:	e0 e3       	ldi	r30, 0x30	; 48
    1da4:	f0 e0       	ldi	r31, 0x00	; 0
    1da6:	80 81       	ld	r24, Z
    1da8:	8f 3f       	cpi	r24, 0xFF	; 255
    1daa:	19 f4       	brne	.+6      	; 0x1db2 <DIO_ReadPortLevel+0xd6>
            result = DIO_HIGH;
    1dac:	81 e0       	ldi	r24, 0x01	; 1
    1dae:	89 83       	std	Y+1, r24	; 0x01
    1db0:	0b c0       	rjmp	.+22     	; 0x1dc8 <DIO_ReadPortLevel+0xec>
        }
        else if (PIND == 0x00) {
    1db2:	e0 e3       	ldi	r30, 0x30	; 48
    1db4:	f0 e0       	ldi	r31, 0x00	; 0
    1db6:	80 81       	ld	r24, Z
    1db8:	88 23       	and	r24, r24
    1dba:	11 f4       	brne	.+4      	; 0x1dc0 <DIO_ReadPortLevel+0xe4>
            result = DIO_LOW;
    1dbc:	19 82       	std	Y+1, r1	; 0x01
    1dbe:	04 c0       	rjmp	.+8      	; 0x1dc8 <DIO_ReadPortLevel+0xec>
        }
        else {
            result = PIND;
    1dc0:	e0 e3       	ldi	r30, 0x30	; 48
    1dc2:	f0 e0       	ldi	r31, 0x00	; 0
    1dc4:	80 81       	ld	r24, Z
    1dc6:	89 83       	std	Y+1, r24	; 0x01
        }
        break;
    default:
        break;
    }
    return result;
    1dc8:	89 81       	ldd	r24, Y+1	; 0x01
}
    1dca:	0f 90       	pop	r0
    1dcc:	0f 90       	pop	r0
    1dce:	0f 90       	pop	r0
    1dd0:	0f 90       	pop	r0
    1dd2:	cf 91       	pop	r28
    1dd4:	df 91       	pop	r29
    1dd6:	08 95       	ret

00001dd8 <EEPROM_Init>:
#include "I2C.h"
#include "EEPROM.h"
//#include "EEPROM_cfg.h"

void EEPROM_Init(void)
{
    1dd8:	df 93       	push	r29
    1dda:	cf 93       	push	r28
    1ddc:	cd b7       	in	r28, 0x3d	; 61
    1dde:	de b7       	in	r29, 0x3e	; 62
	I2C_InitMaster();
    1de0:	0e 94 26 1b 	call	0x364c	; 0x364c <I2C_InitMaster>
}
    1de4:	cf 91       	pop	r28
    1de6:	df 91       	pop	r29
    1de8:	08 95       	ret

00001dea <EEPROM_Write_Byte>:

/*Send byte to EEPROM*/
void EEPROM_Write_Byte(u8 AddressSlave ,u8 AddressLocation,u8 Data)
{
    1dea:	df 93       	push	r29
    1dec:	cf 93       	push	r28
    1dee:	00 d0       	rcall	.+0      	; 0x1df0 <EEPROM_Write_Byte+0x6>
    1df0:	0f 92       	push	r0
    1df2:	cd b7       	in	r28, 0x3d	; 61
    1df4:	de b7       	in	r29, 0x3e	; 62
    1df6:	89 83       	std	Y+1, r24	; 0x01
    1df8:	6a 83       	std	Y+2, r22	; 0x02
    1dfa:	4b 83       	std	Y+3, r20	; 0x03
	I2C_SendStartCondition();
    1dfc:	0e 94 38 1b 	call	0x3670	; 0x3670 <I2C_SendStartCondition>
	//write the device address and so we need to get A2 A1 A0 address bits and R/W=0 (write)
	I2C_MasterWriteDataByte(AddressSlave);
    1e00:	89 81       	ldd	r24, Y+1	; 0x01
    1e02:	0e 94 53 1b 	call	0x36a6	; 0x36a6 <I2C_MasterWriteDataByte>

	//send the required location address
	I2C_MasterWriteDataByte(AddressLocation);
    1e06:	8a 81       	ldd	r24, Y+2	; 0x02
    1e08:	0e 94 53 1b 	call	0x36a6	; 0x36a6 <I2C_MasterWriteDataByte>

	//write byte to eeprom
	I2C_MasterWriteDataByte(Data);
    1e0c:	8b 81       	ldd	r24, Y+3	; 0x03
    1e0e:	0e 94 53 1b 	call	0x36a6	; 0x36a6 <I2C_MasterWriteDataByte>

	I2C_SendStopCondition();
    1e12:	0e 94 48 1b 	call	0x3690	; 0x3690 <I2C_SendStopCondition>
}
    1e16:	0f 90       	pop	r0
    1e18:	0f 90       	pop	r0
    1e1a:	0f 90       	pop	r0
    1e1c:	cf 91       	pop	r28
    1e1e:	df 91       	pop	r29
    1e20:	08 95       	ret

00001e22 <EEPROM_Read_Byte>:

u8 EEPROM_Read_Byte(u8 AddressSlave ,u8 AddressLocation)
{
    1e22:	df 93       	push	r29
    1e24:	cf 93       	push	r28
    1e26:	00 d0       	rcall	.+0      	; 0x1e28 <EEPROM_Read_Byte+0x6>
    1e28:	cd b7       	in	r28, 0x3d	; 61
    1e2a:	de b7       	in	r29, 0x3e	; 62
    1e2c:	89 83       	std	Y+1, r24	; 0x01
    1e2e:	6a 83       	std	Y+2, r22	; 0x02

	I2C_SendStartCondition();
    1e30:	0e 94 38 1b 	call	0x3670	; 0x3670 <I2C_SendStartCondition>

	//write the device address and so we need to get A2 A1 A0 address bits and R/W=0 (write)
	I2C_MasterWriteDataByte(AddressSlave);
    1e34:	89 81       	ldd	r24, Y+1	; 0x01
    1e36:	0e 94 53 1b 	call	0x36a6	; 0x36a6 <I2C_MasterWriteDataByte>

	//send the required location address
	I2C_MasterWriteDataByte(AddressLocation);
    1e3a:	8a 81       	ldd	r24, Y+2	; 0x02
    1e3c:	0e 94 53 1b 	call	0x36a6	; 0x36a6 <I2C_MasterWriteDataByte>

	//send a repeated start
	I2C_SendStartCondition();
    1e40:	0e 94 38 1b 	call	0x3670	; 0x3670 <I2C_SendStartCondition>

	//write the device address and so we need to get A2 A1 A0 address bits and R/W=1 (Read)
	SET_BIT(AddressSlave,0);
    1e44:	89 81       	ldd	r24, Y+1	; 0x01
    1e46:	81 60       	ori	r24, 0x01	; 1
    1e48:	89 83       	std	Y+1, r24	; 0x01
	I2C_MasterWriteDataByte(AddressSlave);
    1e4a:	89 81       	ldd	r24, Y+1	; 0x01
    1e4c:	0e 94 53 1b 	call	0x36a6	; 0x36a6 <I2C_MasterWriteDataByte>

	return I2C_MasterReadDataByteWith_NACK();
    1e50:	0e 94 7d 1b 	call	0x36fa	; 0x36fa <I2C_MasterReadDataByteWith_NACK>

	I2C_SendStopCondition();
}
    1e54:	0f 90       	pop	r0
    1e56:	0f 90       	pop	r0
    1e58:	cf 91       	pop	r28
    1e5a:	df 91       	pop	r29
    1e5c:	08 95       	ret

00001e5e <__vector_1>:
void (*ExtInterrupt_INT0Callback) (void);
void (*ExtInterrupt_INT1Callback) (void);
void (*ExtInterrupt_INT2Callback) (void);

void __vector_1 (void) __attribute__ ((signal));
void __vector_1 (void) {
    1e5e:	1f 92       	push	r1
    1e60:	0f 92       	push	r0
    1e62:	0f b6       	in	r0, 0x3f	; 63
    1e64:	0f 92       	push	r0
    1e66:	11 24       	eor	r1, r1
    1e68:	2f 93       	push	r18
    1e6a:	3f 93       	push	r19
    1e6c:	4f 93       	push	r20
    1e6e:	5f 93       	push	r21
    1e70:	6f 93       	push	r22
    1e72:	7f 93       	push	r23
    1e74:	8f 93       	push	r24
    1e76:	9f 93       	push	r25
    1e78:	af 93       	push	r26
    1e7a:	bf 93       	push	r27
    1e7c:	ef 93       	push	r30
    1e7e:	ff 93       	push	r31
    1e80:	df 93       	push	r29
    1e82:	cf 93       	push	r28
    1e84:	cd b7       	in	r28, 0x3d	; 61
    1e86:	de b7       	in	r29, 0x3e	; 62
	ExtInterrupt_INT0Callback();
    1e88:	e0 91 8c 01 	lds	r30, 0x018C
    1e8c:	f0 91 8d 01 	lds	r31, 0x018D
    1e90:	09 95       	icall
}
    1e92:	cf 91       	pop	r28
    1e94:	df 91       	pop	r29
    1e96:	ff 91       	pop	r31
    1e98:	ef 91       	pop	r30
    1e9a:	bf 91       	pop	r27
    1e9c:	af 91       	pop	r26
    1e9e:	9f 91       	pop	r25
    1ea0:	8f 91       	pop	r24
    1ea2:	7f 91       	pop	r23
    1ea4:	6f 91       	pop	r22
    1ea6:	5f 91       	pop	r21
    1ea8:	4f 91       	pop	r20
    1eaa:	3f 91       	pop	r19
    1eac:	2f 91       	pop	r18
    1eae:	0f 90       	pop	r0
    1eb0:	0f be       	out	0x3f, r0	; 63
    1eb2:	0f 90       	pop	r0
    1eb4:	1f 90       	pop	r1
    1eb6:	18 95       	reti

00001eb8 <__vector_2>:
void __vector_2 (void) __attribute__ ((signal));
void __vector_2 (void) {
    1eb8:	1f 92       	push	r1
    1eba:	0f 92       	push	r0
    1ebc:	0f b6       	in	r0, 0x3f	; 63
    1ebe:	0f 92       	push	r0
    1ec0:	11 24       	eor	r1, r1
    1ec2:	2f 93       	push	r18
    1ec4:	3f 93       	push	r19
    1ec6:	4f 93       	push	r20
    1ec8:	5f 93       	push	r21
    1eca:	6f 93       	push	r22
    1ecc:	7f 93       	push	r23
    1ece:	8f 93       	push	r24
    1ed0:	9f 93       	push	r25
    1ed2:	af 93       	push	r26
    1ed4:	bf 93       	push	r27
    1ed6:	ef 93       	push	r30
    1ed8:	ff 93       	push	r31
    1eda:	df 93       	push	r29
    1edc:	cf 93       	push	r28
    1ede:	cd b7       	in	r28, 0x3d	; 61
    1ee0:	de b7       	in	r29, 0x3e	; 62
	ExtInterrupt_INT1Callback();
    1ee2:	e0 91 8a 01 	lds	r30, 0x018A
    1ee6:	f0 91 8b 01 	lds	r31, 0x018B
    1eea:	09 95       	icall
}
    1eec:	cf 91       	pop	r28
    1eee:	df 91       	pop	r29
    1ef0:	ff 91       	pop	r31
    1ef2:	ef 91       	pop	r30
    1ef4:	bf 91       	pop	r27
    1ef6:	af 91       	pop	r26
    1ef8:	9f 91       	pop	r25
    1efa:	8f 91       	pop	r24
    1efc:	7f 91       	pop	r23
    1efe:	6f 91       	pop	r22
    1f00:	5f 91       	pop	r21
    1f02:	4f 91       	pop	r20
    1f04:	3f 91       	pop	r19
    1f06:	2f 91       	pop	r18
    1f08:	0f 90       	pop	r0
    1f0a:	0f be       	out	0x3f, r0	; 63
    1f0c:	0f 90       	pop	r0
    1f0e:	1f 90       	pop	r1
    1f10:	18 95       	reti

00001f12 <__vector_3>:
void __vector_3 (void) __attribute__ ((signal));
void __vector_3 (void) {
    1f12:	1f 92       	push	r1
    1f14:	0f 92       	push	r0
    1f16:	0f b6       	in	r0, 0x3f	; 63
    1f18:	0f 92       	push	r0
    1f1a:	11 24       	eor	r1, r1
    1f1c:	2f 93       	push	r18
    1f1e:	3f 93       	push	r19
    1f20:	4f 93       	push	r20
    1f22:	5f 93       	push	r21
    1f24:	6f 93       	push	r22
    1f26:	7f 93       	push	r23
    1f28:	8f 93       	push	r24
    1f2a:	9f 93       	push	r25
    1f2c:	af 93       	push	r26
    1f2e:	bf 93       	push	r27
    1f30:	ef 93       	push	r30
    1f32:	ff 93       	push	r31
    1f34:	df 93       	push	r29
    1f36:	cf 93       	push	r28
    1f38:	cd b7       	in	r28, 0x3d	; 61
    1f3a:	de b7       	in	r29, 0x3e	; 62
	ExtInterrupt_INT2Callback();
    1f3c:	e0 91 8e 01 	lds	r30, 0x018E
    1f40:	f0 91 8f 01 	lds	r31, 0x018F
    1f44:	09 95       	icall
}
    1f46:	cf 91       	pop	r28
    1f48:	df 91       	pop	r29
    1f4a:	ff 91       	pop	r31
    1f4c:	ef 91       	pop	r30
    1f4e:	bf 91       	pop	r27
    1f50:	af 91       	pop	r26
    1f52:	9f 91       	pop	r25
    1f54:	8f 91       	pop	r24
    1f56:	7f 91       	pop	r23
    1f58:	6f 91       	pop	r22
    1f5a:	5f 91       	pop	r21
    1f5c:	4f 91       	pop	r20
    1f5e:	3f 91       	pop	r19
    1f60:	2f 91       	pop	r18
    1f62:	0f 90       	pop	r0
    1f64:	0f be       	out	0x3f, r0	; 63
    1f66:	0f 90       	pop	r0
    1f68:	1f 90       	pop	r1
    1f6a:	18 95       	reti

00001f6c <ExtInterrupt_Init>:
//void __vector_1 (void) __attribute__ ((signal));
//void __vector_1 (void) {
//	// TODO
//}

void ExtInterrupt_Init(void) {
    1f6c:	df 93       	push	r29
    1f6e:	cf 93       	push	r28
    1f70:	cd b7       	in	r28, 0x3d	; 61
    1f72:	de b7       	in	r29, 0x3e	; 62

    /*************************** Interrupt 0 Init ***************************/
#ifdef EXT_INTERRUPT_INT0
    /* Interrupt Enable */
#if EXT_INTERRUPT_INT0_INT_ENABLE == EXT_INTERRUPT_ENABLE
    SET_BIT(GICR, GICR_INT0); // External Interrupt Request 0 Enable
    1f74:	ab e5       	ldi	r26, 0x5B	; 91
    1f76:	b0 e0       	ldi	r27, 0x00	; 0
    1f78:	eb e5       	ldi	r30, 0x5B	; 91
    1f7a:	f0 e0       	ldi	r31, 0x00	; 0
    1f7c:	80 81       	ld	r24, Z
    1f7e:	80 64       	ori	r24, 0x40	; 64
    1f80:	8c 93       	st	X, r24
    GlobalInterrupt_Enable(); // Global Interrupt Enable
    1f82:	0e 94 2d 10 	call	0x205a	; 0x205a <GlobalInterrupt_Enable>
    SET_BIT(MCUCR, MCUCR_ISC00);
    SET_BIT(MCUCR, MCUCR_ISC01);
    // TODO
#elif EXT_INTERRUPT_INT0_SENSE == EXT_INTERRUPT_ON_CHANGE
    /* Any logical change on INT0 generates an interrupt request. */
    SET_BIT(MCUCR, MCUCR_ISC00);
    1f86:	a5 e5       	ldi	r26, 0x55	; 85
    1f88:	b0 e0       	ldi	r27, 0x00	; 0
    1f8a:	e5 e5       	ldi	r30, 0x55	; 85
    1f8c:	f0 e0       	ldi	r31, 0x00	; 0
    1f8e:	80 81       	ld	r24, Z
    1f90:	81 60       	ori	r24, 0x01	; 1
    1f92:	8c 93       	st	X, r24
    CLR_BIT(MCUCR, MCUCR_ISC01);
    1f94:	a5 e5       	ldi	r26, 0x55	; 85
    1f96:	b0 e0       	ldi	r27, 0x00	; 0
    1f98:	e5 e5       	ldi	r30, 0x55	; 85
    1f9a:	f0 e0       	ldi	r31, 0x00	; 0
    1f9c:	80 81       	ld	r24, Z
    1f9e:	8d 7f       	andi	r24, 0xFD	; 253
    1fa0:	8c 93       	st	X, r24
    /*************************** Interrupt 1 Init ***************************/

#ifdef EXT_INTERRUPT_INT1
    /* Interrupt Enable */
#if EXT_INTERRUPT_INT1_INT_ENABLE == EXT_INTERRUPT_ENABLE
    SET_BIT(GICR, GICR_INT1); // External Interrupt Request 1 Enable
    1fa2:	ab e5       	ldi	r26, 0x5B	; 91
    1fa4:	b0 e0       	ldi	r27, 0x00	; 0
    1fa6:	eb e5       	ldi	r30, 0x5B	; 91
    1fa8:	f0 e0       	ldi	r31, 0x00	; 0
    1faa:	80 81       	ld	r24, Z
    1fac:	80 68       	ori	r24, 0x80	; 128
    1fae:	8c 93       	st	X, r24
#elif EXT_INTERRUPT_INT1_SENSE == EXT_INTERRUPT_RISING_EDGE
    SET_BIT(MCUCR, MCUCR_ISC10);
    SET_BIT(MCUCR, MCUCR_ISC11);
    // TODO
#elif EXT_INTERRUPT_INT1_SENSE == EXT_INTERRUPT_ON_CHANGE
    SET_BIT(MCUCR, MCUCR_ISC10);
    1fb0:	a5 e5       	ldi	r26, 0x55	; 85
    1fb2:	b0 e0       	ldi	r27, 0x00	; 0
    1fb4:	e5 e5       	ldi	r30, 0x55	; 85
    1fb6:	f0 e0       	ldi	r31, 0x00	; 0
    1fb8:	80 81       	ld	r24, Z
    1fba:	84 60       	ori	r24, 0x04	; 4
    1fbc:	8c 93       	st	X, r24
    CLR_BIT(MCUCR, MCUCR_ISC11);
    1fbe:	a5 e5       	ldi	r26, 0x55	; 85
    1fc0:	b0 e0       	ldi	r27, 0x00	; 0
    1fc2:	e5 e5       	ldi	r30, 0x55	; 85
    1fc4:	f0 e0       	ldi	r31, 0x00	; 0
    1fc6:	80 81       	ld	r24, Z
    1fc8:	87 7f       	andi	r24, 0xF7	; 247
    1fca:	8c 93       	st	X, r24

    /*************************** Interrupt 2 Init ***************************/
#ifdef EXT_INTERRUPT_INT2
    /* Interrupt Enable */
#if EXT_INTERRUPT_INT2_INT_ENABLE == EXT_INTERRUPT_ENABLE
    SET_BIT(GICR, GICR_INT2); // External Interrupt Request 1 Enable
    1fcc:	ab e5       	ldi	r26, 0x5B	; 91
    1fce:	b0 e0       	ldi	r27, 0x00	; 0
    1fd0:	eb e5       	ldi	r30, 0x5B	; 91
    1fd2:	f0 e0       	ldi	r31, 0x00	; 0
    1fd4:	80 81       	ld	r24, Z
    1fd6:	80 62       	ori	r24, 0x20	; 32
    1fd8:	8c 93       	st	X, r24
    // TODO
#endif

    /* Sense Control */
#if EXT_INTERRUPT_INT2_SENSE == EXT_INTERRUPT_FALLING_EDGE
    CLR_BIT(MCUCR, MCUCSR_ISC2);
    1fda:	a5 e5       	ldi	r26, 0x55	; 85
    1fdc:	b0 e0       	ldi	r27, 0x00	; 0
    1fde:	e5 e5       	ldi	r30, 0x55	; 85
    1fe0:	f0 e0       	ldi	r31, 0x00	; 0
    1fe2:	80 81       	ld	r24, Z
    1fe4:	8f 7b       	andi	r24, 0xBF	; 191
    1fe6:	8c 93       	st	X, r24
#endif
#endif



}
    1fe8:	cf 91       	pop	r28
    1fea:	df 91       	pop	r29
    1fec:	08 95       	ret

00001fee <ExtInterrupt_SetINT0Callback>:

void ExtInterrupt_SetINT0Callback (void (*callback) (void)) {
    1fee:	df 93       	push	r29
    1ff0:	cf 93       	push	r28
    1ff2:	00 d0       	rcall	.+0      	; 0x1ff4 <ExtInterrupt_SetINT0Callback+0x6>
    1ff4:	cd b7       	in	r28, 0x3d	; 61
    1ff6:	de b7       	in	r29, 0x3e	; 62
    1ff8:	9a 83       	std	Y+2, r25	; 0x02
    1ffa:	89 83       	std	Y+1, r24	; 0x01
    ExtInterrupt_INT0Callback = callback;
    1ffc:	89 81       	ldd	r24, Y+1	; 0x01
    1ffe:	9a 81       	ldd	r25, Y+2	; 0x02
    2000:	90 93 8d 01 	sts	0x018D, r25
    2004:	80 93 8c 01 	sts	0x018C, r24
}
    2008:	0f 90       	pop	r0
    200a:	0f 90       	pop	r0
    200c:	cf 91       	pop	r28
    200e:	df 91       	pop	r29
    2010:	08 95       	ret

00002012 <ExtInterrupt_SetINT1Callback>:

void ExtInterrupt_SetINT1Callback (void (*callback) (void)) {
    2012:	df 93       	push	r29
    2014:	cf 93       	push	r28
    2016:	00 d0       	rcall	.+0      	; 0x2018 <ExtInterrupt_SetINT1Callback+0x6>
    2018:	cd b7       	in	r28, 0x3d	; 61
    201a:	de b7       	in	r29, 0x3e	; 62
    201c:	9a 83       	std	Y+2, r25	; 0x02
    201e:	89 83       	std	Y+1, r24	; 0x01
    ExtInterrupt_INT1Callback = callback;
    2020:	89 81       	ldd	r24, Y+1	; 0x01
    2022:	9a 81       	ldd	r25, Y+2	; 0x02
    2024:	90 93 8b 01 	sts	0x018B, r25
    2028:	80 93 8a 01 	sts	0x018A, r24
   // TODO
}
    202c:	0f 90       	pop	r0
    202e:	0f 90       	pop	r0
    2030:	cf 91       	pop	r28
    2032:	df 91       	pop	r29
    2034:	08 95       	ret

00002036 <ExtInterrupt_SetINT2Callback>:

void ExtInterrupt_SetINT2Callback (void (*callback) (void)) {
    2036:	df 93       	push	r29
    2038:	cf 93       	push	r28
    203a:	00 d0       	rcall	.+0      	; 0x203c <ExtInterrupt_SetINT2Callback+0x6>
    203c:	cd b7       	in	r28, 0x3d	; 61
    203e:	de b7       	in	r29, 0x3e	; 62
    2040:	9a 83       	std	Y+2, r25	; 0x02
    2042:	89 83       	std	Y+1, r24	; 0x01
    ExtInterrupt_INT2Callback = callback;
    2044:	89 81       	ldd	r24, Y+1	; 0x01
    2046:	9a 81       	ldd	r25, Y+2	; 0x02
    2048:	90 93 8f 01 	sts	0x018F, r25
    204c:	80 93 8e 01 	sts	0x018E, r24
   // TODO
}
    2050:	0f 90       	pop	r0
    2052:	0f 90       	pop	r0
    2054:	cf 91       	pop	r28
    2056:	df 91       	pop	r29
    2058:	08 95       	ret

0000205a <GlobalInterrupt_Enable>:
#include "std_types.h"
#include "macros.h"
#include "Registers.h"
#include "GlobalInterrupt.h"

void GlobalInterrupt_Enable(void) {
    205a:	df 93       	push	r29
    205c:	cf 93       	push	r28
    205e:	cd b7       	in	r28, 0x3d	; 61
    2060:	de b7       	in	r29, 0x3e	; 62
	SET_BIT(SREG, SREG_I);
    2062:	af e5       	ldi	r26, 0x5F	; 95
    2064:	b0 e0       	ldi	r27, 0x00	; 0
    2066:	ef e5       	ldi	r30, 0x5F	; 95
    2068:	f0 e0       	ldi	r31, 0x00	; 0
    206a:	80 81       	ld	r24, Z
    206c:	80 68       	ori	r24, 0x80	; 128
    206e:	8c 93       	st	X, r24
}
    2070:	cf 91       	pop	r28
    2072:	df 91       	pop	r29
    2074:	08 95       	ret

00002076 <GlobalInterrupt_Disable>:

void GlobalInterrupt_Disable(void) {
    2076:	df 93       	push	r29
    2078:	cf 93       	push	r28
    207a:	cd b7       	in	r28, 0x3d	; 61
    207c:	de b7       	in	r29, 0x3e	; 62
	CLR_BIT(SREG, SREG_I);
    207e:	af e5       	ldi	r26, 0x5F	; 95
    2080:	b0 e0       	ldi	r27, 0x00	; 0
    2082:	ef e5       	ldi	r30, 0x5F	; 95
    2084:	f0 e0       	ldi	r31, 0x00	; 0
    2086:	80 81       	ld	r24, Z
    2088:	8f 77       	andi	r24, 0x7F	; 127
    208a:	8c 93       	st	X, r24
}
    208c:	cf 91       	pop	r28
    208e:	df 91       	pop	r29
    2090:	08 95       	ret

00002092 <__vector_10>:
void (*Gpt_Timer2_Callback_Ctc)(void);
void (*Gpt_Timer2_Callback_Normal)(void);

/************ ISR ************/
ISR(VECTOR_TIMER0_CTC)
{
    2092:	1f 92       	push	r1
    2094:	0f 92       	push	r0
    2096:	0f b6       	in	r0, 0x3f	; 63
    2098:	0f 92       	push	r0
    209a:	11 24       	eor	r1, r1
    209c:	2f 93       	push	r18
    209e:	3f 93       	push	r19
    20a0:	4f 93       	push	r20
    20a2:	5f 93       	push	r21
    20a4:	6f 93       	push	r22
    20a6:	7f 93       	push	r23
    20a8:	8f 93       	push	r24
    20aa:	9f 93       	push	r25
    20ac:	af 93       	push	r26
    20ae:	bf 93       	push	r27
    20b0:	ef 93       	push	r30
    20b2:	ff 93       	push	r31
    20b4:	df 93       	push	r29
    20b6:	cf 93       	push	r28
    20b8:	cd b7       	in	r28, 0x3d	; 61
    20ba:	de b7       	in	r29, 0x3e	; 62
    Gpt_Timer0_Callback_Ctc();
    20bc:	e0 91 90 01 	lds	r30, 0x0190
    20c0:	f0 91 91 01 	lds	r31, 0x0191
    20c4:	09 95       	icall
}
    20c6:	cf 91       	pop	r28
    20c8:	df 91       	pop	r29
    20ca:	ff 91       	pop	r31
    20cc:	ef 91       	pop	r30
    20ce:	bf 91       	pop	r27
    20d0:	af 91       	pop	r26
    20d2:	9f 91       	pop	r25
    20d4:	8f 91       	pop	r24
    20d6:	7f 91       	pop	r23
    20d8:	6f 91       	pop	r22
    20da:	5f 91       	pop	r21
    20dc:	4f 91       	pop	r20
    20de:	3f 91       	pop	r19
    20e0:	2f 91       	pop	r18
    20e2:	0f 90       	pop	r0
    20e4:	0f be       	out	0x3f, r0	; 63
    20e6:	0f 90       	pop	r0
    20e8:	1f 90       	pop	r1
    20ea:	18 95       	reti

000020ec <__vector_11>:
ISR(VECTOR_TIMER0_NORM)
{
    20ec:	1f 92       	push	r1
    20ee:	0f 92       	push	r0
    20f0:	0f b6       	in	r0, 0x3f	; 63
    20f2:	0f 92       	push	r0
    20f4:	11 24       	eor	r1, r1
    20f6:	2f 93       	push	r18
    20f8:	3f 93       	push	r19
    20fa:	4f 93       	push	r20
    20fc:	5f 93       	push	r21
    20fe:	6f 93       	push	r22
    2100:	7f 93       	push	r23
    2102:	8f 93       	push	r24
    2104:	9f 93       	push	r25
    2106:	af 93       	push	r26
    2108:	bf 93       	push	r27
    210a:	ef 93       	push	r30
    210c:	ff 93       	push	r31
    210e:	df 93       	push	r29
    2110:	cf 93       	push	r28
    2112:	cd b7       	in	r28, 0x3d	; 61
    2114:	de b7       	in	r29, 0x3e	; 62
    Gpt_Timer0_Callback_Normal();
    2116:	e0 91 9a 01 	lds	r30, 0x019A
    211a:	f0 91 9b 01 	lds	r31, 0x019B
    211e:	09 95       	icall
}
    2120:	cf 91       	pop	r28
    2122:	df 91       	pop	r29
    2124:	ff 91       	pop	r31
    2126:	ef 91       	pop	r30
    2128:	bf 91       	pop	r27
    212a:	af 91       	pop	r26
    212c:	9f 91       	pop	r25
    212e:	8f 91       	pop	r24
    2130:	7f 91       	pop	r23
    2132:	6f 91       	pop	r22
    2134:	5f 91       	pop	r21
    2136:	4f 91       	pop	r20
    2138:	3f 91       	pop	r19
    213a:	2f 91       	pop	r18
    213c:	0f 90       	pop	r0
    213e:	0f be       	out	0x3f, r0	; 63
    2140:	0f 90       	pop	r0
    2142:	1f 90       	pop	r1
    2144:	18 95       	reti

00002146 <__vector_7>:

ISR(VECTOR_TIMER1A_CTC)
{
    2146:	1f 92       	push	r1
    2148:	0f 92       	push	r0
    214a:	0f b6       	in	r0, 0x3f	; 63
    214c:	0f 92       	push	r0
    214e:	11 24       	eor	r1, r1
    2150:	2f 93       	push	r18
    2152:	3f 93       	push	r19
    2154:	4f 93       	push	r20
    2156:	5f 93       	push	r21
    2158:	6f 93       	push	r22
    215a:	7f 93       	push	r23
    215c:	8f 93       	push	r24
    215e:	9f 93       	push	r25
    2160:	af 93       	push	r26
    2162:	bf 93       	push	r27
    2164:	ef 93       	push	r30
    2166:	ff 93       	push	r31
    2168:	df 93       	push	r29
    216a:	cf 93       	push	r28
    216c:	cd b7       	in	r28, 0x3d	; 61
    216e:	de b7       	in	r29, 0x3e	; 62
    Gpt_Timer1A_Callback_Ctc();
    2170:	e0 91 98 01 	lds	r30, 0x0198
    2174:	f0 91 99 01 	lds	r31, 0x0199
    2178:	09 95       	icall
}
    217a:	cf 91       	pop	r28
    217c:	df 91       	pop	r29
    217e:	ff 91       	pop	r31
    2180:	ef 91       	pop	r30
    2182:	bf 91       	pop	r27
    2184:	af 91       	pop	r26
    2186:	9f 91       	pop	r25
    2188:	8f 91       	pop	r24
    218a:	7f 91       	pop	r23
    218c:	6f 91       	pop	r22
    218e:	5f 91       	pop	r21
    2190:	4f 91       	pop	r20
    2192:	3f 91       	pop	r19
    2194:	2f 91       	pop	r18
    2196:	0f 90       	pop	r0
    2198:	0f be       	out	0x3f, r0	; 63
    219a:	0f 90       	pop	r0
    219c:	1f 90       	pop	r1
    219e:	18 95       	reti

000021a0 <__vector_9>:
ISR(VECTOR_TIMER1_NORM)
{
    21a0:	1f 92       	push	r1
    21a2:	0f 92       	push	r0
    21a4:	0f b6       	in	r0, 0x3f	; 63
    21a6:	0f 92       	push	r0
    21a8:	11 24       	eor	r1, r1
    21aa:	2f 93       	push	r18
    21ac:	3f 93       	push	r19
    21ae:	4f 93       	push	r20
    21b0:	5f 93       	push	r21
    21b2:	6f 93       	push	r22
    21b4:	7f 93       	push	r23
    21b6:	8f 93       	push	r24
    21b8:	9f 93       	push	r25
    21ba:	af 93       	push	r26
    21bc:	bf 93       	push	r27
    21be:	ef 93       	push	r30
    21c0:	ff 93       	push	r31
    21c2:	df 93       	push	r29
    21c4:	cf 93       	push	r28
    21c6:	cd b7       	in	r28, 0x3d	; 61
    21c8:	de b7       	in	r29, 0x3e	; 62
    Gpt_Timer1_Callback_Normal();
    21ca:	e0 91 9c 01 	lds	r30, 0x019C
    21ce:	f0 91 9d 01 	lds	r31, 0x019D
    21d2:	09 95       	icall
}
    21d4:	cf 91       	pop	r28
    21d6:	df 91       	pop	r29
    21d8:	ff 91       	pop	r31
    21da:	ef 91       	pop	r30
    21dc:	bf 91       	pop	r27
    21de:	af 91       	pop	r26
    21e0:	9f 91       	pop	r25
    21e2:	8f 91       	pop	r24
    21e4:	7f 91       	pop	r23
    21e6:	6f 91       	pop	r22
    21e8:	5f 91       	pop	r21
    21ea:	4f 91       	pop	r20
    21ec:	3f 91       	pop	r19
    21ee:	2f 91       	pop	r18
    21f0:	0f 90       	pop	r0
    21f2:	0f be       	out	0x3f, r0	; 63
    21f4:	0f 90       	pop	r0
    21f6:	1f 90       	pop	r1
    21f8:	18 95       	reti

000021fa <__vector_8>:

ISR(VECTOR_TIMER1B_CTC)
{
    21fa:	1f 92       	push	r1
    21fc:	0f 92       	push	r0
    21fe:	0f b6       	in	r0, 0x3f	; 63
    2200:	0f 92       	push	r0
    2202:	11 24       	eor	r1, r1
    2204:	2f 93       	push	r18
    2206:	3f 93       	push	r19
    2208:	4f 93       	push	r20
    220a:	5f 93       	push	r21
    220c:	6f 93       	push	r22
    220e:	7f 93       	push	r23
    2210:	8f 93       	push	r24
    2212:	9f 93       	push	r25
    2214:	af 93       	push	r26
    2216:	bf 93       	push	r27
    2218:	ef 93       	push	r30
    221a:	ff 93       	push	r31
    221c:	df 93       	push	r29
    221e:	cf 93       	push	r28
    2220:	cd b7       	in	r28, 0x3d	; 61
    2222:	de b7       	in	r29, 0x3e	; 62
    Gpt_Timer1B_Callback_Ctc();
    2224:	e0 91 94 01 	lds	r30, 0x0194
    2228:	f0 91 95 01 	lds	r31, 0x0195
    222c:	09 95       	icall
}
    222e:	cf 91       	pop	r28
    2230:	df 91       	pop	r29
    2232:	ff 91       	pop	r31
    2234:	ef 91       	pop	r30
    2236:	bf 91       	pop	r27
    2238:	af 91       	pop	r26
    223a:	9f 91       	pop	r25
    223c:	8f 91       	pop	r24
    223e:	7f 91       	pop	r23
    2240:	6f 91       	pop	r22
    2242:	5f 91       	pop	r21
    2244:	4f 91       	pop	r20
    2246:	3f 91       	pop	r19
    2248:	2f 91       	pop	r18
    224a:	0f 90       	pop	r0
    224c:	0f be       	out	0x3f, r0	; 63
    224e:	0f 90       	pop	r0
    2250:	1f 90       	pop	r1
    2252:	18 95       	reti

00002254 <__vector_4>:


ISR(VECTOR_TIMER2_CTC)
{
    2254:	1f 92       	push	r1
    2256:	0f 92       	push	r0
    2258:	0f b6       	in	r0, 0x3f	; 63
    225a:	0f 92       	push	r0
    225c:	11 24       	eor	r1, r1
    225e:	2f 93       	push	r18
    2260:	3f 93       	push	r19
    2262:	4f 93       	push	r20
    2264:	5f 93       	push	r21
    2266:	6f 93       	push	r22
    2268:	7f 93       	push	r23
    226a:	8f 93       	push	r24
    226c:	9f 93       	push	r25
    226e:	af 93       	push	r26
    2270:	bf 93       	push	r27
    2272:	ef 93       	push	r30
    2274:	ff 93       	push	r31
    2276:	df 93       	push	r29
    2278:	cf 93       	push	r28
    227a:	cd b7       	in	r28, 0x3d	; 61
    227c:	de b7       	in	r29, 0x3e	; 62
    Gpt_Timer2_Callback_Ctc();
    227e:	e0 91 92 01 	lds	r30, 0x0192
    2282:	f0 91 93 01 	lds	r31, 0x0193
    2286:	09 95       	icall
}
    2288:	cf 91       	pop	r28
    228a:	df 91       	pop	r29
    228c:	ff 91       	pop	r31
    228e:	ef 91       	pop	r30
    2290:	bf 91       	pop	r27
    2292:	af 91       	pop	r26
    2294:	9f 91       	pop	r25
    2296:	8f 91       	pop	r24
    2298:	7f 91       	pop	r23
    229a:	6f 91       	pop	r22
    229c:	5f 91       	pop	r21
    229e:	4f 91       	pop	r20
    22a0:	3f 91       	pop	r19
    22a2:	2f 91       	pop	r18
    22a4:	0f 90       	pop	r0
    22a6:	0f be       	out	0x3f, r0	; 63
    22a8:	0f 90       	pop	r0
    22aa:	1f 90       	pop	r1
    22ac:	18 95       	reti

000022ae <__vector_5>:
ISR(VECTOR_TIMER2_NORM)
{
    22ae:	1f 92       	push	r1
    22b0:	0f 92       	push	r0
    22b2:	0f b6       	in	r0, 0x3f	; 63
    22b4:	0f 92       	push	r0
    22b6:	11 24       	eor	r1, r1
    22b8:	2f 93       	push	r18
    22ba:	3f 93       	push	r19
    22bc:	4f 93       	push	r20
    22be:	5f 93       	push	r21
    22c0:	6f 93       	push	r22
    22c2:	7f 93       	push	r23
    22c4:	8f 93       	push	r24
    22c6:	9f 93       	push	r25
    22c8:	af 93       	push	r26
    22ca:	bf 93       	push	r27
    22cc:	ef 93       	push	r30
    22ce:	ff 93       	push	r31
    22d0:	df 93       	push	r29
    22d2:	cf 93       	push	r28
    22d4:	cd b7       	in	r28, 0x3d	; 61
    22d6:	de b7       	in	r29, 0x3e	; 62
    Gpt_Timer2_Callback_Normal();
    22d8:	e0 91 96 01 	lds	r30, 0x0196
    22dc:	f0 91 97 01 	lds	r31, 0x0197
    22e0:	09 95       	icall
}
    22e2:	cf 91       	pop	r28
    22e4:	df 91       	pop	r29
    22e6:	ff 91       	pop	r31
    22e8:	ef 91       	pop	r30
    22ea:	bf 91       	pop	r27
    22ec:	af 91       	pop	r26
    22ee:	9f 91       	pop	r25
    22f0:	8f 91       	pop	r24
    22f2:	7f 91       	pop	r23
    22f4:	6f 91       	pop	r22
    22f6:	5f 91       	pop	r21
    22f8:	4f 91       	pop	r20
    22fa:	3f 91       	pop	r19
    22fc:	2f 91       	pop	r18
    22fe:	0f 90       	pop	r0
    2300:	0f be       	out	0x3f, r0	; 63
    2302:	0f 90       	pop	r0
    2304:	1f 90       	pop	r1
    2306:	18 95       	reti

00002308 <Gpt_Init>:



Gpt_ReturnType Gpt_Init(Gpt_ConfigType *config)
{
    2308:	df 93       	push	r29
    230a:	cf 93       	push	r28
    230c:	cd b7       	in	r28, 0x3d	; 61
    230e:	de b7       	in	r29, 0x3e	; 62
    2310:	65 97       	sbiw	r28, 0x15	; 21
    2312:	0f b6       	in	r0, 0x3f	; 63
    2314:	f8 94       	cli
    2316:	de bf       	out	0x3e, r29	; 62
    2318:	0f be       	out	0x3f, r0	; 63
    231a:	cd bf       	out	0x3d, r28	; 61
    231c:	9b 83       	std	Y+3, r25	; 0x03
    231e:	8a 83       	std	Y+2, r24	; 0x02
    Gpt_ReturnType returnValue = GPT_OK;
    2320:	81 e0       	ldi	r24, 0x01	; 1
    2322:	89 83       	std	Y+1, r24	; 0x01

    switch (config->channel)
    2324:	ea 81       	ldd	r30, Y+2	; 0x02
    2326:	fb 81       	ldd	r31, Y+3	; 0x03
    2328:	80 81       	ld	r24, Z
    232a:	28 2f       	mov	r18, r24
    232c:	30 e0       	ldi	r19, 0x00	; 0
    232e:	3d 8b       	std	Y+21, r19	; 0x15
    2330:	2c 8b       	std	Y+20, r18	; 0x14
    2332:	8c 89       	ldd	r24, Y+20	; 0x14
    2334:	9d 89       	ldd	r25, Y+21	; 0x15
    2336:	81 30       	cpi	r24, 0x01	; 1
    2338:	91 05       	cpc	r25, r1
    233a:	09 f4       	brne	.+2      	; 0x233e <Gpt_Init+0x36>
    233c:	ba c1       	rjmp	.+884    	; 0x26b2 <Gpt_Init+0x3aa>
    233e:	2c 89       	ldd	r18, Y+20	; 0x14
    2340:	3d 89       	ldd	r19, Y+21	; 0x15
    2342:	22 30       	cpi	r18, 0x02	; 2
    2344:	31 05       	cpc	r19, r1
    2346:	2c f4       	brge	.+10     	; 0x2352 <Gpt_Init+0x4a>
    2348:	8c 89       	ldd	r24, Y+20	; 0x14
    234a:	9d 89       	ldd	r25, Y+21	; 0x15
    234c:	00 97       	sbiw	r24, 0x00	; 0
    234e:	71 f0       	breq	.+28     	; 0x236c <Gpt_Init+0x64>
    2350:	74 c6       	rjmp	.+3304   	; 0x303a <Gpt_Init+0xd32>
    2352:	2c 89       	ldd	r18, Y+20	; 0x14
    2354:	3d 89       	ldd	r19, Y+21	; 0x15
    2356:	22 30       	cpi	r18, 0x02	; 2
    2358:	31 05       	cpc	r19, r1
    235a:	09 f4       	brne	.+2      	; 0x235e <Gpt_Init+0x56>
    235c:	63 c3       	rjmp	.+1734   	; 0x2a24 <Gpt_Init+0x71c>
    235e:	8c 89       	ldd	r24, Y+20	; 0x14
    2360:	9d 89       	ldd	r25, Y+21	; 0x15
    2362:	83 30       	cpi	r24, 0x03	; 3
    2364:	91 05       	cpc	r25, r1
    2366:	09 f4       	brne	.+2      	; 0x236a <Gpt_Init+0x62>
    2368:	f4 c4       	rjmp	.+2536   	; 0x2d52 <Gpt_Init+0xa4a>
    236a:	67 c6       	rjmp	.+3278   	; 0x303a <Gpt_Init+0xd32>
    {

    case GPT_CHANNEL_TIMER0:
        /*Waveform Generation Mode*/
        if (config->mode == GPT_MODE_NORMAL)
    236c:	ea 81       	ldd	r30, Y+2	; 0x02
    236e:	fb 81       	ldd	r31, Y+3	; 0x03
    2370:	81 81       	ldd	r24, Z+1	; 0x01
    2372:	88 23       	and	r24, r24
    2374:	79 f4       	brne	.+30     	; 0x2394 <Gpt_Init+0x8c>
        {
            CLR_BIT(TCCR0, TCCR0_WGM00);
    2376:	a3 e5       	ldi	r26, 0x53	; 83
    2378:	b0 e0       	ldi	r27, 0x00	; 0
    237a:	e3 e5       	ldi	r30, 0x53	; 83
    237c:	f0 e0       	ldi	r31, 0x00	; 0
    237e:	80 81       	ld	r24, Z
    2380:	8f 7b       	andi	r24, 0xBF	; 191
    2382:	8c 93       	st	X, r24
            CLR_BIT(TCCR0, TCCR0_WGM01);
    2384:	a3 e5       	ldi	r26, 0x53	; 83
    2386:	b0 e0       	ldi	r27, 0x00	; 0
    2388:	e3 e5       	ldi	r30, 0x53	; 83
    238a:	f0 e0       	ldi	r31, 0x00	; 0
    238c:	80 81       	ld	r24, Z
    238e:	87 7f       	andi	r24, 0xF7	; 247
    2390:	8c 93       	st	X, r24
    2392:	3d c0       	rjmp	.+122    	; 0x240e <Gpt_Init+0x106>
        }
        else if (config->mode == GPT_MODE_CTC)
    2394:	ea 81       	ldd	r30, Y+2	; 0x02
    2396:	fb 81       	ldd	r31, Y+3	; 0x03
    2398:	81 81       	ldd	r24, Z+1	; 0x01
    239a:	81 30       	cpi	r24, 0x01	; 1
    239c:	79 f4       	brne	.+30     	; 0x23bc <Gpt_Init+0xb4>
        {
            CLR_BIT(TCCR0, TCCR0_WGM00);
    239e:	a3 e5       	ldi	r26, 0x53	; 83
    23a0:	b0 e0       	ldi	r27, 0x00	; 0
    23a2:	e3 e5       	ldi	r30, 0x53	; 83
    23a4:	f0 e0       	ldi	r31, 0x00	; 0
    23a6:	80 81       	ld	r24, Z
    23a8:	8f 7b       	andi	r24, 0xBF	; 191
    23aa:	8c 93       	st	X, r24
            SET_BIT(TCCR0, TCCR0_WGM01);
    23ac:	a3 e5       	ldi	r26, 0x53	; 83
    23ae:	b0 e0       	ldi	r27, 0x00	; 0
    23b0:	e3 e5       	ldi	r30, 0x53	; 83
    23b2:	f0 e0       	ldi	r31, 0x00	; 0
    23b4:	80 81       	ld	r24, Z
    23b6:	88 60       	ori	r24, 0x08	; 8
    23b8:	8c 93       	st	X, r24
    23ba:	29 c0       	rjmp	.+82     	; 0x240e <Gpt_Init+0x106>
        }
        else if (config->mode == SPT_MODE_Fast_PWM)
    23bc:	ea 81       	ldd	r30, Y+2	; 0x02
    23be:	fb 81       	ldd	r31, Y+3	; 0x03
    23c0:	81 81       	ldd	r24, Z+1	; 0x01
    23c2:	83 30       	cpi	r24, 0x03	; 3
    23c4:	79 f4       	brne	.+30     	; 0x23e4 <Gpt_Init+0xdc>
        {
            SET_BIT(TCCR0, TCCR0_WGM00);
    23c6:	a3 e5       	ldi	r26, 0x53	; 83
    23c8:	b0 e0       	ldi	r27, 0x00	; 0
    23ca:	e3 e5       	ldi	r30, 0x53	; 83
    23cc:	f0 e0       	ldi	r31, 0x00	; 0
    23ce:	80 81       	ld	r24, Z
    23d0:	80 64       	ori	r24, 0x40	; 64
    23d2:	8c 93       	st	X, r24
            CLR_BIT(TCCR0, TCCR0_WGM01);
    23d4:	a3 e5       	ldi	r26, 0x53	; 83
    23d6:	b0 e0       	ldi	r27, 0x00	; 0
    23d8:	e3 e5       	ldi	r30, 0x53	; 83
    23da:	f0 e0       	ldi	r31, 0x00	; 0
    23dc:	80 81       	ld	r24, Z
    23de:	87 7f       	andi	r24, 0xF7	; 247
    23e0:	8c 93       	st	X, r24
    23e2:	15 c0       	rjmp	.+42     	; 0x240e <Gpt_Init+0x106>
        }
        else if (config->mode == SPT_MODE_Fast_PWM)
    23e4:	ea 81       	ldd	r30, Y+2	; 0x02
    23e6:	fb 81       	ldd	r31, Y+3	; 0x03
    23e8:	81 81       	ldd	r24, Z+1	; 0x01
    23ea:	83 30       	cpi	r24, 0x03	; 3
    23ec:	79 f4       	brne	.+30     	; 0x240c <Gpt_Init+0x104>
        {
            SET_BIT(TCCR0, TCCR0_WGM00);
    23ee:	a3 e5       	ldi	r26, 0x53	; 83
    23f0:	b0 e0       	ldi	r27, 0x00	; 0
    23f2:	e3 e5       	ldi	r30, 0x53	; 83
    23f4:	f0 e0       	ldi	r31, 0x00	; 0
    23f6:	80 81       	ld	r24, Z
    23f8:	80 64       	ori	r24, 0x40	; 64
    23fa:	8c 93       	st	X, r24
            SET_BIT(TCCR0, TCCR0_WGM01);
    23fc:	a3 e5       	ldi	r26, 0x53	; 83
    23fe:	b0 e0       	ldi	r27, 0x00	; 0
    2400:	e3 e5       	ldi	r30, 0x53	; 83
    2402:	f0 e0       	ldi	r31, 0x00	; 0
    2404:	80 81       	ld	r24, Z
    2406:	88 60       	ori	r24, 0x08	; 8
    2408:	8c 93       	st	X, r24
    240a:	01 c0       	rjmp	.+2      	; 0x240e <Gpt_Init+0x106>
        }
        else
        {
            returnValue = GPT_ERROR;
    240c:	19 82       	std	Y+1, r1	; 0x01
        }

        /*Compare Match Output Mode*/
        switch (config->output)
    240e:	ea 81       	ldd	r30, Y+2	; 0x02
    2410:	fb 81       	ldd	r31, Y+3	; 0x03
    2412:	82 81       	ldd	r24, Z+2	; 0x02
    2414:	28 2f       	mov	r18, r24
    2416:	30 e0       	ldi	r19, 0x00	; 0
    2418:	3b 8b       	std	Y+19, r19	; 0x13
    241a:	2a 8b       	std	Y+18, r18	; 0x12
    241c:	8a 89       	ldd	r24, Y+18	; 0x12
    241e:	9b 89       	ldd	r25, Y+19	; 0x13
    2420:	81 30       	cpi	r24, 0x01	; 1
    2422:	91 05       	cpc	r25, r1
    2424:	21 f1       	breq	.+72     	; 0x246e <Gpt_Init+0x166>
    2426:	2a 89       	ldd	r18, Y+18	; 0x12
    2428:	3b 89       	ldd	r19, Y+19	; 0x13
    242a:	22 30       	cpi	r18, 0x02	; 2
    242c:	31 05       	cpc	r19, r1
    242e:	2c f4       	brge	.+10     	; 0x243a <Gpt_Init+0x132>
    2430:	8a 89       	ldd	r24, Y+18	; 0x12
    2432:	9b 89       	ldd	r25, Y+19	; 0x13
    2434:	00 97       	sbiw	r24, 0x00	; 0
    2436:	61 f0       	breq	.+24     	; 0x2450 <Gpt_Init+0x148>
    2438:	47 c0       	rjmp	.+142    	; 0x24c8 <Gpt_Init+0x1c0>
    243a:	2a 89       	ldd	r18, Y+18	; 0x12
    243c:	3b 89       	ldd	r19, Y+19	; 0x13
    243e:	22 30       	cpi	r18, 0x02	; 2
    2440:	31 05       	cpc	r19, r1
    2442:	21 f1       	breq	.+72     	; 0x248c <Gpt_Init+0x184>
    2444:	8a 89       	ldd	r24, Y+18	; 0x12
    2446:	9b 89       	ldd	r25, Y+19	; 0x13
    2448:	83 30       	cpi	r24, 0x03	; 3
    244a:	91 05       	cpc	r25, r1
    244c:	71 f1       	breq	.+92     	; 0x24aa <Gpt_Init+0x1a2>
    244e:	3c c0       	rjmp	.+120    	; 0x24c8 <Gpt_Init+0x1c0>
        {
        case GPT_OUTPUT_NORMAL:
            CLR_BIT(TCCR0, TCCR0_COM00);
    2450:	a3 e5       	ldi	r26, 0x53	; 83
    2452:	b0 e0       	ldi	r27, 0x00	; 0
    2454:	e3 e5       	ldi	r30, 0x53	; 83
    2456:	f0 e0       	ldi	r31, 0x00	; 0
    2458:	80 81       	ld	r24, Z
    245a:	8f 7e       	andi	r24, 0xEF	; 239
    245c:	8c 93       	st	X, r24
            CLR_BIT(TCCR0, TCCR0_COM01);
    245e:	a3 e5       	ldi	r26, 0x53	; 83
    2460:	b0 e0       	ldi	r27, 0x00	; 0
    2462:	e3 e5       	ldi	r30, 0x53	; 83
    2464:	f0 e0       	ldi	r31, 0x00	; 0
    2466:	80 81       	ld	r24, Z
    2468:	8f 7d       	andi	r24, 0xDF	; 223
    246a:	8c 93       	st	X, r24
    246c:	2e c0       	rjmp	.+92     	; 0x24ca <Gpt_Init+0x1c2>
            break;
        case GPT_OUTPUT_TOGGLE:
            SET_BIT(TCCR0, TCCR0_COM00);
    246e:	a3 e5       	ldi	r26, 0x53	; 83
    2470:	b0 e0       	ldi	r27, 0x00	; 0
    2472:	e3 e5       	ldi	r30, 0x53	; 83
    2474:	f0 e0       	ldi	r31, 0x00	; 0
    2476:	80 81       	ld	r24, Z
    2478:	80 61       	ori	r24, 0x10	; 16
    247a:	8c 93       	st	X, r24
            CLR_BIT(TCCR0, TCCR0_COM01);
    247c:	a3 e5       	ldi	r26, 0x53	; 83
    247e:	b0 e0       	ldi	r27, 0x00	; 0
    2480:	e3 e5       	ldi	r30, 0x53	; 83
    2482:	f0 e0       	ldi	r31, 0x00	; 0
    2484:	80 81       	ld	r24, Z
    2486:	8f 7d       	andi	r24, 0xDF	; 223
    2488:	8c 93       	st	X, r24
    248a:	1f c0       	rjmp	.+62     	; 0x24ca <Gpt_Init+0x1c2>
            // TODO
            break;
        case GPT_OUTPUT_SET:
            SET_BIT(TCCR0, TCCR0_COM00);
    248c:	a3 e5       	ldi	r26, 0x53	; 83
    248e:	b0 e0       	ldi	r27, 0x00	; 0
    2490:	e3 e5       	ldi	r30, 0x53	; 83
    2492:	f0 e0       	ldi	r31, 0x00	; 0
    2494:	80 81       	ld	r24, Z
    2496:	80 61       	ori	r24, 0x10	; 16
    2498:	8c 93       	st	X, r24
            SET_BIT(TCCR0, TCCR0_COM01);
    249a:	a3 e5       	ldi	r26, 0x53	; 83
    249c:	b0 e0       	ldi	r27, 0x00	; 0
    249e:	e3 e5       	ldi	r30, 0x53	; 83
    24a0:	f0 e0       	ldi	r31, 0x00	; 0
    24a2:	80 81       	ld	r24, Z
    24a4:	80 62       	ori	r24, 0x20	; 32
    24a6:	8c 93       	st	X, r24
    24a8:	10 c0       	rjmp	.+32     	; 0x24ca <Gpt_Init+0x1c2>
            // TODO
            break;
        case GPT_OUTPUT_CLEAR:
            CLR_BIT(TCCR0, TCCR0_COM00);
    24aa:	a3 e5       	ldi	r26, 0x53	; 83
    24ac:	b0 e0       	ldi	r27, 0x00	; 0
    24ae:	e3 e5       	ldi	r30, 0x53	; 83
    24b0:	f0 e0       	ldi	r31, 0x00	; 0
    24b2:	80 81       	ld	r24, Z
    24b4:	8f 7e       	andi	r24, 0xEF	; 239
    24b6:	8c 93       	st	X, r24
            SET_BIT(TCCR0, TCCR0_COM01);
    24b8:	a3 e5       	ldi	r26, 0x53	; 83
    24ba:	b0 e0       	ldi	r27, 0x00	; 0
    24bc:	e3 e5       	ldi	r30, 0x53	; 83
    24be:	f0 e0       	ldi	r31, 0x00	; 0
    24c0:	80 81       	ld	r24, Z
    24c2:	80 62       	ori	r24, 0x20	; 32
    24c4:	8c 93       	st	X, r24
    24c6:	01 c0       	rjmp	.+2      	; 0x24ca <Gpt_Init+0x1c2>
            // TODO
            break;
        default:
            returnValue = GPT_ERROR;
    24c8:	19 82       	std	Y+1, r1	; 0x01
            break;
        }

        /*Clock Select*/
        switch (config->prescaler)
    24ca:	ea 81       	ldd	r30, Y+2	; 0x02
    24cc:	fb 81       	ldd	r31, Y+3	; 0x03
    24ce:	83 81       	ldd	r24, Z+3	; 0x03
    24d0:	28 2f       	mov	r18, r24
    24d2:	30 e0       	ldi	r19, 0x00	; 0
    24d4:	39 8b       	std	Y+17, r19	; 0x11
    24d6:	28 8b       	std	Y+16, r18	; 0x10
    24d8:	88 89       	ldd	r24, Y+16	; 0x10
    24da:	99 89       	ldd	r25, Y+17	; 0x11
    24dc:	84 30       	cpi	r24, 0x04	; 4
    24de:	91 05       	cpc	r25, r1
    24e0:	09 f4       	brne	.+2      	; 0x24e4 <Gpt_Init+0x1dc>
    24e2:	77 c0       	rjmp	.+238    	; 0x25d2 <Gpt_Init+0x2ca>
    24e4:	28 89       	ldd	r18, Y+16	; 0x10
    24e6:	39 89       	ldd	r19, Y+17	; 0x11
    24e8:	25 30       	cpi	r18, 0x05	; 5
    24ea:	31 05       	cpc	r19, r1
    24ec:	8c f4       	brge	.+34     	; 0x2510 <Gpt_Init+0x208>
    24ee:	88 89       	ldd	r24, Y+16	; 0x10
    24f0:	99 89       	ldd	r25, Y+17	; 0x11
    24f2:	81 30       	cpi	r24, 0x01	; 1
    24f4:	91 05       	cpc	r25, r1
    24f6:	09 f4       	brne	.+2      	; 0x24fa <Gpt_Init+0x1f2>
    24f8:	40 c0       	rjmp	.+128    	; 0x257a <Gpt_Init+0x272>
    24fa:	28 89       	ldd	r18, Y+16	; 0x10
    24fc:	39 89       	ldd	r19, Y+17	; 0x11
    24fe:	22 30       	cpi	r18, 0x02	; 2
    2500:	31 05       	cpc	r19, r1
    2502:	09 f4       	brne	.+2      	; 0x2506 <Gpt_Init+0x1fe>
    2504:	50 c0       	rjmp	.+160    	; 0x25a6 <Gpt_Init+0x29e>
    2506:	88 89       	ldd	r24, Y+16	; 0x10
    2508:	99 89       	ldd	r25, Y+17	; 0x11
    250a:	00 97       	sbiw	r24, 0x00	; 0
    250c:	01 f1       	breq	.+64     	; 0x254e <Gpt_Init+0x246>
    250e:	cf c0       	rjmp	.+414    	; 0x26ae <Gpt_Init+0x3a6>
    2510:	28 89       	ldd	r18, Y+16	; 0x10
    2512:	39 89       	ldd	r19, Y+17	; 0x11
    2514:	27 30       	cpi	r18, 0x07	; 7
    2516:	31 05       	cpc	r19, r1
    2518:	09 f4       	brne	.+2      	; 0x251c <Gpt_Init+0x214>
    251a:	87 c0       	rjmp	.+270    	; 0x262a <Gpt_Init+0x322>
    251c:	88 89       	ldd	r24, Y+16	; 0x10
    251e:	99 89       	ldd	r25, Y+17	; 0x11
    2520:	88 30       	cpi	r24, 0x08	; 8
    2522:	91 05       	cpc	r25, r1
    2524:	3c f4       	brge	.+14     	; 0x2534 <Gpt_Init+0x22c>
    2526:	28 89       	ldd	r18, Y+16	; 0x10
    2528:	39 89       	ldd	r19, Y+17	; 0x11
    252a:	26 30       	cpi	r18, 0x06	; 6
    252c:	31 05       	cpc	r19, r1
    252e:	09 f4       	brne	.+2      	; 0x2532 <Gpt_Init+0x22a>
    2530:	66 c0       	rjmp	.+204    	; 0x25fe <Gpt_Init+0x2f6>
    2532:	bd c0       	rjmp	.+378    	; 0x26ae <Gpt_Init+0x3a6>
    2534:	88 89       	ldd	r24, Y+16	; 0x10
    2536:	99 89       	ldd	r25, Y+17	; 0x11
    2538:	88 30       	cpi	r24, 0x08	; 8
    253a:	91 05       	cpc	r25, r1
    253c:	09 f4       	brne	.+2      	; 0x2540 <Gpt_Init+0x238>
    253e:	8b c0       	rjmp	.+278    	; 0x2656 <Gpt_Init+0x34e>
    2540:	28 89       	ldd	r18, Y+16	; 0x10
    2542:	39 89       	ldd	r19, Y+17	; 0x11
    2544:	29 30       	cpi	r18, 0x09	; 9
    2546:	31 05       	cpc	r19, r1
    2548:	09 f4       	brne	.+2      	; 0x254c <Gpt_Init+0x244>
    254a:	9b c0       	rjmp	.+310    	; 0x2682 <Gpt_Init+0x37a>
    254c:	b0 c0       	rjmp	.+352    	; 0x26ae <Gpt_Init+0x3a6>
        {
        case GPT_PRESCALER_0:
            CLR_BIT(TCCR0, TCCR0_CS00);
    254e:	a3 e5       	ldi	r26, 0x53	; 83
    2550:	b0 e0       	ldi	r27, 0x00	; 0
    2552:	e3 e5       	ldi	r30, 0x53	; 83
    2554:	f0 e0       	ldi	r31, 0x00	; 0
    2556:	80 81       	ld	r24, Z
    2558:	8e 7f       	andi	r24, 0xFE	; 254
    255a:	8c 93       	st	X, r24
            CLR_BIT(TCCR0, TCCR0_CS01);
    255c:	a3 e5       	ldi	r26, 0x53	; 83
    255e:	b0 e0       	ldi	r27, 0x00	; 0
    2560:	e3 e5       	ldi	r30, 0x53	; 83
    2562:	f0 e0       	ldi	r31, 0x00	; 0
    2564:	80 81       	ld	r24, Z
    2566:	8d 7f       	andi	r24, 0xFD	; 253
    2568:	8c 93       	st	X, r24
            CLR_BIT(TCCR0, TCCR0_CS02);
    256a:	a3 e5       	ldi	r26, 0x53	; 83
    256c:	b0 e0       	ldi	r27, 0x00	; 0
    256e:	e3 e5       	ldi	r30, 0x53	; 83
    2570:	f0 e0       	ldi	r31, 0x00	; 0
    2572:	80 81       	ld	r24, Z
    2574:	8b 7f       	andi	r24, 0xFB	; 251
    2576:	8c 93       	st	X, r24
    2578:	61 c5       	rjmp	.+2754   	; 0x303c <Gpt_Init+0xd34>
            break;
        case GPT_PRESCALER_1:
            SET_BIT(TCCR0, TCCR0_CS00);
    257a:	a3 e5       	ldi	r26, 0x53	; 83
    257c:	b0 e0       	ldi	r27, 0x00	; 0
    257e:	e3 e5       	ldi	r30, 0x53	; 83
    2580:	f0 e0       	ldi	r31, 0x00	; 0
    2582:	80 81       	ld	r24, Z
    2584:	81 60       	ori	r24, 0x01	; 1
    2586:	8c 93       	st	X, r24
            CLR_BIT(TCCR0, TCCR0_CS01);
    2588:	a3 e5       	ldi	r26, 0x53	; 83
    258a:	b0 e0       	ldi	r27, 0x00	; 0
    258c:	e3 e5       	ldi	r30, 0x53	; 83
    258e:	f0 e0       	ldi	r31, 0x00	; 0
    2590:	80 81       	ld	r24, Z
    2592:	8d 7f       	andi	r24, 0xFD	; 253
    2594:	8c 93       	st	X, r24
            CLR_BIT(TCCR0, TCCR0_CS02);
    2596:	a3 e5       	ldi	r26, 0x53	; 83
    2598:	b0 e0       	ldi	r27, 0x00	; 0
    259a:	e3 e5       	ldi	r30, 0x53	; 83
    259c:	f0 e0       	ldi	r31, 0x00	; 0
    259e:	80 81       	ld	r24, Z
    25a0:	8b 7f       	andi	r24, 0xFB	; 251
    25a2:	8c 93       	st	X, r24
    25a4:	4b c5       	rjmp	.+2710   	; 0x303c <Gpt_Init+0xd34>
            break;
        case GPT_PRESCALER_8:
            CLR_BIT(TCCR0, TCCR0_CS00);
    25a6:	a3 e5       	ldi	r26, 0x53	; 83
    25a8:	b0 e0       	ldi	r27, 0x00	; 0
    25aa:	e3 e5       	ldi	r30, 0x53	; 83
    25ac:	f0 e0       	ldi	r31, 0x00	; 0
    25ae:	80 81       	ld	r24, Z
    25b0:	8e 7f       	andi	r24, 0xFE	; 254
    25b2:	8c 93       	st	X, r24
            SET_BIT(TCCR0, TCCR0_CS01);
    25b4:	a3 e5       	ldi	r26, 0x53	; 83
    25b6:	b0 e0       	ldi	r27, 0x00	; 0
    25b8:	e3 e5       	ldi	r30, 0x53	; 83
    25ba:	f0 e0       	ldi	r31, 0x00	; 0
    25bc:	80 81       	ld	r24, Z
    25be:	82 60       	ori	r24, 0x02	; 2
    25c0:	8c 93       	st	X, r24
            CLR_BIT(TCCR0, TCCR0_CS02);
    25c2:	a3 e5       	ldi	r26, 0x53	; 83
    25c4:	b0 e0       	ldi	r27, 0x00	; 0
    25c6:	e3 e5       	ldi	r30, 0x53	; 83
    25c8:	f0 e0       	ldi	r31, 0x00	; 0
    25ca:	80 81       	ld	r24, Z
    25cc:	8b 7f       	andi	r24, 0xFB	; 251
    25ce:	8c 93       	st	X, r24
    25d0:	35 c5       	rjmp	.+2666   	; 0x303c <Gpt_Init+0xd34>
            break;
        case GPT_PRESCALER_64:
            SET_BIT(TCCR0, TCCR0_CS00);
    25d2:	a3 e5       	ldi	r26, 0x53	; 83
    25d4:	b0 e0       	ldi	r27, 0x00	; 0
    25d6:	e3 e5       	ldi	r30, 0x53	; 83
    25d8:	f0 e0       	ldi	r31, 0x00	; 0
    25da:	80 81       	ld	r24, Z
    25dc:	81 60       	ori	r24, 0x01	; 1
    25de:	8c 93       	st	X, r24
            SET_BIT(TCCR0, TCCR0_CS01);
    25e0:	a3 e5       	ldi	r26, 0x53	; 83
    25e2:	b0 e0       	ldi	r27, 0x00	; 0
    25e4:	e3 e5       	ldi	r30, 0x53	; 83
    25e6:	f0 e0       	ldi	r31, 0x00	; 0
    25e8:	80 81       	ld	r24, Z
    25ea:	82 60       	ori	r24, 0x02	; 2
    25ec:	8c 93       	st	X, r24
            CLR_BIT(TCCR0, TCCR0_CS02);
    25ee:	a3 e5       	ldi	r26, 0x53	; 83
    25f0:	b0 e0       	ldi	r27, 0x00	; 0
    25f2:	e3 e5       	ldi	r30, 0x53	; 83
    25f4:	f0 e0       	ldi	r31, 0x00	; 0
    25f6:	80 81       	ld	r24, Z
    25f8:	8b 7f       	andi	r24, 0xFB	; 251
    25fa:	8c 93       	st	X, r24
    25fc:	1f c5       	rjmp	.+2622   	; 0x303c <Gpt_Init+0xd34>
            // TODO
            break;
        case GPT_PRESCALER_256:
            CLR_BIT(TCCR0, TCCR0_CS00);
    25fe:	a3 e5       	ldi	r26, 0x53	; 83
    2600:	b0 e0       	ldi	r27, 0x00	; 0
    2602:	e3 e5       	ldi	r30, 0x53	; 83
    2604:	f0 e0       	ldi	r31, 0x00	; 0
    2606:	80 81       	ld	r24, Z
    2608:	8e 7f       	andi	r24, 0xFE	; 254
    260a:	8c 93       	st	X, r24
            CLR_BIT(TCCR0, TCCR0_CS01);
    260c:	a3 e5       	ldi	r26, 0x53	; 83
    260e:	b0 e0       	ldi	r27, 0x00	; 0
    2610:	e3 e5       	ldi	r30, 0x53	; 83
    2612:	f0 e0       	ldi	r31, 0x00	; 0
    2614:	80 81       	ld	r24, Z
    2616:	8d 7f       	andi	r24, 0xFD	; 253
    2618:	8c 93       	st	X, r24
            SET_BIT(TCCR0, TCCR0_CS02);
    261a:	a3 e5       	ldi	r26, 0x53	; 83
    261c:	b0 e0       	ldi	r27, 0x00	; 0
    261e:	e3 e5       	ldi	r30, 0x53	; 83
    2620:	f0 e0       	ldi	r31, 0x00	; 0
    2622:	80 81       	ld	r24, Z
    2624:	84 60       	ori	r24, 0x04	; 4
    2626:	8c 93       	st	X, r24
    2628:	09 c5       	rjmp	.+2578   	; 0x303c <Gpt_Init+0xd34>
            // TODO
            break;
        case GPT_PRESCALER_1024:
            SET_BIT(TCCR0, TCCR0_CS00);
    262a:	a3 e5       	ldi	r26, 0x53	; 83
    262c:	b0 e0       	ldi	r27, 0x00	; 0
    262e:	e3 e5       	ldi	r30, 0x53	; 83
    2630:	f0 e0       	ldi	r31, 0x00	; 0
    2632:	80 81       	ld	r24, Z
    2634:	81 60       	ori	r24, 0x01	; 1
    2636:	8c 93       	st	X, r24
            CLR_BIT(TCCR0, TCCR0_CS01);
    2638:	a3 e5       	ldi	r26, 0x53	; 83
    263a:	b0 e0       	ldi	r27, 0x00	; 0
    263c:	e3 e5       	ldi	r30, 0x53	; 83
    263e:	f0 e0       	ldi	r31, 0x00	; 0
    2640:	80 81       	ld	r24, Z
    2642:	8d 7f       	andi	r24, 0xFD	; 253
    2644:	8c 93       	st	X, r24
            SET_BIT(TCCR0, TCCR0_CS02);
    2646:	a3 e5       	ldi	r26, 0x53	; 83
    2648:	b0 e0       	ldi	r27, 0x00	; 0
    264a:	e3 e5       	ldi	r30, 0x53	; 83
    264c:	f0 e0       	ldi	r31, 0x00	; 0
    264e:	80 81       	ld	r24, Z
    2650:	84 60       	ori	r24, 0x04	; 4
    2652:	8c 93       	st	X, r24
    2654:	f3 c4       	rjmp	.+2534   	; 0x303c <Gpt_Init+0xd34>
            break;
        case GPT_PRESCALER_EXT_FALLING:
            CLR_BIT(TCCR0, TCCR0_CS00);
    2656:	a3 e5       	ldi	r26, 0x53	; 83
    2658:	b0 e0       	ldi	r27, 0x00	; 0
    265a:	e3 e5       	ldi	r30, 0x53	; 83
    265c:	f0 e0       	ldi	r31, 0x00	; 0
    265e:	80 81       	ld	r24, Z
    2660:	8e 7f       	andi	r24, 0xFE	; 254
    2662:	8c 93       	st	X, r24
            SET_BIT(TCCR0, TCCR0_CS01);
    2664:	a3 e5       	ldi	r26, 0x53	; 83
    2666:	b0 e0       	ldi	r27, 0x00	; 0
    2668:	e3 e5       	ldi	r30, 0x53	; 83
    266a:	f0 e0       	ldi	r31, 0x00	; 0
    266c:	80 81       	ld	r24, Z
    266e:	82 60       	ori	r24, 0x02	; 2
    2670:	8c 93       	st	X, r24
            SET_BIT(TCCR0, TCCR0_CS02);
    2672:	a3 e5       	ldi	r26, 0x53	; 83
    2674:	b0 e0       	ldi	r27, 0x00	; 0
    2676:	e3 e5       	ldi	r30, 0x53	; 83
    2678:	f0 e0       	ldi	r31, 0x00	; 0
    267a:	80 81       	ld	r24, Z
    267c:	84 60       	ori	r24, 0x04	; 4
    267e:	8c 93       	st	X, r24
    2680:	dd c4       	rjmp	.+2490   	; 0x303c <Gpt_Init+0xd34>
            // TODO
            break;
        case GPT_PRESCALER_EXT_RISING:
            SET_BIT(TCCR0, TCCR0_CS00);
    2682:	a3 e5       	ldi	r26, 0x53	; 83
    2684:	b0 e0       	ldi	r27, 0x00	; 0
    2686:	e3 e5       	ldi	r30, 0x53	; 83
    2688:	f0 e0       	ldi	r31, 0x00	; 0
    268a:	80 81       	ld	r24, Z
    268c:	81 60       	ori	r24, 0x01	; 1
    268e:	8c 93       	st	X, r24
            SET_BIT(TCCR0, TCCR0_CS01);
    2690:	a3 e5       	ldi	r26, 0x53	; 83
    2692:	b0 e0       	ldi	r27, 0x00	; 0
    2694:	e3 e5       	ldi	r30, 0x53	; 83
    2696:	f0 e0       	ldi	r31, 0x00	; 0
    2698:	80 81       	ld	r24, Z
    269a:	82 60       	ori	r24, 0x02	; 2
    269c:	8c 93       	st	X, r24
            SET_BIT(TCCR0, TCCR0_CS02);
    269e:	a3 e5       	ldi	r26, 0x53	; 83
    26a0:	b0 e0       	ldi	r27, 0x00	; 0
    26a2:	e3 e5       	ldi	r30, 0x53	; 83
    26a4:	f0 e0       	ldi	r31, 0x00	; 0
    26a6:	80 81       	ld	r24, Z
    26a8:	84 60       	ori	r24, 0x04	; 4
    26aa:	8c 93       	st	X, r24
    26ac:	c7 c4       	rjmp	.+2446   	; 0x303c <Gpt_Init+0xd34>
            // TODO
            break;
        default:
            returnValue = GPT_ERROR;
    26ae:	19 82       	std	Y+1, r1	; 0x01
    26b0:	c5 c4       	rjmp	.+2442   	; 0x303c <Gpt_Init+0xd34>
            break;
        }
        break;
    case GPT_CHANNEL_TIMER1A:
        /*Waveform Generation Mode*/
        if (config->mode == GPT_MODE_NORMAL)
    26b2:	ea 81       	ldd	r30, Y+2	; 0x02
    26b4:	fb 81       	ldd	r31, Y+3	; 0x03
    26b6:	81 81       	ldd	r24, Z+1	; 0x01
    26b8:	88 23       	and	r24, r24
    26ba:	e9 f4       	brne	.+58     	; 0x26f6 <Gpt_Init+0x3ee>
        {
            CLR_BIT(TCCR1A,TCCR1A_WGM10);
    26bc:	af e4       	ldi	r26, 0x4F	; 79
    26be:	b0 e0       	ldi	r27, 0x00	; 0
    26c0:	ef e4       	ldi	r30, 0x4F	; 79
    26c2:	f0 e0       	ldi	r31, 0x00	; 0
    26c4:	80 81       	ld	r24, Z
    26c6:	8e 7f       	andi	r24, 0xFE	; 254
    26c8:	8c 93       	st	X, r24
            CLR_BIT(TCCR1A,TCCR1A_WGM11);
    26ca:	af e4       	ldi	r26, 0x4F	; 79
    26cc:	b0 e0       	ldi	r27, 0x00	; 0
    26ce:	ef e4       	ldi	r30, 0x4F	; 79
    26d0:	f0 e0       	ldi	r31, 0x00	; 0
    26d2:	80 81       	ld	r24, Z
    26d4:	8d 7f       	andi	r24, 0xFD	; 253
    26d6:	8c 93       	st	X, r24
            CLR_BIT(TCCR1B,TCCR1B_WGM12);
    26d8:	ae e4       	ldi	r26, 0x4E	; 78
    26da:	b0 e0       	ldi	r27, 0x00	; 0
    26dc:	ee e4       	ldi	r30, 0x4E	; 78
    26de:	f0 e0       	ldi	r31, 0x00	; 0
    26e0:	80 81       	ld	r24, Z
    26e2:	87 7f       	andi	r24, 0xF7	; 247
    26e4:	8c 93       	st	X, r24
            CLR_BIT(TCCR1B,TCCR1B_WGM13);
    26e6:	ae e4       	ldi	r26, 0x4E	; 78
    26e8:	b0 e0       	ldi	r27, 0x00	; 0
    26ea:	ee e4       	ldi	r30, 0x4E	; 78
    26ec:	f0 e0       	ldi	r31, 0x00	; 0
    26ee:	80 81       	ld	r24, Z
    26f0:	8f 7e       	andi	r24, 0xEF	; 239
    26f2:	8c 93       	st	X, r24
    26f4:	45 c0       	rjmp	.+138    	; 0x2780 <Gpt_Init+0x478>
            // TODO
            // TODO
        }
        else if (config->mode == GPT_MODE_CTC)
    26f6:	ea 81       	ldd	r30, Y+2	; 0x02
    26f8:	fb 81       	ldd	r31, Y+3	; 0x03
    26fa:	81 81       	ldd	r24, Z+1	; 0x01
    26fc:	81 30       	cpi	r24, 0x01	; 1
    26fe:	e9 f4       	brne	.+58     	; 0x273a <Gpt_Init+0x432>
        {
            CLR_BIT(TCCR1A,TCCR1A_WGM10);
    2700:	af e4       	ldi	r26, 0x4F	; 79
    2702:	b0 e0       	ldi	r27, 0x00	; 0
    2704:	ef e4       	ldi	r30, 0x4F	; 79
    2706:	f0 e0       	ldi	r31, 0x00	; 0
    2708:	80 81       	ld	r24, Z
    270a:	8e 7f       	andi	r24, 0xFE	; 254
    270c:	8c 93       	st	X, r24
            CLR_BIT(TCCR1A,TCCR1A_WGM11);
    270e:	af e4       	ldi	r26, 0x4F	; 79
    2710:	b0 e0       	ldi	r27, 0x00	; 0
    2712:	ef e4       	ldi	r30, 0x4F	; 79
    2714:	f0 e0       	ldi	r31, 0x00	; 0
    2716:	80 81       	ld	r24, Z
    2718:	8d 7f       	andi	r24, 0xFD	; 253
    271a:	8c 93       	st	X, r24
            SET_BIT(TCCR1B,TCCR1B_WGM12);
    271c:	ae e4       	ldi	r26, 0x4E	; 78
    271e:	b0 e0       	ldi	r27, 0x00	; 0
    2720:	ee e4       	ldi	r30, 0x4E	; 78
    2722:	f0 e0       	ldi	r31, 0x00	; 0
    2724:	80 81       	ld	r24, Z
    2726:	88 60       	ori	r24, 0x08	; 8
    2728:	8c 93       	st	X, r24
            CLR_BIT(TCCR1B,TCCR1B_WGM13);
    272a:	ae e4       	ldi	r26, 0x4E	; 78
    272c:	b0 e0       	ldi	r27, 0x00	; 0
    272e:	ee e4       	ldi	r30, 0x4E	; 78
    2730:	f0 e0       	ldi	r31, 0x00	; 0
    2732:	80 81       	ld	r24, Z
    2734:	8f 7e       	andi	r24, 0xEF	; 239
    2736:	8c 93       	st	X, r24
    2738:	23 c0       	rjmp	.+70     	; 0x2780 <Gpt_Init+0x478>
            // TODO
            // TODO
        }else if (config->mode == SPT_MODE_Fast_PWM_mod14)
    273a:	ea 81       	ldd	r30, Y+2	; 0x02
    273c:	fb 81       	ldd	r31, Y+3	; 0x03
    273e:	81 81       	ldd	r24, Z+1	; 0x01
    2740:	84 30       	cpi	r24, 0x04	; 4
    2742:	e9 f4       	brne	.+58     	; 0x277e <Gpt_Init+0x476>
        {
            CLR_BIT(TCCR1A,TCCR1A_WGM10);
    2744:	af e4       	ldi	r26, 0x4F	; 79
    2746:	b0 e0       	ldi	r27, 0x00	; 0
    2748:	ef e4       	ldi	r30, 0x4F	; 79
    274a:	f0 e0       	ldi	r31, 0x00	; 0
    274c:	80 81       	ld	r24, Z
    274e:	8e 7f       	andi	r24, 0xFE	; 254
    2750:	8c 93       	st	X, r24
            SET_BIT(TCCR1A,TCCR1A_WGM11);
    2752:	af e4       	ldi	r26, 0x4F	; 79
    2754:	b0 e0       	ldi	r27, 0x00	; 0
    2756:	ef e4       	ldi	r30, 0x4F	; 79
    2758:	f0 e0       	ldi	r31, 0x00	; 0
    275a:	80 81       	ld	r24, Z
    275c:	82 60       	ori	r24, 0x02	; 2
    275e:	8c 93       	st	X, r24
            SET_BIT(TCCR1B,TCCR1B_WGM12);
    2760:	ae e4       	ldi	r26, 0x4E	; 78
    2762:	b0 e0       	ldi	r27, 0x00	; 0
    2764:	ee e4       	ldi	r30, 0x4E	; 78
    2766:	f0 e0       	ldi	r31, 0x00	; 0
    2768:	80 81       	ld	r24, Z
    276a:	88 60       	ori	r24, 0x08	; 8
    276c:	8c 93       	st	X, r24
            SET_BIT(TCCR1B,TCCR1B_WGM13);
    276e:	ae e4       	ldi	r26, 0x4E	; 78
    2770:	b0 e0       	ldi	r27, 0x00	; 0
    2772:	ee e4       	ldi	r30, 0x4E	; 78
    2774:	f0 e0       	ldi	r31, 0x00	; 0
    2776:	80 81       	ld	r24, Z
    2778:	80 61       	ori	r24, 0x10	; 16
    277a:	8c 93       	st	X, r24
    277c:	01 c0       	rjmp	.+2      	; 0x2780 <Gpt_Init+0x478>
            // TODO
            // TODO
        }
        else
        {
            returnValue = GPT_ERROR;
    277e:	19 82       	std	Y+1, r1	; 0x01
        }
        /*Compare Match Output Mode*/
        switch (config->output)
    2780:	ea 81       	ldd	r30, Y+2	; 0x02
    2782:	fb 81       	ldd	r31, Y+3	; 0x03
    2784:	82 81       	ldd	r24, Z+2	; 0x02
    2786:	28 2f       	mov	r18, r24
    2788:	30 e0       	ldi	r19, 0x00	; 0
    278a:	3f 87       	std	Y+15, r19	; 0x0f
    278c:	2e 87       	std	Y+14, r18	; 0x0e
    278e:	8e 85       	ldd	r24, Y+14	; 0x0e
    2790:	9f 85       	ldd	r25, Y+15	; 0x0f
    2792:	81 30       	cpi	r24, 0x01	; 1
    2794:	91 05       	cpc	r25, r1
    2796:	21 f1       	breq	.+72     	; 0x27e0 <Gpt_Init+0x4d8>
    2798:	2e 85       	ldd	r18, Y+14	; 0x0e
    279a:	3f 85       	ldd	r19, Y+15	; 0x0f
    279c:	22 30       	cpi	r18, 0x02	; 2
    279e:	31 05       	cpc	r19, r1
    27a0:	2c f4       	brge	.+10     	; 0x27ac <Gpt_Init+0x4a4>
    27a2:	8e 85       	ldd	r24, Y+14	; 0x0e
    27a4:	9f 85       	ldd	r25, Y+15	; 0x0f
    27a6:	00 97       	sbiw	r24, 0x00	; 0
    27a8:	61 f0       	breq	.+24     	; 0x27c2 <Gpt_Init+0x4ba>
    27aa:	47 c0       	rjmp	.+142    	; 0x283a <Gpt_Init+0x532>
    27ac:	2e 85       	ldd	r18, Y+14	; 0x0e
    27ae:	3f 85       	ldd	r19, Y+15	; 0x0f
    27b0:	22 30       	cpi	r18, 0x02	; 2
    27b2:	31 05       	cpc	r19, r1
    27b4:	21 f1       	breq	.+72     	; 0x27fe <Gpt_Init+0x4f6>
    27b6:	8e 85       	ldd	r24, Y+14	; 0x0e
    27b8:	9f 85       	ldd	r25, Y+15	; 0x0f
    27ba:	83 30       	cpi	r24, 0x03	; 3
    27bc:	91 05       	cpc	r25, r1
    27be:	71 f1       	breq	.+92     	; 0x281c <Gpt_Init+0x514>
    27c0:	3c c0       	rjmp	.+120    	; 0x283a <Gpt_Init+0x532>
        {
        case GPT_OUTPUT_NORMAL:
            CLR_BIT(TCCR1A,TCCR1A_COM1A0);
    27c2:	af e4       	ldi	r26, 0x4F	; 79
    27c4:	b0 e0       	ldi	r27, 0x00	; 0
    27c6:	ef e4       	ldi	r30, 0x4F	; 79
    27c8:	f0 e0       	ldi	r31, 0x00	; 0
    27ca:	80 81       	ld	r24, Z
    27cc:	8f 7b       	andi	r24, 0xBF	; 191
    27ce:	8c 93       	st	X, r24
            CLR_BIT(TCCR1A,TCCR1A_COM1A1);
    27d0:	af e4       	ldi	r26, 0x4F	; 79
    27d2:	b0 e0       	ldi	r27, 0x00	; 0
    27d4:	ef e4       	ldi	r30, 0x4F	; 79
    27d6:	f0 e0       	ldi	r31, 0x00	; 0
    27d8:	80 81       	ld	r24, Z
    27da:	8f 77       	andi	r24, 0x7F	; 127
    27dc:	8c 93       	st	X, r24
    27de:	2e c0       	rjmp	.+92     	; 0x283c <Gpt_Init+0x534>
            
            // TODO
            break;
        case GPT_OUTPUT_TOGGLE:
            SET_BIT(TCCR1A,TCCR1A_COM1A0);
    27e0:	af e4       	ldi	r26, 0x4F	; 79
    27e2:	b0 e0       	ldi	r27, 0x00	; 0
    27e4:	ef e4       	ldi	r30, 0x4F	; 79
    27e6:	f0 e0       	ldi	r31, 0x00	; 0
    27e8:	80 81       	ld	r24, Z
    27ea:	80 64       	ori	r24, 0x40	; 64
    27ec:	8c 93       	st	X, r24
            CLR_BIT(TCCR1A,TCCR1A_COM1A1);
    27ee:	af e4       	ldi	r26, 0x4F	; 79
    27f0:	b0 e0       	ldi	r27, 0x00	; 0
    27f2:	ef e4       	ldi	r30, 0x4F	; 79
    27f4:	f0 e0       	ldi	r31, 0x00	; 0
    27f6:	80 81       	ld	r24, Z
    27f8:	8f 77       	andi	r24, 0x7F	; 127
    27fa:	8c 93       	st	X, r24
    27fc:	1f c0       	rjmp	.+62     	; 0x283c <Gpt_Init+0x534>
            // TODO
            break;
        case GPT_OUTPUT_SET:
            SET_BIT(TCCR1A,TCCR1A_COM1A0);
    27fe:	af e4       	ldi	r26, 0x4F	; 79
    2800:	b0 e0       	ldi	r27, 0x00	; 0
    2802:	ef e4       	ldi	r30, 0x4F	; 79
    2804:	f0 e0       	ldi	r31, 0x00	; 0
    2806:	80 81       	ld	r24, Z
    2808:	80 64       	ori	r24, 0x40	; 64
    280a:	8c 93       	st	X, r24
            SET_BIT(TCCR1A,TCCR1A_COM1A1);
    280c:	af e4       	ldi	r26, 0x4F	; 79
    280e:	b0 e0       	ldi	r27, 0x00	; 0
    2810:	ef e4       	ldi	r30, 0x4F	; 79
    2812:	f0 e0       	ldi	r31, 0x00	; 0
    2814:	80 81       	ld	r24, Z
    2816:	80 68       	ori	r24, 0x80	; 128
    2818:	8c 93       	st	X, r24
    281a:	10 c0       	rjmp	.+32     	; 0x283c <Gpt_Init+0x534>
            // TODO
            break;
        case GPT_OUTPUT_CLEAR:
            CLR_BIT(TCCR1A,TCCR1A_COM1A0);
    281c:	af e4       	ldi	r26, 0x4F	; 79
    281e:	b0 e0       	ldi	r27, 0x00	; 0
    2820:	ef e4       	ldi	r30, 0x4F	; 79
    2822:	f0 e0       	ldi	r31, 0x00	; 0
    2824:	80 81       	ld	r24, Z
    2826:	8f 7b       	andi	r24, 0xBF	; 191
    2828:	8c 93       	st	X, r24
            SET_BIT(TCCR1A,TCCR1A_COM1A1);
    282a:	af e4       	ldi	r26, 0x4F	; 79
    282c:	b0 e0       	ldi	r27, 0x00	; 0
    282e:	ef e4       	ldi	r30, 0x4F	; 79
    2830:	f0 e0       	ldi	r31, 0x00	; 0
    2832:	80 81       	ld	r24, Z
    2834:	80 68       	ori	r24, 0x80	; 128
    2836:	8c 93       	st	X, r24
    2838:	01 c0       	rjmp	.+2      	; 0x283c <Gpt_Init+0x534>
            // TODO
            break;
        default:
            returnValue = GPT_ERROR;
    283a:	19 82       	std	Y+1, r1	; 0x01
            break;
        }

        /*Clock Select*/
        switch (config->prescaler)
    283c:	ea 81       	ldd	r30, Y+2	; 0x02
    283e:	fb 81       	ldd	r31, Y+3	; 0x03
    2840:	83 81       	ldd	r24, Z+3	; 0x03
    2842:	28 2f       	mov	r18, r24
    2844:	30 e0       	ldi	r19, 0x00	; 0
    2846:	3d 87       	std	Y+13, r19	; 0x0d
    2848:	2c 87       	std	Y+12, r18	; 0x0c
    284a:	8c 85       	ldd	r24, Y+12	; 0x0c
    284c:	9d 85       	ldd	r25, Y+13	; 0x0d
    284e:	84 30       	cpi	r24, 0x04	; 4
    2850:	91 05       	cpc	r25, r1
    2852:	09 f4       	brne	.+2      	; 0x2856 <Gpt_Init+0x54e>
    2854:	77 c0       	rjmp	.+238    	; 0x2944 <Gpt_Init+0x63c>
    2856:	2c 85       	ldd	r18, Y+12	; 0x0c
    2858:	3d 85       	ldd	r19, Y+13	; 0x0d
    285a:	25 30       	cpi	r18, 0x05	; 5
    285c:	31 05       	cpc	r19, r1
    285e:	8c f4       	brge	.+34     	; 0x2882 <Gpt_Init+0x57a>
    2860:	8c 85       	ldd	r24, Y+12	; 0x0c
    2862:	9d 85       	ldd	r25, Y+13	; 0x0d
    2864:	81 30       	cpi	r24, 0x01	; 1
    2866:	91 05       	cpc	r25, r1
    2868:	09 f4       	brne	.+2      	; 0x286c <Gpt_Init+0x564>
    286a:	40 c0       	rjmp	.+128    	; 0x28ec <Gpt_Init+0x5e4>
    286c:	2c 85       	ldd	r18, Y+12	; 0x0c
    286e:	3d 85       	ldd	r19, Y+13	; 0x0d
    2870:	22 30       	cpi	r18, 0x02	; 2
    2872:	31 05       	cpc	r19, r1
    2874:	09 f4       	brne	.+2      	; 0x2878 <Gpt_Init+0x570>
    2876:	50 c0       	rjmp	.+160    	; 0x2918 <Gpt_Init+0x610>
    2878:	8c 85       	ldd	r24, Y+12	; 0x0c
    287a:	9d 85       	ldd	r25, Y+13	; 0x0d
    287c:	00 97       	sbiw	r24, 0x00	; 0
    287e:	01 f1       	breq	.+64     	; 0x28c0 <Gpt_Init+0x5b8>
    2880:	cf c0       	rjmp	.+414    	; 0x2a20 <Gpt_Init+0x718>
    2882:	2c 85       	ldd	r18, Y+12	; 0x0c
    2884:	3d 85       	ldd	r19, Y+13	; 0x0d
    2886:	27 30       	cpi	r18, 0x07	; 7
    2888:	31 05       	cpc	r19, r1
    288a:	09 f4       	brne	.+2      	; 0x288e <Gpt_Init+0x586>
    288c:	87 c0       	rjmp	.+270    	; 0x299c <Gpt_Init+0x694>
    288e:	8c 85       	ldd	r24, Y+12	; 0x0c
    2890:	9d 85       	ldd	r25, Y+13	; 0x0d
    2892:	88 30       	cpi	r24, 0x08	; 8
    2894:	91 05       	cpc	r25, r1
    2896:	3c f4       	brge	.+14     	; 0x28a6 <Gpt_Init+0x59e>
    2898:	2c 85       	ldd	r18, Y+12	; 0x0c
    289a:	3d 85       	ldd	r19, Y+13	; 0x0d
    289c:	26 30       	cpi	r18, 0x06	; 6
    289e:	31 05       	cpc	r19, r1
    28a0:	09 f4       	brne	.+2      	; 0x28a4 <Gpt_Init+0x59c>
    28a2:	66 c0       	rjmp	.+204    	; 0x2970 <Gpt_Init+0x668>
    28a4:	bd c0       	rjmp	.+378    	; 0x2a20 <Gpt_Init+0x718>
    28a6:	8c 85       	ldd	r24, Y+12	; 0x0c
    28a8:	9d 85       	ldd	r25, Y+13	; 0x0d
    28aa:	88 30       	cpi	r24, 0x08	; 8
    28ac:	91 05       	cpc	r25, r1
    28ae:	09 f4       	brne	.+2      	; 0x28b2 <Gpt_Init+0x5aa>
    28b0:	8b c0       	rjmp	.+278    	; 0x29c8 <Gpt_Init+0x6c0>
    28b2:	2c 85       	ldd	r18, Y+12	; 0x0c
    28b4:	3d 85       	ldd	r19, Y+13	; 0x0d
    28b6:	29 30       	cpi	r18, 0x09	; 9
    28b8:	31 05       	cpc	r19, r1
    28ba:	09 f4       	brne	.+2      	; 0x28be <Gpt_Init+0x5b6>
    28bc:	9b c0       	rjmp	.+310    	; 0x29f4 <Gpt_Init+0x6ec>
    28be:	b0 c0       	rjmp	.+352    	; 0x2a20 <Gpt_Init+0x718>
        {
        case GPT_PRESCALER_0:
            CLR_BIT(TCCR1B,TCCR1B_CS10);
    28c0:	ae e4       	ldi	r26, 0x4E	; 78
    28c2:	b0 e0       	ldi	r27, 0x00	; 0
    28c4:	ee e4       	ldi	r30, 0x4E	; 78
    28c6:	f0 e0       	ldi	r31, 0x00	; 0
    28c8:	80 81       	ld	r24, Z
    28ca:	8e 7f       	andi	r24, 0xFE	; 254
    28cc:	8c 93       	st	X, r24
            CLR_BIT(TCCR1B,TCCR1B_CS11);
    28ce:	ae e4       	ldi	r26, 0x4E	; 78
    28d0:	b0 e0       	ldi	r27, 0x00	; 0
    28d2:	ee e4       	ldi	r30, 0x4E	; 78
    28d4:	f0 e0       	ldi	r31, 0x00	; 0
    28d6:	80 81       	ld	r24, Z
    28d8:	8d 7f       	andi	r24, 0xFD	; 253
    28da:	8c 93       	st	X, r24
            CLR_BIT(TCCR1B,TCCR1B_CS12);
    28dc:	ae e4       	ldi	r26, 0x4E	; 78
    28de:	b0 e0       	ldi	r27, 0x00	; 0
    28e0:	ee e4       	ldi	r30, 0x4E	; 78
    28e2:	f0 e0       	ldi	r31, 0x00	; 0
    28e4:	80 81       	ld	r24, Z
    28e6:	8b 7f       	andi	r24, 0xFB	; 251
    28e8:	8c 93       	st	X, r24
    28ea:	a8 c3       	rjmp	.+1872   	; 0x303c <Gpt_Init+0xd34>
            // TODO
            break;
        case GPT_PRESCALER_1:
            SET_BIT(TCCR1B,TCCR1B_CS10);
    28ec:	ae e4       	ldi	r26, 0x4E	; 78
    28ee:	b0 e0       	ldi	r27, 0x00	; 0
    28f0:	ee e4       	ldi	r30, 0x4E	; 78
    28f2:	f0 e0       	ldi	r31, 0x00	; 0
    28f4:	80 81       	ld	r24, Z
    28f6:	81 60       	ori	r24, 0x01	; 1
    28f8:	8c 93       	st	X, r24
            CLR_BIT(TCCR1B,TCCR1B_CS11);
    28fa:	ae e4       	ldi	r26, 0x4E	; 78
    28fc:	b0 e0       	ldi	r27, 0x00	; 0
    28fe:	ee e4       	ldi	r30, 0x4E	; 78
    2900:	f0 e0       	ldi	r31, 0x00	; 0
    2902:	80 81       	ld	r24, Z
    2904:	8d 7f       	andi	r24, 0xFD	; 253
    2906:	8c 93       	st	X, r24
            CLR_BIT(TCCR1B,TCCR1B_CS12);        
    2908:	ae e4       	ldi	r26, 0x4E	; 78
    290a:	b0 e0       	ldi	r27, 0x00	; 0
    290c:	ee e4       	ldi	r30, 0x4E	; 78
    290e:	f0 e0       	ldi	r31, 0x00	; 0
    2910:	80 81       	ld	r24, Z
    2912:	8b 7f       	andi	r24, 0xFB	; 251
    2914:	8c 93       	st	X, r24
    2916:	92 c3       	rjmp	.+1828   	; 0x303c <Gpt_Init+0xd34>
            // TODO
            break;
        case GPT_PRESCALER_8:
            CLR_BIT(TCCR1B,TCCR1B_CS10);
    2918:	ae e4       	ldi	r26, 0x4E	; 78
    291a:	b0 e0       	ldi	r27, 0x00	; 0
    291c:	ee e4       	ldi	r30, 0x4E	; 78
    291e:	f0 e0       	ldi	r31, 0x00	; 0
    2920:	80 81       	ld	r24, Z
    2922:	8e 7f       	andi	r24, 0xFE	; 254
    2924:	8c 93       	st	X, r24
            SET_BIT(TCCR1B,TCCR1B_CS11);
    2926:	ae e4       	ldi	r26, 0x4E	; 78
    2928:	b0 e0       	ldi	r27, 0x00	; 0
    292a:	ee e4       	ldi	r30, 0x4E	; 78
    292c:	f0 e0       	ldi	r31, 0x00	; 0
    292e:	80 81       	ld	r24, Z
    2930:	82 60       	ori	r24, 0x02	; 2
    2932:	8c 93       	st	X, r24
            CLR_BIT(TCCR1B,TCCR1B_CS12);
    2934:	ae e4       	ldi	r26, 0x4E	; 78
    2936:	b0 e0       	ldi	r27, 0x00	; 0
    2938:	ee e4       	ldi	r30, 0x4E	; 78
    293a:	f0 e0       	ldi	r31, 0x00	; 0
    293c:	80 81       	ld	r24, Z
    293e:	8b 7f       	andi	r24, 0xFB	; 251
    2940:	8c 93       	st	X, r24
    2942:	7c c3       	rjmp	.+1784   	; 0x303c <Gpt_Init+0xd34>
            // TODO
            break;
        case GPT_PRESCALER_64:
            SET_BIT(TCCR1B,TCCR1B_CS10);
    2944:	ae e4       	ldi	r26, 0x4E	; 78
    2946:	b0 e0       	ldi	r27, 0x00	; 0
    2948:	ee e4       	ldi	r30, 0x4E	; 78
    294a:	f0 e0       	ldi	r31, 0x00	; 0
    294c:	80 81       	ld	r24, Z
    294e:	81 60       	ori	r24, 0x01	; 1
    2950:	8c 93       	st	X, r24
            SET_BIT(TCCR1B,TCCR1B_CS11);
    2952:	ae e4       	ldi	r26, 0x4E	; 78
    2954:	b0 e0       	ldi	r27, 0x00	; 0
    2956:	ee e4       	ldi	r30, 0x4E	; 78
    2958:	f0 e0       	ldi	r31, 0x00	; 0
    295a:	80 81       	ld	r24, Z
    295c:	82 60       	ori	r24, 0x02	; 2
    295e:	8c 93       	st	X, r24
            CLR_BIT(TCCR1B,TCCR1B_CS12);
    2960:	ae e4       	ldi	r26, 0x4E	; 78
    2962:	b0 e0       	ldi	r27, 0x00	; 0
    2964:	ee e4       	ldi	r30, 0x4E	; 78
    2966:	f0 e0       	ldi	r31, 0x00	; 0
    2968:	80 81       	ld	r24, Z
    296a:	8b 7f       	andi	r24, 0xFB	; 251
    296c:	8c 93       	st	X, r24
    296e:	66 c3       	rjmp	.+1740   	; 0x303c <Gpt_Init+0xd34>
            // TODO
            break;
        case GPT_PRESCALER_256:
            CLR_BIT(TCCR1B,TCCR1B_CS10);
    2970:	ae e4       	ldi	r26, 0x4E	; 78
    2972:	b0 e0       	ldi	r27, 0x00	; 0
    2974:	ee e4       	ldi	r30, 0x4E	; 78
    2976:	f0 e0       	ldi	r31, 0x00	; 0
    2978:	80 81       	ld	r24, Z
    297a:	8e 7f       	andi	r24, 0xFE	; 254
    297c:	8c 93       	st	X, r24
            CLR_BIT(TCCR1B,TCCR1B_CS11);
    297e:	ae e4       	ldi	r26, 0x4E	; 78
    2980:	b0 e0       	ldi	r27, 0x00	; 0
    2982:	ee e4       	ldi	r30, 0x4E	; 78
    2984:	f0 e0       	ldi	r31, 0x00	; 0
    2986:	80 81       	ld	r24, Z
    2988:	8d 7f       	andi	r24, 0xFD	; 253
    298a:	8c 93       	st	X, r24
            SET_BIT(TCCR1B,TCCR1B_CS12);
    298c:	ae e4       	ldi	r26, 0x4E	; 78
    298e:	b0 e0       	ldi	r27, 0x00	; 0
    2990:	ee e4       	ldi	r30, 0x4E	; 78
    2992:	f0 e0       	ldi	r31, 0x00	; 0
    2994:	80 81       	ld	r24, Z
    2996:	84 60       	ori	r24, 0x04	; 4
    2998:	8c 93       	st	X, r24
    299a:	50 c3       	rjmp	.+1696   	; 0x303c <Gpt_Init+0xd34>
            // TODO
            break;
        case GPT_PRESCALER_1024:
            SET_BIT(TCCR1B,TCCR1B_CS10);
    299c:	ae e4       	ldi	r26, 0x4E	; 78
    299e:	b0 e0       	ldi	r27, 0x00	; 0
    29a0:	ee e4       	ldi	r30, 0x4E	; 78
    29a2:	f0 e0       	ldi	r31, 0x00	; 0
    29a4:	80 81       	ld	r24, Z
    29a6:	81 60       	ori	r24, 0x01	; 1
    29a8:	8c 93       	st	X, r24
            CLR_BIT(TCCR1B,TCCR1B_CS11);
    29aa:	ae e4       	ldi	r26, 0x4E	; 78
    29ac:	b0 e0       	ldi	r27, 0x00	; 0
    29ae:	ee e4       	ldi	r30, 0x4E	; 78
    29b0:	f0 e0       	ldi	r31, 0x00	; 0
    29b2:	80 81       	ld	r24, Z
    29b4:	8d 7f       	andi	r24, 0xFD	; 253
    29b6:	8c 93       	st	X, r24
            SET_BIT(TCCR1B,TCCR1B_CS12);
    29b8:	ae e4       	ldi	r26, 0x4E	; 78
    29ba:	b0 e0       	ldi	r27, 0x00	; 0
    29bc:	ee e4       	ldi	r30, 0x4E	; 78
    29be:	f0 e0       	ldi	r31, 0x00	; 0
    29c0:	80 81       	ld	r24, Z
    29c2:	84 60       	ori	r24, 0x04	; 4
    29c4:	8c 93       	st	X, r24
    29c6:	3a c3       	rjmp	.+1652   	; 0x303c <Gpt_Init+0xd34>
            // TODO
            break;
        case GPT_PRESCALER_EXT_FALLING:
            CLR_BIT(TCCR1B,TCCR1B_CS10);
    29c8:	ae e4       	ldi	r26, 0x4E	; 78
    29ca:	b0 e0       	ldi	r27, 0x00	; 0
    29cc:	ee e4       	ldi	r30, 0x4E	; 78
    29ce:	f0 e0       	ldi	r31, 0x00	; 0
    29d0:	80 81       	ld	r24, Z
    29d2:	8e 7f       	andi	r24, 0xFE	; 254
    29d4:	8c 93       	st	X, r24
            SET_BIT(TCCR1B,TCCR1B_CS11);
    29d6:	ae e4       	ldi	r26, 0x4E	; 78
    29d8:	b0 e0       	ldi	r27, 0x00	; 0
    29da:	ee e4       	ldi	r30, 0x4E	; 78
    29dc:	f0 e0       	ldi	r31, 0x00	; 0
    29de:	80 81       	ld	r24, Z
    29e0:	82 60       	ori	r24, 0x02	; 2
    29e2:	8c 93       	st	X, r24
            SET_BIT(TCCR1B,TCCR1B_CS12);
    29e4:	ae e4       	ldi	r26, 0x4E	; 78
    29e6:	b0 e0       	ldi	r27, 0x00	; 0
    29e8:	ee e4       	ldi	r30, 0x4E	; 78
    29ea:	f0 e0       	ldi	r31, 0x00	; 0
    29ec:	80 81       	ld	r24, Z
    29ee:	84 60       	ori	r24, 0x04	; 4
    29f0:	8c 93       	st	X, r24
    29f2:	24 c3       	rjmp	.+1608   	; 0x303c <Gpt_Init+0xd34>
            // TODO
            break;
        case GPT_PRESCALER_EXT_RISING:
            SET_BIT(TCCR1B,TCCR1B_CS10);
    29f4:	ae e4       	ldi	r26, 0x4E	; 78
    29f6:	b0 e0       	ldi	r27, 0x00	; 0
    29f8:	ee e4       	ldi	r30, 0x4E	; 78
    29fa:	f0 e0       	ldi	r31, 0x00	; 0
    29fc:	80 81       	ld	r24, Z
    29fe:	81 60       	ori	r24, 0x01	; 1
    2a00:	8c 93       	st	X, r24
            SET_BIT(TCCR1B,TCCR1B_CS11);
    2a02:	ae e4       	ldi	r26, 0x4E	; 78
    2a04:	b0 e0       	ldi	r27, 0x00	; 0
    2a06:	ee e4       	ldi	r30, 0x4E	; 78
    2a08:	f0 e0       	ldi	r31, 0x00	; 0
    2a0a:	80 81       	ld	r24, Z
    2a0c:	82 60       	ori	r24, 0x02	; 2
    2a0e:	8c 93       	st	X, r24
            SET_BIT(TCCR1B,TCCR1B_CS12);
    2a10:	ae e4       	ldi	r26, 0x4E	; 78
    2a12:	b0 e0       	ldi	r27, 0x00	; 0
    2a14:	ee e4       	ldi	r30, 0x4E	; 78
    2a16:	f0 e0       	ldi	r31, 0x00	; 0
    2a18:	80 81       	ld	r24, Z
    2a1a:	84 60       	ori	r24, 0x04	; 4
    2a1c:	8c 93       	st	X, r24
    2a1e:	0e c3       	rjmp	.+1564   	; 0x303c <Gpt_Init+0xd34>
            // TODO
            break;
        default:
            returnValue = GPT_ERROR;
    2a20:	19 82       	std	Y+1, r1	; 0x01
    2a22:	0c c3       	rjmp	.+1560   	; 0x303c <Gpt_Init+0xd34>
        }
        break;

    case GPT_CHANNEL_TIMER1B:
        /*Waveform Generation Mode*/
        if (config->mode == GPT_MODE_NORMAL)
    2a24:	ea 81       	ldd	r30, Y+2	; 0x02
    2a26:	fb 81       	ldd	r31, Y+3	; 0x03
    2a28:	81 81       	ldd	r24, Z+1	; 0x01
    2a2a:	88 23       	and	r24, r24
    2a2c:	e9 f4       	brne	.+58     	; 0x2a68 <Gpt_Init+0x760>
        {
            CLR_BIT(TCCR1A,TCCR1A_WGM10);
    2a2e:	af e4       	ldi	r26, 0x4F	; 79
    2a30:	b0 e0       	ldi	r27, 0x00	; 0
    2a32:	ef e4       	ldi	r30, 0x4F	; 79
    2a34:	f0 e0       	ldi	r31, 0x00	; 0
    2a36:	80 81       	ld	r24, Z
    2a38:	8e 7f       	andi	r24, 0xFE	; 254
    2a3a:	8c 93       	st	X, r24
            CLR_BIT(TCCR1A,TCCR1A_WGM11);
    2a3c:	af e4       	ldi	r26, 0x4F	; 79
    2a3e:	b0 e0       	ldi	r27, 0x00	; 0
    2a40:	ef e4       	ldi	r30, 0x4F	; 79
    2a42:	f0 e0       	ldi	r31, 0x00	; 0
    2a44:	80 81       	ld	r24, Z
    2a46:	8d 7f       	andi	r24, 0xFD	; 253
    2a48:	8c 93       	st	X, r24
            CLR_BIT(TCCR1B,TCCR1B_WGM12);
    2a4a:	ae e4       	ldi	r26, 0x4E	; 78
    2a4c:	b0 e0       	ldi	r27, 0x00	; 0
    2a4e:	ee e4       	ldi	r30, 0x4E	; 78
    2a50:	f0 e0       	ldi	r31, 0x00	; 0
    2a52:	80 81       	ld	r24, Z
    2a54:	87 7f       	andi	r24, 0xF7	; 247
    2a56:	8c 93       	st	X, r24
            CLR_BIT(TCCR1B,TCCR1B_WGM13);
    2a58:	ae e4       	ldi	r26, 0x4E	; 78
    2a5a:	b0 e0       	ldi	r27, 0x00	; 0
    2a5c:	ee e4       	ldi	r30, 0x4E	; 78
    2a5e:	f0 e0       	ldi	r31, 0x00	; 0
    2a60:	80 81       	ld	r24, Z
    2a62:	8f 7e       	andi	r24, 0xEF	; 239
    2a64:	8c 93       	st	X, r24
    2a66:	23 c0       	rjmp	.+70     	; 0x2aae <Gpt_Init+0x7a6>
            // TODO
            // TODO
        }
        else if (config->mode == GPT_MODE_CTC)
    2a68:	ea 81       	ldd	r30, Y+2	; 0x02
    2a6a:	fb 81       	ldd	r31, Y+3	; 0x03
    2a6c:	81 81       	ldd	r24, Z+1	; 0x01
    2a6e:	81 30       	cpi	r24, 0x01	; 1
    2a70:	e9 f4       	brne	.+58     	; 0x2aac <Gpt_Init+0x7a4>
        {
            CLR_BIT(TCCR1A,TCCR1A_WGM10);
    2a72:	af e4       	ldi	r26, 0x4F	; 79
    2a74:	b0 e0       	ldi	r27, 0x00	; 0
    2a76:	ef e4       	ldi	r30, 0x4F	; 79
    2a78:	f0 e0       	ldi	r31, 0x00	; 0
    2a7a:	80 81       	ld	r24, Z
    2a7c:	8e 7f       	andi	r24, 0xFE	; 254
    2a7e:	8c 93       	st	X, r24
            CLR_BIT(TCCR1A,TCCR1A_WGM11);
    2a80:	af e4       	ldi	r26, 0x4F	; 79
    2a82:	b0 e0       	ldi	r27, 0x00	; 0
    2a84:	ef e4       	ldi	r30, 0x4F	; 79
    2a86:	f0 e0       	ldi	r31, 0x00	; 0
    2a88:	80 81       	ld	r24, Z
    2a8a:	8d 7f       	andi	r24, 0xFD	; 253
    2a8c:	8c 93       	st	X, r24
            SET_BIT(TCCR1B,TCCR1B_WGM12);
    2a8e:	ae e4       	ldi	r26, 0x4E	; 78
    2a90:	b0 e0       	ldi	r27, 0x00	; 0
    2a92:	ee e4       	ldi	r30, 0x4E	; 78
    2a94:	f0 e0       	ldi	r31, 0x00	; 0
    2a96:	80 81       	ld	r24, Z
    2a98:	88 60       	ori	r24, 0x08	; 8
    2a9a:	8c 93       	st	X, r24
            CLR_BIT(TCCR1B,TCCR1B_WGM13);
    2a9c:	ae e4       	ldi	r26, 0x4E	; 78
    2a9e:	b0 e0       	ldi	r27, 0x00	; 0
    2aa0:	ee e4       	ldi	r30, 0x4E	; 78
    2aa2:	f0 e0       	ldi	r31, 0x00	; 0
    2aa4:	80 81       	ld	r24, Z
    2aa6:	8f 7e       	andi	r24, 0xEF	; 239
    2aa8:	8c 93       	st	X, r24
    2aaa:	01 c0       	rjmp	.+2      	; 0x2aae <Gpt_Init+0x7a6>
            // TODO
            // TODO
        }
        else
        {
            returnValue = GPT_ERROR;
    2aac:	19 82       	std	Y+1, r1	; 0x01
        }

        /*Compare Match Output Mode*/
        switch (config->output)
    2aae:	ea 81       	ldd	r30, Y+2	; 0x02
    2ab0:	fb 81       	ldd	r31, Y+3	; 0x03
    2ab2:	82 81       	ldd	r24, Z+2	; 0x02
    2ab4:	28 2f       	mov	r18, r24
    2ab6:	30 e0       	ldi	r19, 0x00	; 0
    2ab8:	3b 87       	std	Y+11, r19	; 0x0b
    2aba:	2a 87       	std	Y+10, r18	; 0x0a
    2abc:	8a 85       	ldd	r24, Y+10	; 0x0a
    2abe:	9b 85       	ldd	r25, Y+11	; 0x0b
    2ac0:	81 30       	cpi	r24, 0x01	; 1
    2ac2:	91 05       	cpc	r25, r1
    2ac4:	21 f1       	breq	.+72     	; 0x2b0e <Gpt_Init+0x806>
    2ac6:	2a 85       	ldd	r18, Y+10	; 0x0a
    2ac8:	3b 85       	ldd	r19, Y+11	; 0x0b
    2aca:	22 30       	cpi	r18, 0x02	; 2
    2acc:	31 05       	cpc	r19, r1
    2ace:	2c f4       	brge	.+10     	; 0x2ada <Gpt_Init+0x7d2>
    2ad0:	8a 85       	ldd	r24, Y+10	; 0x0a
    2ad2:	9b 85       	ldd	r25, Y+11	; 0x0b
    2ad4:	00 97       	sbiw	r24, 0x00	; 0
    2ad6:	61 f0       	breq	.+24     	; 0x2af0 <Gpt_Init+0x7e8>
    2ad8:	47 c0       	rjmp	.+142    	; 0x2b68 <Gpt_Init+0x860>
    2ada:	2a 85       	ldd	r18, Y+10	; 0x0a
    2adc:	3b 85       	ldd	r19, Y+11	; 0x0b
    2ade:	22 30       	cpi	r18, 0x02	; 2
    2ae0:	31 05       	cpc	r19, r1
    2ae2:	21 f1       	breq	.+72     	; 0x2b2c <Gpt_Init+0x824>
    2ae4:	8a 85       	ldd	r24, Y+10	; 0x0a
    2ae6:	9b 85       	ldd	r25, Y+11	; 0x0b
    2ae8:	83 30       	cpi	r24, 0x03	; 3
    2aea:	91 05       	cpc	r25, r1
    2aec:	71 f1       	breq	.+92     	; 0x2b4a <Gpt_Init+0x842>
    2aee:	3c c0       	rjmp	.+120    	; 0x2b68 <Gpt_Init+0x860>
        {
        case GPT_OUTPUT_NORMAL:
            CLR_BIT(TCCR1A,TCCR1A_COM1B0);
    2af0:	af e4       	ldi	r26, 0x4F	; 79
    2af2:	b0 e0       	ldi	r27, 0x00	; 0
    2af4:	ef e4       	ldi	r30, 0x4F	; 79
    2af6:	f0 e0       	ldi	r31, 0x00	; 0
    2af8:	80 81       	ld	r24, Z
    2afa:	8f 7e       	andi	r24, 0xEF	; 239
    2afc:	8c 93       	st	X, r24
            CLR_BIT(TCCR1A,TCCR1A_COM1B1);
    2afe:	af e4       	ldi	r26, 0x4F	; 79
    2b00:	b0 e0       	ldi	r27, 0x00	; 0
    2b02:	ef e4       	ldi	r30, 0x4F	; 79
    2b04:	f0 e0       	ldi	r31, 0x00	; 0
    2b06:	80 81       	ld	r24, Z
    2b08:	8f 7d       	andi	r24, 0xDF	; 223
    2b0a:	8c 93       	st	X, r24
    2b0c:	2e c0       	rjmp	.+92     	; 0x2b6a <Gpt_Init+0x862>
            
            // TODO
            break;
        case GPT_OUTPUT_TOGGLE:
            SET_BIT(TCCR1A,TCCR1A_COM1B0);
    2b0e:	af e4       	ldi	r26, 0x4F	; 79
    2b10:	b0 e0       	ldi	r27, 0x00	; 0
    2b12:	ef e4       	ldi	r30, 0x4F	; 79
    2b14:	f0 e0       	ldi	r31, 0x00	; 0
    2b16:	80 81       	ld	r24, Z
    2b18:	80 61       	ori	r24, 0x10	; 16
    2b1a:	8c 93       	st	X, r24
            CLR_BIT(TCCR1A,TCCR1A_COM1B1);
    2b1c:	af e4       	ldi	r26, 0x4F	; 79
    2b1e:	b0 e0       	ldi	r27, 0x00	; 0
    2b20:	ef e4       	ldi	r30, 0x4F	; 79
    2b22:	f0 e0       	ldi	r31, 0x00	; 0
    2b24:	80 81       	ld	r24, Z
    2b26:	8f 7d       	andi	r24, 0xDF	; 223
    2b28:	8c 93       	st	X, r24
    2b2a:	1f c0       	rjmp	.+62     	; 0x2b6a <Gpt_Init+0x862>
            // TODO
            break;
        case GPT_OUTPUT_SET:
            SET_BIT(TCCR1A,TCCR1A_COM1B0);
    2b2c:	af e4       	ldi	r26, 0x4F	; 79
    2b2e:	b0 e0       	ldi	r27, 0x00	; 0
    2b30:	ef e4       	ldi	r30, 0x4F	; 79
    2b32:	f0 e0       	ldi	r31, 0x00	; 0
    2b34:	80 81       	ld	r24, Z
    2b36:	80 61       	ori	r24, 0x10	; 16
    2b38:	8c 93       	st	X, r24
            SET_BIT(TCCR1A,TCCR1A_COM1B1);
    2b3a:	af e4       	ldi	r26, 0x4F	; 79
    2b3c:	b0 e0       	ldi	r27, 0x00	; 0
    2b3e:	ef e4       	ldi	r30, 0x4F	; 79
    2b40:	f0 e0       	ldi	r31, 0x00	; 0
    2b42:	80 81       	ld	r24, Z
    2b44:	80 62       	ori	r24, 0x20	; 32
    2b46:	8c 93       	st	X, r24
    2b48:	10 c0       	rjmp	.+32     	; 0x2b6a <Gpt_Init+0x862>
            // TODO
            break;
        case GPT_OUTPUT_CLEAR:
            CLR_BIT(TCCR1A,TCCR1A_COM1B0);
    2b4a:	af e4       	ldi	r26, 0x4F	; 79
    2b4c:	b0 e0       	ldi	r27, 0x00	; 0
    2b4e:	ef e4       	ldi	r30, 0x4F	; 79
    2b50:	f0 e0       	ldi	r31, 0x00	; 0
    2b52:	80 81       	ld	r24, Z
    2b54:	8f 7e       	andi	r24, 0xEF	; 239
    2b56:	8c 93       	st	X, r24
            SET_BIT(TCCR1A,TCCR1A_COM1B1);
    2b58:	af e4       	ldi	r26, 0x4F	; 79
    2b5a:	b0 e0       	ldi	r27, 0x00	; 0
    2b5c:	ef e4       	ldi	r30, 0x4F	; 79
    2b5e:	f0 e0       	ldi	r31, 0x00	; 0
    2b60:	80 81       	ld	r24, Z
    2b62:	80 62       	ori	r24, 0x20	; 32
    2b64:	8c 93       	st	X, r24
    2b66:	01 c0       	rjmp	.+2      	; 0x2b6a <Gpt_Init+0x862>
            // TODO
            break;
        default:
            returnValue = GPT_ERROR;
    2b68:	19 82       	std	Y+1, r1	; 0x01
            break;
        }

        /*Clock Select*/
        switch (config->prescaler)
    2b6a:	ea 81       	ldd	r30, Y+2	; 0x02
    2b6c:	fb 81       	ldd	r31, Y+3	; 0x03
    2b6e:	83 81       	ldd	r24, Z+3	; 0x03
    2b70:	28 2f       	mov	r18, r24
    2b72:	30 e0       	ldi	r19, 0x00	; 0
    2b74:	39 87       	std	Y+9, r19	; 0x09
    2b76:	28 87       	std	Y+8, r18	; 0x08
    2b78:	88 85       	ldd	r24, Y+8	; 0x08
    2b7a:	99 85       	ldd	r25, Y+9	; 0x09
    2b7c:	84 30       	cpi	r24, 0x04	; 4
    2b7e:	91 05       	cpc	r25, r1
    2b80:	09 f4       	brne	.+2      	; 0x2b84 <Gpt_Init+0x87c>
    2b82:	77 c0       	rjmp	.+238    	; 0x2c72 <Gpt_Init+0x96a>
    2b84:	28 85       	ldd	r18, Y+8	; 0x08
    2b86:	39 85       	ldd	r19, Y+9	; 0x09
    2b88:	25 30       	cpi	r18, 0x05	; 5
    2b8a:	31 05       	cpc	r19, r1
    2b8c:	8c f4       	brge	.+34     	; 0x2bb0 <Gpt_Init+0x8a8>
    2b8e:	88 85       	ldd	r24, Y+8	; 0x08
    2b90:	99 85       	ldd	r25, Y+9	; 0x09
    2b92:	81 30       	cpi	r24, 0x01	; 1
    2b94:	91 05       	cpc	r25, r1
    2b96:	09 f4       	brne	.+2      	; 0x2b9a <Gpt_Init+0x892>
    2b98:	40 c0       	rjmp	.+128    	; 0x2c1a <Gpt_Init+0x912>
    2b9a:	28 85       	ldd	r18, Y+8	; 0x08
    2b9c:	39 85       	ldd	r19, Y+9	; 0x09
    2b9e:	22 30       	cpi	r18, 0x02	; 2
    2ba0:	31 05       	cpc	r19, r1
    2ba2:	09 f4       	brne	.+2      	; 0x2ba6 <Gpt_Init+0x89e>
    2ba4:	50 c0       	rjmp	.+160    	; 0x2c46 <Gpt_Init+0x93e>
    2ba6:	88 85       	ldd	r24, Y+8	; 0x08
    2ba8:	99 85       	ldd	r25, Y+9	; 0x09
    2baa:	00 97       	sbiw	r24, 0x00	; 0
    2bac:	01 f1       	breq	.+64     	; 0x2bee <Gpt_Init+0x8e6>
    2bae:	cf c0       	rjmp	.+414    	; 0x2d4e <Gpt_Init+0xa46>
    2bb0:	28 85       	ldd	r18, Y+8	; 0x08
    2bb2:	39 85       	ldd	r19, Y+9	; 0x09
    2bb4:	27 30       	cpi	r18, 0x07	; 7
    2bb6:	31 05       	cpc	r19, r1
    2bb8:	09 f4       	brne	.+2      	; 0x2bbc <Gpt_Init+0x8b4>
    2bba:	87 c0       	rjmp	.+270    	; 0x2cca <Gpt_Init+0x9c2>
    2bbc:	88 85       	ldd	r24, Y+8	; 0x08
    2bbe:	99 85       	ldd	r25, Y+9	; 0x09
    2bc0:	88 30       	cpi	r24, 0x08	; 8
    2bc2:	91 05       	cpc	r25, r1
    2bc4:	3c f4       	brge	.+14     	; 0x2bd4 <Gpt_Init+0x8cc>
    2bc6:	28 85       	ldd	r18, Y+8	; 0x08
    2bc8:	39 85       	ldd	r19, Y+9	; 0x09
    2bca:	26 30       	cpi	r18, 0x06	; 6
    2bcc:	31 05       	cpc	r19, r1
    2bce:	09 f4       	brne	.+2      	; 0x2bd2 <Gpt_Init+0x8ca>
    2bd0:	66 c0       	rjmp	.+204    	; 0x2c9e <Gpt_Init+0x996>
    2bd2:	bd c0       	rjmp	.+378    	; 0x2d4e <Gpt_Init+0xa46>
    2bd4:	88 85       	ldd	r24, Y+8	; 0x08
    2bd6:	99 85       	ldd	r25, Y+9	; 0x09
    2bd8:	88 30       	cpi	r24, 0x08	; 8
    2bda:	91 05       	cpc	r25, r1
    2bdc:	09 f4       	brne	.+2      	; 0x2be0 <Gpt_Init+0x8d8>
    2bde:	8b c0       	rjmp	.+278    	; 0x2cf6 <Gpt_Init+0x9ee>
    2be0:	28 85       	ldd	r18, Y+8	; 0x08
    2be2:	39 85       	ldd	r19, Y+9	; 0x09
    2be4:	29 30       	cpi	r18, 0x09	; 9
    2be6:	31 05       	cpc	r19, r1
    2be8:	09 f4       	brne	.+2      	; 0x2bec <Gpt_Init+0x8e4>
    2bea:	9b c0       	rjmp	.+310    	; 0x2d22 <Gpt_Init+0xa1a>
    2bec:	b0 c0       	rjmp	.+352    	; 0x2d4e <Gpt_Init+0xa46>
        {
        case GPT_PRESCALER_0:
            CLR_BIT(TCCR0, TCCR0_CS00);
    2bee:	a3 e5       	ldi	r26, 0x53	; 83
    2bf0:	b0 e0       	ldi	r27, 0x00	; 0
    2bf2:	e3 e5       	ldi	r30, 0x53	; 83
    2bf4:	f0 e0       	ldi	r31, 0x00	; 0
    2bf6:	80 81       	ld	r24, Z
    2bf8:	8e 7f       	andi	r24, 0xFE	; 254
    2bfa:	8c 93       	st	X, r24
            CLR_BIT(TCCR0, TCCR0_CS01);
    2bfc:	a3 e5       	ldi	r26, 0x53	; 83
    2bfe:	b0 e0       	ldi	r27, 0x00	; 0
    2c00:	e3 e5       	ldi	r30, 0x53	; 83
    2c02:	f0 e0       	ldi	r31, 0x00	; 0
    2c04:	80 81       	ld	r24, Z
    2c06:	8d 7f       	andi	r24, 0xFD	; 253
    2c08:	8c 93       	st	X, r24
            CLR_BIT(TCCR0, TCCR0_CS02);
    2c0a:	a3 e5       	ldi	r26, 0x53	; 83
    2c0c:	b0 e0       	ldi	r27, 0x00	; 0
    2c0e:	e3 e5       	ldi	r30, 0x53	; 83
    2c10:	f0 e0       	ldi	r31, 0x00	; 0
    2c12:	80 81       	ld	r24, Z
    2c14:	8b 7f       	andi	r24, 0xFB	; 251
    2c16:	8c 93       	st	X, r24
    2c18:	11 c2       	rjmp	.+1058   	; 0x303c <Gpt_Init+0xd34>
            break;
        case GPT_PRESCALER_1:
            SET_BIT(TCCR0, TCCR0_CS00);
    2c1a:	a3 e5       	ldi	r26, 0x53	; 83
    2c1c:	b0 e0       	ldi	r27, 0x00	; 0
    2c1e:	e3 e5       	ldi	r30, 0x53	; 83
    2c20:	f0 e0       	ldi	r31, 0x00	; 0
    2c22:	80 81       	ld	r24, Z
    2c24:	81 60       	ori	r24, 0x01	; 1
    2c26:	8c 93       	st	X, r24
            CLR_BIT(TCCR0, TCCR0_CS01);
    2c28:	a3 e5       	ldi	r26, 0x53	; 83
    2c2a:	b0 e0       	ldi	r27, 0x00	; 0
    2c2c:	e3 e5       	ldi	r30, 0x53	; 83
    2c2e:	f0 e0       	ldi	r31, 0x00	; 0
    2c30:	80 81       	ld	r24, Z
    2c32:	8d 7f       	andi	r24, 0xFD	; 253
    2c34:	8c 93       	st	X, r24
            CLR_BIT(TCCR0, TCCR0_CS02);
    2c36:	a3 e5       	ldi	r26, 0x53	; 83
    2c38:	b0 e0       	ldi	r27, 0x00	; 0
    2c3a:	e3 e5       	ldi	r30, 0x53	; 83
    2c3c:	f0 e0       	ldi	r31, 0x00	; 0
    2c3e:	80 81       	ld	r24, Z
    2c40:	8b 7f       	andi	r24, 0xFB	; 251
    2c42:	8c 93       	st	X, r24
    2c44:	fb c1       	rjmp	.+1014   	; 0x303c <Gpt_Init+0xd34>
            break;
        case GPT_PRESCALER_8:
            CLR_BIT(TCCR0, TCCR0_CS00);
    2c46:	a3 e5       	ldi	r26, 0x53	; 83
    2c48:	b0 e0       	ldi	r27, 0x00	; 0
    2c4a:	e3 e5       	ldi	r30, 0x53	; 83
    2c4c:	f0 e0       	ldi	r31, 0x00	; 0
    2c4e:	80 81       	ld	r24, Z
    2c50:	8e 7f       	andi	r24, 0xFE	; 254
    2c52:	8c 93       	st	X, r24
            SET_BIT(TCCR0, TCCR0_CS01);
    2c54:	a3 e5       	ldi	r26, 0x53	; 83
    2c56:	b0 e0       	ldi	r27, 0x00	; 0
    2c58:	e3 e5       	ldi	r30, 0x53	; 83
    2c5a:	f0 e0       	ldi	r31, 0x00	; 0
    2c5c:	80 81       	ld	r24, Z
    2c5e:	82 60       	ori	r24, 0x02	; 2
    2c60:	8c 93       	st	X, r24
            CLR_BIT(TCCR0, TCCR0_CS02);
    2c62:	a3 e5       	ldi	r26, 0x53	; 83
    2c64:	b0 e0       	ldi	r27, 0x00	; 0
    2c66:	e3 e5       	ldi	r30, 0x53	; 83
    2c68:	f0 e0       	ldi	r31, 0x00	; 0
    2c6a:	80 81       	ld	r24, Z
    2c6c:	8b 7f       	andi	r24, 0xFB	; 251
    2c6e:	8c 93       	st	X, r24
    2c70:	e5 c1       	rjmp	.+970    	; 0x303c <Gpt_Init+0xd34>
            break;
        case GPT_PRESCALER_64:
            SET_BIT(TCCR0, TCCR0_CS00);
    2c72:	a3 e5       	ldi	r26, 0x53	; 83
    2c74:	b0 e0       	ldi	r27, 0x00	; 0
    2c76:	e3 e5       	ldi	r30, 0x53	; 83
    2c78:	f0 e0       	ldi	r31, 0x00	; 0
    2c7a:	80 81       	ld	r24, Z
    2c7c:	81 60       	ori	r24, 0x01	; 1
    2c7e:	8c 93       	st	X, r24
            SET_BIT(TCCR0, TCCR0_CS01);
    2c80:	a3 e5       	ldi	r26, 0x53	; 83
    2c82:	b0 e0       	ldi	r27, 0x00	; 0
    2c84:	e3 e5       	ldi	r30, 0x53	; 83
    2c86:	f0 e0       	ldi	r31, 0x00	; 0
    2c88:	80 81       	ld	r24, Z
    2c8a:	82 60       	ori	r24, 0x02	; 2
    2c8c:	8c 93       	st	X, r24
            CLR_BIT(TCCR0, TCCR0_CS02);
    2c8e:	a3 e5       	ldi	r26, 0x53	; 83
    2c90:	b0 e0       	ldi	r27, 0x00	; 0
    2c92:	e3 e5       	ldi	r30, 0x53	; 83
    2c94:	f0 e0       	ldi	r31, 0x00	; 0
    2c96:	80 81       	ld	r24, Z
    2c98:	8b 7f       	andi	r24, 0xFB	; 251
    2c9a:	8c 93       	st	X, r24
    2c9c:	cf c1       	rjmp	.+926    	; 0x303c <Gpt_Init+0xd34>
            // TODO
            break;
        case GPT_PRESCALER_256:
            CLR_BIT(TCCR0, TCCR0_CS00);
    2c9e:	a3 e5       	ldi	r26, 0x53	; 83
    2ca0:	b0 e0       	ldi	r27, 0x00	; 0
    2ca2:	e3 e5       	ldi	r30, 0x53	; 83
    2ca4:	f0 e0       	ldi	r31, 0x00	; 0
    2ca6:	80 81       	ld	r24, Z
    2ca8:	8e 7f       	andi	r24, 0xFE	; 254
    2caa:	8c 93       	st	X, r24
            CLR_BIT(TCCR0, TCCR0_CS01);
    2cac:	a3 e5       	ldi	r26, 0x53	; 83
    2cae:	b0 e0       	ldi	r27, 0x00	; 0
    2cb0:	e3 e5       	ldi	r30, 0x53	; 83
    2cb2:	f0 e0       	ldi	r31, 0x00	; 0
    2cb4:	80 81       	ld	r24, Z
    2cb6:	8d 7f       	andi	r24, 0xFD	; 253
    2cb8:	8c 93       	st	X, r24
            SET_BIT(TCCR0, TCCR0_CS02);
    2cba:	a3 e5       	ldi	r26, 0x53	; 83
    2cbc:	b0 e0       	ldi	r27, 0x00	; 0
    2cbe:	e3 e5       	ldi	r30, 0x53	; 83
    2cc0:	f0 e0       	ldi	r31, 0x00	; 0
    2cc2:	80 81       	ld	r24, Z
    2cc4:	84 60       	ori	r24, 0x04	; 4
    2cc6:	8c 93       	st	X, r24
    2cc8:	b9 c1       	rjmp	.+882    	; 0x303c <Gpt_Init+0xd34>
            // TODO
            break;
        case GPT_PRESCALER_1024:
            SET_BIT(TCCR0, TCCR0_CS00);
    2cca:	a3 e5       	ldi	r26, 0x53	; 83
    2ccc:	b0 e0       	ldi	r27, 0x00	; 0
    2cce:	e3 e5       	ldi	r30, 0x53	; 83
    2cd0:	f0 e0       	ldi	r31, 0x00	; 0
    2cd2:	80 81       	ld	r24, Z
    2cd4:	81 60       	ori	r24, 0x01	; 1
    2cd6:	8c 93       	st	X, r24
            CLR_BIT(TCCR0, TCCR0_CS01);
    2cd8:	a3 e5       	ldi	r26, 0x53	; 83
    2cda:	b0 e0       	ldi	r27, 0x00	; 0
    2cdc:	e3 e5       	ldi	r30, 0x53	; 83
    2cde:	f0 e0       	ldi	r31, 0x00	; 0
    2ce0:	80 81       	ld	r24, Z
    2ce2:	8d 7f       	andi	r24, 0xFD	; 253
    2ce4:	8c 93       	st	X, r24
            SET_BIT(TCCR0, TCCR0_CS02);
    2ce6:	a3 e5       	ldi	r26, 0x53	; 83
    2ce8:	b0 e0       	ldi	r27, 0x00	; 0
    2cea:	e3 e5       	ldi	r30, 0x53	; 83
    2cec:	f0 e0       	ldi	r31, 0x00	; 0
    2cee:	80 81       	ld	r24, Z
    2cf0:	84 60       	ori	r24, 0x04	; 4
    2cf2:	8c 93       	st	X, r24
    2cf4:	a3 c1       	rjmp	.+838    	; 0x303c <Gpt_Init+0xd34>
            break;
        case GPT_PRESCALER_EXT_FALLING:
            CLR_BIT(TCCR0, TCCR0_CS00);
    2cf6:	a3 e5       	ldi	r26, 0x53	; 83
    2cf8:	b0 e0       	ldi	r27, 0x00	; 0
    2cfa:	e3 e5       	ldi	r30, 0x53	; 83
    2cfc:	f0 e0       	ldi	r31, 0x00	; 0
    2cfe:	80 81       	ld	r24, Z
    2d00:	8e 7f       	andi	r24, 0xFE	; 254
    2d02:	8c 93       	st	X, r24
            SET_BIT(TCCR0, TCCR0_CS01);
    2d04:	a3 e5       	ldi	r26, 0x53	; 83
    2d06:	b0 e0       	ldi	r27, 0x00	; 0
    2d08:	e3 e5       	ldi	r30, 0x53	; 83
    2d0a:	f0 e0       	ldi	r31, 0x00	; 0
    2d0c:	80 81       	ld	r24, Z
    2d0e:	82 60       	ori	r24, 0x02	; 2
    2d10:	8c 93       	st	X, r24
            SET_BIT(TCCR0, TCCR0_CS02);
    2d12:	a3 e5       	ldi	r26, 0x53	; 83
    2d14:	b0 e0       	ldi	r27, 0x00	; 0
    2d16:	e3 e5       	ldi	r30, 0x53	; 83
    2d18:	f0 e0       	ldi	r31, 0x00	; 0
    2d1a:	80 81       	ld	r24, Z
    2d1c:	84 60       	ori	r24, 0x04	; 4
    2d1e:	8c 93       	st	X, r24
    2d20:	8d c1       	rjmp	.+794    	; 0x303c <Gpt_Init+0xd34>
            // TODO
            break;
        case GPT_PRESCALER_EXT_RISING:
            SET_BIT(TCCR0, TCCR0_CS00);
    2d22:	a3 e5       	ldi	r26, 0x53	; 83
    2d24:	b0 e0       	ldi	r27, 0x00	; 0
    2d26:	e3 e5       	ldi	r30, 0x53	; 83
    2d28:	f0 e0       	ldi	r31, 0x00	; 0
    2d2a:	80 81       	ld	r24, Z
    2d2c:	81 60       	ori	r24, 0x01	; 1
    2d2e:	8c 93       	st	X, r24
            SET_BIT(TCCR0, TCCR0_CS01);
    2d30:	a3 e5       	ldi	r26, 0x53	; 83
    2d32:	b0 e0       	ldi	r27, 0x00	; 0
    2d34:	e3 e5       	ldi	r30, 0x53	; 83
    2d36:	f0 e0       	ldi	r31, 0x00	; 0
    2d38:	80 81       	ld	r24, Z
    2d3a:	82 60       	ori	r24, 0x02	; 2
    2d3c:	8c 93       	st	X, r24
            SET_BIT(TCCR0, TCCR0_CS02);
    2d3e:	a3 e5       	ldi	r26, 0x53	; 83
    2d40:	b0 e0       	ldi	r27, 0x00	; 0
    2d42:	e3 e5       	ldi	r30, 0x53	; 83
    2d44:	f0 e0       	ldi	r31, 0x00	; 0
    2d46:	80 81       	ld	r24, Z
    2d48:	84 60       	ori	r24, 0x04	; 4
    2d4a:	8c 93       	st	X, r24
    2d4c:	77 c1       	rjmp	.+750    	; 0x303c <Gpt_Init+0xd34>
            // TODO
            break;
        default:
            returnValue = GPT_ERROR;
    2d4e:	19 82       	std	Y+1, r1	; 0x01
    2d50:	75 c1       	rjmp	.+746    	; 0x303c <Gpt_Init+0xd34>
        }
        break;

    case GPT_CHANNEL_TIMER2:
        /*Waveform Generation Mode*/
        if (config->mode == GPT_MODE_NORMAL)
    2d52:	ea 81       	ldd	r30, Y+2	; 0x02
    2d54:	fb 81       	ldd	r31, Y+3	; 0x03
    2d56:	81 81       	ldd	r24, Z+1	; 0x01
    2d58:	88 23       	and	r24, r24
    2d5a:	79 f4       	brne	.+30     	; 0x2d7a <Gpt_Init+0xa72>
        {
            CLR_BIT(TCCR2, TCCR2_WGM20);
    2d5c:	a5 e4       	ldi	r26, 0x45	; 69
    2d5e:	b0 e0       	ldi	r27, 0x00	; 0
    2d60:	e5 e4       	ldi	r30, 0x45	; 69
    2d62:	f0 e0       	ldi	r31, 0x00	; 0
    2d64:	80 81       	ld	r24, Z
    2d66:	8f 7b       	andi	r24, 0xBF	; 191
    2d68:	8c 93       	st	X, r24
            CLR_BIT(TCCR2, TCCR2_WGM21);
    2d6a:	a5 e4       	ldi	r26, 0x45	; 69
    2d6c:	b0 e0       	ldi	r27, 0x00	; 0
    2d6e:	e5 e4       	ldi	r30, 0x45	; 69
    2d70:	f0 e0       	ldi	r31, 0x00	; 0
    2d72:	80 81       	ld	r24, Z
    2d74:	87 7f       	andi	r24, 0xF7	; 247
    2d76:	8c 93       	st	X, r24
    2d78:	15 c0       	rjmp	.+42     	; 0x2da4 <Gpt_Init+0xa9c>
            // TODO
            // TODO
        }
        else if (config->mode == GPT_MODE_CTC)
    2d7a:	ea 81       	ldd	r30, Y+2	; 0x02
    2d7c:	fb 81       	ldd	r31, Y+3	; 0x03
    2d7e:	81 81       	ldd	r24, Z+1	; 0x01
    2d80:	81 30       	cpi	r24, 0x01	; 1
    2d82:	79 f4       	brne	.+30     	; 0x2da2 <Gpt_Init+0xa9a>
        {
            CLR_BIT(TCCR2, TCCR2_WGM20);
    2d84:	a5 e4       	ldi	r26, 0x45	; 69
    2d86:	b0 e0       	ldi	r27, 0x00	; 0
    2d88:	e5 e4       	ldi	r30, 0x45	; 69
    2d8a:	f0 e0       	ldi	r31, 0x00	; 0
    2d8c:	80 81       	ld	r24, Z
    2d8e:	8f 7b       	andi	r24, 0xBF	; 191
    2d90:	8c 93       	st	X, r24
            SET_BIT(TCCR2, TCCR2_WGM21);
    2d92:	a5 e4       	ldi	r26, 0x45	; 69
    2d94:	b0 e0       	ldi	r27, 0x00	; 0
    2d96:	e5 e4       	ldi	r30, 0x45	; 69
    2d98:	f0 e0       	ldi	r31, 0x00	; 0
    2d9a:	80 81       	ld	r24, Z
    2d9c:	88 60       	ori	r24, 0x08	; 8
    2d9e:	8c 93       	st	X, r24
    2da0:	01 c0       	rjmp	.+2      	; 0x2da4 <Gpt_Init+0xa9c>
            // TODO
            // TODO
        }
        else
        {
            returnValue = GPT_ERROR;
    2da2:	19 82       	std	Y+1, r1	; 0x01
        }

        /*Compare Match Output Mode*/
        switch (config->output)
    2da4:	ea 81       	ldd	r30, Y+2	; 0x02
    2da6:	fb 81       	ldd	r31, Y+3	; 0x03
    2da8:	82 81       	ldd	r24, Z+2	; 0x02
    2daa:	28 2f       	mov	r18, r24
    2dac:	30 e0       	ldi	r19, 0x00	; 0
    2dae:	3f 83       	std	Y+7, r19	; 0x07
    2db0:	2e 83       	std	Y+6, r18	; 0x06
    2db2:	8e 81       	ldd	r24, Y+6	; 0x06
    2db4:	9f 81       	ldd	r25, Y+7	; 0x07
    2db6:	81 30       	cpi	r24, 0x01	; 1
    2db8:	91 05       	cpc	r25, r1
    2dba:	21 f1       	breq	.+72     	; 0x2e04 <Gpt_Init+0xafc>
    2dbc:	2e 81       	ldd	r18, Y+6	; 0x06
    2dbe:	3f 81       	ldd	r19, Y+7	; 0x07
    2dc0:	22 30       	cpi	r18, 0x02	; 2
    2dc2:	31 05       	cpc	r19, r1
    2dc4:	2c f4       	brge	.+10     	; 0x2dd0 <Gpt_Init+0xac8>
    2dc6:	8e 81       	ldd	r24, Y+6	; 0x06
    2dc8:	9f 81       	ldd	r25, Y+7	; 0x07
    2dca:	00 97       	sbiw	r24, 0x00	; 0
    2dcc:	61 f0       	breq	.+24     	; 0x2de6 <Gpt_Init+0xade>
    2dce:	47 c0       	rjmp	.+142    	; 0x2e5e <Gpt_Init+0xb56>
    2dd0:	2e 81       	ldd	r18, Y+6	; 0x06
    2dd2:	3f 81       	ldd	r19, Y+7	; 0x07
    2dd4:	22 30       	cpi	r18, 0x02	; 2
    2dd6:	31 05       	cpc	r19, r1
    2dd8:	21 f1       	breq	.+72     	; 0x2e22 <Gpt_Init+0xb1a>
    2dda:	8e 81       	ldd	r24, Y+6	; 0x06
    2ddc:	9f 81       	ldd	r25, Y+7	; 0x07
    2dde:	83 30       	cpi	r24, 0x03	; 3
    2de0:	91 05       	cpc	r25, r1
    2de2:	71 f1       	breq	.+92     	; 0x2e40 <Gpt_Init+0xb38>
    2de4:	3c c0       	rjmp	.+120    	; 0x2e5e <Gpt_Init+0xb56>
        {
        case GPT_OUTPUT_NORMAL:
            CLR_BIT(TCCR2, TCCR2_COM20);
    2de6:	a5 e4       	ldi	r26, 0x45	; 69
    2de8:	b0 e0       	ldi	r27, 0x00	; 0
    2dea:	e5 e4       	ldi	r30, 0x45	; 69
    2dec:	f0 e0       	ldi	r31, 0x00	; 0
    2dee:	80 81       	ld	r24, Z
    2df0:	8f 7e       	andi	r24, 0xEF	; 239
    2df2:	8c 93       	st	X, r24
            CLR_BIT(TCCR2, TCCR2_COM21);
    2df4:	a5 e4       	ldi	r26, 0x45	; 69
    2df6:	b0 e0       	ldi	r27, 0x00	; 0
    2df8:	e5 e4       	ldi	r30, 0x45	; 69
    2dfa:	f0 e0       	ldi	r31, 0x00	; 0
    2dfc:	80 81       	ld	r24, Z
    2dfe:	8f 7d       	andi	r24, 0xDF	; 223
    2e00:	8c 93       	st	X, r24
    2e02:	2e c0       	rjmp	.+92     	; 0x2e60 <Gpt_Init+0xb58>
            // TODO
            break;
        case GPT_OUTPUT_TOGGLE:
            SET_BIT(TCCR2, TCCR2_COM20);
    2e04:	a5 e4       	ldi	r26, 0x45	; 69
    2e06:	b0 e0       	ldi	r27, 0x00	; 0
    2e08:	e5 e4       	ldi	r30, 0x45	; 69
    2e0a:	f0 e0       	ldi	r31, 0x00	; 0
    2e0c:	80 81       	ld	r24, Z
    2e0e:	80 61       	ori	r24, 0x10	; 16
    2e10:	8c 93       	st	X, r24
            CLR_BIT(TCCR2, TCCR2_COM21);
    2e12:	a5 e4       	ldi	r26, 0x45	; 69
    2e14:	b0 e0       	ldi	r27, 0x00	; 0
    2e16:	e5 e4       	ldi	r30, 0x45	; 69
    2e18:	f0 e0       	ldi	r31, 0x00	; 0
    2e1a:	80 81       	ld	r24, Z
    2e1c:	8f 7d       	andi	r24, 0xDF	; 223
    2e1e:	8c 93       	st	X, r24
    2e20:	1f c0       	rjmp	.+62     	; 0x2e60 <Gpt_Init+0xb58>
            // TODO
            break;
        case GPT_OUTPUT_SET:
            SET_BIT(TCCR2, TCCR2_COM20);
    2e22:	a5 e4       	ldi	r26, 0x45	; 69
    2e24:	b0 e0       	ldi	r27, 0x00	; 0
    2e26:	e5 e4       	ldi	r30, 0x45	; 69
    2e28:	f0 e0       	ldi	r31, 0x00	; 0
    2e2a:	80 81       	ld	r24, Z
    2e2c:	80 61       	ori	r24, 0x10	; 16
    2e2e:	8c 93       	st	X, r24
            SET_BIT(TCCR2, TCCR2_COM21);
    2e30:	a5 e4       	ldi	r26, 0x45	; 69
    2e32:	b0 e0       	ldi	r27, 0x00	; 0
    2e34:	e5 e4       	ldi	r30, 0x45	; 69
    2e36:	f0 e0       	ldi	r31, 0x00	; 0
    2e38:	80 81       	ld	r24, Z
    2e3a:	80 62       	ori	r24, 0x20	; 32
    2e3c:	8c 93       	st	X, r24
    2e3e:	10 c0       	rjmp	.+32     	; 0x2e60 <Gpt_Init+0xb58>
            // TODO
            break;
        case GPT_OUTPUT_CLEAR:
            CLR_BIT(TCCR2, TCCR2_COM20);
    2e40:	a5 e4       	ldi	r26, 0x45	; 69
    2e42:	b0 e0       	ldi	r27, 0x00	; 0
    2e44:	e5 e4       	ldi	r30, 0x45	; 69
    2e46:	f0 e0       	ldi	r31, 0x00	; 0
    2e48:	80 81       	ld	r24, Z
    2e4a:	8f 7e       	andi	r24, 0xEF	; 239
    2e4c:	8c 93       	st	X, r24
            SET_BIT(TCCR2, TCCR2_COM21);
    2e4e:	a5 e4       	ldi	r26, 0x45	; 69
    2e50:	b0 e0       	ldi	r27, 0x00	; 0
    2e52:	e5 e4       	ldi	r30, 0x45	; 69
    2e54:	f0 e0       	ldi	r31, 0x00	; 0
    2e56:	80 81       	ld	r24, Z
    2e58:	80 62       	ori	r24, 0x20	; 32
    2e5a:	8c 93       	st	X, r24
    2e5c:	01 c0       	rjmp	.+2      	; 0x2e60 <Gpt_Init+0xb58>
            // TODO
            break;
        default:
            returnValue = GPT_ERROR;
    2e5e:	19 82       	std	Y+1, r1	; 0x01
            break;
        }

        /*Clock Select*/
        switch (config->prescaler)
    2e60:	ea 81       	ldd	r30, Y+2	; 0x02
    2e62:	fb 81       	ldd	r31, Y+3	; 0x03
    2e64:	83 81       	ldd	r24, Z+3	; 0x03
    2e66:	28 2f       	mov	r18, r24
    2e68:	30 e0       	ldi	r19, 0x00	; 0
    2e6a:	3d 83       	std	Y+5, r19	; 0x05
    2e6c:	2c 83       	std	Y+4, r18	; 0x04
    2e6e:	8c 81       	ldd	r24, Y+4	; 0x04
    2e70:	9d 81       	ldd	r25, Y+5	; 0x05
    2e72:	83 30       	cpi	r24, 0x03	; 3
    2e74:	91 05       	cpc	r25, r1
    2e76:	09 f4       	brne	.+2      	; 0x2e7a <Gpt_Init+0xb72>
    2e78:	70 c0       	rjmp	.+224    	; 0x2f5a <Gpt_Init+0xc52>
    2e7a:	2c 81       	ldd	r18, Y+4	; 0x04
    2e7c:	3d 81       	ldd	r19, Y+5	; 0x05
    2e7e:	24 30       	cpi	r18, 0x04	; 4
    2e80:	31 05       	cpc	r19, r1
    2e82:	84 f4       	brge	.+32     	; 0x2ea4 <Gpt_Init+0xb9c>
    2e84:	8c 81       	ldd	r24, Y+4	; 0x04
    2e86:	9d 81       	ldd	r25, Y+5	; 0x05
    2e88:	81 30       	cpi	r24, 0x01	; 1
    2e8a:	91 05       	cpc	r25, r1
    2e8c:	d1 f1       	breq	.+116    	; 0x2f02 <Gpt_Init+0xbfa>
    2e8e:	2c 81       	ldd	r18, Y+4	; 0x04
    2e90:	3d 81       	ldd	r19, Y+5	; 0x05
    2e92:	22 30       	cpi	r18, 0x02	; 2
    2e94:	31 05       	cpc	r19, r1
    2e96:	0c f0       	brlt	.+2      	; 0x2e9a <Gpt_Init+0xb92>
    2e98:	4a c0       	rjmp	.+148    	; 0x2f2e <Gpt_Init+0xc26>
    2e9a:	8c 81       	ldd	r24, Y+4	; 0x04
    2e9c:	9d 81       	ldd	r25, Y+5	; 0x05
    2e9e:	00 97       	sbiw	r24, 0x00	; 0
    2ea0:	d1 f0       	breq	.+52     	; 0x2ed6 <Gpt_Init+0xbce>
    2ea2:	c9 c0       	rjmp	.+402    	; 0x3036 <Gpt_Init+0xd2e>
    2ea4:	2c 81       	ldd	r18, Y+4	; 0x04
    2ea6:	3d 81       	ldd	r19, Y+5	; 0x05
    2ea8:	25 30       	cpi	r18, 0x05	; 5
    2eaa:	31 05       	cpc	r19, r1
    2eac:	09 f4       	brne	.+2      	; 0x2eb0 <Gpt_Init+0xba8>
    2eae:	81 c0       	rjmp	.+258    	; 0x2fb2 <Gpt_Init+0xcaa>
    2eb0:	8c 81       	ldd	r24, Y+4	; 0x04
    2eb2:	9d 81       	ldd	r25, Y+5	; 0x05
    2eb4:	85 30       	cpi	r24, 0x05	; 5
    2eb6:	91 05       	cpc	r25, r1
    2eb8:	0c f4       	brge	.+2      	; 0x2ebc <Gpt_Init+0xbb4>
    2eba:	65 c0       	rjmp	.+202    	; 0x2f86 <Gpt_Init+0xc7e>
    2ebc:	2c 81       	ldd	r18, Y+4	; 0x04
    2ebe:	3d 81       	ldd	r19, Y+5	; 0x05
    2ec0:	26 30       	cpi	r18, 0x06	; 6
    2ec2:	31 05       	cpc	r19, r1
    2ec4:	09 f4       	brne	.+2      	; 0x2ec8 <Gpt_Init+0xbc0>
    2ec6:	8b c0       	rjmp	.+278    	; 0x2fde <Gpt_Init+0xcd6>
    2ec8:	8c 81       	ldd	r24, Y+4	; 0x04
    2eca:	9d 81       	ldd	r25, Y+5	; 0x05
    2ecc:	87 30       	cpi	r24, 0x07	; 7
    2ece:	91 05       	cpc	r25, r1
    2ed0:	09 f4       	brne	.+2      	; 0x2ed4 <Gpt_Init+0xbcc>
    2ed2:	9b c0       	rjmp	.+310    	; 0x300a <Gpt_Init+0xd02>
    2ed4:	b0 c0       	rjmp	.+352    	; 0x3036 <Gpt_Init+0xd2e>
        {
        case GPT_PRESCALER_0:
            CLR_BIT(TCCR0, TCCR0_CS00);
    2ed6:	a3 e5       	ldi	r26, 0x53	; 83
    2ed8:	b0 e0       	ldi	r27, 0x00	; 0
    2eda:	e3 e5       	ldi	r30, 0x53	; 83
    2edc:	f0 e0       	ldi	r31, 0x00	; 0
    2ede:	80 81       	ld	r24, Z
    2ee0:	8e 7f       	andi	r24, 0xFE	; 254
    2ee2:	8c 93       	st	X, r24
            CLR_BIT(TCCR0, TCCR0_CS01);
    2ee4:	a3 e5       	ldi	r26, 0x53	; 83
    2ee6:	b0 e0       	ldi	r27, 0x00	; 0
    2ee8:	e3 e5       	ldi	r30, 0x53	; 83
    2eea:	f0 e0       	ldi	r31, 0x00	; 0
    2eec:	80 81       	ld	r24, Z
    2eee:	8d 7f       	andi	r24, 0xFD	; 253
    2ef0:	8c 93       	st	X, r24
            CLR_BIT(TCCR0, TCCR0_CS02);
    2ef2:	a3 e5       	ldi	r26, 0x53	; 83
    2ef4:	b0 e0       	ldi	r27, 0x00	; 0
    2ef6:	e3 e5       	ldi	r30, 0x53	; 83
    2ef8:	f0 e0       	ldi	r31, 0x00	; 0
    2efa:	80 81       	ld	r24, Z
    2efc:	8b 7f       	andi	r24, 0xFB	; 251
    2efe:	8c 93       	st	X, r24
    2f00:	9d c0       	rjmp	.+314    	; 0x303c <Gpt_Init+0xd34>
            break;
        case GPT_PRESCALER_1:
            SET_BIT(TCCR0, TCCR0_CS00);
    2f02:	a3 e5       	ldi	r26, 0x53	; 83
    2f04:	b0 e0       	ldi	r27, 0x00	; 0
    2f06:	e3 e5       	ldi	r30, 0x53	; 83
    2f08:	f0 e0       	ldi	r31, 0x00	; 0
    2f0a:	80 81       	ld	r24, Z
    2f0c:	81 60       	ori	r24, 0x01	; 1
    2f0e:	8c 93       	st	X, r24
            CLR_BIT(TCCR0, TCCR0_CS01);
    2f10:	a3 e5       	ldi	r26, 0x53	; 83
    2f12:	b0 e0       	ldi	r27, 0x00	; 0
    2f14:	e3 e5       	ldi	r30, 0x53	; 83
    2f16:	f0 e0       	ldi	r31, 0x00	; 0
    2f18:	80 81       	ld	r24, Z
    2f1a:	8d 7f       	andi	r24, 0xFD	; 253
    2f1c:	8c 93       	st	X, r24
            CLR_BIT(TCCR0, TCCR0_CS02);
    2f1e:	a3 e5       	ldi	r26, 0x53	; 83
    2f20:	b0 e0       	ldi	r27, 0x00	; 0
    2f22:	e3 e5       	ldi	r30, 0x53	; 83
    2f24:	f0 e0       	ldi	r31, 0x00	; 0
    2f26:	80 81       	ld	r24, Z
    2f28:	8b 7f       	andi	r24, 0xFB	; 251
    2f2a:	8c 93       	st	X, r24
    2f2c:	87 c0       	rjmp	.+270    	; 0x303c <Gpt_Init+0xd34>
            break;
        case GPT_PRESCALER_8:
            CLR_BIT(TCCR0, TCCR0_CS00);
    2f2e:	a3 e5       	ldi	r26, 0x53	; 83
    2f30:	b0 e0       	ldi	r27, 0x00	; 0
    2f32:	e3 e5       	ldi	r30, 0x53	; 83
    2f34:	f0 e0       	ldi	r31, 0x00	; 0
    2f36:	80 81       	ld	r24, Z
    2f38:	8e 7f       	andi	r24, 0xFE	; 254
    2f3a:	8c 93       	st	X, r24
            SET_BIT(TCCR0, TCCR0_CS01);
    2f3c:	a3 e5       	ldi	r26, 0x53	; 83
    2f3e:	b0 e0       	ldi	r27, 0x00	; 0
    2f40:	e3 e5       	ldi	r30, 0x53	; 83
    2f42:	f0 e0       	ldi	r31, 0x00	; 0
    2f44:	80 81       	ld	r24, Z
    2f46:	82 60       	ori	r24, 0x02	; 2
    2f48:	8c 93       	st	X, r24
            CLR_BIT(TCCR0, TCCR0_CS02);
    2f4a:	a3 e5       	ldi	r26, 0x53	; 83
    2f4c:	b0 e0       	ldi	r27, 0x00	; 0
    2f4e:	e3 e5       	ldi	r30, 0x53	; 83
    2f50:	f0 e0       	ldi	r31, 0x00	; 0
    2f52:	80 81       	ld	r24, Z
    2f54:	8b 7f       	andi	r24, 0xFB	; 251
    2f56:	8c 93       	st	X, r24
    2f58:	71 c0       	rjmp	.+226    	; 0x303c <Gpt_Init+0xd34>
            break;
        case GPT_PRESCALER_32:
            SET_BIT(TCCR0, TCCR0_CS00);
    2f5a:	a3 e5       	ldi	r26, 0x53	; 83
    2f5c:	b0 e0       	ldi	r27, 0x00	; 0
    2f5e:	e3 e5       	ldi	r30, 0x53	; 83
    2f60:	f0 e0       	ldi	r31, 0x00	; 0
    2f62:	80 81       	ld	r24, Z
    2f64:	81 60       	ori	r24, 0x01	; 1
    2f66:	8c 93       	st	X, r24
            SET_BIT(TCCR0, TCCR0_CS01);
    2f68:	a3 e5       	ldi	r26, 0x53	; 83
    2f6a:	b0 e0       	ldi	r27, 0x00	; 0
    2f6c:	e3 e5       	ldi	r30, 0x53	; 83
    2f6e:	f0 e0       	ldi	r31, 0x00	; 0
    2f70:	80 81       	ld	r24, Z
    2f72:	82 60       	ori	r24, 0x02	; 2
    2f74:	8c 93       	st	X, r24
            CLR_BIT(TCCR0, TCCR0_CS02);
    2f76:	a3 e5       	ldi	r26, 0x53	; 83
    2f78:	b0 e0       	ldi	r27, 0x00	; 0
    2f7a:	e3 e5       	ldi	r30, 0x53	; 83
    2f7c:	f0 e0       	ldi	r31, 0x00	; 0
    2f7e:	80 81       	ld	r24, Z
    2f80:	8b 7f       	andi	r24, 0xFB	; 251
    2f82:	8c 93       	st	X, r24
    2f84:	5b c0       	rjmp	.+182    	; 0x303c <Gpt_Init+0xd34>
            // TODO
            break;
        case GPT_PRESCALER_64:
            CLR_BIT(TCCR0, TCCR0_CS00);
    2f86:	a3 e5       	ldi	r26, 0x53	; 83
    2f88:	b0 e0       	ldi	r27, 0x00	; 0
    2f8a:	e3 e5       	ldi	r30, 0x53	; 83
    2f8c:	f0 e0       	ldi	r31, 0x00	; 0
    2f8e:	80 81       	ld	r24, Z
    2f90:	8e 7f       	andi	r24, 0xFE	; 254
    2f92:	8c 93       	st	X, r24
            CLR_BIT(TCCR0, TCCR0_CS01);
    2f94:	a3 e5       	ldi	r26, 0x53	; 83
    2f96:	b0 e0       	ldi	r27, 0x00	; 0
    2f98:	e3 e5       	ldi	r30, 0x53	; 83
    2f9a:	f0 e0       	ldi	r31, 0x00	; 0
    2f9c:	80 81       	ld	r24, Z
    2f9e:	8d 7f       	andi	r24, 0xFD	; 253
    2fa0:	8c 93       	st	X, r24
            SET_BIT(TCCR0, TCCR0_CS02);
    2fa2:	a3 e5       	ldi	r26, 0x53	; 83
    2fa4:	b0 e0       	ldi	r27, 0x00	; 0
    2fa6:	e3 e5       	ldi	r30, 0x53	; 83
    2fa8:	f0 e0       	ldi	r31, 0x00	; 0
    2faa:	80 81       	ld	r24, Z
    2fac:	84 60       	ori	r24, 0x04	; 4
    2fae:	8c 93       	st	X, r24
    2fb0:	45 c0       	rjmp	.+138    	; 0x303c <Gpt_Init+0xd34>
            // TODO
            break;
        case GPT_PRESCALER_128:
            SET_BIT(TCCR0, TCCR0_CS00);
    2fb2:	a3 e5       	ldi	r26, 0x53	; 83
    2fb4:	b0 e0       	ldi	r27, 0x00	; 0
    2fb6:	e3 e5       	ldi	r30, 0x53	; 83
    2fb8:	f0 e0       	ldi	r31, 0x00	; 0
    2fba:	80 81       	ld	r24, Z
    2fbc:	81 60       	ori	r24, 0x01	; 1
    2fbe:	8c 93       	st	X, r24
            CLR_BIT(TCCR0, TCCR0_CS01);
    2fc0:	a3 e5       	ldi	r26, 0x53	; 83
    2fc2:	b0 e0       	ldi	r27, 0x00	; 0
    2fc4:	e3 e5       	ldi	r30, 0x53	; 83
    2fc6:	f0 e0       	ldi	r31, 0x00	; 0
    2fc8:	80 81       	ld	r24, Z
    2fca:	8d 7f       	andi	r24, 0xFD	; 253
    2fcc:	8c 93       	st	X, r24
            SET_BIT(TCCR0, TCCR0_CS02);
    2fce:	a3 e5       	ldi	r26, 0x53	; 83
    2fd0:	b0 e0       	ldi	r27, 0x00	; 0
    2fd2:	e3 e5       	ldi	r30, 0x53	; 83
    2fd4:	f0 e0       	ldi	r31, 0x00	; 0
    2fd6:	80 81       	ld	r24, Z
    2fd8:	84 60       	ori	r24, 0x04	; 4
    2fda:	8c 93       	st	X, r24
    2fdc:	2f c0       	rjmp	.+94     	; 0x303c <Gpt_Init+0xd34>
            break;
        case GPT_PRESCALER_256:
            CLR_BIT(TCCR0, TCCR0_CS00);
    2fde:	a3 e5       	ldi	r26, 0x53	; 83
    2fe0:	b0 e0       	ldi	r27, 0x00	; 0
    2fe2:	e3 e5       	ldi	r30, 0x53	; 83
    2fe4:	f0 e0       	ldi	r31, 0x00	; 0
    2fe6:	80 81       	ld	r24, Z
    2fe8:	8e 7f       	andi	r24, 0xFE	; 254
    2fea:	8c 93       	st	X, r24
            SET_BIT(TCCR0, TCCR0_CS01);
    2fec:	a3 e5       	ldi	r26, 0x53	; 83
    2fee:	b0 e0       	ldi	r27, 0x00	; 0
    2ff0:	e3 e5       	ldi	r30, 0x53	; 83
    2ff2:	f0 e0       	ldi	r31, 0x00	; 0
    2ff4:	80 81       	ld	r24, Z
    2ff6:	82 60       	ori	r24, 0x02	; 2
    2ff8:	8c 93       	st	X, r24
            SET_BIT(TCCR0, TCCR0_CS02);
    2ffa:	a3 e5       	ldi	r26, 0x53	; 83
    2ffc:	b0 e0       	ldi	r27, 0x00	; 0
    2ffe:	e3 e5       	ldi	r30, 0x53	; 83
    3000:	f0 e0       	ldi	r31, 0x00	; 0
    3002:	80 81       	ld	r24, Z
    3004:	84 60       	ori	r24, 0x04	; 4
    3006:	8c 93       	st	X, r24
    3008:	19 c0       	rjmp	.+50     	; 0x303c <Gpt_Init+0xd34>
            // TODO
            break;
        case GPT_PRESCALER_1024:
            SET_BIT(TCCR0, TCCR0_CS00);
    300a:	a3 e5       	ldi	r26, 0x53	; 83
    300c:	b0 e0       	ldi	r27, 0x00	; 0
    300e:	e3 e5       	ldi	r30, 0x53	; 83
    3010:	f0 e0       	ldi	r31, 0x00	; 0
    3012:	80 81       	ld	r24, Z
    3014:	81 60       	ori	r24, 0x01	; 1
    3016:	8c 93       	st	X, r24
            SET_BIT(TCCR0, TCCR0_CS01);
    3018:	a3 e5       	ldi	r26, 0x53	; 83
    301a:	b0 e0       	ldi	r27, 0x00	; 0
    301c:	e3 e5       	ldi	r30, 0x53	; 83
    301e:	f0 e0       	ldi	r31, 0x00	; 0
    3020:	80 81       	ld	r24, Z
    3022:	82 60       	ori	r24, 0x02	; 2
    3024:	8c 93       	st	X, r24
            SET_BIT(TCCR0, TCCR0_CS02);
    3026:	a3 e5       	ldi	r26, 0x53	; 83
    3028:	b0 e0       	ldi	r27, 0x00	; 0
    302a:	e3 e5       	ldi	r30, 0x53	; 83
    302c:	f0 e0       	ldi	r31, 0x00	; 0
    302e:	80 81       	ld	r24, Z
    3030:	84 60       	ori	r24, 0x04	; 4
    3032:	8c 93       	st	X, r24
    3034:	03 c0       	rjmp	.+6      	; 0x303c <Gpt_Init+0xd34>
            // TODO
            break;
        default:
            returnValue = GPT_ERROR;
    3036:	19 82       	std	Y+1, r1	; 0x01
    3038:	01 c0       	rjmp	.+2      	; 0x303c <Gpt_Init+0xd34>
            break;
        }
        break;

    default:
        returnValue = GPT_ERROR;
    303a:	19 82       	std	Y+1, r1	; 0x01
    }
    return returnValue;
    303c:	89 81       	ldd	r24, Y+1	; 0x01
}
    303e:	65 96       	adiw	r28, 0x15	; 21
    3040:	0f b6       	in	r0, 0x3f	; 63
    3042:	f8 94       	cli
    3044:	de bf       	out	0x3e, r29	; 62
    3046:	0f be       	out	0x3f, r0	; 63
    3048:	cd bf       	out	0x3d, r28	; 61
    304a:	cf 91       	pop	r28
    304c:	df 91       	pop	r29
    304e:	08 95       	ret

00003050 <Gpt_StartTimer>:

Gpt_ReturnType Gpt_StartTimer(Gpt_ChannelType channel, u16 value)
{
    3050:	df 93       	push	r29
    3052:	cf 93       	push	r28
    3054:	00 d0       	rcall	.+0      	; 0x3056 <Gpt_StartTimer+0x6>
    3056:	00 d0       	rcall	.+0      	; 0x3058 <Gpt_StartTimer+0x8>
    3058:	00 d0       	rcall	.+0      	; 0x305a <Gpt_StartTimer+0xa>
    305a:	cd b7       	in	r28, 0x3d	; 61
    305c:	de b7       	in	r29, 0x3e	; 62
    305e:	8a 83       	std	Y+2, r24	; 0x02
    3060:	7c 83       	std	Y+4, r23	; 0x04
    3062:	6b 83       	std	Y+3, r22	; 0x03
    Gpt_ReturnType returnValue = GPT_OK;
    3064:	81 e0       	ldi	r24, 0x01	; 1
    3066:	89 83       	std	Y+1, r24	; 0x01
    switch (channel)
    3068:	8a 81       	ldd	r24, Y+2	; 0x02
    306a:	28 2f       	mov	r18, r24
    306c:	30 e0       	ldi	r19, 0x00	; 0
    306e:	3e 83       	std	Y+6, r19	; 0x06
    3070:	2d 83       	std	Y+5, r18	; 0x05
    3072:	8d 81       	ldd	r24, Y+5	; 0x05
    3074:	9e 81       	ldd	r25, Y+6	; 0x06
    3076:	81 30       	cpi	r24, 0x01	; 1
    3078:	91 05       	cpc	r25, r1
    307a:	11 f1       	breq	.+68     	; 0x30c0 <Gpt_StartTimer+0x70>
    307c:	2d 81       	ldd	r18, Y+5	; 0x05
    307e:	3e 81       	ldd	r19, Y+6	; 0x06
    3080:	22 30       	cpi	r18, 0x02	; 2
    3082:	31 05       	cpc	r19, r1
    3084:	2c f4       	brge	.+10     	; 0x3090 <Gpt_StartTimer+0x40>
    3086:	8d 81       	ldd	r24, Y+5	; 0x05
    3088:	9e 81       	ldd	r25, Y+6	; 0x06
    308a:	00 97       	sbiw	r24, 0x00	; 0
    308c:	61 f0       	breq	.+24     	; 0x30a6 <Gpt_StartTimer+0x56>
    308e:	4c c0       	rjmp	.+152    	; 0x3128 <Gpt_StartTimer+0xd8>
    3090:	2d 81       	ldd	r18, Y+5	; 0x05
    3092:	3e 81       	ldd	r19, Y+6	; 0x06
    3094:	22 30       	cpi	r18, 0x02	; 2
    3096:	31 05       	cpc	r19, r1
    3098:	39 f1       	breq	.+78     	; 0x30e8 <Gpt_StartTimer+0x98>
    309a:	8d 81       	ldd	r24, Y+5	; 0x05
    309c:	9e 81       	ldd	r25, Y+6	; 0x06
    309e:	83 30       	cpi	r24, 0x03	; 3
    30a0:	91 05       	cpc	r25, r1
    30a2:	b1 f1       	breq	.+108    	; 0x3110 <Gpt_StartTimer+0xc0>
    30a4:	41 c0       	rjmp	.+130    	; 0x3128 <Gpt_StartTimer+0xd8>
    {
    case GPT_CHANNEL_TIMER0:
        if (value < 256)
    30a6:	8b 81       	ldd	r24, Y+3	; 0x03
    30a8:	9c 81       	ldd	r25, Y+4	; 0x04
    30aa:	8f 3f       	cpi	r24, 0xFF	; 255
    30ac:	91 05       	cpc	r25, r1
    30ae:	09 f0       	breq	.+2      	; 0x30b2 <Gpt_StartTimer+0x62>
    30b0:	28 f4       	brcc	.+10     	; 0x30bc <Gpt_StartTimer+0x6c>
        {
            OCR0 = value;
    30b2:	ec e5       	ldi	r30, 0x5C	; 92
    30b4:	f0 e0       	ldi	r31, 0x00	; 0
    30b6:	8b 81       	ldd	r24, Y+3	; 0x03
    30b8:	80 83       	st	Z, r24
    30ba:	36 c0       	rjmp	.+108    	; 0x3128 <Gpt_StartTimer+0xd8>
        }
        else
        {
            returnValue = GPT_ERROR;
    30bc:	19 82       	std	Y+1, r1	; 0x01
    30be:	34 c0       	rjmp	.+104    	; 0x3128 <Gpt_StartTimer+0xd8>
        }
        break;
    case GPT_CHANNEL_TIMER1A:
        if (value < 0xFFFF)
    30c0:	8b 81       	ldd	r24, Y+3	; 0x03
    30c2:	9c 81       	ldd	r25, Y+4	; 0x04
    30c4:	2f ef       	ldi	r18, 0xFF	; 255
    30c6:	8f 3f       	cpi	r24, 0xFF	; 255
    30c8:	92 07       	cpc	r25, r18
    30ca:	61 f0       	breq	.+24     	; 0x30e4 <Gpt_StartTimer+0x94>
        {
            OCR1AL=(0X0FF & value);
    30cc:	ea e4       	ldi	r30, 0x4A	; 74
    30ce:	f0 e0       	ldi	r31, 0x00	; 0
    30d0:	8b 81       	ldd	r24, Y+3	; 0x03
    30d2:	80 83       	st	Z, r24
            OCR1AH=(value>>8);
    30d4:	eb e4       	ldi	r30, 0x4B	; 75
    30d6:	f0 e0       	ldi	r31, 0x00	; 0
    30d8:	8b 81       	ldd	r24, Y+3	; 0x03
    30da:	9c 81       	ldd	r25, Y+4	; 0x04
    30dc:	89 2f       	mov	r24, r25
    30de:	99 27       	eor	r25, r25
    30e0:	80 83       	st	Z, r24
    30e2:	22 c0       	rjmp	.+68     	; 0x3128 <Gpt_StartTimer+0xd8>
        }
        else
        {
            returnValue = GPT_ERROR;
    30e4:	19 82       	std	Y+1, r1	; 0x01
    30e6:	20 c0       	rjmp	.+64     	; 0x3128 <Gpt_StartTimer+0xd8>
        }
        // TODO
        break;
    case GPT_CHANNEL_TIMER1B:
        if (value < 0xFFFF)
    30e8:	8b 81       	ldd	r24, Y+3	; 0x03
    30ea:	9c 81       	ldd	r25, Y+4	; 0x04
    30ec:	3f ef       	ldi	r19, 0xFF	; 255
    30ee:	8f 3f       	cpi	r24, 0xFF	; 255
    30f0:	93 07       	cpc	r25, r19
    30f2:	61 f0       	breq	.+24     	; 0x310c <Gpt_StartTimer+0xbc>
        {
            OCR1BL=(0X0FF & value);
    30f4:	e8 e4       	ldi	r30, 0x48	; 72
    30f6:	f0 e0       	ldi	r31, 0x00	; 0
    30f8:	8b 81       	ldd	r24, Y+3	; 0x03
    30fa:	80 83       	st	Z, r24
            OCR1BH=(value>>8);
    30fc:	e9 e4       	ldi	r30, 0x49	; 73
    30fe:	f0 e0       	ldi	r31, 0x00	; 0
    3100:	8b 81       	ldd	r24, Y+3	; 0x03
    3102:	9c 81       	ldd	r25, Y+4	; 0x04
    3104:	89 2f       	mov	r24, r25
    3106:	99 27       	eor	r25, r25
    3108:	80 83       	st	Z, r24
    310a:	0e c0       	rjmp	.+28     	; 0x3128 <Gpt_StartTimer+0xd8>
        }
        else
        {
            returnValue = GPT_ERROR;
    310c:	19 82       	std	Y+1, r1	; 0x01
    310e:	0c c0       	rjmp	.+24     	; 0x3128 <Gpt_StartTimer+0xd8>
        }
        // TODO
        break;
    case GPT_CHANNEL_TIMER2:
        if (value < 256)
    3110:	8b 81       	ldd	r24, Y+3	; 0x03
    3112:	9c 81       	ldd	r25, Y+4	; 0x04
    3114:	8f 3f       	cpi	r24, 0xFF	; 255
    3116:	91 05       	cpc	r25, r1
    3118:	09 f0       	breq	.+2      	; 0x311c <Gpt_StartTimer+0xcc>
    311a:	28 f4       	brcc	.+10     	; 0x3126 <Gpt_StartTimer+0xd6>
        {
            OCR2 = value;
    311c:	e3 e4       	ldi	r30, 0x43	; 67
    311e:	f0 e0       	ldi	r31, 0x00	; 0
    3120:	8b 81       	ldd	r24, Y+3	; 0x03
    3122:	80 83       	st	Z, r24
    3124:	01 c0       	rjmp	.+2      	; 0x3128 <Gpt_StartTimer+0xd8>
        }
        else
        {
            returnValue = GPT_ERROR;
    3126:	19 82       	std	Y+1, r1	; 0x01
        break;

    default:
        break;
    }
    return returnValue;
    3128:	89 81       	ldd	r24, Y+1	; 0x01
}
    312a:	26 96       	adiw	r28, 0x06	; 6
    312c:	0f b6       	in	r0, 0x3f	; 63
    312e:	f8 94       	cli
    3130:	de bf       	out	0x3e, r29	; 62
    3132:	0f be       	out	0x3f, r0	; 63
    3134:	cd bf       	out	0x3d, r28	; 61
    3136:	cf 91       	pop	r28
    3138:	df 91       	pop	r29
    313a:	08 95       	ret

0000313c <Gpt_GetTimeElapsed>:

u16 Gpt_GetTimeElapsed(Gpt_ChannelType channel)
{
    313c:	df 93       	push	r29
    313e:	cf 93       	push	r28
    3140:	00 d0       	rcall	.+0      	; 0x3142 <Gpt_GetTimeElapsed+0x6>
    3142:	00 d0       	rcall	.+0      	; 0x3144 <Gpt_GetTimeElapsed+0x8>
    3144:	0f 92       	push	r0
    3146:	cd b7       	in	r28, 0x3d	; 61
    3148:	de b7       	in	r29, 0x3e	; 62
    314a:	8b 83       	std	Y+3, r24	; 0x03
    u16 value = 0;
    314c:	1a 82       	std	Y+2, r1	; 0x02
    314e:	19 82       	std	Y+1, r1	; 0x01
    switch (channel)
    3150:	8b 81       	ldd	r24, Y+3	; 0x03
    3152:	28 2f       	mov	r18, r24
    3154:	30 e0       	ldi	r19, 0x00	; 0
    3156:	3d 83       	std	Y+5, r19	; 0x05
    3158:	2c 83       	std	Y+4, r18	; 0x04
    315a:	8c 81       	ldd	r24, Y+4	; 0x04
    315c:	9d 81       	ldd	r25, Y+5	; 0x05
    315e:	81 30       	cpi	r24, 0x01	; 1
    3160:	91 05       	cpc	r25, r1
    3162:	e9 f0       	breq	.+58     	; 0x319e <Gpt_GetTimeElapsed+0x62>
    3164:	2c 81       	ldd	r18, Y+4	; 0x04
    3166:	3d 81       	ldd	r19, Y+5	; 0x05
    3168:	22 30       	cpi	r18, 0x02	; 2
    316a:	31 05       	cpc	r19, r1
    316c:	2c f4       	brge	.+10     	; 0x3178 <Gpt_GetTimeElapsed+0x3c>
    316e:	8c 81       	ldd	r24, Y+4	; 0x04
    3170:	9d 81       	ldd	r25, Y+5	; 0x05
    3172:	00 97       	sbiw	r24, 0x00	; 0
    3174:	61 f0       	breq	.+24     	; 0x318e <Gpt_GetTimeElapsed+0x52>
    3176:	28 c0       	rjmp	.+80     	; 0x31c8 <Gpt_GetTimeElapsed+0x8c>
    3178:	2c 81       	ldd	r18, Y+4	; 0x04
    317a:	3d 81       	ldd	r19, Y+5	; 0x05
    317c:	22 30       	cpi	r18, 0x02	; 2
    317e:	31 05       	cpc	r19, r1
    3180:	a9 f0       	breq	.+42     	; 0x31ac <Gpt_GetTimeElapsed+0x70>
    3182:	8c 81       	ldd	r24, Y+4	; 0x04
    3184:	9d 81       	ldd	r25, Y+5	; 0x05
    3186:	83 30       	cpi	r24, 0x03	; 3
    3188:	91 05       	cpc	r25, r1
    318a:	b9 f0       	breq	.+46     	; 0x31ba <Gpt_GetTimeElapsed+0x7e>
    318c:	1d c0       	rjmp	.+58     	; 0x31c8 <Gpt_GetTimeElapsed+0x8c>
    {
    case GPT_CHANNEL_TIMER0:
        value = TCNT0;
    318e:	e2 e5       	ldi	r30, 0x52	; 82
    3190:	f0 e0       	ldi	r31, 0x00	; 0
    3192:	80 81       	ld	r24, Z
    3194:	88 2f       	mov	r24, r24
    3196:	90 e0       	ldi	r25, 0x00	; 0
    3198:	9a 83       	std	Y+2, r25	; 0x02
    319a:	89 83       	std	Y+1, r24	; 0x01
    319c:	15 c0       	rjmp	.+42     	; 0x31c8 <Gpt_GetTimeElapsed+0x8c>
        break;
    case GPT_CHANNEL_TIMER1A:
        // u16 dummy=(0XFFFF & TCNT1H);
        // dummy = dummy <<8;
        value=TCNT1HL_DATA_REGISTER;
    319e:	ec e4       	ldi	r30, 0x4C	; 76
    31a0:	f0 e0       	ldi	r31, 0x00	; 0
    31a2:	80 81       	ld	r24, Z
    31a4:	91 81       	ldd	r25, Z+1	; 0x01
    31a6:	9a 83       	std	Y+2, r25	; 0x02
    31a8:	89 83       	std	Y+1, r24	; 0x01
    31aa:	0e c0       	rjmp	.+28     	; 0x31c8 <Gpt_GetTimeElapsed+0x8c>
        // TODO
        break;
    case GPT_CHANNEL_TIMER1B:
        value=TCNT1HL_DATA_REGISTER;
    31ac:	ec e4       	ldi	r30, 0x4C	; 76
    31ae:	f0 e0       	ldi	r31, 0x00	; 0
    31b0:	80 81       	ld	r24, Z
    31b2:	91 81       	ldd	r25, Z+1	; 0x01
    31b4:	9a 83       	std	Y+2, r25	; 0x02
    31b6:	89 83       	std	Y+1, r24	; 0x01
    31b8:	07 c0       	rjmp	.+14     	; 0x31c8 <Gpt_GetTimeElapsed+0x8c>
        // TODO
        break;
    case GPT_CHANNEL_TIMER2:
        value = TCNT2;
    31ba:	e4 e4       	ldi	r30, 0x44	; 68
    31bc:	f0 e0       	ldi	r31, 0x00	; 0
    31be:	80 81       	ld	r24, Z
    31c0:	88 2f       	mov	r24, r24
    31c2:	90 e0       	ldi	r25, 0x00	; 0
    31c4:	9a 83       	std	Y+2, r25	; 0x02
    31c6:	89 83       	std	Y+1, r24	; 0x01
        // TODO
        break;
    default:
        break;
    }
    return value;
    31c8:	89 81       	ldd	r24, Y+1	; 0x01
    31ca:	9a 81       	ldd	r25, Y+2	; 0x02
}
    31cc:	0f 90       	pop	r0
    31ce:	0f 90       	pop	r0
    31d0:	0f 90       	pop	r0
    31d2:	0f 90       	pop	r0
    31d4:	0f 90       	pop	r0
    31d6:	cf 91       	pop	r28
    31d8:	df 91       	pop	r29
    31da:	08 95       	ret

000031dc <Gpt_GetTimeRemaining>:

u16 Gpt_GetTimeRemaining(Gpt_ChannelType channel, Gpt_ModeType mode)
{
    31dc:	df 93       	push	r29
    31de:	cf 93       	push	r28
    31e0:	00 d0       	rcall	.+0      	; 0x31e2 <Gpt_GetTimeRemaining+0x6>
    31e2:	00 d0       	rcall	.+0      	; 0x31e4 <Gpt_GetTimeRemaining+0x8>
    31e4:	00 d0       	rcall	.+0      	; 0x31e6 <Gpt_GetTimeRemaining+0xa>
    31e6:	cd b7       	in	r28, 0x3d	; 61
    31e8:	de b7       	in	r29, 0x3e	; 62
    31ea:	8b 83       	std	Y+3, r24	; 0x03
    31ec:	6c 83       	std	Y+4, r22	; 0x04
    u16 value = 0;
    31ee:	1a 82       	std	Y+2, r1	; 0x02
    31f0:	19 82       	std	Y+1, r1	; 0x01
    switch (channel)
    31f2:	8b 81       	ldd	r24, Y+3	; 0x03
    31f4:	28 2f       	mov	r18, r24
    31f6:	30 e0       	ldi	r19, 0x00	; 0
    31f8:	3e 83       	std	Y+6, r19	; 0x06
    31fa:	2d 83       	std	Y+5, r18	; 0x05
    31fc:	4d 81       	ldd	r20, Y+5	; 0x05
    31fe:	5e 81       	ldd	r21, Y+6	; 0x06
    3200:	41 30       	cpi	r20, 0x01	; 1
    3202:	51 05       	cpc	r21, r1
    3204:	e1 f1       	breq	.+120    	; 0x327e <Gpt_GetTimeRemaining+0xa2>
    3206:	8d 81       	ldd	r24, Y+5	; 0x05
    3208:	9e 81       	ldd	r25, Y+6	; 0x06
    320a:	82 30       	cpi	r24, 0x02	; 2
    320c:	91 05       	cpc	r25, r1
    320e:	34 f4       	brge	.+12     	; 0x321c <Gpt_GetTimeRemaining+0x40>
    3210:	2d 81       	ldd	r18, Y+5	; 0x05
    3212:	3e 81       	ldd	r19, Y+6	; 0x06
    3214:	21 15       	cp	r18, r1
    3216:	31 05       	cpc	r19, r1
    3218:	71 f0       	breq	.+28     	; 0x3236 <Gpt_GetTimeRemaining+0x5a>
    321a:	92 c0       	rjmp	.+292    	; 0x3340 <Gpt_GetTimeRemaining+0x164>
    321c:	4d 81       	ldd	r20, Y+5	; 0x05
    321e:	5e 81       	ldd	r21, Y+6	; 0x06
    3220:	42 30       	cpi	r20, 0x02	; 2
    3222:	51 05       	cpc	r21, r1
    3224:	09 f4       	brne	.+2      	; 0x3228 <Gpt_GetTimeRemaining+0x4c>
    3226:	4a c0       	rjmp	.+148    	; 0x32bc <Gpt_GetTimeRemaining+0xe0>
    3228:	8d 81       	ldd	r24, Y+5	; 0x05
    322a:	9e 81       	ldd	r25, Y+6	; 0x06
    322c:	83 30       	cpi	r24, 0x03	; 3
    322e:	91 05       	cpc	r25, r1
    3230:	09 f4       	brne	.+2      	; 0x3234 <Gpt_GetTimeRemaining+0x58>
    3232:	64 c0       	rjmp	.+200    	; 0x32fc <Gpt_GetTimeRemaining+0x120>
    3234:	85 c0       	rjmp	.+266    	; 0x3340 <Gpt_GetTimeRemaining+0x164>
    {
    case GPT_CHANNEL_TIMER0:
        if (mode == GPT_MODE_NORMAL)
    3236:	8c 81       	ldd	r24, Y+4	; 0x04
    3238:	88 23       	and	r24, r24
    323a:	61 f4       	brne	.+24     	; 0x3254 <Gpt_GetTimeRemaining+0x78>
        {
            value = 0xFF - TCNT0;
    323c:	e2 e5       	ldi	r30, 0x52	; 82
    323e:	f0 e0       	ldi	r31, 0x00	; 0
    3240:	80 81       	ld	r24, Z
    3242:	28 2f       	mov	r18, r24
    3244:	30 e0       	ldi	r19, 0x00	; 0
    3246:	8f ef       	ldi	r24, 0xFF	; 255
    3248:	90 e0       	ldi	r25, 0x00	; 0
    324a:	82 1b       	sub	r24, r18
    324c:	93 0b       	sbc	r25, r19
    324e:	9a 83       	std	Y+2, r25	; 0x02
    3250:	89 83       	std	Y+1, r24	; 0x01
    3252:	76 c0       	rjmp	.+236    	; 0x3340 <Gpt_GetTimeRemaining+0x164>
        }
        else if (mode == GPT_MODE_CTC)
    3254:	8c 81       	ldd	r24, Y+4	; 0x04
    3256:	81 30       	cpi	r24, 0x01	; 1
    3258:	09 f0       	breq	.+2      	; 0x325c <Gpt_GetTimeRemaining+0x80>
    325a:	72 c0       	rjmp	.+228    	; 0x3340 <Gpt_GetTimeRemaining+0x164>
        {
            value = OCR0 - TCNT0;
    325c:	ec e5       	ldi	r30, 0x5C	; 92
    325e:	f0 e0       	ldi	r31, 0x00	; 0
    3260:	80 81       	ld	r24, Z
    3262:	28 2f       	mov	r18, r24
    3264:	30 e0       	ldi	r19, 0x00	; 0
    3266:	e2 e5       	ldi	r30, 0x52	; 82
    3268:	f0 e0       	ldi	r31, 0x00	; 0
    326a:	80 81       	ld	r24, Z
    326c:	88 2f       	mov	r24, r24
    326e:	90 e0       	ldi	r25, 0x00	; 0
    3270:	a9 01       	movw	r20, r18
    3272:	48 1b       	sub	r20, r24
    3274:	59 0b       	sbc	r21, r25
    3276:	ca 01       	movw	r24, r20
    3278:	9a 83       	std	Y+2, r25	; 0x02
    327a:	89 83       	std	Y+1, r24	; 0x01
    327c:	61 c0       	rjmp	.+194    	; 0x3340 <Gpt_GetTimeRemaining+0x164>
        }
        break;
    case GPT_CHANNEL_TIMER1A:
        if (mode == GPT_MODE_NORMAL)
    327e:	8c 81       	ldd	r24, Y+4	; 0x04
    3280:	88 23       	and	r24, r24
    3282:	49 f4       	brne	.+18     	; 0x3296 <Gpt_GetTimeRemaining+0xba>
        {
            value = 0xFFFF - TCNT1HL_DATA_REGISTER;
    3284:	ec e4       	ldi	r30, 0x4C	; 76
    3286:	f0 e0       	ldi	r31, 0x00	; 0
    3288:	80 81       	ld	r24, Z
    328a:	91 81       	ldd	r25, Z+1	; 0x01
    328c:	80 95       	com	r24
    328e:	90 95       	com	r25
    3290:	9a 83       	std	Y+2, r25	; 0x02
    3292:	89 83       	std	Y+1, r24	; 0x01
    3294:	55 c0       	rjmp	.+170    	; 0x3340 <Gpt_GetTimeRemaining+0x164>
        }
        else if (mode == GPT_MODE_CTC)
    3296:	8c 81       	ldd	r24, Y+4	; 0x04
    3298:	81 30       	cpi	r24, 0x01	; 1
    329a:	09 f0       	breq	.+2      	; 0x329e <Gpt_GetTimeRemaining+0xc2>
    329c:	51 c0       	rjmp	.+162    	; 0x3340 <Gpt_GetTimeRemaining+0x164>
        {
            value = OCR1AHL_DATA_REGISTER - TCNT1HL_DATA_REGISTER;
    329e:	ea e4       	ldi	r30, 0x4A	; 74
    32a0:	f0 e0       	ldi	r31, 0x00	; 0
    32a2:	20 81       	ld	r18, Z
    32a4:	31 81       	ldd	r19, Z+1	; 0x01
    32a6:	ec e4       	ldi	r30, 0x4C	; 76
    32a8:	f0 e0       	ldi	r31, 0x00	; 0
    32aa:	80 81       	ld	r24, Z
    32ac:	91 81       	ldd	r25, Z+1	; 0x01
    32ae:	a9 01       	movw	r20, r18
    32b0:	48 1b       	sub	r20, r24
    32b2:	59 0b       	sbc	r21, r25
    32b4:	ca 01       	movw	r24, r20
    32b6:	9a 83       	std	Y+2, r25	; 0x02
    32b8:	89 83       	std	Y+1, r24	; 0x01
    32ba:	42 c0       	rjmp	.+132    	; 0x3340 <Gpt_GetTimeRemaining+0x164>
        }
        // TODO
        break;
    case GPT_CHANNEL_TIMER1B:
        if (mode == GPT_MODE_NORMAL)
    32bc:	8c 81       	ldd	r24, Y+4	; 0x04
    32be:	88 23       	and	r24, r24
    32c0:	59 f4       	brne	.+22     	; 0x32d8 <Gpt_GetTimeRemaining+0xfc>
        {
            value = 0xFF - TCNT1HL_DATA_REGISTER;
    32c2:	ec e4       	ldi	r30, 0x4C	; 76
    32c4:	f0 e0       	ldi	r31, 0x00	; 0
    32c6:	20 81       	ld	r18, Z
    32c8:	31 81       	ldd	r19, Z+1	; 0x01
    32ca:	8f ef       	ldi	r24, 0xFF	; 255
    32cc:	90 e0       	ldi	r25, 0x00	; 0
    32ce:	82 1b       	sub	r24, r18
    32d0:	93 0b       	sbc	r25, r19
    32d2:	9a 83       	std	Y+2, r25	; 0x02
    32d4:	89 83       	std	Y+1, r24	; 0x01
    32d6:	34 c0       	rjmp	.+104    	; 0x3340 <Gpt_GetTimeRemaining+0x164>
        }
        else if (mode == GPT_MODE_CTC)
    32d8:	8c 81       	ldd	r24, Y+4	; 0x04
    32da:	81 30       	cpi	r24, 0x01	; 1
    32dc:	89 f5       	brne	.+98     	; 0x3340 <Gpt_GetTimeRemaining+0x164>
        {
            value = OCR1BHL_DATA_REGISTER - TCNT1HL_DATA_REGISTER;
    32de:	e8 e4       	ldi	r30, 0x48	; 72
    32e0:	f0 e0       	ldi	r31, 0x00	; 0
    32e2:	20 81       	ld	r18, Z
    32e4:	31 81       	ldd	r19, Z+1	; 0x01
    32e6:	ec e4       	ldi	r30, 0x4C	; 76
    32e8:	f0 e0       	ldi	r31, 0x00	; 0
    32ea:	80 81       	ld	r24, Z
    32ec:	91 81       	ldd	r25, Z+1	; 0x01
    32ee:	a9 01       	movw	r20, r18
    32f0:	48 1b       	sub	r20, r24
    32f2:	59 0b       	sbc	r21, r25
    32f4:	ca 01       	movw	r24, r20
    32f6:	9a 83       	std	Y+2, r25	; 0x02
    32f8:	89 83       	std	Y+1, r24	; 0x01
    32fa:	22 c0       	rjmp	.+68     	; 0x3340 <Gpt_GetTimeRemaining+0x164>
        }
        // TODO
        break;
    case GPT_CHANNEL_TIMER2:
        if (mode == GPT_MODE_NORMAL)
    32fc:	8c 81       	ldd	r24, Y+4	; 0x04
    32fe:	88 23       	and	r24, r24
    3300:	61 f4       	brne	.+24     	; 0x331a <Gpt_GetTimeRemaining+0x13e>
        {
            value = 0xFF - TCNT2;
    3302:	e4 e4       	ldi	r30, 0x44	; 68
    3304:	f0 e0       	ldi	r31, 0x00	; 0
    3306:	80 81       	ld	r24, Z
    3308:	28 2f       	mov	r18, r24
    330a:	30 e0       	ldi	r19, 0x00	; 0
    330c:	8f ef       	ldi	r24, 0xFF	; 255
    330e:	90 e0       	ldi	r25, 0x00	; 0
    3310:	82 1b       	sub	r24, r18
    3312:	93 0b       	sbc	r25, r19
    3314:	9a 83       	std	Y+2, r25	; 0x02
    3316:	89 83       	std	Y+1, r24	; 0x01
    3318:	13 c0       	rjmp	.+38     	; 0x3340 <Gpt_GetTimeRemaining+0x164>
        }
        else if (mode == GPT_MODE_CTC)
    331a:	8c 81       	ldd	r24, Y+4	; 0x04
    331c:	81 30       	cpi	r24, 0x01	; 1
    331e:	81 f4       	brne	.+32     	; 0x3340 <Gpt_GetTimeRemaining+0x164>
        {
            value = OCR2 - TCNT2;
    3320:	e3 e4       	ldi	r30, 0x43	; 67
    3322:	f0 e0       	ldi	r31, 0x00	; 0
    3324:	80 81       	ld	r24, Z
    3326:	28 2f       	mov	r18, r24
    3328:	30 e0       	ldi	r19, 0x00	; 0
    332a:	e4 e4       	ldi	r30, 0x44	; 68
    332c:	f0 e0       	ldi	r31, 0x00	; 0
    332e:	80 81       	ld	r24, Z
    3330:	88 2f       	mov	r24, r24
    3332:	90 e0       	ldi	r25, 0x00	; 0
    3334:	a9 01       	movw	r20, r18
    3336:	48 1b       	sub	r20, r24
    3338:	59 0b       	sbc	r21, r25
    333a:	ca 01       	movw	r24, r20
    333c:	9a 83       	std	Y+2, r25	; 0x02
    333e:	89 83       	std	Y+1, r24	; 0x01
        // TODO
        break;
    default:
        break;
    }
    return value;
    3340:	89 81       	ldd	r24, Y+1	; 0x01
    3342:	9a 81       	ldd	r25, Y+2	; 0x02
}
    3344:	26 96       	adiw	r28, 0x06	; 6
    3346:	0f b6       	in	r0, 0x3f	; 63
    3348:	f8 94       	cli
    334a:	de bf       	out	0x3e, r29	; 62
    334c:	0f be       	out	0x3f, r0	; 63
    334e:	cd bf       	out	0x3d, r28	; 61
    3350:	cf 91       	pop	r28
    3352:	df 91       	pop	r29
    3354:	08 95       	ret

00003356 <Gpt_EnableNotification>:

void Gpt_EnableNotification(Gpt_ChannelType channel, Gpt_ModeType mode, void (*callback)(void))
{
    3356:	df 93       	push	r29
    3358:	cf 93       	push	r28
    335a:	00 d0       	rcall	.+0      	; 0x335c <Gpt_EnableNotification+0x6>
    335c:	00 d0       	rcall	.+0      	; 0x335e <Gpt_EnableNotification+0x8>
    335e:	00 d0       	rcall	.+0      	; 0x3360 <Gpt_EnableNotification+0xa>
    3360:	cd b7       	in	r28, 0x3d	; 61
    3362:	de b7       	in	r29, 0x3e	; 62
    3364:	89 83       	std	Y+1, r24	; 0x01
    3366:	6a 83       	std	Y+2, r22	; 0x02
    3368:	5c 83       	std	Y+4, r21	; 0x04
    336a:	4b 83       	std	Y+3, r20	; 0x03
    switch (channel)
    336c:	89 81       	ldd	r24, Y+1	; 0x01
    336e:	28 2f       	mov	r18, r24
    3370:	30 e0       	ldi	r19, 0x00	; 0
    3372:	3e 83       	std	Y+6, r19	; 0x06
    3374:	2d 83       	std	Y+5, r18	; 0x05
    3376:	8d 81       	ldd	r24, Y+5	; 0x05
    3378:	9e 81       	ldd	r25, Y+6	; 0x06
    337a:	81 30       	cpi	r24, 0x01	; 1
    337c:	91 05       	cpc	r25, r1
    337e:	d1 f1       	breq	.+116    	; 0x33f4 <Gpt_EnableNotification+0x9e>
    3380:	2d 81       	ldd	r18, Y+5	; 0x05
    3382:	3e 81       	ldd	r19, Y+6	; 0x06
    3384:	22 30       	cpi	r18, 0x02	; 2
    3386:	31 05       	cpc	r19, r1
    3388:	2c f4       	brge	.+10     	; 0x3394 <Gpt_EnableNotification+0x3e>
    338a:	8d 81       	ldd	r24, Y+5	; 0x05
    338c:	9e 81       	ldd	r25, Y+6	; 0x06
    338e:	00 97       	sbiw	r24, 0x00	; 0
    3390:	71 f0       	breq	.+28     	; 0x33ae <Gpt_EnableNotification+0x58>
    3392:	96 c0       	rjmp	.+300    	; 0x34c0 <Gpt_EnableNotification+0x16a>
    3394:	2d 81       	ldd	r18, Y+5	; 0x05
    3396:	3e 81       	ldd	r19, Y+6	; 0x06
    3398:	22 30       	cpi	r18, 0x02	; 2
    339a:	31 05       	cpc	r19, r1
    339c:	09 f4       	brne	.+2      	; 0x33a0 <Gpt_EnableNotification+0x4a>
    339e:	4d c0       	rjmp	.+154    	; 0x343a <Gpt_EnableNotification+0xe4>
    33a0:	8d 81       	ldd	r24, Y+5	; 0x05
    33a2:	9e 81       	ldd	r25, Y+6	; 0x06
    33a4:	83 30       	cpi	r24, 0x03	; 3
    33a6:	91 05       	cpc	r25, r1
    33a8:	09 f4       	brne	.+2      	; 0x33ac <Gpt_EnableNotification+0x56>
    33aa:	69 c0       	rjmp	.+210    	; 0x347e <Gpt_EnableNotification+0x128>
    33ac:	89 c0       	rjmp	.+274    	; 0x34c0 <Gpt_EnableNotification+0x16a>
    {
    case GPT_CHANNEL_TIMER0:
        if (mode == GPT_MODE_NORMAL)
    33ae:	8a 81       	ldd	r24, Y+2	; 0x02
    33b0:	88 23       	and	r24, r24
    33b2:	71 f4       	brne	.+28     	; 0x33d0 <Gpt_EnableNotification+0x7a>
        {
            Gpt_Timer0_Callback_Normal = callback;
    33b4:	8b 81       	ldd	r24, Y+3	; 0x03
    33b6:	9c 81       	ldd	r25, Y+4	; 0x04
    33b8:	90 93 9b 01 	sts	0x019B, r25
    33bc:	80 93 9a 01 	sts	0x019A, r24
            SET_BIT(TIMSK, TIMSK_TOIE0);
    33c0:	a9 e5       	ldi	r26, 0x59	; 89
    33c2:	b0 e0       	ldi	r27, 0x00	; 0
    33c4:	e9 e5       	ldi	r30, 0x59	; 89
    33c6:	f0 e0       	ldi	r31, 0x00	; 0
    33c8:	80 81       	ld	r24, Z
    33ca:	81 60       	ori	r24, 0x01	; 1
    33cc:	8c 93       	st	X, r24
    33ce:	78 c0       	rjmp	.+240    	; 0x34c0 <Gpt_EnableNotification+0x16a>
        }
        else if (mode == GPT_MODE_CTC)
    33d0:	8a 81       	ldd	r24, Y+2	; 0x02
    33d2:	81 30       	cpi	r24, 0x01	; 1
    33d4:	09 f0       	breq	.+2      	; 0x33d8 <Gpt_EnableNotification+0x82>
    33d6:	74 c0       	rjmp	.+232    	; 0x34c0 <Gpt_EnableNotification+0x16a>
        {
            Gpt_Timer0_Callback_Ctc = callback;
    33d8:	8b 81       	ldd	r24, Y+3	; 0x03
    33da:	9c 81       	ldd	r25, Y+4	; 0x04
    33dc:	90 93 91 01 	sts	0x0191, r25
    33e0:	80 93 90 01 	sts	0x0190, r24
            SET_BIT(TIMSK, TIMSK_OCIE0);
    33e4:	a9 e5       	ldi	r26, 0x59	; 89
    33e6:	b0 e0       	ldi	r27, 0x00	; 0
    33e8:	e9 e5       	ldi	r30, 0x59	; 89
    33ea:	f0 e0       	ldi	r31, 0x00	; 0
    33ec:	80 81       	ld	r24, Z
    33ee:	82 60       	ori	r24, 0x02	; 2
    33f0:	8c 93       	st	X, r24
    33f2:	66 c0       	rjmp	.+204    	; 0x34c0 <Gpt_EnableNotification+0x16a>
        }
        break;

    case GPT_CHANNEL_TIMER1A:
        if (mode == GPT_MODE_NORMAL)
    33f4:	8a 81       	ldd	r24, Y+2	; 0x02
    33f6:	88 23       	and	r24, r24
    33f8:	71 f4       	brne	.+28     	; 0x3416 <Gpt_EnableNotification+0xc0>
        {
            Gpt_Timer1_Callback_Normal = callback;
    33fa:	8b 81       	ldd	r24, Y+3	; 0x03
    33fc:	9c 81       	ldd	r25, Y+4	; 0x04
    33fe:	90 93 9d 01 	sts	0x019D, r25
    3402:	80 93 9c 01 	sts	0x019C, r24
            SET_BIT(TIMSK, TIMSK_TOIE1);
    3406:	a9 e5       	ldi	r26, 0x59	; 89
    3408:	b0 e0       	ldi	r27, 0x00	; 0
    340a:	e9 e5       	ldi	r30, 0x59	; 89
    340c:	f0 e0       	ldi	r31, 0x00	; 0
    340e:	80 81       	ld	r24, Z
    3410:	84 60       	ori	r24, 0x04	; 4
    3412:	8c 93       	st	X, r24
    3414:	55 c0       	rjmp	.+170    	; 0x34c0 <Gpt_EnableNotification+0x16a>
            // TODO
        }
        else if (mode == GPT_MODE_CTC)
    3416:	8a 81       	ldd	r24, Y+2	; 0x02
    3418:	81 30       	cpi	r24, 0x01	; 1
    341a:	09 f0       	breq	.+2      	; 0x341e <Gpt_EnableNotification+0xc8>
    341c:	51 c0       	rjmp	.+162    	; 0x34c0 <Gpt_EnableNotification+0x16a>
        {
            Gpt_Timer1A_Callback_Ctc = callback;
    341e:	8b 81       	ldd	r24, Y+3	; 0x03
    3420:	9c 81       	ldd	r25, Y+4	; 0x04
    3422:	90 93 99 01 	sts	0x0199, r25
    3426:	80 93 98 01 	sts	0x0198, r24
            SET_BIT(TIMSK, TIMSK_OCIE1A);
    342a:	a9 e5       	ldi	r26, 0x59	; 89
    342c:	b0 e0       	ldi	r27, 0x00	; 0
    342e:	e9 e5       	ldi	r30, 0x59	; 89
    3430:	f0 e0       	ldi	r31, 0x00	; 0
    3432:	80 81       	ld	r24, Z
    3434:	80 61       	ori	r24, 0x10	; 16
    3436:	8c 93       	st	X, r24
    3438:	43 c0       	rjmp	.+134    	; 0x34c0 <Gpt_EnableNotification+0x16a>
            // TODO
        }
        break;

    case GPT_CHANNEL_TIMER1B:
        if (mode == GPT_MODE_NORMAL)
    343a:	8a 81       	ldd	r24, Y+2	; 0x02
    343c:	88 23       	and	r24, r24
    343e:	71 f4       	brne	.+28     	; 0x345c <Gpt_EnableNotification+0x106>
        {
            Gpt_Timer1_Callback_Normal = callback;
    3440:	8b 81       	ldd	r24, Y+3	; 0x03
    3442:	9c 81       	ldd	r25, Y+4	; 0x04
    3444:	90 93 9d 01 	sts	0x019D, r25
    3448:	80 93 9c 01 	sts	0x019C, r24
            SET_BIT(TIMSK, TIMSK_TOIE1);
    344c:	a9 e5       	ldi	r26, 0x59	; 89
    344e:	b0 e0       	ldi	r27, 0x00	; 0
    3450:	e9 e5       	ldi	r30, 0x59	; 89
    3452:	f0 e0       	ldi	r31, 0x00	; 0
    3454:	80 81       	ld	r24, Z
    3456:	84 60       	ori	r24, 0x04	; 4
    3458:	8c 93       	st	X, r24
    345a:	32 c0       	rjmp	.+100    	; 0x34c0 <Gpt_EnableNotification+0x16a>
            // TODO
        }
        else if (mode == GPT_MODE_CTC)
    345c:	8a 81       	ldd	r24, Y+2	; 0x02
    345e:	81 30       	cpi	r24, 0x01	; 1
    3460:	79 f5       	brne	.+94     	; 0x34c0 <Gpt_EnableNotification+0x16a>
        {
            Gpt_Timer1B_Callback_Ctc = callback;
    3462:	8b 81       	ldd	r24, Y+3	; 0x03
    3464:	9c 81       	ldd	r25, Y+4	; 0x04
    3466:	90 93 95 01 	sts	0x0195, r25
    346a:	80 93 94 01 	sts	0x0194, r24
            SET_BIT(TIMSK, TIMSK_OCIE1B);
    346e:	a9 e5       	ldi	r26, 0x59	; 89
    3470:	b0 e0       	ldi	r27, 0x00	; 0
    3472:	e9 e5       	ldi	r30, 0x59	; 89
    3474:	f0 e0       	ldi	r31, 0x00	; 0
    3476:	80 81       	ld	r24, Z
    3478:	88 60       	ori	r24, 0x08	; 8
    347a:	8c 93       	st	X, r24
    347c:	21 c0       	rjmp	.+66     	; 0x34c0 <Gpt_EnableNotification+0x16a>
            // TODO
        }
        break;

    case GPT_CHANNEL_TIMER2:
        if (mode == GPT_MODE_NORMAL)
    347e:	8a 81       	ldd	r24, Y+2	; 0x02
    3480:	88 23       	and	r24, r24
    3482:	71 f4       	brne	.+28     	; 0x34a0 <Gpt_EnableNotification+0x14a>
        {
            Gpt_Timer2_Callback_Normal = callback;
    3484:	8b 81       	ldd	r24, Y+3	; 0x03
    3486:	9c 81       	ldd	r25, Y+4	; 0x04
    3488:	90 93 97 01 	sts	0x0197, r25
    348c:	80 93 96 01 	sts	0x0196, r24
            SET_BIT(TIMSK, TIMSK_TOIE2);
    3490:	a9 e5       	ldi	r26, 0x59	; 89
    3492:	b0 e0       	ldi	r27, 0x00	; 0
    3494:	e9 e5       	ldi	r30, 0x59	; 89
    3496:	f0 e0       	ldi	r31, 0x00	; 0
    3498:	80 81       	ld	r24, Z
    349a:	80 64       	ori	r24, 0x40	; 64
    349c:	8c 93       	st	X, r24
    349e:	10 c0       	rjmp	.+32     	; 0x34c0 <Gpt_EnableNotification+0x16a>
            // TODO
        }
        else if (mode == GPT_MODE_CTC)
    34a0:	8a 81       	ldd	r24, Y+2	; 0x02
    34a2:	81 30       	cpi	r24, 0x01	; 1
    34a4:	69 f4       	brne	.+26     	; 0x34c0 <Gpt_EnableNotification+0x16a>
        {
            Gpt_Timer2_Callback_Ctc = callback;
    34a6:	8b 81       	ldd	r24, Y+3	; 0x03
    34a8:	9c 81       	ldd	r25, Y+4	; 0x04
    34aa:	90 93 93 01 	sts	0x0193, r25
    34ae:	80 93 92 01 	sts	0x0192, r24
            SET_BIT(TIMSK, TIMSK_OCIE2);
    34b2:	a9 e5       	ldi	r26, 0x59	; 89
    34b4:	b0 e0       	ldi	r27, 0x00	; 0
    34b6:	e9 e5       	ldi	r30, 0x59	; 89
    34b8:	f0 e0       	ldi	r31, 0x00	; 0
    34ba:	80 81       	ld	r24, Z
    34bc:	80 68       	ori	r24, 0x80	; 128
    34be:	8c 93       	st	X, r24
        break;

    default:
        break;
    }
}
    34c0:	26 96       	adiw	r28, 0x06	; 6
    34c2:	0f b6       	in	r0, 0x3f	; 63
    34c4:	f8 94       	cli
    34c6:	de bf       	out	0x3e, r29	; 62
    34c8:	0f be       	out	0x3f, r0	; 63
    34ca:	cd bf       	out	0x3d, r28	; 61
    34cc:	cf 91       	pop	r28
    34ce:	df 91       	pop	r29
    34d0:	08 95       	ret

000034d2 <Gpt_DisableNotification>:

void Gpt_DisableNotification(Gpt_ChannelType channel, Gpt_ModeType mode)
{
    34d2:	df 93       	push	r29
    34d4:	cf 93       	push	r28
    34d6:	00 d0       	rcall	.+0      	; 0x34d8 <Gpt_DisableNotification+0x6>
    34d8:	00 d0       	rcall	.+0      	; 0x34da <Gpt_DisableNotification+0x8>
    34da:	cd b7       	in	r28, 0x3d	; 61
    34dc:	de b7       	in	r29, 0x3e	; 62
    34de:	89 83       	std	Y+1, r24	; 0x01
    34e0:	6a 83       	std	Y+2, r22	; 0x02
    switch (channel)
    34e2:	89 81       	ldd	r24, Y+1	; 0x01
    34e4:	28 2f       	mov	r18, r24
    34e6:	30 e0       	ldi	r19, 0x00	; 0
    34e8:	3c 83       	std	Y+4, r19	; 0x04
    34ea:	2b 83       	std	Y+3, r18	; 0x03
    34ec:	8b 81       	ldd	r24, Y+3	; 0x03
    34ee:	9c 81       	ldd	r25, Y+4	; 0x04
    34f0:	81 30       	cpi	r24, 0x01	; 1
    34f2:	91 05       	cpc	r25, r1
    34f4:	69 f1       	breq	.+90     	; 0x3550 <Gpt_DisableNotification+0x7e>
    34f6:	2b 81       	ldd	r18, Y+3	; 0x03
    34f8:	3c 81       	ldd	r19, Y+4	; 0x04
    34fa:	22 30       	cpi	r18, 0x02	; 2
    34fc:	31 05       	cpc	r19, r1
    34fe:	2c f4       	brge	.+10     	; 0x350a <Gpt_DisableNotification+0x38>
    3500:	8b 81       	ldd	r24, Y+3	; 0x03
    3502:	9c 81       	ldd	r25, Y+4	; 0x04
    3504:	00 97       	sbiw	r24, 0x00	; 0
    3506:	69 f0       	breq	.+26     	; 0x3522 <Gpt_DisableNotification+0x50>
    3508:	64 c0       	rjmp	.+200    	; 0x35d2 <Gpt_DisableNotification+0x100>
    350a:	2b 81       	ldd	r18, Y+3	; 0x03
    350c:	3c 81       	ldd	r19, Y+4	; 0x04
    350e:	22 30       	cpi	r18, 0x02	; 2
    3510:	31 05       	cpc	r19, r1
    3512:	a1 f1       	breq	.+104    	; 0x357c <Gpt_DisableNotification+0xaa>
    3514:	8b 81       	ldd	r24, Y+3	; 0x03
    3516:	9c 81       	ldd	r25, Y+4	; 0x04
    3518:	83 30       	cpi	r24, 0x03	; 3
    351a:	91 05       	cpc	r25, r1
    351c:	09 f4       	brne	.+2      	; 0x3520 <Gpt_DisableNotification+0x4e>
    351e:	44 c0       	rjmp	.+136    	; 0x35a8 <Gpt_DisableNotification+0xd6>
    3520:	58 c0       	rjmp	.+176    	; 0x35d2 <Gpt_DisableNotification+0x100>
    {
    case GPT_CHANNEL_TIMER0:
        if (mode == GPT_MODE_NORMAL)
    3522:	8a 81       	ldd	r24, Y+2	; 0x02
    3524:	88 23       	and	r24, r24
    3526:	41 f4       	brne	.+16     	; 0x3538 <Gpt_DisableNotification+0x66>
        {
            CLR_BIT(TIMSK, TIMSK_TOIE0);
    3528:	a9 e5       	ldi	r26, 0x59	; 89
    352a:	b0 e0       	ldi	r27, 0x00	; 0
    352c:	e9 e5       	ldi	r30, 0x59	; 89
    352e:	f0 e0       	ldi	r31, 0x00	; 0
    3530:	80 81       	ld	r24, Z
    3532:	8e 7f       	andi	r24, 0xFE	; 254
    3534:	8c 93       	st	X, r24
    3536:	4d c0       	rjmp	.+154    	; 0x35d2 <Gpt_DisableNotification+0x100>
        }
        else if (mode == GPT_MODE_CTC)
    3538:	8a 81       	ldd	r24, Y+2	; 0x02
    353a:	81 30       	cpi	r24, 0x01	; 1
    353c:	09 f0       	breq	.+2      	; 0x3540 <Gpt_DisableNotification+0x6e>
    353e:	49 c0       	rjmp	.+146    	; 0x35d2 <Gpt_DisableNotification+0x100>
        {
            CLR_BIT(TIMSK, TIMSK_OCIE0);
    3540:	a9 e5       	ldi	r26, 0x59	; 89
    3542:	b0 e0       	ldi	r27, 0x00	; 0
    3544:	e9 e5       	ldi	r30, 0x59	; 89
    3546:	f0 e0       	ldi	r31, 0x00	; 0
    3548:	80 81       	ld	r24, Z
    354a:	8d 7f       	andi	r24, 0xFD	; 253
    354c:	8c 93       	st	X, r24
    354e:	41 c0       	rjmp	.+130    	; 0x35d2 <Gpt_DisableNotification+0x100>
        }
        break;

    case GPT_CHANNEL_TIMER1A:
        if (mode == GPT_MODE_NORMAL)
    3550:	8a 81       	ldd	r24, Y+2	; 0x02
    3552:	88 23       	and	r24, r24
    3554:	41 f4       	brne	.+16     	; 0x3566 <Gpt_DisableNotification+0x94>
        {
            CLR_BIT(TIMSK, TIMSK_TOIE1);
    3556:	a9 e5       	ldi	r26, 0x59	; 89
    3558:	b0 e0       	ldi	r27, 0x00	; 0
    355a:	e9 e5       	ldi	r30, 0x59	; 89
    355c:	f0 e0       	ldi	r31, 0x00	; 0
    355e:	80 81       	ld	r24, Z
    3560:	8b 7f       	andi	r24, 0xFB	; 251
    3562:	8c 93       	st	X, r24
    3564:	36 c0       	rjmp	.+108    	; 0x35d2 <Gpt_DisableNotification+0x100>
            // TODO
        }
        else if (mode == GPT_MODE_CTC)
    3566:	8a 81       	ldd	r24, Y+2	; 0x02
    3568:	81 30       	cpi	r24, 0x01	; 1
    356a:	99 f5       	brne	.+102    	; 0x35d2 <Gpt_DisableNotification+0x100>
        {
            CLR_BIT(TIMSK, TIMSK_OCIE1A);
    356c:	a9 e5       	ldi	r26, 0x59	; 89
    356e:	b0 e0       	ldi	r27, 0x00	; 0
    3570:	e9 e5       	ldi	r30, 0x59	; 89
    3572:	f0 e0       	ldi	r31, 0x00	; 0
    3574:	80 81       	ld	r24, Z
    3576:	8f 7e       	andi	r24, 0xEF	; 239
    3578:	8c 93       	st	X, r24
    357a:	2b c0       	rjmp	.+86     	; 0x35d2 <Gpt_DisableNotification+0x100>
            // TODO
        }
        break;

    case GPT_CHANNEL_TIMER1B:
        if (mode == GPT_MODE_NORMAL)
    357c:	8a 81       	ldd	r24, Y+2	; 0x02
    357e:	88 23       	and	r24, r24
    3580:	41 f4       	brne	.+16     	; 0x3592 <Gpt_DisableNotification+0xc0>
        {
            CLR_BIT(TIMSK, TIMSK_TOIE1);
    3582:	a9 e5       	ldi	r26, 0x59	; 89
    3584:	b0 e0       	ldi	r27, 0x00	; 0
    3586:	e9 e5       	ldi	r30, 0x59	; 89
    3588:	f0 e0       	ldi	r31, 0x00	; 0
    358a:	80 81       	ld	r24, Z
    358c:	8b 7f       	andi	r24, 0xFB	; 251
    358e:	8c 93       	st	X, r24
    3590:	20 c0       	rjmp	.+64     	; 0x35d2 <Gpt_DisableNotification+0x100>
            // TODO
        }
        else if (mode == GPT_MODE_CTC)
    3592:	8a 81       	ldd	r24, Y+2	; 0x02
    3594:	81 30       	cpi	r24, 0x01	; 1
    3596:	e9 f4       	brne	.+58     	; 0x35d2 <Gpt_DisableNotification+0x100>
        {
            CLR_BIT(TIMSK, TIMSK_OCIE1B);
    3598:	a9 e5       	ldi	r26, 0x59	; 89
    359a:	b0 e0       	ldi	r27, 0x00	; 0
    359c:	e9 e5       	ldi	r30, 0x59	; 89
    359e:	f0 e0       	ldi	r31, 0x00	; 0
    35a0:	80 81       	ld	r24, Z
    35a2:	87 7f       	andi	r24, 0xF7	; 247
    35a4:	8c 93       	st	X, r24
    35a6:	15 c0       	rjmp	.+42     	; 0x35d2 <Gpt_DisableNotification+0x100>
            // TODO
        }
        break;

    case GPT_CHANNEL_TIMER2:
        if (mode == GPT_MODE_NORMAL)
    35a8:	8a 81       	ldd	r24, Y+2	; 0x02
    35aa:	88 23       	and	r24, r24
    35ac:	41 f4       	brne	.+16     	; 0x35be <Gpt_DisableNotification+0xec>
        {
            CLR_BIT(TIMSK, TIMSK_TOIE2);
    35ae:	a9 e5       	ldi	r26, 0x59	; 89
    35b0:	b0 e0       	ldi	r27, 0x00	; 0
    35b2:	e9 e5       	ldi	r30, 0x59	; 89
    35b4:	f0 e0       	ldi	r31, 0x00	; 0
    35b6:	80 81       	ld	r24, Z
    35b8:	8f 7b       	andi	r24, 0xBF	; 191
    35ba:	8c 93       	st	X, r24
    35bc:	0a c0       	rjmp	.+20     	; 0x35d2 <Gpt_DisableNotification+0x100>
            // TODO
        }
        else if (mode == GPT_MODE_CTC)
    35be:	8a 81       	ldd	r24, Y+2	; 0x02
    35c0:	81 30       	cpi	r24, 0x01	; 1
    35c2:	39 f4       	brne	.+14     	; 0x35d2 <Gpt_DisableNotification+0x100>
        {
            CLR_BIT(TIMSK, TIMSK_OCIE2);
    35c4:	a9 e5       	ldi	r26, 0x59	; 89
    35c6:	b0 e0       	ldi	r27, 0x00	; 0
    35c8:	e9 e5       	ldi	r30, 0x59	; 89
    35ca:	f0 e0       	ldi	r31, 0x00	; 0
    35cc:	80 81       	ld	r24, Z
    35ce:	8f 77       	andi	r24, 0x7F	; 127
    35d0:	8c 93       	st	X, r24
        break;

    default:
        break;
    }
}
    35d2:	0f 90       	pop	r0
    35d4:	0f 90       	pop	r0
    35d6:	0f 90       	pop	r0
    35d8:	0f 90       	pop	r0
    35da:	cf 91       	pop	r28
    35dc:	df 91       	pop	r29
    35de:	08 95       	ret

000035e0 <servo>:


void servo(u8 angle){
    35e0:	df 93       	push	r29
    35e2:	cf 93       	push	r28
    35e4:	00 d0       	rcall	.+0      	; 0x35e6 <servo+0x6>
    35e6:	00 d0       	rcall	.+0      	; 0x35e8 <servo+0x8>
    35e8:	0f 92       	push	r0
    35ea:	cd b7       	in	r28, 0x3d	; 61
    35ec:	de b7       	in	r29, 0x3e	; 62
    35ee:	8d 83       	std	Y+5, r24	; 0x05
    Gpt_ConfigType config = {GPT_CHANNEL_TIMER1A, SPT_MODE_Fast_PWM_mod14, GPT_OUTPUT_CLEAR, GPT_PRESCALER_8};
    35f0:	81 e0       	ldi	r24, 0x01	; 1
    35f2:	89 83       	std	Y+1, r24	; 0x01
    35f4:	84 e0       	ldi	r24, 0x04	; 4
    35f6:	8a 83       	std	Y+2, r24	; 0x02
    35f8:	83 e0       	ldi	r24, 0x03	; 3
    35fa:	8b 83       	std	Y+3, r24	; 0x03
    35fc:	82 e0       	ldi	r24, 0x02	; 2
    35fe:	8c 83       	std	Y+4, r24	; 0x04

    // CLR_BIT(TCCR1A,TCCR1A_WGM10);
    // SET_BIT(TCCR1A,TCCR1A_WGM11);
    // SET_BIT(TCCR1B,TCCR1B_WGM12);
    // SET_BIT(TCCR1B,TCCR1B_WGM13);
    Gpt_Init(&config);
    3600:	ce 01       	movw	r24, r28
    3602:	01 96       	adiw	r24, 0x01	; 1
    3604:	0e 94 84 11 	call	0x2308	; 0x2308 <Gpt_Init>
    ICR1_LH=0x0000;
    3608:	e6 e4       	ldi	r30, 0x46	; 70
    360a:	f0 e0       	ldi	r31, 0x00	; 0
    360c:	11 82       	std	Z+1, r1	; 0x01
    360e:	10 82       	st	Z, r1
    ICR1_LH=20000*8;
    3610:	e6 e4       	ldi	r30, 0x46	; 70
    3612:	f0 e0       	ldi	r31, 0x00	; 0
    3614:	80 e0       	ldi	r24, 0x00	; 0
    3616:	91 e7       	ldi	r25, 0x71	; 113
    3618:	91 83       	std	Z+1, r25	; 0x01
    361a:	80 83       	st	Z, r24
    OCR1BHL_DATA_REGISTER=20000;
    361c:	e8 e4       	ldi	r30, 0x48	; 72
    361e:	f0 e0       	ldi	r31, 0x00	; 0
    3620:	80 e2       	ldi	r24, 0x20	; 32
    3622:	9e e4       	ldi	r25, 0x4E	; 78
    3624:	91 83       	std	Z+1, r25	; 0x01
    3626:	80 83       	st	Z, r24
    OCR1AHL_DATA_REGISTER=0x0000;
    3628:	ea e4       	ldi	r30, 0x4A	; 74
    362a:	f0 e0       	ldi	r31, 0x00	; 0
    362c:	11 82       	std	Z+1, r1	; 0x01
    362e:	10 82       	st	Z, r1
    OCR1AHL_DATA_REGISTER=((90 *1000)/180 +1000);
    3630:	ea e4       	ldi	r30, 0x4A	; 74
    3632:	f0 e0       	ldi	r31, 0x00	; 0
    3634:	8f e6       	ldi	r24, 0x6F	; 111
    3636:	94 e0       	ldi	r25, 0x04	; 4
    3638:	91 83       	std	Z+1, r25	; 0x01
    363a:	80 83       	st	Z, r24
    // OCR1AHL_DATA_REGISTER=2000;

   
    
}
    363c:	0f 90       	pop	r0
    363e:	0f 90       	pop	r0
    3640:	0f 90       	pop	r0
    3642:	0f 90       	pop	r0
    3644:	0f 90       	pop	r0
    3646:	cf 91       	pop	r28
    3648:	df 91       	pop	r29
    364a:	08 95       	ret

0000364c <I2C_InitMaster>:
#include "Registers.h"
#include "I2C.h"
//#include "I2C_cfg.h"

void I2C_InitMaster(void)
{
    364c:	df 93       	push	r29
    364e:	cf 93       	push	r28
    3650:	cd b7       	in	r28, 0x3d	; 61
    3652:	de b7       	in	r29, 0x3e	; 62
	/* Bit Rate: 400.000 kbps using zero pre-scaler TWPS=00 and F_CPU=8Mhz */
	TWBR = 0x02;
    3654:	e0 e2       	ldi	r30, 0x20	; 32
    3656:	f0 e0       	ldi	r31, 0x00	; 0
    3658:	82 e0       	ldi	r24, 0x02	; 2
    365a:	80 83       	st	Z, r24
	TWSR = 0x00;
    365c:	e1 e2       	ldi	r30, 0x21	; 33
    365e:	f0 e0       	ldi	r31, 0x00	; 0
    3660:	10 82       	st	Z, r1

	TWCR = (1<<2); /* enable TWI */
    3662:	e6 e5       	ldi	r30, 0x56	; 86
    3664:	f0 e0       	ldi	r31, 0x00	; 0
    3666:	84 e0       	ldi	r24, 0x04	; 4
    3668:	80 83       	st	Z, r24
}
    366a:	cf 91       	pop	r28
    366c:	df 91       	pop	r29
    366e:	08 95       	ret

00003670 <I2C_SendStartCondition>:
void I2C_SendStartCondition(void)
{
    3670:	df 93       	push	r29
    3672:	cf 93       	push	r28
    3674:	cd b7       	in	r28, 0x3d	; 61
    3676:	de b7       	in	r29, 0x3e	; 62
	/*
	 * Clear the TWINT flag before sending the start bit TWINT=1
	 * send the start bit by TWSTA=1
	 * Enable TWI Module TWEN=1
	 */
	TWCR = (1 << 7) | (1 << 5) | (1 << 2);
    3678:	e6 e5       	ldi	r30, 0x56	; 86
    367a:	f0 e0       	ldi	r31, 0x00	; 0
    367c:	84 ea       	ldi	r24, 0xA4	; 164
    367e:	80 83       	st	Z, r24
	/* Wait for TWINT flag set in TWCR Register (start bit is send successfully) */
	while(GET_BIT(TWCR,7)==0);
    3680:	e6 e5       	ldi	r30, 0x56	; 86
    3682:	f0 e0       	ldi	r31, 0x00	; 0
    3684:	80 81       	ld	r24, Z
    3686:	88 23       	and	r24, r24
    3688:	dc f7       	brge	.-10     	; 0x3680 <I2C_SendStartCondition+0x10>
}
    368a:	cf 91       	pop	r28
    368c:	df 91       	pop	r29
    368e:	08 95       	ret

00003690 <I2C_SendStopCondition>:
void I2C_SendStopCondition(void)
{
    3690:	df 93       	push	r29
    3692:	cf 93       	push	r28
    3694:	cd b7       	in	r28, 0x3d	; 61
    3696:	de b7       	in	r29, 0x3e	; 62
	 *  Enable TWI Module TWEN=1 ---> //SET_BIT(TWCR,2);
		        Sent stop condition on the bus ---> //SET_BIT(TWCR,4);
		        Clear the interrupt flag To start the previous operation
		         //SET_BIT(TWCR,7);
	 */
	TWCR = (1 << 7) | (1 << 4) | (1 << 2);
    3698:	e6 e5       	ldi	r30, 0x56	; 86
    369a:	f0 e0       	ldi	r31, 0x00	; 0
    369c:	84 e9       	ldi	r24, 0x94	; 148
    369e:	80 83       	st	Z, r24
}
    36a0:	cf 91       	pop	r28
    36a2:	df 91       	pop	r29
    36a4:	08 95       	ret

000036a6 <I2C_MasterWriteDataByte>:
void I2C_MasterWriteDataByte(u8 Data)
{
    36a6:	df 93       	push	r29
    36a8:	cf 93       	push	r28
    36aa:	0f 92       	push	r0
    36ac:	cd b7       	in	r28, 0x3d	; 61
    36ae:	de b7       	in	r29, 0x3e	; 62
    36b0:	89 83       	std	Y+1, r24	; 0x01
	/* Put data On TWI data Register */
	TWDR = Data;
    36b2:	e3 e2       	ldi	r30, 0x23	; 35
    36b4:	f0 e0       	ldi	r31, 0x00	; 0
    36b6:	89 81       	ldd	r24, Y+1	; 0x01
    36b8:	80 83       	st	Z, r24
	/*
	 * Clear the TWINT flag before sending the data TWINT=1
	 * Enable TWI Module TWEN=1
	 */
	TWCR = (1 << 7) | (1 << 2);
    36ba:	e6 e5       	ldi	r30, 0x56	; 86
    36bc:	f0 e0       	ldi	r31, 0x00	; 0
    36be:	84 e8       	ldi	r24, 0x84	; 132
    36c0:	80 83       	st	Z, r24
	/* Wait for TWINT flag set in TWCR Register(data is send successfully) */
	while(GET_BIT(TWCR,7)==0);
    36c2:	e6 e5       	ldi	r30, 0x56	; 86
    36c4:	f0 e0       	ldi	r31, 0x00	; 0
    36c6:	80 81       	ld	r24, Z
    36c8:	88 23       	and	r24, r24
    36ca:	dc f7       	brge	.-10     	; 0x36c2 <I2C_MasterWriteDataByte+0x1c>
}
    36cc:	0f 90       	pop	r0
    36ce:	cf 91       	pop	r28
    36d0:	df 91       	pop	r29
    36d2:	08 95       	ret

000036d4 <I2C_MasterReadDataByteWith_ACK>:
u8   I2C_MasterReadDataByteWith_ACK(void)
{
    36d4:	df 93       	push	r29
    36d6:	cf 93       	push	r28
    36d8:	cd b7       	in	r28, 0x3d	; 61
    36da:	de b7       	in	r29, 0x3e	; 62
	 * --------------------------------------------
	 *     Enable Acknowledge bit --> //SET_BIT(TWCR,6);
	 *     Clear the interrupt flag To start the previous operation --> //SET_BIT(TWCR,7);
	 *     Enable TWI Module TWEN=1 -->//SET_BIT(TWCR,2);
	 */
	TWCR = (1 << 7) | (1 << 2) | (1 << 6);
    36dc:	e6 e5       	ldi	r30, 0x56	; 86
    36de:	f0 e0       	ldi	r31, 0x00	; 0
    36e0:	84 ec       	ldi	r24, 0xC4	; 196
    36e2:	80 83       	st	Z, r24

	/* Wait for TWINT flag set in TWCR Register (data received successfully) */
	while(GET_BIT(TWCR,7)==0);
    36e4:	e6 e5       	ldi	r30, 0x56	; 86
    36e6:	f0 e0       	ldi	r31, 0x00	; 0
    36e8:	80 81       	ld	r24, Z
    36ea:	88 23       	and	r24, r24
    36ec:	dc f7       	brge	.-10     	; 0x36e4 <I2C_MasterReadDataByteWith_ACK+0x10>
	/* Read Data */
	return TWDR;
    36ee:	e3 e2       	ldi	r30, 0x23	; 35
    36f0:	f0 e0       	ldi	r31, 0x00	; 0
    36f2:	80 81       	ld	r24, Z
}
    36f4:	cf 91       	pop	r28
    36f6:	df 91       	pop	r29
    36f8:	08 95       	ret

000036fa <I2C_MasterReadDataByteWith_NACK>:
u8   I2C_MasterReadDataByteWith_NACK(void)
{
    36fa:	df 93       	push	r29
    36fc:	cf 93       	push	r28
    36fe:	cd b7       	in	r28, 0x3d	; 61
    3700:	de b7       	in	r29, 0x3e	; 62
	 * -------------------------------------------
	 * 	 * Disable Acknowledge bit --> //CLR_BIT(TWCR,6);
	 *     Clear the interrupt flag To start the previous operation --> //SET_BIT(TWCR,7);
	 *     Enable TWI Module TWEN=1 -->//SET_BIT(TWCR,2);
	 */
	TWCR = (1 << 7) | (1 << 2);
    3702:	e6 e5       	ldi	r30, 0x56	; 86
    3704:	f0 e0       	ldi	r31, 0x00	; 0
    3706:	84 e8       	ldi	r24, 0x84	; 132
    3708:	80 83       	st	Z, r24
	/* Wait for TWINT flag set in TWCR Register (data received successfully) */
	while(GET_BIT(TWCR,7)==0);
    370a:	e6 e5       	ldi	r30, 0x56	; 86
    370c:	f0 e0       	ldi	r31, 0x00	; 0
    370e:	80 81       	ld	r24, Z
    3710:	88 23       	and	r24, r24
    3712:	dc f7       	brge	.-10     	; 0x370a <I2C_MasterReadDataByteWith_NACK+0x10>
	/* Read Data */
	return TWDR;
    3714:	e3 e2       	ldi	r30, 0x23	; 35
    3716:	f0 e0       	ldi	r31, 0x00	; 0
    3718:	80 81       	ld	r24, Z
}
    371a:	cf 91       	pop	r28
    371c:	df 91       	pop	r29
    371e:	08 95       	ret

00003720 <Keypad_Init>:
#include "std_types.h"
#include "macros.h"
#include "DIO.h"
#include "Keypad.h"

void Keypad_Init(void) {
    3720:	df 93       	push	r29
    3722:	cf 93       	push	r28
    3724:	cd b7       	in	r28, 0x3d	; 61
    3726:	de b7       	in	r29, 0x3e	; 62
    /* Set all rows to input pullup */
    DIO_SetPinMode(KEYPAD_PIN_R0, DIO_INPUT_PULLUP);
    3728:	83 e0       	ldi	r24, 0x03	; 3
    372a:	60 e0       	ldi	r22, 0x00	; 0
    372c:	41 e0       	ldi	r20, 0x01	; 1
    372e:	0e 94 37 09 	call	0x126e	; 0x126e <DIO_SetPinMode>
    DIO_SetPinMode(KEYPAD_PIN_R1, DIO_INPUT_PULLUP);
    3732:	83 e0       	ldi	r24, 0x03	; 3
    3734:	61 e0       	ldi	r22, 0x01	; 1
    3736:	41 e0       	ldi	r20, 0x01	; 1
    3738:	0e 94 37 09 	call	0x126e	; 0x126e <DIO_SetPinMode>
    DIO_SetPinMode(KEYPAD_PIN_R2, DIO_INPUT_PULLUP);
    373c:	83 e0       	ldi	r24, 0x03	; 3
    373e:	62 e0       	ldi	r22, 0x02	; 2
    3740:	41 e0       	ldi	r20, 0x01	; 1
    3742:	0e 94 37 09 	call	0x126e	; 0x126e <DIO_SetPinMode>
    DIO_SetPinMode(KEYPAD_PIN_R3, DIO_INPUT_PULLUP);
    3746:	83 e0       	ldi	r24, 0x03	; 3
    3748:	63 e0       	ldi	r22, 0x03	; 3
    374a:	41 e0       	ldi	r20, 0x01	; 1
    374c:	0e 94 37 09 	call	0x126e	; 0x126e <DIO_SetPinMode>
    /* Set all columns to output */
    DIO_SetPinMode(KEYPAD_PIN_C0, DIO_OUTPUT);
    3750:	83 e0       	ldi	r24, 0x03	; 3
    3752:	64 e0       	ldi	r22, 0x04	; 4
    3754:	42 e0       	ldi	r20, 0x02	; 2
    3756:	0e 94 37 09 	call	0x126e	; 0x126e <DIO_SetPinMode>
    DIO_SetPinMode(KEYPAD_PIN_C1, DIO_OUTPUT);
    375a:	83 e0       	ldi	r24, 0x03	; 3
    375c:	65 e0       	ldi	r22, 0x05	; 5
    375e:	42 e0       	ldi	r20, 0x02	; 2
    3760:	0e 94 37 09 	call	0x126e	; 0x126e <DIO_SetPinMode>
    DIO_SetPinMode(KEYPAD_PIN_C2, DIO_OUTPUT);
    3764:	83 e0       	ldi	r24, 0x03	; 3
    3766:	66 e0       	ldi	r22, 0x06	; 6
    3768:	42 e0       	ldi	r20, 0x02	; 2
    376a:	0e 94 37 09 	call	0x126e	; 0x126e <DIO_SetPinMode>
    DIO_SetPinMode(KEYPAD_PIN_C3, DIO_OUTPUT);
    376e:	83 e0       	ldi	r24, 0x03	; 3
    3770:	67 e0       	ldi	r22, 0x07	; 7
    3772:	42 e0       	ldi	r20, 0x02	; 2
    3774:	0e 94 37 09 	call	0x126e	; 0x126e <DIO_SetPinMode>
}
    3778:	cf 91       	pop	r28
    377a:	df 91       	pop	r29
    377c:	08 95       	ret

0000377e <Keypad_GetButtonState>:
	low  -> Pressed

*/


Keypad_StateType Keypad_GetButtonState(Keypad_ButtonType button) {
    377e:	df 93       	push	r29
    3780:	cf 93       	push	r28
    3782:	cd b7       	in	r28, 0x3d	; 61
    3784:	de b7       	in	r29, 0x3e	; 62
    3786:	28 97       	sbiw	r28, 0x08	; 8
    3788:	0f b6       	in	r0, 0x3f	; 63
    378a:	f8 94       	cli
    378c:	de bf       	out	0x3e, r29	; 62
    378e:	0f be       	out	0x3f, r0	; 63
    3790:	cd bf       	out	0x3d, r28	; 61
    3792:	8c 83       	std	Y+4, r24	; 0x04
    Keypad_StateType state = KEYPAD_STATE_NOT_PRESSED;
    3794:	81 e0       	ldi	r24, 0x01	; 1
    3796:	8b 83       	std	Y+3, r24	; 0x03
    u8 row = button / 4;
    3798:	8c 81       	ldd	r24, Y+4	; 0x04
    379a:	86 95       	lsr	r24
    379c:	86 95       	lsr	r24
    379e:	8a 83       	std	Y+2, r24	; 0x02
    u8 column = button % 4;
    37a0:	8c 81       	ldd	r24, Y+4	; 0x04
    37a2:	83 70       	andi	r24, 0x03	; 3
    37a4:	89 83       	std	Y+1, r24	; 0x01
    DIO_SetPinLevel(KEYPAD_PIN_C0, DIO_HIGH);
    37a6:	83 e0       	ldi	r24, 0x03	; 3
    37a8:	64 e0       	ldi	r22, 0x04	; 4
    37aa:	41 e0       	ldi	r20, 0x01	; 1
    37ac:	0e 94 45 0c 	call	0x188a	; 0x188a <DIO_SetPinLevel>
    DIO_SetPinLevel(KEYPAD_PIN_C1, DIO_HIGH);
    37b0:	83 e0       	ldi	r24, 0x03	; 3
    37b2:	65 e0       	ldi	r22, 0x05	; 5
    37b4:	41 e0       	ldi	r20, 0x01	; 1
    37b6:	0e 94 45 0c 	call	0x188a	; 0x188a <DIO_SetPinLevel>
    DIO_SetPinLevel(KEYPAD_PIN_C2, DIO_HIGH);
    37ba:	83 e0       	ldi	r24, 0x03	; 3
    37bc:	66 e0       	ldi	r22, 0x06	; 6
    37be:	41 e0       	ldi	r20, 0x01	; 1
    37c0:	0e 94 45 0c 	call	0x188a	; 0x188a <DIO_SetPinLevel>
    DIO_SetPinLevel(KEYPAD_PIN_C3, DIO_HIGH);
    37c4:	83 e0       	ldi	r24, 0x03	; 3
    37c6:	67 e0       	ldi	r22, 0x07	; 7
    37c8:	41 e0       	ldi	r20, 0x01	; 1
    37ca:	0e 94 45 0c 	call	0x188a	; 0x188a <DIO_SetPinLevel>
    switch (column)
    37ce:	89 81       	ldd	r24, Y+1	; 0x01
    37d0:	28 2f       	mov	r18, r24
    37d2:	30 e0       	ldi	r19, 0x00	; 0
    37d4:	38 87       	std	Y+8, r19	; 0x08
    37d6:	2f 83       	std	Y+7, r18	; 0x07
    37d8:	8f 81       	ldd	r24, Y+7	; 0x07
    37da:	98 85       	ldd	r25, Y+8	; 0x08
    37dc:	81 30       	cpi	r24, 0x01	; 1
    37de:	91 05       	cpc	r25, r1
    37e0:	d9 f0       	breq	.+54     	; 0x3818 <Keypad_GetButtonState+0x9a>
    37e2:	2f 81       	ldd	r18, Y+7	; 0x07
    37e4:	38 85       	ldd	r19, Y+8	; 0x08
    37e6:	22 30       	cpi	r18, 0x02	; 2
    37e8:	31 05       	cpc	r19, r1
    37ea:	2c f4       	brge	.+10     	; 0x37f6 <Keypad_GetButtonState+0x78>
    37ec:	8f 81       	ldd	r24, Y+7	; 0x07
    37ee:	98 85       	ldd	r25, Y+8	; 0x08
    37f0:	00 97       	sbiw	r24, 0x00	; 0
    37f2:	61 f0       	breq	.+24     	; 0x380c <Keypad_GetButtonState+0x8e>
    37f4:	22 c0       	rjmp	.+68     	; 0x383a <Keypad_GetButtonState+0xbc>
    37f6:	2f 81       	ldd	r18, Y+7	; 0x07
    37f8:	38 85       	ldd	r19, Y+8	; 0x08
    37fa:	22 30       	cpi	r18, 0x02	; 2
    37fc:	31 05       	cpc	r19, r1
    37fe:	91 f0       	breq	.+36     	; 0x3824 <Keypad_GetButtonState+0xa6>
    3800:	8f 81       	ldd	r24, Y+7	; 0x07
    3802:	98 85       	ldd	r25, Y+8	; 0x08
    3804:	83 30       	cpi	r24, 0x03	; 3
    3806:	91 05       	cpc	r25, r1
    3808:	99 f0       	breq	.+38     	; 0x3830 <Keypad_GetButtonState+0xb2>
    380a:	17 c0       	rjmp	.+46     	; 0x383a <Keypad_GetButtonState+0xbc>
    {
    case 0:
        DIO_SetPinLevel(KEYPAD_PIN_C0, DIO_LOW);
    380c:	83 e0       	ldi	r24, 0x03	; 3
    380e:	64 e0       	ldi	r22, 0x04	; 4
    3810:	40 e0       	ldi	r20, 0x00	; 0
    3812:	0e 94 45 0c 	call	0x188a	; 0x188a <DIO_SetPinLevel>
    3816:	11 c0       	rjmp	.+34     	; 0x383a <Keypad_GetButtonState+0xbc>
        break;
    case 1:
        DIO_SetPinLevel(KEYPAD_PIN_C1, DIO_LOW);
    3818:	83 e0       	ldi	r24, 0x03	; 3
    381a:	65 e0       	ldi	r22, 0x05	; 5
    381c:	40 e0       	ldi	r20, 0x00	; 0
    381e:	0e 94 45 0c 	call	0x188a	; 0x188a <DIO_SetPinLevel>
    3822:	0b c0       	rjmp	.+22     	; 0x383a <Keypad_GetButtonState+0xbc>
        break;
    case 2:
        DIO_SetPinLevel(KEYPAD_PIN_C2, DIO_LOW);
    3824:	83 e0       	ldi	r24, 0x03	; 3
    3826:	66 e0       	ldi	r22, 0x06	; 6
    3828:	40 e0       	ldi	r20, 0x00	; 0
    382a:	0e 94 45 0c 	call	0x188a	; 0x188a <DIO_SetPinLevel>
    382e:	05 c0       	rjmp	.+10     	; 0x383a <Keypad_GetButtonState+0xbc>
        break;
    case 3:
        DIO_SetPinLevel(KEYPAD_PIN_C3, DIO_LOW);
    3830:	83 e0       	ldi	r24, 0x03	; 3
    3832:	67 e0       	ldi	r22, 0x07	; 7
    3834:	40 e0       	ldi	r20, 0x00	; 0
    3836:	0e 94 45 0c 	call	0x188a	; 0x188a <DIO_SetPinLevel>
        break;
    default:
        break;
    }
    switch (row)
    383a:	8a 81       	ldd	r24, Y+2	; 0x02
    383c:	28 2f       	mov	r18, r24
    383e:	30 e0       	ldi	r19, 0x00	; 0
    3840:	3e 83       	std	Y+6, r19	; 0x06
    3842:	2d 83       	std	Y+5, r18	; 0x05
    3844:	8d 81       	ldd	r24, Y+5	; 0x05
    3846:	9e 81       	ldd	r25, Y+6	; 0x06
    3848:	81 30       	cpi	r24, 0x01	; 1
    384a:	91 05       	cpc	r25, r1
    384c:	e9 f0       	breq	.+58     	; 0x3888 <Keypad_GetButtonState+0x10a>
    384e:	2d 81       	ldd	r18, Y+5	; 0x05
    3850:	3e 81       	ldd	r19, Y+6	; 0x06
    3852:	22 30       	cpi	r18, 0x02	; 2
    3854:	31 05       	cpc	r19, r1
    3856:	2c f4       	brge	.+10     	; 0x3862 <Keypad_GetButtonState+0xe4>
    3858:	8d 81       	ldd	r24, Y+5	; 0x05
    385a:	9e 81       	ldd	r25, Y+6	; 0x06
    385c:	00 97       	sbiw	r24, 0x00	; 0
    385e:	61 f0       	breq	.+24     	; 0x3878 <Keypad_GetButtonState+0xfa>
    3860:	2a c0       	rjmp	.+84     	; 0x38b6 <Keypad_GetButtonState+0x138>
    3862:	2d 81       	ldd	r18, Y+5	; 0x05
    3864:	3e 81       	ldd	r19, Y+6	; 0x06
    3866:	22 30       	cpi	r18, 0x02	; 2
    3868:	31 05       	cpc	r19, r1
    386a:	b1 f0       	breq	.+44     	; 0x3898 <Keypad_GetButtonState+0x11a>
    386c:	8d 81       	ldd	r24, Y+5	; 0x05
    386e:	9e 81       	ldd	r25, Y+6	; 0x06
    3870:	83 30       	cpi	r24, 0x03	; 3
    3872:	91 05       	cpc	r25, r1
    3874:	c9 f0       	breq	.+50     	; 0x38a8 <Keypad_GetButtonState+0x12a>
    3876:	1f c0       	rjmp	.+62     	; 0x38b6 <Keypad_GetButtonState+0x138>
    {
    case 0:
        if (DIO_ReadPinLevel(KEYPAD_PIN_R0) == DIO_LOW) {
    3878:	83 e0       	ldi	r24, 0x03	; 3
    387a:	60 e0       	ldi	r22, 0x00	; 0
    387c:	0e 94 f4 0d 	call	0x1be8	; 0x1be8 <DIO_ReadPinLevel>
    3880:	88 23       	and	r24, r24
    3882:	c9 f4       	brne	.+50     	; 0x38b6 <Keypad_GetButtonState+0x138>
            state = KEYPAD_STATE_PRESSED;
    3884:	1b 82       	std	Y+3, r1	; 0x03
    3886:	17 c0       	rjmp	.+46     	; 0x38b6 <Keypad_GetButtonState+0x138>
        }
        break;
    case 1:
        if (DIO_ReadPinLevel(KEYPAD_PIN_R1) == DIO_LOW) {
    3888:	83 e0       	ldi	r24, 0x03	; 3
    388a:	61 e0       	ldi	r22, 0x01	; 1
    388c:	0e 94 f4 0d 	call	0x1be8	; 0x1be8 <DIO_ReadPinLevel>
    3890:	88 23       	and	r24, r24
    3892:	89 f4       	brne	.+34     	; 0x38b6 <Keypad_GetButtonState+0x138>
            state = KEYPAD_STATE_PRESSED;
    3894:	1b 82       	std	Y+3, r1	; 0x03
    3896:	0f c0       	rjmp	.+30     	; 0x38b6 <Keypad_GetButtonState+0x138>
        }
        break;
    case 2:
        if (DIO_ReadPinLevel(KEYPAD_PIN_R2) == DIO_LOW) {
    3898:	83 e0       	ldi	r24, 0x03	; 3
    389a:	62 e0       	ldi	r22, 0x02	; 2
    389c:	0e 94 f4 0d 	call	0x1be8	; 0x1be8 <DIO_ReadPinLevel>
    38a0:	88 23       	and	r24, r24
    38a2:	49 f4       	brne	.+18     	; 0x38b6 <Keypad_GetButtonState+0x138>
            state = KEYPAD_STATE_PRESSED;
    38a4:	1b 82       	std	Y+3, r1	; 0x03
    38a6:	07 c0       	rjmp	.+14     	; 0x38b6 <Keypad_GetButtonState+0x138>
        }
        break;
    case 3:
        if (DIO_ReadPinLevel(KEYPAD_PIN_R3) == DIO_LOW) {
    38a8:	83 e0       	ldi	r24, 0x03	; 3
    38aa:	63 e0       	ldi	r22, 0x03	; 3
    38ac:	0e 94 f4 0d 	call	0x1be8	; 0x1be8 <DIO_ReadPinLevel>
    38b0:	88 23       	and	r24, r24
    38b2:	09 f4       	brne	.+2      	; 0x38b6 <Keypad_GetButtonState+0x138>
            state = KEYPAD_STATE_PRESSED;
    38b4:	1b 82       	std	Y+3, r1	; 0x03
        }
        break;
    default:
        break;
    }
    return state;
    38b6:	8b 81       	ldd	r24, Y+3	; 0x03
}
    38b8:	28 96       	adiw	r28, 0x08	; 8
    38ba:	0f b6       	in	r0, 0x3f	; 63
    38bc:	f8 94       	cli
    38be:	de bf       	out	0x3e, r29	; 62
    38c0:	0f be       	out	0x3f, r0	; 63
    38c2:	cd bf       	out	0x3d, r28	; 61
    38c4:	cf 91       	pop	r28
    38c6:	df 91       	pop	r29
    38c8:	08 95       	ret

000038ca <Keypad_GetButtonStatePooling>:

Keypad_StateType Keypad_GetButtonStatePooling(Keypad_ButtonType button) {
    38ca:	df 93       	push	r29
    38cc:	cf 93       	push	r28
    38ce:	cd b7       	in	r28, 0x3d	; 61
    38d0:	de b7       	in	r29, 0x3e	; 62
    38d2:	28 97       	sbiw	r28, 0x08	; 8
    38d4:	0f b6       	in	r0, 0x3f	; 63
    38d6:	f8 94       	cli
    38d8:	de bf       	out	0x3e, r29	; 62
    38da:	0f be       	out	0x3f, r0	; 63
    38dc:	cd bf       	out	0x3d, r28	; 61
    38de:	8c 83       	std	Y+4, r24	; 0x04
    Keypad_StateType state = KEYPAD_STATE_NOT_PRESSED;
    38e0:	81 e0       	ldi	r24, 0x01	; 1
    38e2:	8b 83       	std	Y+3, r24	; 0x03
    u8 row = button / 4;
    38e4:	8c 81       	ldd	r24, Y+4	; 0x04
    38e6:	86 95       	lsr	r24
    38e8:	86 95       	lsr	r24
    38ea:	8a 83       	std	Y+2, r24	; 0x02
    u8 column = button % 4;
    38ec:	8c 81       	ldd	r24, Y+4	; 0x04
    38ee:	83 70       	andi	r24, 0x03	; 3
    38f0:	89 83       	std	Y+1, r24	; 0x01
    DIO_SetPinLevel(KEYPAD_PIN_C0, DIO_HIGH);
    38f2:	83 e0       	ldi	r24, 0x03	; 3
    38f4:	64 e0       	ldi	r22, 0x04	; 4
    38f6:	41 e0       	ldi	r20, 0x01	; 1
    38f8:	0e 94 45 0c 	call	0x188a	; 0x188a <DIO_SetPinLevel>
    DIO_SetPinLevel(KEYPAD_PIN_C1, DIO_HIGH);
    38fc:	83 e0       	ldi	r24, 0x03	; 3
    38fe:	65 e0       	ldi	r22, 0x05	; 5
    3900:	41 e0       	ldi	r20, 0x01	; 1
    3902:	0e 94 45 0c 	call	0x188a	; 0x188a <DIO_SetPinLevel>
    DIO_SetPinLevel(KEYPAD_PIN_C2, DIO_HIGH);
    3906:	83 e0       	ldi	r24, 0x03	; 3
    3908:	66 e0       	ldi	r22, 0x06	; 6
    390a:	41 e0       	ldi	r20, 0x01	; 1
    390c:	0e 94 45 0c 	call	0x188a	; 0x188a <DIO_SetPinLevel>
    DIO_SetPinLevel(KEYPAD_PIN_C3, DIO_HIGH);
    3910:	83 e0       	ldi	r24, 0x03	; 3
    3912:	67 e0       	ldi	r22, 0x07	; 7
    3914:	41 e0       	ldi	r20, 0x01	; 1
    3916:	0e 94 45 0c 	call	0x188a	; 0x188a <DIO_SetPinLevel>
    switch (column)
    391a:	89 81       	ldd	r24, Y+1	; 0x01
    391c:	28 2f       	mov	r18, r24
    391e:	30 e0       	ldi	r19, 0x00	; 0
    3920:	38 87       	std	Y+8, r19	; 0x08
    3922:	2f 83       	std	Y+7, r18	; 0x07
    3924:	8f 81       	ldd	r24, Y+7	; 0x07
    3926:	98 85       	ldd	r25, Y+8	; 0x08
    3928:	81 30       	cpi	r24, 0x01	; 1
    392a:	91 05       	cpc	r25, r1
    392c:	d9 f0       	breq	.+54     	; 0x3964 <Keypad_GetButtonStatePooling+0x9a>
    392e:	2f 81       	ldd	r18, Y+7	; 0x07
    3930:	38 85       	ldd	r19, Y+8	; 0x08
    3932:	22 30       	cpi	r18, 0x02	; 2
    3934:	31 05       	cpc	r19, r1
    3936:	2c f4       	brge	.+10     	; 0x3942 <Keypad_GetButtonStatePooling+0x78>
    3938:	8f 81       	ldd	r24, Y+7	; 0x07
    393a:	98 85       	ldd	r25, Y+8	; 0x08
    393c:	00 97       	sbiw	r24, 0x00	; 0
    393e:	61 f0       	breq	.+24     	; 0x3958 <Keypad_GetButtonStatePooling+0x8e>
    3940:	22 c0       	rjmp	.+68     	; 0x3986 <Keypad_GetButtonStatePooling+0xbc>
    3942:	2f 81       	ldd	r18, Y+7	; 0x07
    3944:	38 85       	ldd	r19, Y+8	; 0x08
    3946:	22 30       	cpi	r18, 0x02	; 2
    3948:	31 05       	cpc	r19, r1
    394a:	91 f0       	breq	.+36     	; 0x3970 <Keypad_GetButtonStatePooling+0xa6>
    394c:	8f 81       	ldd	r24, Y+7	; 0x07
    394e:	98 85       	ldd	r25, Y+8	; 0x08
    3950:	83 30       	cpi	r24, 0x03	; 3
    3952:	91 05       	cpc	r25, r1
    3954:	99 f0       	breq	.+38     	; 0x397c <Keypad_GetButtonStatePooling+0xb2>
    3956:	17 c0       	rjmp	.+46     	; 0x3986 <Keypad_GetButtonStatePooling+0xbc>
    {
    case 0:
        DIO_SetPinLevel(KEYPAD_PIN_C0, DIO_LOW);
    3958:	83 e0       	ldi	r24, 0x03	; 3
    395a:	64 e0       	ldi	r22, 0x04	; 4
    395c:	40 e0       	ldi	r20, 0x00	; 0
    395e:	0e 94 45 0c 	call	0x188a	; 0x188a <DIO_SetPinLevel>
    3962:	11 c0       	rjmp	.+34     	; 0x3986 <Keypad_GetButtonStatePooling+0xbc>
        break;
    case 1:
        DIO_SetPinLevel(KEYPAD_PIN_C1, DIO_LOW);
    3964:	83 e0       	ldi	r24, 0x03	; 3
    3966:	65 e0       	ldi	r22, 0x05	; 5
    3968:	40 e0       	ldi	r20, 0x00	; 0
    396a:	0e 94 45 0c 	call	0x188a	; 0x188a <DIO_SetPinLevel>
    396e:	0b c0       	rjmp	.+22     	; 0x3986 <Keypad_GetButtonStatePooling+0xbc>
        break;
    case 2:
        DIO_SetPinLevel(KEYPAD_PIN_C2, DIO_LOW);
    3970:	83 e0       	ldi	r24, 0x03	; 3
    3972:	66 e0       	ldi	r22, 0x06	; 6
    3974:	40 e0       	ldi	r20, 0x00	; 0
    3976:	0e 94 45 0c 	call	0x188a	; 0x188a <DIO_SetPinLevel>
    397a:	05 c0       	rjmp	.+10     	; 0x3986 <Keypad_GetButtonStatePooling+0xbc>
        break;
    case 3:
        DIO_SetPinLevel(KEYPAD_PIN_C3, DIO_LOW);
    397c:	83 e0       	ldi	r24, 0x03	; 3
    397e:	67 e0       	ldi	r22, 0x07	; 7
    3980:	40 e0       	ldi	r20, 0x00	; 0
    3982:	0e 94 45 0c 	call	0x188a	; 0x188a <DIO_SetPinLevel>
        break;
    default:
        break;
    }
    switch (row)
    3986:	8a 81       	ldd	r24, Y+2	; 0x02
    3988:	28 2f       	mov	r18, r24
    398a:	30 e0       	ldi	r19, 0x00	; 0
    398c:	3e 83       	std	Y+6, r19	; 0x06
    398e:	2d 83       	std	Y+5, r18	; 0x05
    3990:	8d 81       	ldd	r24, Y+5	; 0x05
    3992:	9e 81       	ldd	r25, Y+6	; 0x06
    3994:	81 30       	cpi	r24, 0x01	; 1
    3996:	91 05       	cpc	r25, r1
    3998:	19 f1       	breq	.+70     	; 0x39e0 <Keypad_GetButtonStatePooling+0x116>
    399a:	2d 81       	ldd	r18, Y+5	; 0x05
    399c:	3e 81       	ldd	r19, Y+6	; 0x06
    399e:	22 30       	cpi	r18, 0x02	; 2
    39a0:	31 05       	cpc	r19, r1
    39a2:	2c f4       	brge	.+10     	; 0x39ae <Keypad_GetButtonStatePooling+0xe4>
    39a4:	8d 81       	ldd	r24, Y+5	; 0x05
    39a6:	9e 81       	ldd	r25, Y+6	; 0x06
    39a8:	00 97       	sbiw	r24, 0x00	; 0
    39aa:	61 f0       	breq	.+24     	; 0x39c4 <Keypad_GetButtonStatePooling+0xfa>
    39ac:	42 c0       	rjmp	.+132    	; 0x3a32 <Keypad_GetButtonStatePooling+0x168>
    39ae:	2d 81       	ldd	r18, Y+5	; 0x05
    39b0:	3e 81       	ldd	r19, Y+6	; 0x06
    39b2:	22 30       	cpi	r18, 0x02	; 2
    39b4:	31 05       	cpc	r19, r1
    39b6:	11 f1       	breq	.+68     	; 0x39fc <Keypad_GetButtonStatePooling+0x132>
    39b8:	8d 81       	ldd	r24, Y+5	; 0x05
    39ba:	9e 81       	ldd	r25, Y+6	; 0x06
    39bc:	83 30       	cpi	r24, 0x03	; 3
    39be:	91 05       	cpc	r25, r1
    39c0:	59 f1       	breq	.+86     	; 0x3a18 <Keypad_GetButtonStatePooling+0x14e>
    39c2:	37 c0       	rjmp	.+110    	; 0x3a32 <Keypad_GetButtonStatePooling+0x168>
    {
    case 0:
        if (DIO_ReadPinLevel(KEYPAD_PIN_R0) == DIO_LOW) {
    39c4:	83 e0       	ldi	r24, 0x03	; 3
    39c6:	60 e0       	ldi	r22, 0x00	; 0
    39c8:	0e 94 f4 0d 	call	0x1be8	; 0x1be8 <DIO_ReadPinLevel>
    39cc:	88 23       	and	r24, r24
    39ce:	89 f5       	brne	.+98     	; 0x3a32 <Keypad_GetButtonStatePooling+0x168>
            state = KEYPAD_STATE_PRESSED;
    39d0:	1b 82       	std	Y+3, r1	; 0x03
            while (DIO_ReadPinLevel(KEYPAD_PIN_R0) == DIO_LOW);
    39d2:	83 e0       	ldi	r24, 0x03	; 3
    39d4:	60 e0       	ldi	r22, 0x00	; 0
    39d6:	0e 94 f4 0d 	call	0x1be8	; 0x1be8 <DIO_ReadPinLevel>
    39da:	88 23       	and	r24, r24
    39dc:	d1 f3       	breq	.-12     	; 0x39d2 <Keypad_GetButtonStatePooling+0x108>
    39de:	29 c0       	rjmp	.+82     	; 0x3a32 <Keypad_GetButtonStatePooling+0x168>
        }
        break;
    case 1:
        if (DIO_ReadPinLevel(KEYPAD_PIN_R1) == DIO_LOW) {
    39e0:	83 e0       	ldi	r24, 0x03	; 3
    39e2:	61 e0       	ldi	r22, 0x01	; 1
    39e4:	0e 94 f4 0d 	call	0x1be8	; 0x1be8 <DIO_ReadPinLevel>
    39e8:	88 23       	and	r24, r24
    39ea:	19 f5       	brne	.+70     	; 0x3a32 <Keypad_GetButtonStatePooling+0x168>
            state = KEYPAD_STATE_PRESSED;
    39ec:	1b 82       	std	Y+3, r1	; 0x03
            while (DIO_ReadPinLevel(KEYPAD_PIN_R1) == DIO_LOW);
    39ee:	83 e0       	ldi	r24, 0x03	; 3
    39f0:	61 e0       	ldi	r22, 0x01	; 1
    39f2:	0e 94 f4 0d 	call	0x1be8	; 0x1be8 <DIO_ReadPinLevel>
    39f6:	88 23       	and	r24, r24
    39f8:	d1 f3       	breq	.-12     	; 0x39ee <Keypad_GetButtonStatePooling+0x124>
    39fa:	1b c0       	rjmp	.+54     	; 0x3a32 <Keypad_GetButtonStatePooling+0x168>
        }
        break;
    case 2:
        if (DIO_ReadPinLevel(KEYPAD_PIN_R2) == DIO_LOW) {
    39fc:	83 e0       	ldi	r24, 0x03	; 3
    39fe:	62 e0       	ldi	r22, 0x02	; 2
    3a00:	0e 94 f4 0d 	call	0x1be8	; 0x1be8 <DIO_ReadPinLevel>
    3a04:	88 23       	and	r24, r24
    3a06:	a9 f4       	brne	.+42     	; 0x3a32 <Keypad_GetButtonStatePooling+0x168>
            state = KEYPAD_STATE_PRESSED;
    3a08:	1b 82       	std	Y+3, r1	; 0x03
            while (DIO_ReadPinLevel(KEYPAD_PIN_R2) == DIO_LOW);
    3a0a:	83 e0       	ldi	r24, 0x03	; 3
    3a0c:	62 e0       	ldi	r22, 0x02	; 2
    3a0e:	0e 94 f4 0d 	call	0x1be8	; 0x1be8 <DIO_ReadPinLevel>
    3a12:	88 23       	and	r24, r24
    3a14:	d1 f3       	breq	.-12     	; 0x3a0a <Keypad_GetButtonStatePooling+0x140>
    3a16:	0d c0       	rjmp	.+26     	; 0x3a32 <Keypad_GetButtonStatePooling+0x168>
        }
        break;
    case 3:
        if (DIO_ReadPinLevel(KEYPAD_PIN_R3) == DIO_LOW) {
    3a18:	83 e0       	ldi	r24, 0x03	; 3
    3a1a:	63 e0       	ldi	r22, 0x03	; 3
    3a1c:	0e 94 f4 0d 	call	0x1be8	; 0x1be8 <DIO_ReadPinLevel>
    3a20:	88 23       	and	r24, r24
    3a22:	39 f4       	brne	.+14     	; 0x3a32 <Keypad_GetButtonStatePooling+0x168>
            state = KEYPAD_STATE_PRESSED;
    3a24:	1b 82       	std	Y+3, r1	; 0x03
            while (DIO_ReadPinLevel(KEYPAD_PIN_R3) == DIO_LOW);
    3a26:	83 e0       	ldi	r24, 0x03	; 3
    3a28:	63 e0       	ldi	r22, 0x03	; 3
    3a2a:	0e 94 f4 0d 	call	0x1be8	; 0x1be8 <DIO_ReadPinLevel>
    3a2e:	88 23       	and	r24, r24
    3a30:	d1 f3       	breq	.-12     	; 0x3a26 <Keypad_GetButtonStatePooling+0x15c>
        }
        break;
    default:
        break;
    }
    return state;
    3a32:	8b 81       	ldd	r24, Y+3	; 0x03
}
    3a34:	28 96       	adiw	r28, 0x08	; 8
    3a36:	0f b6       	in	r0, 0x3f	; 63
    3a38:	f8 94       	cli
    3a3a:	de bf       	out	0x3e, r29	; 62
    3a3c:	0f be       	out	0x3f, r0	; 63
    3a3e:	cd bf       	out	0x3d, r28	; 61
    3a40:	cf 91       	pop	r28
    3a42:	df 91       	pop	r29
    3a44:	08 95       	ret

00003a46 <Keypad_GetPressedButton>:


Keypad_ButtonType Keypad_GetPressedButton(void) {
    3a46:	df 93       	push	r29
    3a48:	cf 93       	push	r28
    3a4a:	00 d0       	rcall	.+0      	; 0x3a4c <Keypad_GetPressedButton+0x6>
    3a4c:	cd b7       	in	r28, 0x3d	; 61
    3a4e:	de b7       	in	r29, 0x3e	; 62
    u8 i=0;
    3a50:	1a 82       	std	Y+2, r1	; 0x02
    Keypad_ButtonType pressed_button = KEYPAD_BUTTON_INVALID;
    3a52:	80 e1       	ldi	r24, 0x10	; 16
    3a54:	89 83       	std	Y+1, r24	; 0x01
    for (i=0; i<16; i++) {
    3a56:	1a 82       	std	Y+2, r1	; 0x02
    3a58:	0b c0       	rjmp	.+22     	; 0x3a70 <Keypad_GetPressedButton+0x2a>
        if (Keypad_GetButtonStatePooling(i) == KEYPAD_STATE_PRESSED) {
    3a5a:	8a 81       	ldd	r24, Y+2	; 0x02
    3a5c:	0e 94 65 1c 	call	0x38ca	; 0x38ca <Keypad_GetButtonStatePooling>
    3a60:	88 23       	and	r24, r24
    3a62:	19 f4       	brne	.+6      	; 0x3a6a <Keypad_GetPressedButton+0x24>
            pressed_button = i;
    3a64:	8a 81       	ldd	r24, Y+2	; 0x02
    3a66:	89 83       	std	Y+1, r24	; 0x01
    3a68:	06 c0       	rjmp	.+12     	; 0x3a76 <Keypad_GetPressedButton+0x30>


Keypad_ButtonType Keypad_GetPressedButton(void) {
    u8 i=0;
    Keypad_ButtonType pressed_button = KEYPAD_BUTTON_INVALID;
    for (i=0; i<16; i++) {
    3a6a:	8a 81       	ldd	r24, Y+2	; 0x02
    3a6c:	8f 5f       	subi	r24, 0xFF	; 255
    3a6e:	8a 83       	std	Y+2, r24	; 0x02
    3a70:	8a 81       	ldd	r24, Y+2	; 0x02
    3a72:	80 31       	cpi	r24, 0x10	; 16
    3a74:	90 f3       	brcs	.-28     	; 0x3a5a <Keypad_GetPressedButton+0x14>
        if (Keypad_GetButtonStatePooling(i) == KEYPAD_STATE_PRESSED) {
            pressed_button = i;
            break;
        }
    }
    return pressed_button;
    3a76:	89 81       	ldd	r24, Y+1	; 0x01
}
    3a78:	0f 90       	pop	r0
    3a7a:	0f 90       	pop	r0
    3a7c:	cf 91       	pop	r28
    3a7e:	df 91       	pop	r29
    3a80:	08 95       	ret

00003a82 <LCD_Init>:

static void LCD_SendData(u8 data);
static void LCD_SendCommand(u8 command);
static void LCD_InitPinsMode(void);

void LCD_Init(void) {
    3a82:	df 93       	push	r29
    3a84:	cf 93       	push	r28
    3a86:	cd b7       	in	r28, 0x3d	; 61
    3a88:	de b7       	in	r29, 0x3e	; 62
    3a8a:	2f 97       	sbiw	r28, 0x0f	; 15
    3a8c:	0f b6       	in	r0, 0x3f	; 63
    3a8e:	f8 94       	cli
    3a90:	de bf       	out	0x3e, r29	; 62
    3a92:	0f be       	out	0x3f, r0	; 63
    3a94:	cd bf       	out	0x3d, r28	; 61
    u8 command = 0;
    3a96:	1f 86       	std	Y+15, r1	; 0x0f
    LCD_InitPinsMode();
    3a98:	0e 94 18 21 	call	0x4230	; 0x4230 <LCD_InitPinsMode>
    3a9c:	80 e0       	ldi	r24, 0x00	; 0
    3a9e:	90 e0       	ldi	r25, 0x00	; 0
    3aa0:	a0 ef       	ldi	r26, 0xF0	; 240
    3aa2:	b1 e4       	ldi	r27, 0x41	; 65
    3aa4:	8b 87       	std	Y+11, r24	; 0x0b
    3aa6:	9c 87       	std	Y+12, r25	; 0x0c
    3aa8:	ad 87       	std	Y+13, r26	; 0x0d
    3aaa:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    3aac:	6b 85       	ldd	r22, Y+11	; 0x0b
    3aae:	7c 85       	ldd	r23, Y+12	; 0x0c
    3ab0:	8d 85       	ldd	r24, Y+13	; 0x0d
    3ab2:	9e 85       	ldd	r25, Y+14	; 0x0e
    3ab4:	20 e0       	ldi	r18, 0x00	; 0
    3ab6:	30 e0       	ldi	r19, 0x00	; 0
    3ab8:	4a ef       	ldi	r20, 0xFA	; 250
    3aba:	54 e4       	ldi	r21, 0x44	; 68
    3abc:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    3ac0:	dc 01       	movw	r26, r24
    3ac2:	cb 01       	movw	r24, r22
    3ac4:	8f 83       	std	Y+7, r24	; 0x07
    3ac6:	98 87       	std	Y+8, r25	; 0x08
    3ac8:	a9 87       	std	Y+9, r26	; 0x09
    3aca:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    3acc:	6f 81       	ldd	r22, Y+7	; 0x07
    3ace:	78 85       	ldd	r23, Y+8	; 0x08
    3ad0:	89 85       	ldd	r24, Y+9	; 0x09
    3ad2:	9a 85       	ldd	r25, Y+10	; 0x0a
    3ad4:	20 e0       	ldi	r18, 0x00	; 0
    3ad6:	30 e0       	ldi	r19, 0x00	; 0
    3ad8:	40 e8       	ldi	r20, 0x80	; 128
    3ada:	5f e3       	ldi	r21, 0x3F	; 63
    3adc:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    3ae0:	88 23       	and	r24, r24
    3ae2:	2c f4       	brge	.+10     	; 0x3aee <LCD_Init+0x6c>
		__ticks = 1;
    3ae4:	81 e0       	ldi	r24, 0x01	; 1
    3ae6:	90 e0       	ldi	r25, 0x00	; 0
    3ae8:	9e 83       	std	Y+6, r25	; 0x06
    3aea:	8d 83       	std	Y+5, r24	; 0x05
    3aec:	3f c0       	rjmp	.+126    	; 0x3b6c <LCD_Init+0xea>
	else if (__tmp > 65535)
    3aee:	6f 81       	ldd	r22, Y+7	; 0x07
    3af0:	78 85       	ldd	r23, Y+8	; 0x08
    3af2:	89 85       	ldd	r24, Y+9	; 0x09
    3af4:	9a 85       	ldd	r25, Y+10	; 0x0a
    3af6:	20 e0       	ldi	r18, 0x00	; 0
    3af8:	3f ef       	ldi	r19, 0xFF	; 255
    3afa:	4f e7       	ldi	r20, 0x7F	; 127
    3afc:	57 e4       	ldi	r21, 0x47	; 71
    3afe:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    3b02:	18 16       	cp	r1, r24
    3b04:	4c f5       	brge	.+82     	; 0x3b58 <LCD_Init+0xd6>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    3b06:	6b 85       	ldd	r22, Y+11	; 0x0b
    3b08:	7c 85       	ldd	r23, Y+12	; 0x0c
    3b0a:	8d 85       	ldd	r24, Y+13	; 0x0d
    3b0c:	9e 85       	ldd	r25, Y+14	; 0x0e
    3b0e:	20 e0       	ldi	r18, 0x00	; 0
    3b10:	30 e0       	ldi	r19, 0x00	; 0
    3b12:	40 e2       	ldi	r20, 0x20	; 32
    3b14:	51 e4       	ldi	r21, 0x41	; 65
    3b16:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    3b1a:	dc 01       	movw	r26, r24
    3b1c:	cb 01       	movw	r24, r22
    3b1e:	bc 01       	movw	r22, r24
    3b20:	cd 01       	movw	r24, r26
    3b22:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    3b26:	dc 01       	movw	r26, r24
    3b28:	cb 01       	movw	r24, r22
    3b2a:	9e 83       	std	Y+6, r25	; 0x06
    3b2c:	8d 83       	std	Y+5, r24	; 0x05
    3b2e:	0f c0       	rjmp	.+30     	; 0x3b4e <LCD_Init+0xcc>
    3b30:	88 ec       	ldi	r24, 0xC8	; 200
    3b32:	90 e0       	ldi	r25, 0x00	; 0
    3b34:	9c 83       	std	Y+4, r25	; 0x04
    3b36:	8b 83       	std	Y+3, r24	; 0x03
    milliseconds can be achieved.
 */
void
_delay_loop_2(uint16_t __count)
{
	__asm__ volatile (
    3b38:	8b 81       	ldd	r24, Y+3	; 0x03
    3b3a:	9c 81       	ldd	r25, Y+4	; 0x04
    3b3c:	01 97       	sbiw	r24, 0x01	; 1
    3b3e:	f1 f7       	brne	.-4      	; 0x3b3c <LCD_Init+0xba>
    3b40:	9c 83       	std	Y+4, r25	; 0x04
    3b42:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    3b44:	8d 81       	ldd	r24, Y+5	; 0x05
    3b46:	9e 81       	ldd	r25, Y+6	; 0x06
    3b48:	01 97       	sbiw	r24, 0x01	; 1
    3b4a:	9e 83       	std	Y+6, r25	; 0x06
    3b4c:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    3b4e:	8d 81       	ldd	r24, Y+5	; 0x05
    3b50:	9e 81       	ldd	r25, Y+6	; 0x06
    3b52:	00 97       	sbiw	r24, 0x00	; 0
    3b54:	69 f7       	brne	.-38     	; 0x3b30 <LCD_Init+0xae>
    3b56:	14 c0       	rjmp	.+40     	; 0x3b80 <LCD_Init+0xfe>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    3b58:	6f 81       	ldd	r22, Y+7	; 0x07
    3b5a:	78 85       	ldd	r23, Y+8	; 0x08
    3b5c:	89 85       	ldd	r24, Y+9	; 0x09
    3b5e:	9a 85       	ldd	r25, Y+10	; 0x0a
    3b60:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    3b64:	dc 01       	movw	r26, r24
    3b66:	cb 01       	movw	r24, r22
    3b68:	9e 83       	std	Y+6, r25	; 0x06
    3b6a:	8d 83       	std	Y+5, r24	; 0x05
    3b6c:	8d 81       	ldd	r24, Y+5	; 0x05
    3b6e:	9e 81       	ldd	r25, Y+6	; 0x06
    3b70:	9a 83       	std	Y+2, r25	; 0x02
    3b72:	89 83       	std	Y+1, r24	; 0x01
    3b74:	89 81       	ldd	r24, Y+1	; 0x01
    3b76:	9a 81       	ldd	r25, Y+2	; 0x02
    3b78:	01 97       	sbiw	r24, 0x01	; 1
    3b7a:	f1 f7       	brne	.-4      	; 0x3b78 <LCD_Init+0xf6>
    3b7c:	9a 83       	std	Y+2, r25	; 0x02
    3b7e:	89 83       	std	Y+1, r24	; 0x01

    /* Function Set:
        N: 1 (two lines)
        F: 0 (5x7)
    */
    command = 0b00110000;
    3b80:	80 e3       	ldi	r24, 0x30	; 48
    3b82:	8f 87       	std	Y+15, r24	; 0x0f
    #if (LCD_MODE_LINES == LCD_TWO_LINES)
        SET_BIT(command, 3);
    3b84:	8f 85       	ldd	r24, Y+15	; 0x0f
    3b86:	88 60       	ori	r24, 0x08	; 8
    3b88:	8f 87       	std	Y+15, r24	; 0x0f
    #endif
    #if (LCD_MODE_DOTS == LCD_DOTS_5X10)
        SET_BIT(command, 2);
    3b8a:	8f 85       	ldd	r24, Y+15	; 0x0f
    3b8c:	84 60       	ori	r24, 0x04	; 4
    3b8e:	8f 87       	std	Y+15, r24	; 0x0f
    #endif
    LCD_SendCommand(command);
    3b90:	8f 85       	ldd	r24, Y+15	; 0x0f
    3b92:	0e 94 42 1f 	call	0x3e84	; 0x3e84 <LCD_SendCommand>
    /* Display ON/OFF
        D: 1 (Display ON)
        C: 0 (Cursor off)
        B: 0 (Cursor not blink)
    */
    command = 0b00001000;
    3b96:	88 e0       	ldi	r24, 0x08	; 8
    3b98:	8f 87       	std	Y+15, r24	; 0x0f
    #if (LCD_MODE_DISPLAY == LCD_DISPLAY_ON)
        SET_BIT(command, 2);
    3b9a:	8f 85       	ldd	r24, Y+15	; 0x0f
    3b9c:	84 60       	ori	r24, 0x04	; 4
    3b9e:	8f 87       	std	Y+15, r24	; 0x0f
    #endif
    #if (LCD_MODE_CURSOR == LCD_CURSOR_ON_BLINK)
        SET_BIT(command, 0);
    3ba0:	8f 85       	ldd	r24, Y+15	; 0x0f
    3ba2:	81 60       	ori	r24, 0x01	; 1
    3ba4:	8f 87       	std	Y+15, r24	; 0x0f
        SET_BIT(command, 1);
    3ba6:	8f 85       	ldd	r24, Y+15	; 0x0f
    3ba8:	82 60       	ori	r24, 0x02	; 2
    3baa:	8f 87       	std	Y+15, r24	; 0x0f
    #endif
    #if (LCD_MODE_CURSOR == LCD_CURSOR_ON_NO_BLINK)
        SET_BIT(command, 1);
    3bac:	8f 85       	ldd	r24, Y+15	; 0x0f
    3bae:	82 60       	ori	r24, 0x02	; 2
    3bb0:	8f 87       	std	Y+15, r24	; 0x0f
    #endif
    LCD_SendCommand(command);
    3bb2:	8f 85       	ldd	r24, Y+15	; 0x0f
    3bb4:	0e 94 42 1f 	call	0x3e84	; 0x3e84 <LCD_SendCommand>

    /* Display Clear */
    LCD_SendCommand(0b00000001);
    3bb8:	81 e0       	ldi	r24, 0x01	; 1
    3bba:	0e 94 42 1f 	call	0x3e84	; 0x3e84 <LCD_SendCommand>
}
    3bbe:	2f 96       	adiw	r28, 0x0f	; 15
    3bc0:	0f b6       	in	r0, 0x3f	; 63
    3bc2:	f8 94       	cli
    3bc4:	de bf       	out	0x3e, r29	; 62
    3bc6:	0f be       	out	0x3f, r0	; 63
    3bc8:	cd bf       	out	0x3d, r28	; 61
    3bca:	cf 91       	pop	r28
    3bcc:	df 91       	pop	r29
    3bce:	08 95       	ret

00003bd0 <LCD_Clear>:


void LCD_Clear (void) {
    3bd0:	df 93       	push	r29
    3bd2:	cf 93       	push	r28
    3bd4:	cd b7       	in	r28, 0x3d	; 61
    3bd6:	de b7       	in	r29, 0x3e	; 62
    LCD_SendCommand(0b00000001);
    3bd8:	81 e0       	ldi	r24, 0x01	; 1
    3bda:	0e 94 42 1f 	call	0x3e84	; 0x3e84 <LCD_SendCommand>
}
    3bde:	cf 91       	pop	r28
    3be0:	df 91       	pop	r29
    3be2:	08 95       	ret

00003be4 <LCD_DisplayCharacter>:

void LCD_DisplayCharacter (u8 data) {
    3be4:	df 93       	push	r29
    3be6:	cf 93       	push	r28
    3be8:	0f 92       	push	r0
    3bea:	cd b7       	in	r28, 0x3d	; 61
    3bec:	de b7       	in	r29, 0x3e	; 62
    3bee:	89 83       	std	Y+1, r24	; 0x01
    LCD_SendData(data);
    3bf0:	89 81       	ldd	r24, Y+1	; 0x01
    3bf2:	0e 94 2d 20 	call	0x405a	; 0x405a <LCD_SendData>
}
    3bf6:	0f 90       	pop	r0
    3bf8:	cf 91       	pop	r28
    3bfa:	df 91       	pop	r29
    3bfc:	08 95       	ret

00003bfe <LCD_DisplayString>:

void LCD_DisplayString (u8 *str) {
    3bfe:	df 93       	push	r29
    3c00:	cf 93       	push	r28
    3c02:	00 d0       	rcall	.+0      	; 0x3c04 <LCD_DisplayString+0x6>
    3c04:	0f 92       	push	r0
    3c06:	cd b7       	in	r28, 0x3d	; 61
    3c08:	de b7       	in	r29, 0x3e	; 62
    3c0a:	9b 83       	std	Y+3, r25	; 0x03
    3c0c:	8a 83       	std	Y+2, r24	; 0x02
    u8 i=0;
    3c0e:	19 82       	std	Y+1, r1	; 0x01
    3c10:	0e c0       	rjmp	.+28     	; 0x3c2e <LCD_DisplayString+0x30>
    while(str[i] != '\0') {
        LCD_DisplayCharacter(str[i]);
    3c12:	89 81       	ldd	r24, Y+1	; 0x01
    3c14:	28 2f       	mov	r18, r24
    3c16:	30 e0       	ldi	r19, 0x00	; 0
    3c18:	8a 81       	ldd	r24, Y+2	; 0x02
    3c1a:	9b 81       	ldd	r25, Y+3	; 0x03
    3c1c:	fc 01       	movw	r30, r24
    3c1e:	e2 0f       	add	r30, r18
    3c20:	f3 1f       	adc	r31, r19
    3c22:	80 81       	ld	r24, Z
    3c24:	0e 94 f2 1d 	call	0x3be4	; 0x3be4 <LCD_DisplayCharacter>
        i++;
    3c28:	89 81       	ldd	r24, Y+1	; 0x01
    3c2a:	8f 5f       	subi	r24, 0xFF	; 255
    3c2c:	89 83       	std	Y+1, r24	; 0x01
    LCD_SendData(data);
}

void LCD_DisplayString (u8 *str) {
    u8 i=0;
    while(str[i] != '\0') {
    3c2e:	89 81       	ldd	r24, Y+1	; 0x01
    3c30:	28 2f       	mov	r18, r24
    3c32:	30 e0       	ldi	r19, 0x00	; 0
    3c34:	8a 81       	ldd	r24, Y+2	; 0x02
    3c36:	9b 81       	ldd	r25, Y+3	; 0x03
    3c38:	fc 01       	movw	r30, r24
    3c3a:	e2 0f       	add	r30, r18
    3c3c:	f3 1f       	adc	r31, r19
    3c3e:	80 81       	ld	r24, Z
    3c40:	88 23       	and	r24, r24
    3c42:	39 f7       	brne	.-50     	; 0x3c12 <LCD_DisplayString+0x14>
        LCD_DisplayCharacter(str[i]);
        i++;
    }
}
    3c44:	0f 90       	pop	r0
    3c46:	0f 90       	pop	r0
    3c48:	0f 90       	pop	r0
    3c4a:	cf 91       	pop	r28
    3c4c:	df 91       	pop	r29
    3c4e:	08 95       	ret

00003c50 <LCD_SetCursorPosition>:

void LCD_SetCursorPosition(u8 row, u8 column) {
    3c50:	df 93       	push	r29
    3c52:	cf 93       	push	r28
    3c54:	00 d0       	rcall	.+0      	; 0x3c56 <LCD_SetCursorPosition+0x6>
    3c56:	0f 92       	push	r0
    3c58:	cd b7       	in	r28, 0x3d	; 61
    3c5a:	de b7       	in	r29, 0x3e	; 62
    3c5c:	8a 83       	std	Y+2, r24	; 0x02
    3c5e:	6b 83       	std	Y+3, r22	; 0x03
    u8 address = column + row*0x40;
    3c60:	8a 81       	ldd	r24, Y+2	; 0x02
    3c62:	88 2f       	mov	r24, r24
    3c64:	90 e0       	ldi	r25, 0x00	; 0
    3c66:	00 24       	eor	r0, r0
    3c68:	96 95       	lsr	r25
    3c6a:	87 95       	ror	r24
    3c6c:	07 94       	ror	r0
    3c6e:	96 95       	lsr	r25
    3c70:	87 95       	ror	r24
    3c72:	07 94       	ror	r0
    3c74:	98 2f       	mov	r25, r24
    3c76:	80 2d       	mov	r24, r0
    3c78:	98 2f       	mov	r25, r24
    3c7a:	8b 81       	ldd	r24, Y+3	; 0x03
    3c7c:	89 0f       	add	r24, r25
    3c7e:	89 83       	std	Y+1, r24	; 0x01
    SET_BIT(address, 7);
    3c80:	89 81       	ldd	r24, Y+1	; 0x01
    3c82:	80 68       	ori	r24, 0x80	; 128
    3c84:	89 83       	std	Y+1, r24	; 0x01
    LCD_SendCommand(address);
    3c86:	89 81       	ldd	r24, Y+1	; 0x01
    3c88:	0e 94 42 1f 	call	0x3e84	; 0x3e84 <LCD_SendCommand>
}
    3c8c:	0f 90       	pop	r0
    3c8e:	0f 90       	pop	r0
    3c90:	0f 90       	pop	r0
    3c92:	cf 91       	pop	r28
    3c94:	df 91       	pop	r29
    3c96:	08 95       	ret

00003c98 <LCD_DisplayNumber>:


void LCD_DisplayNumber (s32 number) {
    3c98:	ef 92       	push	r14
    3c9a:	ff 92       	push	r15
    3c9c:	0f 93       	push	r16
    3c9e:	1f 93       	push	r17
    3ca0:	df 93       	push	r29
    3ca2:	cf 93       	push	r28
    3ca4:	cd b7       	in	r28, 0x3d	; 61
    3ca6:	de b7       	in	r29, 0x3e	; 62
    3ca8:	2a 97       	sbiw	r28, 0x0a	; 10
    3caa:	0f b6       	in	r0, 0x3f	; 63
    3cac:	f8 94       	cli
    3cae:	de bf       	out	0x3e, r29	; 62
    3cb0:	0f be       	out	0x3f, r0	; 63
    3cb2:	cd bf       	out	0x3d, r28	; 61
    3cb4:	6f 83       	std	Y+7, r22	; 0x07
    3cb6:	78 87       	std	Y+8, r23	; 0x08
    3cb8:	89 87       	std	Y+9, r24	; 0x09
    3cba:	9a 87       	std	Y+10, r25	; 0x0a
    u32 reversed_number = 0;
    3cbc:	1b 82       	std	Y+3, r1	; 0x03
    3cbe:	1c 82       	std	Y+4, r1	; 0x04
    3cc0:	1d 82       	std	Y+5, r1	; 0x05
    3cc2:	1e 82       	std	Y+6, r1	; 0x06
    u8 digits = 0;
    3cc4:	1a 82       	std	Y+2, r1	; 0x02
    if (number < 0) {
    3cc6:	8f 81       	ldd	r24, Y+7	; 0x07
    3cc8:	98 85       	ldd	r25, Y+8	; 0x08
    3cca:	a9 85       	ldd	r26, Y+9	; 0x09
    3ccc:	ba 85       	ldd	r27, Y+10	; 0x0a
    3cce:	bb 23       	and	r27, r27
    3cd0:	9c f4       	brge	.+38     	; 0x3cf8 <LCD_DisplayNumber+0x60>
        number = number*-1;
    3cd2:	8f 81       	ldd	r24, Y+7	; 0x07
    3cd4:	98 85       	ldd	r25, Y+8	; 0x08
    3cd6:	a9 85       	ldd	r26, Y+9	; 0x09
    3cd8:	ba 85       	ldd	r27, Y+10	; 0x0a
    3cda:	b0 95       	com	r27
    3cdc:	a0 95       	com	r26
    3cde:	90 95       	com	r25
    3ce0:	81 95       	neg	r24
    3ce2:	9f 4f       	sbci	r25, 0xFF	; 255
    3ce4:	af 4f       	sbci	r26, 0xFF	; 255
    3ce6:	bf 4f       	sbci	r27, 0xFF	; 255
    3ce8:	8f 83       	std	Y+7, r24	; 0x07
    3cea:	98 87       	std	Y+8, r25	; 0x08
    3cec:	a9 87       	std	Y+9, r26	; 0x09
    3cee:	ba 87       	std	Y+10, r27	; 0x0a
        LCD_DisplayCharacter('-');
    3cf0:	8d e2       	ldi	r24, 0x2D	; 45
    3cf2:	0e 94 f2 1d 	call	0x3be4	; 0x3be4 <LCD_DisplayCharacter>
    3cf6:	45 c0       	rjmp	.+138    	; 0x3d82 <LCD_DisplayNumber+0xea>
    }
    else if (number == 0) {
    3cf8:	8f 81       	ldd	r24, Y+7	; 0x07
    3cfa:	98 85       	ldd	r25, Y+8	; 0x08
    3cfc:	a9 85       	ldd	r26, Y+9	; 0x09
    3cfe:	ba 85       	ldd	r27, Y+10	; 0x0a
    3d00:	00 97       	sbiw	r24, 0x00	; 0
    3d02:	a1 05       	cpc	r26, r1
    3d04:	b1 05       	cpc	r27, r1
    3d06:	e9 f5       	brne	.+122    	; 0x3d82 <LCD_DisplayNumber+0xea>
        LCD_DisplayCharacter('0');
    3d08:	80 e3       	ldi	r24, 0x30	; 48
    3d0a:	0e 94 f2 1d 	call	0x3be4	; 0x3be4 <LCD_DisplayCharacter>
    3d0e:	39 c0       	rjmp	.+114    	; 0x3d82 <LCD_DisplayNumber+0xea>
    }
    while (number != 0)
    {
        reversed_number = (reversed_number*10) + (number%10);
    3d10:	8b 81       	ldd	r24, Y+3	; 0x03
    3d12:	9c 81       	ldd	r25, Y+4	; 0x04
    3d14:	ad 81       	ldd	r26, Y+5	; 0x05
    3d16:	be 81       	ldd	r27, Y+6	; 0x06
    3d18:	2a e0       	ldi	r18, 0x0A	; 10
    3d1a:	30 e0       	ldi	r19, 0x00	; 0
    3d1c:	40 e0       	ldi	r20, 0x00	; 0
    3d1e:	50 e0       	ldi	r21, 0x00	; 0
    3d20:	bc 01       	movw	r22, r24
    3d22:	cd 01       	movw	r24, r26
    3d24:	0e 94 93 27 	call	0x4f26	; 0x4f26 <__mulsi3>
    3d28:	7b 01       	movw	r14, r22
    3d2a:	8c 01       	movw	r16, r24
    3d2c:	8f 81       	ldd	r24, Y+7	; 0x07
    3d2e:	98 85       	ldd	r25, Y+8	; 0x08
    3d30:	a9 85       	ldd	r26, Y+9	; 0x09
    3d32:	ba 85       	ldd	r27, Y+10	; 0x0a
    3d34:	2a e0       	ldi	r18, 0x0A	; 10
    3d36:	30 e0       	ldi	r19, 0x00	; 0
    3d38:	40 e0       	ldi	r20, 0x00	; 0
    3d3a:	50 e0       	ldi	r21, 0x00	; 0
    3d3c:	bc 01       	movw	r22, r24
    3d3e:	cd 01       	movw	r24, r26
    3d40:	0e 94 f4 27 	call	0x4fe8	; 0x4fe8 <__divmodsi4>
    3d44:	dc 01       	movw	r26, r24
    3d46:	cb 01       	movw	r24, r22
    3d48:	8e 0d       	add	r24, r14
    3d4a:	9f 1d       	adc	r25, r15
    3d4c:	a0 1f       	adc	r26, r16
    3d4e:	b1 1f       	adc	r27, r17
    3d50:	8b 83       	std	Y+3, r24	; 0x03
    3d52:	9c 83       	std	Y+4, r25	; 0x04
    3d54:	ad 83       	std	Y+5, r26	; 0x05
    3d56:	be 83       	std	Y+6, r27	; 0x06
        number = number / 10;
    3d58:	8f 81       	ldd	r24, Y+7	; 0x07
    3d5a:	98 85       	ldd	r25, Y+8	; 0x08
    3d5c:	a9 85       	ldd	r26, Y+9	; 0x09
    3d5e:	ba 85       	ldd	r27, Y+10	; 0x0a
    3d60:	2a e0       	ldi	r18, 0x0A	; 10
    3d62:	30 e0       	ldi	r19, 0x00	; 0
    3d64:	40 e0       	ldi	r20, 0x00	; 0
    3d66:	50 e0       	ldi	r21, 0x00	; 0
    3d68:	bc 01       	movw	r22, r24
    3d6a:	cd 01       	movw	r24, r26
    3d6c:	0e 94 f4 27 	call	0x4fe8	; 0x4fe8 <__divmodsi4>
    3d70:	da 01       	movw	r26, r20
    3d72:	c9 01       	movw	r24, r18
    3d74:	8f 83       	std	Y+7, r24	; 0x07
    3d76:	98 87       	std	Y+8, r25	; 0x08
    3d78:	a9 87       	std	Y+9, r26	; 0x09
    3d7a:	ba 87       	std	Y+10, r27	; 0x0a
        digits++;
    3d7c:	8a 81       	ldd	r24, Y+2	; 0x02
    3d7e:	8f 5f       	subi	r24, 0xFF	; 255
    3d80:	8a 83       	std	Y+2, r24	; 0x02
        LCD_DisplayCharacter('-');
    }
    else if (number == 0) {
        LCD_DisplayCharacter('0');
    }
    while (number != 0)
    3d82:	8f 81       	ldd	r24, Y+7	; 0x07
    3d84:	98 85       	ldd	r25, Y+8	; 0x08
    3d86:	a9 85       	ldd	r26, Y+9	; 0x09
    3d88:	ba 85       	ldd	r27, Y+10	; 0x0a
    3d8a:	00 97       	sbiw	r24, 0x00	; 0
    3d8c:	a1 05       	cpc	r26, r1
    3d8e:	b1 05       	cpc	r27, r1
    3d90:	09 f0       	breq	.+2      	; 0x3d94 <LCD_DisplayNumber+0xfc>
    3d92:	be cf       	rjmp	.-132    	; 0x3d10 <LCD_DisplayNumber+0x78>
    3d94:	2a c0       	rjmp	.+84     	; 0x3dea <LCD_DisplayNumber+0x152>
        number = number / 10;
        digits++;
    }
    while (reversed_number != 0)
    {
        u8 data = reversed_number % 10;
    3d96:	8b 81       	ldd	r24, Y+3	; 0x03
    3d98:	9c 81       	ldd	r25, Y+4	; 0x04
    3d9a:	ad 81       	ldd	r26, Y+5	; 0x05
    3d9c:	be 81       	ldd	r27, Y+6	; 0x06
    3d9e:	2a e0       	ldi	r18, 0x0A	; 10
    3da0:	30 e0       	ldi	r19, 0x00	; 0
    3da2:	40 e0       	ldi	r20, 0x00	; 0
    3da4:	50 e0       	ldi	r21, 0x00	; 0
    3da6:	bc 01       	movw	r22, r24
    3da8:	cd 01       	movw	r24, r26
    3daa:	0e 94 d2 27 	call	0x4fa4	; 0x4fa4 <__udivmodsi4>
    3dae:	dc 01       	movw	r26, r24
    3db0:	cb 01       	movw	r24, r22
    3db2:	89 83       	std	Y+1, r24	; 0x01
        data = data + '0';
    3db4:	89 81       	ldd	r24, Y+1	; 0x01
    3db6:	80 5d       	subi	r24, 0xD0	; 208
    3db8:	89 83       	std	Y+1, r24	; 0x01
        LCD_DisplayCharacter(data);
    3dba:	89 81       	ldd	r24, Y+1	; 0x01
    3dbc:	0e 94 f2 1d 	call	0x3be4	; 0x3be4 <LCD_DisplayCharacter>
        reversed_number = reversed_number / 10;
    3dc0:	8b 81       	ldd	r24, Y+3	; 0x03
    3dc2:	9c 81       	ldd	r25, Y+4	; 0x04
    3dc4:	ad 81       	ldd	r26, Y+5	; 0x05
    3dc6:	be 81       	ldd	r27, Y+6	; 0x06
    3dc8:	2a e0       	ldi	r18, 0x0A	; 10
    3dca:	30 e0       	ldi	r19, 0x00	; 0
    3dcc:	40 e0       	ldi	r20, 0x00	; 0
    3dce:	50 e0       	ldi	r21, 0x00	; 0
    3dd0:	bc 01       	movw	r22, r24
    3dd2:	cd 01       	movw	r24, r26
    3dd4:	0e 94 d2 27 	call	0x4fa4	; 0x4fa4 <__udivmodsi4>
    3dd8:	da 01       	movw	r26, r20
    3dda:	c9 01       	movw	r24, r18
    3ddc:	8b 83       	std	Y+3, r24	; 0x03
    3dde:	9c 83       	std	Y+4, r25	; 0x04
    3de0:	ad 83       	std	Y+5, r26	; 0x05
    3de2:	be 83       	std	Y+6, r27	; 0x06
        digits--;
    3de4:	8a 81       	ldd	r24, Y+2	; 0x02
    3de6:	81 50       	subi	r24, 0x01	; 1
    3de8:	8a 83       	std	Y+2, r24	; 0x02
    {
        reversed_number = (reversed_number*10) + (number%10);
        number = number / 10;
        digits++;
    }
    while (reversed_number != 0)
    3dea:	8b 81       	ldd	r24, Y+3	; 0x03
    3dec:	9c 81       	ldd	r25, Y+4	; 0x04
    3dee:	ad 81       	ldd	r26, Y+5	; 0x05
    3df0:	be 81       	ldd	r27, Y+6	; 0x06
    3df2:	00 97       	sbiw	r24, 0x00	; 0
    3df4:	a1 05       	cpc	r26, r1
    3df6:	b1 05       	cpc	r27, r1
    3df8:	71 f6       	brne	.-100    	; 0x3d96 <LCD_DisplayNumber+0xfe>
    3dfa:	06 c0       	rjmp	.+12     	; 0x3e08 <LCD_DisplayNumber+0x170>
        LCD_DisplayCharacter(data);
        reversed_number = reversed_number / 10;
        digits--;
    }
    while (digits != 0) {
        LCD_DisplayCharacter('0');
    3dfc:	80 e3       	ldi	r24, 0x30	; 48
    3dfe:	0e 94 f2 1d 	call	0x3be4	; 0x3be4 <LCD_DisplayCharacter>
        digits--;
    3e02:	8a 81       	ldd	r24, Y+2	; 0x02
    3e04:	81 50       	subi	r24, 0x01	; 1
    3e06:	8a 83       	std	Y+2, r24	; 0x02
        data = data + '0';
        LCD_DisplayCharacter(data);
        reversed_number = reversed_number / 10;
        digits--;
    }
    while (digits != 0) {
    3e08:	8a 81       	ldd	r24, Y+2	; 0x02
    3e0a:	88 23       	and	r24, r24
    3e0c:	b9 f7       	brne	.-18     	; 0x3dfc <LCD_DisplayNumber+0x164>
        LCD_DisplayCharacter('0');
        digits--;
    }

}
    3e0e:	2a 96       	adiw	r28, 0x0a	; 10
    3e10:	0f b6       	in	r0, 0x3f	; 63
    3e12:	f8 94       	cli
    3e14:	de bf       	out	0x3e, r29	; 62
    3e16:	0f be       	out	0x3f, r0	; 63
    3e18:	cd bf       	out	0x3d, r28	; 61
    3e1a:	cf 91       	pop	r28
    3e1c:	df 91       	pop	r29
    3e1e:	1f 91       	pop	r17
    3e20:	0f 91       	pop	r16
    3e22:	ff 90       	pop	r15
    3e24:	ef 90       	pop	r14
    3e26:	08 95       	ret

00003e28 <LCD_ShiftLeft>:

void LCD_ShiftLeft (u8 counter) {
    3e28:	df 93       	push	r29
    3e2a:	cf 93       	push	r28
    3e2c:	00 d0       	rcall	.+0      	; 0x3e2e <LCD_ShiftLeft+0x6>
    3e2e:	cd b7       	in	r28, 0x3d	; 61
    3e30:	de b7       	in	r29, 0x3e	; 62
    3e32:	8a 83       	std	Y+2, r24	; 0x02
    u8 i;
    for (i=0; i<counter; i++) {
    3e34:	19 82       	std	Y+1, r1	; 0x01
    3e36:	06 c0       	rjmp	.+12     	; 0x3e44 <LCD_ShiftLeft+0x1c>
        LCD_SendCommand(0b00011000);
    3e38:	88 e1       	ldi	r24, 0x18	; 24
    3e3a:	0e 94 42 1f 	call	0x3e84	; 0x3e84 <LCD_SendCommand>

}

void LCD_ShiftLeft (u8 counter) {
    u8 i;
    for (i=0; i<counter; i++) {
    3e3e:	89 81       	ldd	r24, Y+1	; 0x01
    3e40:	8f 5f       	subi	r24, 0xFF	; 255
    3e42:	89 83       	std	Y+1, r24	; 0x01
    3e44:	99 81       	ldd	r25, Y+1	; 0x01
    3e46:	8a 81       	ldd	r24, Y+2	; 0x02
    3e48:	98 17       	cp	r25, r24
    3e4a:	b0 f3       	brcs	.-20     	; 0x3e38 <LCD_ShiftLeft+0x10>
        LCD_SendCommand(0b00011000);
    }
}
    3e4c:	0f 90       	pop	r0
    3e4e:	0f 90       	pop	r0
    3e50:	cf 91       	pop	r28
    3e52:	df 91       	pop	r29
    3e54:	08 95       	ret

00003e56 <LCD_ShiftRight>:
void LCD_ShiftRight (u8 counter) {
    3e56:	df 93       	push	r29
    3e58:	cf 93       	push	r28
    3e5a:	00 d0       	rcall	.+0      	; 0x3e5c <LCD_ShiftRight+0x6>
    3e5c:	cd b7       	in	r28, 0x3d	; 61
    3e5e:	de b7       	in	r29, 0x3e	; 62
    3e60:	8a 83       	std	Y+2, r24	; 0x02
    u8 i;
    for (i=0; i<counter; i++) {
    3e62:	19 82       	std	Y+1, r1	; 0x01
    3e64:	06 c0       	rjmp	.+12     	; 0x3e72 <LCD_ShiftRight+0x1c>
        LCD_SendCommand(0b00011100);
    3e66:	8c e1       	ldi	r24, 0x1C	; 28
    3e68:	0e 94 42 1f 	call	0x3e84	; 0x3e84 <LCD_SendCommand>
        LCD_SendCommand(0b00011000);
    }
}
void LCD_ShiftRight (u8 counter) {
    u8 i;
    for (i=0; i<counter; i++) {
    3e6c:	89 81       	ldd	r24, Y+1	; 0x01
    3e6e:	8f 5f       	subi	r24, 0xFF	; 255
    3e70:	89 83       	std	Y+1, r24	; 0x01
    3e72:	99 81       	ldd	r25, Y+1	; 0x01
    3e74:	8a 81       	ldd	r24, Y+2	; 0x02
    3e76:	98 17       	cp	r25, r24
    3e78:	b0 f3       	brcs	.-20     	; 0x3e66 <LCD_ShiftRight+0x10>
        LCD_SendCommand(0b00011100);
    }
}
    3e7a:	0f 90       	pop	r0
    3e7c:	0f 90       	pop	r0
    3e7e:	cf 91       	pop	r28
    3e80:	df 91       	pop	r29
    3e82:	08 95       	ret

00003e84 <LCD_SendCommand>:

static void LCD_SendCommand(u8 command) {
    3e84:	df 93       	push	r29
    3e86:	cf 93       	push	r28
    3e88:	cd b7       	in	r28, 0x3d	; 61
    3e8a:	de b7       	in	r29, 0x3e	; 62
    3e8c:	2f 97       	sbiw	r28, 0x0f	; 15
    3e8e:	0f b6       	in	r0, 0x3f	; 63
    3e90:	f8 94       	cli
    3e92:	de bf       	out	0x3e, r29	; 62
    3e94:	0f be       	out	0x3f, r0	; 63
    3e96:	cd bf       	out	0x3d, r28	; 61
    3e98:	8f 87       	std	Y+15, r24	; 0x0f
    /* Set Control Pins:
        RS : 0 Command
        RW : 0 Write
    */
    DIO_SetPinLevel(LCD_PIN_RS, DIO_LOW);
    3e9a:	81 e0       	ldi	r24, 0x01	; 1
    3e9c:	62 e0       	ldi	r22, 0x02	; 2
    3e9e:	40 e0       	ldi	r20, 0x00	; 0
    3ea0:	0e 94 45 0c 	call	0x188a	; 0x188a <DIO_SetPinLevel>
    DIO_SetPinLevel(LCD_PIN_RW, DIO_LOW);
    3ea4:	81 e0       	ldi	r24, 0x01	; 1
    3ea6:	61 e0       	ldi	r22, 0x01	; 1
    3ea8:	40 e0       	ldi	r20, 0x00	; 0
    3eaa:	0e 94 45 0c 	call	0x188a	; 0x188a <DIO_SetPinLevel>

    /* Set Data Pins */
    DIO_SetPinLevel(LCD_PIN_D0, GET_BIT(command, 0));
    3eae:	8f 85       	ldd	r24, Y+15	; 0x0f
    3eb0:	98 2f       	mov	r25, r24
    3eb2:	91 70       	andi	r25, 0x01	; 1
    3eb4:	82 e0       	ldi	r24, 0x02	; 2
    3eb6:	67 e0       	ldi	r22, 0x07	; 7
    3eb8:	49 2f       	mov	r20, r25
    3eba:	0e 94 45 0c 	call	0x188a	; 0x188a <DIO_SetPinLevel>
    DIO_SetPinLevel(LCD_PIN_D1, GET_BIT(command, 1));
    3ebe:	8f 85       	ldd	r24, Y+15	; 0x0f
    3ec0:	86 95       	lsr	r24
    3ec2:	98 2f       	mov	r25, r24
    3ec4:	91 70       	andi	r25, 0x01	; 1
    3ec6:	82 e0       	ldi	r24, 0x02	; 2
    3ec8:	66 e0       	ldi	r22, 0x06	; 6
    3eca:	49 2f       	mov	r20, r25
    3ecc:	0e 94 45 0c 	call	0x188a	; 0x188a <DIO_SetPinLevel>
    DIO_SetPinLevel(LCD_PIN_D2, GET_BIT(command, 2));
    3ed0:	8f 85       	ldd	r24, Y+15	; 0x0f
    3ed2:	86 95       	lsr	r24
    3ed4:	86 95       	lsr	r24
    3ed6:	98 2f       	mov	r25, r24
    3ed8:	91 70       	andi	r25, 0x01	; 1
    3eda:	82 e0       	ldi	r24, 0x02	; 2
    3edc:	65 e0       	ldi	r22, 0x05	; 5
    3ede:	49 2f       	mov	r20, r25
    3ee0:	0e 94 45 0c 	call	0x188a	; 0x188a <DIO_SetPinLevel>
    DIO_SetPinLevel(LCD_PIN_D3, GET_BIT(command, 3));
    3ee4:	8f 85       	ldd	r24, Y+15	; 0x0f
    3ee6:	86 95       	lsr	r24
    3ee8:	86 95       	lsr	r24
    3eea:	86 95       	lsr	r24
    3eec:	98 2f       	mov	r25, r24
    3eee:	91 70       	andi	r25, 0x01	; 1
    3ef0:	82 e0       	ldi	r24, 0x02	; 2
    3ef2:	64 e0       	ldi	r22, 0x04	; 4
    3ef4:	49 2f       	mov	r20, r25
    3ef6:	0e 94 45 0c 	call	0x188a	; 0x188a <DIO_SetPinLevel>
    DIO_SetPinLevel(LCD_PIN_D4, GET_BIT(command, 4));
    3efa:	8f 85       	ldd	r24, Y+15	; 0x0f
    3efc:	82 95       	swap	r24
    3efe:	8f 70       	andi	r24, 0x0F	; 15
    3f00:	98 2f       	mov	r25, r24
    3f02:	91 70       	andi	r25, 0x01	; 1
    3f04:	82 e0       	ldi	r24, 0x02	; 2
    3f06:	63 e0       	ldi	r22, 0x03	; 3
    3f08:	49 2f       	mov	r20, r25
    3f0a:	0e 94 45 0c 	call	0x188a	; 0x188a <DIO_SetPinLevel>
    DIO_SetPinLevel(LCD_PIN_D5, GET_BIT(command, 5));
    3f0e:	8f 85       	ldd	r24, Y+15	; 0x0f
    3f10:	82 95       	swap	r24
    3f12:	86 95       	lsr	r24
    3f14:	87 70       	andi	r24, 0x07	; 7
    3f16:	98 2f       	mov	r25, r24
    3f18:	91 70       	andi	r25, 0x01	; 1
    3f1a:	82 e0       	ldi	r24, 0x02	; 2
    3f1c:	62 e0       	ldi	r22, 0x02	; 2
    3f1e:	49 2f       	mov	r20, r25
    3f20:	0e 94 45 0c 	call	0x188a	; 0x188a <DIO_SetPinLevel>
    DIO_SetPinLevel(LCD_PIN_D6, GET_BIT(command, 6));
    3f24:	8f 85       	ldd	r24, Y+15	; 0x0f
    3f26:	82 95       	swap	r24
    3f28:	86 95       	lsr	r24
    3f2a:	86 95       	lsr	r24
    3f2c:	83 70       	andi	r24, 0x03	; 3
    3f2e:	98 2f       	mov	r25, r24
    3f30:	91 70       	andi	r25, 0x01	; 1
    3f32:	82 e0       	ldi	r24, 0x02	; 2
    3f34:	61 e0       	ldi	r22, 0x01	; 1
    3f36:	49 2f       	mov	r20, r25
    3f38:	0e 94 45 0c 	call	0x188a	; 0x188a <DIO_SetPinLevel>
    DIO_SetPinLevel(LCD_PIN_D7, GET_BIT(command, 7));
    3f3c:	8f 85       	ldd	r24, Y+15	; 0x0f
    3f3e:	98 2f       	mov	r25, r24
    3f40:	99 1f       	adc	r25, r25
    3f42:	99 27       	eor	r25, r25
    3f44:	99 1f       	adc	r25, r25
    3f46:	82 e0       	ldi	r24, 0x02	; 2
    3f48:	60 e0       	ldi	r22, 0x00	; 0
    3f4a:	49 2f       	mov	r20, r25
    3f4c:	0e 94 45 0c 	call	0x188a	; 0x188a <DIO_SetPinLevel>

    DIO_SetPinLevel(LCD_PIN_E, DIO_HIGH);
    3f50:	81 e0       	ldi	r24, 0x01	; 1
    3f52:	60 e0       	ldi	r22, 0x00	; 0
    3f54:	41 e0       	ldi	r20, 0x01	; 1
    3f56:	0e 94 45 0c 	call	0x188a	; 0x188a <DIO_SetPinLevel>
    3f5a:	80 e0       	ldi	r24, 0x00	; 0
    3f5c:	90 e0       	ldi	r25, 0x00	; 0
    3f5e:	a0 e0       	ldi	r26, 0x00	; 0
    3f60:	b0 e4       	ldi	r27, 0x40	; 64
    3f62:	8b 87       	std	Y+11, r24	; 0x0b
    3f64:	9c 87       	std	Y+12, r25	; 0x0c
    3f66:	ad 87       	std	Y+13, r26	; 0x0d
    3f68:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    3f6a:	6b 85       	ldd	r22, Y+11	; 0x0b
    3f6c:	7c 85       	ldd	r23, Y+12	; 0x0c
    3f6e:	8d 85       	ldd	r24, Y+13	; 0x0d
    3f70:	9e 85       	ldd	r25, Y+14	; 0x0e
    3f72:	20 e0       	ldi	r18, 0x00	; 0
    3f74:	30 e0       	ldi	r19, 0x00	; 0
    3f76:	4a ef       	ldi	r20, 0xFA	; 250
    3f78:	54 e4       	ldi	r21, 0x44	; 68
    3f7a:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    3f7e:	dc 01       	movw	r26, r24
    3f80:	cb 01       	movw	r24, r22
    3f82:	8f 83       	std	Y+7, r24	; 0x07
    3f84:	98 87       	std	Y+8, r25	; 0x08
    3f86:	a9 87       	std	Y+9, r26	; 0x09
    3f88:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    3f8a:	6f 81       	ldd	r22, Y+7	; 0x07
    3f8c:	78 85       	ldd	r23, Y+8	; 0x08
    3f8e:	89 85       	ldd	r24, Y+9	; 0x09
    3f90:	9a 85       	ldd	r25, Y+10	; 0x0a
    3f92:	20 e0       	ldi	r18, 0x00	; 0
    3f94:	30 e0       	ldi	r19, 0x00	; 0
    3f96:	40 e8       	ldi	r20, 0x80	; 128
    3f98:	5f e3       	ldi	r21, 0x3F	; 63
    3f9a:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    3f9e:	88 23       	and	r24, r24
    3fa0:	2c f4       	brge	.+10     	; 0x3fac <LCD_SendCommand+0x128>
		__ticks = 1;
    3fa2:	81 e0       	ldi	r24, 0x01	; 1
    3fa4:	90 e0       	ldi	r25, 0x00	; 0
    3fa6:	9e 83       	std	Y+6, r25	; 0x06
    3fa8:	8d 83       	std	Y+5, r24	; 0x05
    3faa:	3f c0       	rjmp	.+126    	; 0x402a <LCD_SendCommand+0x1a6>
	else if (__tmp > 65535)
    3fac:	6f 81       	ldd	r22, Y+7	; 0x07
    3fae:	78 85       	ldd	r23, Y+8	; 0x08
    3fb0:	89 85       	ldd	r24, Y+9	; 0x09
    3fb2:	9a 85       	ldd	r25, Y+10	; 0x0a
    3fb4:	20 e0       	ldi	r18, 0x00	; 0
    3fb6:	3f ef       	ldi	r19, 0xFF	; 255
    3fb8:	4f e7       	ldi	r20, 0x7F	; 127
    3fba:	57 e4       	ldi	r21, 0x47	; 71
    3fbc:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    3fc0:	18 16       	cp	r1, r24
    3fc2:	4c f5       	brge	.+82     	; 0x4016 <LCD_SendCommand+0x192>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    3fc4:	6b 85       	ldd	r22, Y+11	; 0x0b
    3fc6:	7c 85       	ldd	r23, Y+12	; 0x0c
    3fc8:	8d 85       	ldd	r24, Y+13	; 0x0d
    3fca:	9e 85       	ldd	r25, Y+14	; 0x0e
    3fcc:	20 e0       	ldi	r18, 0x00	; 0
    3fce:	30 e0       	ldi	r19, 0x00	; 0
    3fd0:	40 e2       	ldi	r20, 0x20	; 32
    3fd2:	51 e4       	ldi	r21, 0x41	; 65
    3fd4:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    3fd8:	dc 01       	movw	r26, r24
    3fda:	cb 01       	movw	r24, r22
    3fdc:	bc 01       	movw	r22, r24
    3fde:	cd 01       	movw	r24, r26
    3fe0:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    3fe4:	dc 01       	movw	r26, r24
    3fe6:	cb 01       	movw	r24, r22
    3fe8:	9e 83       	std	Y+6, r25	; 0x06
    3fea:	8d 83       	std	Y+5, r24	; 0x05
    3fec:	0f c0       	rjmp	.+30     	; 0x400c <LCD_SendCommand+0x188>
    3fee:	88 ec       	ldi	r24, 0xC8	; 200
    3ff0:	90 e0       	ldi	r25, 0x00	; 0
    3ff2:	9c 83       	std	Y+4, r25	; 0x04
    3ff4:	8b 83       	std	Y+3, r24	; 0x03
    3ff6:	8b 81       	ldd	r24, Y+3	; 0x03
    3ff8:	9c 81       	ldd	r25, Y+4	; 0x04
    3ffa:	01 97       	sbiw	r24, 0x01	; 1
    3ffc:	f1 f7       	brne	.-4      	; 0x3ffa <LCD_SendCommand+0x176>
    3ffe:	9c 83       	std	Y+4, r25	; 0x04
    4000:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    4002:	8d 81       	ldd	r24, Y+5	; 0x05
    4004:	9e 81       	ldd	r25, Y+6	; 0x06
    4006:	01 97       	sbiw	r24, 0x01	; 1
    4008:	9e 83       	std	Y+6, r25	; 0x06
    400a:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    400c:	8d 81       	ldd	r24, Y+5	; 0x05
    400e:	9e 81       	ldd	r25, Y+6	; 0x06
    4010:	00 97       	sbiw	r24, 0x00	; 0
    4012:	69 f7       	brne	.-38     	; 0x3fee <LCD_SendCommand+0x16a>
    4014:	14 c0       	rjmp	.+40     	; 0x403e <LCD_SendCommand+0x1ba>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    4016:	6f 81       	ldd	r22, Y+7	; 0x07
    4018:	78 85       	ldd	r23, Y+8	; 0x08
    401a:	89 85       	ldd	r24, Y+9	; 0x09
    401c:	9a 85       	ldd	r25, Y+10	; 0x0a
    401e:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    4022:	dc 01       	movw	r26, r24
    4024:	cb 01       	movw	r24, r22
    4026:	9e 83       	std	Y+6, r25	; 0x06
    4028:	8d 83       	std	Y+5, r24	; 0x05
    402a:	8d 81       	ldd	r24, Y+5	; 0x05
    402c:	9e 81       	ldd	r25, Y+6	; 0x06
    402e:	9a 83       	std	Y+2, r25	; 0x02
    4030:	89 83       	std	Y+1, r24	; 0x01
    4032:	89 81       	ldd	r24, Y+1	; 0x01
    4034:	9a 81       	ldd	r25, Y+2	; 0x02
    4036:	01 97       	sbiw	r24, 0x01	; 1
    4038:	f1 f7       	brne	.-4      	; 0x4036 <LCD_SendCommand+0x1b2>
    403a:	9a 83       	std	Y+2, r25	; 0x02
    403c:	89 83       	std	Y+1, r24	; 0x01
    _delay_ms(2);
    DIO_SetPinLevel(LCD_PIN_E, DIO_LOW);
    403e:	81 e0       	ldi	r24, 0x01	; 1
    4040:	60 e0       	ldi	r22, 0x00	; 0
    4042:	40 e0       	ldi	r20, 0x00	; 0
    4044:	0e 94 45 0c 	call	0x188a	; 0x188a <DIO_SetPinLevel>
}
    4048:	2f 96       	adiw	r28, 0x0f	; 15
    404a:	0f b6       	in	r0, 0x3f	; 63
    404c:	f8 94       	cli
    404e:	de bf       	out	0x3e, r29	; 62
    4050:	0f be       	out	0x3f, r0	; 63
    4052:	cd bf       	out	0x3d, r28	; 61
    4054:	cf 91       	pop	r28
    4056:	df 91       	pop	r29
    4058:	08 95       	ret

0000405a <LCD_SendData>:

static void LCD_SendData(u8 data) {
    405a:	df 93       	push	r29
    405c:	cf 93       	push	r28
    405e:	cd b7       	in	r28, 0x3d	; 61
    4060:	de b7       	in	r29, 0x3e	; 62
    4062:	2f 97       	sbiw	r28, 0x0f	; 15
    4064:	0f b6       	in	r0, 0x3f	; 63
    4066:	f8 94       	cli
    4068:	de bf       	out	0x3e, r29	; 62
    406a:	0f be       	out	0x3f, r0	; 63
    406c:	cd bf       	out	0x3d, r28	; 61
    406e:	8f 87       	std	Y+15, r24	; 0x0f
    /* Set Control Pins:
        RS : 1 Data
        RW : 0 Write
    */
    DIO_SetPinLevel(LCD_PIN_RS, DIO_HIGH);
    4070:	81 e0       	ldi	r24, 0x01	; 1
    4072:	62 e0       	ldi	r22, 0x02	; 2
    4074:	41 e0       	ldi	r20, 0x01	; 1
    4076:	0e 94 45 0c 	call	0x188a	; 0x188a <DIO_SetPinLevel>
    DIO_SetPinLevel(LCD_PIN_RW, DIO_LOW);
    407a:	81 e0       	ldi	r24, 0x01	; 1
    407c:	61 e0       	ldi	r22, 0x01	; 1
    407e:	40 e0       	ldi	r20, 0x00	; 0
    4080:	0e 94 45 0c 	call	0x188a	; 0x188a <DIO_SetPinLevel>

    /* Set Data Pins */
    DIO_SetPinLevel(LCD_PIN_D0, GET_BIT(data, 0));
    4084:	8f 85       	ldd	r24, Y+15	; 0x0f
    4086:	98 2f       	mov	r25, r24
    4088:	91 70       	andi	r25, 0x01	; 1
    408a:	82 e0       	ldi	r24, 0x02	; 2
    408c:	67 e0       	ldi	r22, 0x07	; 7
    408e:	49 2f       	mov	r20, r25
    4090:	0e 94 45 0c 	call	0x188a	; 0x188a <DIO_SetPinLevel>
    DIO_SetPinLevel(LCD_PIN_D1, GET_BIT(data, 1));
    4094:	8f 85       	ldd	r24, Y+15	; 0x0f
    4096:	86 95       	lsr	r24
    4098:	98 2f       	mov	r25, r24
    409a:	91 70       	andi	r25, 0x01	; 1
    409c:	82 e0       	ldi	r24, 0x02	; 2
    409e:	66 e0       	ldi	r22, 0x06	; 6
    40a0:	49 2f       	mov	r20, r25
    40a2:	0e 94 45 0c 	call	0x188a	; 0x188a <DIO_SetPinLevel>
    DIO_SetPinLevel(LCD_PIN_D2, GET_BIT(data, 2));
    40a6:	8f 85       	ldd	r24, Y+15	; 0x0f
    40a8:	86 95       	lsr	r24
    40aa:	86 95       	lsr	r24
    40ac:	98 2f       	mov	r25, r24
    40ae:	91 70       	andi	r25, 0x01	; 1
    40b0:	82 e0       	ldi	r24, 0x02	; 2
    40b2:	65 e0       	ldi	r22, 0x05	; 5
    40b4:	49 2f       	mov	r20, r25
    40b6:	0e 94 45 0c 	call	0x188a	; 0x188a <DIO_SetPinLevel>
    DIO_SetPinLevel(LCD_PIN_D3, GET_BIT(data, 3));
    40ba:	8f 85       	ldd	r24, Y+15	; 0x0f
    40bc:	86 95       	lsr	r24
    40be:	86 95       	lsr	r24
    40c0:	86 95       	lsr	r24
    40c2:	98 2f       	mov	r25, r24
    40c4:	91 70       	andi	r25, 0x01	; 1
    40c6:	82 e0       	ldi	r24, 0x02	; 2
    40c8:	64 e0       	ldi	r22, 0x04	; 4
    40ca:	49 2f       	mov	r20, r25
    40cc:	0e 94 45 0c 	call	0x188a	; 0x188a <DIO_SetPinLevel>
    DIO_SetPinLevel(LCD_PIN_D4, GET_BIT(data, 4));
    40d0:	8f 85       	ldd	r24, Y+15	; 0x0f
    40d2:	82 95       	swap	r24
    40d4:	8f 70       	andi	r24, 0x0F	; 15
    40d6:	98 2f       	mov	r25, r24
    40d8:	91 70       	andi	r25, 0x01	; 1
    40da:	82 e0       	ldi	r24, 0x02	; 2
    40dc:	63 e0       	ldi	r22, 0x03	; 3
    40de:	49 2f       	mov	r20, r25
    40e0:	0e 94 45 0c 	call	0x188a	; 0x188a <DIO_SetPinLevel>
    DIO_SetPinLevel(LCD_PIN_D5, GET_BIT(data, 5));
    40e4:	8f 85       	ldd	r24, Y+15	; 0x0f
    40e6:	82 95       	swap	r24
    40e8:	86 95       	lsr	r24
    40ea:	87 70       	andi	r24, 0x07	; 7
    40ec:	98 2f       	mov	r25, r24
    40ee:	91 70       	andi	r25, 0x01	; 1
    40f0:	82 e0       	ldi	r24, 0x02	; 2
    40f2:	62 e0       	ldi	r22, 0x02	; 2
    40f4:	49 2f       	mov	r20, r25
    40f6:	0e 94 45 0c 	call	0x188a	; 0x188a <DIO_SetPinLevel>
    DIO_SetPinLevel(LCD_PIN_D6, GET_BIT(data, 6));
    40fa:	8f 85       	ldd	r24, Y+15	; 0x0f
    40fc:	82 95       	swap	r24
    40fe:	86 95       	lsr	r24
    4100:	86 95       	lsr	r24
    4102:	83 70       	andi	r24, 0x03	; 3
    4104:	98 2f       	mov	r25, r24
    4106:	91 70       	andi	r25, 0x01	; 1
    4108:	82 e0       	ldi	r24, 0x02	; 2
    410a:	61 e0       	ldi	r22, 0x01	; 1
    410c:	49 2f       	mov	r20, r25
    410e:	0e 94 45 0c 	call	0x188a	; 0x188a <DIO_SetPinLevel>
    DIO_SetPinLevel(LCD_PIN_D7, GET_BIT(data, 7));
    4112:	8f 85       	ldd	r24, Y+15	; 0x0f
    4114:	98 2f       	mov	r25, r24
    4116:	99 1f       	adc	r25, r25
    4118:	99 27       	eor	r25, r25
    411a:	99 1f       	adc	r25, r25
    411c:	82 e0       	ldi	r24, 0x02	; 2
    411e:	60 e0       	ldi	r22, 0x00	; 0
    4120:	49 2f       	mov	r20, r25
    4122:	0e 94 45 0c 	call	0x188a	; 0x188a <DIO_SetPinLevel>

    DIO_SetPinLevel(LCD_PIN_E, DIO_HIGH);
    4126:	81 e0       	ldi	r24, 0x01	; 1
    4128:	60 e0       	ldi	r22, 0x00	; 0
    412a:	41 e0       	ldi	r20, 0x01	; 1
    412c:	0e 94 45 0c 	call	0x188a	; 0x188a <DIO_SetPinLevel>
    4130:	80 e0       	ldi	r24, 0x00	; 0
    4132:	90 e0       	ldi	r25, 0x00	; 0
    4134:	a0 e0       	ldi	r26, 0x00	; 0
    4136:	b0 e4       	ldi	r27, 0x40	; 64
    4138:	8b 87       	std	Y+11, r24	; 0x0b
    413a:	9c 87       	std	Y+12, r25	; 0x0c
    413c:	ad 87       	std	Y+13, r26	; 0x0d
    413e:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    4140:	6b 85       	ldd	r22, Y+11	; 0x0b
    4142:	7c 85       	ldd	r23, Y+12	; 0x0c
    4144:	8d 85       	ldd	r24, Y+13	; 0x0d
    4146:	9e 85       	ldd	r25, Y+14	; 0x0e
    4148:	20 e0       	ldi	r18, 0x00	; 0
    414a:	30 e0       	ldi	r19, 0x00	; 0
    414c:	4a ef       	ldi	r20, 0xFA	; 250
    414e:	54 e4       	ldi	r21, 0x44	; 68
    4150:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    4154:	dc 01       	movw	r26, r24
    4156:	cb 01       	movw	r24, r22
    4158:	8f 83       	std	Y+7, r24	; 0x07
    415a:	98 87       	std	Y+8, r25	; 0x08
    415c:	a9 87       	std	Y+9, r26	; 0x09
    415e:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    4160:	6f 81       	ldd	r22, Y+7	; 0x07
    4162:	78 85       	ldd	r23, Y+8	; 0x08
    4164:	89 85       	ldd	r24, Y+9	; 0x09
    4166:	9a 85       	ldd	r25, Y+10	; 0x0a
    4168:	20 e0       	ldi	r18, 0x00	; 0
    416a:	30 e0       	ldi	r19, 0x00	; 0
    416c:	40 e8       	ldi	r20, 0x80	; 128
    416e:	5f e3       	ldi	r21, 0x3F	; 63
    4170:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    4174:	88 23       	and	r24, r24
    4176:	2c f4       	brge	.+10     	; 0x4182 <LCD_SendData+0x128>
		__ticks = 1;
    4178:	81 e0       	ldi	r24, 0x01	; 1
    417a:	90 e0       	ldi	r25, 0x00	; 0
    417c:	9e 83       	std	Y+6, r25	; 0x06
    417e:	8d 83       	std	Y+5, r24	; 0x05
    4180:	3f c0       	rjmp	.+126    	; 0x4200 <LCD_SendData+0x1a6>
	else if (__tmp > 65535)
    4182:	6f 81       	ldd	r22, Y+7	; 0x07
    4184:	78 85       	ldd	r23, Y+8	; 0x08
    4186:	89 85       	ldd	r24, Y+9	; 0x09
    4188:	9a 85       	ldd	r25, Y+10	; 0x0a
    418a:	20 e0       	ldi	r18, 0x00	; 0
    418c:	3f ef       	ldi	r19, 0xFF	; 255
    418e:	4f e7       	ldi	r20, 0x7F	; 127
    4190:	57 e4       	ldi	r21, 0x47	; 71
    4192:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    4196:	18 16       	cp	r1, r24
    4198:	4c f5       	brge	.+82     	; 0x41ec <LCD_SendData+0x192>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    419a:	6b 85       	ldd	r22, Y+11	; 0x0b
    419c:	7c 85       	ldd	r23, Y+12	; 0x0c
    419e:	8d 85       	ldd	r24, Y+13	; 0x0d
    41a0:	9e 85       	ldd	r25, Y+14	; 0x0e
    41a2:	20 e0       	ldi	r18, 0x00	; 0
    41a4:	30 e0       	ldi	r19, 0x00	; 0
    41a6:	40 e2       	ldi	r20, 0x20	; 32
    41a8:	51 e4       	ldi	r21, 0x41	; 65
    41aa:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    41ae:	dc 01       	movw	r26, r24
    41b0:	cb 01       	movw	r24, r22
    41b2:	bc 01       	movw	r22, r24
    41b4:	cd 01       	movw	r24, r26
    41b6:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    41ba:	dc 01       	movw	r26, r24
    41bc:	cb 01       	movw	r24, r22
    41be:	9e 83       	std	Y+6, r25	; 0x06
    41c0:	8d 83       	std	Y+5, r24	; 0x05
    41c2:	0f c0       	rjmp	.+30     	; 0x41e2 <LCD_SendData+0x188>
    41c4:	88 ec       	ldi	r24, 0xC8	; 200
    41c6:	90 e0       	ldi	r25, 0x00	; 0
    41c8:	9c 83       	std	Y+4, r25	; 0x04
    41ca:	8b 83       	std	Y+3, r24	; 0x03
    41cc:	8b 81       	ldd	r24, Y+3	; 0x03
    41ce:	9c 81       	ldd	r25, Y+4	; 0x04
    41d0:	01 97       	sbiw	r24, 0x01	; 1
    41d2:	f1 f7       	brne	.-4      	; 0x41d0 <LCD_SendData+0x176>
    41d4:	9c 83       	std	Y+4, r25	; 0x04
    41d6:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    41d8:	8d 81       	ldd	r24, Y+5	; 0x05
    41da:	9e 81       	ldd	r25, Y+6	; 0x06
    41dc:	01 97       	sbiw	r24, 0x01	; 1
    41de:	9e 83       	std	Y+6, r25	; 0x06
    41e0:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    41e2:	8d 81       	ldd	r24, Y+5	; 0x05
    41e4:	9e 81       	ldd	r25, Y+6	; 0x06
    41e6:	00 97       	sbiw	r24, 0x00	; 0
    41e8:	69 f7       	brne	.-38     	; 0x41c4 <LCD_SendData+0x16a>
    41ea:	14 c0       	rjmp	.+40     	; 0x4214 <LCD_SendData+0x1ba>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    41ec:	6f 81       	ldd	r22, Y+7	; 0x07
    41ee:	78 85       	ldd	r23, Y+8	; 0x08
    41f0:	89 85       	ldd	r24, Y+9	; 0x09
    41f2:	9a 85       	ldd	r25, Y+10	; 0x0a
    41f4:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    41f8:	dc 01       	movw	r26, r24
    41fa:	cb 01       	movw	r24, r22
    41fc:	9e 83       	std	Y+6, r25	; 0x06
    41fe:	8d 83       	std	Y+5, r24	; 0x05
    4200:	8d 81       	ldd	r24, Y+5	; 0x05
    4202:	9e 81       	ldd	r25, Y+6	; 0x06
    4204:	9a 83       	std	Y+2, r25	; 0x02
    4206:	89 83       	std	Y+1, r24	; 0x01
    4208:	89 81       	ldd	r24, Y+1	; 0x01
    420a:	9a 81       	ldd	r25, Y+2	; 0x02
    420c:	01 97       	sbiw	r24, 0x01	; 1
    420e:	f1 f7       	brne	.-4      	; 0x420c <LCD_SendData+0x1b2>
    4210:	9a 83       	std	Y+2, r25	; 0x02
    4212:	89 83       	std	Y+1, r24	; 0x01
    _delay_ms(2);
    DIO_SetPinLevel(LCD_PIN_E, DIO_LOW);
    4214:	81 e0       	ldi	r24, 0x01	; 1
    4216:	60 e0       	ldi	r22, 0x00	; 0
    4218:	40 e0       	ldi	r20, 0x00	; 0
    421a:	0e 94 45 0c 	call	0x188a	; 0x188a <DIO_SetPinLevel>
}
    421e:	2f 96       	adiw	r28, 0x0f	; 15
    4220:	0f b6       	in	r0, 0x3f	; 63
    4222:	f8 94       	cli
    4224:	de bf       	out	0x3e, r29	; 62
    4226:	0f be       	out	0x3f, r0	; 63
    4228:	cd bf       	out	0x3d, r28	; 61
    422a:	cf 91       	pop	r28
    422c:	df 91       	pop	r29
    422e:	08 95       	ret

00004230 <LCD_InitPinsMode>:


static void LCD_InitPinsMode(void) {
    4230:	df 93       	push	r29
    4232:	cf 93       	push	r28
    4234:	cd b7       	in	r28, 0x3d	; 61
    4236:	de b7       	in	r29, 0x3e	; 62
    DIO_SetPinMode(LCD_PIN_RS, DIO_OUTPUT);
    4238:	81 e0       	ldi	r24, 0x01	; 1
    423a:	62 e0       	ldi	r22, 0x02	; 2
    423c:	42 e0       	ldi	r20, 0x02	; 2
    423e:	0e 94 37 09 	call	0x126e	; 0x126e <DIO_SetPinMode>
    DIO_SetPinMode(LCD_PIN_RW, DIO_OUTPUT);
    4242:	81 e0       	ldi	r24, 0x01	; 1
    4244:	61 e0       	ldi	r22, 0x01	; 1
    4246:	42 e0       	ldi	r20, 0x02	; 2
    4248:	0e 94 37 09 	call	0x126e	; 0x126e <DIO_SetPinMode>
    DIO_SetPinMode(LCD_PIN_E , DIO_OUTPUT);
    424c:	81 e0       	ldi	r24, 0x01	; 1
    424e:	60 e0       	ldi	r22, 0x00	; 0
    4250:	42 e0       	ldi	r20, 0x02	; 2
    4252:	0e 94 37 09 	call	0x126e	; 0x126e <DIO_SetPinMode>
    DIO_SetPinMode(LCD_PIN_D0, DIO_OUTPUT);
    4256:	82 e0       	ldi	r24, 0x02	; 2
    4258:	67 e0       	ldi	r22, 0x07	; 7
    425a:	42 e0       	ldi	r20, 0x02	; 2
    425c:	0e 94 37 09 	call	0x126e	; 0x126e <DIO_SetPinMode>
    DIO_SetPinMode(LCD_PIN_D1, DIO_OUTPUT);
    4260:	82 e0       	ldi	r24, 0x02	; 2
    4262:	66 e0       	ldi	r22, 0x06	; 6
    4264:	42 e0       	ldi	r20, 0x02	; 2
    4266:	0e 94 37 09 	call	0x126e	; 0x126e <DIO_SetPinMode>
    DIO_SetPinMode(LCD_PIN_D2, DIO_OUTPUT);
    426a:	82 e0       	ldi	r24, 0x02	; 2
    426c:	65 e0       	ldi	r22, 0x05	; 5
    426e:	42 e0       	ldi	r20, 0x02	; 2
    4270:	0e 94 37 09 	call	0x126e	; 0x126e <DIO_SetPinMode>
    DIO_SetPinMode(LCD_PIN_D3, DIO_OUTPUT);
    4274:	82 e0       	ldi	r24, 0x02	; 2
    4276:	64 e0       	ldi	r22, 0x04	; 4
    4278:	42 e0       	ldi	r20, 0x02	; 2
    427a:	0e 94 37 09 	call	0x126e	; 0x126e <DIO_SetPinMode>
    DIO_SetPinMode(LCD_PIN_D4, DIO_OUTPUT);
    427e:	82 e0       	ldi	r24, 0x02	; 2
    4280:	63 e0       	ldi	r22, 0x03	; 3
    4282:	42 e0       	ldi	r20, 0x02	; 2
    4284:	0e 94 37 09 	call	0x126e	; 0x126e <DIO_SetPinMode>
    DIO_SetPinMode(LCD_PIN_D5, DIO_OUTPUT);
    4288:	82 e0       	ldi	r24, 0x02	; 2
    428a:	62 e0       	ldi	r22, 0x02	; 2
    428c:	42 e0       	ldi	r20, 0x02	; 2
    428e:	0e 94 37 09 	call	0x126e	; 0x126e <DIO_SetPinMode>
    DIO_SetPinMode(LCD_PIN_D6, DIO_OUTPUT);
    4292:	82 e0       	ldi	r24, 0x02	; 2
    4294:	61 e0       	ldi	r22, 0x01	; 1
    4296:	42 e0       	ldi	r20, 0x02	; 2
    4298:	0e 94 37 09 	call	0x126e	; 0x126e <DIO_SetPinMode>
    DIO_SetPinMode(LCD_PIN_D7, DIO_OUTPUT);
    429c:	82 e0       	ldi	r24, 0x02	; 2
    429e:	60 e0       	ldi	r22, 0x00	; 0
    42a0:	42 e0       	ldi	r20, 0x02	; 2
    42a2:	0e 94 37 09 	call	0x126e	; 0x126e <DIO_SetPinMode>
}
    42a6:	cf 91       	pop	r28
    42a8:	df 91       	pop	r29
    42aa:	08 95       	ret

000042ac <SPI_Init>:
#include"SPI.h"
#include"SPI_confg.h"
#include "DIO.h"


void SPI_Init(){
    42ac:	df 93       	push	r29
    42ae:	cf 93       	push	r28
    42b0:	cd b7       	in	r28, 0x3d	; 61
    42b2:	de b7       	in	r29, 0x3e	; 62


    SET_BIT(SPCR,SPCR_SPE);
    42b4:	ad e2       	ldi	r26, 0x2D	; 45
    42b6:	b0 e0       	ldi	r27, 0x00	; 0
    42b8:	ed e2       	ldi	r30, 0x2D	; 45
    42ba:	f0 e0       	ldi	r31, 0x00	; 0
    42bc:	80 81       	ld	r24, Z
    42be:	80 64       	ori	r24, 0x40	; 64
    42c0:	8c 93       	st	X, r24
        DIO_SetPinMode(DIO_PORTB,DIO_PIN5,DIO_OUTPUT);
        DIO_SetPinMode(DIO_PORTB,DIO_PIN6,DIO_INPUT_FLOATING);
        DIO_SetPinMode(DIO_PORTB,DIO_PIN7,DIO_OUTPUT);
        DIO_SetPinMode(DIO_PORTB,DIO_PIN4,DIO_OUTPUT);
    #elif (1 || SPI_Mode == SPI_Slave)
        CLR_BIT(SPCR,SPCR_MSTR);
    42c2:	ad e2       	ldi	r26, 0x2D	; 45
    42c4:	b0 e0       	ldi	r27, 0x00	; 0
    42c6:	ed e2       	ldi	r30, 0x2D	; 45
    42c8:	f0 e0       	ldi	r31, 0x00	; 0
    42ca:	80 81       	ld	r24, Z
    42cc:	8f 7e       	andi	r24, 0xEF	; 239
    42ce:	8c 93       	st	X, r24
        DIO_SetPinMode(DIO_PORTB,DIO_PIN5,DIO_INPUT_FLOATING);
    42d0:	81 e0       	ldi	r24, 0x01	; 1
    42d2:	65 e0       	ldi	r22, 0x05	; 5
    42d4:	40 e0       	ldi	r20, 0x00	; 0
    42d6:	0e 94 37 09 	call	0x126e	; 0x126e <DIO_SetPinMode>
        DIO_SetPinMode(DIO_PORTB,DIO_PIN6,DIO_OUTPUT);
    42da:	81 e0       	ldi	r24, 0x01	; 1
    42dc:	66 e0       	ldi	r22, 0x06	; 6
    42de:	42 e0       	ldi	r20, 0x02	; 2
    42e0:	0e 94 37 09 	call	0x126e	; 0x126e <DIO_SetPinMode>
        DIO_SetPinMode(DIO_PORTB,DIO_PIN7,DIO_INPUT_FLOATING);
    42e4:	81 e0       	ldi	r24, 0x01	; 1
    42e6:	67 e0       	ldi	r22, 0x07	; 7
    42e8:	40 e0       	ldi	r20, 0x00	; 0
    42ea:	0e 94 37 09 	call	0x126e	; 0x126e <DIO_SetPinMode>
        DIO_SetPinMode(DIO_PORTB,DIO_PIN4,DIO_INPUT_FLOATING);
    42ee:	81 e0       	ldi	r24, 0x01	; 1
    42f0:	64 e0       	ldi	r22, 0x04	; 4
    42f2:	40 e0       	ldi	r20, 0x00	; 0
    42f4:	0e 94 37 09 	call	0x126e	; 0x126e <DIO_SetPinMode>
    #endif
    #if (SPI_Direction == LSB)
        SET_BIT(SPCR,SPCR_DORD);
    42f8:	ad e2       	ldi	r26, 0x2D	; 45
    42fa:	b0 e0       	ldi	r27, 0x00	; 0
    42fc:	ed e2       	ldi	r30, 0x2D	; 45
    42fe:	f0 e0       	ldi	r31, 0x00	; 0
    4300:	80 81       	ld	r24, Z
    4302:	80 62       	ori	r24, 0x20	; 32
    4304:	8c 93       	st	X, r24
    #elif (SPI_Direction == MSB)
        CLR_BIT(SPCR,SPCR_DORD);
    #endif

    
}
    4306:	cf 91       	pop	r28
    4308:	df 91       	pop	r29
    430a:	08 95       	ret

0000430c <SPI_Send_Data>:

void SPI_Send_Data(u8 data){
    430c:	df 93       	push	r29
    430e:	cf 93       	push	r28
    4310:	0f 92       	push	r0
    4312:	cd b7       	in	r28, 0x3d	; 61
    4314:	de b7       	in	r29, 0x3e	; 62
    4316:	89 83       	std	Y+1, r24	; 0x01
    SPDR=data;
    4318:	ef e2       	ldi	r30, 0x2F	; 47
    431a:	f0 e0       	ldi	r31, 0x00	; 0
    431c:	89 81       	ldd	r24, Y+1	; 0x01
    431e:	80 83       	st	Z, r24
    while (GET_BIT(SPSR,7)==0);
    4320:	ee e2       	ldi	r30, 0x2E	; 46
    4322:	f0 e0       	ldi	r31, 0x00	; 0
    4324:	80 81       	ld	r24, Z
    4326:	88 23       	and	r24, r24
    4328:	dc f7       	brge	.-10     	; 0x4320 <SPI_Send_Data+0x14>
}
    432a:	0f 90       	pop	r0
    432c:	cf 91       	pop	r28
    432e:	df 91       	pop	r29
    4330:	08 95       	ret

00004332 <SPI_Recieve_Data>:

u8 SPI_Recieve_Data()
{
    4332:	df 93       	push	r29
    4334:	cf 93       	push	r28
    4336:	cd b7       	in	r28, 0x3d	; 61
    4338:	de b7       	in	r29, 0x3e	; 62
    while (GET_BIT(SPSR,7)==0);
    433a:	ee e2       	ldi	r30, 0x2E	; 46
    433c:	f0 e0       	ldi	r31, 0x00	; 0
    433e:	80 81       	ld	r24, Z
    4340:	88 23       	and	r24, r24
    4342:	dc f7       	brge	.-10     	; 0x433a <SPI_Recieve_Data+0x8>
    return SPDR;
    4344:	ef e2       	ldi	r30, 0x2F	; 47
    4346:	f0 e0       	ldi	r31, 0x00	; 0
    4348:	80 81       	ld	r24, Z
}
    434a:	cf 91       	pop	r28
    434c:	df 91       	pop	r29
    434e:	08 95       	ret

00004350 <SSD_Init>:
	_delay_ms(500);
	PORTD = 0b01101111; // Print 9
	_delay_ms(500);
	PORTD = 0b00000000; // off*/

void SSD_Init(void) {
    4350:	df 93       	push	r29
    4352:	cf 93       	push	r28
    4354:	cd b7       	in	r28, 0x3d	; 61
    4356:	de b7       	in	r29, 0x3e	; 62
    DIO_SetPinMode(SSD_PIN_A, DIO_OUTPUT);
    4358:	82 e0       	ldi	r24, 0x02	; 2
    435a:	60 e0       	ldi	r22, 0x00	; 0
    435c:	42 e0       	ldi	r20, 0x02	; 2
    435e:	0e 94 37 09 	call	0x126e	; 0x126e <DIO_SetPinMode>
    DIO_SetPinMode(SSD_PIN_B, DIO_OUTPUT);
    4362:	82 e0       	ldi	r24, 0x02	; 2
    4364:	61 e0       	ldi	r22, 0x01	; 1
    4366:	42 e0       	ldi	r20, 0x02	; 2
    4368:	0e 94 37 09 	call	0x126e	; 0x126e <DIO_SetPinMode>
    DIO_SetPinMode(SSD_PIN_C, DIO_OUTPUT);
    436c:	82 e0       	ldi	r24, 0x02	; 2
    436e:	62 e0       	ldi	r22, 0x02	; 2
    4370:	42 e0       	ldi	r20, 0x02	; 2
    4372:	0e 94 37 09 	call	0x126e	; 0x126e <DIO_SetPinMode>
    DIO_SetPinMode(SSD_PIN_D, DIO_OUTPUT);
    4376:	82 e0       	ldi	r24, 0x02	; 2
    4378:	63 e0       	ldi	r22, 0x03	; 3
    437a:	42 e0       	ldi	r20, 0x02	; 2
    437c:	0e 94 37 09 	call	0x126e	; 0x126e <DIO_SetPinMode>
    DIO_SetPinMode(SSD_PIN_E, DIO_OUTPUT);
    4380:	82 e0       	ldi	r24, 0x02	; 2
    4382:	64 e0       	ldi	r22, 0x04	; 4
    4384:	42 e0       	ldi	r20, 0x02	; 2
    4386:	0e 94 37 09 	call	0x126e	; 0x126e <DIO_SetPinMode>
    DIO_SetPinMode(SSD_PIN_F, DIO_OUTPUT);
    438a:	82 e0       	ldi	r24, 0x02	; 2
    438c:	65 e0       	ldi	r22, 0x05	; 5
    438e:	42 e0       	ldi	r20, 0x02	; 2
    4390:	0e 94 37 09 	call	0x126e	; 0x126e <DIO_SetPinMode>
    DIO_SetPinMode(SSD_PIN_G, DIO_OUTPUT);
    4394:	82 e0       	ldi	r24, 0x02	; 2
    4396:	66 e0       	ldi	r22, 0x06	; 6
    4398:	42 e0       	ldi	r20, 0x02	; 2
    439a:	0e 94 37 09 	call	0x126e	; 0x126e <DIO_SetPinMode>

}
    439e:	cf 91       	pop	r28
    43a0:	df 91       	pop	r29
    43a2:	08 95       	ret

000043a4 <SSD_Write>:
void SSD_Write (SSD_NumberType number) {
    43a4:	df 93       	push	r29
    43a6:	cf 93       	push	r28
    43a8:	00 d0       	rcall	.+0      	; 0x43aa <SSD_Write+0x6>
    43aa:	0f 92       	push	r0
    43ac:	cd b7       	in	r28, 0x3d	; 61
    43ae:	de b7       	in	r29, 0x3e	; 62
    43b0:	89 83       	std	Y+1, r24	; 0x01
    switch (number)
    43b2:	89 81       	ldd	r24, Y+1	; 0x01
    43b4:	28 2f       	mov	r18, r24
    43b6:	30 e0       	ldi	r19, 0x00	; 0
    43b8:	3b 83       	std	Y+3, r19	; 0x03
    43ba:	2a 83       	std	Y+2, r18	; 0x02
    43bc:	8a 81       	ldd	r24, Y+2	; 0x02
    43be:	9b 81       	ldd	r25, Y+3	; 0x03
    43c0:	84 30       	cpi	r24, 0x04	; 4
    43c2:	91 05       	cpc	r25, r1
    43c4:	09 f4       	brne	.+2      	; 0x43c8 <SSD_Write+0x24>
    43c6:	d7 c0       	rjmp	.+430    	; 0x4576 <SSD_Write+0x1d2>
    43c8:	2a 81       	ldd	r18, Y+2	; 0x02
    43ca:	3b 81       	ldd	r19, Y+3	; 0x03
    43cc:	25 30       	cpi	r18, 0x05	; 5
    43ce:	31 05       	cpc	r19, r1
    43d0:	ec f4       	brge	.+58     	; 0x440c <SSD_Write+0x68>
    43d2:	8a 81       	ldd	r24, Y+2	; 0x02
    43d4:	9b 81       	ldd	r25, Y+3	; 0x03
    43d6:	81 30       	cpi	r24, 0x01	; 1
    43d8:	91 05       	cpc	r25, r1
    43da:	09 f4       	brne	.+2      	; 0x43de <SSD_Write+0x3a>
    43dc:	60 c0       	rjmp	.+192    	; 0x449e <SSD_Write+0xfa>
    43de:	2a 81       	ldd	r18, Y+2	; 0x02
    43e0:	3b 81       	ldd	r19, Y+3	; 0x03
    43e2:	22 30       	cpi	r18, 0x02	; 2
    43e4:	31 05       	cpc	r19, r1
    43e6:	2c f4       	brge	.+10     	; 0x43f2 <SSD_Write+0x4e>
    43e8:	8a 81       	ldd	r24, Y+2	; 0x02
    43ea:	9b 81       	ldd	r25, Y+3	; 0x03
    43ec:	00 97       	sbiw	r24, 0x00	; 0
    43ee:	99 f1       	breq	.+102    	; 0x4456 <SSD_Write+0xb2>
    43f0:	9a c1       	rjmp	.+820    	; 0x4726 <SSD_Write+0x382>
    43f2:	2a 81       	ldd	r18, Y+2	; 0x02
    43f4:	3b 81       	ldd	r19, Y+3	; 0x03
    43f6:	22 30       	cpi	r18, 0x02	; 2
    43f8:	31 05       	cpc	r19, r1
    43fa:	09 f4       	brne	.+2      	; 0x43fe <SSD_Write+0x5a>
    43fc:	74 c0       	rjmp	.+232    	; 0x44e6 <SSD_Write+0x142>
    43fe:	8a 81       	ldd	r24, Y+2	; 0x02
    4400:	9b 81       	ldd	r25, Y+3	; 0x03
    4402:	83 30       	cpi	r24, 0x03	; 3
    4404:	91 05       	cpc	r25, r1
    4406:	09 f4       	brne	.+2      	; 0x440a <SSD_Write+0x66>
    4408:	92 c0       	rjmp	.+292    	; 0x452e <SSD_Write+0x18a>
    440a:	8d c1       	rjmp	.+794    	; 0x4726 <SSD_Write+0x382>
    440c:	2a 81       	ldd	r18, Y+2	; 0x02
    440e:	3b 81       	ldd	r19, Y+3	; 0x03
    4410:	27 30       	cpi	r18, 0x07	; 7
    4412:	31 05       	cpc	r19, r1
    4414:	09 f4       	brne	.+2      	; 0x4418 <SSD_Write+0x74>
    4416:	1b c1       	rjmp	.+566    	; 0x464e <SSD_Write+0x2aa>
    4418:	8a 81       	ldd	r24, Y+2	; 0x02
    441a:	9b 81       	ldd	r25, Y+3	; 0x03
    441c:	88 30       	cpi	r24, 0x08	; 8
    441e:	91 05       	cpc	r25, r1
    4420:	6c f4       	brge	.+26     	; 0x443c <SSD_Write+0x98>
    4422:	2a 81       	ldd	r18, Y+2	; 0x02
    4424:	3b 81       	ldd	r19, Y+3	; 0x03
    4426:	25 30       	cpi	r18, 0x05	; 5
    4428:	31 05       	cpc	r19, r1
    442a:	09 f4       	brne	.+2      	; 0x442e <SSD_Write+0x8a>
    442c:	c8 c0       	rjmp	.+400    	; 0x45be <SSD_Write+0x21a>
    442e:	8a 81       	ldd	r24, Y+2	; 0x02
    4430:	9b 81       	ldd	r25, Y+3	; 0x03
    4432:	86 30       	cpi	r24, 0x06	; 6
    4434:	91 05       	cpc	r25, r1
    4436:	09 f4       	brne	.+2      	; 0x443a <SSD_Write+0x96>
    4438:	e6 c0       	rjmp	.+460    	; 0x4606 <SSD_Write+0x262>
    443a:	75 c1       	rjmp	.+746    	; 0x4726 <SSD_Write+0x382>
    443c:	2a 81       	ldd	r18, Y+2	; 0x02
    443e:	3b 81       	ldd	r19, Y+3	; 0x03
    4440:	28 30       	cpi	r18, 0x08	; 8
    4442:	31 05       	cpc	r19, r1
    4444:	09 f4       	brne	.+2      	; 0x4448 <SSD_Write+0xa4>
    4446:	27 c1       	rjmp	.+590    	; 0x4696 <SSD_Write+0x2f2>
    4448:	8a 81       	ldd	r24, Y+2	; 0x02
    444a:	9b 81       	ldd	r25, Y+3	; 0x03
    444c:	89 30       	cpi	r24, 0x09	; 9
    444e:	91 05       	cpc	r25, r1
    4450:	09 f4       	brne	.+2      	; 0x4454 <SSD_Write+0xb0>
    4452:	45 c1       	rjmp	.+650    	; 0x46de <SSD_Write+0x33a>
    4454:	68 c1       	rjmp	.+720    	; 0x4726 <SSD_Write+0x382>
    {

    case SSD_NUMBER_0: // 0b00111111
    #if SSD_TYPE == COMM_CATHODE
        DIO_SetPinLevel(SSD_PIN_A, DIO_HIGH);
    4456:	82 e0       	ldi	r24, 0x02	; 2
    4458:	60 e0       	ldi	r22, 0x00	; 0
    445a:	41 e0       	ldi	r20, 0x01	; 1
    445c:	0e 94 45 0c 	call	0x188a	; 0x188a <DIO_SetPinLevel>
        DIO_SetPinLevel(SSD_PIN_B, DIO_HIGH);
    4460:	82 e0       	ldi	r24, 0x02	; 2
    4462:	61 e0       	ldi	r22, 0x01	; 1
    4464:	41 e0       	ldi	r20, 0x01	; 1
    4466:	0e 94 45 0c 	call	0x188a	; 0x188a <DIO_SetPinLevel>
        DIO_SetPinLevel(SSD_PIN_C, DIO_HIGH);
    446a:	82 e0       	ldi	r24, 0x02	; 2
    446c:	62 e0       	ldi	r22, 0x02	; 2
    446e:	41 e0       	ldi	r20, 0x01	; 1
    4470:	0e 94 45 0c 	call	0x188a	; 0x188a <DIO_SetPinLevel>
        DIO_SetPinLevel(SSD_PIN_D, DIO_HIGH);
    4474:	82 e0       	ldi	r24, 0x02	; 2
    4476:	63 e0       	ldi	r22, 0x03	; 3
    4478:	41 e0       	ldi	r20, 0x01	; 1
    447a:	0e 94 45 0c 	call	0x188a	; 0x188a <DIO_SetPinLevel>
        DIO_SetPinLevel(SSD_PIN_E, DIO_HIGH);
    447e:	82 e0       	ldi	r24, 0x02	; 2
    4480:	64 e0       	ldi	r22, 0x04	; 4
    4482:	41 e0       	ldi	r20, 0x01	; 1
    4484:	0e 94 45 0c 	call	0x188a	; 0x188a <DIO_SetPinLevel>
        DIO_SetPinLevel(SSD_PIN_F, DIO_HIGH);
    4488:	82 e0       	ldi	r24, 0x02	; 2
    448a:	65 e0       	ldi	r22, 0x05	; 5
    448c:	41 e0       	ldi	r20, 0x01	; 1
    448e:	0e 94 45 0c 	call	0x188a	; 0x188a <DIO_SetPinLevel>
        DIO_SetPinLevel(SSD_PIN_G, DIO_LOW);
    4492:	82 e0       	ldi	r24, 0x02	; 2
    4494:	66 e0       	ldi	r22, 0x06	; 6
    4496:	40 e0       	ldi	r20, 0x00	; 0
    4498:	0e 94 45 0c 	call	0x188a	; 0x188a <DIO_SetPinLevel>
    449c:	67 c1       	rjmp	.+718    	; 0x476c <SSD_Write+0x3c8>
    #endif
        break;

    case SSD_NUMBER_1: // 0b00000110
    #if SSD_TYPE == COMM_CATHODE
        DIO_SetPinLevel(SSD_PIN_A, DIO_LOW);
    449e:	82 e0       	ldi	r24, 0x02	; 2
    44a0:	60 e0       	ldi	r22, 0x00	; 0
    44a2:	40 e0       	ldi	r20, 0x00	; 0
    44a4:	0e 94 45 0c 	call	0x188a	; 0x188a <DIO_SetPinLevel>
        DIO_SetPinLevel(SSD_PIN_B, DIO_HIGH);
    44a8:	82 e0       	ldi	r24, 0x02	; 2
    44aa:	61 e0       	ldi	r22, 0x01	; 1
    44ac:	41 e0       	ldi	r20, 0x01	; 1
    44ae:	0e 94 45 0c 	call	0x188a	; 0x188a <DIO_SetPinLevel>
        DIO_SetPinLevel(SSD_PIN_C, DIO_HIGH);
    44b2:	82 e0       	ldi	r24, 0x02	; 2
    44b4:	62 e0       	ldi	r22, 0x02	; 2
    44b6:	41 e0       	ldi	r20, 0x01	; 1
    44b8:	0e 94 45 0c 	call	0x188a	; 0x188a <DIO_SetPinLevel>
        DIO_SetPinLevel(SSD_PIN_D, DIO_LOW);
    44bc:	82 e0       	ldi	r24, 0x02	; 2
    44be:	63 e0       	ldi	r22, 0x03	; 3
    44c0:	40 e0       	ldi	r20, 0x00	; 0
    44c2:	0e 94 45 0c 	call	0x188a	; 0x188a <DIO_SetPinLevel>
        DIO_SetPinLevel(SSD_PIN_E, DIO_LOW);
    44c6:	82 e0       	ldi	r24, 0x02	; 2
    44c8:	64 e0       	ldi	r22, 0x04	; 4
    44ca:	40 e0       	ldi	r20, 0x00	; 0
    44cc:	0e 94 45 0c 	call	0x188a	; 0x188a <DIO_SetPinLevel>
        DIO_SetPinLevel(SSD_PIN_F, DIO_LOW);
    44d0:	82 e0       	ldi	r24, 0x02	; 2
    44d2:	65 e0       	ldi	r22, 0x05	; 5
    44d4:	40 e0       	ldi	r20, 0x00	; 0
    44d6:	0e 94 45 0c 	call	0x188a	; 0x188a <DIO_SetPinLevel>
        DIO_SetPinLevel(SSD_PIN_G, DIO_LOW);
    44da:	82 e0       	ldi	r24, 0x02	; 2
    44dc:	66 e0       	ldi	r22, 0x06	; 6
    44de:	40 e0       	ldi	r20, 0x00	; 0
    44e0:	0e 94 45 0c 	call	0x188a	; 0x188a <DIO_SetPinLevel>
    44e4:	43 c1       	rjmp	.+646    	; 0x476c <SSD_Write+0x3c8>
    #endif
        break;

    case SSD_NUMBER_2: // 0b01011011
    #if SSD_TYPE == COMM_CATHODE
        DIO_SetPinLevel(SSD_PIN_A, DIO_HIGH);
    44e6:	82 e0       	ldi	r24, 0x02	; 2
    44e8:	60 e0       	ldi	r22, 0x00	; 0
    44ea:	41 e0       	ldi	r20, 0x01	; 1
    44ec:	0e 94 45 0c 	call	0x188a	; 0x188a <DIO_SetPinLevel>
        DIO_SetPinLevel(SSD_PIN_B, DIO_HIGH);
    44f0:	82 e0       	ldi	r24, 0x02	; 2
    44f2:	61 e0       	ldi	r22, 0x01	; 1
    44f4:	41 e0       	ldi	r20, 0x01	; 1
    44f6:	0e 94 45 0c 	call	0x188a	; 0x188a <DIO_SetPinLevel>
        DIO_SetPinLevel(SSD_PIN_C, DIO_LOW);
    44fa:	82 e0       	ldi	r24, 0x02	; 2
    44fc:	62 e0       	ldi	r22, 0x02	; 2
    44fe:	40 e0       	ldi	r20, 0x00	; 0
    4500:	0e 94 45 0c 	call	0x188a	; 0x188a <DIO_SetPinLevel>
        DIO_SetPinLevel(SSD_PIN_D, DIO_HIGH);
    4504:	82 e0       	ldi	r24, 0x02	; 2
    4506:	63 e0       	ldi	r22, 0x03	; 3
    4508:	41 e0       	ldi	r20, 0x01	; 1
    450a:	0e 94 45 0c 	call	0x188a	; 0x188a <DIO_SetPinLevel>
        DIO_SetPinLevel(SSD_PIN_E, DIO_HIGH);
    450e:	82 e0       	ldi	r24, 0x02	; 2
    4510:	64 e0       	ldi	r22, 0x04	; 4
    4512:	41 e0       	ldi	r20, 0x01	; 1
    4514:	0e 94 45 0c 	call	0x188a	; 0x188a <DIO_SetPinLevel>
        DIO_SetPinLevel(SSD_PIN_F, DIO_LOW);
    4518:	82 e0       	ldi	r24, 0x02	; 2
    451a:	65 e0       	ldi	r22, 0x05	; 5
    451c:	40 e0       	ldi	r20, 0x00	; 0
    451e:	0e 94 45 0c 	call	0x188a	; 0x188a <DIO_SetPinLevel>
        DIO_SetPinLevel(SSD_PIN_G, DIO_HIGH);
    4522:	82 e0       	ldi	r24, 0x02	; 2
    4524:	66 e0       	ldi	r22, 0x06	; 6
    4526:	41 e0       	ldi	r20, 0x01	; 1
    4528:	0e 94 45 0c 	call	0x188a	; 0x188a <DIO_SetPinLevel>
    452c:	1f c1       	rjmp	.+574    	; 0x476c <SSD_Write+0x3c8>

        break;

    case SSD_NUMBER_3: // 0b01001111
    #if SSD_TYPE == COMM_CATHODE
        DIO_SetPinLevel(SSD_PIN_A, DIO_HIGH);
    452e:	82 e0       	ldi	r24, 0x02	; 2
    4530:	60 e0       	ldi	r22, 0x00	; 0
    4532:	41 e0       	ldi	r20, 0x01	; 1
    4534:	0e 94 45 0c 	call	0x188a	; 0x188a <DIO_SetPinLevel>
        DIO_SetPinLevel(SSD_PIN_B, DIO_HIGH);
    4538:	82 e0       	ldi	r24, 0x02	; 2
    453a:	61 e0       	ldi	r22, 0x01	; 1
    453c:	41 e0       	ldi	r20, 0x01	; 1
    453e:	0e 94 45 0c 	call	0x188a	; 0x188a <DIO_SetPinLevel>
        DIO_SetPinLevel(SSD_PIN_C, DIO_HIGH);
    4542:	82 e0       	ldi	r24, 0x02	; 2
    4544:	62 e0       	ldi	r22, 0x02	; 2
    4546:	41 e0       	ldi	r20, 0x01	; 1
    4548:	0e 94 45 0c 	call	0x188a	; 0x188a <DIO_SetPinLevel>
        DIO_SetPinLevel(SSD_PIN_D, DIO_HIGH);
    454c:	82 e0       	ldi	r24, 0x02	; 2
    454e:	63 e0       	ldi	r22, 0x03	; 3
    4550:	41 e0       	ldi	r20, 0x01	; 1
    4552:	0e 94 45 0c 	call	0x188a	; 0x188a <DIO_SetPinLevel>
        DIO_SetPinLevel(SSD_PIN_E, DIO_LOW);
    4556:	82 e0       	ldi	r24, 0x02	; 2
    4558:	64 e0       	ldi	r22, 0x04	; 4
    455a:	40 e0       	ldi	r20, 0x00	; 0
    455c:	0e 94 45 0c 	call	0x188a	; 0x188a <DIO_SetPinLevel>
        DIO_SetPinLevel(SSD_PIN_F, DIO_LOW);
    4560:	82 e0       	ldi	r24, 0x02	; 2
    4562:	65 e0       	ldi	r22, 0x05	; 5
    4564:	40 e0       	ldi	r20, 0x00	; 0
    4566:	0e 94 45 0c 	call	0x188a	; 0x188a <DIO_SetPinLevel>
        DIO_SetPinLevel(SSD_PIN_G, DIO_HIGH);
    456a:	82 e0       	ldi	r24, 0x02	; 2
    456c:	66 e0       	ldi	r22, 0x06	; 6
    456e:	41 e0       	ldi	r20, 0x01	; 1
    4570:	0e 94 45 0c 	call	0x188a	; 0x188a <DIO_SetPinLevel>
    4574:	fb c0       	rjmp	.+502    	; 0x476c <SSD_Write+0x3c8>
    #endif

        break;
    case SSD_NUMBER_4: // 0b01100110
    #if SSD_TYPE == COMM_CATHODE
        DIO_SetPinLevel(SSD_PIN_A, DIO_LOW);
    4576:	82 e0       	ldi	r24, 0x02	; 2
    4578:	60 e0       	ldi	r22, 0x00	; 0
    457a:	40 e0       	ldi	r20, 0x00	; 0
    457c:	0e 94 45 0c 	call	0x188a	; 0x188a <DIO_SetPinLevel>
        DIO_SetPinLevel(SSD_PIN_B, DIO_HIGH);
    4580:	82 e0       	ldi	r24, 0x02	; 2
    4582:	61 e0       	ldi	r22, 0x01	; 1
    4584:	41 e0       	ldi	r20, 0x01	; 1
    4586:	0e 94 45 0c 	call	0x188a	; 0x188a <DIO_SetPinLevel>
        DIO_SetPinLevel(SSD_PIN_C, DIO_HIGH);
    458a:	82 e0       	ldi	r24, 0x02	; 2
    458c:	62 e0       	ldi	r22, 0x02	; 2
    458e:	41 e0       	ldi	r20, 0x01	; 1
    4590:	0e 94 45 0c 	call	0x188a	; 0x188a <DIO_SetPinLevel>
        DIO_SetPinLevel(SSD_PIN_D, DIO_LOW);
    4594:	82 e0       	ldi	r24, 0x02	; 2
    4596:	63 e0       	ldi	r22, 0x03	; 3
    4598:	40 e0       	ldi	r20, 0x00	; 0
    459a:	0e 94 45 0c 	call	0x188a	; 0x188a <DIO_SetPinLevel>
        DIO_SetPinLevel(SSD_PIN_E, DIO_LOW);
    459e:	82 e0       	ldi	r24, 0x02	; 2
    45a0:	64 e0       	ldi	r22, 0x04	; 4
    45a2:	40 e0       	ldi	r20, 0x00	; 0
    45a4:	0e 94 45 0c 	call	0x188a	; 0x188a <DIO_SetPinLevel>
        DIO_SetPinLevel(SSD_PIN_F, DIO_HIGH);
    45a8:	82 e0       	ldi	r24, 0x02	; 2
    45aa:	65 e0       	ldi	r22, 0x05	; 5
    45ac:	41 e0       	ldi	r20, 0x01	; 1
    45ae:	0e 94 45 0c 	call	0x188a	; 0x188a <DIO_SetPinLevel>
        DIO_SetPinLevel(SSD_PIN_G, DIO_HIGH);
    45b2:	82 e0       	ldi	r24, 0x02	; 2
    45b4:	66 e0       	ldi	r22, 0x06	; 6
    45b6:	41 e0       	ldi	r20, 0x01	; 1
    45b8:	0e 94 45 0c 	call	0x188a	; 0x188a <DIO_SetPinLevel>
    45bc:	d7 c0       	rjmp	.+430    	; 0x476c <SSD_Write+0x3c8>
    #endif

        break;
    case SSD_NUMBER_5: // 0b01101101
    #if SSD_TYPE == COMM_CATHODE
        DIO_SetPinLevel(SSD_PIN_A, DIO_HIGH);
    45be:	82 e0       	ldi	r24, 0x02	; 2
    45c0:	60 e0       	ldi	r22, 0x00	; 0
    45c2:	41 e0       	ldi	r20, 0x01	; 1
    45c4:	0e 94 45 0c 	call	0x188a	; 0x188a <DIO_SetPinLevel>
        DIO_SetPinLevel(SSD_PIN_B, DIO_LOW);
    45c8:	82 e0       	ldi	r24, 0x02	; 2
    45ca:	61 e0       	ldi	r22, 0x01	; 1
    45cc:	40 e0       	ldi	r20, 0x00	; 0
    45ce:	0e 94 45 0c 	call	0x188a	; 0x188a <DIO_SetPinLevel>
        DIO_SetPinLevel(SSD_PIN_C, DIO_HIGH);
    45d2:	82 e0       	ldi	r24, 0x02	; 2
    45d4:	62 e0       	ldi	r22, 0x02	; 2
    45d6:	41 e0       	ldi	r20, 0x01	; 1
    45d8:	0e 94 45 0c 	call	0x188a	; 0x188a <DIO_SetPinLevel>
        DIO_SetPinLevel(SSD_PIN_D, DIO_HIGH);
    45dc:	82 e0       	ldi	r24, 0x02	; 2
    45de:	63 e0       	ldi	r22, 0x03	; 3
    45e0:	41 e0       	ldi	r20, 0x01	; 1
    45e2:	0e 94 45 0c 	call	0x188a	; 0x188a <DIO_SetPinLevel>
        DIO_SetPinLevel(SSD_PIN_E, DIO_LOW);
    45e6:	82 e0       	ldi	r24, 0x02	; 2
    45e8:	64 e0       	ldi	r22, 0x04	; 4
    45ea:	40 e0       	ldi	r20, 0x00	; 0
    45ec:	0e 94 45 0c 	call	0x188a	; 0x188a <DIO_SetPinLevel>
        DIO_SetPinLevel(SSD_PIN_F, DIO_HIGH);
    45f0:	82 e0       	ldi	r24, 0x02	; 2
    45f2:	65 e0       	ldi	r22, 0x05	; 5
    45f4:	41 e0       	ldi	r20, 0x01	; 1
    45f6:	0e 94 45 0c 	call	0x188a	; 0x188a <DIO_SetPinLevel>
        DIO_SetPinLevel(SSD_PIN_G, DIO_HIGH);
    45fa:	82 e0       	ldi	r24, 0x02	; 2
    45fc:	66 e0       	ldi	r22, 0x06	; 6
    45fe:	41 e0       	ldi	r20, 0x01	; 1
    4600:	0e 94 45 0c 	call	0x188a	; 0x188a <DIO_SetPinLevel>
    4604:	b3 c0       	rjmp	.+358    	; 0x476c <SSD_Write+0x3c8>
    #endif

        break;
    case SSD_NUMBER_6: // 0b01111101
            #if SSD_TYPE == COMM_CATHODE
        DIO_SetPinLevel(SSD_PIN_A, DIO_HIGH);
    4606:	82 e0       	ldi	r24, 0x02	; 2
    4608:	60 e0       	ldi	r22, 0x00	; 0
    460a:	41 e0       	ldi	r20, 0x01	; 1
    460c:	0e 94 45 0c 	call	0x188a	; 0x188a <DIO_SetPinLevel>
        DIO_SetPinLevel(SSD_PIN_B, DIO_LOW);
    4610:	82 e0       	ldi	r24, 0x02	; 2
    4612:	61 e0       	ldi	r22, 0x01	; 1
    4614:	40 e0       	ldi	r20, 0x00	; 0
    4616:	0e 94 45 0c 	call	0x188a	; 0x188a <DIO_SetPinLevel>
        DIO_SetPinLevel(SSD_PIN_C, DIO_HIGH);
    461a:	82 e0       	ldi	r24, 0x02	; 2
    461c:	62 e0       	ldi	r22, 0x02	; 2
    461e:	41 e0       	ldi	r20, 0x01	; 1
    4620:	0e 94 45 0c 	call	0x188a	; 0x188a <DIO_SetPinLevel>
        DIO_SetPinLevel(SSD_PIN_D, DIO_HIGH);
    4624:	82 e0       	ldi	r24, 0x02	; 2
    4626:	63 e0       	ldi	r22, 0x03	; 3
    4628:	41 e0       	ldi	r20, 0x01	; 1
    462a:	0e 94 45 0c 	call	0x188a	; 0x188a <DIO_SetPinLevel>
        DIO_SetPinLevel(SSD_PIN_E, DIO_HIGH);
    462e:	82 e0       	ldi	r24, 0x02	; 2
    4630:	64 e0       	ldi	r22, 0x04	; 4
    4632:	41 e0       	ldi	r20, 0x01	; 1
    4634:	0e 94 45 0c 	call	0x188a	; 0x188a <DIO_SetPinLevel>
        DIO_SetPinLevel(SSD_PIN_F, DIO_HIGH);
    4638:	82 e0       	ldi	r24, 0x02	; 2
    463a:	65 e0       	ldi	r22, 0x05	; 5
    463c:	41 e0       	ldi	r20, 0x01	; 1
    463e:	0e 94 45 0c 	call	0x188a	; 0x188a <DIO_SetPinLevel>
        DIO_SetPinLevel(SSD_PIN_G, DIO_HIGH);
    4642:	82 e0       	ldi	r24, 0x02	; 2
    4644:	66 e0       	ldi	r22, 0x06	; 6
    4646:	41 e0       	ldi	r20, 0x01	; 1
    4648:	0e 94 45 0c 	call	0x188a	; 0x188a <DIO_SetPinLevel>
    464c:	8f c0       	rjmp	.+286    	; 0x476c <SSD_Write+0x3c8>
        #error "Invalid SSD Type"
    #endif
        break;
    case SSD_NUMBER_7: // 0b00000111
        #if SSD_TYPE == COMM_CATHODE
        DIO_SetPinLevel(SSD_PIN_A, DIO_HIGH);
    464e:	82 e0       	ldi	r24, 0x02	; 2
    4650:	60 e0       	ldi	r22, 0x00	; 0
    4652:	41 e0       	ldi	r20, 0x01	; 1
    4654:	0e 94 45 0c 	call	0x188a	; 0x188a <DIO_SetPinLevel>
        DIO_SetPinLevel(SSD_PIN_B, DIO_HIGH);
    4658:	82 e0       	ldi	r24, 0x02	; 2
    465a:	61 e0       	ldi	r22, 0x01	; 1
    465c:	41 e0       	ldi	r20, 0x01	; 1
    465e:	0e 94 45 0c 	call	0x188a	; 0x188a <DIO_SetPinLevel>
        DIO_SetPinLevel(SSD_PIN_C, DIO_HIGH);
    4662:	82 e0       	ldi	r24, 0x02	; 2
    4664:	62 e0       	ldi	r22, 0x02	; 2
    4666:	41 e0       	ldi	r20, 0x01	; 1
    4668:	0e 94 45 0c 	call	0x188a	; 0x188a <DIO_SetPinLevel>
        DIO_SetPinLevel(SSD_PIN_D, DIO_LOW);
    466c:	82 e0       	ldi	r24, 0x02	; 2
    466e:	63 e0       	ldi	r22, 0x03	; 3
    4670:	40 e0       	ldi	r20, 0x00	; 0
    4672:	0e 94 45 0c 	call	0x188a	; 0x188a <DIO_SetPinLevel>
        DIO_SetPinLevel(SSD_PIN_E, DIO_LOW);
    4676:	82 e0       	ldi	r24, 0x02	; 2
    4678:	64 e0       	ldi	r22, 0x04	; 4
    467a:	40 e0       	ldi	r20, 0x00	; 0
    467c:	0e 94 45 0c 	call	0x188a	; 0x188a <DIO_SetPinLevel>
        DIO_SetPinLevel(SSD_PIN_F, DIO_LOW);
    4680:	82 e0       	ldi	r24, 0x02	; 2
    4682:	65 e0       	ldi	r22, 0x05	; 5
    4684:	40 e0       	ldi	r20, 0x00	; 0
    4686:	0e 94 45 0c 	call	0x188a	; 0x188a <DIO_SetPinLevel>
        DIO_SetPinLevel(SSD_PIN_G, DIO_LOW);
    468a:	82 e0       	ldi	r24, 0x02	; 2
    468c:	66 e0       	ldi	r22, 0x06	; 6
    468e:	40 e0       	ldi	r20, 0x00	; 0
    4690:	0e 94 45 0c 	call	0x188a	; 0x188a <DIO_SetPinLevel>
    4694:	6b c0       	rjmp	.+214    	; 0x476c <SSD_Write+0x3c8>
    #endif

        break;
    case SSD_NUMBER_8: // 0b01111111
    #if SSD_TYPE == COMM_CATHODE
        DIO_SetPinLevel(SSD_PIN_A, DIO_HIGH);
    4696:	82 e0       	ldi	r24, 0x02	; 2
    4698:	60 e0       	ldi	r22, 0x00	; 0
    469a:	41 e0       	ldi	r20, 0x01	; 1
    469c:	0e 94 45 0c 	call	0x188a	; 0x188a <DIO_SetPinLevel>
        DIO_SetPinLevel(SSD_PIN_B, DIO_HIGH);
    46a0:	82 e0       	ldi	r24, 0x02	; 2
    46a2:	61 e0       	ldi	r22, 0x01	; 1
    46a4:	41 e0       	ldi	r20, 0x01	; 1
    46a6:	0e 94 45 0c 	call	0x188a	; 0x188a <DIO_SetPinLevel>
        DIO_SetPinLevel(SSD_PIN_C, DIO_HIGH);
    46aa:	82 e0       	ldi	r24, 0x02	; 2
    46ac:	62 e0       	ldi	r22, 0x02	; 2
    46ae:	41 e0       	ldi	r20, 0x01	; 1
    46b0:	0e 94 45 0c 	call	0x188a	; 0x188a <DIO_SetPinLevel>
        DIO_SetPinLevel(SSD_PIN_D, DIO_HIGH);
    46b4:	82 e0       	ldi	r24, 0x02	; 2
    46b6:	63 e0       	ldi	r22, 0x03	; 3
    46b8:	41 e0       	ldi	r20, 0x01	; 1
    46ba:	0e 94 45 0c 	call	0x188a	; 0x188a <DIO_SetPinLevel>
        DIO_SetPinLevel(SSD_PIN_E, DIO_HIGH);
    46be:	82 e0       	ldi	r24, 0x02	; 2
    46c0:	64 e0       	ldi	r22, 0x04	; 4
    46c2:	41 e0       	ldi	r20, 0x01	; 1
    46c4:	0e 94 45 0c 	call	0x188a	; 0x188a <DIO_SetPinLevel>
        DIO_SetPinLevel(SSD_PIN_F, DIO_HIGH);
    46c8:	82 e0       	ldi	r24, 0x02	; 2
    46ca:	65 e0       	ldi	r22, 0x05	; 5
    46cc:	41 e0       	ldi	r20, 0x01	; 1
    46ce:	0e 94 45 0c 	call	0x188a	; 0x188a <DIO_SetPinLevel>
        DIO_SetPinLevel(SSD_PIN_G, DIO_HIGH);
    46d2:	82 e0       	ldi	r24, 0x02	; 2
    46d4:	66 e0       	ldi	r22, 0x06	; 6
    46d6:	41 e0       	ldi	r20, 0x01	; 1
    46d8:	0e 94 45 0c 	call	0x188a	; 0x188a <DIO_SetPinLevel>
    46dc:	47 c0       	rjmp	.+142    	; 0x476c <SSD_Write+0x3c8>
    #endif

        break;
    case SSD_NUMBER_9: // 0b01101111
    #if SSD_TYPE == COMM_CATHODE
        DIO_SetPinLevel(SSD_PIN_A, DIO_HIGH);
    46de:	82 e0       	ldi	r24, 0x02	; 2
    46e0:	60 e0       	ldi	r22, 0x00	; 0
    46e2:	41 e0       	ldi	r20, 0x01	; 1
    46e4:	0e 94 45 0c 	call	0x188a	; 0x188a <DIO_SetPinLevel>
        DIO_SetPinLevel(SSD_PIN_B, DIO_HIGH);
    46e8:	82 e0       	ldi	r24, 0x02	; 2
    46ea:	61 e0       	ldi	r22, 0x01	; 1
    46ec:	41 e0       	ldi	r20, 0x01	; 1
    46ee:	0e 94 45 0c 	call	0x188a	; 0x188a <DIO_SetPinLevel>
        DIO_SetPinLevel(SSD_PIN_C, DIO_HIGH);
    46f2:	82 e0       	ldi	r24, 0x02	; 2
    46f4:	62 e0       	ldi	r22, 0x02	; 2
    46f6:	41 e0       	ldi	r20, 0x01	; 1
    46f8:	0e 94 45 0c 	call	0x188a	; 0x188a <DIO_SetPinLevel>
        DIO_SetPinLevel(SSD_PIN_D, DIO_HIGH);
    46fc:	82 e0       	ldi	r24, 0x02	; 2
    46fe:	63 e0       	ldi	r22, 0x03	; 3
    4700:	41 e0       	ldi	r20, 0x01	; 1
    4702:	0e 94 45 0c 	call	0x188a	; 0x188a <DIO_SetPinLevel>
        DIO_SetPinLevel(SSD_PIN_E, DIO_LOW);
    4706:	82 e0       	ldi	r24, 0x02	; 2
    4708:	64 e0       	ldi	r22, 0x04	; 4
    470a:	40 e0       	ldi	r20, 0x00	; 0
    470c:	0e 94 45 0c 	call	0x188a	; 0x188a <DIO_SetPinLevel>
        DIO_SetPinLevel(SSD_PIN_F, DIO_HIGH);
    4710:	82 e0       	ldi	r24, 0x02	; 2
    4712:	65 e0       	ldi	r22, 0x05	; 5
    4714:	41 e0       	ldi	r20, 0x01	; 1
    4716:	0e 94 45 0c 	call	0x188a	; 0x188a <DIO_SetPinLevel>
        DIO_SetPinLevel(SSD_PIN_G, DIO_HIGH);
    471a:	82 e0       	ldi	r24, 0x02	; 2
    471c:	66 e0       	ldi	r22, 0x06	; 6
    471e:	41 e0       	ldi	r20, 0x01	; 1
    4720:	0e 94 45 0c 	call	0x188a	; 0x188a <DIO_SetPinLevel>
    4724:	23 c0       	rjmp	.+70     	; 0x476c <SSD_Write+0x3c8>
        break;

    case SSD_OFF:
    default:
    #if SSD_TYPE == COMM_CATHODE
        DIO_SetPinLevel(SSD_PIN_A, DIO_LOW);
    4726:	82 e0       	ldi	r24, 0x02	; 2
    4728:	60 e0       	ldi	r22, 0x00	; 0
    472a:	40 e0       	ldi	r20, 0x00	; 0
    472c:	0e 94 45 0c 	call	0x188a	; 0x188a <DIO_SetPinLevel>
        DIO_SetPinLevel(SSD_PIN_B, DIO_LOW);
    4730:	82 e0       	ldi	r24, 0x02	; 2
    4732:	61 e0       	ldi	r22, 0x01	; 1
    4734:	40 e0       	ldi	r20, 0x00	; 0
    4736:	0e 94 45 0c 	call	0x188a	; 0x188a <DIO_SetPinLevel>
        DIO_SetPinLevel(SSD_PIN_C, DIO_LOW);
    473a:	82 e0       	ldi	r24, 0x02	; 2
    473c:	62 e0       	ldi	r22, 0x02	; 2
    473e:	40 e0       	ldi	r20, 0x00	; 0
    4740:	0e 94 45 0c 	call	0x188a	; 0x188a <DIO_SetPinLevel>
        DIO_SetPinLevel(SSD_PIN_D, DIO_LOW);
    4744:	82 e0       	ldi	r24, 0x02	; 2
    4746:	63 e0       	ldi	r22, 0x03	; 3
    4748:	40 e0       	ldi	r20, 0x00	; 0
    474a:	0e 94 45 0c 	call	0x188a	; 0x188a <DIO_SetPinLevel>
        DIO_SetPinLevel(SSD_PIN_E, DIO_LOW);
    474e:	82 e0       	ldi	r24, 0x02	; 2
    4750:	64 e0       	ldi	r22, 0x04	; 4
    4752:	40 e0       	ldi	r20, 0x00	; 0
    4754:	0e 94 45 0c 	call	0x188a	; 0x188a <DIO_SetPinLevel>
        DIO_SetPinLevel(SSD_PIN_F, DIO_LOW);
    4758:	82 e0       	ldi	r24, 0x02	; 2
    475a:	65 e0       	ldi	r22, 0x05	; 5
    475c:	40 e0       	ldi	r20, 0x00	; 0
    475e:	0e 94 45 0c 	call	0x188a	; 0x188a <DIO_SetPinLevel>
        DIO_SetPinLevel(SSD_PIN_G, DIO_LOW);
    4762:	82 e0       	ldi	r24, 0x02	; 2
    4764:	66 e0       	ldi	r22, 0x06	; 6
    4766:	40 e0       	ldi	r20, 0x00	; 0
    4768:	0e 94 45 0c 	call	0x188a	; 0x188a <DIO_SetPinLevel>
    #else
        #error "Invalid SSD Type"
    #endif
        break;
    }
}
    476c:	0f 90       	pop	r0
    476e:	0f 90       	pop	r0
    4770:	0f 90       	pop	r0
    4772:	cf 91       	pop	r28
    4774:	df 91       	pop	r29
    4776:	08 95       	ret

00004778 <UART_Init>:
#include "UART.h"
#include "Registers.h"
#include "DIO.h"

void UART_Init(USART_Mode_Select mode,Parity_Mode pmode,Stop_Bit_Select sbit,Character_Size csize,Baud_Rate_Setting brate)
{
    4778:	0f 93       	push	r16
    477a:	df 93       	push	r29
    477c:	cf 93       	push	r28
    477e:	cd b7       	in	r28, 0x3d	; 61
    4780:	de b7       	in	r29, 0x3e	; 62
    4782:	2b 97       	sbiw	r28, 0x0b	; 11
    4784:	0f b6       	in	r0, 0x3f	; 63
    4786:	f8 94       	cli
    4788:	de bf       	out	0x3e, r29	; 62
    478a:	0f be       	out	0x3f, r0	; 63
    478c:	cd bf       	out	0x3d, r28	; 61
    478e:	89 83       	std	Y+1, r24	; 0x01
    4790:	6a 83       	std	Y+2, r22	; 0x02
    4792:	4b 83       	std	Y+3, r20	; 0x03
    4794:	2c 83       	std	Y+4, r18	; 0x04
    4796:	0d 83       	std	Y+5, r16	; 0x05
    SET_BIT(UCSRC, UCSRC_URSEL); // 3shan tekhali uart to play
    4798:	a0 e4       	ldi	r26, 0x40	; 64
    479a:	b0 e0       	ldi	r27, 0x00	; 0
    479c:	e0 e4       	ldi	r30, 0x40	; 64
    479e:	f0 e0       	ldi	r31, 0x00	; 0
    47a0:	80 81       	ld	r24, Z
    47a2:	80 68       	ori	r24, 0x80	; 128
    47a4:	8c 93       	st	X, r24
    DIO_SetPinMode(DIO_PORTD, DIO_PIN0, DIO_INPUT_FLOATING);
    47a6:	83 e0       	ldi	r24, 0x03	; 3
    47a8:	60 e0       	ldi	r22, 0x00	; 0
    47aa:	40 e0       	ldi	r20, 0x00	; 0
    47ac:	0e 94 37 09 	call	0x126e	; 0x126e <DIO_SetPinMode>
	DIO_SetPinMode(DIO_PORTD, DIO_PIN1, DIO_OUTPUT);
    47b0:	83 e0       	ldi	r24, 0x03	; 3
    47b2:	61 e0       	ldi	r22, 0x01	; 1
    47b4:	42 e0       	ldi	r20, 0x02	; 2
    47b6:	0e 94 37 09 	call	0x126e	; 0x126e <DIO_SetPinMode>


    if(mode == Asynchronous)
    47ba:	89 81       	ldd	r24, Y+1	; 0x01
    47bc:	88 23       	and	r24, r24
    47be:	41 f4       	brne	.+16     	; 0x47d0 <UART_Init+0x58>
    {
        CLR_BIT(UCSRC,UCSRC_UMSEL);
    47c0:	a0 e4       	ldi	r26, 0x40	; 64
    47c2:	b0 e0       	ldi	r27, 0x00	; 0
    47c4:	e0 e4       	ldi	r30, 0x40	; 64
    47c6:	f0 e0       	ldi	r31, 0x00	; 0
    47c8:	80 81       	ld	r24, Z
    47ca:	8f 7b       	andi	r24, 0xBF	; 191
    47cc:	8c 93       	st	X, r24
    47ce:	0a c0       	rjmp	.+20     	; 0x47e4 <UART_Init+0x6c>
    }else if(mode == Synchronous)
    47d0:	89 81       	ldd	r24, Y+1	; 0x01
    47d2:	81 30       	cpi	r24, 0x01	; 1
    47d4:	39 f4       	brne	.+14     	; 0x47e4 <UART_Init+0x6c>
    {
        SET_BIT(UCSRC,UCSRC_UMSEL);
    47d6:	a0 e4       	ldi	r26, 0x40	; 64
    47d8:	b0 e0       	ldi	r27, 0x00	; 0
    47da:	e0 e4       	ldi	r30, 0x40	; 64
    47dc:	f0 e0       	ldi	r31, 0x00	; 0
    47de:	80 81       	ld	r24, Z
    47e0:	80 64       	ori	r24, 0x40	; 64
    47e2:	8c 93       	st	X, r24

    }

    switch (pmode)
    47e4:	8a 81       	ldd	r24, Y+2	; 0x02
    47e6:	28 2f       	mov	r18, r24
    47e8:	30 e0       	ldi	r19, 0x00	; 0
    47ea:	3b 87       	std	Y+11, r19	; 0x0b
    47ec:	2a 87       	std	Y+10, r18	; 0x0a
    47ee:	8a 85       	ldd	r24, Y+10	; 0x0a
    47f0:	9b 85       	ldd	r25, Y+11	; 0x0b
    47f2:	81 30       	cpi	r24, 0x01	; 1
    47f4:	91 05       	cpc	r25, r1
    47f6:	c1 f0       	breq	.+48     	; 0x4828 <UART_Init+0xb0>
    47f8:	2a 85       	ldd	r18, Y+10	; 0x0a
    47fa:	3b 85       	ldd	r19, Y+11	; 0x0b
    47fc:	22 30       	cpi	r18, 0x02	; 2
    47fe:	31 05       	cpc	r19, r1
    4800:	11 f1       	breq	.+68     	; 0x4846 <UART_Init+0xce>
    4802:	8a 85       	ldd	r24, Y+10	; 0x0a
    4804:	9b 85       	ldd	r25, Y+11	; 0x0b
    4806:	00 97       	sbiw	r24, 0x00	; 0
    4808:	61 f5       	brne	.+88     	; 0x4862 <UART_Init+0xea>
    {
    case Disabled_parity:
        CLR_BIT(UCSRC,UCSRC_UPM0);
    480a:	a0 e4       	ldi	r26, 0x40	; 64
    480c:	b0 e0       	ldi	r27, 0x00	; 0
    480e:	e0 e4       	ldi	r30, 0x40	; 64
    4810:	f0 e0       	ldi	r31, 0x00	; 0
    4812:	80 81       	ld	r24, Z
    4814:	8f 7e       	andi	r24, 0xEF	; 239
    4816:	8c 93       	st	X, r24
        CLR_BIT(UCSRC,UCSRC_UPM1);
    4818:	a0 e4       	ldi	r26, 0x40	; 64
    481a:	b0 e0       	ldi	r27, 0x00	; 0
    481c:	e0 e4       	ldi	r30, 0x40	; 64
    481e:	f0 e0       	ldi	r31, 0x00	; 0
    4820:	80 81       	ld	r24, Z
    4822:	8f 7d       	andi	r24, 0xDF	; 223
    4824:	8c 93       	st	X, r24
    4826:	1d c0       	rjmp	.+58     	; 0x4862 <UART_Init+0xea>
        /* code */
        break;
    case Even_Parity:
        CLR_BIT(UCSRC,UCSRC_UPM0);
    4828:	a0 e4       	ldi	r26, 0x40	; 64
    482a:	b0 e0       	ldi	r27, 0x00	; 0
    482c:	e0 e4       	ldi	r30, 0x40	; 64
    482e:	f0 e0       	ldi	r31, 0x00	; 0
    4830:	80 81       	ld	r24, Z
    4832:	8f 7e       	andi	r24, 0xEF	; 239
    4834:	8c 93       	st	X, r24
        SET_BIT(UCSRC,UCSRC_UPM1);
    4836:	a0 e4       	ldi	r26, 0x40	; 64
    4838:	b0 e0       	ldi	r27, 0x00	; 0
    483a:	e0 e4       	ldi	r30, 0x40	; 64
    483c:	f0 e0       	ldi	r31, 0x00	; 0
    483e:	80 81       	ld	r24, Z
    4840:	80 62       	ori	r24, 0x20	; 32
    4842:	8c 93       	st	X, r24
    4844:	0e c0       	rjmp	.+28     	; 0x4862 <UART_Init+0xea>
        /* code */
        break;
    case Odd_Parity:
        SET_BIT(UCSRC,UCSRC_UPM0);
    4846:	a0 e4       	ldi	r26, 0x40	; 64
    4848:	b0 e0       	ldi	r27, 0x00	; 0
    484a:	e0 e4       	ldi	r30, 0x40	; 64
    484c:	f0 e0       	ldi	r31, 0x00	; 0
    484e:	80 81       	ld	r24, Z
    4850:	80 61       	ori	r24, 0x10	; 16
    4852:	8c 93       	st	X, r24
        SET_BIT(UCSRC,UCSRC_UPM1);
    4854:	a0 e4       	ldi	r26, 0x40	; 64
    4856:	b0 e0       	ldi	r27, 0x00	; 0
    4858:	e0 e4       	ldi	r30, 0x40	; 64
    485a:	f0 e0       	ldi	r31, 0x00	; 0
    485c:	80 81       	ld	r24, Z
    485e:	80 62       	ori	r24, 0x20	; 32
    4860:	8c 93       	st	X, r24
        break;
    
    default:
        break;
    }
    if(sbit==one_Stop_bit)
    4862:	8b 81       	ldd	r24, Y+3	; 0x03
    4864:	88 23       	and	r24, r24
    4866:	41 f4       	brne	.+16     	; 0x4878 <UART_Init+0x100>
    {
        CLR_BIT(UCSRC,UCSRC_USBS);
    4868:	a0 e4       	ldi	r26, 0x40	; 64
    486a:	b0 e0       	ldi	r27, 0x00	; 0
    486c:	e0 e4       	ldi	r30, 0x40	; 64
    486e:	f0 e0       	ldi	r31, 0x00	; 0
    4870:	80 81       	ld	r24, Z
    4872:	87 7f       	andi	r24, 0xF7	; 247
    4874:	8c 93       	st	X, r24
    4876:	0a c0       	rjmp	.+20     	; 0x488c <UART_Init+0x114>
    }else if( sbit==two_Stop_bit)
    4878:	8b 81       	ldd	r24, Y+3	; 0x03
    487a:	81 30       	cpi	r24, 0x01	; 1
    487c:	39 f4       	brne	.+14     	; 0x488c <UART_Init+0x114>
    {
        SET_BIT(UCSRC,UCSRC_USBS);
    487e:	a0 e4       	ldi	r26, 0x40	; 64
    4880:	b0 e0       	ldi	r27, 0x00	; 0
    4882:	e0 e4       	ldi	r30, 0x40	; 64
    4884:	f0 e0       	ldi	r31, 0x00	; 0
    4886:	80 81       	ld	r24, Z
    4888:	88 60       	ori	r24, 0x08	; 8
    488a:	8c 93       	st	X, r24
    }
    switch (csize)
    488c:	8c 81       	ldd	r24, Y+4	; 0x04
    488e:	28 2f       	mov	r18, r24
    4890:	30 e0       	ldi	r19, 0x00	; 0
    4892:	39 87       	std	Y+9, r19	; 0x09
    4894:	28 87       	std	Y+8, r18	; 0x08
    4896:	88 85       	ldd	r24, Y+8	; 0x08
    4898:	99 85       	ldd	r25, Y+9	; 0x09
    489a:	82 30       	cpi	r24, 0x02	; 2
    489c:	91 05       	cpc	r25, r1
    489e:	09 f4       	brne	.+2      	; 0x48a2 <UART_Init+0x12a>
    48a0:	48 c0       	rjmp	.+144    	; 0x4932 <UART_Init+0x1ba>
    48a2:	28 85       	ldd	r18, Y+8	; 0x08
    48a4:	39 85       	ldd	r19, Y+9	; 0x09
    48a6:	23 30       	cpi	r18, 0x03	; 3
    48a8:	31 05       	cpc	r19, r1
    48aa:	54 f4       	brge	.+20     	; 0x48c0 <UART_Init+0x148>
    48ac:	88 85       	ldd	r24, Y+8	; 0x08
    48ae:	99 85       	ldd	r25, Y+9	; 0x09
    48b0:	00 97       	sbiw	r24, 0x00	; 0
    48b2:	99 f0       	breq	.+38     	; 0x48da <UART_Init+0x162>
    48b4:	28 85       	ldd	r18, Y+8	; 0x08
    48b6:	39 85       	ldd	r19, Y+9	; 0x09
    48b8:	21 30       	cpi	r18, 0x01	; 1
    48ba:	31 05       	cpc	r19, r1
    48bc:	21 f1       	breq	.+72     	; 0x4906 <UART_Init+0x18e>
    48be:	7a c0       	rjmp	.+244    	; 0x49b4 <UART_Init+0x23c>
    48c0:	88 85       	ldd	r24, Y+8	; 0x08
    48c2:	99 85       	ldd	r25, Y+9	; 0x09
    48c4:	83 30       	cpi	r24, 0x03	; 3
    48c6:	91 05       	cpc	r25, r1
    48c8:	09 f4       	brne	.+2      	; 0x48cc <UART_Init+0x154>
    48ca:	49 c0       	rjmp	.+146    	; 0x495e <UART_Init+0x1e6>
    48cc:	28 85       	ldd	r18, Y+8	; 0x08
    48ce:	39 85       	ldd	r19, Y+9	; 0x09
    48d0:	24 30       	cpi	r18, 0x04	; 4
    48d2:	31 05       	cpc	r19, r1
    48d4:	09 f4       	brne	.+2      	; 0x48d8 <UART_Init+0x160>
    48d6:	59 c0       	rjmp	.+178    	; 0x498a <UART_Init+0x212>
    48d8:	6d c0       	rjmp	.+218    	; 0x49b4 <UART_Init+0x23c>
    {
    case _5_bit:
        CLR_BIT(UCSRC,UCSRC_UCSZ0);
    48da:	a0 e4       	ldi	r26, 0x40	; 64
    48dc:	b0 e0       	ldi	r27, 0x00	; 0
    48de:	e0 e4       	ldi	r30, 0x40	; 64
    48e0:	f0 e0       	ldi	r31, 0x00	; 0
    48e2:	80 81       	ld	r24, Z
    48e4:	8d 7f       	andi	r24, 0xFD	; 253
    48e6:	8c 93       	st	X, r24
        CLR_BIT(UCSRC,UCSRC_UCSZ1);
    48e8:	a0 e4       	ldi	r26, 0x40	; 64
    48ea:	b0 e0       	ldi	r27, 0x00	; 0
    48ec:	e0 e4       	ldi	r30, 0x40	; 64
    48ee:	f0 e0       	ldi	r31, 0x00	; 0
    48f0:	80 81       	ld	r24, Z
    48f2:	8b 7f       	andi	r24, 0xFB	; 251
    48f4:	8c 93       	st	X, r24
        CLR_BIT(UCSRC,UCSRB_UCSZ2);
    48f6:	a0 e4       	ldi	r26, 0x40	; 64
    48f8:	b0 e0       	ldi	r27, 0x00	; 0
    48fa:	e0 e4       	ldi	r30, 0x40	; 64
    48fc:	f0 e0       	ldi	r31, 0x00	; 0
    48fe:	80 81       	ld	r24, Z
    4900:	8b 7f       	andi	r24, 0xFB	; 251
    4902:	8c 93       	st	X, r24
    4904:	57 c0       	rjmp	.+174    	; 0x49b4 <UART_Init+0x23c>
        /* code */
        break;
    case _6_bit:
        CLR_BIT(UCSRC,UCSRC_UCSZ0);
    4906:	a0 e4       	ldi	r26, 0x40	; 64
    4908:	b0 e0       	ldi	r27, 0x00	; 0
    490a:	e0 e4       	ldi	r30, 0x40	; 64
    490c:	f0 e0       	ldi	r31, 0x00	; 0
    490e:	80 81       	ld	r24, Z
    4910:	8d 7f       	andi	r24, 0xFD	; 253
    4912:	8c 93       	st	X, r24
        CLR_BIT(UCSRC,UCSRC_UCSZ1);
    4914:	a0 e4       	ldi	r26, 0x40	; 64
    4916:	b0 e0       	ldi	r27, 0x00	; 0
    4918:	e0 e4       	ldi	r30, 0x40	; 64
    491a:	f0 e0       	ldi	r31, 0x00	; 0
    491c:	80 81       	ld	r24, Z
    491e:	8b 7f       	andi	r24, 0xFB	; 251
    4920:	8c 93       	st	X, r24
        CLR_BIT(UCSRC,UCSRB_UCSZ2);
    4922:	a0 e4       	ldi	r26, 0x40	; 64
    4924:	b0 e0       	ldi	r27, 0x00	; 0
    4926:	e0 e4       	ldi	r30, 0x40	; 64
    4928:	f0 e0       	ldi	r31, 0x00	; 0
    492a:	80 81       	ld	r24, Z
    492c:	8b 7f       	andi	r24, 0xFB	; 251
    492e:	8c 93       	st	X, r24
    4930:	41 c0       	rjmp	.+130    	; 0x49b4 <UART_Init+0x23c>
        /* code */
        break;
    case _7_bit:
        CLR_BIT(UCSRC,UCSRC_UCSZ0);
    4932:	a0 e4       	ldi	r26, 0x40	; 64
    4934:	b0 e0       	ldi	r27, 0x00	; 0
    4936:	e0 e4       	ldi	r30, 0x40	; 64
    4938:	f0 e0       	ldi	r31, 0x00	; 0
    493a:	80 81       	ld	r24, Z
    493c:	8d 7f       	andi	r24, 0xFD	; 253
    493e:	8c 93       	st	X, r24
        SET_BIT(UCSRC,UCSRC_UCSZ1);
    4940:	a0 e4       	ldi	r26, 0x40	; 64
    4942:	b0 e0       	ldi	r27, 0x00	; 0
    4944:	e0 e4       	ldi	r30, 0x40	; 64
    4946:	f0 e0       	ldi	r31, 0x00	; 0
    4948:	80 81       	ld	r24, Z
    494a:	84 60       	ori	r24, 0x04	; 4
    494c:	8c 93       	st	X, r24
        CLR_BIT(UCSRC,UCSRB_UCSZ2);
    494e:	a0 e4       	ldi	r26, 0x40	; 64
    4950:	b0 e0       	ldi	r27, 0x00	; 0
    4952:	e0 e4       	ldi	r30, 0x40	; 64
    4954:	f0 e0       	ldi	r31, 0x00	; 0
    4956:	80 81       	ld	r24, Z
    4958:	8b 7f       	andi	r24, 0xFB	; 251
    495a:	8c 93       	st	X, r24
    495c:	2b c0       	rjmp	.+86     	; 0x49b4 <UART_Init+0x23c>
        /* code */
        break;
    case _8_bit:
        SET_BIT(UCSRC,UCSRC_UCSZ0);
    495e:	a0 e4       	ldi	r26, 0x40	; 64
    4960:	b0 e0       	ldi	r27, 0x00	; 0
    4962:	e0 e4       	ldi	r30, 0x40	; 64
    4964:	f0 e0       	ldi	r31, 0x00	; 0
    4966:	80 81       	ld	r24, Z
    4968:	82 60       	ori	r24, 0x02	; 2
    496a:	8c 93       	st	X, r24
        SET_BIT(UCSRC,UCSRC_UCSZ1);
    496c:	a0 e4       	ldi	r26, 0x40	; 64
    496e:	b0 e0       	ldi	r27, 0x00	; 0
    4970:	e0 e4       	ldi	r30, 0x40	; 64
    4972:	f0 e0       	ldi	r31, 0x00	; 0
    4974:	80 81       	ld	r24, Z
    4976:	84 60       	ori	r24, 0x04	; 4
    4978:	8c 93       	st	X, r24
        CLR_BIT(UCSRC,UCSRB_UCSZ2);
    497a:	a0 e4       	ldi	r26, 0x40	; 64
    497c:	b0 e0       	ldi	r27, 0x00	; 0
    497e:	e0 e4       	ldi	r30, 0x40	; 64
    4980:	f0 e0       	ldi	r31, 0x00	; 0
    4982:	80 81       	ld	r24, Z
    4984:	8b 7f       	andi	r24, 0xFB	; 251
    4986:	8c 93       	st	X, r24
    4988:	15 c0       	rjmp	.+42     	; 0x49b4 <UART_Init+0x23c>
        /* code */
        break;
    case _9_bit:
        SET_BIT(UCSRC,UCSRC_UCSZ0);
    498a:	a0 e4       	ldi	r26, 0x40	; 64
    498c:	b0 e0       	ldi	r27, 0x00	; 0
    498e:	e0 e4       	ldi	r30, 0x40	; 64
    4990:	f0 e0       	ldi	r31, 0x00	; 0
    4992:	80 81       	ld	r24, Z
    4994:	82 60       	ori	r24, 0x02	; 2
    4996:	8c 93       	st	X, r24
        SET_BIT(UCSRC,UCSRC_UCSZ1);
    4998:	a0 e4       	ldi	r26, 0x40	; 64
    499a:	b0 e0       	ldi	r27, 0x00	; 0
    499c:	e0 e4       	ldi	r30, 0x40	; 64
    499e:	f0 e0       	ldi	r31, 0x00	; 0
    49a0:	80 81       	ld	r24, Z
    49a2:	84 60       	ori	r24, 0x04	; 4
    49a4:	8c 93       	st	X, r24
        SET_BIT(UCSRC,UCSRB_UCSZ2);
    49a6:	a0 e4       	ldi	r26, 0x40	; 64
    49a8:	b0 e0       	ldi	r27, 0x00	; 0
    49aa:	e0 e4       	ldi	r30, 0x40	; 64
    49ac:	f0 e0       	ldi	r31, 0x00	; 0
    49ae:	80 81       	ld	r24, Z
    49b0:	84 60       	ori	r24, 0x04	; 4
    49b2:	8c 93       	st	X, r24
        break;
    
    default:
        break;
    }
    switch (brate)
    49b4:	8d 81       	ldd	r24, Y+5	; 0x05
    49b6:	28 2f       	mov	r18, r24
    49b8:	30 e0       	ldi	r19, 0x00	; 0
    49ba:	3f 83       	std	Y+7, r19	; 0x07
    49bc:	2e 83       	std	Y+6, r18	; 0x06
    49be:	8e 81       	ldd	r24, Y+6	; 0x06
    49c0:	9f 81       	ldd	r25, Y+7	; 0x07
    49c2:	81 30       	cpi	r24, 0x01	; 1
    49c4:	91 05       	cpc	r25, r1
    49c6:	71 f0       	breq	.+28     	; 0x49e4 <UART_Init+0x26c>
    49c8:	2e 81       	ldd	r18, Y+6	; 0x06
    49ca:	3f 81       	ldd	r19, Y+7	; 0x07
    49cc:	22 30       	cpi	r18, 0x02	; 2
    49ce:	31 05       	cpc	r19, r1
    49d0:	71 f0       	breq	.+28     	; 0x49ee <UART_Init+0x276>
    49d2:	8e 81       	ldd	r24, Y+6	; 0x06
    49d4:	9f 81       	ldd	r25, Y+7	; 0x07
    49d6:	00 97       	sbiw	r24, 0x00	; 0
    49d8:	71 f4       	brne	.+28     	; 0x49f6 <UART_Init+0x27e>
    {
    case _2400:
        UBRRL=416;
    49da:	e9 e2       	ldi	r30, 0x29	; 41
    49dc:	f0 e0       	ldi	r31, 0x00	; 0
    49de:	80 ea       	ldi	r24, 0xA0	; 160
    49e0:	80 83       	st	Z, r24
    49e2:	09 c0       	rjmp	.+18     	; 0x49f6 <UART_Init+0x27e>
        /* code */
        break;
    case _4800:
        UBRRL=207;
    49e4:	e9 e2       	ldi	r30, 0x29	; 41
    49e6:	f0 e0       	ldi	r31, 0x00	; 0
    49e8:	8f ec       	ldi	r24, 0xCF	; 207
    49ea:	80 83       	st	Z, r24
    49ec:	04 c0       	rjmp	.+8      	; 0x49f6 <UART_Init+0x27e>
        /* code */
        break;
    case _9600:
        UBRRL=103;
    49ee:	e9 e2       	ldi	r30, 0x29	; 41
    49f0:	f0 e0       	ldi	r31, 0x00	; 0
    49f2:	87 e6       	ldi	r24, 0x67	; 103
    49f4:	80 83       	st	Z, r24
        break;
    
    default:
        break;
    }
    SET_BIT(UCSRB,UCSRB_RXEN);
    49f6:	aa e2       	ldi	r26, 0x2A	; 42
    49f8:	b0 e0       	ldi	r27, 0x00	; 0
    49fa:	ea e2       	ldi	r30, 0x2A	; 42
    49fc:	f0 e0       	ldi	r31, 0x00	; 0
    49fe:	80 81       	ld	r24, Z
    4a00:	80 61       	ori	r24, 0x10	; 16
    4a02:	8c 93       	st	X, r24
    SET_BIT(UCSRB,UCSRB_TXEN);
    4a04:	aa e2       	ldi	r26, 0x2A	; 42
    4a06:	b0 e0       	ldi	r27, 0x00	; 0
    4a08:	ea e2       	ldi	r30, 0x2A	; 42
    4a0a:	f0 e0       	ldi	r31, 0x00	; 0
    4a0c:	80 81       	ld	r24, Z
    4a0e:	88 60       	ori	r24, 0x08	; 8
    4a10:	8c 93       	st	X, r24
}
    4a12:	2b 96       	adiw	r28, 0x0b	; 11
    4a14:	0f b6       	in	r0, 0x3f	; 63
    4a16:	f8 94       	cli
    4a18:	de bf       	out	0x3e, r29	; 62
    4a1a:	0f be       	out	0x3f, r0	; 63
    4a1c:	cd bf       	out	0x3d, r28	; 61
    4a1e:	cf 91       	pop	r28
    4a20:	df 91       	pop	r29
    4a22:	0f 91       	pop	r16
    4a24:	08 95       	ret

00004a26 <UART_Send_Data>:


void UART_Send_Data(u8 data){
    4a26:	df 93       	push	r29
    4a28:	cf 93       	push	r28
    4a2a:	0f 92       	push	r0
    4a2c:	cd b7       	in	r28, 0x3d	; 61
    4a2e:	de b7       	in	r29, 0x3e	; 62
    4a30:	89 83       	std	Y+1, r24	; 0x01
    
    UDR=data;
    4a32:	ec e2       	ldi	r30, 0x2C	; 44
    4a34:	f0 e0       	ldi	r31, 0x00	; 0
    4a36:	89 81       	ldd	r24, Y+1	; 0x01
    4a38:	80 83       	st	Z, r24
    while (GET_BIT(UCSRA,UCSRA_TXC)==0);
    4a3a:	eb e2       	ldi	r30, 0x2B	; 43
    4a3c:	f0 e0       	ldi	r31, 0x00	; 0
    4a3e:	80 81       	ld	r24, Z
    4a40:	82 95       	swap	r24
    4a42:	86 95       	lsr	r24
    4a44:	86 95       	lsr	r24
    4a46:	83 70       	andi	r24, 0x03	; 3
    4a48:	88 2f       	mov	r24, r24
    4a4a:	90 e0       	ldi	r25, 0x00	; 0
    4a4c:	81 70       	andi	r24, 0x01	; 1
    4a4e:	90 70       	andi	r25, 0x00	; 0
    4a50:	00 97       	sbiw	r24, 0x00	; 0
    4a52:	99 f3       	breq	.-26     	; 0x4a3a <UART_Send_Data+0x14>
}
    4a54:	0f 90       	pop	r0
    4a56:	cf 91       	pop	r28
    4a58:	df 91       	pop	r29
    4a5a:	08 95       	ret

00004a5c <Recieve_Data>:

u8 Recieve_Data(){
    4a5c:	df 93       	push	r29
    4a5e:	cf 93       	push	r28
    4a60:	cd b7       	in	r28, 0x3d	; 61
    4a62:	de b7       	in	r29, 0x3e	; 62
    while (GET_BIT(UCSRA,UCSRA_RCX)==0);
    4a64:	eb e2       	ldi	r30, 0x2B	; 43
    4a66:	f0 e0       	ldi	r31, 0x00	; 0
    4a68:	80 81       	ld	r24, Z
    4a6a:	88 23       	and	r24, r24
    4a6c:	dc f7       	brge	.-10     	; 0x4a64 <Recieve_Data+0x8>
    return UDR;
    4a6e:	ec e2       	ldi	r30, 0x2C	; 44
    4a70:	f0 e0       	ldi	r31, 0x00	; 0
    4a72:	80 81       	ld	r24, Z
}
    4a74:	cf 91       	pop	r28
    4a76:	df 91       	pop	r29
    4a78:	08 95       	ret

00004a7a <WDT_enable>:
 */
#include "WDT.h"
#include "macros.h"
#include "std_types.h"

void WDT_enable(){
    4a7a:	df 93       	push	r29
    4a7c:	cf 93       	push	r28
    4a7e:	cd b7       	in	r28, 0x3d	; 61
    4a80:	de b7       	in	r29, 0x3e	; 62
    SET_BIT(WDTCR,WDTCR_WDE);
    4a82:	a1 e4       	ldi	r26, 0x41	; 65
    4a84:	b0 e0       	ldi	r27, 0x00	; 0
    4a86:	e1 e4       	ldi	r30, 0x41	; 65
    4a88:	f0 e0       	ldi	r31, 0x00	; 0
    4a8a:	80 81       	ld	r24, Z
    4a8c:	88 60       	ori	r24, 0x08	; 8
    4a8e:	8c 93       	st	X, r24
}
    4a90:	cf 91       	pop	r28
    4a92:	df 91       	pop	r29
    4a94:	08 95       	ret

00004a96 <WDT_disable>:
    t_0_26s,
    t_0_52s,
    t_1s,
    t_2_1s
*/
void WDT_disable(){
    4a96:	df 93       	push	r29
    4a98:	cf 93       	push	r28
    4a9a:	cd b7       	in	r28, 0x3d	; 61
    4a9c:	de b7       	in	r29, 0x3e	; 62
    WDTCR=0b00001100;
    4a9e:	e1 e4       	ldi	r30, 0x41	; 65
    4aa0:	f0 e0       	ldi	r31, 0x00	; 0
    4aa2:	8c e0       	ldi	r24, 0x0C	; 12
    4aa4:	80 83       	st	Z, r24
    // WDTCR=0;
}
    4aa6:	cf 91       	pop	r28
    4aa8:	df 91       	pop	r29
    4aaa:	08 95       	ret

00004aac <WDT_SleepTime>:
void WDT_SleepTime(Prescale_Select ps){
    4aac:	df 93       	push	r29
    4aae:	cf 93       	push	r28
    4ab0:	00 d0       	rcall	.+0      	; 0x4ab2 <WDT_SleepTime+0x6>
    4ab2:	0f 92       	push	r0
    4ab4:	cd b7       	in	r28, 0x3d	; 61
    4ab6:	de b7       	in	r29, 0x3e	; 62
    4ab8:	89 83       	std	Y+1, r24	; 0x01
    switch (ps)
    4aba:	89 81       	ldd	r24, Y+1	; 0x01
    4abc:	28 2f       	mov	r18, r24
    4abe:	30 e0       	ldi	r19, 0x00	; 0
    4ac0:	3b 83       	std	Y+3, r19	; 0x03
    4ac2:	2a 83       	std	Y+2, r18	; 0x02
    4ac4:	8a 81       	ldd	r24, Y+2	; 0x02
    4ac6:	9b 81       	ldd	r25, Y+3	; 0x03
    4ac8:	83 30       	cpi	r24, 0x03	; 3
    4aca:	91 05       	cpc	r25, r1
    4acc:	09 f4       	brne	.+2      	; 0x4ad0 <WDT_SleepTime+0x24>
    4ace:	70 c0       	rjmp	.+224    	; 0x4bb0 <WDT_SleepTime+0x104>
    4ad0:	2a 81       	ldd	r18, Y+2	; 0x02
    4ad2:	3b 81       	ldd	r19, Y+3	; 0x03
    4ad4:	24 30       	cpi	r18, 0x04	; 4
    4ad6:	31 05       	cpc	r19, r1
    4ad8:	84 f4       	brge	.+32     	; 0x4afa <WDT_SleepTime+0x4e>
    4ada:	8a 81       	ldd	r24, Y+2	; 0x02
    4adc:	9b 81       	ldd	r25, Y+3	; 0x03
    4ade:	81 30       	cpi	r24, 0x01	; 1
    4ae0:	91 05       	cpc	r25, r1
    4ae2:	d1 f1       	breq	.+116    	; 0x4b58 <WDT_SleepTime+0xac>
    4ae4:	2a 81       	ldd	r18, Y+2	; 0x02
    4ae6:	3b 81       	ldd	r19, Y+3	; 0x03
    4ae8:	22 30       	cpi	r18, 0x02	; 2
    4aea:	31 05       	cpc	r19, r1
    4aec:	0c f0       	brlt	.+2      	; 0x4af0 <WDT_SleepTime+0x44>
    4aee:	4a c0       	rjmp	.+148    	; 0x4b84 <WDT_SleepTime+0xd8>
    4af0:	8a 81       	ldd	r24, Y+2	; 0x02
    4af2:	9b 81       	ldd	r25, Y+3	; 0x03
    4af4:	00 97       	sbiw	r24, 0x00	; 0
    4af6:	d1 f0       	breq	.+52     	; 0x4b2c <WDT_SleepTime+0x80>
    4af8:	c9 c0       	rjmp	.+402    	; 0x4c8c <WDT_SleepTime+0x1e0>
    4afa:	2a 81       	ldd	r18, Y+2	; 0x02
    4afc:	3b 81       	ldd	r19, Y+3	; 0x03
    4afe:	25 30       	cpi	r18, 0x05	; 5
    4b00:	31 05       	cpc	r19, r1
    4b02:	09 f4       	brne	.+2      	; 0x4b06 <WDT_SleepTime+0x5a>
    4b04:	81 c0       	rjmp	.+258    	; 0x4c08 <WDT_SleepTime+0x15c>
    4b06:	8a 81       	ldd	r24, Y+2	; 0x02
    4b08:	9b 81       	ldd	r25, Y+3	; 0x03
    4b0a:	85 30       	cpi	r24, 0x05	; 5
    4b0c:	91 05       	cpc	r25, r1
    4b0e:	0c f4       	brge	.+2      	; 0x4b12 <WDT_SleepTime+0x66>
    4b10:	65 c0       	rjmp	.+202    	; 0x4bdc <WDT_SleepTime+0x130>
    4b12:	2a 81       	ldd	r18, Y+2	; 0x02
    4b14:	3b 81       	ldd	r19, Y+3	; 0x03
    4b16:	26 30       	cpi	r18, 0x06	; 6
    4b18:	31 05       	cpc	r19, r1
    4b1a:	09 f4       	brne	.+2      	; 0x4b1e <WDT_SleepTime+0x72>
    4b1c:	8b c0       	rjmp	.+278    	; 0x4c34 <WDT_SleepTime+0x188>
    4b1e:	8a 81       	ldd	r24, Y+2	; 0x02
    4b20:	9b 81       	ldd	r25, Y+3	; 0x03
    4b22:	87 30       	cpi	r24, 0x07	; 7
    4b24:	91 05       	cpc	r25, r1
    4b26:	09 f4       	brne	.+2      	; 0x4b2a <WDT_SleepTime+0x7e>
    4b28:	9b c0       	rjmp	.+310    	; 0x4c60 <WDT_SleepTime+0x1b4>
    4b2a:	b0 c0       	rjmp	.+352    	; 0x4c8c <WDT_SleepTime+0x1e0>
    {
    case WDT_t_16ms :
        CLR_BIT(WDTCR,WDTCR_WDP0);
    4b2c:	a1 e4       	ldi	r26, 0x41	; 65
    4b2e:	b0 e0       	ldi	r27, 0x00	; 0
    4b30:	e1 e4       	ldi	r30, 0x41	; 65
    4b32:	f0 e0       	ldi	r31, 0x00	; 0
    4b34:	80 81       	ld	r24, Z
    4b36:	8e 7f       	andi	r24, 0xFE	; 254
    4b38:	8c 93       	st	X, r24
        CLR_BIT(WDTCR,WDTCR_WDP1);
    4b3a:	a1 e4       	ldi	r26, 0x41	; 65
    4b3c:	b0 e0       	ldi	r27, 0x00	; 0
    4b3e:	e1 e4       	ldi	r30, 0x41	; 65
    4b40:	f0 e0       	ldi	r31, 0x00	; 0
    4b42:	80 81       	ld	r24, Z
    4b44:	8d 7f       	andi	r24, 0xFD	; 253
    4b46:	8c 93       	st	X, r24
        CLR_BIT(WDTCR,WDTCR_WDP2);
    4b48:	a1 e4       	ldi	r26, 0x41	; 65
    4b4a:	b0 e0       	ldi	r27, 0x00	; 0
    4b4c:	e1 e4       	ldi	r30, 0x41	; 65
    4b4e:	f0 e0       	ldi	r31, 0x00	; 0
    4b50:	80 81       	ld	r24, Z
    4b52:	8b 7f       	andi	r24, 0xFB	; 251
    4b54:	8c 93       	st	X, r24
    4b56:	af c0       	rjmp	.+350    	; 0x4cb6 <WDT_SleepTime+0x20a>
        /* code */
        break;
    case WDT_t_32_5ms :
        SET_BIT(WDTCR,WDTCR_WDP0);
    4b58:	a1 e4       	ldi	r26, 0x41	; 65
    4b5a:	b0 e0       	ldi	r27, 0x00	; 0
    4b5c:	e1 e4       	ldi	r30, 0x41	; 65
    4b5e:	f0 e0       	ldi	r31, 0x00	; 0
    4b60:	80 81       	ld	r24, Z
    4b62:	81 60       	ori	r24, 0x01	; 1
    4b64:	8c 93       	st	X, r24
        CLR_BIT(WDTCR,WDTCR_WDP1);
    4b66:	a1 e4       	ldi	r26, 0x41	; 65
    4b68:	b0 e0       	ldi	r27, 0x00	; 0
    4b6a:	e1 e4       	ldi	r30, 0x41	; 65
    4b6c:	f0 e0       	ldi	r31, 0x00	; 0
    4b6e:	80 81       	ld	r24, Z
    4b70:	8d 7f       	andi	r24, 0xFD	; 253
    4b72:	8c 93       	st	X, r24
        CLR_BIT(WDTCR,WDTCR_WDP2);
    4b74:	a1 e4       	ldi	r26, 0x41	; 65
    4b76:	b0 e0       	ldi	r27, 0x00	; 0
    4b78:	e1 e4       	ldi	r30, 0x41	; 65
    4b7a:	f0 e0       	ldi	r31, 0x00	; 0
    4b7c:	80 81       	ld	r24, Z
    4b7e:	8b 7f       	andi	r24, 0xFB	; 251
    4b80:	8c 93       	st	X, r24
    4b82:	99 c0       	rjmp	.+306    	; 0x4cb6 <WDT_SleepTime+0x20a>
        /* code */
        break;
    case WDT_t_65_ms :
        CLR_BIT(WDTCR,WDTCR_WDP0);
    4b84:	a1 e4       	ldi	r26, 0x41	; 65
    4b86:	b0 e0       	ldi	r27, 0x00	; 0
    4b88:	e1 e4       	ldi	r30, 0x41	; 65
    4b8a:	f0 e0       	ldi	r31, 0x00	; 0
    4b8c:	80 81       	ld	r24, Z
    4b8e:	8e 7f       	andi	r24, 0xFE	; 254
    4b90:	8c 93       	st	X, r24
        SET_BIT(WDTCR,WDTCR_WDP1);
    4b92:	a1 e4       	ldi	r26, 0x41	; 65
    4b94:	b0 e0       	ldi	r27, 0x00	; 0
    4b96:	e1 e4       	ldi	r30, 0x41	; 65
    4b98:	f0 e0       	ldi	r31, 0x00	; 0
    4b9a:	80 81       	ld	r24, Z
    4b9c:	82 60       	ori	r24, 0x02	; 2
    4b9e:	8c 93       	st	X, r24
        CLR_BIT(WDTCR,WDTCR_WDP2);
    4ba0:	a1 e4       	ldi	r26, 0x41	; 65
    4ba2:	b0 e0       	ldi	r27, 0x00	; 0
    4ba4:	e1 e4       	ldi	r30, 0x41	; 65
    4ba6:	f0 e0       	ldi	r31, 0x00	; 0
    4ba8:	80 81       	ld	r24, Z
    4baa:	8b 7f       	andi	r24, 0xFB	; 251
    4bac:	8c 93       	st	X, r24
    4bae:	83 c0       	rjmp	.+262    	; 0x4cb6 <WDT_SleepTime+0x20a>
        /* code */
        break;
    case WDT_t_0_13s :
        SET_BIT(WDTCR,WDTCR_WDP0);
    4bb0:	a1 e4       	ldi	r26, 0x41	; 65
    4bb2:	b0 e0       	ldi	r27, 0x00	; 0
    4bb4:	e1 e4       	ldi	r30, 0x41	; 65
    4bb6:	f0 e0       	ldi	r31, 0x00	; 0
    4bb8:	80 81       	ld	r24, Z
    4bba:	81 60       	ori	r24, 0x01	; 1
    4bbc:	8c 93       	st	X, r24
        SET_BIT(WDTCR,WDTCR_WDP1);
    4bbe:	a1 e4       	ldi	r26, 0x41	; 65
    4bc0:	b0 e0       	ldi	r27, 0x00	; 0
    4bc2:	e1 e4       	ldi	r30, 0x41	; 65
    4bc4:	f0 e0       	ldi	r31, 0x00	; 0
    4bc6:	80 81       	ld	r24, Z
    4bc8:	82 60       	ori	r24, 0x02	; 2
    4bca:	8c 93       	st	X, r24
        CLR_BIT(WDTCR,WDTCR_WDP2);
    4bcc:	a1 e4       	ldi	r26, 0x41	; 65
    4bce:	b0 e0       	ldi	r27, 0x00	; 0
    4bd0:	e1 e4       	ldi	r30, 0x41	; 65
    4bd2:	f0 e0       	ldi	r31, 0x00	; 0
    4bd4:	80 81       	ld	r24, Z
    4bd6:	8b 7f       	andi	r24, 0xFB	; 251
    4bd8:	8c 93       	st	X, r24
    4bda:	6d c0       	rjmp	.+218    	; 0x4cb6 <WDT_SleepTime+0x20a>
        /* code */
        break;
    case WDT_t_0_26s :
        CLR_BIT(WDTCR,WDTCR_WDP0);
    4bdc:	a1 e4       	ldi	r26, 0x41	; 65
    4bde:	b0 e0       	ldi	r27, 0x00	; 0
    4be0:	e1 e4       	ldi	r30, 0x41	; 65
    4be2:	f0 e0       	ldi	r31, 0x00	; 0
    4be4:	80 81       	ld	r24, Z
    4be6:	8e 7f       	andi	r24, 0xFE	; 254
    4be8:	8c 93       	st	X, r24
        CLR_BIT(WDTCR,WDTCR_WDP1);
    4bea:	a1 e4       	ldi	r26, 0x41	; 65
    4bec:	b0 e0       	ldi	r27, 0x00	; 0
    4bee:	e1 e4       	ldi	r30, 0x41	; 65
    4bf0:	f0 e0       	ldi	r31, 0x00	; 0
    4bf2:	80 81       	ld	r24, Z
    4bf4:	8d 7f       	andi	r24, 0xFD	; 253
    4bf6:	8c 93       	st	X, r24
        SET_BIT(WDTCR,WDTCR_WDP2);
    4bf8:	a1 e4       	ldi	r26, 0x41	; 65
    4bfa:	b0 e0       	ldi	r27, 0x00	; 0
    4bfc:	e1 e4       	ldi	r30, 0x41	; 65
    4bfe:	f0 e0       	ldi	r31, 0x00	; 0
    4c00:	80 81       	ld	r24, Z
    4c02:	84 60       	ori	r24, 0x04	; 4
    4c04:	8c 93       	st	X, r24
    4c06:	57 c0       	rjmp	.+174    	; 0x4cb6 <WDT_SleepTime+0x20a>
        /* code */
        break;
    case WDT_t_0_52s :
        SET_BIT(WDTCR,WDTCR_WDP0);
    4c08:	a1 e4       	ldi	r26, 0x41	; 65
    4c0a:	b0 e0       	ldi	r27, 0x00	; 0
    4c0c:	e1 e4       	ldi	r30, 0x41	; 65
    4c0e:	f0 e0       	ldi	r31, 0x00	; 0
    4c10:	80 81       	ld	r24, Z
    4c12:	81 60       	ori	r24, 0x01	; 1
    4c14:	8c 93       	st	X, r24
        CLR_BIT(WDTCR,WDTCR_WDP1);
    4c16:	a1 e4       	ldi	r26, 0x41	; 65
    4c18:	b0 e0       	ldi	r27, 0x00	; 0
    4c1a:	e1 e4       	ldi	r30, 0x41	; 65
    4c1c:	f0 e0       	ldi	r31, 0x00	; 0
    4c1e:	80 81       	ld	r24, Z
    4c20:	8d 7f       	andi	r24, 0xFD	; 253
    4c22:	8c 93       	st	X, r24
        SET_BIT(WDTCR,WDTCR_WDP2);
    4c24:	a1 e4       	ldi	r26, 0x41	; 65
    4c26:	b0 e0       	ldi	r27, 0x00	; 0
    4c28:	e1 e4       	ldi	r30, 0x41	; 65
    4c2a:	f0 e0       	ldi	r31, 0x00	; 0
    4c2c:	80 81       	ld	r24, Z
    4c2e:	84 60       	ori	r24, 0x04	; 4
    4c30:	8c 93       	st	X, r24
    4c32:	41 c0       	rjmp	.+130    	; 0x4cb6 <WDT_SleepTime+0x20a>
        /* code */
        break;
    case WDT_t_1s :
        CLR_BIT(WDTCR,WDTCR_WDP0);
    4c34:	a1 e4       	ldi	r26, 0x41	; 65
    4c36:	b0 e0       	ldi	r27, 0x00	; 0
    4c38:	e1 e4       	ldi	r30, 0x41	; 65
    4c3a:	f0 e0       	ldi	r31, 0x00	; 0
    4c3c:	80 81       	ld	r24, Z
    4c3e:	8e 7f       	andi	r24, 0xFE	; 254
    4c40:	8c 93       	st	X, r24
        SET_BIT(WDTCR,WDTCR_WDP1);
    4c42:	a1 e4       	ldi	r26, 0x41	; 65
    4c44:	b0 e0       	ldi	r27, 0x00	; 0
    4c46:	e1 e4       	ldi	r30, 0x41	; 65
    4c48:	f0 e0       	ldi	r31, 0x00	; 0
    4c4a:	80 81       	ld	r24, Z
    4c4c:	82 60       	ori	r24, 0x02	; 2
    4c4e:	8c 93       	st	X, r24
        SET_BIT(WDTCR,WDTCR_WDP2);
    4c50:	a1 e4       	ldi	r26, 0x41	; 65
    4c52:	b0 e0       	ldi	r27, 0x00	; 0
    4c54:	e1 e4       	ldi	r30, 0x41	; 65
    4c56:	f0 e0       	ldi	r31, 0x00	; 0
    4c58:	80 81       	ld	r24, Z
    4c5a:	84 60       	ori	r24, 0x04	; 4
    4c5c:	8c 93       	st	X, r24
    4c5e:	2b c0       	rjmp	.+86     	; 0x4cb6 <WDT_SleepTime+0x20a>
        /* code */
        break;
    case WDT_t_2_1s :
        SET_BIT(WDTCR,WDTCR_WDP0);
    4c60:	a1 e4       	ldi	r26, 0x41	; 65
    4c62:	b0 e0       	ldi	r27, 0x00	; 0
    4c64:	e1 e4       	ldi	r30, 0x41	; 65
    4c66:	f0 e0       	ldi	r31, 0x00	; 0
    4c68:	80 81       	ld	r24, Z
    4c6a:	81 60       	ori	r24, 0x01	; 1
    4c6c:	8c 93       	st	X, r24
        SET_BIT(WDTCR,WDTCR_WDP1);
    4c6e:	a1 e4       	ldi	r26, 0x41	; 65
    4c70:	b0 e0       	ldi	r27, 0x00	; 0
    4c72:	e1 e4       	ldi	r30, 0x41	; 65
    4c74:	f0 e0       	ldi	r31, 0x00	; 0
    4c76:	80 81       	ld	r24, Z
    4c78:	82 60       	ori	r24, 0x02	; 2
    4c7a:	8c 93       	st	X, r24
        SET_BIT(WDTCR,WDTCR_WDP2);
    4c7c:	a1 e4       	ldi	r26, 0x41	; 65
    4c7e:	b0 e0       	ldi	r27, 0x00	; 0
    4c80:	e1 e4       	ldi	r30, 0x41	; 65
    4c82:	f0 e0       	ldi	r31, 0x00	; 0
    4c84:	80 81       	ld	r24, Z
    4c86:	84 60       	ori	r24, 0x04	; 4
    4c88:	8c 93       	st	X, r24
    4c8a:	15 c0       	rjmp	.+42     	; 0x4cb6 <WDT_SleepTime+0x20a>
        /* code */
        break;
    
    
    default:
        CLR_BIT(WDTCR,WDTCR_WDP0);
    4c8c:	a1 e4       	ldi	r26, 0x41	; 65
    4c8e:	b0 e0       	ldi	r27, 0x00	; 0
    4c90:	e1 e4       	ldi	r30, 0x41	; 65
    4c92:	f0 e0       	ldi	r31, 0x00	; 0
    4c94:	80 81       	ld	r24, Z
    4c96:	8e 7f       	andi	r24, 0xFE	; 254
    4c98:	8c 93       	st	X, r24
        CLR_BIT(WDTCR,WDTCR_WDP1);
    4c9a:	a1 e4       	ldi	r26, 0x41	; 65
    4c9c:	b0 e0       	ldi	r27, 0x00	; 0
    4c9e:	e1 e4       	ldi	r30, 0x41	; 65
    4ca0:	f0 e0       	ldi	r31, 0x00	; 0
    4ca2:	80 81       	ld	r24, Z
    4ca4:	8d 7f       	andi	r24, 0xFD	; 253
    4ca6:	8c 93       	st	X, r24
        CLR_BIT(WDTCR,WDTCR_WDP2);
    4ca8:	a1 e4       	ldi	r26, 0x41	; 65
    4caa:	b0 e0       	ldi	r27, 0x00	; 0
    4cac:	e1 e4       	ldi	r30, 0x41	; 65
    4cae:	f0 e0       	ldi	r31, 0x00	; 0
    4cb0:	80 81       	ld	r24, Z
    4cb2:	8b 7f       	andi	r24, 0xFB	; 251
    4cb4:	8c 93       	st	X, r24
        break;
    }
}
    4cb6:	0f 90       	pop	r0
    4cb8:	0f 90       	pop	r0
    4cba:	0f 90       	pop	r0
    4cbc:	cf 91       	pop	r28
    4cbe:	df 91       	pop	r29
    4cc0:	08 95       	ret

00004cc2 <Adc_Handler>:

 #define APP WITH_INT

 #if (APP == WITH_INT)
 u16 result = 0;
 void Adc_Handler (u16 res) {
    4cc2:	df 93       	push	r29
    4cc4:	cf 93       	push	r28
    4cc6:	00 d0       	rcall	.+0      	; 0x4cc8 <Adc_Handler+0x6>
    4cc8:	cd b7       	in	r28, 0x3d	; 61
    4cca:	de b7       	in	r29, 0x3e	; 62
    4ccc:	9a 83       	std	Y+2, r25	; 0x02
    4cce:	89 83       	std	Y+1, r24	; 0x01
 	result = res;
    4cd0:	89 81       	ldd	r24, Y+1	; 0x01
    4cd2:	9a 81       	ldd	r25, Y+2	; 0x02
    4cd4:	90 93 87 01 	sts	0x0187, r25
    4cd8:	80 93 86 01 	sts	0x0186, r24
 }
    4cdc:	0f 90       	pop	r0
    4cde:	0f 90       	pop	r0
    4ce0:	cf 91       	pop	r28
    4ce2:	df 91       	pop	r29
    4ce4:	08 95       	ret

00004ce6 <main>:
 int main (void) {
    4ce6:	df 93       	push	r29
    4ce8:	cf 93       	push	r28
    4cea:	cd b7       	in	r28, 0x3d	; 61
    4cec:	de b7       	in	r29, 0x3e	; 62
    4cee:	60 97       	sbiw	r28, 0x10	; 16
    4cf0:	0f b6       	in	r0, 0x3f	; 63
    4cf2:	f8 94       	cli
    4cf4:	de bf       	out	0x3e, r29	; 62
    4cf6:	0f be       	out	0x3f, r0	; 63
    4cf8:	cd bf       	out	0x3d, r28	; 61
 	LCD_Init();
    4cfa:	0e 94 41 1d 	call	0x3a82	; 0x3a82 <LCD_Init>

 	Adc_Init();
    4cfe:	0e 94 9e 06 	call	0xd3c	; 0xd3c <Adc_Init>
 	DIO_SetPinMode(DIO_PORTA, DIO_PIN0, DIO_INPUT_FLOATING);
    4d02:	80 e0       	ldi	r24, 0x00	; 0
    4d04:	60 e0       	ldi	r22, 0x00	; 0
    4d06:	40 e0       	ldi	r20, 0x00	; 0
    4d08:	0e 94 37 09 	call	0x126e	; 0x126e <DIO_SetPinMode>
 	DIO_SetPinMode(DIO_PORTD, DIO_PIN0, DIO_OUTPUT);
    4d0c:	83 e0       	ldi	r24, 0x03	; 3
    4d0e:	60 e0       	ldi	r22, 0x00	; 0
    4d10:	42 e0       	ldi	r20, 0x02	; 2
    4d12:	0e 94 37 09 	call	0x126e	; 0x126e <DIO_SetPinMode>
 	DIO_SetPinMode(DIO_PORTD, DIO_PIN1, DIO_OUTPUT);
    4d16:	83 e0       	ldi	r24, 0x03	; 3
    4d18:	61 e0       	ldi	r22, 0x01	; 1
    4d1a:	42 e0       	ldi	r20, 0x02	; 2
    4d1c:	0e 94 37 09 	call	0x126e	; 0x126e <DIO_SetPinMode>
 	DIO_SetPinMode(DIO_PORTD, DIO_PIN3, DIO_OUTPUT);
    4d20:	83 e0       	ldi	r24, 0x03	; 3
    4d22:	63 e0       	ldi	r22, 0x03	; 3
    4d24:	42 e0       	ldi	r20, 0x02	; 2
    4d26:	0e 94 37 09 	call	0x126e	; 0x126e <DIO_SetPinMode>
 	DIO_SetPinMode(DIO_PORTD, DIO_PIN2, DIO_OUTPUT);
    4d2a:	83 e0       	ldi	r24, 0x03	; 3
    4d2c:	62 e0       	ldi	r22, 0x02	; 2
    4d2e:	42 e0       	ldi	r20, 0x02	; 2
    4d30:	0e 94 37 09 	call	0x126e	; 0x126e <DIO_SetPinMode>

 	Adc_SetCallback(Adc_Handler);
    4d34:	81 e6       	ldi	r24, 0x61	; 97
    4d36:	96 e2       	ldi	r25, 0x26	; 38
    4d38:	0e 94 5f 07 	call	0xebe	; 0xebe <Adc_SetCallback>
 	while (1)
 	{
 		u16 milli_volt = result * (5000.0/1024);
    4d3c:	80 91 86 01 	lds	r24, 0x0186
    4d40:	90 91 87 01 	lds	r25, 0x0187
    4d44:	cc 01       	movw	r24, r24
    4d46:	a0 e0       	ldi	r26, 0x00	; 0
    4d48:	b0 e0       	ldi	r27, 0x00	; 0
    4d4a:	bc 01       	movw	r22, r24
    4d4c:	cd 01       	movw	r24, r26
    4d4e:	0e 94 fd 03 	call	0x7fa	; 0x7fa <__floatunsisf>
    4d52:	dc 01       	movw	r26, r24
    4d54:	cb 01       	movw	r24, r22
    4d56:	bc 01       	movw	r22, r24
    4d58:	cd 01       	movw	r24, r26
    4d5a:	20 e0       	ldi	r18, 0x00	; 0
    4d5c:	30 e4       	ldi	r19, 0x40	; 64
    4d5e:	4c e9       	ldi	r20, 0x9C	; 156
    4d60:	50 e4       	ldi	r21, 0x40	; 64
    4d62:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    4d66:	dc 01       	movw	r26, r24
    4d68:	cb 01       	movw	r24, r22
    4d6a:	bc 01       	movw	r22, r24
    4d6c:	cd 01       	movw	r24, r26
    4d6e:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    4d72:	dc 01       	movw	r26, r24
    4d74:	cb 01       	movw	r24, r22
    4d76:	98 8b       	std	Y+16, r25	; 0x10
    4d78:	8f 87       	std	Y+15, r24	; 0x0f
 		LCD_SetCursorPosition(0,0);
    4d7a:	80 e0       	ldi	r24, 0x00	; 0
    4d7c:	60 e0       	ldi	r22, 0x00	; 0
    4d7e:	0e 94 28 1e 	call	0x3c50	; 0x3c50 <LCD_SetCursorPosition>
 		LCD_DisplayString((u8*)"Temp = ");
    4d82:	8a e6       	ldi	r24, 0x6A	; 106
    4d84:	90 e0       	ldi	r25, 0x00	; 0
    4d86:	0e 94 ff 1d 	call	0x3bfe	; 0x3bfe <LCD_DisplayString>
 		LCD_DisplayNumber(milli_volt/10); // 0 .. 1023
    4d8a:	8f 85       	ldd	r24, Y+15	; 0x0f
    4d8c:	98 89       	ldd	r25, Y+16	; 0x10
    4d8e:	2a e0       	ldi	r18, 0x0A	; 10
    4d90:	30 e0       	ldi	r19, 0x00	; 0
    4d92:	b9 01       	movw	r22, r18
    4d94:	0e 94 be 27 	call	0x4f7c	; 0x4f7c <__udivmodhi4>
    4d98:	cb 01       	movw	r24, r22
    4d9a:	0e 94 4c 1e 	call	0x3c98	; 0x3c98 <LCD_DisplayNumber>
 		if((milli_volt/10) > 40)
    4d9e:	8f 85       	ldd	r24, Y+15	; 0x0f
    4da0:	98 89       	ldd	r25, Y+16	; 0x10
    4da2:	21 e0       	ldi	r18, 0x01	; 1
    4da4:	8a 39       	cpi	r24, 0x9A	; 154
    4da6:	92 07       	cpc	r25, r18
    4da8:	a8 f0       	brcs	.+42     	; 0x4dd4 <main+0xee>
 		{
 			DIO_SetPinLevel(DIO_PORTD,DIO_PIN0,DIO_HIGH);
    4daa:	83 e0       	ldi	r24, 0x03	; 3
    4dac:	60 e0       	ldi	r22, 0x00	; 0
    4dae:	41 e0       	ldi	r20, 0x01	; 1
    4db0:	0e 94 45 0c 	call	0x188a	; 0x188a <DIO_SetPinLevel>
 			DIO_SetPinLevel(DIO_PORTD,DIO_PIN3,DIO_HIGH);
    4db4:	83 e0       	ldi	r24, 0x03	; 3
    4db6:	63 e0       	ldi	r22, 0x03	; 3
    4db8:	41 e0       	ldi	r20, 0x01	; 1
    4dba:	0e 94 45 0c 	call	0x188a	; 0x188a <DIO_SetPinLevel>

 			DIO_SetPinLevel(DIO_PORTD,DIO_PIN1,DIO_LOW);
    4dbe:	83 e0       	ldi	r24, 0x03	; 3
    4dc0:	61 e0       	ldi	r22, 0x01	; 1
    4dc2:	40 e0       	ldi	r20, 0x00	; 0
    4dc4:	0e 94 45 0c 	call	0x188a	; 0x188a <DIO_SetPinLevel>
 			DIO_SetPinLevel(DIO_PORTD,DIO_PIN2,DIO_LOW);
    4dc8:	83 e0       	ldi	r24, 0x03	; 3
    4dca:	62 e0       	ldi	r22, 0x02	; 2
    4dcc:	40 e0       	ldi	r20, 0x00	; 0
    4dce:	0e 94 45 0c 	call	0x188a	; 0x188a <DIO_SetPinLevel>
    4dd2:	2f c0       	rjmp	.+94     	; 0x4e32 <main+0x14c>

 		}else if((milli_volt/10) < 34){
    4dd4:	8f 85       	ldd	r24, Y+15	; 0x0f
    4dd6:	98 89       	ldd	r25, Y+16	; 0x10
    4dd8:	21 e0       	ldi	r18, 0x01	; 1
    4dda:	84 35       	cpi	r24, 0x54	; 84
    4ddc:	92 07       	cpc	r25, r18
    4dde:	a8 f4       	brcc	.+42     	; 0x4e0a <main+0x124>
 			DIO_SetPinLevel(DIO_PORTD,DIO_PIN1,DIO_HIGH);
    4de0:	83 e0       	ldi	r24, 0x03	; 3
    4de2:	61 e0       	ldi	r22, 0x01	; 1
    4de4:	41 e0       	ldi	r20, 0x01	; 1
    4de6:	0e 94 45 0c 	call	0x188a	; 0x188a <DIO_SetPinLevel>
 			DIO_SetPinLevel(DIO_PORTD,DIO_PIN2,DIO_HIGH);
    4dea:	83 e0       	ldi	r24, 0x03	; 3
    4dec:	62 e0       	ldi	r22, 0x02	; 2
    4dee:	41 e0       	ldi	r20, 0x01	; 1
    4df0:	0e 94 45 0c 	call	0x188a	; 0x188a <DIO_SetPinLevel>

 			DIO_SetPinLevel(DIO_PORTD,DIO_PIN3,DIO_LOW);
    4df4:	83 e0       	ldi	r24, 0x03	; 3
    4df6:	63 e0       	ldi	r22, 0x03	; 3
    4df8:	40 e0       	ldi	r20, 0x00	; 0
    4dfa:	0e 94 45 0c 	call	0x188a	; 0x188a <DIO_SetPinLevel>
 			DIO_SetPinLevel(DIO_PORTD,DIO_PIN0,DIO_LOW);
    4dfe:	83 e0       	ldi	r24, 0x03	; 3
    4e00:	60 e0       	ldi	r22, 0x00	; 0
    4e02:	40 e0       	ldi	r20, 0x00	; 0
    4e04:	0e 94 45 0c 	call	0x188a	; 0x188a <DIO_SetPinLevel>
    4e08:	14 c0       	rjmp	.+40     	; 0x4e32 <main+0x14c>

 		}else{
 			DIO_SetPinLevel(DIO_PORTD,DIO_PIN2,DIO_LOW);
    4e0a:	83 e0       	ldi	r24, 0x03	; 3
    4e0c:	62 e0       	ldi	r22, 0x02	; 2
    4e0e:	40 e0       	ldi	r20, 0x00	; 0
    4e10:	0e 94 45 0c 	call	0x188a	; 0x188a <DIO_SetPinLevel>
 			DIO_SetPinLevel(DIO_PORTD,DIO_PIN3,DIO_LOW);
    4e14:	83 e0       	ldi	r24, 0x03	; 3
    4e16:	63 e0       	ldi	r22, 0x03	; 3
    4e18:	40 e0       	ldi	r20, 0x00	; 0
    4e1a:	0e 94 45 0c 	call	0x188a	; 0x188a <DIO_SetPinLevel>

 			DIO_SetPinLevel(DIO_PORTD,DIO_PIN0,DIO_LOW);
    4e1e:	83 e0       	ldi	r24, 0x03	; 3
    4e20:	60 e0       	ldi	r22, 0x00	; 0
    4e22:	40 e0       	ldi	r20, 0x00	; 0
    4e24:	0e 94 45 0c 	call	0x188a	; 0x188a <DIO_SetPinLevel>
 			DIO_SetPinLevel(DIO_PORTD,DIO_PIN1,DIO_LOW);
    4e28:	83 e0       	ldi	r24, 0x03	; 3
    4e2a:	61 e0       	ldi	r22, 0x01	; 1
    4e2c:	40 e0       	ldi	r20, 0x00	; 0
    4e2e:	0e 94 45 0c 	call	0x188a	; 0x188a <DIO_SetPinLevel>
 		}
 		LCD_DisplayString((u8*)" C        ");
    4e32:	82 e7       	ldi	r24, 0x72	; 114
    4e34:	90 e0       	ldi	r25, 0x00	; 0
    4e36:	0e 94 ff 1d 	call	0x3bfe	; 0x3bfe <LCD_DisplayString>
 		Adc_StartConversion(ADC_SINGLE_ADC0);
    4e3a:	80 e0       	ldi	r24, 0x00	; 0
    4e3c:	0e 94 df 06 	call	0xdbe	; 0xdbe <Adc_StartConversion>
    4e40:	80 e0       	ldi	r24, 0x00	; 0
    4e42:	90 e0       	ldi	r25, 0x00	; 0
    4e44:	aa ef       	ldi	r26, 0xFA	; 250
    4e46:	b3 e4       	ldi	r27, 0x43	; 67
    4e48:	8b 87       	std	Y+11, r24	; 0x0b
    4e4a:	9c 87       	std	Y+12, r25	; 0x0c
    4e4c:	ad 87       	std	Y+13, r26	; 0x0d
    4e4e:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    4e50:	6b 85       	ldd	r22, Y+11	; 0x0b
    4e52:	7c 85       	ldd	r23, Y+12	; 0x0c
    4e54:	8d 85       	ldd	r24, Y+13	; 0x0d
    4e56:	9e 85       	ldd	r25, Y+14	; 0x0e
    4e58:	20 e0       	ldi	r18, 0x00	; 0
    4e5a:	30 e0       	ldi	r19, 0x00	; 0
    4e5c:	4a ef       	ldi	r20, 0xFA	; 250
    4e5e:	54 e4       	ldi	r21, 0x44	; 68
    4e60:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    4e64:	dc 01       	movw	r26, r24
    4e66:	cb 01       	movw	r24, r22
    4e68:	8f 83       	std	Y+7, r24	; 0x07
    4e6a:	98 87       	std	Y+8, r25	; 0x08
    4e6c:	a9 87       	std	Y+9, r26	; 0x09
    4e6e:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    4e70:	6f 81       	ldd	r22, Y+7	; 0x07
    4e72:	78 85       	ldd	r23, Y+8	; 0x08
    4e74:	89 85       	ldd	r24, Y+9	; 0x09
    4e76:	9a 85       	ldd	r25, Y+10	; 0x0a
    4e78:	20 e0       	ldi	r18, 0x00	; 0
    4e7a:	30 e0       	ldi	r19, 0x00	; 0
    4e7c:	40 e8       	ldi	r20, 0x80	; 128
    4e7e:	5f e3       	ldi	r21, 0x3F	; 63
    4e80:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    4e84:	88 23       	and	r24, r24
    4e86:	2c f4       	brge	.+10     	; 0x4e92 <main+0x1ac>
		__ticks = 1;
    4e88:	81 e0       	ldi	r24, 0x01	; 1
    4e8a:	90 e0       	ldi	r25, 0x00	; 0
    4e8c:	9e 83       	std	Y+6, r25	; 0x06
    4e8e:	8d 83       	std	Y+5, r24	; 0x05
    4e90:	3f c0       	rjmp	.+126    	; 0x4f10 <main+0x22a>
	else if (__tmp > 65535)
    4e92:	6f 81       	ldd	r22, Y+7	; 0x07
    4e94:	78 85       	ldd	r23, Y+8	; 0x08
    4e96:	89 85       	ldd	r24, Y+9	; 0x09
    4e98:	9a 85       	ldd	r25, Y+10	; 0x0a
    4e9a:	20 e0       	ldi	r18, 0x00	; 0
    4e9c:	3f ef       	ldi	r19, 0xFF	; 255
    4e9e:	4f e7       	ldi	r20, 0x7F	; 127
    4ea0:	57 e4       	ldi	r21, 0x47	; 71
    4ea2:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    4ea6:	18 16       	cp	r1, r24
    4ea8:	4c f5       	brge	.+82     	; 0x4efc <main+0x216>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    4eaa:	6b 85       	ldd	r22, Y+11	; 0x0b
    4eac:	7c 85       	ldd	r23, Y+12	; 0x0c
    4eae:	8d 85       	ldd	r24, Y+13	; 0x0d
    4eb0:	9e 85       	ldd	r25, Y+14	; 0x0e
    4eb2:	20 e0       	ldi	r18, 0x00	; 0
    4eb4:	30 e0       	ldi	r19, 0x00	; 0
    4eb6:	40 e2       	ldi	r20, 0x20	; 32
    4eb8:	51 e4       	ldi	r21, 0x41	; 65
    4eba:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    4ebe:	dc 01       	movw	r26, r24
    4ec0:	cb 01       	movw	r24, r22
    4ec2:	bc 01       	movw	r22, r24
    4ec4:	cd 01       	movw	r24, r26
    4ec6:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    4eca:	dc 01       	movw	r26, r24
    4ecc:	cb 01       	movw	r24, r22
    4ece:	9e 83       	std	Y+6, r25	; 0x06
    4ed0:	8d 83       	std	Y+5, r24	; 0x05
    4ed2:	0f c0       	rjmp	.+30     	; 0x4ef2 <main+0x20c>
    4ed4:	88 ec       	ldi	r24, 0xC8	; 200
    4ed6:	90 e0       	ldi	r25, 0x00	; 0
    4ed8:	9c 83       	std	Y+4, r25	; 0x04
    4eda:	8b 83       	std	Y+3, r24	; 0x03
    4edc:	8b 81       	ldd	r24, Y+3	; 0x03
    4ede:	9c 81       	ldd	r25, Y+4	; 0x04
    4ee0:	01 97       	sbiw	r24, 0x01	; 1
    4ee2:	f1 f7       	brne	.-4      	; 0x4ee0 <main+0x1fa>
    4ee4:	9c 83       	std	Y+4, r25	; 0x04
    4ee6:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    4ee8:	8d 81       	ldd	r24, Y+5	; 0x05
    4eea:	9e 81       	ldd	r25, Y+6	; 0x06
    4eec:	01 97       	sbiw	r24, 0x01	; 1
    4eee:	9e 83       	std	Y+6, r25	; 0x06
    4ef0:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    4ef2:	8d 81       	ldd	r24, Y+5	; 0x05
    4ef4:	9e 81       	ldd	r25, Y+6	; 0x06
    4ef6:	00 97       	sbiw	r24, 0x00	; 0
    4ef8:	69 f7       	brne	.-38     	; 0x4ed4 <main+0x1ee>
    4efa:	20 cf       	rjmp	.-448    	; 0x4d3c <main+0x56>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    4efc:	6f 81       	ldd	r22, Y+7	; 0x07
    4efe:	78 85       	ldd	r23, Y+8	; 0x08
    4f00:	89 85       	ldd	r24, Y+9	; 0x09
    4f02:	9a 85       	ldd	r25, Y+10	; 0x0a
    4f04:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    4f08:	dc 01       	movw	r26, r24
    4f0a:	cb 01       	movw	r24, r22
    4f0c:	9e 83       	std	Y+6, r25	; 0x06
    4f0e:	8d 83       	std	Y+5, r24	; 0x05
    4f10:	8d 81       	ldd	r24, Y+5	; 0x05
    4f12:	9e 81       	ldd	r25, Y+6	; 0x06
    4f14:	9a 83       	std	Y+2, r25	; 0x02
    4f16:	89 83       	std	Y+1, r24	; 0x01
    4f18:	89 81       	ldd	r24, Y+1	; 0x01
    4f1a:	9a 81       	ldd	r25, Y+2	; 0x02
    4f1c:	01 97       	sbiw	r24, 0x01	; 1
    4f1e:	f1 f7       	brne	.-4      	; 0x4f1c <main+0x236>
    4f20:	9a 83       	std	Y+2, r25	; 0x02
    4f22:	89 83       	std	Y+1, r24	; 0x01
    4f24:	0b cf       	rjmp	.-490    	; 0x4d3c <main+0x56>

00004f26 <__mulsi3>:
    4f26:	62 9f       	mul	r22, r18
    4f28:	d0 01       	movw	r26, r0
    4f2a:	73 9f       	mul	r23, r19
    4f2c:	f0 01       	movw	r30, r0
    4f2e:	82 9f       	mul	r24, r18
    4f30:	e0 0d       	add	r30, r0
    4f32:	f1 1d       	adc	r31, r1
    4f34:	64 9f       	mul	r22, r20
    4f36:	e0 0d       	add	r30, r0
    4f38:	f1 1d       	adc	r31, r1
    4f3a:	92 9f       	mul	r25, r18
    4f3c:	f0 0d       	add	r31, r0
    4f3e:	83 9f       	mul	r24, r19
    4f40:	f0 0d       	add	r31, r0
    4f42:	74 9f       	mul	r23, r20
    4f44:	f0 0d       	add	r31, r0
    4f46:	65 9f       	mul	r22, r21
    4f48:	f0 0d       	add	r31, r0
    4f4a:	99 27       	eor	r25, r25
    4f4c:	72 9f       	mul	r23, r18
    4f4e:	b0 0d       	add	r27, r0
    4f50:	e1 1d       	adc	r30, r1
    4f52:	f9 1f       	adc	r31, r25
    4f54:	63 9f       	mul	r22, r19
    4f56:	b0 0d       	add	r27, r0
    4f58:	e1 1d       	adc	r30, r1
    4f5a:	f9 1f       	adc	r31, r25
    4f5c:	bd 01       	movw	r22, r26
    4f5e:	cf 01       	movw	r24, r30
    4f60:	11 24       	eor	r1, r1
    4f62:	08 95       	ret

00004f64 <__udivmodqi4>:
    4f64:	99 1b       	sub	r25, r25
    4f66:	79 e0       	ldi	r23, 0x09	; 9
    4f68:	04 c0       	rjmp	.+8      	; 0x4f72 <__udivmodqi4_ep>

00004f6a <__udivmodqi4_loop>:
    4f6a:	99 1f       	adc	r25, r25
    4f6c:	96 17       	cp	r25, r22
    4f6e:	08 f0       	brcs	.+2      	; 0x4f72 <__udivmodqi4_ep>
    4f70:	96 1b       	sub	r25, r22

00004f72 <__udivmodqi4_ep>:
    4f72:	88 1f       	adc	r24, r24
    4f74:	7a 95       	dec	r23
    4f76:	c9 f7       	brne	.-14     	; 0x4f6a <__udivmodqi4_loop>
    4f78:	80 95       	com	r24
    4f7a:	08 95       	ret

00004f7c <__udivmodhi4>:
    4f7c:	aa 1b       	sub	r26, r26
    4f7e:	bb 1b       	sub	r27, r27
    4f80:	51 e1       	ldi	r21, 0x11	; 17
    4f82:	07 c0       	rjmp	.+14     	; 0x4f92 <__udivmodhi4_ep>

00004f84 <__udivmodhi4_loop>:
    4f84:	aa 1f       	adc	r26, r26
    4f86:	bb 1f       	adc	r27, r27
    4f88:	a6 17       	cp	r26, r22
    4f8a:	b7 07       	cpc	r27, r23
    4f8c:	10 f0       	brcs	.+4      	; 0x4f92 <__udivmodhi4_ep>
    4f8e:	a6 1b       	sub	r26, r22
    4f90:	b7 0b       	sbc	r27, r23

00004f92 <__udivmodhi4_ep>:
    4f92:	88 1f       	adc	r24, r24
    4f94:	99 1f       	adc	r25, r25
    4f96:	5a 95       	dec	r21
    4f98:	a9 f7       	brne	.-22     	; 0x4f84 <__udivmodhi4_loop>
    4f9a:	80 95       	com	r24
    4f9c:	90 95       	com	r25
    4f9e:	bc 01       	movw	r22, r24
    4fa0:	cd 01       	movw	r24, r26
    4fa2:	08 95       	ret

00004fa4 <__udivmodsi4>:
    4fa4:	a1 e2       	ldi	r26, 0x21	; 33
    4fa6:	1a 2e       	mov	r1, r26
    4fa8:	aa 1b       	sub	r26, r26
    4faa:	bb 1b       	sub	r27, r27
    4fac:	fd 01       	movw	r30, r26
    4fae:	0d c0       	rjmp	.+26     	; 0x4fca <__udivmodsi4_ep>

00004fb0 <__udivmodsi4_loop>:
    4fb0:	aa 1f       	adc	r26, r26
    4fb2:	bb 1f       	adc	r27, r27
    4fb4:	ee 1f       	adc	r30, r30
    4fb6:	ff 1f       	adc	r31, r31
    4fb8:	a2 17       	cp	r26, r18
    4fba:	b3 07       	cpc	r27, r19
    4fbc:	e4 07       	cpc	r30, r20
    4fbe:	f5 07       	cpc	r31, r21
    4fc0:	20 f0       	brcs	.+8      	; 0x4fca <__udivmodsi4_ep>
    4fc2:	a2 1b       	sub	r26, r18
    4fc4:	b3 0b       	sbc	r27, r19
    4fc6:	e4 0b       	sbc	r30, r20
    4fc8:	f5 0b       	sbc	r31, r21

00004fca <__udivmodsi4_ep>:
    4fca:	66 1f       	adc	r22, r22
    4fcc:	77 1f       	adc	r23, r23
    4fce:	88 1f       	adc	r24, r24
    4fd0:	99 1f       	adc	r25, r25
    4fd2:	1a 94       	dec	r1
    4fd4:	69 f7       	brne	.-38     	; 0x4fb0 <__udivmodsi4_loop>
    4fd6:	60 95       	com	r22
    4fd8:	70 95       	com	r23
    4fda:	80 95       	com	r24
    4fdc:	90 95       	com	r25
    4fde:	9b 01       	movw	r18, r22
    4fe0:	ac 01       	movw	r20, r24
    4fe2:	bd 01       	movw	r22, r26
    4fe4:	cf 01       	movw	r24, r30
    4fe6:	08 95       	ret

00004fe8 <__divmodsi4>:
    4fe8:	97 fb       	bst	r25, 7
    4fea:	09 2e       	mov	r0, r25
    4fec:	05 26       	eor	r0, r21
    4fee:	0e d0       	rcall	.+28     	; 0x500c <__divmodsi4_neg1>
    4ff0:	57 fd       	sbrc	r21, 7
    4ff2:	04 d0       	rcall	.+8      	; 0x4ffc <__divmodsi4_neg2>
    4ff4:	d7 df       	rcall	.-82     	; 0x4fa4 <__udivmodsi4>
    4ff6:	0a d0       	rcall	.+20     	; 0x500c <__divmodsi4_neg1>
    4ff8:	00 1c       	adc	r0, r0
    4ffa:	38 f4       	brcc	.+14     	; 0x500a <__divmodsi4_exit>

00004ffc <__divmodsi4_neg2>:
    4ffc:	50 95       	com	r21
    4ffe:	40 95       	com	r20
    5000:	30 95       	com	r19
    5002:	21 95       	neg	r18
    5004:	3f 4f       	sbci	r19, 0xFF	; 255
    5006:	4f 4f       	sbci	r20, 0xFF	; 255
    5008:	5f 4f       	sbci	r21, 0xFF	; 255

0000500a <__divmodsi4_exit>:
    500a:	08 95       	ret

0000500c <__divmodsi4_neg1>:
    500c:	f6 f7       	brtc	.-4      	; 0x500a <__divmodsi4_exit>
    500e:	90 95       	com	r25
    5010:	80 95       	com	r24
    5012:	70 95       	com	r23
    5014:	61 95       	neg	r22
    5016:	7f 4f       	sbci	r23, 0xFF	; 255
    5018:	8f 4f       	sbci	r24, 0xFF	; 255
    501a:	9f 4f       	sbci	r25, 0xFF	; 255
    501c:	08 95       	ret

0000501e <__prologue_saves__>:
    501e:	2f 92       	push	r2
    5020:	3f 92       	push	r3
    5022:	4f 92       	push	r4
    5024:	5f 92       	push	r5
    5026:	6f 92       	push	r6
    5028:	7f 92       	push	r7
    502a:	8f 92       	push	r8
    502c:	9f 92       	push	r9
    502e:	af 92       	push	r10
    5030:	bf 92       	push	r11
    5032:	cf 92       	push	r12
    5034:	df 92       	push	r13
    5036:	ef 92       	push	r14
    5038:	ff 92       	push	r15
    503a:	0f 93       	push	r16
    503c:	1f 93       	push	r17
    503e:	cf 93       	push	r28
    5040:	df 93       	push	r29
    5042:	cd b7       	in	r28, 0x3d	; 61
    5044:	de b7       	in	r29, 0x3e	; 62
    5046:	ca 1b       	sub	r28, r26
    5048:	db 0b       	sbc	r29, r27
    504a:	0f b6       	in	r0, 0x3f	; 63
    504c:	f8 94       	cli
    504e:	de bf       	out	0x3e, r29	; 62
    5050:	0f be       	out	0x3f, r0	; 63
    5052:	cd bf       	out	0x3d, r28	; 61
    5054:	09 94       	ijmp

00005056 <__epilogue_restores__>:
    5056:	2a 88       	ldd	r2, Y+18	; 0x12
    5058:	39 88       	ldd	r3, Y+17	; 0x11
    505a:	48 88       	ldd	r4, Y+16	; 0x10
    505c:	5f 84       	ldd	r5, Y+15	; 0x0f
    505e:	6e 84       	ldd	r6, Y+14	; 0x0e
    5060:	7d 84       	ldd	r7, Y+13	; 0x0d
    5062:	8c 84       	ldd	r8, Y+12	; 0x0c
    5064:	9b 84       	ldd	r9, Y+11	; 0x0b
    5066:	aa 84       	ldd	r10, Y+10	; 0x0a
    5068:	b9 84       	ldd	r11, Y+9	; 0x09
    506a:	c8 84       	ldd	r12, Y+8	; 0x08
    506c:	df 80       	ldd	r13, Y+7	; 0x07
    506e:	ee 80       	ldd	r14, Y+6	; 0x06
    5070:	fd 80       	ldd	r15, Y+5	; 0x05
    5072:	0c 81       	ldd	r16, Y+4	; 0x04
    5074:	1b 81       	ldd	r17, Y+3	; 0x03
    5076:	aa 81       	ldd	r26, Y+2	; 0x02
    5078:	b9 81       	ldd	r27, Y+1	; 0x01
    507a:	ce 0f       	add	r28, r30
    507c:	d1 1d       	adc	r29, r1
    507e:	0f b6       	in	r0, 0x3f	; 63
    5080:	f8 94       	cli
    5082:	de bf       	out	0x3e, r29	; 62
    5084:	0f be       	out	0x3f, r0	; 63
    5086:	cd bf       	out	0x3d, r28	; 61
    5088:	ed 01       	movw	r28, r26
    508a:	08 95       	ret

0000508c <_exit>:
    508c:	f8 94       	cli

0000508e <__stop_program>:
    508e:	ff cf       	rjmp	.-2      	; 0x508e <__stop_program>
