
Drivers.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         0000395c  00000000  00000000  00000074  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .data         00000008  00800060  0000395c  000039d0  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  2 .stab         00002ae4  00000000  00000000  000039d8  2**2
                  CONTENTS, READONLY, DEBUGGING
  3 .stabstr      00000dbf  00000000  00000000  000064bc  2**0
                  CONTENTS, READONLY, DEBUGGING
  4 .debug_aranges 00000140  00000000  00000000  0000727b  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_pubnames 00000170  00000000  00000000  000073bb  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   00001c49  00000000  00000000  0000752b  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 00000eeb  00000000  00000000  00009174  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   00000dad  00000000  00000000  0000a05f  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  00000160  00000000  00000000  0000ae0c  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    0000028d  00000000  00000000  0000af6c  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    000007ce  00000000  00000000  0000b1f9  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 00000050  00000000  00000000  0000b9c7  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
       0:	0c 94 2a 00 	jmp	0x54	; 0x54 <__ctors_end>
       4:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
       8:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
       c:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
      10:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
      14:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
      18:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
      1c:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
      20:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
      24:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
      28:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
      2c:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
      30:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
      34:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
      38:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
      3c:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
      40:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
      44:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
      48:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
      4c:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
      50:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>

00000054 <__ctors_end>:
      54:	11 24       	eor	r1, r1
      56:	1f be       	out	0x3f, r1	; 63
      58:	cf e5       	ldi	r28, 0x5F	; 95
      5a:	d8 e0       	ldi	r29, 0x08	; 8
      5c:	de bf       	out	0x3e, r29	; 62
      5e:	cd bf       	out	0x3d, r28	; 61

00000060 <__do_copy_data>:
      60:	10 e0       	ldi	r17, 0x00	; 0
      62:	a0 e6       	ldi	r26, 0x60	; 96
      64:	b0 e0       	ldi	r27, 0x00	; 0
      66:	ec e5       	ldi	r30, 0x5C	; 92
      68:	f9 e3       	ldi	r31, 0x39	; 57
      6a:	02 c0       	rjmp	.+4      	; 0x70 <.do_copy_data_start>

0000006c <.do_copy_data_loop>:
      6c:	05 90       	lpm	r0, Z+
      6e:	0d 92       	st	X+, r0

00000070 <.do_copy_data_start>:
      70:	a8 36       	cpi	r26, 0x68	; 104
      72:	b1 07       	cpc	r27, r17
      74:	d9 f7       	brne	.-10     	; 0x6c <.do_copy_data_loop>
      76:	0e 94 64 0d 	call	0x1ac8	; 0x1ac8 <main>
      7a:	0c 94 ac 1c 	jmp	0x3958	; 0x3958 <_exit>

0000007e <__bad_interrupt>:
      7e:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

00000082 <__fixunssfsi>:
      82:	ef 92       	push	r14
      84:	ff 92       	push	r15
      86:	0f 93       	push	r16
      88:	1f 93       	push	r17
      8a:	7b 01       	movw	r14, r22
      8c:	8c 01       	movw	r16, r24
      8e:	20 e0       	ldi	r18, 0x00	; 0
      90:	30 e0       	ldi	r19, 0x00	; 0
      92:	40 e0       	ldi	r20, 0x00	; 0
      94:	5f e4       	ldi	r21, 0x4F	; 79
      96:	0e 94 41 03 	call	0x682	; 0x682 <__gesf2>
      9a:	88 23       	and	r24, r24
      9c:	8c f0       	brlt	.+34     	; 0xc0 <__fixunssfsi+0x3e>
      9e:	c8 01       	movw	r24, r16
      a0:	b7 01       	movw	r22, r14
      a2:	20 e0       	ldi	r18, 0x00	; 0
      a4:	30 e0       	ldi	r19, 0x00	; 0
      a6:	40 e0       	ldi	r20, 0x00	; 0
      a8:	5f e4       	ldi	r21, 0x4F	; 79
      aa:	0e 94 b9 01 	call	0x372	; 0x372 <__subsf3>
      ae:	0e 94 a1 03 	call	0x742	; 0x742 <__fixsfsi>
      b2:	9b 01       	movw	r18, r22
      b4:	ac 01       	movw	r20, r24
      b6:	20 50       	subi	r18, 0x00	; 0
      b8:	30 40       	sbci	r19, 0x00	; 0
      ba:	40 40       	sbci	r20, 0x00	; 0
      bc:	50 48       	sbci	r21, 0x80	; 128
      be:	06 c0       	rjmp	.+12     	; 0xcc <__fixunssfsi+0x4a>
      c0:	c8 01       	movw	r24, r16
      c2:	b7 01       	movw	r22, r14
      c4:	0e 94 a1 03 	call	0x742	; 0x742 <__fixsfsi>
      c8:	9b 01       	movw	r18, r22
      ca:	ac 01       	movw	r20, r24
      cc:	b9 01       	movw	r22, r18
      ce:	ca 01       	movw	r24, r20
      d0:	1f 91       	pop	r17
      d2:	0f 91       	pop	r16
      d4:	ff 90       	pop	r15
      d6:	ef 90       	pop	r14
      d8:	08 95       	ret

000000da <_fpadd_parts>:
      da:	a0 e0       	ldi	r26, 0x00	; 0
      dc:	b0 e0       	ldi	r27, 0x00	; 0
      de:	e3 e7       	ldi	r30, 0x73	; 115
      e0:	f0 e0       	ldi	r31, 0x00	; 0
      e2:	0c 94 75 1c 	jmp	0x38ea	; 0x38ea <__prologue_saves__>
      e6:	dc 01       	movw	r26, r24
      e8:	2b 01       	movw	r4, r22
      ea:	fa 01       	movw	r30, r20
      ec:	9c 91       	ld	r25, X
      ee:	92 30       	cpi	r25, 0x02	; 2
      f0:	08 f4       	brcc	.+2      	; 0xf4 <_fpadd_parts+0x1a>
      f2:	39 c1       	rjmp	.+626    	; 0x366 <_fpadd_parts+0x28c>
      f4:	eb 01       	movw	r28, r22
      f6:	88 81       	ld	r24, Y
      f8:	82 30       	cpi	r24, 0x02	; 2
      fa:	08 f4       	brcc	.+2      	; 0xfe <_fpadd_parts+0x24>
      fc:	33 c1       	rjmp	.+614    	; 0x364 <_fpadd_parts+0x28a>
      fe:	94 30       	cpi	r25, 0x04	; 4
     100:	69 f4       	brne	.+26     	; 0x11c <_fpadd_parts+0x42>
     102:	84 30       	cpi	r24, 0x04	; 4
     104:	09 f0       	breq	.+2      	; 0x108 <_fpadd_parts+0x2e>
     106:	2f c1       	rjmp	.+606    	; 0x366 <_fpadd_parts+0x28c>
     108:	11 96       	adiw	r26, 0x01	; 1
     10a:	9c 91       	ld	r25, X
     10c:	11 97       	sbiw	r26, 0x01	; 1
     10e:	89 81       	ldd	r24, Y+1	; 0x01
     110:	98 17       	cp	r25, r24
     112:	09 f4       	brne	.+2      	; 0x116 <_fpadd_parts+0x3c>
     114:	28 c1       	rjmp	.+592    	; 0x366 <_fpadd_parts+0x28c>
     116:	a0 e6       	ldi	r26, 0x60	; 96
     118:	b0 e0       	ldi	r27, 0x00	; 0
     11a:	25 c1       	rjmp	.+586    	; 0x366 <_fpadd_parts+0x28c>
     11c:	84 30       	cpi	r24, 0x04	; 4
     11e:	09 f4       	brne	.+2      	; 0x122 <_fpadd_parts+0x48>
     120:	21 c1       	rjmp	.+578    	; 0x364 <_fpadd_parts+0x28a>
     122:	82 30       	cpi	r24, 0x02	; 2
     124:	a9 f4       	brne	.+42     	; 0x150 <_fpadd_parts+0x76>
     126:	92 30       	cpi	r25, 0x02	; 2
     128:	09 f0       	breq	.+2      	; 0x12c <_fpadd_parts+0x52>
     12a:	1d c1       	rjmp	.+570    	; 0x366 <_fpadd_parts+0x28c>
     12c:	9a 01       	movw	r18, r20
     12e:	ad 01       	movw	r20, r26
     130:	88 e0       	ldi	r24, 0x08	; 8
     132:	ea 01       	movw	r28, r20
     134:	09 90       	ld	r0, Y+
     136:	ae 01       	movw	r20, r28
     138:	e9 01       	movw	r28, r18
     13a:	09 92       	st	Y+, r0
     13c:	9e 01       	movw	r18, r28
     13e:	81 50       	subi	r24, 0x01	; 1
     140:	c1 f7       	brne	.-16     	; 0x132 <_fpadd_parts+0x58>
     142:	e2 01       	movw	r28, r4
     144:	89 81       	ldd	r24, Y+1	; 0x01
     146:	11 96       	adiw	r26, 0x01	; 1
     148:	9c 91       	ld	r25, X
     14a:	89 23       	and	r24, r25
     14c:	81 83       	std	Z+1, r24	; 0x01
     14e:	08 c1       	rjmp	.+528    	; 0x360 <_fpadd_parts+0x286>
     150:	92 30       	cpi	r25, 0x02	; 2
     152:	09 f4       	brne	.+2      	; 0x156 <_fpadd_parts+0x7c>
     154:	07 c1       	rjmp	.+526    	; 0x364 <_fpadd_parts+0x28a>
     156:	12 96       	adiw	r26, 0x02	; 2
     158:	2d 90       	ld	r2, X+
     15a:	3c 90       	ld	r3, X
     15c:	13 97       	sbiw	r26, 0x03	; 3
     15e:	eb 01       	movw	r28, r22
     160:	8a 81       	ldd	r24, Y+2	; 0x02
     162:	9b 81       	ldd	r25, Y+3	; 0x03
     164:	14 96       	adiw	r26, 0x04	; 4
     166:	ad 90       	ld	r10, X+
     168:	bd 90       	ld	r11, X+
     16a:	cd 90       	ld	r12, X+
     16c:	dc 90       	ld	r13, X
     16e:	17 97       	sbiw	r26, 0x07	; 7
     170:	ec 80       	ldd	r14, Y+4	; 0x04
     172:	fd 80       	ldd	r15, Y+5	; 0x05
     174:	0e 81       	ldd	r16, Y+6	; 0x06
     176:	1f 81       	ldd	r17, Y+7	; 0x07
     178:	91 01       	movw	r18, r2
     17a:	28 1b       	sub	r18, r24
     17c:	39 0b       	sbc	r19, r25
     17e:	b9 01       	movw	r22, r18
     180:	37 ff       	sbrs	r19, 7
     182:	04 c0       	rjmp	.+8      	; 0x18c <_fpadd_parts+0xb2>
     184:	66 27       	eor	r22, r22
     186:	77 27       	eor	r23, r23
     188:	62 1b       	sub	r22, r18
     18a:	73 0b       	sbc	r23, r19
     18c:	60 32       	cpi	r22, 0x20	; 32
     18e:	71 05       	cpc	r23, r1
     190:	0c f0       	brlt	.+2      	; 0x194 <_fpadd_parts+0xba>
     192:	61 c0       	rjmp	.+194    	; 0x256 <_fpadd_parts+0x17c>
     194:	12 16       	cp	r1, r18
     196:	13 06       	cpc	r1, r19
     198:	6c f5       	brge	.+90     	; 0x1f4 <_fpadd_parts+0x11a>
     19a:	37 01       	movw	r6, r14
     19c:	48 01       	movw	r8, r16
     19e:	06 2e       	mov	r0, r22
     1a0:	04 c0       	rjmp	.+8      	; 0x1aa <_fpadd_parts+0xd0>
     1a2:	96 94       	lsr	r9
     1a4:	87 94       	ror	r8
     1a6:	77 94       	ror	r7
     1a8:	67 94       	ror	r6
     1aa:	0a 94       	dec	r0
     1ac:	d2 f7       	brpl	.-12     	; 0x1a2 <_fpadd_parts+0xc8>
     1ae:	21 e0       	ldi	r18, 0x01	; 1
     1b0:	30 e0       	ldi	r19, 0x00	; 0
     1b2:	40 e0       	ldi	r20, 0x00	; 0
     1b4:	50 e0       	ldi	r21, 0x00	; 0
     1b6:	04 c0       	rjmp	.+8      	; 0x1c0 <_fpadd_parts+0xe6>
     1b8:	22 0f       	add	r18, r18
     1ba:	33 1f       	adc	r19, r19
     1bc:	44 1f       	adc	r20, r20
     1be:	55 1f       	adc	r21, r21
     1c0:	6a 95       	dec	r22
     1c2:	d2 f7       	brpl	.-12     	; 0x1b8 <_fpadd_parts+0xde>
     1c4:	21 50       	subi	r18, 0x01	; 1
     1c6:	30 40       	sbci	r19, 0x00	; 0
     1c8:	40 40       	sbci	r20, 0x00	; 0
     1ca:	50 40       	sbci	r21, 0x00	; 0
     1cc:	2e 21       	and	r18, r14
     1ce:	3f 21       	and	r19, r15
     1d0:	40 23       	and	r20, r16
     1d2:	51 23       	and	r21, r17
     1d4:	21 15       	cp	r18, r1
     1d6:	31 05       	cpc	r19, r1
     1d8:	41 05       	cpc	r20, r1
     1da:	51 05       	cpc	r21, r1
     1dc:	21 f0       	breq	.+8      	; 0x1e6 <_fpadd_parts+0x10c>
     1de:	21 e0       	ldi	r18, 0x01	; 1
     1e0:	30 e0       	ldi	r19, 0x00	; 0
     1e2:	40 e0       	ldi	r20, 0x00	; 0
     1e4:	50 e0       	ldi	r21, 0x00	; 0
     1e6:	79 01       	movw	r14, r18
     1e8:	8a 01       	movw	r16, r20
     1ea:	e6 28       	or	r14, r6
     1ec:	f7 28       	or	r15, r7
     1ee:	08 29       	or	r16, r8
     1f0:	19 29       	or	r17, r9
     1f2:	3c c0       	rjmp	.+120    	; 0x26c <_fpadd_parts+0x192>
     1f4:	23 2b       	or	r18, r19
     1f6:	d1 f1       	breq	.+116    	; 0x26c <_fpadd_parts+0x192>
     1f8:	26 0e       	add	r2, r22
     1fa:	37 1e       	adc	r3, r23
     1fc:	35 01       	movw	r6, r10
     1fe:	46 01       	movw	r8, r12
     200:	06 2e       	mov	r0, r22
     202:	04 c0       	rjmp	.+8      	; 0x20c <_fpadd_parts+0x132>
     204:	96 94       	lsr	r9
     206:	87 94       	ror	r8
     208:	77 94       	ror	r7
     20a:	67 94       	ror	r6
     20c:	0a 94       	dec	r0
     20e:	d2 f7       	brpl	.-12     	; 0x204 <_fpadd_parts+0x12a>
     210:	21 e0       	ldi	r18, 0x01	; 1
     212:	30 e0       	ldi	r19, 0x00	; 0
     214:	40 e0       	ldi	r20, 0x00	; 0
     216:	50 e0       	ldi	r21, 0x00	; 0
     218:	04 c0       	rjmp	.+8      	; 0x222 <_fpadd_parts+0x148>
     21a:	22 0f       	add	r18, r18
     21c:	33 1f       	adc	r19, r19
     21e:	44 1f       	adc	r20, r20
     220:	55 1f       	adc	r21, r21
     222:	6a 95       	dec	r22
     224:	d2 f7       	brpl	.-12     	; 0x21a <_fpadd_parts+0x140>
     226:	21 50       	subi	r18, 0x01	; 1
     228:	30 40       	sbci	r19, 0x00	; 0
     22a:	40 40       	sbci	r20, 0x00	; 0
     22c:	50 40       	sbci	r21, 0x00	; 0
     22e:	2a 21       	and	r18, r10
     230:	3b 21       	and	r19, r11
     232:	4c 21       	and	r20, r12
     234:	5d 21       	and	r21, r13
     236:	21 15       	cp	r18, r1
     238:	31 05       	cpc	r19, r1
     23a:	41 05       	cpc	r20, r1
     23c:	51 05       	cpc	r21, r1
     23e:	21 f0       	breq	.+8      	; 0x248 <_fpadd_parts+0x16e>
     240:	21 e0       	ldi	r18, 0x01	; 1
     242:	30 e0       	ldi	r19, 0x00	; 0
     244:	40 e0       	ldi	r20, 0x00	; 0
     246:	50 e0       	ldi	r21, 0x00	; 0
     248:	59 01       	movw	r10, r18
     24a:	6a 01       	movw	r12, r20
     24c:	a6 28       	or	r10, r6
     24e:	b7 28       	or	r11, r7
     250:	c8 28       	or	r12, r8
     252:	d9 28       	or	r13, r9
     254:	0b c0       	rjmp	.+22     	; 0x26c <_fpadd_parts+0x192>
     256:	82 15       	cp	r24, r2
     258:	93 05       	cpc	r25, r3
     25a:	2c f0       	brlt	.+10     	; 0x266 <_fpadd_parts+0x18c>
     25c:	1c 01       	movw	r2, r24
     25e:	aa 24       	eor	r10, r10
     260:	bb 24       	eor	r11, r11
     262:	65 01       	movw	r12, r10
     264:	03 c0       	rjmp	.+6      	; 0x26c <_fpadd_parts+0x192>
     266:	ee 24       	eor	r14, r14
     268:	ff 24       	eor	r15, r15
     26a:	87 01       	movw	r16, r14
     26c:	11 96       	adiw	r26, 0x01	; 1
     26e:	9c 91       	ld	r25, X
     270:	d2 01       	movw	r26, r4
     272:	11 96       	adiw	r26, 0x01	; 1
     274:	8c 91       	ld	r24, X
     276:	98 17       	cp	r25, r24
     278:	09 f4       	brne	.+2      	; 0x27c <_fpadd_parts+0x1a2>
     27a:	45 c0       	rjmp	.+138    	; 0x306 <_fpadd_parts+0x22c>
     27c:	99 23       	and	r25, r25
     27e:	39 f0       	breq	.+14     	; 0x28e <_fpadd_parts+0x1b4>
     280:	a8 01       	movw	r20, r16
     282:	97 01       	movw	r18, r14
     284:	2a 19       	sub	r18, r10
     286:	3b 09       	sbc	r19, r11
     288:	4c 09       	sbc	r20, r12
     28a:	5d 09       	sbc	r21, r13
     28c:	06 c0       	rjmp	.+12     	; 0x29a <_fpadd_parts+0x1c0>
     28e:	a6 01       	movw	r20, r12
     290:	95 01       	movw	r18, r10
     292:	2e 19       	sub	r18, r14
     294:	3f 09       	sbc	r19, r15
     296:	40 0b       	sbc	r20, r16
     298:	51 0b       	sbc	r21, r17
     29a:	57 fd       	sbrc	r21, 7
     29c:	08 c0       	rjmp	.+16     	; 0x2ae <_fpadd_parts+0x1d4>
     29e:	11 82       	std	Z+1, r1	; 0x01
     2a0:	33 82       	std	Z+3, r3	; 0x03
     2a2:	22 82       	std	Z+2, r2	; 0x02
     2a4:	24 83       	std	Z+4, r18	; 0x04
     2a6:	35 83       	std	Z+5, r19	; 0x05
     2a8:	46 83       	std	Z+6, r20	; 0x06
     2aa:	57 83       	std	Z+7, r21	; 0x07
     2ac:	1d c0       	rjmp	.+58     	; 0x2e8 <_fpadd_parts+0x20e>
     2ae:	81 e0       	ldi	r24, 0x01	; 1
     2b0:	81 83       	std	Z+1, r24	; 0x01
     2b2:	33 82       	std	Z+3, r3	; 0x03
     2b4:	22 82       	std	Z+2, r2	; 0x02
     2b6:	88 27       	eor	r24, r24
     2b8:	99 27       	eor	r25, r25
     2ba:	dc 01       	movw	r26, r24
     2bc:	82 1b       	sub	r24, r18
     2be:	93 0b       	sbc	r25, r19
     2c0:	a4 0b       	sbc	r26, r20
     2c2:	b5 0b       	sbc	r27, r21
     2c4:	84 83       	std	Z+4, r24	; 0x04
     2c6:	95 83       	std	Z+5, r25	; 0x05
     2c8:	a6 83       	std	Z+6, r26	; 0x06
     2ca:	b7 83       	std	Z+7, r27	; 0x07
     2cc:	0d c0       	rjmp	.+26     	; 0x2e8 <_fpadd_parts+0x20e>
     2ce:	22 0f       	add	r18, r18
     2d0:	33 1f       	adc	r19, r19
     2d2:	44 1f       	adc	r20, r20
     2d4:	55 1f       	adc	r21, r21
     2d6:	24 83       	std	Z+4, r18	; 0x04
     2d8:	35 83       	std	Z+5, r19	; 0x05
     2da:	46 83       	std	Z+6, r20	; 0x06
     2dc:	57 83       	std	Z+7, r21	; 0x07
     2de:	82 81       	ldd	r24, Z+2	; 0x02
     2e0:	93 81       	ldd	r25, Z+3	; 0x03
     2e2:	01 97       	sbiw	r24, 0x01	; 1
     2e4:	93 83       	std	Z+3, r25	; 0x03
     2e6:	82 83       	std	Z+2, r24	; 0x02
     2e8:	24 81       	ldd	r18, Z+4	; 0x04
     2ea:	35 81       	ldd	r19, Z+5	; 0x05
     2ec:	46 81       	ldd	r20, Z+6	; 0x06
     2ee:	57 81       	ldd	r21, Z+7	; 0x07
     2f0:	da 01       	movw	r26, r20
     2f2:	c9 01       	movw	r24, r18
     2f4:	01 97       	sbiw	r24, 0x01	; 1
     2f6:	a1 09       	sbc	r26, r1
     2f8:	b1 09       	sbc	r27, r1
     2fa:	8f 5f       	subi	r24, 0xFF	; 255
     2fc:	9f 4f       	sbci	r25, 0xFF	; 255
     2fe:	af 4f       	sbci	r26, 0xFF	; 255
     300:	bf 43       	sbci	r27, 0x3F	; 63
     302:	28 f3       	brcs	.-54     	; 0x2ce <_fpadd_parts+0x1f4>
     304:	0b c0       	rjmp	.+22     	; 0x31c <_fpadd_parts+0x242>
     306:	91 83       	std	Z+1, r25	; 0x01
     308:	33 82       	std	Z+3, r3	; 0x03
     30a:	22 82       	std	Z+2, r2	; 0x02
     30c:	ea 0c       	add	r14, r10
     30e:	fb 1c       	adc	r15, r11
     310:	0c 1d       	adc	r16, r12
     312:	1d 1d       	adc	r17, r13
     314:	e4 82       	std	Z+4, r14	; 0x04
     316:	f5 82       	std	Z+5, r15	; 0x05
     318:	06 83       	std	Z+6, r16	; 0x06
     31a:	17 83       	std	Z+7, r17	; 0x07
     31c:	83 e0       	ldi	r24, 0x03	; 3
     31e:	80 83       	st	Z, r24
     320:	24 81       	ldd	r18, Z+4	; 0x04
     322:	35 81       	ldd	r19, Z+5	; 0x05
     324:	46 81       	ldd	r20, Z+6	; 0x06
     326:	57 81       	ldd	r21, Z+7	; 0x07
     328:	57 ff       	sbrs	r21, 7
     32a:	1a c0       	rjmp	.+52     	; 0x360 <_fpadd_parts+0x286>
     32c:	c9 01       	movw	r24, r18
     32e:	aa 27       	eor	r26, r26
     330:	97 fd       	sbrc	r25, 7
     332:	a0 95       	com	r26
     334:	ba 2f       	mov	r27, r26
     336:	81 70       	andi	r24, 0x01	; 1
     338:	90 70       	andi	r25, 0x00	; 0
     33a:	a0 70       	andi	r26, 0x00	; 0
     33c:	b0 70       	andi	r27, 0x00	; 0
     33e:	56 95       	lsr	r21
     340:	47 95       	ror	r20
     342:	37 95       	ror	r19
     344:	27 95       	ror	r18
     346:	82 2b       	or	r24, r18
     348:	93 2b       	or	r25, r19
     34a:	a4 2b       	or	r26, r20
     34c:	b5 2b       	or	r27, r21
     34e:	84 83       	std	Z+4, r24	; 0x04
     350:	95 83       	std	Z+5, r25	; 0x05
     352:	a6 83       	std	Z+6, r26	; 0x06
     354:	b7 83       	std	Z+7, r27	; 0x07
     356:	82 81       	ldd	r24, Z+2	; 0x02
     358:	93 81       	ldd	r25, Z+3	; 0x03
     35a:	01 96       	adiw	r24, 0x01	; 1
     35c:	93 83       	std	Z+3, r25	; 0x03
     35e:	82 83       	std	Z+2, r24	; 0x02
     360:	df 01       	movw	r26, r30
     362:	01 c0       	rjmp	.+2      	; 0x366 <_fpadd_parts+0x28c>
     364:	d2 01       	movw	r26, r4
     366:	cd 01       	movw	r24, r26
     368:	cd b7       	in	r28, 0x3d	; 61
     36a:	de b7       	in	r29, 0x3e	; 62
     36c:	e2 e1       	ldi	r30, 0x12	; 18
     36e:	0c 94 91 1c 	jmp	0x3922	; 0x3922 <__epilogue_restores__>

00000372 <__subsf3>:
     372:	a0 e2       	ldi	r26, 0x20	; 32
     374:	b0 e0       	ldi	r27, 0x00	; 0
     376:	ef eb       	ldi	r30, 0xBF	; 191
     378:	f1 e0       	ldi	r31, 0x01	; 1
     37a:	0c 94 81 1c 	jmp	0x3902	; 0x3902 <__prologue_saves__+0x18>
     37e:	69 83       	std	Y+1, r22	; 0x01
     380:	7a 83       	std	Y+2, r23	; 0x02
     382:	8b 83       	std	Y+3, r24	; 0x03
     384:	9c 83       	std	Y+4, r25	; 0x04
     386:	2d 83       	std	Y+5, r18	; 0x05
     388:	3e 83       	std	Y+6, r19	; 0x06
     38a:	4f 83       	std	Y+7, r20	; 0x07
     38c:	58 87       	std	Y+8, r21	; 0x08
     38e:	e9 e0       	ldi	r30, 0x09	; 9
     390:	ee 2e       	mov	r14, r30
     392:	f1 2c       	mov	r15, r1
     394:	ec 0e       	add	r14, r28
     396:	fd 1e       	adc	r15, r29
     398:	ce 01       	movw	r24, r28
     39a:	01 96       	adiw	r24, 0x01	; 1
     39c:	b7 01       	movw	r22, r14
     39e:	0e 94 ca 04 	call	0x994	; 0x994 <__unpack_f>
     3a2:	8e 01       	movw	r16, r28
     3a4:	0f 5e       	subi	r16, 0xEF	; 239
     3a6:	1f 4f       	sbci	r17, 0xFF	; 255
     3a8:	ce 01       	movw	r24, r28
     3aa:	05 96       	adiw	r24, 0x05	; 5
     3ac:	b8 01       	movw	r22, r16
     3ae:	0e 94 ca 04 	call	0x994	; 0x994 <__unpack_f>
     3b2:	8a 89       	ldd	r24, Y+18	; 0x12
     3b4:	91 e0       	ldi	r25, 0x01	; 1
     3b6:	89 27       	eor	r24, r25
     3b8:	8a 8b       	std	Y+18, r24	; 0x12
     3ba:	c7 01       	movw	r24, r14
     3bc:	b8 01       	movw	r22, r16
     3be:	ae 01       	movw	r20, r28
     3c0:	47 5e       	subi	r20, 0xE7	; 231
     3c2:	5f 4f       	sbci	r21, 0xFF	; 255
     3c4:	0e 94 6d 00 	call	0xda	; 0xda <_fpadd_parts>
     3c8:	0e 94 f5 03 	call	0x7ea	; 0x7ea <__pack_f>
     3cc:	a0 96       	adiw	r28, 0x20	; 32
     3ce:	e6 e0       	ldi	r30, 0x06	; 6
     3d0:	0c 94 9d 1c 	jmp	0x393a	; 0x393a <__epilogue_restores__+0x18>

000003d4 <__addsf3>:
     3d4:	a0 e2       	ldi	r26, 0x20	; 32
     3d6:	b0 e0       	ldi	r27, 0x00	; 0
     3d8:	e0 ef       	ldi	r30, 0xF0	; 240
     3da:	f1 e0       	ldi	r31, 0x01	; 1
     3dc:	0c 94 81 1c 	jmp	0x3902	; 0x3902 <__prologue_saves__+0x18>
     3e0:	69 83       	std	Y+1, r22	; 0x01
     3e2:	7a 83       	std	Y+2, r23	; 0x02
     3e4:	8b 83       	std	Y+3, r24	; 0x03
     3e6:	9c 83       	std	Y+4, r25	; 0x04
     3e8:	2d 83       	std	Y+5, r18	; 0x05
     3ea:	3e 83       	std	Y+6, r19	; 0x06
     3ec:	4f 83       	std	Y+7, r20	; 0x07
     3ee:	58 87       	std	Y+8, r21	; 0x08
     3f0:	f9 e0       	ldi	r31, 0x09	; 9
     3f2:	ef 2e       	mov	r14, r31
     3f4:	f1 2c       	mov	r15, r1
     3f6:	ec 0e       	add	r14, r28
     3f8:	fd 1e       	adc	r15, r29
     3fa:	ce 01       	movw	r24, r28
     3fc:	01 96       	adiw	r24, 0x01	; 1
     3fe:	b7 01       	movw	r22, r14
     400:	0e 94 ca 04 	call	0x994	; 0x994 <__unpack_f>
     404:	8e 01       	movw	r16, r28
     406:	0f 5e       	subi	r16, 0xEF	; 239
     408:	1f 4f       	sbci	r17, 0xFF	; 255
     40a:	ce 01       	movw	r24, r28
     40c:	05 96       	adiw	r24, 0x05	; 5
     40e:	b8 01       	movw	r22, r16
     410:	0e 94 ca 04 	call	0x994	; 0x994 <__unpack_f>
     414:	c7 01       	movw	r24, r14
     416:	b8 01       	movw	r22, r16
     418:	ae 01       	movw	r20, r28
     41a:	47 5e       	subi	r20, 0xE7	; 231
     41c:	5f 4f       	sbci	r21, 0xFF	; 255
     41e:	0e 94 6d 00 	call	0xda	; 0xda <_fpadd_parts>
     422:	0e 94 f5 03 	call	0x7ea	; 0x7ea <__pack_f>
     426:	a0 96       	adiw	r28, 0x20	; 32
     428:	e6 e0       	ldi	r30, 0x06	; 6
     42a:	0c 94 9d 1c 	jmp	0x393a	; 0x393a <__epilogue_restores__+0x18>

0000042e <__mulsf3>:
     42e:	a0 e2       	ldi	r26, 0x20	; 32
     430:	b0 e0       	ldi	r27, 0x00	; 0
     432:	ed e1       	ldi	r30, 0x1D	; 29
     434:	f2 e0       	ldi	r31, 0x02	; 2
     436:	0c 94 75 1c 	jmp	0x38ea	; 0x38ea <__prologue_saves__>
     43a:	69 83       	std	Y+1, r22	; 0x01
     43c:	7a 83       	std	Y+2, r23	; 0x02
     43e:	8b 83       	std	Y+3, r24	; 0x03
     440:	9c 83       	std	Y+4, r25	; 0x04
     442:	2d 83       	std	Y+5, r18	; 0x05
     444:	3e 83       	std	Y+6, r19	; 0x06
     446:	4f 83       	std	Y+7, r20	; 0x07
     448:	58 87       	std	Y+8, r21	; 0x08
     44a:	ce 01       	movw	r24, r28
     44c:	01 96       	adiw	r24, 0x01	; 1
     44e:	be 01       	movw	r22, r28
     450:	67 5f       	subi	r22, 0xF7	; 247
     452:	7f 4f       	sbci	r23, 0xFF	; 255
     454:	0e 94 ca 04 	call	0x994	; 0x994 <__unpack_f>
     458:	ce 01       	movw	r24, r28
     45a:	05 96       	adiw	r24, 0x05	; 5
     45c:	be 01       	movw	r22, r28
     45e:	6f 5e       	subi	r22, 0xEF	; 239
     460:	7f 4f       	sbci	r23, 0xFF	; 255
     462:	0e 94 ca 04 	call	0x994	; 0x994 <__unpack_f>
     466:	99 85       	ldd	r25, Y+9	; 0x09
     468:	92 30       	cpi	r25, 0x02	; 2
     46a:	88 f0       	brcs	.+34     	; 0x48e <__mulsf3+0x60>
     46c:	89 89       	ldd	r24, Y+17	; 0x11
     46e:	82 30       	cpi	r24, 0x02	; 2
     470:	c8 f0       	brcs	.+50     	; 0x4a4 <__mulsf3+0x76>
     472:	94 30       	cpi	r25, 0x04	; 4
     474:	19 f4       	brne	.+6      	; 0x47c <__mulsf3+0x4e>
     476:	82 30       	cpi	r24, 0x02	; 2
     478:	51 f4       	brne	.+20     	; 0x48e <__mulsf3+0x60>
     47a:	04 c0       	rjmp	.+8      	; 0x484 <__mulsf3+0x56>
     47c:	84 30       	cpi	r24, 0x04	; 4
     47e:	29 f4       	brne	.+10     	; 0x48a <__mulsf3+0x5c>
     480:	92 30       	cpi	r25, 0x02	; 2
     482:	81 f4       	brne	.+32     	; 0x4a4 <__mulsf3+0x76>
     484:	80 e6       	ldi	r24, 0x60	; 96
     486:	90 e0       	ldi	r25, 0x00	; 0
     488:	c6 c0       	rjmp	.+396    	; 0x616 <__mulsf3+0x1e8>
     48a:	92 30       	cpi	r25, 0x02	; 2
     48c:	49 f4       	brne	.+18     	; 0x4a0 <__mulsf3+0x72>
     48e:	20 e0       	ldi	r18, 0x00	; 0
     490:	9a 85       	ldd	r25, Y+10	; 0x0a
     492:	8a 89       	ldd	r24, Y+18	; 0x12
     494:	98 13       	cpse	r25, r24
     496:	21 e0       	ldi	r18, 0x01	; 1
     498:	2a 87       	std	Y+10, r18	; 0x0a
     49a:	ce 01       	movw	r24, r28
     49c:	09 96       	adiw	r24, 0x09	; 9
     49e:	bb c0       	rjmp	.+374    	; 0x616 <__mulsf3+0x1e8>
     4a0:	82 30       	cpi	r24, 0x02	; 2
     4a2:	49 f4       	brne	.+18     	; 0x4b6 <__mulsf3+0x88>
     4a4:	20 e0       	ldi	r18, 0x00	; 0
     4a6:	9a 85       	ldd	r25, Y+10	; 0x0a
     4a8:	8a 89       	ldd	r24, Y+18	; 0x12
     4aa:	98 13       	cpse	r25, r24
     4ac:	21 e0       	ldi	r18, 0x01	; 1
     4ae:	2a 8b       	std	Y+18, r18	; 0x12
     4b0:	ce 01       	movw	r24, r28
     4b2:	41 96       	adiw	r24, 0x11	; 17
     4b4:	b0 c0       	rjmp	.+352    	; 0x616 <__mulsf3+0x1e8>
     4b6:	2d 84       	ldd	r2, Y+13	; 0x0d
     4b8:	3e 84       	ldd	r3, Y+14	; 0x0e
     4ba:	4f 84       	ldd	r4, Y+15	; 0x0f
     4bc:	58 88       	ldd	r5, Y+16	; 0x10
     4be:	6d 88       	ldd	r6, Y+21	; 0x15
     4c0:	7e 88       	ldd	r7, Y+22	; 0x16
     4c2:	8f 88       	ldd	r8, Y+23	; 0x17
     4c4:	98 8c       	ldd	r9, Y+24	; 0x18
     4c6:	ee 24       	eor	r14, r14
     4c8:	ff 24       	eor	r15, r15
     4ca:	87 01       	movw	r16, r14
     4cc:	aa 24       	eor	r10, r10
     4ce:	bb 24       	eor	r11, r11
     4d0:	65 01       	movw	r12, r10
     4d2:	40 e0       	ldi	r20, 0x00	; 0
     4d4:	50 e0       	ldi	r21, 0x00	; 0
     4d6:	60 e0       	ldi	r22, 0x00	; 0
     4d8:	70 e0       	ldi	r23, 0x00	; 0
     4da:	e0 e0       	ldi	r30, 0x00	; 0
     4dc:	f0 e0       	ldi	r31, 0x00	; 0
     4de:	c1 01       	movw	r24, r2
     4e0:	81 70       	andi	r24, 0x01	; 1
     4e2:	90 70       	andi	r25, 0x00	; 0
     4e4:	89 2b       	or	r24, r25
     4e6:	e9 f0       	breq	.+58     	; 0x522 <__mulsf3+0xf4>
     4e8:	e6 0c       	add	r14, r6
     4ea:	f7 1c       	adc	r15, r7
     4ec:	08 1d       	adc	r16, r8
     4ee:	19 1d       	adc	r17, r9
     4f0:	9a 01       	movw	r18, r20
     4f2:	ab 01       	movw	r20, r22
     4f4:	2a 0d       	add	r18, r10
     4f6:	3b 1d       	adc	r19, r11
     4f8:	4c 1d       	adc	r20, r12
     4fa:	5d 1d       	adc	r21, r13
     4fc:	80 e0       	ldi	r24, 0x00	; 0
     4fe:	90 e0       	ldi	r25, 0x00	; 0
     500:	a0 e0       	ldi	r26, 0x00	; 0
     502:	b0 e0       	ldi	r27, 0x00	; 0
     504:	e6 14       	cp	r14, r6
     506:	f7 04       	cpc	r15, r7
     508:	08 05       	cpc	r16, r8
     50a:	19 05       	cpc	r17, r9
     50c:	20 f4       	brcc	.+8      	; 0x516 <__mulsf3+0xe8>
     50e:	81 e0       	ldi	r24, 0x01	; 1
     510:	90 e0       	ldi	r25, 0x00	; 0
     512:	a0 e0       	ldi	r26, 0x00	; 0
     514:	b0 e0       	ldi	r27, 0x00	; 0
     516:	ba 01       	movw	r22, r20
     518:	a9 01       	movw	r20, r18
     51a:	48 0f       	add	r20, r24
     51c:	59 1f       	adc	r21, r25
     51e:	6a 1f       	adc	r22, r26
     520:	7b 1f       	adc	r23, r27
     522:	aa 0c       	add	r10, r10
     524:	bb 1c       	adc	r11, r11
     526:	cc 1c       	adc	r12, r12
     528:	dd 1c       	adc	r13, r13
     52a:	97 fe       	sbrs	r9, 7
     52c:	08 c0       	rjmp	.+16     	; 0x53e <__mulsf3+0x110>
     52e:	81 e0       	ldi	r24, 0x01	; 1
     530:	90 e0       	ldi	r25, 0x00	; 0
     532:	a0 e0       	ldi	r26, 0x00	; 0
     534:	b0 e0       	ldi	r27, 0x00	; 0
     536:	a8 2a       	or	r10, r24
     538:	b9 2a       	or	r11, r25
     53a:	ca 2a       	or	r12, r26
     53c:	db 2a       	or	r13, r27
     53e:	31 96       	adiw	r30, 0x01	; 1
     540:	e0 32       	cpi	r30, 0x20	; 32
     542:	f1 05       	cpc	r31, r1
     544:	49 f0       	breq	.+18     	; 0x558 <__mulsf3+0x12a>
     546:	66 0c       	add	r6, r6
     548:	77 1c       	adc	r7, r7
     54a:	88 1c       	adc	r8, r8
     54c:	99 1c       	adc	r9, r9
     54e:	56 94       	lsr	r5
     550:	47 94       	ror	r4
     552:	37 94       	ror	r3
     554:	27 94       	ror	r2
     556:	c3 cf       	rjmp	.-122    	; 0x4de <__mulsf3+0xb0>
     558:	fa 85       	ldd	r31, Y+10	; 0x0a
     55a:	ea 89       	ldd	r30, Y+18	; 0x12
     55c:	2b 89       	ldd	r18, Y+19	; 0x13
     55e:	3c 89       	ldd	r19, Y+20	; 0x14
     560:	8b 85       	ldd	r24, Y+11	; 0x0b
     562:	9c 85       	ldd	r25, Y+12	; 0x0c
     564:	28 0f       	add	r18, r24
     566:	39 1f       	adc	r19, r25
     568:	2e 5f       	subi	r18, 0xFE	; 254
     56a:	3f 4f       	sbci	r19, 0xFF	; 255
     56c:	17 c0       	rjmp	.+46     	; 0x59c <__mulsf3+0x16e>
     56e:	ca 01       	movw	r24, r20
     570:	81 70       	andi	r24, 0x01	; 1
     572:	90 70       	andi	r25, 0x00	; 0
     574:	89 2b       	or	r24, r25
     576:	61 f0       	breq	.+24     	; 0x590 <__mulsf3+0x162>
     578:	16 95       	lsr	r17
     57a:	07 95       	ror	r16
     57c:	f7 94       	ror	r15
     57e:	e7 94       	ror	r14
     580:	80 e0       	ldi	r24, 0x00	; 0
     582:	90 e0       	ldi	r25, 0x00	; 0
     584:	a0 e0       	ldi	r26, 0x00	; 0
     586:	b0 e8       	ldi	r27, 0x80	; 128
     588:	e8 2a       	or	r14, r24
     58a:	f9 2a       	or	r15, r25
     58c:	0a 2b       	or	r16, r26
     58e:	1b 2b       	or	r17, r27
     590:	76 95       	lsr	r23
     592:	67 95       	ror	r22
     594:	57 95       	ror	r21
     596:	47 95       	ror	r20
     598:	2f 5f       	subi	r18, 0xFF	; 255
     59a:	3f 4f       	sbci	r19, 0xFF	; 255
     59c:	77 fd       	sbrc	r23, 7
     59e:	e7 cf       	rjmp	.-50     	; 0x56e <__mulsf3+0x140>
     5a0:	0c c0       	rjmp	.+24     	; 0x5ba <__mulsf3+0x18c>
     5a2:	44 0f       	add	r20, r20
     5a4:	55 1f       	adc	r21, r21
     5a6:	66 1f       	adc	r22, r22
     5a8:	77 1f       	adc	r23, r23
     5aa:	17 fd       	sbrc	r17, 7
     5ac:	41 60       	ori	r20, 0x01	; 1
     5ae:	ee 0c       	add	r14, r14
     5b0:	ff 1c       	adc	r15, r15
     5b2:	00 1f       	adc	r16, r16
     5b4:	11 1f       	adc	r17, r17
     5b6:	21 50       	subi	r18, 0x01	; 1
     5b8:	30 40       	sbci	r19, 0x00	; 0
     5ba:	40 30       	cpi	r20, 0x00	; 0
     5bc:	90 e0       	ldi	r25, 0x00	; 0
     5be:	59 07       	cpc	r21, r25
     5c0:	90 e0       	ldi	r25, 0x00	; 0
     5c2:	69 07       	cpc	r22, r25
     5c4:	90 e4       	ldi	r25, 0x40	; 64
     5c6:	79 07       	cpc	r23, r25
     5c8:	60 f3       	brcs	.-40     	; 0x5a2 <__mulsf3+0x174>
     5ca:	2b 8f       	std	Y+27, r18	; 0x1b
     5cc:	3c 8f       	std	Y+28, r19	; 0x1c
     5ce:	db 01       	movw	r26, r22
     5d0:	ca 01       	movw	r24, r20
     5d2:	8f 77       	andi	r24, 0x7F	; 127
     5d4:	90 70       	andi	r25, 0x00	; 0
     5d6:	a0 70       	andi	r26, 0x00	; 0
     5d8:	b0 70       	andi	r27, 0x00	; 0
     5da:	80 34       	cpi	r24, 0x40	; 64
     5dc:	91 05       	cpc	r25, r1
     5de:	a1 05       	cpc	r26, r1
     5e0:	b1 05       	cpc	r27, r1
     5e2:	61 f4       	brne	.+24     	; 0x5fc <__mulsf3+0x1ce>
     5e4:	47 fd       	sbrc	r20, 7
     5e6:	0a c0       	rjmp	.+20     	; 0x5fc <__mulsf3+0x1ce>
     5e8:	e1 14       	cp	r14, r1
     5ea:	f1 04       	cpc	r15, r1
     5ec:	01 05       	cpc	r16, r1
     5ee:	11 05       	cpc	r17, r1
     5f0:	29 f0       	breq	.+10     	; 0x5fc <__mulsf3+0x1ce>
     5f2:	40 5c       	subi	r20, 0xC0	; 192
     5f4:	5f 4f       	sbci	r21, 0xFF	; 255
     5f6:	6f 4f       	sbci	r22, 0xFF	; 255
     5f8:	7f 4f       	sbci	r23, 0xFF	; 255
     5fa:	40 78       	andi	r20, 0x80	; 128
     5fc:	1a 8e       	std	Y+26, r1	; 0x1a
     5fe:	fe 17       	cp	r31, r30
     600:	11 f0       	breq	.+4      	; 0x606 <__mulsf3+0x1d8>
     602:	81 e0       	ldi	r24, 0x01	; 1
     604:	8a 8f       	std	Y+26, r24	; 0x1a
     606:	4d 8f       	std	Y+29, r20	; 0x1d
     608:	5e 8f       	std	Y+30, r21	; 0x1e
     60a:	6f 8f       	std	Y+31, r22	; 0x1f
     60c:	78 a3       	std	Y+32, r23	; 0x20
     60e:	83 e0       	ldi	r24, 0x03	; 3
     610:	89 8f       	std	Y+25, r24	; 0x19
     612:	ce 01       	movw	r24, r28
     614:	49 96       	adiw	r24, 0x19	; 25
     616:	0e 94 f5 03 	call	0x7ea	; 0x7ea <__pack_f>
     61a:	a0 96       	adiw	r28, 0x20	; 32
     61c:	e2 e1       	ldi	r30, 0x12	; 18
     61e:	0c 94 91 1c 	jmp	0x3922	; 0x3922 <__epilogue_restores__>

00000622 <__gtsf2>:
     622:	a8 e1       	ldi	r26, 0x18	; 24
     624:	b0 e0       	ldi	r27, 0x00	; 0
     626:	e7 e1       	ldi	r30, 0x17	; 23
     628:	f3 e0       	ldi	r31, 0x03	; 3
     62a:	0c 94 81 1c 	jmp	0x3902	; 0x3902 <__prologue_saves__+0x18>
     62e:	69 83       	std	Y+1, r22	; 0x01
     630:	7a 83       	std	Y+2, r23	; 0x02
     632:	8b 83       	std	Y+3, r24	; 0x03
     634:	9c 83       	std	Y+4, r25	; 0x04
     636:	2d 83       	std	Y+5, r18	; 0x05
     638:	3e 83       	std	Y+6, r19	; 0x06
     63a:	4f 83       	std	Y+7, r20	; 0x07
     63c:	58 87       	std	Y+8, r21	; 0x08
     63e:	89 e0       	ldi	r24, 0x09	; 9
     640:	e8 2e       	mov	r14, r24
     642:	f1 2c       	mov	r15, r1
     644:	ec 0e       	add	r14, r28
     646:	fd 1e       	adc	r15, r29
     648:	ce 01       	movw	r24, r28
     64a:	01 96       	adiw	r24, 0x01	; 1
     64c:	b7 01       	movw	r22, r14
     64e:	0e 94 ca 04 	call	0x994	; 0x994 <__unpack_f>
     652:	8e 01       	movw	r16, r28
     654:	0f 5e       	subi	r16, 0xEF	; 239
     656:	1f 4f       	sbci	r17, 0xFF	; 255
     658:	ce 01       	movw	r24, r28
     65a:	05 96       	adiw	r24, 0x05	; 5
     65c:	b8 01       	movw	r22, r16
     65e:	0e 94 ca 04 	call	0x994	; 0x994 <__unpack_f>
     662:	89 85       	ldd	r24, Y+9	; 0x09
     664:	82 30       	cpi	r24, 0x02	; 2
     666:	40 f0       	brcs	.+16     	; 0x678 <__gtsf2+0x56>
     668:	89 89       	ldd	r24, Y+17	; 0x11
     66a:	82 30       	cpi	r24, 0x02	; 2
     66c:	28 f0       	brcs	.+10     	; 0x678 <__gtsf2+0x56>
     66e:	c7 01       	movw	r24, r14
     670:	b8 01       	movw	r22, r16
     672:	0e 94 42 05 	call	0xa84	; 0xa84 <__fpcmp_parts_f>
     676:	01 c0       	rjmp	.+2      	; 0x67a <__gtsf2+0x58>
     678:	8f ef       	ldi	r24, 0xFF	; 255
     67a:	68 96       	adiw	r28, 0x18	; 24
     67c:	e6 e0       	ldi	r30, 0x06	; 6
     67e:	0c 94 9d 1c 	jmp	0x393a	; 0x393a <__epilogue_restores__+0x18>

00000682 <__gesf2>:
     682:	a8 e1       	ldi	r26, 0x18	; 24
     684:	b0 e0       	ldi	r27, 0x00	; 0
     686:	e7 e4       	ldi	r30, 0x47	; 71
     688:	f3 e0       	ldi	r31, 0x03	; 3
     68a:	0c 94 81 1c 	jmp	0x3902	; 0x3902 <__prologue_saves__+0x18>
     68e:	69 83       	std	Y+1, r22	; 0x01
     690:	7a 83       	std	Y+2, r23	; 0x02
     692:	8b 83       	std	Y+3, r24	; 0x03
     694:	9c 83       	std	Y+4, r25	; 0x04
     696:	2d 83       	std	Y+5, r18	; 0x05
     698:	3e 83       	std	Y+6, r19	; 0x06
     69a:	4f 83       	std	Y+7, r20	; 0x07
     69c:	58 87       	std	Y+8, r21	; 0x08
     69e:	89 e0       	ldi	r24, 0x09	; 9
     6a0:	e8 2e       	mov	r14, r24
     6a2:	f1 2c       	mov	r15, r1
     6a4:	ec 0e       	add	r14, r28
     6a6:	fd 1e       	adc	r15, r29
     6a8:	ce 01       	movw	r24, r28
     6aa:	01 96       	adiw	r24, 0x01	; 1
     6ac:	b7 01       	movw	r22, r14
     6ae:	0e 94 ca 04 	call	0x994	; 0x994 <__unpack_f>
     6b2:	8e 01       	movw	r16, r28
     6b4:	0f 5e       	subi	r16, 0xEF	; 239
     6b6:	1f 4f       	sbci	r17, 0xFF	; 255
     6b8:	ce 01       	movw	r24, r28
     6ba:	05 96       	adiw	r24, 0x05	; 5
     6bc:	b8 01       	movw	r22, r16
     6be:	0e 94 ca 04 	call	0x994	; 0x994 <__unpack_f>
     6c2:	89 85       	ldd	r24, Y+9	; 0x09
     6c4:	82 30       	cpi	r24, 0x02	; 2
     6c6:	40 f0       	brcs	.+16     	; 0x6d8 <__gesf2+0x56>
     6c8:	89 89       	ldd	r24, Y+17	; 0x11
     6ca:	82 30       	cpi	r24, 0x02	; 2
     6cc:	28 f0       	brcs	.+10     	; 0x6d8 <__gesf2+0x56>
     6ce:	c7 01       	movw	r24, r14
     6d0:	b8 01       	movw	r22, r16
     6d2:	0e 94 42 05 	call	0xa84	; 0xa84 <__fpcmp_parts_f>
     6d6:	01 c0       	rjmp	.+2      	; 0x6da <__gesf2+0x58>
     6d8:	8f ef       	ldi	r24, 0xFF	; 255
     6da:	68 96       	adiw	r28, 0x18	; 24
     6dc:	e6 e0       	ldi	r30, 0x06	; 6
     6de:	0c 94 9d 1c 	jmp	0x393a	; 0x393a <__epilogue_restores__+0x18>

000006e2 <__ltsf2>:
     6e2:	a8 e1       	ldi	r26, 0x18	; 24
     6e4:	b0 e0       	ldi	r27, 0x00	; 0
     6e6:	e7 e7       	ldi	r30, 0x77	; 119
     6e8:	f3 e0       	ldi	r31, 0x03	; 3
     6ea:	0c 94 81 1c 	jmp	0x3902	; 0x3902 <__prologue_saves__+0x18>
     6ee:	69 83       	std	Y+1, r22	; 0x01
     6f0:	7a 83       	std	Y+2, r23	; 0x02
     6f2:	8b 83       	std	Y+3, r24	; 0x03
     6f4:	9c 83       	std	Y+4, r25	; 0x04
     6f6:	2d 83       	std	Y+5, r18	; 0x05
     6f8:	3e 83       	std	Y+6, r19	; 0x06
     6fa:	4f 83       	std	Y+7, r20	; 0x07
     6fc:	58 87       	std	Y+8, r21	; 0x08
     6fe:	89 e0       	ldi	r24, 0x09	; 9
     700:	e8 2e       	mov	r14, r24
     702:	f1 2c       	mov	r15, r1
     704:	ec 0e       	add	r14, r28
     706:	fd 1e       	adc	r15, r29
     708:	ce 01       	movw	r24, r28
     70a:	01 96       	adiw	r24, 0x01	; 1
     70c:	b7 01       	movw	r22, r14
     70e:	0e 94 ca 04 	call	0x994	; 0x994 <__unpack_f>
     712:	8e 01       	movw	r16, r28
     714:	0f 5e       	subi	r16, 0xEF	; 239
     716:	1f 4f       	sbci	r17, 0xFF	; 255
     718:	ce 01       	movw	r24, r28
     71a:	05 96       	adiw	r24, 0x05	; 5
     71c:	b8 01       	movw	r22, r16
     71e:	0e 94 ca 04 	call	0x994	; 0x994 <__unpack_f>
     722:	89 85       	ldd	r24, Y+9	; 0x09
     724:	82 30       	cpi	r24, 0x02	; 2
     726:	40 f0       	brcs	.+16     	; 0x738 <__ltsf2+0x56>
     728:	89 89       	ldd	r24, Y+17	; 0x11
     72a:	82 30       	cpi	r24, 0x02	; 2
     72c:	28 f0       	brcs	.+10     	; 0x738 <__ltsf2+0x56>
     72e:	c7 01       	movw	r24, r14
     730:	b8 01       	movw	r22, r16
     732:	0e 94 42 05 	call	0xa84	; 0xa84 <__fpcmp_parts_f>
     736:	01 c0       	rjmp	.+2      	; 0x73a <__ltsf2+0x58>
     738:	81 e0       	ldi	r24, 0x01	; 1
     73a:	68 96       	adiw	r28, 0x18	; 24
     73c:	e6 e0       	ldi	r30, 0x06	; 6
     73e:	0c 94 9d 1c 	jmp	0x393a	; 0x393a <__epilogue_restores__+0x18>

00000742 <__fixsfsi>:
     742:	ac e0       	ldi	r26, 0x0C	; 12
     744:	b0 e0       	ldi	r27, 0x00	; 0
     746:	e7 ea       	ldi	r30, 0xA7	; 167
     748:	f3 e0       	ldi	r31, 0x03	; 3
     74a:	0c 94 85 1c 	jmp	0x390a	; 0x390a <__prologue_saves__+0x20>
     74e:	69 83       	std	Y+1, r22	; 0x01
     750:	7a 83       	std	Y+2, r23	; 0x02
     752:	8b 83       	std	Y+3, r24	; 0x03
     754:	9c 83       	std	Y+4, r25	; 0x04
     756:	ce 01       	movw	r24, r28
     758:	01 96       	adiw	r24, 0x01	; 1
     75a:	be 01       	movw	r22, r28
     75c:	6b 5f       	subi	r22, 0xFB	; 251
     75e:	7f 4f       	sbci	r23, 0xFF	; 255
     760:	0e 94 ca 04 	call	0x994	; 0x994 <__unpack_f>
     764:	8d 81       	ldd	r24, Y+5	; 0x05
     766:	82 30       	cpi	r24, 0x02	; 2
     768:	61 f1       	breq	.+88     	; 0x7c2 <__fixsfsi+0x80>
     76a:	82 30       	cpi	r24, 0x02	; 2
     76c:	50 f1       	brcs	.+84     	; 0x7c2 <__fixsfsi+0x80>
     76e:	84 30       	cpi	r24, 0x04	; 4
     770:	21 f4       	brne	.+8      	; 0x77a <__fixsfsi+0x38>
     772:	8e 81       	ldd	r24, Y+6	; 0x06
     774:	88 23       	and	r24, r24
     776:	51 f1       	breq	.+84     	; 0x7cc <__fixsfsi+0x8a>
     778:	2e c0       	rjmp	.+92     	; 0x7d6 <__fixsfsi+0x94>
     77a:	2f 81       	ldd	r18, Y+7	; 0x07
     77c:	38 85       	ldd	r19, Y+8	; 0x08
     77e:	37 fd       	sbrc	r19, 7
     780:	20 c0       	rjmp	.+64     	; 0x7c2 <__fixsfsi+0x80>
     782:	6e 81       	ldd	r22, Y+6	; 0x06
     784:	2f 31       	cpi	r18, 0x1F	; 31
     786:	31 05       	cpc	r19, r1
     788:	1c f0       	brlt	.+6      	; 0x790 <__fixsfsi+0x4e>
     78a:	66 23       	and	r22, r22
     78c:	f9 f0       	breq	.+62     	; 0x7cc <__fixsfsi+0x8a>
     78e:	23 c0       	rjmp	.+70     	; 0x7d6 <__fixsfsi+0x94>
     790:	8e e1       	ldi	r24, 0x1E	; 30
     792:	90 e0       	ldi	r25, 0x00	; 0
     794:	82 1b       	sub	r24, r18
     796:	93 0b       	sbc	r25, r19
     798:	29 85       	ldd	r18, Y+9	; 0x09
     79a:	3a 85       	ldd	r19, Y+10	; 0x0a
     79c:	4b 85       	ldd	r20, Y+11	; 0x0b
     79e:	5c 85       	ldd	r21, Y+12	; 0x0c
     7a0:	04 c0       	rjmp	.+8      	; 0x7aa <__fixsfsi+0x68>
     7a2:	56 95       	lsr	r21
     7a4:	47 95       	ror	r20
     7a6:	37 95       	ror	r19
     7a8:	27 95       	ror	r18
     7aa:	8a 95       	dec	r24
     7ac:	d2 f7       	brpl	.-12     	; 0x7a2 <__fixsfsi+0x60>
     7ae:	66 23       	and	r22, r22
     7b0:	b1 f0       	breq	.+44     	; 0x7de <__fixsfsi+0x9c>
     7b2:	50 95       	com	r21
     7b4:	40 95       	com	r20
     7b6:	30 95       	com	r19
     7b8:	21 95       	neg	r18
     7ba:	3f 4f       	sbci	r19, 0xFF	; 255
     7bc:	4f 4f       	sbci	r20, 0xFF	; 255
     7be:	5f 4f       	sbci	r21, 0xFF	; 255
     7c0:	0e c0       	rjmp	.+28     	; 0x7de <__fixsfsi+0x9c>
     7c2:	20 e0       	ldi	r18, 0x00	; 0
     7c4:	30 e0       	ldi	r19, 0x00	; 0
     7c6:	40 e0       	ldi	r20, 0x00	; 0
     7c8:	50 e0       	ldi	r21, 0x00	; 0
     7ca:	09 c0       	rjmp	.+18     	; 0x7de <__fixsfsi+0x9c>
     7cc:	2f ef       	ldi	r18, 0xFF	; 255
     7ce:	3f ef       	ldi	r19, 0xFF	; 255
     7d0:	4f ef       	ldi	r20, 0xFF	; 255
     7d2:	5f e7       	ldi	r21, 0x7F	; 127
     7d4:	04 c0       	rjmp	.+8      	; 0x7de <__fixsfsi+0x9c>
     7d6:	20 e0       	ldi	r18, 0x00	; 0
     7d8:	30 e0       	ldi	r19, 0x00	; 0
     7da:	40 e0       	ldi	r20, 0x00	; 0
     7dc:	50 e8       	ldi	r21, 0x80	; 128
     7de:	b9 01       	movw	r22, r18
     7e0:	ca 01       	movw	r24, r20
     7e2:	2c 96       	adiw	r28, 0x0c	; 12
     7e4:	e2 e0       	ldi	r30, 0x02	; 2
     7e6:	0c 94 a1 1c 	jmp	0x3942	; 0x3942 <__epilogue_restores__+0x20>

000007ea <__pack_f>:
     7ea:	df 92       	push	r13
     7ec:	ef 92       	push	r14
     7ee:	ff 92       	push	r15
     7f0:	0f 93       	push	r16
     7f2:	1f 93       	push	r17
     7f4:	fc 01       	movw	r30, r24
     7f6:	e4 80       	ldd	r14, Z+4	; 0x04
     7f8:	f5 80       	ldd	r15, Z+5	; 0x05
     7fa:	06 81       	ldd	r16, Z+6	; 0x06
     7fc:	17 81       	ldd	r17, Z+7	; 0x07
     7fe:	d1 80       	ldd	r13, Z+1	; 0x01
     800:	80 81       	ld	r24, Z
     802:	82 30       	cpi	r24, 0x02	; 2
     804:	48 f4       	brcc	.+18     	; 0x818 <__pack_f+0x2e>
     806:	80 e0       	ldi	r24, 0x00	; 0
     808:	90 e0       	ldi	r25, 0x00	; 0
     80a:	a0 e1       	ldi	r26, 0x10	; 16
     80c:	b0 e0       	ldi	r27, 0x00	; 0
     80e:	e8 2a       	or	r14, r24
     810:	f9 2a       	or	r15, r25
     812:	0a 2b       	or	r16, r26
     814:	1b 2b       	or	r17, r27
     816:	a5 c0       	rjmp	.+330    	; 0x962 <__stack+0x103>
     818:	84 30       	cpi	r24, 0x04	; 4
     81a:	09 f4       	brne	.+2      	; 0x81e <__pack_f+0x34>
     81c:	9f c0       	rjmp	.+318    	; 0x95c <__stack+0xfd>
     81e:	82 30       	cpi	r24, 0x02	; 2
     820:	21 f4       	brne	.+8      	; 0x82a <__pack_f+0x40>
     822:	ee 24       	eor	r14, r14
     824:	ff 24       	eor	r15, r15
     826:	87 01       	movw	r16, r14
     828:	05 c0       	rjmp	.+10     	; 0x834 <__pack_f+0x4a>
     82a:	e1 14       	cp	r14, r1
     82c:	f1 04       	cpc	r15, r1
     82e:	01 05       	cpc	r16, r1
     830:	11 05       	cpc	r17, r1
     832:	19 f4       	brne	.+6      	; 0x83a <__pack_f+0x50>
     834:	e0 e0       	ldi	r30, 0x00	; 0
     836:	f0 e0       	ldi	r31, 0x00	; 0
     838:	96 c0       	rjmp	.+300    	; 0x966 <__stack+0x107>
     83a:	62 81       	ldd	r22, Z+2	; 0x02
     83c:	73 81       	ldd	r23, Z+3	; 0x03
     83e:	9f ef       	ldi	r25, 0xFF	; 255
     840:	62 38       	cpi	r22, 0x82	; 130
     842:	79 07       	cpc	r23, r25
     844:	0c f0       	brlt	.+2      	; 0x848 <__pack_f+0x5e>
     846:	5b c0       	rjmp	.+182    	; 0x8fe <__stack+0x9f>
     848:	22 e8       	ldi	r18, 0x82	; 130
     84a:	3f ef       	ldi	r19, 0xFF	; 255
     84c:	26 1b       	sub	r18, r22
     84e:	37 0b       	sbc	r19, r23
     850:	2a 31       	cpi	r18, 0x1A	; 26
     852:	31 05       	cpc	r19, r1
     854:	2c f0       	brlt	.+10     	; 0x860 <__stack+0x1>
     856:	20 e0       	ldi	r18, 0x00	; 0
     858:	30 e0       	ldi	r19, 0x00	; 0
     85a:	40 e0       	ldi	r20, 0x00	; 0
     85c:	50 e0       	ldi	r21, 0x00	; 0
     85e:	2a c0       	rjmp	.+84     	; 0x8b4 <__stack+0x55>
     860:	b8 01       	movw	r22, r16
     862:	a7 01       	movw	r20, r14
     864:	02 2e       	mov	r0, r18
     866:	04 c0       	rjmp	.+8      	; 0x870 <__stack+0x11>
     868:	76 95       	lsr	r23
     86a:	67 95       	ror	r22
     86c:	57 95       	ror	r21
     86e:	47 95       	ror	r20
     870:	0a 94       	dec	r0
     872:	d2 f7       	brpl	.-12     	; 0x868 <__stack+0x9>
     874:	81 e0       	ldi	r24, 0x01	; 1
     876:	90 e0       	ldi	r25, 0x00	; 0
     878:	a0 e0       	ldi	r26, 0x00	; 0
     87a:	b0 e0       	ldi	r27, 0x00	; 0
     87c:	04 c0       	rjmp	.+8      	; 0x886 <__stack+0x27>
     87e:	88 0f       	add	r24, r24
     880:	99 1f       	adc	r25, r25
     882:	aa 1f       	adc	r26, r26
     884:	bb 1f       	adc	r27, r27
     886:	2a 95       	dec	r18
     888:	d2 f7       	brpl	.-12     	; 0x87e <__stack+0x1f>
     88a:	01 97       	sbiw	r24, 0x01	; 1
     88c:	a1 09       	sbc	r26, r1
     88e:	b1 09       	sbc	r27, r1
     890:	8e 21       	and	r24, r14
     892:	9f 21       	and	r25, r15
     894:	a0 23       	and	r26, r16
     896:	b1 23       	and	r27, r17
     898:	00 97       	sbiw	r24, 0x00	; 0
     89a:	a1 05       	cpc	r26, r1
     89c:	b1 05       	cpc	r27, r1
     89e:	21 f0       	breq	.+8      	; 0x8a8 <__stack+0x49>
     8a0:	81 e0       	ldi	r24, 0x01	; 1
     8a2:	90 e0       	ldi	r25, 0x00	; 0
     8a4:	a0 e0       	ldi	r26, 0x00	; 0
     8a6:	b0 e0       	ldi	r27, 0x00	; 0
     8a8:	9a 01       	movw	r18, r20
     8aa:	ab 01       	movw	r20, r22
     8ac:	28 2b       	or	r18, r24
     8ae:	39 2b       	or	r19, r25
     8b0:	4a 2b       	or	r20, r26
     8b2:	5b 2b       	or	r21, r27
     8b4:	da 01       	movw	r26, r20
     8b6:	c9 01       	movw	r24, r18
     8b8:	8f 77       	andi	r24, 0x7F	; 127
     8ba:	90 70       	andi	r25, 0x00	; 0
     8bc:	a0 70       	andi	r26, 0x00	; 0
     8be:	b0 70       	andi	r27, 0x00	; 0
     8c0:	80 34       	cpi	r24, 0x40	; 64
     8c2:	91 05       	cpc	r25, r1
     8c4:	a1 05       	cpc	r26, r1
     8c6:	b1 05       	cpc	r27, r1
     8c8:	39 f4       	brne	.+14     	; 0x8d8 <__stack+0x79>
     8ca:	27 ff       	sbrs	r18, 7
     8cc:	09 c0       	rjmp	.+18     	; 0x8e0 <__stack+0x81>
     8ce:	20 5c       	subi	r18, 0xC0	; 192
     8d0:	3f 4f       	sbci	r19, 0xFF	; 255
     8d2:	4f 4f       	sbci	r20, 0xFF	; 255
     8d4:	5f 4f       	sbci	r21, 0xFF	; 255
     8d6:	04 c0       	rjmp	.+8      	; 0x8e0 <__stack+0x81>
     8d8:	21 5c       	subi	r18, 0xC1	; 193
     8da:	3f 4f       	sbci	r19, 0xFF	; 255
     8dc:	4f 4f       	sbci	r20, 0xFF	; 255
     8de:	5f 4f       	sbci	r21, 0xFF	; 255
     8e0:	e0 e0       	ldi	r30, 0x00	; 0
     8e2:	f0 e0       	ldi	r31, 0x00	; 0
     8e4:	20 30       	cpi	r18, 0x00	; 0
     8e6:	a0 e0       	ldi	r26, 0x00	; 0
     8e8:	3a 07       	cpc	r19, r26
     8ea:	a0 e0       	ldi	r26, 0x00	; 0
     8ec:	4a 07       	cpc	r20, r26
     8ee:	a0 e4       	ldi	r26, 0x40	; 64
     8f0:	5a 07       	cpc	r21, r26
     8f2:	10 f0       	brcs	.+4      	; 0x8f8 <__stack+0x99>
     8f4:	e1 e0       	ldi	r30, 0x01	; 1
     8f6:	f0 e0       	ldi	r31, 0x00	; 0
     8f8:	79 01       	movw	r14, r18
     8fa:	8a 01       	movw	r16, r20
     8fc:	27 c0       	rjmp	.+78     	; 0x94c <__stack+0xed>
     8fe:	60 38       	cpi	r22, 0x80	; 128
     900:	71 05       	cpc	r23, r1
     902:	64 f5       	brge	.+88     	; 0x95c <__stack+0xfd>
     904:	fb 01       	movw	r30, r22
     906:	e1 58       	subi	r30, 0x81	; 129
     908:	ff 4f       	sbci	r31, 0xFF	; 255
     90a:	d8 01       	movw	r26, r16
     90c:	c7 01       	movw	r24, r14
     90e:	8f 77       	andi	r24, 0x7F	; 127
     910:	90 70       	andi	r25, 0x00	; 0
     912:	a0 70       	andi	r26, 0x00	; 0
     914:	b0 70       	andi	r27, 0x00	; 0
     916:	80 34       	cpi	r24, 0x40	; 64
     918:	91 05       	cpc	r25, r1
     91a:	a1 05       	cpc	r26, r1
     91c:	b1 05       	cpc	r27, r1
     91e:	39 f4       	brne	.+14     	; 0x92e <__stack+0xcf>
     920:	e7 fe       	sbrs	r14, 7
     922:	0d c0       	rjmp	.+26     	; 0x93e <__stack+0xdf>
     924:	80 e4       	ldi	r24, 0x40	; 64
     926:	90 e0       	ldi	r25, 0x00	; 0
     928:	a0 e0       	ldi	r26, 0x00	; 0
     92a:	b0 e0       	ldi	r27, 0x00	; 0
     92c:	04 c0       	rjmp	.+8      	; 0x936 <__stack+0xd7>
     92e:	8f e3       	ldi	r24, 0x3F	; 63
     930:	90 e0       	ldi	r25, 0x00	; 0
     932:	a0 e0       	ldi	r26, 0x00	; 0
     934:	b0 e0       	ldi	r27, 0x00	; 0
     936:	e8 0e       	add	r14, r24
     938:	f9 1e       	adc	r15, r25
     93a:	0a 1f       	adc	r16, r26
     93c:	1b 1f       	adc	r17, r27
     93e:	17 ff       	sbrs	r17, 7
     940:	05 c0       	rjmp	.+10     	; 0x94c <__stack+0xed>
     942:	16 95       	lsr	r17
     944:	07 95       	ror	r16
     946:	f7 94       	ror	r15
     948:	e7 94       	ror	r14
     94a:	31 96       	adiw	r30, 0x01	; 1
     94c:	87 e0       	ldi	r24, 0x07	; 7
     94e:	16 95       	lsr	r17
     950:	07 95       	ror	r16
     952:	f7 94       	ror	r15
     954:	e7 94       	ror	r14
     956:	8a 95       	dec	r24
     958:	d1 f7       	brne	.-12     	; 0x94e <__stack+0xef>
     95a:	05 c0       	rjmp	.+10     	; 0x966 <__stack+0x107>
     95c:	ee 24       	eor	r14, r14
     95e:	ff 24       	eor	r15, r15
     960:	87 01       	movw	r16, r14
     962:	ef ef       	ldi	r30, 0xFF	; 255
     964:	f0 e0       	ldi	r31, 0x00	; 0
     966:	6e 2f       	mov	r22, r30
     968:	67 95       	ror	r22
     96a:	66 27       	eor	r22, r22
     96c:	67 95       	ror	r22
     96e:	90 2f       	mov	r25, r16
     970:	9f 77       	andi	r25, 0x7F	; 127
     972:	d7 94       	ror	r13
     974:	dd 24       	eor	r13, r13
     976:	d7 94       	ror	r13
     978:	8e 2f       	mov	r24, r30
     97a:	86 95       	lsr	r24
     97c:	49 2f       	mov	r20, r25
     97e:	46 2b       	or	r20, r22
     980:	58 2f       	mov	r21, r24
     982:	5d 29       	or	r21, r13
     984:	b7 01       	movw	r22, r14
     986:	ca 01       	movw	r24, r20
     988:	1f 91       	pop	r17
     98a:	0f 91       	pop	r16
     98c:	ff 90       	pop	r15
     98e:	ef 90       	pop	r14
     990:	df 90       	pop	r13
     992:	08 95       	ret

00000994 <__unpack_f>:
     994:	fc 01       	movw	r30, r24
     996:	db 01       	movw	r26, r22
     998:	40 81       	ld	r20, Z
     99a:	51 81       	ldd	r21, Z+1	; 0x01
     99c:	22 81       	ldd	r18, Z+2	; 0x02
     99e:	62 2f       	mov	r22, r18
     9a0:	6f 77       	andi	r22, 0x7F	; 127
     9a2:	70 e0       	ldi	r23, 0x00	; 0
     9a4:	22 1f       	adc	r18, r18
     9a6:	22 27       	eor	r18, r18
     9a8:	22 1f       	adc	r18, r18
     9aa:	93 81       	ldd	r25, Z+3	; 0x03
     9ac:	89 2f       	mov	r24, r25
     9ae:	88 0f       	add	r24, r24
     9b0:	82 2b       	or	r24, r18
     9b2:	28 2f       	mov	r18, r24
     9b4:	30 e0       	ldi	r19, 0x00	; 0
     9b6:	99 1f       	adc	r25, r25
     9b8:	99 27       	eor	r25, r25
     9ba:	99 1f       	adc	r25, r25
     9bc:	11 96       	adiw	r26, 0x01	; 1
     9be:	9c 93       	st	X, r25
     9c0:	11 97       	sbiw	r26, 0x01	; 1
     9c2:	21 15       	cp	r18, r1
     9c4:	31 05       	cpc	r19, r1
     9c6:	a9 f5       	brne	.+106    	; 0xa32 <__unpack_f+0x9e>
     9c8:	41 15       	cp	r20, r1
     9ca:	51 05       	cpc	r21, r1
     9cc:	61 05       	cpc	r22, r1
     9ce:	71 05       	cpc	r23, r1
     9d0:	11 f4       	brne	.+4      	; 0x9d6 <__unpack_f+0x42>
     9d2:	82 e0       	ldi	r24, 0x02	; 2
     9d4:	37 c0       	rjmp	.+110    	; 0xa44 <__unpack_f+0xb0>
     9d6:	82 e8       	ldi	r24, 0x82	; 130
     9d8:	9f ef       	ldi	r25, 0xFF	; 255
     9da:	13 96       	adiw	r26, 0x03	; 3
     9dc:	9c 93       	st	X, r25
     9de:	8e 93       	st	-X, r24
     9e0:	12 97       	sbiw	r26, 0x02	; 2
     9e2:	9a 01       	movw	r18, r20
     9e4:	ab 01       	movw	r20, r22
     9e6:	67 e0       	ldi	r22, 0x07	; 7
     9e8:	22 0f       	add	r18, r18
     9ea:	33 1f       	adc	r19, r19
     9ec:	44 1f       	adc	r20, r20
     9ee:	55 1f       	adc	r21, r21
     9f0:	6a 95       	dec	r22
     9f2:	d1 f7       	brne	.-12     	; 0x9e8 <__unpack_f+0x54>
     9f4:	83 e0       	ldi	r24, 0x03	; 3
     9f6:	8c 93       	st	X, r24
     9f8:	0d c0       	rjmp	.+26     	; 0xa14 <__unpack_f+0x80>
     9fa:	22 0f       	add	r18, r18
     9fc:	33 1f       	adc	r19, r19
     9fe:	44 1f       	adc	r20, r20
     a00:	55 1f       	adc	r21, r21
     a02:	12 96       	adiw	r26, 0x02	; 2
     a04:	8d 91       	ld	r24, X+
     a06:	9c 91       	ld	r25, X
     a08:	13 97       	sbiw	r26, 0x03	; 3
     a0a:	01 97       	sbiw	r24, 0x01	; 1
     a0c:	13 96       	adiw	r26, 0x03	; 3
     a0e:	9c 93       	st	X, r25
     a10:	8e 93       	st	-X, r24
     a12:	12 97       	sbiw	r26, 0x02	; 2
     a14:	20 30       	cpi	r18, 0x00	; 0
     a16:	80 e0       	ldi	r24, 0x00	; 0
     a18:	38 07       	cpc	r19, r24
     a1a:	80 e0       	ldi	r24, 0x00	; 0
     a1c:	48 07       	cpc	r20, r24
     a1e:	80 e4       	ldi	r24, 0x40	; 64
     a20:	58 07       	cpc	r21, r24
     a22:	58 f3       	brcs	.-42     	; 0x9fa <__unpack_f+0x66>
     a24:	14 96       	adiw	r26, 0x04	; 4
     a26:	2d 93       	st	X+, r18
     a28:	3d 93       	st	X+, r19
     a2a:	4d 93       	st	X+, r20
     a2c:	5c 93       	st	X, r21
     a2e:	17 97       	sbiw	r26, 0x07	; 7
     a30:	08 95       	ret
     a32:	2f 3f       	cpi	r18, 0xFF	; 255
     a34:	31 05       	cpc	r19, r1
     a36:	79 f4       	brne	.+30     	; 0xa56 <__unpack_f+0xc2>
     a38:	41 15       	cp	r20, r1
     a3a:	51 05       	cpc	r21, r1
     a3c:	61 05       	cpc	r22, r1
     a3e:	71 05       	cpc	r23, r1
     a40:	19 f4       	brne	.+6      	; 0xa48 <__unpack_f+0xb4>
     a42:	84 e0       	ldi	r24, 0x04	; 4
     a44:	8c 93       	st	X, r24
     a46:	08 95       	ret
     a48:	64 ff       	sbrs	r22, 4
     a4a:	03 c0       	rjmp	.+6      	; 0xa52 <__unpack_f+0xbe>
     a4c:	81 e0       	ldi	r24, 0x01	; 1
     a4e:	8c 93       	st	X, r24
     a50:	12 c0       	rjmp	.+36     	; 0xa76 <__unpack_f+0xe2>
     a52:	1c 92       	st	X, r1
     a54:	10 c0       	rjmp	.+32     	; 0xa76 <__unpack_f+0xe2>
     a56:	2f 57       	subi	r18, 0x7F	; 127
     a58:	30 40       	sbci	r19, 0x00	; 0
     a5a:	13 96       	adiw	r26, 0x03	; 3
     a5c:	3c 93       	st	X, r19
     a5e:	2e 93       	st	-X, r18
     a60:	12 97       	sbiw	r26, 0x02	; 2
     a62:	83 e0       	ldi	r24, 0x03	; 3
     a64:	8c 93       	st	X, r24
     a66:	87 e0       	ldi	r24, 0x07	; 7
     a68:	44 0f       	add	r20, r20
     a6a:	55 1f       	adc	r21, r21
     a6c:	66 1f       	adc	r22, r22
     a6e:	77 1f       	adc	r23, r23
     a70:	8a 95       	dec	r24
     a72:	d1 f7       	brne	.-12     	; 0xa68 <__unpack_f+0xd4>
     a74:	70 64       	ori	r23, 0x40	; 64
     a76:	14 96       	adiw	r26, 0x04	; 4
     a78:	4d 93       	st	X+, r20
     a7a:	5d 93       	st	X+, r21
     a7c:	6d 93       	st	X+, r22
     a7e:	7c 93       	st	X, r23
     a80:	17 97       	sbiw	r26, 0x07	; 7
     a82:	08 95       	ret

00000a84 <__fpcmp_parts_f>:
     a84:	1f 93       	push	r17
     a86:	dc 01       	movw	r26, r24
     a88:	fb 01       	movw	r30, r22
     a8a:	9c 91       	ld	r25, X
     a8c:	92 30       	cpi	r25, 0x02	; 2
     a8e:	08 f4       	brcc	.+2      	; 0xa92 <__fpcmp_parts_f+0xe>
     a90:	47 c0       	rjmp	.+142    	; 0xb20 <__fpcmp_parts_f+0x9c>
     a92:	80 81       	ld	r24, Z
     a94:	82 30       	cpi	r24, 0x02	; 2
     a96:	08 f4       	brcc	.+2      	; 0xa9a <__fpcmp_parts_f+0x16>
     a98:	43 c0       	rjmp	.+134    	; 0xb20 <__fpcmp_parts_f+0x9c>
     a9a:	94 30       	cpi	r25, 0x04	; 4
     a9c:	51 f4       	brne	.+20     	; 0xab2 <__fpcmp_parts_f+0x2e>
     a9e:	11 96       	adiw	r26, 0x01	; 1
     aa0:	1c 91       	ld	r17, X
     aa2:	84 30       	cpi	r24, 0x04	; 4
     aa4:	99 f5       	brne	.+102    	; 0xb0c <__fpcmp_parts_f+0x88>
     aa6:	81 81       	ldd	r24, Z+1	; 0x01
     aa8:	68 2f       	mov	r22, r24
     aaa:	70 e0       	ldi	r23, 0x00	; 0
     aac:	61 1b       	sub	r22, r17
     aae:	71 09       	sbc	r23, r1
     ab0:	3f c0       	rjmp	.+126    	; 0xb30 <__fpcmp_parts_f+0xac>
     ab2:	84 30       	cpi	r24, 0x04	; 4
     ab4:	21 f0       	breq	.+8      	; 0xabe <__fpcmp_parts_f+0x3a>
     ab6:	92 30       	cpi	r25, 0x02	; 2
     ab8:	31 f4       	brne	.+12     	; 0xac6 <__fpcmp_parts_f+0x42>
     aba:	82 30       	cpi	r24, 0x02	; 2
     abc:	b9 f1       	breq	.+110    	; 0xb2c <__fpcmp_parts_f+0xa8>
     abe:	81 81       	ldd	r24, Z+1	; 0x01
     ac0:	88 23       	and	r24, r24
     ac2:	89 f1       	breq	.+98     	; 0xb26 <__fpcmp_parts_f+0xa2>
     ac4:	2d c0       	rjmp	.+90     	; 0xb20 <__fpcmp_parts_f+0x9c>
     ac6:	11 96       	adiw	r26, 0x01	; 1
     ac8:	1c 91       	ld	r17, X
     aca:	11 97       	sbiw	r26, 0x01	; 1
     acc:	82 30       	cpi	r24, 0x02	; 2
     ace:	f1 f0       	breq	.+60     	; 0xb0c <__fpcmp_parts_f+0x88>
     ad0:	81 81       	ldd	r24, Z+1	; 0x01
     ad2:	18 17       	cp	r17, r24
     ad4:	d9 f4       	brne	.+54     	; 0xb0c <__fpcmp_parts_f+0x88>
     ad6:	12 96       	adiw	r26, 0x02	; 2
     ad8:	2d 91       	ld	r18, X+
     ada:	3c 91       	ld	r19, X
     adc:	13 97       	sbiw	r26, 0x03	; 3
     ade:	82 81       	ldd	r24, Z+2	; 0x02
     ae0:	93 81       	ldd	r25, Z+3	; 0x03
     ae2:	82 17       	cp	r24, r18
     ae4:	93 07       	cpc	r25, r19
     ae6:	94 f0       	brlt	.+36     	; 0xb0c <__fpcmp_parts_f+0x88>
     ae8:	28 17       	cp	r18, r24
     aea:	39 07       	cpc	r19, r25
     aec:	bc f0       	brlt	.+46     	; 0xb1c <__fpcmp_parts_f+0x98>
     aee:	14 96       	adiw	r26, 0x04	; 4
     af0:	8d 91       	ld	r24, X+
     af2:	9d 91       	ld	r25, X+
     af4:	0d 90       	ld	r0, X+
     af6:	bc 91       	ld	r27, X
     af8:	a0 2d       	mov	r26, r0
     afa:	24 81       	ldd	r18, Z+4	; 0x04
     afc:	35 81       	ldd	r19, Z+5	; 0x05
     afe:	46 81       	ldd	r20, Z+6	; 0x06
     b00:	57 81       	ldd	r21, Z+7	; 0x07
     b02:	28 17       	cp	r18, r24
     b04:	39 07       	cpc	r19, r25
     b06:	4a 07       	cpc	r20, r26
     b08:	5b 07       	cpc	r21, r27
     b0a:	18 f4       	brcc	.+6      	; 0xb12 <__fpcmp_parts_f+0x8e>
     b0c:	11 23       	and	r17, r17
     b0e:	41 f0       	breq	.+16     	; 0xb20 <__fpcmp_parts_f+0x9c>
     b10:	0a c0       	rjmp	.+20     	; 0xb26 <__fpcmp_parts_f+0xa2>
     b12:	82 17       	cp	r24, r18
     b14:	93 07       	cpc	r25, r19
     b16:	a4 07       	cpc	r26, r20
     b18:	b5 07       	cpc	r27, r21
     b1a:	40 f4       	brcc	.+16     	; 0xb2c <__fpcmp_parts_f+0xa8>
     b1c:	11 23       	and	r17, r17
     b1e:	19 f0       	breq	.+6      	; 0xb26 <__fpcmp_parts_f+0xa2>
     b20:	61 e0       	ldi	r22, 0x01	; 1
     b22:	70 e0       	ldi	r23, 0x00	; 0
     b24:	05 c0       	rjmp	.+10     	; 0xb30 <__fpcmp_parts_f+0xac>
     b26:	6f ef       	ldi	r22, 0xFF	; 255
     b28:	7f ef       	ldi	r23, 0xFF	; 255
     b2a:	02 c0       	rjmp	.+4      	; 0xb30 <__fpcmp_parts_f+0xac>
     b2c:	60 e0       	ldi	r22, 0x00	; 0
     b2e:	70 e0       	ldi	r23, 0x00	; 0
     b30:	cb 01       	movw	r24, r22
     b32:	1f 91       	pop	r17
     b34:	08 95       	ret

00000b36 <DIO_SetPinMode>:
#include "std_types.h"
#include "macros.h"
#include "DIO.h"

void DIO_SetPinMode(DIO_PortType port, DIO_PinType pin, DIO_ModeType mode) {
     b36:	df 93       	push	r29
     b38:	cf 93       	push	r28
     b3a:	cd b7       	in	r28, 0x3d	; 61
     b3c:	de b7       	in	r29, 0x3e	; 62
     b3e:	29 97       	sbiw	r28, 0x09	; 9
     b40:	0f b6       	in	r0, 0x3f	; 63
     b42:	f8 94       	cli
     b44:	de bf       	out	0x3e, r29	; 62
     b46:	0f be       	out	0x3f, r0	; 63
     b48:	cd bf       	out	0x3d, r28	; 61
     b4a:	89 83       	std	Y+1, r24	; 0x01
     b4c:	6a 83       	std	Y+2, r22	; 0x02
     b4e:	4b 83       	std	Y+3, r20	; 0x03
    if (mode == DIO_INPUT_FLOATING)
     b50:	8b 81       	ldd	r24, Y+3	; 0x03
     b52:	88 23       	and	r24, r24
     b54:	09 f0       	breq	.+2      	; 0xb58 <DIO_SetPinMode+0x22>
     b56:	c2 c0       	rjmp	.+388    	; 0xcdc <DIO_SetPinMode+0x1a6>
    {
        switch (port)
     b58:	89 81       	ldd	r24, Y+1	; 0x01
     b5a:	28 2f       	mov	r18, r24
     b5c:	30 e0       	ldi	r19, 0x00	; 0
     b5e:	39 87       	std	Y+9, r19	; 0x09
     b60:	28 87       	std	Y+8, r18	; 0x08
     b62:	88 85       	ldd	r24, Y+8	; 0x08
     b64:	99 85       	ldd	r25, Y+9	; 0x09
     b66:	81 30       	cpi	r24, 0x01	; 1
     b68:	91 05       	cpc	r25, r1
     b6a:	09 f4       	brne	.+2      	; 0xb6e <DIO_SetPinMode+0x38>
     b6c:	3f c0       	rjmp	.+126    	; 0xbec <DIO_SetPinMode+0xb6>
     b6e:	28 85       	ldd	r18, Y+8	; 0x08
     b70:	39 85       	ldd	r19, Y+9	; 0x09
     b72:	22 30       	cpi	r18, 0x02	; 2
     b74:	31 05       	cpc	r19, r1
     b76:	2c f4       	brge	.+10     	; 0xb82 <DIO_SetPinMode+0x4c>
     b78:	88 85       	ldd	r24, Y+8	; 0x08
     b7a:	99 85       	ldd	r25, Y+9	; 0x09
     b7c:	00 97       	sbiw	r24, 0x00	; 0
     b7e:	71 f0       	breq	.+28     	; 0xb9c <DIO_SetPinMode+0x66>
     b80:	e1 c1       	rjmp	.+962    	; 0xf44 <DIO_SetPinMode+0x40e>
     b82:	28 85       	ldd	r18, Y+8	; 0x08
     b84:	39 85       	ldd	r19, Y+9	; 0x09
     b86:	22 30       	cpi	r18, 0x02	; 2
     b88:	31 05       	cpc	r19, r1
     b8a:	09 f4       	brne	.+2      	; 0xb8e <DIO_SetPinMode+0x58>
     b8c:	57 c0       	rjmp	.+174    	; 0xc3c <DIO_SetPinMode+0x106>
     b8e:	88 85       	ldd	r24, Y+8	; 0x08
     b90:	99 85       	ldd	r25, Y+9	; 0x09
     b92:	83 30       	cpi	r24, 0x03	; 3
     b94:	91 05       	cpc	r25, r1
     b96:	09 f4       	brne	.+2      	; 0xb9a <DIO_SetPinMode+0x64>
     b98:	79 c0       	rjmp	.+242    	; 0xc8c <DIO_SetPinMode+0x156>
     b9a:	d4 c1       	rjmp	.+936    	; 0xf44 <DIO_SetPinMode+0x40e>
        {
        case DIO_PORTA:
            CLR_BIT(DDRA, pin);
     b9c:	aa e3       	ldi	r26, 0x3A	; 58
     b9e:	b0 e0       	ldi	r27, 0x00	; 0
     ba0:	ea e3       	ldi	r30, 0x3A	; 58
     ba2:	f0 e0       	ldi	r31, 0x00	; 0
     ba4:	80 81       	ld	r24, Z
     ba6:	48 2f       	mov	r20, r24
     ba8:	8a 81       	ldd	r24, Y+2	; 0x02
     baa:	28 2f       	mov	r18, r24
     bac:	30 e0       	ldi	r19, 0x00	; 0
     bae:	81 e0       	ldi	r24, 0x01	; 1
     bb0:	90 e0       	ldi	r25, 0x00	; 0
     bb2:	02 c0       	rjmp	.+4      	; 0xbb8 <DIO_SetPinMode+0x82>
     bb4:	88 0f       	add	r24, r24
     bb6:	99 1f       	adc	r25, r25
     bb8:	2a 95       	dec	r18
     bba:	e2 f7       	brpl	.-8      	; 0xbb4 <DIO_SetPinMode+0x7e>
     bbc:	80 95       	com	r24
     bbe:	84 23       	and	r24, r20
     bc0:	8c 93       	st	X, r24
            CLR_BIT(PORTA, pin);
     bc2:	ab e3       	ldi	r26, 0x3B	; 59
     bc4:	b0 e0       	ldi	r27, 0x00	; 0
     bc6:	eb e3       	ldi	r30, 0x3B	; 59
     bc8:	f0 e0       	ldi	r31, 0x00	; 0
     bca:	80 81       	ld	r24, Z
     bcc:	48 2f       	mov	r20, r24
     bce:	8a 81       	ldd	r24, Y+2	; 0x02
     bd0:	28 2f       	mov	r18, r24
     bd2:	30 e0       	ldi	r19, 0x00	; 0
     bd4:	81 e0       	ldi	r24, 0x01	; 1
     bd6:	90 e0       	ldi	r25, 0x00	; 0
     bd8:	02 2e       	mov	r0, r18
     bda:	02 c0       	rjmp	.+4      	; 0xbe0 <DIO_SetPinMode+0xaa>
     bdc:	88 0f       	add	r24, r24
     bde:	99 1f       	adc	r25, r25
     be0:	0a 94       	dec	r0
     be2:	e2 f7       	brpl	.-8      	; 0xbdc <DIO_SetPinMode+0xa6>
     be4:	80 95       	com	r24
     be6:	84 23       	and	r24, r20
     be8:	8c 93       	st	X, r24
     bea:	ac c1       	rjmp	.+856    	; 0xf44 <DIO_SetPinMode+0x40e>
            break;
        case DIO_PORTB:
            CLR_BIT(DDRB, pin);
     bec:	a7 e3       	ldi	r26, 0x37	; 55
     bee:	b0 e0       	ldi	r27, 0x00	; 0
     bf0:	e7 e3       	ldi	r30, 0x37	; 55
     bf2:	f0 e0       	ldi	r31, 0x00	; 0
     bf4:	80 81       	ld	r24, Z
     bf6:	48 2f       	mov	r20, r24
     bf8:	8a 81       	ldd	r24, Y+2	; 0x02
     bfa:	28 2f       	mov	r18, r24
     bfc:	30 e0       	ldi	r19, 0x00	; 0
     bfe:	81 e0       	ldi	r24, 0x01	; 1
     c00:	90 e0       	ldi	r25, 0x00	; 0
     c02:	02 c0       	rjmp	.+4      	; 0xc08 <DIO_SetPinMode+0xd2>
     c04:	88 0f       	add	r24, r24
     c06:	99 1f       	adc	r25, r25
     c08:	2a 95       	dec	r18
     c0a:	e2 f7       	brpl	.-8      	; 0xc04 <DIO_SetPinMode+0xce>
     c0c:	80 95       	com	r24
     c0e:	84 23       	and	r24, r20
     c10:	8c 93       	st	X, r24
            CLR_BIT(PORTB, pin);
     c12:	a8 e3       	ldi	r26, 0x38	; 56
     c14:	b0 e0       	ldi	r27, 0x00	; 0
     c16:	e8 e3       	ldi	r30, 0x38	; 56
     c18:	f0 e0       	ldi	r31, 0x00	; 0
     c1a:	80 81       	ld	r24, Z
     c1c:	48 2f       	mov	r20, r24
     c1e:	8a 81       	ldd	r24, Y+2	; 0x02
     c20:	28 2f       	mov	r18, r24
     c22:	30 e0       	ldi	r19, 0x00	; 0
     c24:	81 e0       	ldi	r24, 0x01	; 1
     c26:	90 e0       	ldi	r25, 0x00	; 0
     c28:	02 2e       	mov	r0, r18
     c2a:	02 c0       	rjmp	.+4      	; 0xc30 <DIO_SetPinMode+0xfa>
     c2c:	88 0f       	add	r24, r24
     c2e:	99 1f       	adc	r25, r25
     c30:	0a 94       	dec	r0
     c32:	e2 f7       	brpl	.-8      	; 0xc2c <DIO_SetPinMode+0xf6>
     c34:	80 95       	com	r24
     c36:	84 23       	and	r24, r20
     c38:	8c 93       	st	X, r24
     c3a:	84 c1       	rjmp	.+776    	; 0xf44 <DIO_SetPinMode+0x40e>
            break;
        case DIO_PORTC:
            CLR_BIT(DDRC, pin);
     c3c:	a4 e3       	ldi	r26, 0x34	; 52
     c3e:	b0 e0       	ldi	r27, 0x00	; 0
     c40:	e4 e3       	ldi	r30, 0x34	; 52
     c42:	f0 e0       	ldi	r31, 0x00	; 0
     c44:	80 81       	ld	r24, Z
     c46:	48 2f       	mov	r20, r24
     c48:	8a 81       	ldd	r24, Y+2	; 0x02
     c4a:	28 2f       	mov	r18, r24
     c4c:	30 e0       	ldi	r19, 0x00	; 0
     c4e:	81 e0       	ldi	r24, 0x01	; 1
     c50:	90 e0       	ldi	r25, 0x00	; 0
     c52:	02 c0       	rjmp	.+4      	; 0xc58 <DIO_SetPinMode+0x122>
     c54:	88 0f       	add	r24, r24
     c56:	99 1f       	adc	r25, r25
     c58:	2a 95       	dec	r18
     c5a:	e2 f7       	brpl	.-8      	; 0xc54 <DIO_SetPinMode+0x11e>
     c5c:	80 95       	com	r24
     c5e:	84 23       	and	r24, r20
     c60:	8c 93       	st	X, r24
            CLR_BIT(PORTC, pin);
     c62:	a5 e3       	ldi	r26, 0x35	; 53
     c64:	b0 e0       	ldi	r27, 0x00	; 0
     c66:	e5 e3       	ldi	r30, 0x35	; 53
     c68:	f0 e0       	ldi	r31, 0x00	; 0
     c6a:	80 81       	ld	r24, Z
     c6c:	48 2f       	mov	r20, r24
     c6e:	8a 81       	ldd	r24, Y+2	; 0x02
     c70:	28 2f       	mov	r18, r24
     c72:	30 e0       	ldi	r19, 0x00	; 0
     c74:	81 e0       	ldi	r24, 0x01	; 1
     c76:	90 e0       	ldi	r25, 0x00	; 0
     c78:	02 2e       	mov	r0, r18
     c7a:	02 c0       	rjmp	.+4      	; 0xc80 <DIO_SetPinMode+0x14a>
     c7c:	88 0f       	add	r24, r24
     c7e:	99 1f       	adc	r25, r25
     c80:	0a 94       	dec	r0
     c82:	e2 f7       	brpl	.-8      	; 0xc7c <DIO_SetPinMode+0x146>
     c84:	80 95       	com	r24
     c86:	84 23       	and	r24, r20
     c88:	8c 93       	st	X, r24
     c8a:	5c c1       	rjmp	.+696    	; 0xf44 <DIO_SetPinMode+0x40e>
            break;
        case DIO_PORTD:
            CLR_BIT(DDRD, pin);
     c8c:	a1 e3       	ldi	r26, 0x31	; 49
     c8e:	b0 e0       	ldi	r27, 0x00	; 0
     c90:	e1 e3       	ldi	r30, 0x31	; 49
     c92:	f0 e0       	ldi	r31, 0x00	; 0
     c94:	80 81       	ld	r24, Z
     c96:	48 2f       	mov	r20, r24
     c98:	8a 81       	ldd	r24, Y+2	; 0x02
     c9a:	28 2f       	mov	r18, r24
     c9c:	30 e0       	ldi	r19, 0x00	; 0
     c9e:	81 e0       	ldi	r24, 0x01	; 1
     ca0:	90 e0       	ldi	r25, 0x00	; 0
     ca2:	02 c0       	rjmp	.+4      	; 0xca8 <DIO_SetPinMode+0x172>
     ca4:	88 0f       	add	r24, r24
     ca6:	99 1f       	adc	r25, r25
     ca8:	2a 95       	dec	r18
     caa:	e2 f7       	brpl	.-8      	; 0xca4 <DIO_SetPinMode+0x16e>
     cac:	80 95       	com	r24
     cae:	84 23       	and	r24, r20
     cb0:	8c 93       	st	X, r24
            CLR_BIT(PORTD, pin);
     cb2:	a2 e3       	ldi	r26, 0x32	; 50
     cb4:	b0 e0       	ldi	r27, 0x00	; 0
     cb6:	e2 e3       	ldi	r30, 0x32	; 50
     cb8:	f0 e0       	ldi	r31, 0x00	; 0
     cba:	80 81       	ld	r24, Z
     cbc:	48 2f       	mov	r20, r24
     cbe:	8a 81       	ldd	r24, Y+2	; 0x02
     cc0:	28 2f       	mov	r18, r24
     cc2:	30 e0       	ldi	r19, 0x00	; 0
     cc4:	81 e0       	ldi	r24, 0x01	; 1
     cc6:	90 e0       	ldi	r25, 0x00	; 0
     cc8:	02 2e       	mov	r0, r18
     cca:	02 c0       	rjmp	.+4      	; 0xcd0 <DIO_SetPinMode+0x19a>
     ccc:	88 0f       	add	r24, r24
     cce:	99 1f       	adc	r25, r25
     cd0:	0a 94       	dec	r0
     cd2:	e2 f7       	brpl	.-8      	; 0xccc <DIO_SetPinMode+0x196>
     cd4:	80 95       	com	r24
     cd6:	84 23       	and	r24, r20
     cd8:	8c 93       	st	X, r24
     cda:	34 c1       	rjmp	.+616    	; 0xf44 <DIO_SetPinMode+0x40e>
            break;
        default:
            break;
        }
    }
    else if (mode == DIO_INPUT_PULLUP)
     cdc:	8b 81       	ldd	r24, Y+3	; 0x03
     cde:	81 30       	cpi	r24, 0x01	; 1
     ce0:	09 f0       	breq	.+2      	; 0xce4 <DIO_SetPinMode+0x1ae>
     ce2:	be c0       	rjmp	.+380    	; 0xe60 <DIO_SetPinMode+0x32a>
    {
        switch (port)
     ce4:	89 81       	ldd	r24, Y+1	; 0x01
     ce6:	28 2f       	mov	r18, r24
     ce8:	30 e0       	ldi	r19, 0x00	; 0
     cea:	3f 83       	std	Y+7, r19	; 0x07
     cec:	2e 83       	std	Y+6, r18	; 0x06
     cee:	8e 81       	ldd	r24, Y+6	; 0x06
     cf0:	9f 81       	ldd	r25, Y+7	; 0x07
     cf2:	81 30       	cpi	r24, 0x01	; 1
     cf4:	91 05       	cpc	r25, r1
     cf6:	09 f4       	brne	.+2      	; 0xcfa <DIO_SetPinMode+0x1c4>
     cf8:	3e c0       	rjmp	.+124    	; 0xd76 <DIO_SetPinMode+0x240>
     cfa:	2e 81       	ldd	r18, Y+6	; 0x06
     cfc:	3f 81       	ldd	r19, Y+7	; 0x07
     cfe:	22 30       	cpi	r18, 0x02	; 2
     d00:	31 05       	cpc	r19, r1
     d02:	2c f4       	brge	.+10     	; 0xd0e <DIO_SetPinMode+0x1d8>
     d04:	8e 81       	ldd	r24, Y+6	; 0x06
     d06:	9f 81       	ldd	r25, Y+7	; 0x07
     d08:	00 97       	sbiw	r24, 0x00	; 0
     d0a:	71 f0       	breq	.+28     	; 0xd28 <DIO_SetPinMode+0x1f2>
     d0c:	1b c1       	rjmp	.+566    	; 0xf44 <DIO_SetPinMode+0x40e>
     d0e:	2e 81       	ldd	r18, Y+6	; 0x06
     d10:	3f 81       	ldd	r19, Y+7	; 0x07
     d12:	22 30       	cpi	r18, 0x02	; 2
     d14:	31 05       	cpc	r19, r1
     d16:	09 f4       	brne	.+2      	; 0xd1a <DIO_SetPinMode+0x1e4>
     d18:	55 c0       	rjmp	.+170    	; 0xdc4 <DIO_SetPinMode+0x28e>
     d1a:	8e 81       	ldd	r24, Y+6	; 0x06
     d1c:	9f 81       	ldd	r25, Y+7	; 0x07
     d1e:	83 30       	cpi	r24, 0x03	; 3
     d20:	91 05       	cpc	r25, r1
     d22:	09 f4       	brne	.+2      	; 0xd26 <DIO_SetPinMode+0x1f0>
     d24:	76 c0       	rjmp	.+236    	; 0xe12 <DIO_SetPinMode+0x2dc>
     d26:	0e c1       	rjmp	.+540    	; 0xf44 <DIO_SetPinMode+0x40e>
        {
        case DIO_PORTA:
            CLR_BIT(DDRA, pin);
     d28:	aa e3       	ldi	r26, 0x3A	; 58
     d2a:	b0 e0       	ldi	r27, 0x00	; 0
     d2c:	ea e3       	ldi	r30, 0x3A	; 58
     d2e:	f0 e0       	ldi	r31, 0x00	; 0
     d30:	80 81       	ld	r24, Z
     d32:	48 2f       	mov	r20, r24
     d34:	8a 81       	ldd	r24, Y+2	; 0x02
     d36:	28 2f       	mov	r18, r24
     d38:	30 e0       	ldi	r19, 0x00	; 0
     d3a:	81 e0       	ldi	r24, 0x01	; 1
     d3c:	90 e0       	ldi	r25, 0x00	; 0
     d3e:	02 c0       	rjmp	.+4      	; 0xd44 <DIO_SetPinMode+0x20e>
     d40:	88 0f       	add	r24, r24
     d42:	99 1f       	adc	r25, r25
     d44:	2a 95       	dec	r18
     d46:	e2 f7       	brpl	.-8      	; 0xd40 <DIO_SetPinMode+0x20a>
     d48:	80 95       	com	r24
     d4a:	84 23       	and	r24, r20
     d4c:	8c 93       	st	X, r24
            SET_BIT(PORTA, pin);
     d4e:	ab e3       	ldi	r26, 0x3B	; 59
     d50:	b0 e0       	ldi	r27, 0x00	; 0
     d52:	eb e3       	ldi	r30, 0x3B	; 59
     d54:	f0 e0       	ldi	r31, 0x00	; 0
     d56:	80 81       	ld	r24, Z
     d58:	48 2f       	mov	r20, r24
     d5a:	8a 81       	ldd	r24, Y+2	; 0x02
     d5c:	28 2f       	mov	r18, r24
     d5e:	30 e0       	ldi	r19, 0x00	; 0
     d60:	81 e0       	ldi	r24, 0x01	; 1
     d62:	90 e0       	ldi	r25, 0x00	; 0
     d64:	02 2e       	mov	r0, r18
     d66:	02 c0       	rjmp	.+4      	; 0xd6c <DIO_SetPinMode+0x236>
     d68:	88 0f       	add	r24, r24
     d6a:	99 1f       	adc	r25, r25
     d6c:	0a 94       	dec	r0
     d6e:	e2 f7       	brpl	.-8      	; 0xd68 <DIO_SetPinMode+0x232>
     d70:	84 2b       	or	r24, r20
     d72:	8c 93       	st	X, r24
     d74:	e7 c0       	rjmp	.+462    	; 0xf44 <DIO_SetPinMode+0x40e>
            break;
        case DIO_PORTB:
            CLR_BIT(DDRB, pin);
     d76:	a7 e3       	ldi	r26, 0x37	; 55
     d78:	b0 e0       	ldi	r27, 0x00	; 0
     d7a:	e7 e3       	ldi	r30, 0x37	; 55
     d7c:	f0 e0       	ldi	r31, 0x00	; 0
     d7e:	80 81       	ld	r24, Z
     d80:	48 2f       	mov	r20, r24
     d82:	8a 81       	ldd	r24, Y+2	; 0x02
     d84:	28 2f       	mov	r18, r24
     d86:	30 e0       	ldi	r19, 0x00	; 0
     d88:	81 e0       	ldi	r24, 0x01	; 1
     d8a:	90 e0       	ldi	r25, 0x00	; 0
     d8c:	02 c0       	rjmp	.+4      	; 0xd92 <DIO_SetPinMode+0x25c>
     d8e:	88 0f       	add	r24, r24
     d90:	99 1f       	adc	r25, r25
     d92:	2a 95       	dec	r18
     d94:	e2 f7       	brpl	.-8      	; 0xd8e <DIO_SetPinMode+0x258>
     d96:	80 95       	com	r24
     d98:	84 23       	and	r24, r20
     d9a:	8c 93       	st	X, r24
            SET_BIT(PORTB, pin);
     d9c:	a8 e3       	ldi	r26, 0x38	; 56
     d9e:	b0 e0       	ldi	r27, 0x00	; 0
     da0:	e8 e3       	ldi	r30, 0x38	; 56
     da2:	f0 e0       	ldi	r31, 0x00	; 0
     da4:	80 81       	ld	r24, Z
     da6:	48 2f       	mov	r20, r24
     da8:	8a 81       	ldd	r24, Y+2	; 0x02
     daa:	28 2f       	mov	r18, r24
     dac:	30 e0       	ldi	r19, 0x00	; 0
     dae:	81 e0       	ldi	r24, 0x01	; 1
     db0:	90 e0       	ldi	r25, 0x00	; 0
     db2:	02 2e       	mov	r0, r18
     db4:	02 c0       	rjmp	.+4      	; 0xdba <DIO_SetPinMode+0x284>
     db6:	88 0f       	add	r24, r24
     db8:	99 1f       	adc	r25, r25
     dba:	0a 94       	dec	r0
     dbc:	e2 f7       	brpl	.-8      	; 0xdb6 <DIO_SetPinMode+0x280>
     dbe:	84 2b       	or	r24, r20
     dc0:	8c 93       	st	X, r24
     dc2:	c0 c0       	rjmp	.+384    	; 0xf44 <DIO_SetPinMode+0x40e>
            break;
        case DIO_PORTC:
            CLR_BIT(DDRC, pin);
     dc4:	a4 e3       	ldi	r26, 0x34	; 52
     dc6:	b0 e0       	ldi	r27, 0x00	; 0
     dc8:	e4 e3       	ldi	r30, 0x34	; 52
     dca:	f0 e0       	ldi	r31, 0x00	; 0
     dcc:	80 81       	ld	r24, Z
     dce:	48 2f       	mov	r20, r24
     dd0:	8a 81       	ldd	r24, Y+2	; 0x02
     dd2:	28 2f       	mov	r18, r24
     dd4:	30 e0       	ldi	r19, 0x00	; 0
     dd6:	81 e0       	ldi	r24, 0x01	; 1
     dd8:	90 e0       	ldi	r25, 0x00	; 0
     dda:	02 c0       	rjmp	.+4      	; 0xde0 <DIO_SetPinMode+0x2aa>
     ddc:	88 0f       	add	r24, r24
     dde:	99 1f       	adc	r25, r25
     de0:	2a 95       	dec	r18
     de2:	e2 f7       	brpl	.-8      	; 0xddc <DIO_SetPinMode+0x2a6>
     de4:	80 95       	com	r24
     de6:	84 23       	and	r24, r20
     de8:	8c 93       	st	X, r24
            SET_BIT(PORTC, pin);
     dea:	a5 e3       	ldi	r26, 0x35	; 53
     dec:	b0 e0       	ldi	r27, 0x00	; 0
     dee:	e5 e3       	ldi	r30, 0x35	; 53
     df0:	f0 e0       	ldi	r31, 0x00	; 0
     df2:	80 81       	ld	r24, Z
     df4:	48 2f       	mov	r20, r24
     df6:	8a 81       	ldd	r24, Y+2	; 0x02
     df8:	28 2f       	mov	r18, r24
     dfa:	30 e0       	ldi	r19, 0x00	; 0
     dfc:	81 e0       	ldi	r24, 0x01	; 1
     dfe:	90 e0       	ldi	r25, 0x00	; 0
     e00:	02 2e       	mov	r0, r18
     e02:	02 c0       	rjmp	.+4      	; 0xe08 <DIO_SetPinMode+0x2d2>
     e04:	88 0f       	add	r24, r24
     e06:	99 1f       	adc	r25, r25
     e08:	0a 94       	dec	r0
     e0a:	e2 f7       	brpl	.-8      	; 0xe04 <DIO_SetPinMode+0x2ce>
     e0c:	84 2b       	or	r24, r20
     e0e:	8c 93       	st	X, r24
     e10:	99 c0       	rjmp	.+306    	; 0xf44 <DIO_SetPinMode+0x40e>
            break;
        case DIO_PORTD:
            CLR_BIT(DDRD, pin);
     e12:	a1 e3       	ldi	r26, 0x31	; 49
     e14:	b0 e0       	ldi	r27, 0x00	; 0
     e16:	e1 e3       	ldi	r30, 0x31	; 49
     e18:	f0 e0       	ldi	r31, 0x00	; 0
     e1a:	80 81       	ld	r24, Z
     e1c:	48 2f       	mov	r20, r24
     e1e:	8a 81       	ldd	r24, Y+2	; 0x02
     e20:	28 2f       	mov	r18, r24
     e22:	30 e0       	ldi	r19, 0x00	; 0
     e24:	81 e0       	ldi	r24, 0x01	; 1
     e26:	90 e0       	ldi	r25, 0x00	; 0
     e28:	02 c0       	rjmp	.+4      	; 0xe2e <DIO_SetPinMode+0x2f8>
     e2a:	88 0f       	add	r24, r24
     e2c:	99 1f       	adc	r25, r25
     e2e:	2a 95       	dec	r18
     e30:	e2 f7       	brpl	.-8      	; 0xe2a <DIO_SetPinMode+0x2f4>
     e32:	80 95       	com	r24
     e34:	84 23       	and	r24, r20
     e36:	8c 93       	st	X, r24
            SET_BIT(PORTD, pin);
     e38:	a2 e3       	ldi	r26, 0x32	; 50
     e3a:	b0 e0       	ldi	r27, 0x00	; 0
     e3c:	e2 e3       	ldi	r30, 0x32	; 50
     e3e:	f0 e0       	ldi	r31, 0x00	; 0
     e40:	80 81       	ld	r24, Z
     e42:	48 2f       	mov	r20, r24
     e44:	8a 81       	ldd	r24, Y+2	; 0x02
     e46:	28 2f       	mov	r18, r24
     e48:	30 e0       	ldi	r19, 0x00	; 0
     e4a:	81 e0       	ldi	r24, 0x01	; 1
     e4c:	90 e0       	ldi	r25, 0x00	; 0
     e4e:	02 2e       	mov	r0, r18
     e50:	02 c0       	rjmp	.+4      	; 0xe56 <DIO_SetPinMode+0x320>
     e52:	88 0f       	add	r24, r24
     e54:	99 1f       	adc	r25, r25
     e56:	0a 94       	dec	r0
     e58:	e2 f7       	brpl	.-8      	; 0xe52 <DIO_SetPinMode+0x31c>
     e5a:	84 2b       	or	r24, r20
     e5c:	8c 93       	st	X, r24
     e5e:	72 c0       	rjmp	.+228    	; 0xf44 <DIO_SetPinMode+0x40e>
            break;
        default:
            break;
        }
    }
    else if (mode == DIO_OUTPUT)
     e60:	8b 81       	ldd	r24, Y+3	; 0x03
     e62:	82 30       	cpi	r24, 0x02	; 2
     e64:	09 f0       	breq	.+2      	; 0xe68 <DIO_SetPinMode+0x332>
     e66:	6e c0       	rjmp	.+220    	; 0xf44 <DIO_SetPinMode+0x40e>
    {
        switch (port)
     e68:	89 81       	ldd	r24, Y+1	; 0x01
     e6a:	28 2f       	mov	r18, r24
     e6c:	30 e0       	ldi	r19, 0x00	; 0
     e6e:	3d 83       	std	Y+5, r19	; 0x05
     e70:	2c 83       	std	Y+4, r18	; 0x04
     e72:	8c 81       	ldd	r24, Y+4	; 0x04
     e74:	9d 81       	ldd	r25, Y+5	; 0x05
     e76:	81 30       	cpi	r24, 0x01	; 1
     e78:	91 05       	cpc	r25, r1
     e7a:	49 f1       	breq	.+82     	; 0xece <DIO_SetPinMode+0x398>
     e7c:	2c 81       	ldd	r18, Y+4	; 0x04
     e7e:	3d 81       	ldd	r19, Y+5	; 0x05
     e80:	22 30       	cpi	r18, 0x02	; 2
     e82:	31 05       	cpc	r19, r1
     e84:	2c f4       	brge	.+10     	; 0xe90 <DIO_SetPinMode+0x35a>
     e86:	8c 81       	ldd	r24, Y+4	; 0x04
     e88:	9d 81       	ldd	r25, Y+5	; 0x05
     e8a:	00 97       	sbiw	r24, 0x00	; 0
     e8c:	61 f0       	breq	.+24     	; 0xea6 <DIO_SetPinMode+0x370>
     e8e:	5a c0       	rjmp	.+180    	; 0xf44 <DIO_SetPinMode+0x40e>
     e90:	2c 81       	ldd	r18, Y+4	; 0x04
     e92:	3d 81       	ldd	r19, Y+5	; 0x05
     e94:	22 30       	cpi	r18, 0x02	; 2
     e96:	31 05       	cpc	r19, r1
     e98:	71 f1       	breq	.+92     	; 0xef6 <DIO_SetPinMode+0x3c0>
     e9a:	8c 81       	ldd	r24, Y+4	; 0x04
     e9c:	9d 81       	ldd	r25, Y+5	; 0x05
     e9e:	83 30       	cpi	r24, 0x03	; 3
     ea0:	91 05       	cpc	r25, r1
     ea2:	e9 f1       	breq	.+122    	; 0xf1e <DIO_SetPinMode+0x3e8>
     ea4:	4f c0       	rjmp	.+158    	; 0xf44 <DIO_SetPinMode+0x40e>
        {
        case DIO_PORTA:
            SET_BIT(DDRA, pin);
     ea6:	aa e3       	ldi	r26, 0x3A	; 58
     ea8:	b0 e0       	ldi	r27, 0x00	; 0
     eaa:	ea e3       	ldi	r30, 0x3A	; 58
     eac:	f0 e0       	ldi	r31, 0x00	; 0
     eae:	80 81       	ld	r24, Z
     eb0:	48 2f       	mov	r20, r24
     eb2:	8a 81       	ldd	r24, Y+2	; 0x02
     eb4:	28 2f       	mov	r18, r24
     eb6:	30 e0       	ldi	r19, 0x00	; 0
     eb8:	81 e0       	ldi	r24, 0x01	; 1
     eba:	90 e0       	ldi	r25, 0x00	; 0
     ebc:	02 2e       	mov	r0, r18
     ebe:	02 c0       	rjmp	.+4      	; 0xec4 <DIO_SetPinMode+0x38e>
     ec0:	88 0f       	add	r24, r24
     ec2:	99 1f       	adc	r25, r25
     ec4:	0a 94       	dec	r0
     ec6:	e2 f7       	brpl	.-8      	; 0xec0 <DIO_SetPinMode+0x38a>
     ec8:	84 2b       	or	r24, r20
     eca:	8c 93       	st	X, r24
     ecc:	3b c0       	rjmp	.+118    	; 0xf44 <DIO_SetPinMode+0x40e>
            break;
        case DIO_PORTB:
            SET_BIT(DDRB, pin);
     ece:	a7 e3       	ldi	r26, 0x37	; 55
     ed0:	b0 e0       	ldi	r27, 0x00	; 0
     ed2:	e7 e3       	ldi	r30, 0x37	; 55
     ed4:	f0 e0       	ldi	r31, 0x00	; 0
     ed6:	80 81       	ld	r24, Z
     ed8:	48 2f       	mov	r20, r24
     eda:	8a 81       	ldd	r24, Y+2	; 0x02
     edc:	28 2f       	mov	r18, r24
     ede:	30 e0       	ldi	r19, 0x00	; 0
     ee0:	81 e0       	ldi	r24, 0x01	; 1
     ee2:	90 e0       	ldi	r25, 0x00	; 0
     ee4:	02 2e       	mov	r0, r18
     ee6:	02 c0       	rjmp	.+4      	; 0xeec <DIO_SetPinMode+0x3b6>
     ee8:	88 0f       	add	r24, r24
     eea:	99 1f       	adc	r25, r25
     eec:	0a 94       	dec	r0
     eee:	e2 f7       	brpl	.-8      	; 0xee8 <DIO_SetPinMode+0x3b2>
     ef0:	84 2b       	or	r24, r20
     ef2:	8c 93       	st	X, r24
     ef4:	27 c0       	rjmp	.+78     	; 0xf44 <DIO_SetPinMode+0x40e>
            break;
        case DIO_PORTC:
            SET_BIT(DDRC, pin);
     ef6:	a4 e3       	ldi	r26, 0x34	; 52
     ef8:	b0 e0       	ldi	r27, 0x00	; 0
     efa:	e4 e3       	ldi	r30, 0x34	; 52
     efc:	f0 e0       	ldi	r31, 0x00	; 0
     efe:	80 81       	ld	r24, Z
     f00:	48 2f       	mov	r20, r24
     f02:	8a 81       	ldd	r24, Y+2	; 0x02
     f04:	28 2f       	mov	r18, r24
     f06:	30 e0       	ldi	r19, 0x00	; 0
     f08:	81 e0       	ldi	r24, 0x01	; 1
     f0a:	90 e0       	ldi	r25, 0x00	; 0
     f0c:	02 2e       	mov	r0, r18
     f0e:	02 c0       	rjmp	.+4      	; 0xf14 <DIO_SetPinMode+0x3de>
     f10:	88 0f       	add	r24, r24
     f12:	99 1f       	adc	r25, r25
     f14:	0a 94       	dec	r0
     f16:	e2 f7       	brpl	.-8      	; 0xf10 <DIO_SetPinMode+0x3da>
     f18:	84 2b       	or	r24, r20
     f1a:	8c 93       	st	X, r24
     f1c:	13 c0       	rjmp	.+38     	; 0xf44 <DIO_SetPinMode+0x40e>
            break;
        case DIO_PORTD:
            SET_BIT(DDRD, pin);
     f1e:	a1 e3       	ldi	r26, 0x31	; 49
     f20:	b0 e0       	ldi	r27, 0x00	; 0
     f22:	e1 e3       	ldi	r30, 0x31	; 49
     f24:	f0 e0       	ldi	r31, 0x00	; 0
     f26:	80 81       	ld	r24, Z
     f28:	48 2f       	mov	r20, r24
     f2a:	8a 81       	ldd	r24, Y+2	; 0x02
     f2c:	28 2f       	mov	r18, r24
     f2e:	30 e0       	ldi	r19, 0x00	; 0
     f30:	81 e0       	ldi	r24, 0x01	; 1
     f32:	90 e0       	ldi	r25, 0x00	; 0
     f34:	02 2e       	mov	r0, r18
     f36:	02 c0       	rjmp	.+4      	; 0xf3c <DIO_SetPinMode+0x406>
     f38:	88 0f       	add	r24, r24
     f3a:	99 1f       	adc	r25, r25
     f3c:	0a 94       	dec	r0
     f3e:	e2 f7       	brpl	.-8      	; 0xf38 <DIO_SetPinMode+0x402>
     f40:	84 2b       	or	r24, r20
     f42:	8c 93       	st	X, r24
        default:
            break;
        }

    }
}
     f44:	29 96       	adiw	r28, 0x09	; 9
     f46:	0f b6       	in	r0, 0x3f	; 63
     f48:	f8 94       	cli
     f4a:	de bf       	out	0x3e, r29	; 62
     f4c:	0f be       	out	0x3f, r0	; 63
     f4e:	cd bf       	out	0x3d, r28	; 61
     f50:	cf 91       	pop	r28
     f52:	df 91       	pop	r29
     f54:	08 95       	ret

00000f56 <DIO_SetPortMode>:

void DIO_SetPortMode(DIO_PortType port, DIO_ModeType mode) {
     f56:	df 93       	push	r29
     f58:	cf 93       	push	r28
     f5a:	cd b7       	in	r28, 0x3d	; 61
     f5c:	de b7       	in	r29, 0x3e	; 62
     f5e:	2a 97       	sbiw	r28, 0x0a	; 10
     f60:	0f b6       	in	r0, 0x3f	; 63
     f62:	f8 94       	cli
     f64:	de bf       	out	0x3e, r29	; 62
     f66:	0f be       	out	0x3f, r0	; 63
     f68:	cd bf       	out	0x3d, r28	; 61
     f6a:	89 83       	std	Y+1, r24	; 0x01
     f6c:	6a 83       	std	Y+2, r22	; 0x02
    if (mode == DIO_INPUT_FLOATING)
     f6e:	8a 81       	ldd	r24, Y+2	; 0x02
     f70:	88 23       	and	r24, r24
     f72:	d9 f5       	brne	.+118    	; 0xfea <DIO_SetPortMode+0x94>
    {
        switch (port)
     f74:	89 81       	ldd	r24, Y+1	; 0x01
     f76:	28 2f       	mov	r18, r24
     f78:	30 e0       	ldi	r19, 0x00	; 0
     f7a:	3a 87       	std	Y+10, r19	; 0x0a
     f7c:	29 87       	std	Y+9, r18	; 0x09
     f7e:	89 85       	ldd	r24, Y+9	; 0x09
     f80:	9a 85       	ldd	r25, Y+10	; 0x0a
     f82:	81 30       	cpi	r24, 0x01	; 1
     f84:	91 05       	cpc	r25, r1
     f86:	e1 f0       	breq	.+56     	; 0xfc0 <DIO_SetPortMode+0x6a>
     f88:	29 85       	ldd	r18, Y+9	; 0x09
     f8a:	3a 85       	ldd	r19, Y+10	; 0x0a
     f8c:	22 30       	cpi	r18, 0x02	; 2
     f8e:	31 05       	cpc	r19, r1
     f90:	2c f4       	brge	.+10     	; 0xf9c <DIO_SetPortMode+0x46>
     f92:	89 85       	ldd	r24, Y+9	; 0x09
     f94:	9a 85       	ldd	r25, Y+10	; 0x0a
     f96:	00 97       	sbiw	r24, 0x00	; 0
     f98:	61 f0       	breq	.+24     	; 0xfb2 <DIO_SetPortMode+0x5c>
     f9a:	d2 c0       	rjmp	.+420    	; 0x1140 <DIO_SetPortMode+0x1ea>
     f9c:	29 85       	ldd	r18, Y+9	; 0x09
     f9e:	3a 85       	ldd	r19, Y+10	; 0x0a
     fa0:	22 30       	cpi	r18, 0x02	; 2
     fa2:	31 05       	cpc	r19, r1
     fa4:	a1 f0       	breq	.+40     	; 0xfce <DIO_SetPortMode+0x78>
     fa6:	89 85       	ldd	r24, Y+9	; 0x09
     fa8:	9a 85       	ldd	r25, Y+10	; 0x0a
     faa:	83 30       	cpi	r24, 0x03	; 3
     fac:	91 05       	cpc	r25, r1
     fae:	b1 f0       	breq	.+44     	; 0xfdc <DIO_SetPortMode+0x86>
     fb0:	c7 c0       	rjmp	.+398    	; 0x1140 <DIO_SetPortMode+0x1ea>
        {
        case DIO_PORTA:
            DDRA = 0x00;
     fb2:	ea e3       	ldi	r30, 0x3A	; 58
     fb4:	f0 e0       	ldi	r31, 0x00	; 0
     fb6:	10 82       	st	Z, r1
            PORTA = 0x00;
     fb8:	eb e3       	ldi	r30, 0x3B	; 59
     fba:	f0 e0       	ldi	r31, 0x00	; 0
     fbc:	10 82       	st	Z, r1
     fbe:	c0 c0       	rjmp	.+384    	; 0x1140 <DIO_SetPortMode+0x1ea>
            break;
        case DIO_PORTB:
            DDRB = 0x00;
     fc0:	e7 e3       	ldi	r30, 0x37	; 55
     fc2:	f0 e0       	ldi	r31, 0x00	; 0
     fc4:	10 82       	st	Z, r1
            PORTB = 0x00;
     fc6:	e8 e3       	ldi	r30, 0x38	; 56
     fc8:	f0 e0       	ldi	r31, 0x00	; 0
     fca:	10 82       	st	Z, r1
     fcc:	b9 c0       	rjmp	.+370    	; 0x1140 <DIO_SetPortMode+0x1ea>
            break;
        case DIO_PORTC:
            DDRC = 0x00;
     fce:	e4 e3       	ldi	r30, 0x34	; 52
     fd0:	f0 e0       	ldi	r31, 0x00	; 0
     fd2:	10 82       	st	Z, r1
            PORTC = 0x00;
     fd4:	e5 e3       	ldi	r30, 0x35	; 53
     fd6:	f0 e0       	ldi	r31, 0x00	; 0
     fd8:	10 82       	st	Z, r1
     fda:	b2 c0       	rjmp	.+356    	; 0x1140 <DIO_SetPortMode+0x1ea>
            break;
        case DIO_PORTD:
            DDRD = 0x00;
     fdc:	e1 e3       	ldi	r30, 0x31	; 49
     fde:	f0 e0       	ldi	r31, 0x00	; 0
     fe0:	10 82       	st	Z, r1
            PORTD = 0x00;
     fe2:	e2 e3       	ldi	r30, 0x32	; 50
     fe4:	f0 e0       	ldi	r31, 0x00	; 0
     fe6:	10 82       	st	Z, r1
     fe8:	ab c0       	rjmp	.+342    	; 0x1140 <DIO_SetPortMode+0x1ea>
            break;
        default:
            break;
        }
    }
    else if (mode == DIO_INPUT_PULLUP)
     fea:	8a 81       	ldd	r24, Y+2	; 0x02
     fec:	81 30       	cpi	r24, 0x01	; 1
     fee:	09 f0       	breq	.+2      	; 0xff2 <DIO_SetPortMode+0x9c>
     ff0:	3f c0       	rjmp	.+126    	; 0x1070 <DIO_SetPortMode+0x11a>
    {
        switch (port)
     ff2:	89 81       	ldd	r24, Y+1	; 0x01
     ff4:	28 2f       	mov	r18, r24
     ff6:	30 e0       	ldi	r19, 0x00	; 0
     ff8:	38 87       	std	Y+8, r19	; 0x08
     ffa:	2f 83       	std	Y+7, r18	; 0x07
     ffc:	8f 81       	ldd	r24, Y+7	; 0x07
     ffe:	98 85       	ldd	r25, Y+8	; 0x08
    1000:	81 30       	cpi	r24, 0x01	; 1
    1002:	91 05       	cpc	r25, r1
    1004:	e9 f0       	breq	.+58     	; 0x1040 <DIO_SetPortMode+0xea>
    1006:	2f 81       	ldd	r18, Y+7	; 0x07
    1008:	38 85       	ldd	r19, Y+8	; 0x08
    100a:	22 30       	cpi	r18, 0x02	; 2
    100c:	31 05       	cpc	r19, r1
    100e:	2c f4       	brge	.+10     	; 0x101a <DIO_SetPortMode+0xc4>
    1010:	8f 81       	ldd	r24, Y+7	; 0x07
    1012:	98 85       	ldd	r25, Y+8	; 0x08
    1014:	00 97       	sbiw	r24, 0x00	; 0
    1016:	61 f0       	breq	.+24     	; 0x1030 <DIO_SetPortMode+0xda>
    1018:	93 c0       	rjmp	.+294    	; 0x1140 <DIO_SetPortMode+0x1ea>
    101a:	2f 81       	ldd	r18, Y+7	; 0x07
    101c:	38 85       	ldd	r19, Y+8	; 0x08
    101e:	22 30       	cpi	r18, 0x02	; 2
    1020:	31 05       	cpc	r19, r1
    1022:	b1 f0       	breq	.+44     	; 0x1050 <DIO_SetPortMode+0xfa>
    1024:	8f 81       	ldd	r24, Y+7	; 0x07
    1026:	98 85       	ldd	r25, Y+8	; 0x08
    1028:	83 30       	cpi	r24, 0x03	; 3
    102a:	91 05       	cpc	r25, r1
    102c:	c9 f0       	breq	.+50     	; 0x1060 <DIO_SetPortMode+0x10a>
    102e:	88 c0       	rjmp	.+272    	; 0x1140 <DIO_SetPortMode+0x1ea>
        {
        case DIO_PORTA:
            DDRA = 0x00;
    1030:	ea e3       	ldi	r30, 0x3A	; 58
    1032:	f0 e0       	ldi	r31, 0x00	; 0
    1034:	10 82       	st	Z, r1
            PORTA = 0xFF;
    1036:	eb e3       	ldi	r30, 0x3B	; 59
    1038:	f0 e0       	ldi	r31, 0x00	; 0
    103a:	8f ef       	ldi	r24, 0xFF	; 255
    103c:	80 83       	st	Z, r24
    103e:	80 c0       	rjmp	.+256    	; 0x1140 <DIO_SetPortMode+0x1ea>
            break;
        case DIO_PORTB:
            DDRB = 0x00;
    1040:	e7 e3       	ldi	r30, 0x37	; 55
    1042:	f0 e0       	ldi	r31, 0x00	; 0
    1044:	10 82       	st	Z, r1
            PORTB = 0xFF;
    1046:	e8 e3       	ldi	r30, 0x38	; 56
    1048:	f0 e0       	ldi	r31, 0x00	; 0
    104a:	8f ef       	ldi	r24, 0xFF	; 255
    104c:	80 83       	st	Z, r24
    104e:	78 c0       	rjmp	.+240    	; 0x1140 <DIO_SetPortMode+0x1ea>
            break;
        case DIO_PORTC:
            DDRC = 0x00;
    1050:	e4 e3       	ldi	r30, 0x34	; 52
    1052:	f0 e0       	ldi	r31, 0x00	; 0
    1054:	10 82       	st	Z, r1
            PORTC = 0xFF;
    1056:	e5 e3       	ldi	r30, 0x35	; 53
    1058:	f0 e0       	ldi	r31, 0x00	; 0
    105a:	8f ef       	ldi	r24, 0xFF	; 255
    105c:	80 83       	st	Z, r24
    105e:	70 c0       	rjmp	.+224    	; 0x1140 <DIO_SetPortMode+0x1ea>
            break;
        case DIO_PORTD:
            DDRD = 0x00;
    1060:	e1 e3       	ldi	r30, 0x31	; 49
    1062:	f0 e0       	ldi	r31, 0x00	; 0
    1064:	10 82       	st	Z, r1
            PORTD = 0xFF;
    1066:	e2 e3       	ldi	r30, 0x32	; 50
    1068:	f0 e0       	ldi	r31, 0x00	; 0
    106a:	8f ef       	ldi	r24, 0xFF	; 255
    106c:	80 83       	st	Z, r24
    106e:	68 c0       	rjmp	.+208    	; 0x1140 <DIO_SetPortMode+0x1ea>
            break;
        default:
            break;
        }
    }
    else if (mode == DIO_OUTPUT)
    1070:	8a 81       	ldd	r24, Y+2	; 0x02
    1072:	82 30       	cpi	r24, 0x02	; 2
    1074:	99 f5       	brne	.+102    	; 0x10dc <DIO_SetPortMode+0x186>
    {
        switch (port)
    1076:	89 81       	ldd	r24, Y+1	; 0x01
    1078:	28 2f       	mov	r18, r24
    107a:	30 e0       	ldi	r19, 0x00	; 0
    107c:	3e 83       	std	Y+6, r19	; 0x06
    107e:	2d 83       	std	Y+5, r18	; 0x05
    1080:	8d 81       	ldd	r24, Y+5	; 0x05
    1082:	9e 81       	ldd	r25, Y+6	; 0x06
    1084:	81 30       	cpi	r24, 0x01	; 1
    1086:	91 05       	cpc	r25, r1
    1088:	d1 f0       	breq	.+52     	; 0x10be <DIO_SetPortMode+0x168>
    108a:	2d 81       	ldd	r18, Y+5	; 0x05
    108c:	3e 81       	ldd	r19, Y+6	; 0x06
    108e:	22 30       	cpi	r18, 0x02	; 2
    1090:	31 05       	cpc	r19, r1
    1092:	2c f4       	brge	.+10     	; 0x109e <DIO_SetPortMode+0x148>
    1094:	8d 81       	ldd	r24, Y+5	; 0x05
    1096:	9e 81       	ldd	r25, Y+6	; 0x06
    1098:	00 97       	sbiw	r24, 0x00	; 0
    109a:	61 f0       	breq	.+24     	; 0x10b4 <DIO_SetPortMode+0x15e>
    109c:	51 c0       	rjmp	.+162    	; 0x1140 <DIO_SetPortMode+0x1ea>
    109e:	2d 81       	ldd	r18, Y+5	; 0x05
    10a0:	3e 81       	ldd	r19, Y+6	; 0x06
    10a2:	22 30       	cpi	r18, 0x02	; 2
    10a4:	31 05       	cpc	r19, r1
    10a6:	81 f0       	breq	.+32     	; 0x10c8 <DIO_SetPortMode+0x172>
    10a8:	8d 81       	ldd	r24, Y+5	; 0x05
    10aa:	9e 81       	ldd	r25, Y+6	; 0x06
    10ac:	83 30       	cpi	r24, 0x03	; 3
    10ae:	91 05       	cpc	r25, r1
    10b0:	81 f0       	breq	.+32     	; 0x10d2 <DIO_SetPortMode+0x17c>
    10b2:	46 c0       	rjmp	.+140    	; 0x1140 <DIO_SetPortMode+0x1ea>
        {
        case DIO_PORTA:
            DDRA = 0xFF;
    10b4:	ea e3       	ldi	r30, 0x3A	; 58
    10b6:	f0 e0       	ldi	r31, 0x00	; 0
    10b8:	8f ef       	ldi	r24, 0xFF	; 255
    10ba:	80 83       	st	Z, r24
    10bc:	41 c0       	rjmp	.+130    	; 0x1140 <DIO_SetPortMode+0x1ea>
            break;
        case DIO_PORTB:
            DDRB = 0xFF;
    10be:	e7 e3       	ldi	r30, 0x37	; 55
    10c0:	f0 e0       	ldi	r31, 0x00	; 0
    10c2:	8f ef       	ldi	r24, 0xFF	; 255
    10c4:	80 83       	st	Z, r24
    10c6:	3c c0       	rjmp	.+120    	; 0x1140 <DIO_SetPortMode+0x1ea>
            break;
        case DIO_PORTC:
            DDRC = 0xFF;
    10c8:	e4 e3       	ldi	r30, 0x34	; 52
    10ca:	f0 e0       	ldi	r31, 0x00	; 0
    10cc:	8f ef       	ldi	r24, 0xFF	; 255
    10ce:	80 83       	st	Z, r24
    10d0:	37 c0       	rjmp	.+110    	; 0x1140 <DIO_SetPortMode+0x1ea>
            break;
        case DIO_PORTD:
            DDRD = 0xFF;
    10d2:	e1 e3       	ldi	r30, 0x31	; 49
    10d4:	f0 e0       	ldi	r31, 0x00	; 0
    10d6:	8f ef       	ldi	r24, 0xFF	; 255
    10d8:	80 83       	st	Z, r24
    10da:	32 c0       	rjmp	.+100    	; 0x1140 <DIO_SetPortMode+0x1ea>
        }

    }
    else
    {
        switch (port)
    10dc:	89 81       	ldd	r24, Y+1	; 0x01
    10de:	28 2f       	mov	r18, r24
    10e0:	30 e0       	ldi	r19, 0x00	; 0
    10e2:	3c 83       	std	Y+4, r19	; 0x04
    10e4:	2b 83       	std	Y+3, r18	; 0x03
    10e6:	8b 81       	ldd	r24, Y+3	; 0x03
    10e8:	9c 81       	ldd	r25, Y+4	; 0x04
    10ea:	81 30       	cpi	r24, 0x01	; 1
    10ec:	91 05       	cpc	r25, r1
    10ee:	d1 f0       	breq	.+52     	; 0x1124 <DIO_SetPortMode+0x1ce>
    10f0:	2b 81       	ldd	r18, Y+3	; 0x03
    10f2:	3c 81       	ldd	r19, Y+4	; 0x04
    10f4:	22 30       	cpi	r18, 0x02	; 2
    10f6:	31 05       	cpc	r19, r1
    10f8:	2c f4       	brge	.+10     	; 0x1104 <DIO_SetPortMode+0x1ae>
    10fa:	8b 81       	ldd	r24, Y+3	; 0x03
    10fc:	9c 81       	ldd	r25, Y+4	; 0x04
    10fe:	00 97       	sbiw	r24, 0x00	; 0
    1100:	61 f0       	breq	.+24     	; 0x111a <DIO_SetPortMode+0x1c4>
    1102:	1e c0       	rjmp	.+60     	; 0x1140 <DIO_SetPortMode+0x1ea>
    1104:	2b 81       	ldd	r18, Y+3	; 0x03
    1106:	3c 81       	ldd	r19, Y+4	; 0x04
    1108:	22 30       	cpi	r18, 0x02	; 2
    110a:	31 05       	cpc	r19, r1
    110c:	81 f0       	breq	.+32     	; 0x112e <DIO_SetPortMode+0x1d8>
    110e:	8b 81       	ldd	r24, Y+3	; 0x03
    1110:	9c 81       	ldd	r25, Y+4	; 0x04
    1112:	83 30       	cpi	r24, 0x03	; 3
    1114:	91 05       	cpc	r25, r1
    1116:	81 f0       	breq	.+32     	; 0x1138 <DIO_SetPortMode+0x1e2>
    1118:	13 c0       	rjmp	.+38     	; 0x1140 <DIO_SetPortMode+0x1ea>
        {
        case DIO_PORTA:
            DDRA = mode;
    111a:	ea e3       	ldi	r30, 0x3A	; 58
    111c:	f0 e0       	ldi	r31, 0x00	; 0
    111e:	8a 81       	ldd	r24, Y+2	; 0x02
    1120:	80 83       	st	Z, r24
    1122:	0e c0       	rjmp	.+28     	; 0x1140 <DIO_SetPortMode+0x1ea>
            break;
        case DIO_PORTB:
            DDRB = mode;
    1124:	e7 e3       	ldi	r30, 0x37	; 55
    1126:	f0 e0       	ldi	r31, 0x00	; 0
    1128:	8a 81       	ldd	r24, Y+2	; 0x02
    112a:	80 83       	st	Z, r24
    112c:	09 c0       	rjmp	.+18     	; 0x1140 <DIO_SetPortMode+0x1ea>
            break;
        case DIO_PORTC:
            DDRC = mode;
    112e:	e4 e3       	ldi	r30, 0x34	; 52
    1130:	f0 e0       	ldi	r31, 0x00	; 0
    1132:	8a 81       	ldd	r24, Y+2	; 0x02
    1134:	80 83       	st	Z, r24
    1136:	04 c0       	rjmp	.+8      	; 0x1140 <DIO_SetPortMode+0x1ea>
            break;
        case DIO_PORTD:
            DDRD = mode;
    1138:	e1 e3       	ldi	r30, 0x31	; 49
    113a:	f0 e0       	ldi	r31, 0x00	; 0
    113c:	8a 81       	ldd	r24, Y+2	; 0x02
    113e:	80 83       	st	Z, r24
        default:
            break;
        }

    }
}
    1140:	2a 96       	adiw	r28, 0x0a	; 10
    1142:	0f b6       	in	r0, 0x3f	; 63
    1144:	f8 94       	cli
    1146:	de bf       	out	0x3e, r29	; 62
    1148:	0f be       	out	0x3f, r0	; 63
    114a:	cd bf       	out	0x3d, r28	; 61
    114c:	cf 91       	pop	r28
    114e:	df 91       	pop	r29
    1150:	08 95       	ret

00001152 <DIO_SetPinLevel>:


void DIO_SetPinLevel(DIO_PortType port, DIO_PinType pin, DIO_LevelType level) {
    1152:	df 93       	push	r29
    1154:	cf 93       	push	r28
    1156:	cd b7       	in	r28, 0x3d	; 61
    1158:	de b7       	in	r29, 0x3e	; 62
    115a:	27 97       	sbiw	r28, 0x07	; 7
    115c:	0f b6       	in	r0, 0x3f	; 63
    115e:	f8 94       	cli
    1160:	de bf       	out	0x3e, r29	; 62
    1162:	0f be       	out	0x3f, r0	; 63
    1164:	cd bf       	out	0x3d, r28	; 61
    1166:	89 83       	std	Y+1, r24	; 0x01
    1168:	6a 83       	std	Y+2, r22	; 0x02
    116a:	4b 83       	std	Y+3, r20	; 0x03
    if (level == DIO_HIGH)
    116c:	8b 81       	ldd	r24, Y+3	; 0x03
    116e:	81 30       	cpi	r24, 0x01	; 1
    1170:	09 f0       	breq	.+2      	; 0x1174 <DIO_SetPinLevel+0x22>
    1172:	6f c0       	rjmp	.+222    	; 0x1252 <DIO_SetPinLevel+0x100>
    {
        switch (port)
    1174:	89 81       	ldd	r24, Y+1	; 0x01
    1176:	28 2f       	mov	r18, r24
    1178:	30 e0       	ldi	r19, 0x00	; 0
    117a:	3f 83       	std	Y+7, r19	; 0x07
    117c:	2e 83       	std	Y+6, r18	; 0x06
    117e:	8e 81       	ldd	r24, Y+6	; 0x06
    1180:	9f 81       	ldd	r25, Y+7	; 0x07
    1182:	81 30       	cpi	r24, 0x01	; 1
    1184:	91 05       	cpc	r25, r1
    1186:	49 f1       	breq	.+82     	; 0x11da <DIO_SetPinLevel+0x88>
    1188:	2e 81       	ldd	r18, Y+6	; 0x06
    118a:	3f 81       	ldd	r19, Y+7	; 0x07
    118c:	22 30       	cpi	r18, 0x02	; 2
    118e:	31 05       	cpc	r19, r1
    1190:	2c f4       	brge	.+10     	; 0x119c <DIO_SetPinLevel+0x4a>
    1192:	8e 81       	ldd	r24, Y+6	; 0x06
    1194:	9f 81       	ldd	r25, Y+7	; 0x07
    1196:	00 97       	sbiw	r24, 0x00	; 0
    1198:	61 f0       	breq	.+24     	; 0x11b2 <DIO_SetPinLevel+0x60>
    119a:	d2 c0       	rjmp	.+420    	; 0x1340 <DIO_SetPinLevel+0x1ee>
    119c:	2e 81       	ldd	r18, Y+6	; 0x06
    119e:	3f 81       	ldd	r19, Y+7	; 0x07
    11a0:	22 30       	cpi	r18, 0x02	; 2
    11a2:	31 05       	cpc	r19, r1
    11a4:	71 f1       	breq	.+92     	; 0x1202 <DIO_SetPinLevel+0xb0>
    11a6:	8e 81       	ldd	r24, Y+6	; 0x06
    11a8:	9f 81       	ldd	r25, Y+7	; 0x07
    11aa:	83 30       	cpi	r24, 0x03	; 3
    11ac:	91 05       	cpc	r25, r1
    11ae:	e9 f1       	breq	.+122    	; 0x122a <DIO_SetPinLevel+0xd8>
    11b0:	c7 c0       	rjmp	.+398    	; 0x1340 <DIO_SetPinLevel+0x1ee>
        {
        case DIO_PORTA:
            SET_BIT(PORTA, pin);
    11b2:	ab e3       	ldi	r26, 0x3B	; 59
    11b4:	b0 e0       	ldi	r27, 0x00	; 0
    11b6:	eb e3       	ldi	r30, 0x3B	; 59
    11b8:	f0 e0       	ldi	r31, 0x00	; 0
    11ba:	80 81       	ld	r24, Z
    11bc:	48 2f       	mov	r20, r24
    11be:	8a 81       	ldd	r24, Y+2	; 0x02
    11c0:	28 2f       	mov	r18, r24
    11c2:	30 e0       	ldi	r19, 0x00	; 0
    11c4:	81 e0       	ldi	r24, 0x01	; 1
    11c6:	90 e0       	ldi	r25, 0x00	; 0
    11c8:	02 2e       	mov	r0, r18
    11ca:	02 c0       	rjmp	.+4      	; 0x11d0 <DIO_SetPinLevel+0x7e>
    11cc:	88 0f       	add	r24, r24
    11ce:	99 1f       	adc	r25, r25
    11d0:	0a 94       	dec	r0
    11d2:	e2 f7       	brpl	.-8      	; 0x11cc <DIO_SetPinLevel+0x7a>
    11d4:	84 2b       	or	r24, r20
    11d6:	8c 93       	st	X, r24
    11d8:	b3 c0       	rjmp	.+358    	; 0x1340 <DIO_SetPinLevel+0x1ee>
            break;
        case DIO_PORTB:
            SET_BIT(PORTB, pin);
    11da:	a8 e3       	ldi	r26, 0x38	; 56
    11dc:	b0 e0       	ldi	r27, 0x00	; 0
    11de:	e8 e3       	ldi	r30, 0x38	; 56
    11e0:	f0 e0       	ldi	r31, 0x00	; 0
    11e2:	80 81       	ld	r24, Z
    11e4:	48 2f       	mov	r20, r24
    11e6:	8a 81       	ldd	r24, Y+2	; 0x02
    11e8:	28 2f       	mov	r18, r24
    11ea:	30 e0       	ldi	r19, 0x00	; 0
    11ec:	81 e0       	ldi	r24, 0x01	; 1
    11ee:	90 e0       	ldi	r25, 0x00	; 0
    11f0:	02 2e       	mov	r0, r18
    11f2:	02 c0       	rjmp	.+4      	; 0x11f8 <DIO_SetPinLevel+0xa6>
    11f4:	88 0f       	add	r24, r24
    11f6:	99 1f       	adc	r25, r25
    11f8:	0a 94       	dec	r0
    11fa:	e2 f7       	brpl	.-8      	; 0x11f4 <DIO_SetPinLevel+0xa2>
    11fc:	84 2b       	or	r24, r20
    11fe:	8c 93       	st	X, r24
    1200:	9f c0       	rjmp	.+318    	; 0x1340 <DIO_SetPinLevel+0x1ee>
            break;
        case DIO_PORTC:
            SET_BIT(PORTC, pin);
    1202:	a5 e3       	ldi	r26, 0x35	; 53
    1204:	b0 e0       	ldi	r27, 0x00	; 0
    1206:	e5 e3       	ldi	r30, 0x35	; 53
    1208:	f0 e0       	ldi	r31, 0x00	; 0
    120a:	80 81       	ld	r24, Z
    120c:	48 2f       	mov	r20, r24
    120e:	8a 81       	ldd	r24, Y+2	; 0x02
    1210:	28 2f       	mov	r18, r24
    1212:	30 e0       	ldi	r19, 0x00	; 0
    1214:	81 e0       	ldi	r24, 0x01	; 1
    1216:	90 e0       	ldi	r25, 0x00	; 0
    1218:	02 2e       	mov	r0, r18
    121a:	02 c0       	rjmp	.+4      	; 0x1220 <DIO_SetPinLevel+0xce>
    121c:	88 0f       	add	r24, r24
    121e:	99 1f       	adc	r25, r25
    1220:	0a 94       	dec	r0
    1222:	e2 f7       	brpl	.-8      	; 0x121c <DIO_SetPinLevel+0xca>
    1224:	84 2b       	or	r24, r20
    1226:	8c 93       	st	X, r24
    1228:	8b c0       	rjmp	.+278    	; 0x1340 <DIO_SetPinLevel+0x1ee>
            break;
        case DIO_PORTD:
            SET_BIT(PORTD, pin);
    122a:	a2 e3       	ldi	r26, 0x32	; 50
    122c:	b0 e0       	ldi	r27, 0x00	; 0
    122e:	e2 e3       	ldi	r30, 0x32	; 50
    1230:	f0 e0       	ldi	r31, 0x00	; 0
    1232:	80 81       	ld	r24, Z
    1234:	48 2f       	mov	r20, r24
    1236:	8a 81       	ldd	r24, Y+2	; 0x02
    1238:	28 2f       	mov	r18, r24
    123a:	30 e0       	ldi	r19, 0x00	; 0
    123c:	81 e0       	ldi	r24, 0x01	; 1
    123e:	90 e0       	ldi	r25, 0x00	; 0
    1240:	02 2e       	mov	r0, r18
    1242:	02 c0       	rjmp	.+4      	; 0x1248 <DIO_SetPinLevel+0xf6>
    1244:	88 0f       	add	r24, r24
    1246:	99 1f       	adc	r25, r25
    1248:	0a 94       	dec	r0
    124a:	e2 f7       	brpl	.-8      	; 0x1244 <DIO_SetPinLevel+0xf2>
    124c:	84 2b       	or	r24, r20
    124e:	8c 93       	st	X, r24
    1250:	77 c0       	rjmp	.+238    	; 0x1340 <DIO_SetPinLevel+0x1ee>
            break;
        default:
            break;
        }
    }
    else if (level == DIO_LOW)
    1252:	8b 81       	ldd	r24, Y+3	; 0x03
    1254:	88 23       	and	r24, r24
    1256:	09 f0       	breq	.+2      	; 0x125a <DIO_SetPinLevel+0x108>
    1258:	73 c0       	rjmp	.+230    	; 0x1340 <DIO_SetPinLevel+0x1ee>
    {
        switch (port)
    125a:	89 81       	ldd	r24, Y+1	; 0x01
    125c:	28 2f       	mov	r18, r24
    125e:	30 e0       	ldi	r19, 0x00	; 0
    1260:	3d 83       	std	Y+5, r19	; 0x05
    1262:	2c 83       	std	Y+4, r18	; 0x04
    1264:	8c 81       	ldd	r24, Y+4	; 0x04
    1266:	9d 81       	ldd	r25, Y+5	; 0x05
    1268:	81 30       	cpi	r24, 0x01	; 1
    126a:	91 05       	cpc	r25, r1
    126c:	59 f1       	breq	.+86     	; 0x12c4 <DIO_SetPinLevel+0x172>
    126e:	2c 81       	ldd	r18, Y+4	; 0x04
    1270:	3d 81       	ldd	r19, Y+5	; 0x05
    1272:	22 30       	cpi	r18, 0x02	; 2
    1274:	31 05       	cpc	r19, r1
    1276:	2c f4       	brge	.+10     	; 0x1282 <DIO_SetPinLevel+0x130>
    1278:	8c 81       	ldd	r24, Y+4	; 0x04
    127a:	9d 81       	ldd	r25, Y+5	; 0x05
    127c:	00 97       	sbiw	r24, 0x00	; 0
    127e:	69 f0       	breq	.+26     	; 0x129a <DIO_SetPinLevel+0x148>
    1280:	5f c0       	rjmp	.+190    	; 0x1340 <DIO_SetPinLevel+0x1ee>
    1282:	2c 81       	ldd	r18, Y+4	; 0x04
    1284:	3d 81       	ldd	r19, Y+5	; 0x05
    1286:	22 30       	cpi	r18, 0x02	; 2
    1288:	31 05       	cpc	r19, r1
    128a:	89 f1       	breq	.+98     	; 0x12ee <DIO_SetPinLevel+0x19c>
    128c:	8c 81       	ldd	r24, Y+4	; 0x04
    128e:	9d 81       	ldd	r25, Y+5	; 0x05
    1290:	83 30       	cpi	r24, 0x03	; 3
    1292:	91 05       	cpc	r25, r1
    1294:	09 f4       	brne	.+2      	; 0x1298 <DIO_SetPinLevel+0x146>
    1296:	40 c0       	rjmp	.+128    	; 0x1318 <DIO_SetPinLevel+0x1c6>
    1298:	53 c0       	rjmp	.+166    	; 0x1340 <DIO_SetPinLevel+0x1ee>
        {
        case DIO_PORTA:
            CLR_BIT(PORTA, pin);
    129a:	ab e3       	ldi	r26, 0x3B	; 59
    129c:	b0 e0       	ldi	r27, 0x00	; 0
    129e:	eb e3       	ldi	r30, 0x3B	; 59
    12a0:	f0 e0       	ldi	r31, 0x00	; 0
    12a2:	80 81       	ld	r24, Z
    12a4:	48 2f       	mov	r20, r24
    12a6:	8a 81       	ldd	r24, Y+2	; 0x02
    12a8:	28 2f       	mov	r18, r24
    12aa:	30 e0       	ldi	r19, 0x00	; 0
    12ac:	81 e0       	ldi	r24, 0x01	; 1
    12ae:	90 e0       	ldi	r25, 0x00	; 0
    12b0:	02 2e       	mov	r0, r18
    12b2:	02 c0       	rjmp	.+4      	; 0x12b8 <DIO_SetPinLevel+0x166>
    12b4:	88 0f       	add	r24, r24
    12b6:	99 1f       	adc	r25, r25
    12b8:	0a 94       	dec	r0
    12ba:	e2 f7       	brpl	.-8      	; 0x12b4 <DIO_SetPinLevel+0x162>
    12bc:	80 95       	com	r24
    12be:	84 23       	and	r24, r20
    12c0:	8c 93       	st	X, r24
    12c2:	3e c0       	rjmp	.+124    	; 0x1340 <DIO_SetPinLevel+0x1ee>
            break;
        case DIO_PORTB:
            CLR_BIT(PORTB, pin);
    12c4:	a8 e3       	ldi	r26, 0x38	; 56
    12c6:	b0 e0       	ldi	r27, 0x00	; 0
    12c8:	e8 e3       	ldi	r30, 0x38	; 56
    12ca:	f0 e0       	ldi	r31, 0x00	; 0
    12cc:	80 81       	ld	r24, Z
    12ce:	48 2f       	mov	r20, r24
    12d0:	8a 81       	ldd	r24, Y+2	; 0x02
    12d2:	28 2f       	mov	r18, r24
    12d4:	30 e0       	ldi	r19, 0x00	; 0
    12d6:	81 e0       	ldi	r24, 0x01	; 1
    12d8:	90 e0       	ldi	r25, 0x00	; 0
    12da:	02 2e       	mov	r0, r18
    12dc:	02 c0       	rjmp	.+4      	; 0x12e2 <DIO_SetPinLevel+0x190>
    12de:	88 0f       	add	r24, r24
    12e0:	99 1f       	adc	r25, r25
    12e2:	0a 94       	dec	r0
    12e4:	e2 f7       	brpl	.-8      	; 0x12de <DIO_SetPinLevel+0x18c>
    12e6:	80 95       	com	r24
    12e8:	84 23       	and	r24, r20
    12ea:	8c 93       	st	X, r24
    12ec:	29 c0       	rjmp	.+82     	; 0x1340 <DIO_SetPinLevel+0x1ee>
            break;
        case DIO_PORTC:
            CLR_BIT(PORTC, pin);
    12ee:	a5 e3       	ldi	r26, 0x35	; 53
    12f0:	b0 e0       	ldi	r27, 0x00	; 0
    12f2:	e5 e3       	ldi	r30, 0x35	; 53
    12f4:	f0 e0       	ldi	r31, 0x00	; 0
    12f6:	80 81       	ld	r24, Z
    12f8:	48 2f       	mov	r20, r24
    12fa:	8a 81       	ldd	r24, Y+2	; 0x02
    12fc:	28 2f       	mov	r18, r24
    12fe:	30 e0       	ldi	r19, 0x00	; 0
    1300:	81 e0       	ldi	r24, 0x01	; 1
    1302:	90 e0       	ldi	r25, 0x00	; 0
    1304:	02 2e       	mov	r0, r18
    1306:	02 c0       	rjmp	.+4      	; 0x130c <DIO_SetPinLevel+0x1ba>
    1308:	88 0f       	add	r24, r24
    130a:	99 1f       	adc	r25, r25
    130c:	0a 94       	dec	r0
    130e:	e2 f7       	brpl	.-8      	; 0x1308 <DIO_SetPinLevel+0x1b6>
    1310:	80 95       	com	r24
    1312:	84 23       	and	r24, r20
    1314:	8c 93       	st	X, r24
    1316:	14 c0       	rjmp	.+40     	; 0x1340 <DIO_SetPinLevel+0x1ee>
            break;
        case DIO_PORTD:
            CLR_BIT(PORTD, pin);
    1318:	a2 e3       	ldi	r26, 0x32	; 50
    131a:	b0 e0       	ldi	r27, 0x00	; 0
    131c:	e2 e3       	ldi	r30, 0x32	; 50
    131e:	f0 e0       	ldi	r31, 0x00	; 0
    1320:	80 81       	ld	r24, Z
    1322:	48 2f       	mov	r20, r24
    1324:	8a 81       	ldd	r24, Y+2	; 0x02
    1326:	28 2f       	mov	r18, r24
    1328:	30 e0       	ldi	r19, 0x00	; 0
    132a:	81 e0       	ldi	r24, 0x01	; 1
    132c:	90 e0       	ldi	r25, 0x00	; 0
    132e:	02 2e       	mov	r0, r18
    1330:	02 c0       	rjmp	.+4      	; 0x1336 <DIO_SetPinLevel+0x1e4>
    1332:	88 0f       	add	r24, r24
    1334:	99 1f       	adc	r25, r25
    1336:	0a 94       	dec	r0
    1338:	e2 f7       	brpl	.-8      	; 0x1332 <DIO_SetPinLevel+0x1e0>
    133a:	80 95       	com	r24
    133c:	84 23       	and	r24, r20
    133e:	8c 93       	st	X, r24
            break;
        default:
            break;
        }
    }
}
    1340:	27 96       	adiw	r28, 0x07	; 7
    1342:	0f b6       	in	r0, 0x3f	; 63
    1344:	f8 94       	cli
    1346:	de bf       	out	0x3e, r29	; 62
    1348:	0f be       	out	0x3f, r0	; 63
    134a:	cd bf       	out	0x3d, r28	; 61
    134c:	cf 91       	pop	r28
    134e:	df 91       	pop	r29
    1350:	08 95       	ret

00001352 <DIO_SetPortLevel>:

void DIO_SetPortLevel (DIO_PortType port, DIO_LevelType level) {
    1352:	df 93       	push	r29
    1354:	cf 93       	push	r28
    1356:	cd b7       	in	r28, 0x3d	; 61
    1358:	de b7       	in	r29, 0x3e	; 62
    135a:	28 97       	sbiw	r28, 0x08	; 8
    135c:	0f b6       	in	r0, 0x3f	; 63
    135e:	f8 94       	cli
    1360:	de bf       	out	0x3e, r29	; 62
    1362:	0f be       	out	0x3f, r0	; 63
    1364:	cd bf       	out	0x3d, r28	; 61
    1366:	89 83       	std	Y+1, r24	; 0x01
    1368:	6a 83       	std	Y+2, r22	; 0x02
    if (level == DIO_HIGH) {
    136a:	8a 81       	ldd	r24, Y+2	; 0x02
    136c:	81 30       	cpi	r24, 0x01	; 1
    136e:	99 f5       	brne	.+102    	; 0x13d6 <DIO_SetPortLevel+0x84>
        switch (port)
    1370:	89 81       	ldd	r24, Y+1	; 0x01
    1372:	28 2f       	mov	r18, r24
    1374:	30 e0       	ldi	r19, 0x00	; 0
    1376:	38 87       	std	Y+8, r19	; 0x08
    1378:	2f 83       	std	Y+7, r18	; 0x07
    137a:	8f 81       	ldd	r24, Y+7	; 0x07
    137c:	98 85       	ldd	r25, Y+8	; 0x08
    137e:	81 30       	cpi	r24, 0x01	; 1
    1380:	91 05       	cpc	r25, r1
    1382:	d1 f0       	breq	.+52     	; 0x13b8 <DIO_SetPortLevel+0x66>
    1384:	2f 81       	ldd	r18, Y+7	; 0x07
    1386:	38 85       	ldd	r19, Y+8	; 0x08
    1388:	22 30       	cpi	r18, 0x02	; 2
    138a:	31 05       	cpc	r19, r1
    138c:	2c f4       	brge	.+10     	; 0x1398 <DIO_SetPortLevel+0x46>
    138e:	8f 81       	ldd	r24, Y+7	; 0x07
    1390:	98 85       	ldd	r25, Y+8	; 0x08
    1392:	00 97       	sbiw	r24, 0x00	; 0
    1394:	61 f0       	breq	.+24     	; 0x13ae <DIO_SetPortLevel+0x5c>
    1396:	83 c0       	rjmp	.+262    	; 0x149e <DIO_SetPortLevel+0x14c>
    1398:	2f 81       	ldd	r18, Y+7	; 0x07
    139a:	38 85       	ldd	r19, Y+8	; 0x08
    139c:	22 30       	cpi	r18, 0x02	; 2
    139e:	31 05       	cpc	r19, r1
    13a0:	81 f0       	breq	.+32     	; 0x13c2 <DIO_SetPortLevel+0x70>
    13a2:	8f 81       	ldd	r24, Y+7	; 0x07
    13a4:	98 85       	ldd	r25, Y+8	; 0x08
    13a6:	83 30       	cpi	r24, 0x03	; 3
    13a8:	91 05       	cpc	r25, r1
    13aa:	81 f0       	breq	.+32     	; 0x13cc <DIO_SetPortLevel+0x7a>
    13ac:	78 c0       	rjmp	.+240    	; 0x149e <DIO_SetPortLevel+0x14c>
        {
        case DIO_PORTA:
            PORTA = 0xFF;
    13ae:	eb e3       	ldi	r30, 0x3B	; 59
    13b0:	f0 e0       	ldi	r31, 0x00	; 0
    13b2:	8f ef       	ldi	r24, 0xFF	; 255
    13b4:	80 83       	st	Z, r24
    13b6:	73 c0       	rjmp	.+230    	; 0x149e <DIO_SetPortLevel+0x14c>
            break;
        case DIO_PORTB:
            PORTB = 0xFF;
    13b8:	e8 e3       	ldi	r30, 0x38	; 56
    13ba:	f0 e0       	ldi	r31, 0x00	; 0
    13bc:	8f ef       	ldi	r24, 0xFF	; 255
    13be:	80 83       	st	Z, r24
    13c0:	6e c0       	rjmp	.+220    	; 0x149e <DIO_SetPortLevel+0x14c>
            break;
        case DIO_PORTC:
            PORTC = 0xFF;
    13c2:	e5 e3       	ldi	r30, 0x35	; 53
    13c4:	f0 e0       	ldi	r31, 0x00	; 0
    13c6:	8f ef       	ldi	r24, 0xFF	; 255
    13c8:	80 83       	st	Z, r24
    13ca:	69 c0       	rjmp	.+210    	; 0x149e <DIO_SetPortLevel+0x14c>
            break;
        case DIO_PORTD:
            PORTD = 0xFF;
    13cc:	e2 e3       	ldi	r30, 0x32	; 50
    13ce:	f0 e0       	ldi	r31, 0x00	; 0
    13d0:	8f ef       	ldi	r24, 0xFF	; 255
    13d2:	80 83       	st	Z, r24
    13d4:	64 c0       	rjmp	.+200    	; 0x149e <DIO_SetPortLevel+0x14c>
            break;
        default:
            break;
        }
    }
    else if (level == DIO_LOW) {
    13d6:	8a 81       	ldd	r24, Y+2	; 0x02
    13d8:	88 23       	and	r24, r24
    13da:	79 f5       	brne	.+94     	; 0x143a <DIO_SetPortLevel+0xe8>
        switch (port)
    13dc:	89 81       	ldd	r24, Y+1	; 0x01
    13de:	28 2f       	mov	r18, r24
    13e0:	30 e0       	ldi	r19, 0x00	; 0
    13e2:	3e 83       	std	Y+6, r19	; 0x06
    13e4:	2d 83       	std	Y+5, r18	; 0x05
    13e6:	8d 81       	ldd	r24, Y+5	; 0x05
    13e8:	9e 81       	ldd	r25, Y+6	; 0x06
    13ea:	81 30       	cpi	r24, 0x01	; 1
    13ec:	91 05       	cpc	r25, r1
    13ee:	c9 f0       	breq	.+50     	; 0x1422 <DIO_SetPortLevel+0xd0>
    13f0:	2d 81       	ldd	r18, Y+5	; 0x05
    13f2:	3e 81       	ldd	r19, Y+6	; 0x06
    13f4:	22 30       	cpi	r18, 0x02	; 2
    13f6:	31 05       	cpc	r19, r1
    13f8:	2c f4       	brge	.+10     	; 0x1404 <DIO_SetPortLevel+0xb2>
    13fa:	8d 81       	ldd	r24, Y+5	; 0x05
    13fc:	9e 81       	ldd	r25, Y+6	; 0x06
    13fe:	00 97       	sbiw	r24, 0x00	; 0
    1400:	61 f0       	breq	.+24     	; 0x141a <DIO_SetPortLevel+0xc8>
    1402:	4d c0       	rjmp	.+154    	; 0x149e <DIO_SetPortLevel+0x14c>
    1404:	2d 81       	ldd	r18, Y+5	; 0x05
    1406:	3e 81       	ldd	r19, Y+6	; 0x06
    1408:	22 30       	cpi	r18, 0x02	; 2
    140a:	31 05       	cpc	r19, r1
    140c:	71 f0       	breq	.+28     	; 0x142a <DIO_SetPortLevel+0xd8>
    140e:	8d 81       	ldd	r24, Y+5	; 0x05
    1410:	9e 81       	ldd	r25, Y+6	; 0x06
    1412:	83 30       	cpi	r24, 0x03	; 3
    1414:	91 05       	cpc	r25, r1
    1416:	69 f0       	breq	.+26     	; 0x1432 <DIO_SetPortLevel+0xe0>
    1418:	42 c0       	rjmp	.+132    	; 0x149e <DIO_SetPortLevel+0x14c>
        {
        case DIO_PORTA:
            PORTA = 0x00;
    141a:	eb e3       	ldi	r30, 0x3B	; 59
    141c:	f0 e0       	ldi	r31, 0x00	; 0
    141e:	10 82       	st	Z, r1
    1420:	3e c0       	rjmp	.+124    	; 0x149e <DIO_SetPortLevel+0x14c>
            break;
        case DIO_PORTB:
            PORTB = 0x00;
    1422:	e8 e3       	ldi	r30, 0x38	; 56
    1424:	f0 e0       	ldi	r31, 0x00	; 0
    1426:	10 82       	st	Z, r1
    1428:	3a c0       	rjmp	.+116    	; 0x149e <DIO_SetPortLevel+0x14c>
            break;
        case DIO_PORTC:
            PORTC = 0x00;
    142a:	e5 e3       	ldi	r30, 0x35	; 53
    142c:	f0 e0       	ldi	r31, 0x00	; 0
    142e:	10 82       	st	Z, r1
    1430:	36 c0       	rjmp	.+108    	; 0x149e <DIO_SetPortLevel+0x14c>
            break;
        case DIO_PORTD:
            PORTD = 0x00;
    1432:	e2 e3       	ldi	r30, 0x32	; 50
    1434:	f0 e0       	ldi	r31, 0x00	; 0
    1436:	10 82       	st	Z, r1
    1438:	32 c0       	rjmp	.+100    	; 0x149e <DIO_SetPortLevel+0x14c>
        default:
            break;
        }
    }
    else {
        switch (port)
    143a:	89 81       	ldd	r24, Y+1	; 0x01
    143c:	28 2f       	mov	r18, r24
    143e:	30 e0       	ldi	r19, 0x00	; 0
    1440:	3c 83       	std	Y+4, r19	; 0x04
    1442:	2b 83       	std	Y+3, r18	; 0x03
    1444:	8b 81       	ldd	r24, Y+3	; 0x03
    1446:	9c 81       	ldd	r25, Y+4	; 0x04
    1448:	81 30       	cpi	r24, 0x01	; 1
    144a:	91 05       	cpc	r25, r1
    144c:	d1 f0       	breq	.+52     	; 0x1482 <DIO_SetPortLevel+0x130>
    144e:	2b 81       	ldd	r18, Y+3	; 0x03
    1450:	3c 81       	ldd	r19, Y+4	; 0x04
    1452:	22 30       	cpi	r18, 0x02	; 2
    1454:	31 05       	cpc	r19, r1
    1456:	2c f4       	brge	.+10     	; 0x1462 <DIO_SetPortLevel+0x110>
    1458:	8b 81       	ldd	r24, Y+3	; 0x03
    145a:	9c 81       	ldd	r25, Y+4	; 0x04
    145c:	00 97       	sbiw	r24, 0x00	; 0
    145e:	61 f0       	breq	.+24     	; 0x1478 <DIO_SetPortLevel+0x126>
    1460:	1e c0       	rjmp	.+60     	; 0x149e <DIO_SetPortLevel+0x14c>
    1462:	2b 81       	ldd	r18, Y+3	; 0x03
    1464:	3c 81       	ldd	r19, Y+4	; 0x04
    1466:	22 30       	cpi	r18, 0x02	; 2
    1468:	31 05       	cpc	r19, r1
    146a:	81 f0       	breq	.+32     	; 0x148c <DIO_SetPortLevel+0x13a>
    146c:	8b 81       	ldd	r24, Y+3	; 0x03
    146e:	9c 81       	ldd	r25, Y+4	; 0x04
    1470:	83 30       	cpi	r24, 0x03	; 3
    1472:	91 05       	cpc	r25, r1
    1474:	81 f0       	breq	.+32     	; 0x1496 <DIO_SetPortLevel+0x144>
    1476:	13 c0       	rjmp	.+38     	; 0x149e <DIO_SetPortLevel+0x14c>
        {
        case DIO_PORTA:
            PORTA = level;
    1478:	eb e3       	ldi	r30, 0x3B	; 59
    147a:	f0 e0       	ldi	r31, 0x00	; 0
    147c:	8a 81       	ldd	r24, Y+2	; 0x02
    147e:	80 83       	st	Z, r24
    1480:	0e c0       	rjmp	.+28     	; 0x149e <DIO_SetPortLevel+0x14c>
            break;
        case DIO_PORTB:
            PORTB = level;
    1482:	e8 e3       	ldi	r30, 0x38	; 56
    1484:	f0 e0       	ldi	r31, 0x00	; 0
    1486:	8a 81       	ldd	r24, Y+2	; 0x02
    1488:	80 83       	st	Z, r24
    148a:	09 c0       	rjmp	.+18     	; 0x149e <DIO_SetPortLevel+0x14c>
            break;
        case DIO_PORTC:
            PORTC = level;
    148c:	e5 e3       	ldi	r30, 0x35	; 53
    148e:	f0 e0       	ldi	r31, 0x00	; 0
    1490:	8a 81       	ldd	r24, Y+2	; 0x02
    1492:	80 83       	st	Z, r24
    1494:	04 c0       	rjmp	.+8      	; 0x149e <DIO_SetPortLevel+0x14c>
            break;
        case DIO_PORTD:
            PORTD = level;
    1496:	e2 e3       	ldi	r30, 0x32	; 50
    1498:	f0 e0       	ldi	r31, 0x00	; 0
    149a:	8a 81       	ldd	r24, Y+2	; 0x02
    149c:	80 83       	st	Z, r24
        default:
            break;
        }

    }
}
    149e:	28 96       	adiw	r28, 0x08	; 8
    14a0:	0f b6       	in	r0, 0x3f	; 63
    14a2:	f8 94       	cli
    14a4:	de bf       	out	0x3e, r29	; 62
    14a6:	0f be       	out	0x3f, r0	; 63
    14a8:	cd bf       	out	0x3d, r28	; 61
    14aa:	cf 91       	pop	r28
    14ac:	df 91       	pop	r29
    14ae:	08 95       	ret

000014b0 <DIO_ReadPinLevel>:



DIO_LevelType DIO_ReadPinLevel(DIO_PortType port, DIO_PinType pin) {
    14b0:	df 93       	push	r29
    14b2:	cf 93       	push	r28
    14b4:	00 d0       	rcall	.+0      	; 0x14b6 <DIO_ReadPinLevel+0x6>
    14b6:	00 d0       	rcall	.+0      	; 0x14b8 <DIO_ReadPinLevel+0x8>
    14b8:	0f 92       	push	r0
    14ba:	cd b7       	in	r28, 0x3d	; 61
    14bc:	de b7       	in	r29, 0x3e	; 62
    14be:	8a 83       	std	Y+2, r24	; 0x02
    14c0:	6b 83       	std	Y+3, r22	; 0x03
    DIO_LevelType result = DIO_LOW;
    14c2:	19 82       	std	Y+1, r1	; 0x01
    switch (port)
    14c4:	8a 81       	ldd	r24, Y+2	; 0x02
    14c6:	28 2f       	mov	r18, r24
    14c8:	30 e0       	ldi	r19, 0x00	; 0
    14ca:	3d 83       	std	Y+5, r19	; 0x05
    14cc:	2c 83       	std	Y+4, r18	; 0x04
    14ce:	4c 81       	ldd	r20, Y+4	; 0x04
    14d0:	5d 81       	ldd	r21, Y+5	; 0x05
    14d2:	41 30       	cpi	r20, 0x01	; 1
    14d4:	51 05       	cpc	r21, r1
    14d6:	41 f1       	breq	.+80     	; 0x1528 <DIO_ReadPinLevel+0x78>
    14d8:	8c 81       	ldd	r24, Y+4	; 0x04
    14da:	9d 81       	ldd	r25, Y+5	; 0x05
    14dc:	82 30       	cpi	r24, 0x02	; 2
    14de:	91 05       	cpc	r25, r1
    14e0:	34 f4       	brge	.+12     	; 0x14ee <DIO_ReadPinLevel+0x3e>
    14e2:	2c 81       	ldd	r18, Y+4	; 0x04
    14e4:	3d 81       	ldd	r19, Y+5	; 0x05
    14e6:	21 15       	cp	r18, r1
    14e8:	31 05       	cpc	r19, r1
    14ea:	61 f0       	breq	.+24     	; 0x1504 <DIO_ReadPinLevel+0x54>
    14ec:	52 c0       	rjmp	.+164    	; 0x1592 <DIO_ReadPinLevel+0xe2>
    14ee:	4c 81       	ldd	r20, Y+4	; 0x04
    14f0:	5d 81       	ldd	r21, Y+5	; 0x05
    14f2:	42 30       	cpi	r20, 0x02	; 2
    14f4:	51 05       	cpc	r21, r1
    14f6:	51 f1       	breq	.+84     	; 0x154c <DIO_ReadPinLevel+0x9c>
    14f8:	8c 81       	ldd	r24, Y+4	; 0x04
    14fa:	9d 81       	ldd	r25, Y+5	; 0x05
    14fc:	83 30       	cpi	r24, 0x03	; 3
    14fe:	91 05       	cpc	r25, r1
    1500:	b9 f1       	breq	.+110    	; 0x1570 <DIO_ReadPinLevel+0xc0>
    1502:	47 c0       	rjmp	.+142    	; 0x1592 <DIO_ReadPinLevel+0xe2>
    {
    case DIO_PORTA:
        result = GET_BIT(PINA, pin);
    1504:	e9 e3       	ldi	r30, 0x39	; 57
    1506:	f0 e0       	ldi	r31, 0x00	; 0
    1508:	80 81       	ld	r24, Z
    150a:	28 2f       	mov	r18, r24
    150c:	30 e0       	ldi	r19, 0x00	; 0
    150e:	8b 81       	ldd	r24, Y+3	; 0x03
    1510:	88 2f       	mov	r24, r24
    1512:	90 e0       	ldi	r25, 0x00	; 0
    1514:	a9 01       	movw	r20, r18
    1516:	02 c0       	rjmp	.+4      	; 0x151c <DIO_ReadPinLevel+0x6c>
    1518:	55 95       	asr	r21
    151a:	47 95       	ror	r20
    151c:	8a 95       	dec	r24
    151e:	e2 f7       	brpl	.-8      	; 0x1518 <DIO_ReadPinLevel+0x68>
    1520:	ca 01       	movw	r24, r20
    1522:	81 70       	andi	r24, 0x01	; 1
    1524:	89 83       	std	Y+1, r24	; 0x01
    1526:	35 c0       	rjmp	.+106    	; 0x1592 <DIO_ReadPinLevel+0xe2>
        break;
    case DIO_PORTB:
        result = GET_BIT(PINB, pin);
    1528:	e6 e3       	ldi	r30, 0x36	; 54
    152a:	f0 e0       	ldi	r31, 0x00	; 0
    152c:	80 81       	ld	r24, Z
    152e:	28 2f       	mov	r18, r24
    1530:	30 e0       	ldi	r19, 0x00	; 0
    1532:	8b 81       	ldd	r24, Y+3	; 0x03
    1534:	88 2f       	mov	r24, r24
    1536:	90 e0       	ldi	r25, 0x00	; 0
    1538:	a9 01       	movw	r20, r18
    153a:	02 c0       	rjmp	.+4      	; 0x1540 <DIO_ReadPinLevel+0x90>
    153c:	55 95       	asr	r21
    153e:	47 95       	ror	r20
    1540:	8a 95       	dec	r24
    1542:	e2 f7       	brpl	.-8      	; 0x153c <DIO_ReadPinLevel+0x8c>
    1544:	ca 01       	movw	r24, r20
    1546:	81 70       	andi	r24, 0x01	; 1
    1548:	89 83       	std	Y+1, r24	; 0x01
    154a:	23 c0       	rjmp	.+70     	; 0x1592 <DIO_ReadPinLevel+0xe2>
        break;
    case DIO_PORTC:
        result = GET_BIT(PINC, pin);
    154c:	e3 e3       	ldi	r30, 0x33	; 51
    154e:	f0 e0       	ldi	r31, 0x00	; 0
    1550:	80 81       	ld	r24, Z
    1552:	28 2f       	mov	r18, r24
    1554:	30 e0       	ldi	r19, 0x00	; 0
    1556:	8b 81       	ldd	r24, Y+3	; 0x03
    1558:	88 2f       	mov	r24, r24
    155a:	90 e0       	ldi	r25, 0x00	; 0
    155c:	a9 01       	movw	r20, r18
    155e:	02 c0       	rjmp	.+4      	; 0x1564 <DIO_ReadPinLevel+0xb4>
    1560:	55 95       	asr	r21
    1562:	47 95       	ror	r20
    1564:	8a 95       	dec	r24
    1566:	e2 f7       	brpl	.-8      	; 0x1560 <DIO_ReadPinLevel+0xb0>
    1568:	ca 01       	movw	r24, r20
    156a:	81 70       	andi	r24, 0x01	; 1
    156c:	89 83       	std	Y+1, r24	; 0x01
    156e:	11 c0       	rjmp	.+34     	; 0x1592 <DIO_ReadPinLevel+0xe2>
        break;
    case DIO_PORTD:
        result = GET_BIT(PIND, pin);
    1570:	e0 e3       	ldi	r30, 0x30	; 48
    1572:	f0 e0       	ldi	r31, 0x00	; 0
    1574:	80 81       	ld	r24, Z
    1576:	28 2f       	mov	r18, r24
    1578:	30 e0       	ldi	r19, 0x00	; 0
    157a:	8b 81       	ldd	r24, Y+3	; 0x03
    157c:	88 2f       	mov	r24, r24
    157e:	90 e0       	ldi	r25, 0x00	; 0
    1580:	a9 01       	movw	r20, r18
    1582:	02 c0       	rjmp	.+4      	; 0x1588 <DIO_ReadPinLevel+0xd8>
    1584:	55 95       	asr	r21
    1586:	47 95       	ror	r20
    1588:	8a 95       	dec	r24
    158a:	e2 f7       	brpl	.-8      	; 0x1584 <DIO_ReadPinLevel+0xd4>
    158c:	ca 01       	movw	r24, r20
    158e:	81 70       	andi	r24, 0x01	; 1
    1590:	89 83       	std	Y+1, r24	; 0x01
        break;
    default:
        break;
    }
    return result;
    1592:	89 81       	ldd	r24, Y+1	; 0x01
}
    1594:	0f 90       	pop	r0
    1596:	0f 90       	pop	r0
    1598:	0f 90       	pop	r0
    159a:	0f 90       	pop	r0
    159c:	0f 90       	pop	r0
    159e:	cf 91       	pop	r28
    15a0:	df 91       	pop	r29
    15a2:	08 95       	ret

000015a4 <DIO_ReadPortLevel>:

DIO_LevelType DIO_ReadPortLevel (DIO_PortType port) {
    15a4:	df 93       	push	r29
    15a6:	cf 93       	push	r28
    15a8:	00 d0       	rcall	.+0      	; 0x15aa <DIO_ReadPortLevel+0x6>
    15aa:	00 d0       	rcall	.+0      	; 0x15ac <DIO_ReadPortLevel+0x8>
    15ac:	cd b7       	in	r28, 0x3d	; 61
    15ae:	de b7       	in	r29, 0x3e	; 62
    15b0:	8a 83       	std	Y+2, r24	; 0x02
    u8 result = 0x00;
    15b2:	19 82       	std	Y+1, r1	; 0x01
    switch (port)
    15b4:	8a 81       	ldd	r24, Y+2	; 0x02
    15b6:	28 2f       	mov	r18, r24
    15b8:	30 e0       	ldi	r19, 0x00	; 0
    15ba:	3c 83       	std	Y+4, r19	; 0x04
    15bc:	2b 83       	std	Y+3, r18	; 0x03
    15be:	8b 81       	ldd	r24, Y+3	; 0x03
    15c0:	9c 81       	ldd	r25, Y+4	; 0x04
    15c2:	81 30       	cpi	r24, 0x01	; 1
    15c4:	91 05       	cpc	r25, r1
    15c6:	49 f1       	breq	.+82     	; 0x161a <DIO_ReadPortLevel+0x76>
    15c8:	2b 81       	ldd	r18, Y+3	; 0x03
    15ca:	3c 81       	ldd	r19, Y+4	; 0x04
    15cc:	22 30       	cpi	r18, 0x02	; 2
    15ce:	31 05       	cpc	r19, r1
    15d0:	2c f4       	brge	.+10     	; 0x15dc <DIO_ReadPortLevel+0x38>
    15d2:	8b 81       	ldd	r24, Y+3	; 0x03
    15d4:	9c 81       	ldd	r25, Y+4	; 0x04
    15d6:	00 97       	sbiw	r24, 0x00	; 0
    15d8:	61 f0       	breq	.+24     	; 0x15f2 <DIO_ReadPortLevel+0x4e>
    15da:	5a c0       	rjmp	.+180    	; 0x1690 <DIO_ReadPortLevel+0xec>
    15dc:	2b 81       	ldd	r18, Y+3	; 0x03
    15de:	3c 81       	ldd	r19, Y+4	; 0x04
    15e0:	22 30       	cpi	r18, 0x02	; 2
    15e2:	31 05       	cpc	r19, r1
    15e4:	71 f1       	breq	.+92     	; 0x1642 <DIO_ReadPortLevel+0x9e>
    15e6:	8b 81       	ldd	r24, Y+3	; 0x03
    15e8:	9c 81       	ldd	r25, Y+4	; 0x04
    15ea:	83 30       	cpi	r24, 0x03	; 3
    15ec:	91 05       	cpc	r25, r1
    15ee:	e9 f1       	breq	.+122    	; 0x166a <DIO_ReadPortLevel+0xc6>
    15f0:	4f c0       	rjmp	.+158    	; 0x1690 <DIO_ReadPortLevel+0xec>
    {
    case DIO_PORTA:
        if (PINA == 0xFF) {
    15f2:	e9 e3       	ldi	r30, 0x39	; 57
    15f4:	f0 e0       	ldi	r31, 0x00	; 0
    15f6:	80 81       	ld	r24, Z
    15f8:	8f 3f       	cpi	r24, 0xFF	; 255
    15fa:	19 f4       	brne	.+6      	; 0x1602 <DIO_ReadPortLevel+0x5e>
            result = DIO_HIGH;
    15fc:	81 e0       	ldi	r24, 0x01	; 1
    15fe:	89 83       	std	Y+1, r24	; 0x01
    1600:	47 c0       	rjmp	.+142    	; 0x1690 <DIO_ReadPortLevel+0xec>
        }
        else if (PINA == 0x00) {
    1602:	e9 e3       	ldi	r30, 0x39	; 57
    1604:	f0 e0       	ldi	r31, 0x00	; 0
    1606:	80 81       	ld	r24, Z
    1608:	88 23       	and	r24, r24
    160a:	11 f4       	brne	.+4      	; 0x1610 <DIO_ReadPortLevel+0x6c>
            result = DIO_LOW;
    160c:	19 82       	std	Y+1, r1	; 0x01
    160e:	40 c0       	rjmp	.+128    	; 0x1690 <DIO_ReadPortLevel+0xec>
        }
        else {
            result = PINA;
    1610:	e9 e3       	ldi	r30, 0x39	; 57
    1612:	f0 e0       	ldi	r31, 0x00	; 0
    1614:	80 81       	ld	r24, Z
    1616:	89 83       	std	Y+1, r24	; 0x01
    1618:	3b c0       	rjmp	.+118    	; 0x1690 <DIO_ReadPortLevel+0xec>
        }
        break;
    case DIO_PORTB:
        if (PINB == 0xFF) {
    161a:	e6 e3       	ldi	r30, 0x36	; 54
    161c:	f0 e0       	ldi	r31, 0x00	; 0
    161e:	80 81       	ld	r24, Z
    1620:	8f 3f       	cpi	r24, 0xFF	; 255
    1622:	19 f4       	brne	.+6      	; 0x162a <DIO_ReadPortLevel+0x86>
            result = DIO_HIGH;
    1624:	81 e0       	ldi	r24, 0x01	; 1
    1626:	89 83       	std	Y+1, r24	; 0x01
    1628:	33 c0       	rjmp	.+102    	; 0x1690 <DIO_ReadPortLevel+0xec>
        }
        else if (PINB == 0x00) {
    162a:	e6 e3       	ldi	r30, 0x36	; 54
    162c:	f0 e0       	ldi	r31, 0x00	; 0
    162e:	80 81       	ld	r24, Z
    1630:	88 23       	and	r24, r24
    1632:	11 f4       	brne	.+4      	; 0x1638 <DIO_ReadPortLevel+0x94>
            result = DIO_LOW;
    1634:	19 82       	std	Y+1, r1	; 0x01
    1636:	2c c0       	rjmp	.+88     	; 0x1690 <DIO_ReadPortLevel+0xec>
        }
        else {
            result = PINB;
    1638:	e6 e3       	ldi	r30, 0x36	; 54
    163a:	f0 e0       	ldi	r31, 0x00	; 0
    163c:	80 81       	ld	r24, Z
    163e:	89 83       	std	Y+1, r24	; 0x01
    1640:	27 c0       	rjmp	.+78     	; 0x1690 <DIO_ReadPortLevel+0xec>
        }
        break;
    case DIO_PORTC:
        if (PINC == 0xFF) {
    1642:	e3 e3       	ldi	r30, 0x33	; 51
    1644:	f0 e0       	ldi	r31, 0x00	; 0
    1646:	80 81       	ld	r24, Z
    1648:	8f 3f       	cpi	r24, 0xFF	; 255
    164a:	19 f4       	brne	.+6      	; 0x1652 <DIO_ReadPortLevel+0xae>
            result = DIO_HIGH;
    164c:	81 e0       	ldi	r24, 0x01	; 1
    164e:	89 83       	std	Y+1, r24	; 0x01
    1650:	1f c0       	rjmp	.+62     	; 0x1690 <DIO_ReadPortLevel+0xec>
        }
        else if (PINC == 0x00) {
    1652:	e3 e3       	ldi	r30, 0x33	; 51
    1654:	f0 e0       	ldi	r31, 0x00	; 0
    1656:	80 81       	ld	r24, Z
    1658:	88 23       	and	r24, r24
    165a:	11 f4       	brne	.+4      	; 0x1660 <DIO_ReadPortLevel+0xbc>
            result = DIO_LOW;
    165c:	19 82       	std	Y+1, r1	; 0x01
    165e:	18 c0       	rjmp	.+48     	; 0x1690 <DIO_ReadPortLevel+0xec>
        }
        else {
            result = PINC;
    1660:	e3 e3       	ldi	r30, 0x33	; 51
    1662:	f0 e0       	ldi	r31, 0x00	; 0
    1664:	80 81       	ld	r24, Z
    1666:	89 83       	std	Y+1, r24	; 0x01
    1668:	13 c0       	rjmp	.+38     	; 0x1690 <DIO_ReadPortLevel+0xec>
        }
        break;
    case DIO_PORTD:
        if (PIND == 0xFF) {
    166a:	e0 e3       	ldi	r30, 0x30	; 48
    166c:	f0 e0       	ldi	r31, 0x00	; 0
    166e:	80 81       	ld	r24, Z
    1670:	8f 3f       	cpi	r24, 0xFF	; 255
    1672:	19 f4       	brne	.+6      	; 0x167a <DIO_ReadPortLevel+0xd6>
            result = DIO_HIGH;
    1674:	81 e0       	ldi	r24, 0x01	; 1
    1676:	89 83       	std	Y+1, r24	; 0x01
    1678:	0b c0       	rjmp	.+22     	; 0x1690 <DIO_ReadPortLevel+0xec>
        }
        else if (PIND == 0x00) {
    167a:	e0 e3       	ldi	r30, 0x30	; 48
    167c:	f0 e0       	ldi	r31, 0x00	; 0
    167e:	80 81       	ld	r24, Z
    1680:	88 23       	and	r24, r24
    1682:	11 f4       	brne	.+4      	; 0x1688 <DIO_ReadPortLevel+0xe4>
            result = DIO_LOW;
    1684:	19 82       	std	Y+1, r1	; 0x01
    1686:	04 c0       	rjmp	.+8      	; 0x1690 <DIO_ReadPortLevel+0xec>
        }
        else {
            result = PIND;
    1688:	e0 e3       	ldi	r30, 0x30	; 48
    168a:	f0 e0       	ldi	r31, 0x00	; 0
    168c:	80 81       	ld	r24, Z
    168e:	89 83       	std	Y+1, r24	; 0x01
        }
        break;
    default:
        break;
    }
    return result;
    1690:	89 81       	ldd	r24, Y+1	; 0x01
}
    1692:	0f 90       	pop	r0
    1694:	0f 90       	pop	r0
    1696:	0f 90       	pop	r0
    1698:	0f 90       	pop	r0
    169a:	cf 91       	pop	r28
    169c:	df 91       	pop	r29
    169e:	08 95       	ret

000016a0 <SSD_Init>:
	_delay_ms(500);
	PORTD = 0b01101111; // Print 9
	_delay_ms(500);
	PORTD = 0b00000000; // off*/

void SSD_Init(void) {
    16a0:	df 93       	push	r29
    16a2:	cf 93       	push	r28
    16a4:	cd b7       	in	r28, 0x3d	; 61
    16a6:	de b7       	in	r29, 0x3e	; 62
    DIO_SetPinMode(SSD_PIN_A, DIO_OUTPUT);
    16a8:	83 e0       	ldi	r24, 0x03	; 3
    16aa:	60 e0       	ldi	r22, 0x00	; 0
    16ac:	42 e0       	ldi	r20, 0x02	; 2
    16ae:	0e 94 9b 05 	call	0xb36	; 0xb36 <DIO_SetPinMode>
    DIO_SetPinMode(SSD_PIN_B, DIO_OUTPUT);
    16b2:	83 e0       	ldi	r24, 0x03	; 3
    16b4:	61 e0       	ldi	r22, 0x01	; 1
    16b6:	42 e0       	ldi	r20, 0x02	; 2
    16b8:	0e 94 9b 05 	call	0xb36	; 0xb36 <DIO_SetPinMode>
    DIO_SetPinMode(SSD_PIN_C, DIO_OUTPUT);
    16bc:	83 e0       	ldi	r24, 0x03	; 3
    16be:	62 e0       	ldi	r22, 0x02	; 2
    16c0:	42 e0       	ldi	r20, 0x02	; 2
    16c2:	0e 94 9b 05 	call	0xb36	; 0xb36 <DIO_SetPinMode>
    DIO_SetPinMode(SSD_PIN_D, DIO_OUTPUT);
    16c6:	83 e0       	ldi	r24, 0x03	; 3
    16c8:	63 e0       	ldi	r22, 0x03	; 3
    16ca:	42 e0       	ldi	r20, 0x02	; 2
    16cc:	0e 94 9b 05 	call	0xb36	; 0xb36 <DIO_SetPinMode>
    DIO_SetPinMode(SSD_PIN_E, DIO_OUTPUT);
    16d0:	83 e0       	ldi	r24, 0x03	; 3
    16d2:	64 e0       	ldi	r22, 0x04	; 4
    16d4:	42 e0       	ldi	r20, 0x02	; 2
    16d6:	0e 94 9b 05 	call	0xb36	; 0xb36 <DIO_SetPinMode>
    DIO_SetPinMode(SSD_PIN_F, DIO_OUTPUT);
    16da:	83 e0       	ldi	r24, 0x03	; 3
    16dc:	65 e0       	ldi	r22, 0x05	; 5
    16de:	42 e0       	ldi	r20, 0x02	; 2
    16e0:	0e 94 9b 05 	call	0xb36	; 0xb36 <DIO_SetPinMode>
    DIO_SetPinMode(SSD_PIN_G, DIO_OUTPUT);
    16e4:	83 e0       	ldi	r24, 0x03	; 3
    16e6:	66 e0       	ldi	r22, 0x06	; 6
    16e8:	42 e0       	ldi	r20, 0x02	; 2
    16ea:	0e 94 9b 05 	call	0xb36	; 0xb36 <DIO_SetPinMode>

}
    16ee:	cf 91       	pop	r28
    16f0:	df 91       	pop	r29
    16f2:	08 95       	ret

000016f4 <SSD_Write>:
void SSD_Write (SSD_NumberType number) {
    16f4:	df 93       	push	r29
    16f6:	cf 93       	push	r28
    16f8:	00 d0       	rcall	.+0      	; 0x16fa <SSD_Write+0x6>
    16fa:	0f 92       	push	r0
    16fc:	cd b7       	in	r28, 0x3d	; 61
    16fe:	de b7       	in	r29, 0x3e	; 62
    1700:	89 83       	std	Y+1, r24	; 0x01
    switch (number)
    1702:	89 81       	ldd	r24, Y+1	; 0x01
    1704:	28 2f       	mov	r18, r24
    1706:	30 e0       	ldi	r19, 0x00	; 0
    1708:	3b 83       	std	Y+3, r19	; 0x03
    170a:	2a 83       	std	Y+2, r18	; 0x02
    170c:	8a 81       	ldd	r24, Y+2	; 0x02
    170e:	9b 81       	ldd	r25, Y+3	; 0x03
    1710:	84 30       	cpi	r24, 0x04	; 4
    1712:	91 05       	cpc	r25, r1
    1714:	09 f4       	brne	.+2      	; 0x1718 <SSD_Write+0x24>
    1716:	d7 c0       	rjmp	.+430    	; 0x18c6 <SSD_Write+0x1d2>
    1718:	2a 81       	ldd	r18, Y+2	; 0x02
    171a:	3b 81       	ldd	r19, Y+3	; 0x03
    171c:	25 30       	cpi	r18, 0x05	; 5
    171e:	31 05       	cpc	r19, r1
    1720:	ec f4       	brge	.+58     	; 0x175c <SSD_Write+0x68>
    1722:	8a 81       	ldd	r24, Y+2	; 0x02
    1724:	9b 81       	ldd	r25, Y+3	; 0x03
    1726:	81 30       	cpi	r24, 0x01	; 1
    1728:	91 05       	cpc	r25, r1
    172a:	09 f4       	brne	.+2      	; 0x172e <SSD_Write+0x3a>
    172c:	60 c0       	rjmp	.+192    	; 0x17ee <SSD_Write+0xfa>
    172e:	2a 81       	ldd	r18, Y+2	; 0x02
    1730:	3b 81       	ldd	r19, Y+3	; 0x03
    1732:	22 30       	cpi	r18, 0x02	; 2
    1734:	31 05       	cpc	r19, r1
    1736:	2c f4       	brge	.+10     	; 0x1742 <SSD_Write+0x4e>
    1738:	8a 81       	ldd	r24, Y+2	; 0x02
    173a:	9b 81       	ldd	r25, Y+3	; 0x03
    173c:	00 97       	sbiw	r24, 0x00	; 0
    173e:	99 f1       	breq	.+102    	; 0x17a6 <SSD_Write+0xb2>
    1740:	9a c1       	rjmp	.+820    	; 0x1a76 <SSD_Write+0x382>
    1742:	2a 81       	ldd	r18, Y+2	; 0x02
    1744:	3b 81       	ldd	r19, Y+3	; 0x03
    1746:	22 30       	cpi	r18, 0x02	; 2
    1748:	31 05       	cpc	r19, r1
    174a:	09 f4       	brne	.+2      	; 0x174e <SSD_Write+0x5a>
    174c:	74 c0       	rjmp	.+232    	; 0x1836 <SSD_Write+0x142>
    174e:	8a 81       	ldd	r24, Y+2	; 0x02
    1750:	9b 81       	ldd	r25, Y+3	; 0x03
    1752:	83 30       	cpi	r24, 0x03	; 3
    1754:	91 05       	cpc	r25, r1
    1756:	09 f4       	brne	.+2      	; 0x175a <SSD_Write+0x66>
    1758:	92 c0       	rjmp	.+292    	; 0x187e <SSD_Write+0x18a>
    175a:	8d c1       	rjmp	.+794    	; 0x1a76 <SSD_Write+0x382>
    175c:	2a 81       	ldd	r18, Y+2	; 0x02
    175e:	3b 81       	ldd	r19, Y+3	; 0x03
    1760:	27 30       	cpi	r18, 0x07	; 7
    1762:	31 05       	cpc	r19, r1
    1764:	09 f4       	brne	.+2      	; 0x1768 <SSD_Write+0x74>
    1766:	1b c1       	rjmp	.+566    	; 0x199e <SSD_Write+0x2aa>
    1768:	8a 81       	ldd	r24, Y+2	; 0x02
    176a:	9b 81       	ldd	r25, Y+3	; 0x03
    176c:	88 30       	cpi	r24, 0x08	; 8
    176e:	91 05       	cpc	r25, r1
    1770:	6c f4       	brge	.+26     	; 0x178c <SSD_Write+0x98>
    1772:	2a 81       	ldd	r18, Y+2	; 0x02
    1774:	3b 81       	ldd	r19, Y+3	; 0x03
    1776:	25 30       	cpi	r18, 0x05	; 5
    1778:	31 05       	cpc	r19, r1
    177a:	09 f4       	brne	.+2      	; 0x177e <SSD_Write+0x8a>
    177c:	c8 c0       	rjmp	.+400    	; 0x190e <SSD_Write+0x21a>
    177e:	8a 81       	ldd	r24, Y+2	; 0x02
    1780:	9b 81       	ldd	r25, Y+3	; 0x03
    1782:	86 30       	cpi	r24, 0x06	; 6
    1784:	91 05       	cpc	r25, r1
    1786:	09 f4       	brne	.+2      	; 0x178a <SSD_Write+0x96>
    1788:	e6 c0       	rjmp	.+460    	; 0x1956 <SSD_Write+0x262>
    178a:	75 c1       	rjmp	.+746    	; 0x1a76 <SSD_Write+0x382>
    178c:	2a 81       	ldd	r18, Y+2	; 0x02
    178e:	3b 81       	ldd	r19, Y+3	; 0x03
    1790:	28 30       	cpi	r18, 0x08	; 8
    1792:	31 05       	cpc	r19, r1
    1794:	09 f4       	brne	.+2      	; 0x1798 <SSD_Write+0xa4>
    1796:	27 c1       	rjmp	.+590    	; 0x19e6 <SSD_Write+0x2f2>
    1798:	8a 81       	ldd	r24, Y+2	; 0x02
    179a:	9b 81       	ldd	r25, Y+3	; 0x03
    179c:	89 30       	cpi	r24, 0x09	; 9
    179e:	91 05       	cpc	r25, r1
    17a0:	09 f4       	brne	.+2      	; 0x17a4 <SSD_Write+0xb0>
    17a2:	45 c1       	rjmp	.+650    	; 0x1a2e <SSD_Write+0x33a>
    17a4:	68 c1       	rjmp	.+720    	; 0x1a76 <SSD_Write+0x382>
    {

    case SSD_NUMBER_0: // 0b00111111
    #if SSD_TYPE == COMM_CATHODE
        DIO_SetPinLevel(SSD_PIN_A, DIO_HIGH);
    17a6:	83 e0       	ldi	r24, 0x03	; 3
    17a8:	60 e0       	ldi	r22, 0x00	; 0
    17aa:	41 e0       	ldi	r20, 0x01	; 1
    17ac:	0e 94 a9 08 	call	0x1152	; 0x1152 <DIO_SetPinLevel>
        DIO_SetPinLevel(SSD_PIN_B, DIO_HIGH);
    17b0:	83 e0       	ldi	r24, 0x03	; 3
    17b2:	61 e0       	ldi	r22, 0x01	; 1
    17b4:	41 e0       	ldi	r20, 0x01	; 1
    17b6:	0e 94 a9 08 	call	0x1152	; 0x1152 <DIO_SetPinLevel>
        DIO_SetPinLevel(SSD_PIN_C, DIO_HIGH);
    17ba:	83 e0       	ldi	r24, 0x03	; 3
    17bc:	62 e0       	ldi	r22, 0x02	; 2
    17be:	41 e0       	ldi	r20, 0x01	; 1
    17c0:	0e 94 a9 08 	call	0x1152	; 0x1152 <DIO_SetPinLevel>
        DIO_SetPinLevel(SSD_PIN_D, DIO_HIGH);
    17c4:	83 e0       	ldi	r24, 0x03	; 3
    17c6:	63 e0       	ldi	r22, 0x03	; 3
    17c8:	41 e0       	ldi	r20, 0x01	; 1
    17ca:	0e 94 a9 08 	call	0x1152	; 0x1152 <DIO_SetPinLevel>
        DIO_SetPinLevel(SSD_PIN_E, DIO_HIGH);
    17ce:	83 e0       	ldi	r24, 0x03	; 3
    17d0:	64 e0       	ldi	r22, 0x04	; 4
    17d2:	41 e0       	ldi	r20, 0x01	; 1
    17d4:	0e 94 a9 08 	call	0x1152	; 0x1152 <DIO_SetPinLevel>
        DIO_SetPinLevel(SSD_PIN_F, DIO_HIGH);
    17d8:	83 e0       	ldi	r24, 0x03	; 3
    17da:	65 e0       	ldi	r22, 0x05	; 5
    17dc:	41 e0       	ldi	r20, 0x01	; 1
    17de:	0e 94 a9 08 	call	0x1152	; 0x1152 <DIO_SetPinLevel>
        DIO_SetPinLevel(SSD_PIN_G, DIO_LOW);
    17e2:	83 e0       	ldi	r24, 0x03	; 3
    17e4:	66 e0       	ldi	r22, 0x06	; 6
    17e6:	40 e0       	ldi	r20, 0x00	; 0
    17e8:	0e 94 a9 08 	call	0x1152	; 0x1152 <DIO_SetPinLevel>
    17ec:	67 c1       	rjmp	.+718    	; 0x1abc <SSD_Write+0x3c8>
    #endif
        break;

    case SSD_NUMBER_1: // 0b00000110
    #if SSD_TYPE == COMM_CATHODE
        DIO_SetPinLevel(SSD_PIN_A, DIO_LOW);
    17ee:	83 e0       	ldi	r24, 0x03	; 3
    17f0:	60 e0       	ldi	r22, 0x00	; 0
    17f2:	40 e0       	ldi	r20, 0x00	; 0
    17f4:	0e 94 a9 08 	call	0x1152	; 0x1152 <DIO_SetPinLevel>
        DIO_SetPinLevel(SSD_PIN_B, DIO_HIGH);
    17f8:	83 e0       	ldi	r24, 0x03	; 3
    17fa:	61 e0       	ldi	r22, 0x01	; 1
    17fc:	41 e0       	ldi	r20, 0x01	; 1
    17fe:	0e 94 a9 08 	call	0x1152	; 0x1152 <DIO_SetPinLevel>
        DIO_SetPinLevel(SSD_PIN_C, DIO_HIGH);
    1802:	83 e0       	ldi	r24, 0x03	; 3
    1804:	62 e0       	ldi	r22, 0x02	; 2
    1806:	41 e0       	ldi	r20, 0x01	; 1
    1808:	0e 94 a9 08 	call	0x1152	; 0x1152 <DIO_SetPinLevel>
        DIO_SetPinLevel(SSD_PIN_D, DIO_LOW);
    180c:	83 e0       	ldi	r24, 0x03	; 3
    180e:	63 e0       	ldi	r22, 0x03	; 3
    1810:	40 e0       	ldi	r20, 0x00	; 0
    1812:	0e 94 a9 08 	call	0x1152	; 0x1152 <DIO_SetPinLevel>
        DIO_SetPinLevel(SSD_PIN_E, DIO_LOW);
    1816:	83 e0       	ldi	r24, 0x03	; 3
    1818:	64 e0       	ldi	r22, 0x04	; 4
    181a:	40 e0       	ldi	r20, 0x00	; 0
    181c:	0e 94 a9 08 	call	0x1152	; 0x1152 <DIO_SetPinLevel>
        DIO_SetPinLevel(SSD_PIN_F, DIO_LOW);
    1820:	83 e0       	ldi	r24, 0x03	; 3
    1822:	65 e0       	ldi	r22, 0x05	; 5
    1824:	40 e0       	ldi	r20, 0x00	; 0
    1826:	0e 94 a9 08 	call	0x1152	; 0x1152 <DIO_SetPinLevel>
        DIO_SetPinLevel(SSD_PIN_G, DIO_LOW);
    182a:	83 e0       	ldi	r24, 0x03	; 3
    182c:	66 e0       	ldi	r22, 0x06	; 6
    182e:	40 e0       	ldi	r20, 0x00	; 0
    1830:	0e 94 a9 08 	call	0x1152	; 0x1152 <DIO_SetPinLevel>
    1834:	43 c1       	rjmp	.+646    	; 0x1abc <SSD_Write+0x3c8>
    #endif
        break;

    case SSD_NUMBER_2: // 0b01011011
    #if SSD_TYPE == COMM_CATHODE
        DIO_SetPinLevel(SSD_PIN_A, DIO_HIGH);
    1836:	83 e0       	ldi	r24, 0x03	; 3
    1838:	60 e0       	ldi	r22, 0x00	; 0
    183a:	41 e0       	ldi	r20, 0x01	; 1
    183c:	0e 94 a9 08 	call	0x1152	; 0x1152 <DIO_SetPinLevel>
        DIO_SetPinLevel(SSD_PIN_B, DIO_HIGH);
    1840:	83 e0       	ldi	r24, 0x03	; 3
    1842:	61 e0       	ldi	r22, 0x01	; 1
    1844:	41 e0       	ldi	r20, 0x01	; 1
    1846:	0e 94 a9 08 	call	0x1152	; 0x1152 <DIO_SetPinLevel>
        DIO_SetPinLevel(SSD_PIN_C, DIO_LOW);
    184a:	83 e0       	ldi	r24, 0x03	; 3
    184c:	62 e0       	ldi	r22, 0x02	; 2
    184e:	40 e0       	ldi	r20, 0x00	; 0
    1850:	0e 94 a9 08 	call	0x1152	; 0x1152 <DIO_SetPinLevel>
        DIO_SetPinLevel(SSD_PIN_D, DIO_HIGH);
    1854:	83 e0       	ldi	r24, 0x03	; 3
    1856:	63 e0       	ldi	r22, 0x03	; 3
    1858:	41 e0       	ldi	r20, 0x01	; 1
    185a:	0e 94 a9 08 	call	0x1152	; 0x1152 <DIO_SetPinLevel>
        DIO_SetPinLevel(SSD_PIN_E, DIO_HIGH);
    185e:	83 e0       	ldi	r24, 0x03	; 3
    1860:	64 e0       	ldi	r22, 0x04	; 4
    1862:	41 e0       	ldi	r20, 0x01	; 1
    1864:	0e 94 a9 08 	call	0x1152	; 0x1152 <DIO_SetPinLevel>
        DIO_SetPinLevel(SSD_PIN_F, DIO_LOW);
    1868:	83 e0       	ldi	r24, 0x03	; 3
    186a:	65 e0       	ldi	r22, 0x05	; 5
    186c:	40 e0       	ldi	r20, 0x00	; 0
    186e:	0e 94 a9 08 	call	0x1152	; 0x1152 <DIO_SetPinLevel>
        DIO_SetPinLevel(SSD_PIN_G, DIO_HIGH);
    1872:	83 e0       	ldi	r24, 0x03	; 3
    1874:	66 e0       	ldi	r22, 0x06	; 6
    1876:	41 e0       	ldi	r20, 0x01	; 1
    1878:	0e 94 a9 08 	call	0x1152	; 0x1152 <DIO_SetPinLevel>
    187c:	1f c1       	rjmp	.+574    	; 0x1abc <SSD_Write+0x3c8>

        break;

    case SSD_NUMBER_3: // 0b01001111
    #if SSD_TYPE == COMM_CATHODE
        DIO_SetPinLevel(SSD_PIN_A, DIO_HIGH);
    187e:	83 e0       	ldi	r24, 0x03	; 3
    1880:	60 e0       	ldi	r22, 0x00	; 0
    1882:	41 e0       	ldi	r20, 0x01	; 1
    1884:	0e 94 a9 08 	call	0x1152	; 0x1152 <DIO_SetPinLevel>
        DIO_SetPinLevel(SSD_PIN_B, DIO_HIGH);
    1888:	83 e0       	ldi	r24, 0x03	; 3
    188a:	61 e0       	ldi	r22, 0x01	; 1
    188c:	41 e0       	ldi	r20, 0x01	; 1
    188e:	0e 94 a9 08 	call	0x1152	; 0x1152 <DIO_SetPinLevel>
        DIO_SetPinLevel(SSD_PIN_C, DIO_HIGH);
    1892:	83 e0       	ldi	r24, 0x03	; 3
    1894:	62 e0       	ldi	r22, 0x02	; 2
    1896:	41 e0       	ldi	r20, 0x01	; 1
    1898:	0e 94 a9 08 	call	0x1152	; 0x1152 <DIO_SetPinLevel>
        DIO_SetPinLevel(SSD_PIN_D, DIO_HIGH);
    189c:	83 e0       	ldi	r24, 0x03	; 3
    189e:	63 e0       	ldi	r22, 0x03	; 3
    18a0:	41 e0       	ldi	r20, 0x01	; 1
    18a2:	0e 94 a9 08 	call	0x1152	; 0x1152 <DIO_SetPinLevel>
        DIO_SetPinLevel(SSD_PIN_E, DIO_LOW);
    18a6:	83 e0       	ldi	r24, 0x03	; 3
    18a8:	64 e0       	ldi	r22, 0x04	; 4
    18aa:	40 e0       	ldi	r20, 0x00	; 0
    18ac:	0e 94 a9 08 	call	0x1152	; 0x1152 <DIO_SetPinLevel>
        DIO_SetPinLevel(SSD_PIN_F, DIO_LOW);
    18b0:	83 e0       	ldi	r24, 0x03	; 3
    18b2:	65 e0       	ldi	r22, 0x05	; 5
    18b4:	40 e0       	ldi	r20, 0x00	; 0
    18b6:	0e 94 a9 08 	call	0x1152	; 0x1152 <DIO_SetPinLevel>
        DIO_SetPinLevel(SSD_PIN_G, DIO_HIGH);
    18ba:	83 e0       	ldi	r24, 0x03	; 3
    18bc:	66 e0       	ldi	r22, 0x06	; 6
    18be:	41 e0       	ldi	r20, 0x01	; 1
    18c0:	0e 94 a9 08 	call	0x1152	; 0x1152 <DIO_SetPinLevel>
    18c4:	fb c0       	rjmp	.+502    	; 0x1abc <SSD_Write+0x3c8>
    #endif

        break;
    case SSD_NUMBER_4: // 0b01100110
    #if SSD_TYPE == COMM_CATHODE
        DIO_SetPinLevel(SSD_PIN_A, DIO_LOW);
    18c6:	83 e0       	ldi	r24, 0x03	; 3
    18c8:	60 e0       	ldi	r22, 0x00	; 0
    18ca:	40 e0       	ldi	r20, 0x00	; 0
    18cc:	0e 94 a9 08 	call	0x1152	; 0x1152 <DIO_SetPinLevel>
        DIO_SetPinLevel(SSD_PIN_B, DIO_HIGH);
    18d0:	83 e0       	ldi	r24, 0x03	; 3
    18d2:	61 e0       	ldi	r22, 0x01	; 1
    18d4:	41 e0       	ldi	r20, 0x01	; 1
    18d6:	0e 94 a9 08 	call	0x1152	; 0x1152 <DIO_SetPinLevel>
        DIO_SetPinLevel(SSD_PIN_C, DIO_HIGH);
    18da:	83 e0       	ldi	r24, 0x03	; 3
    18dc:	62 e0       	ldi	r22, 0x02	; 2
    18de:	41 e0       	ldi	r20, 0x01	; 1
    18e0:	0e 94 a9 08 	call	0x1152	; 0x1152 <DIO_SetPinLevel>
        DIO_SetPinLevel(SSD_PIN_D, DIO_LOW);
    18e4:	83 e0       	ldi	r24, 0x03	; 3
    18e6:	63 e0       	ldi	r22, 0x03	; 3
    18e8:	40 e0       	ldi	r20, 0x00	; 0
    18ea:	0e 94 a9 08 	call	0x1152	; 0x1152 <DIO_SetPinLevel>
        DIO_SetPinLevel(SSD_PIN_E, DIO_LOW);
    18ee:	83 e0       	ldi	r24, 0x03	; 3
    18f0:	64 e0       	ldi	r22, 0x04	; 4
    18f2:	40 e0       	ldi	r20, 0x00	; 0
    18f4:	0e 94 a9 08 	call	0x1152	; 0x1152 <DIO_SetPinLevel>
        DIO_SetPinLevel(SSD_PIN_F, DIO_HIGH);
    18f8:	83 e0       	ldi	r24, 0x03	; 3
    18fa:	65 e0       	ldi	r22, 0x05	; 5
    18fc:	41 e0       	ldi	r20, 0x01	; 1
    18fe:	0e 94 a9 08 	call	0x1152	; 0x1152 <DIO_SetPinLevel>
        DIO_SetPinLevel(SSD_PIN_G, DIO_HIGH);
    1902:	83 e0       	ldi	r24, 0x03	; 3
    1904:	66 e0       	ldi	r22, 0x06	; 6
    1906:	41 e0       	ldi	r20, 0x01	; 1
    1908:	0e 94 a9 08 	call	0x1152	; 0x1152 <DIO_SetPinLevel>
    190c:	d7 c0       	rjmp	.+430    	; 0x1abc <SSD_Write+0x3c8>
    #endif

        break;
    case SSD_NUMBER_5: // 0b01101101
    #if SSD_TYPE == COMM_CATHODE
        DIO_SetPinLevel(SSD_PIN_A, DIO_HIGH);
    190e:	83 e0       	ldi	r24, 0x03	; 3
    1910:	60 e0       	ldi	r22, 0x00	; 0
    1912:	41 e0       	ldi	r20, 0x01	; 1
    1914:	0e 94 a9 08 	call	0x1152	; 0x1152 <DIO_SetPinLevel>
        DIO_SetPinLevel(SSD_PIN_B, DIO_LOW);
    1918:	83 e0       	ldi	r24, 0x03	; 3
    191a:	61 e0       	ldi	r22, 0x01	; 1
    191c:	40 e0       	ldi	r20, 0x00	; 0
    191e:	0e 94 a9 08 	call	0x1152	; 0x1152 <DIO_SetPinLevel>
        DIO_SetPinLevel(SSD_PIN_C, DIO_HIGH);
    1922:	83 e0       	ldi	r24, 0x03	; 3
    1924:	62 e0       	ldi	r22, 0x02	; 2
    1926:	41 e0       	ldi	r20, 0x01	; 1
    1928:	0e 94 a9 08 	call	0x1152	; 0x1152 <DIO_SetPinLevel>
        DIO_SetPinLevel(SSD_PIN_D, DIO_HIGH);
    192c:	83 e0       	ldi	r24, 0x03	; 3
    192e:	63 e0       	ldi	r22, 0x03	; 3
    1930:	41 e0       	ldi	r20, 0x01	; 1
    1932:	0e 94 a9 08 	call	0x1152	; 0x1152 <DIO_SetPinLevel>
        DIO_SetPinLevel(SSD_PIN_E, DIO_LOW);
    1936:	83 e0       	ldi	r24, 0x03	; 3
    1938:	64 e0       	ldi	r22, 0x04	; 4
    193a:	40 e0       	ldi	r20, 0x00	; 0
    193c:	0e 94 a9 08 	call	0x1152	; 0x1152 <DIO_SetPinLevel>
        DIO_SetPinLevel(SSD_PIN_F, DIO_HIGH);
    1940:	83 e0       	ldi	r24, 0x03	; 3
    1942:	65 e0       	ldi	r22, 0x05	; 5
    1944:	41 e0       	ldi	r20, 0x01	; 1
    1946:	0e 94 a9 08 	call	0x1152	; 0x1152 <DIO_SetPinLevel>
        DIO_SetPinLevel(SSD_PIN_G, DIO_HIGH);
    194a:	83 e0       	ldi	r24, 0x03	; 3
    194c:	66 e0       	ldi	r22, 0x06	; 6
    194e:	41 e0       	ldi	r20, 0x01	; 1
    1950:	0e 94 a9 08 	call	0x1152	; 0x1152 <DIO_SetPinLevel>
    1954:	b3 c0       	rjmp	.+358    	; 0x1abc <SSD_Write+0x3c8>
    #endif

        break;
    case SSD_NUMBER_6: // 0b01111101
            #if SSD_TYPE == COMM_CATHODE
        DIO_SetPinLevel(SSD_PIN_A, DIO_HIGH);
    1956:	83 e0       	ldi	r24, 0x03	; 3
    1958:	60 e0       	ldi	r22, 0x00	; 0
    195a:	41 e0       	ldi	r20, 0x01	; 1
    195c:	0e 94 a9 08 	call	0x1152	; 0x1152 <DIO_SetPinLevel>
        DIO_SetPinLevel(SSD_PIN_B, DIO_LOW);
    1960:	83 e0       	ldi	r24, 0x03	; 3
    1962:	61 e0       	ldi	r22, 0x01	; 1
    1964:	40 e0       	ldi	r20, 0x00	; 0
    1966:	0e 94 a9 08 	call	0x1152	; 0x1152 <DIO_SetPinLevel>
        DIO_SetPinLevel(SSD_PIN_C, DIO_HIGH);
    196a:	83 e0       	ldi	r24, 0x03	; 3
    196c:	62 e0       	ldi	r22, 0x02	; 2
    196e:	41 e0       	ldi	r20, 0x01	; 1
    1970:	0e 94 a9 08 	call	0x1152	; 0x1152 <DIO_SetPinLevel>
        DIO_SetPinLevel(SSD_PIN_D, DIO_HIGH);
    1974:	83 e0       	ldi	r24, 0x03	; 3
    1976:	63 e0       	ldi	r22, 0x03	; 3
    1978:	41 e0       	ldi	r20, 0x01	; 1
    197a:	0e 94 a9 08 	call	0x1152	; 0x1152 <DIO_SetPinLevel>
        DIO_SetPinLevel(SSD_PIN_E, DIO_HIGH);
    197e:	83 e0       	ldi	r24, 0x03	; 3
    1980:	64 e0       	ldi	r22, 0x04	; 4
    1982:	41 e0       	ldi	r20, 0x01	; 1
    1984:	0e 94 a9 08 	call	0x1152	; 0x1152 <DIO_SetPinLevel>
        DIO_SetPinLevel(SSD_PIN_F, DIO_HIGH);
    1988:	83 e0       	ldi	r24, 0x03	; 3
    198a:	65 e0       	ldi	r22, 0x05	; 5
    198c:	41 e0       	ldi	r20, 0x01	; 1
    198e:	0e 94 a9 08 	call	0x1152	; 0x1152 <DIO_SetPinLevel>
        DIO_SetPinLevel(SSD_PIN_G, DIO_HIGH);
    1992:	83 e0       	ldi	r24, 0x03	; 3
    1994:	66 e0       	ldi	r22, 0x06	; 6
    1996:	41 e0       	ldi	r20, 0x01	; 1
    1998:	0e 94 a9 08 	call	0x1152	; 0x1152 <DIO_SetPinLevel>
    199c:	8f c0       	rjmp	.+286    	; 0x1abc <SSD_Write+0x3c8>
        #error "Invalid SSD Type"
    #endif
        break;
    case SSD_NUMBER_7: // 0b00000111
        #if SSD_TYPE == COMM_CATHODE
        DIO_SetPinLevel(SSD_PIN_A, DIO_HIGH);
    199e:	83 e0       	ldi	r24, 0x03	; 3
    19a0:	60 e0       	ldi	r22, 0x00	; 0
    19a2:	41 e0       	ldi	r20, 0x01	; 1
    19a4:	0e 94 a9 08 	call	0x1152	; 0x1152 <DIO_SetPinLevel>
        DIO_SetPinLevel(SSD_PIN_B, DIO_HIGH);
    19a8:	83 e0       	ldi	r24, 0x03	; 3
    19aa:	61 e0       	ldi	r22, 0x01	; 1
    19ac:	41 e0       	ldi	r20, 0x01	; 1
    19ae:	0e 94 a9 08 	call	0x1152	; 0x1152 <DIO_SetPinLevel>
        DIO_SetPinLevel(SSD_PIN_C, DIO_HIGH);
    19b2:	83 e0       	ldi	r24, 0x03	; 3
    19b4:	62 e0       	ldi	r22, 0x02	; 2
    19b6:	41 e0       	ldi	r20, 0x01	; 1
    19b8:	0e 94 a9 08 	call	0x1152	; 0x1152 <DIO_SetPinLevel>
        DIO_SetPinLevel(SSD_PIN_D, DIO_LOW);
    19bc:	83 e0       	ldi	r24, 0x03	; 3
    19be:	63 e0       	ldi	r22, 0x03	; 3
    19c0:	40 e0       	ldi	r20, 0x00	; 0
    19c2:	0e 94 a9 08 	call	0x1152	; 0x1152 <DIO_SetPinLevel>
        DIO_SetPinLevel(SSD_PIN_E, DIO_LOW);
    19c6:	83 e0       	ldi	r24, 0x03	; 3
    19c8:	64 e0       	ldi	r22, 0x04	; 4
    19ca:	40 e0       	ldi	r20, 0x00	; 0
    19cc:	0e 94 a9 08 	call	0x1152	; 0x1152 <DIO_SetPinLevel>
        DIO_SetPinLevel(SSD_PIN_F, DIO_LOW);
    19d0:	83 e0       	ldi	r24, 0x03	; 3
    19d2:	65 e0       	ldi	r22, 0x05	; 5
    19d4:	40 e0       	ldi	r20, 0x00	; 0
    19d6:	0e 94 a9 08 	call	0x1152	; 0x1152 <DIO_SetPinLevel>
        DIO_SetPinLevel(SSD_PIN_G, DIO_LOW);
    19da:	83 e0       	ldi	r24, 0x03	; 3
    19dc:	66 e0       	ldi	r22, 0x06	; 6
    19de:	40 e0       	ldi	r20, 0x00	; 0
    19e0:	0e 94 a9 08 	call	0x1152	; 0x1152 <DIO_SetPinLevel>
    19e4:	6b c0       	rjmp	.+214    	; 0x1abc <SSD_Write+0x3c8>
    #endif

        break;
    case SSD_NUMBER_8: // 0b01111111
    #if SSD_TYPE == COMM_CATHODE
        DIO_SetPinLevel(SSD_PIN_A, DIO_HIGH);
    19e6:	83 e0       	ldi	r24, 0x03	; 3
    19e8:	60 e0       	ldi	r22, 0x00	; 0
    19ea:	41 e0       	ldi	r20, 0x01	; 1
    19ec:	0e 94 a9 08 	call	0x1152	; 0x1152 <DIO_SetPinLevel>
        DIO_SetPinLevel(SSD_PIN_B, DIO_HIGH);
    19f0:	83 e0       	ldi	r24, 0x03	; 3
    19f2:	61 e0       	ldi	r22, 0x01	; 1
    19f4:	41 e0       	ldi	r20, 0x01	; 1
    19f6:	0e 94 a9 08 	call	0x1152	; 0x1152 <DIO_SetPinLevel>
        DIO_SetPinLevel(SSD_PIN_C, DIO_HIGH);
    19fa:	83 e0       	ldi	r24, 0x03	; 3
    19fc:	62 e0       	ldi	r22, 0x02	; 2
    19fe:	41 e0       	ldi	r20, 0x01	; 1
    1a00:	0e 94 a9 08 	call	0x1152	; 0x1152 <DIO_SetPinLevel>
        DIO_SetPinLevel(SSD_PIN_D, DIO_HIGH);
    1a04:	83 e0       	ldi	r24, 0x03	; 3
    1a06:	63 e0       	ldi	r22, 0x03	; 3
    1a08:	41 e0       	ldi	r20, 0x01	; 1
    1a0a:	0e 94 a9 08 	call	0x1152	; 0x1152 <DIO_SetPinLevel>
        DIO_SetPinLevel(SSD_PIN_E, DIO_HIGH);
    1a0e:	83 e0       	ldi	r24, 0x03	; 3
    1a10:	64 e0       	ldi	r22, 0x04	; 4
    1a12:	41 e0       	ldi	r20, 0x01	; 1
    1a14:	0e 94 a9 08 	call	0x1152	; 0x1152 <DIO_SetPinLevel>
        DIO_SetPinLevel(SSD_PIN_F, DIO_HIGH);
    1a18:	83 e0       	ldi	r24, 0x03	; 3
    1a1a:	65 e0       	ldi	r22, 0x05	; 5
    1a1c:	41 e0       	ldi	r20, 0x01	; 1
    1a1e:	0e 94 a9 08 	call	0x1152	; 0x1152 <DIO_SetPinLevel>
        DIO_SetPinLevel(SSD_PIN_G, DIO_HIGH);
    1a22:	83 e0       	ldi	r24, 0x03	; 3
    1a24:	66 e0       	ldi	r22, 0x06	; 6
    1a26:	41 e0       	ldi	r20, 0x01	; 1
    1a28:	0e 94 a9 08 	call	0x1152	; 0x1152 <DIO_SetPinLevel>
    1a2c:	47 c0       	rjmp	.+142    	; 0x1abc <SSD_Write+0x3c8>
    #endif

        break;
    case SSD_NUMBER_9: // 0b01101111
    #if SSD_TYPE == COMM_CATHODE
        DIO_SetPinLevel(SSD_PIN_A, DIO_HIGH);
    1a2e:	83 e0       	ldi	r24, 0x03	; 3
    1a30:	60 e0       	ldi	r22, 0x00	; 0
    1a32:	41 e0       	ldi	r20, 0x01	; 1
    1a34:	0e 94 a9 08 	call	0x1152	; 0x1152 <DIO_SetPinLevel>
        DIO_SetPinLevel(SSD_PIN_B, DIO_HIGH);
    1a38:	83 e0       	ldi	r24, 0x03	; 3
    1a3a:	61 e0       	ldi	r22, 0x01	; 1
    1a3c:	41 e0       	ldi	r20, 0x01	; 1
    1a3e:	0e 94 a9 08 	call	0x1152	; 0x1152 <DIO_SetPinLevel>
        DIO_SetPinLevel(SSD_PIN_C, DIO_HIGH);
    1a42:	83 e0       	ldi	r24, 0x03	; 3
    1a44:	62 e0       	ldi	r22, 0x02	; 2
    1a46:	41 e0       	ldi	r20, 0x01	; 1
    1a48:	0e 94 a9 08 	call	0x1152	; 0x1152 <DIO_SetPinLevel>
        DIO_SetPinLevel(SSD_PIN_D, DIO_HIGH);
    1a4c:	83 e0       	ldi	r24, 0x03	; 3
    1a4e:	63 e0       	ldi	r22, 0x03	; 3
    1a50:	41 e0       	ldi	r20, 0x01	; 1
    1a52:	0e 94 a9 08 	call	0x1152	; 0x1152 <DIO_SetPinLevel>
        DIO_SetPinLevel(SSD_PIN_E, DIO_LOW);
    1a56:	83 e0       	ldi	r24, 0x03	; 3
    1a58:	64 e0       	ldi	r22, 0x04	; 4
    1a5a:	40 e0       	ldi	r20, 0x00	; 0
    1a5c:	0e 94 a9 08 	call	0x1152	; 0x1152 <DIO_SetPinLevel>
        DIO_SetPinLevel(SSD_PIN_F, DIO_HIGH);
    1a60:	83 e0       	ldi	r24, 0x03	; 3
    1a62:	65 e0       	ldi	r22, 0x05	; 5
    1a64:	41 e0       	ldi	r20, 0x01	; 1
    1a66:	0e 94 a9 08 	call	0x1152	; 0x1152 <DIO_SetPinLevel>
        DIO_SetPinLevel(SSD_PIN_G, DIO_HIGH);
    1a6a:	83 e0       	ldi	r24, 0x03	; 3
    1a6c:	66 e0       	ldi	r22, 0x06	; 6
    1a6e:	41 e0       	ldi	r20, 0x01	; 1
    1a70:	0e 94 a9 08 	call	0x1152	; 0x1152 <DIO_SetPinLevel>
    1a74:	23 c0       	rjmp	.+70     	; 0x1abc <SSD_Write+0x3c8>
        break;

    case SSD_OFF:
    default:
    #if SSD_TYPE == COMM_CATHODE
        DIO_SetPinLevel(SSD_PIN_A, DIO_LOW);
    1a76:	83 e0       	ldi	r24, 0x03	; 3
    1a78:	60 e0       	ldi	r22, 0x00	; 0
    1a7a:	40 e0       	ldi	r20, 0x00	; 0
    1a7c:	0e 94 a9 08 	call	0x1152	; 0x1152 <DIO_SetPinLevel>
        DIO_SetPinLevel(SSD_PIN_B, DIO_LOW);
    1a80:	83 e0       	ldi	r24, 0x03	; 3
    1a82:	61 e0       	ldi	r22, 0x01	; 1
    1a84:	40 e0       	ldi	r20, 0x00	; 0
    1a86:	0e 94 a9 08 	call	0x1152	; 0x1152 <DIO_SetPinLevel>
        DIO_SetPinLevel(SSD_PIN_C, DIO_LOW);
    1a8a:	83 e0       	ldi	r24, 0x03	; 3
    1a8c:	62 e0       	ldi	r22, 0x02	; 2
    1a8e:	40 e0       	ldi	r20, 0x00	; 0
    1a90:	0e 94 a9 08 	call	0x1152	; 0x1152 <DIO_SetPinLevel>
        DIO_SetPinLevel(SSD_PIN_D, DIO_LOW);
    1a94:	83 e0       	ldi	r24, 0x03	; 3
    1a96:	63 e0       	ldi	r22, 0x03	; 3
    1a98:	40 e0       	ldi	r20, 0x00	; 0
    1a9a:	0e 94 a9 08 	call	0x1152	; 0x1152 <DIO_SetPinLevel>
        DIO_SetPinLevel(SSD_PIN_E, DIO_LOW);
    1a9e:	83 e0       	ldi	r24, 0x03	; 3
    1aa0:	64 e0       	ldi	r22, 0x04	; 4
    1aa2:	40 e0       	ldi	r20, 0x00	; 0
    1aa4:	0e 94 a9 08 	call	0x1152	; 0x1152 <DIO_SetPinLevel>
        DIO_SetPinLevel(SSD_PIN_F, DIO_LOW);
    1aa8:	83 e0       	ldi	r24, 0x03	; 3
    1aaa:	65 e0       	ldi	r22, 0x05	; 5
    1aac:	40 e0       	ldi	r20, 0x00	; 0
    1aae:	0e 94 a9 08 	call	0x1152	; 0x1152 <DIO_SetPinLevel>
        DIO_SetPinLevel(SSD_PIN_G, DIO_LOW);
    1ab2:	83 e0       	ldi	r24, 0x03	; 3
    1ab4:	66 e0       	ldi	r22, 0x06	; 6
    1ab6:	40 e0       	ldi	r20, 0x00	; 0
    1ab8:	0e 94 a9 08 	call	0x1152	; 0x1152 <DIO_SetPinLevel>
    #else
        #error "Invalid SSD Type"
    #endif
        break;
    }
}
    1abc:	0f 90       	pop	r0
    1abe:	0f 90       	pop	r0
    1ac0:	0f 90       	pop	r0
    1ac2:	cf 91       	pop	r28
    1ac4:	df 91       	pop	r29
    1ac6:	08 95       	ret

00001ac8 <main>:
void countdown();
void Assignment_1_Leds_init();
void func1();
void flash();
int main(void)
{
    1ac8:	df 93       	push	r29
    1aca:	cf 93       	push	r28
    1acc:	cd b7       	in	r28, 0x3d	; 61
    1ace:	de b7       	in	r29, 0x3e	; 62
//    DIO_SetPinMode(DIO_PORTA,DIO_PIN2,DIO_OUTPUT);
//    DIO_SetPinMode(DIO_PORTC,DIO_PIN0,DIO_OUTPUT);
//    DIO_SetPinMode(DIO_PORTC,DIO_PIN1,DIO_OUTPUT);
//	SSD_Init();

    Assignment_1_Leds_init();
    1ad0:	0e 94 f1 0e 	call	0x1de2	; 0x1de2 <Assignment_1_Leds_init>
    1ad4:	80 e0       	ldi	r24, 0x00	; 0
    1ad6:	90 e0       	ldi	r25, 0x00	; 0
	// }


    

}
    1ad8:	cf 91       	pop	r28
    1ada:	df 91       	pop	r29
    1adc:	08 95       	ret

00001ade <flash>:
void flash(){
    1ade:	df 93       	push	r29
    1ae0:	cf 93       	push	r28
    1ae2:	cd b7       	in	r28, 0x3d	; 61
    1ae4:	de b7       	in	r29, 0x3e	; 62
    1ae6:	ab 97       	sbiw	r28, 0x2b	; 43
    1ae8:	0f b6       	in	r0, 0x3f	; 63
    1aea:	f8 94       	cli
    1aec:	de bf       	out	0x3e, r29	; 62
    1aee:	0f be       	out	0x3f, r0	; 63
    1af0:	cd bf       	out	0x3d, r28	; 61
    //DIO_SetPortMode(DIO_PORTA,DIO_OUTPUT);

    for(u8 i=0; i<5;i++)
    1af2:	1b a6       	std	Y+43, r1	; 0x2b
    1af4:	f7 c0       	rjmp	.+494    	; 0x1ce4 <flash+0x206>
    {
        DIO_SetPortLevel(DIO_PORTA,DIO_HIGH);
    1af6:	80 e0       	ldi	r24, 0x00	; 0
    1af8:	61 e0       	ldi	r22, 0x01	; 1
    1afa:	0e 94 a9 09 	call	0x1352	; 0x1352 <DIO_SetPortLevel>
        DIO_SetPortLevel(DIO_PORTB,DIO_HIGH);
    1afe:	81 e0       	ldi	r24, 0x01	; 1
    1b00:	61 e0       	ldi	r22, 0x01	; 1
    1b02:	0e 94 a9 09 	call	0x1352	; 0x1352 <DIO_SetPortLevel>
    1b06:	80 e0       	ldi	r24, 0x00	; 0
    1b08:	90 e0       	ldi	r25, 0x00	; 0
    1b0a:	aa e7       	ldi	r26, 0x7A	; 122
    1b0c:	b3 e4       	ldi	r27, 0x43	; 67
    1b0e:	8f a3       	std	Y+39, r24	; 0x27
    1b10:	98 a7       	std	Y+40, r25	; 0x28
    1b12:	a9 a7       	std	Y+41, r26	; 0x29
    1b14:	ba a7       	std	Y+42, r27	; 0x2a
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    1b16:	6f a1       	ldd	r22, Y+39	; 0x27
    1b18:	78 a5       	ldd	r23, Y+40	; 0x28
    1b1a:	89 a5       	ldd	r24, Y+41	; 0x29
    1b1c:	9a a5       	ldd	r25, Y+42	; 0x2a
    1b1e:	20 e0       	ldi	r18, 0x00	; 0
    1b20:	30 e0       	ldi	r19, 0x00	; 0
    1b22:	4a ef       	ldi	r20, 0xFA	; 250
    1b24:	54 e4       	ldi	r21, 0x44	; 68
    1b26:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
    1b2a:	dc 01       	movw	r26, r24
    1b2c:	cb 01       	movw	r24, r22
    1b2e:	8b a3       	std	Y+35, r24	; 0x23
    1b30:	9c a3       	std	Y+36, r25	; 0x24
    1b32:	ad a3       	std	Y+37, r26	; 0x25
    1b34:	be a3       	std	Y+38, r27	; 0x26
	if (__tmp < 1.0)
    1b36:	6b a1       	ldd	r22, Y+35	; 0x23
    1b38:	7c a1       	ldd	r23, Y+36	; 0x24
    1b3a:	8d a1       	ldd	r24, Y+37	; 0x25
    1b3c:	9e a1       	ldd	r25, Y+38	; 0x26
    1b3e:	20 e0       	ldi	r18, 0x00	; 0
    1b40:	30 e0       	ldi	r19, 0x00	; 0
    1b42:	40 e8       	ldi	r20, 0x80	; 128
    1b44:	5f e3       	ldi	r21, 0x3F	; 63
    1b46:	0e 94 71 03 	call	0x6e2	; 0x6e2 <__ltsf2>
    1b4a:	88 23       	and	r24, r24
    1b4c:	2c f4       	brge	.+10     	; 0x1b58 <flash+0x7a>
		__ticks = 1;
    1b4e:	81 e0       	ldi	r24, 0x01	; 1
    1b50:	90 e0       	ldi	r25, 0x00	; 0
    1b52:	9a a3       	std	Y+34, r25	; 0x22
    1b54:	89 a3       	std	Y+33, r24	; 0x21
    1b56:	3f c0       	rjmp	.+126    	; 0x1bd6 <flash+0xf8>
	else if (__tmp > 65535)
    1b58:	6b a1       	ldd	r22, Y+35	; 0x23
    1b5a:	7c a1       	ldd	r23, Y+36	; 0x24
    1b5c:	8d a1       	ldd	r24, Y+37	; 0x25
    1b5e:	9e a1       	ldd	r25, Y+38	; 0x26
    1b60:	20 e0       	ldi	r18, 0x00	; 0
    1b62:	3f ef       	ldi	r19, 0xFF	; 255
    1b64:	4f e7       	ldi	r20, 0x7F	; 127
    1b66:	57 e4       	ldi	r21, 0x47	; 71
    1b68:	0e 94 11 03 	call	0x622	; 0x622 <__gtsf2>
    1b6c:	18 16       	cp	r1, r24
    1b6e:	4c f5       	brge	.+82     	; 0x1bc2 <flash+0xe4>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    1b70:	6f a1       	ldd	r22, Y+39	; 0x27
    1b72:	78 a5       	ldd	r23, Y+40	; 0x28
    1b74:	89 a5       	ldd	r24, Y+41	; 0x29
    1b76:	9a a5       	ldd	r25, Y+42	; 0x2a
    1b78:	20 e0       	ldi	r18, 0x00	; 0
    1b7a:	30 e0       	ldi	r19, 0x00	; 0
    1b7c:	40 e2       	ldi	r20, 0x20	; 32
    1b7e:	51 e4       	ldi	r21, 0x41	; 65
    1b80:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
    1b84:	dc 01       	movw	r26, r24
    1b86:	cb 01       	movw	r24, r22
    1b88:	bc 01       	movw	r22, r24
    1b8a:	cd 01       	movw	r24, r26
    1b8c:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
    1b90:	dc 01       	movw	r26, r24
    1b92:	cb 01       	movw	r24, r22
    1b94:	9a a3       	std	Y+34, r25	; 0x22
    1b96:	89 a3       	std	Y+33, r24	; 0x21
    1b98:	0f c0       	rjmp	.+30     	; 0x1bb8 <flash+0xda>
    1b9a:	88 ec       	ldi	r24, 0xC8	; 200
    1b9c:	90 e0       	ldi	r25, 0x00	; 0
    1b9e:	98 a3       	std	Y+32, r25	; 0x20
    1ba0:	8f 8f       	std	Y+31, r24	; 0x1f
    milliseconds can be achieved.
 */
void
_delay_loop_2(uint16_t __count)
{
	__asm__ volatile (
    1ba2:	8f 8d       	ldd	r24, Y+31	; 0x1f
    1ba4:	98 a1       	ldd	r25, Y+32	; 0x20
    1ba6:	01 97       	sbiw	r24, 0x01	; 1
    1ba8:	f1 f7       	brne	.-4      	; 0x1ba6 <flash+0xc8>
    1baa:	98 a3       	std	Y+32, r25	; 0x20
    1bac:	8f 8f       	std	Y+31, r24	; 0x1f
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    1bae:	89 a1       	ldd	r24, Y+33	; 0x21
    1bb0:	9a a1       	ldd	r25, Y+34	; 0x22
    1bb2:	01 97       	sbiw	r24, 0x01	; 1
    1bb4:	9a a3       	std	Y+34, r25	; 0x22
    1bb6:	89 a3       	std	Y+33, r24	; 0x21
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    1bb8:	89 a1       	ldd	r24, Y+33	; 0x21
    1bba:	9a a1       	ldd	r25, Y+34	; 0x22
    1bbc:	00 97       	sbiw	r24, 0x00	; 0
    1bbe:	69 f7       	brne	.-38     	; 0x1b9a <flash+0xbc>
    1bc0:	14 c0       	rjmp	.+40     	; 0x1bea <flash+0x10c>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    1bc2:	6b a1       	ldd	r22, Y+35	; 0x23
    1bc4:	7c a1       	ldd	r23, Y+36	; 0x24
    1bc6:	8d a1       	ldd	r24, Y+37	; 0x25
    1bc8:	9e a1       	ldd	r25, Y+38	; 0x26
    1bca:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
    1bce:	dc 01       	movw	r26, r24
    1bd0:	cb 01       	movw	r24, r22
    1bd2:	9a a3       	std	Y+34, r25	; 0x22
    1bd4:	89 a3       	std	Y+33, r24	; 0x21
    1bd6:	89 a1       	ldd	r24, Y+33	; 0x21
    1bd8:	9a a1       	ldd	r25, Y+34	; 0x22
    1bda:	9e 8f       	std	Y+30, r25	; 0x1e
    1bdc:	8d 8f       	std	Y+29, r24	; 0x1d
    1bde:	8d 8d       	ldd	r24, Y+29	; 0x1d
    1be0:	9e 8d       	ldd	r25, Y+30	; 0x1e
    1be2:	01 97       	sbiw	r24, 0x01	; 1
    1be4:	f1 f7       	brne	.-4      	; 0x1be2 <flash+0x104>
    1be6:	9e 8f       	std	Y+30, r25	; 0x1e
    1be8:	8d 8f       	std	Y+29, r24	; 0x1d
        _delay_ms(250);
        DIO_SetPortLevel(DIO_PORTA,DIO_LOW);
    1bea:	80 e0       	ldi	r24, 0x00	; 0
    1bec:	60 e0       	ldi	r22, 0x00	; 0
    1bee:	0e 94 a9 09 	call	0x1352	; 0x1352 <DIO_SetPortLevel>
        DIO_SetPortLevel(DIO_PORTB,DIO_LOW);
    1bf2:	81 e0       	ldi	r24, 0x01	; 1
    1bf4:	60 e0       	ldi	r22, 0x00	; 0
    1bf6:	0e 94 a9 09 	call	0x1352	; 0x1352 <DIO_SetPortLevel>
    1bfa:	80 e0       	ldi	r24, 0x00	; 0
    1bfc:	90 e0       	ldi	r25, 0x00	; 0
    1bfe:	aa e7       	ldi	r26, 0x7A	; 122
    1c00:	b3 e4       	ldi	r27, 0x43	; 67
    1c02:	89 8f       	std	Y+25, r24	; 0x19
    1c04:	9a 8f       	std	Y+26, r25	; 0x1a
    1c06:	ab 8f       	std	Y+27, r26	; 0x1b
    1c08:	bc 8f       	std	Y+28, r27	; 0x1c
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    1c0a:	69 8d       	ldd	r22, Y+25	; 0x19
    1c0c:	7a 8d       	ldd	r23, Y+26	; 0x1a
    1c0e:	8b 8d       	ldd	r24, Y+27	; 0x1b
    1c10:	9c 8d       	ldd	r25, Y+28	; 0x1c
    1c12:	20 e0       	ldi	r18, 0x00	; 0
    1c14:	30 e0       	ldi	r19, 0x00	; 0
    1c16:	4a ef       	ldi	r20, 0xFA	; 250
    1c18:	54 e4       	ldi	r21, 0x44	; 68
    1c1a:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
    1c1e:	dc 01       	movw	r26, r24
    1c20:	cb 01       	movw	r24, r22
    1c22:	8d 8b       	std	Y+21, r24	; 0x15
    1c24:	9e 8b       	std	Y+22, r25	; 0x16
    1c26:	af 8b       	std	Y+23, r26	; 0x17
    1c28:	b8 8f       	std	Y+24, r27	; 0x18
	if (__tmp < 1.0)
    1c2a:	6d 89       	ldd	r22, Y+21	; 0x15
    1c2c:	7e 89       	ldd	r23, Y+22	; 0x16
    1c2e:	8f 89       	ldd	r24, Y+23	; 0x17
    1c30:	98 8d       	ldd	r25, Y+24	; 0x18
    1c32:	20 e0       	ldi	r18, 0x00	; 0
    1c34:	30 e0       	ldi	r19, 0x00	; 0
    1c36:	40 e8       	ldi	r20, 0x80	; 128
    1c38:	5f e3       	ldi	r21, 0x3F	; 63
    1c3a:	0e 94 71 03 	call	0x6e2	; 0x6e2 <__ltsf2>
    1c3e:	88 23       	and	r24, r24
    1c40:	2c f4       	brge	.+10     	; 0x1c4c <flash+0x16e>
		__ticks = 1;
    1c42:	81 e0       	ldi	r24, 0x01	; 1
    1c44:	90 e0       	ldi	r25, 0x00	; 0
    1c46:	9c 8b       	std	Y+20, r25	; 0x14
    1c48:	8b 8b       	std	Y+19, r24	; 0x13
    1c4a:	3f c0       	rjmp	.+126    	; 0x1cca <flash+0x1ec>
	else if (__tmp > 65535)
    1c4c:	6d 89       	ldd	r22, Y+21	; 0x15
    1c4e:	7e 89       	ldd	r23, Y+22	; 0x16
    1c50:	8f 89       	ldd	r24, Y+23	; 0x17
    1c52:	98 8d       	ldd	r25, Y+24	; 0x18
    1c54:	20 e0       	ldi	r18, 0x00	; 0
    1c56:	3f ef       	ldi	r19, 0xFF	; 255
    1c58:	4f e7       	ldi	r20, 0x7F	; 127
    1c5a:	57 e4       	ldi	r21, 0x47	; 71
    1c5c:	0e 94 11 03 	call	0x622	; 0x622 <__gtsf2>
    1c60:	18 16       	cp	r1, r24
    1c62:	4c f5       	brge	.+82     	; 0x1cb6 <flash+0x1d8>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    1c64:	69 8d       	ldd	r22, Y+25	; 0x19
    1c66:	7a 8d       	ldd	r23, Y+26	; 0x1a
    1c68:	8b 8d       	ldd	r24, Y+27	; 0x1b
    1c6a:	9c 8d       	ldd	r25, Y+28	; 0x1c
    1c6c:	20 e0       	ldi	r18, 0x00	; 0
    1c6e:	30 e0       	ldi	r19, 0x00	; 0
    1c70:	40 e2       	ldi	r20, 0x20	; 32
    1c72:	51 e4       	ldi	r21, 0x41	; 65
    1c74:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
    1c78:	dc 01       	movw	r26, r24
    1c7a:	cb 01       	movw	r24, r22
    1c7c:	bc 01       	movw	r22, r24
    1c7e:	cd 01       	movw	r24, r26
    1c80:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
    1c84:	dc 01       	movw	r26, r24
    1c86:	cb 01       	movw	r24, r22
    1c88:	9c 8b       	std	Y+20, r25	; 0x14
    1c8a:	8b 8b       	std	Y+19, r24	; 0x13
    1c8c:	0f c0       	rjmp	.+30     	; 0x1cac <flash+0x1ce>
    1c8e:	88 ec       	ldi	r24, 0xC8	; 200
    1c90:	90 e0       	ldi	r25, 0x00	; 0
    1c92:	9a 8b       	std	Y+18, r25	; 0x12
    1c94:	89 8b       	std	Y+17, r24	; 0x11
    1c96:	89 89       	ldd	r24, Y+17	; 0x11
    1c98:	9a 89       	ldd	r25, Y+18	; 0x12
    1c9a:	01 97       	sbiw	r24, 0x01	; 1
    1c9c:	f1 f7       	brne	.-4      	; 0x1c9a <flash+0x1bc>
    1c9e:	9a 8b       	std	Y+18, r25	; 0x12
    1ca0:	89 8b       	std	Y+17, r24	; 0x11
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    1ca2:	8b 89       	ldd	r24, Y+19	; 0x13
    1ca4:	9c 89       	ldd	r25, Y+20	; 0x14
    1ca6:	01 97       	sbiw	r24, 0x01	; 1
    1ca8:	9c 8b       	std	Y+20, r25	; 0x14
    1caa:	8b 8b       	std	Y+19, r24	; 0x13
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    1cac:	8b 89       	ldd	r24, Y+19	; 0x13
    1cae:	9c 89       	ldd	r25, Y+20	; 0x14
    1cb0:	00 97       	sbiw	r24, 0x00	; 0
    1cb2:	69 f7       	brne	.-38     	; 0x1c8e <flash+0x1b0>
    1cb4:	14 c0       	rjmp	.+40     	; 0x1cde <flash+0x200>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    1cb6:	6d 89       	ldd	r22, Y+21	; 0x15
    1cb8:	7e 89       	ldd	r23, Y+22	; 0x16
    1cba:	8f 89       	ldd	r24, Y+23	; 0x17
    1cbc:	98 8d       	ldd	r25, Y+24	; 0x18
    1cbe:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
    1cc2:	dc 01       	movw	r26, r24
    1cc4:	cb 01       	movw	r24, r22
    1cc6:	9c 8b       	std	Y+20, r25	; 0x14
    1cc8:	8b 8b       	std	Y+19, r24	; 0x13
    1cca:	8b 89       	ldd	r24, Y+19	; 0x13
    1ccc:	9c 89       	ldd	r25, Y+20	; 0x14
    1cce:	98 8b       	std	Y+16, r25	; 0x10
    1cd0:	8f 87       	std	Y+15, r24	; 0x0f
    1cd2:	8f 85       	ldd	r24, Y+15	; 0x0f
    1cd4:	98 89       	ldd	r25, Y+16	; 0x10
    1cd6:	01 97       	sbiw	r24, 0x01	; 1
    1cd8:	f1 f7       	brne	.-4      	; 0x1cd6 <flash+0x1f8>
    1cda:	98 8b       	std	Y+16, r25	; 0x10
    1cdc:	8f 87       	std	Y+15, r24	; 0x0f

}
void flash(){
    //DIO_SetPortMode(DIO_PORTA,DIO_OUTPUT);

    for(u8 i=0; i<5;i++)
    1cde:	8b a5       	ldd	r24, Y+43	; 0x2b
    1ce0:	8f 5f       	subi	r24, 0xFF	; 255
    1ce2:	8b a7       	std	Y+43, r24	; 0x2b
    1ce4:	8b a5       	ldd	r24, Y+43	; 0x2b
    1ce6:	85 30       	cpi	r24, 0x05	; 5
    1ce8:	08 f4       	brcc	.+2      	; 0x1cec <flash+0x20e>
    1cea:	05 cf       	rjmp	.-502    	; 0x1af6 <flash+0x18>
    1cec:	80 e0       	ldi	r24, 0x00	; 0
    1cee:	90 e0       	ldi	r25, 0x00	; 0
    1cf0:	aa e7       	ldi	r26, 0x7A	; 122
    1cf2:	b3 e4       	ldi	r27, 0x43	; 67
    1cf4:	8b 87       	std	Y+11, r24	; 0x0b
    1cf6:	9c 87       	std	Y+12, r25	; 0x0c
    1cf8:	ad 87       	std	Y+13, r26	; 0x0d
    1cfa:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    1cfc:	6b 85       	ldd	r22, Y+11	; 0x0b
    1cfe:	7c 85       	ldd	r23, Y+12	; 0x0c
    1d00:	8d 85       	ldd	r24, Y+13	; 0x0d
    1d02:	9e 85       	ldd	r25, Y+14	; 0x0e
    1d04:	20 e0       	ldi	r18, 0x00	; 0
    1d06:	30 e0       	ldi	r19, 0x00	; 0
    1d08:	4a ef       	ldi	r20, 0xFA	; 250
    1d0a:	54 e4       	ldi	r21, 0x44	; 68
    1d0c:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
    1d10:	dc 01       	movw	r26, r24
    1d12:	cb 01       	movw	r24, r22
    1d14:	8f 83       	std	Y+7, r24	; 0x07
    1d16:	98 87       	std	Y+8, r25	; 0x08
    1d18:	a9 87       	std	Y+9, r26	; 0x09
    1d1a:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    1d1c:	6f 81       	ldd	r22, Y+7	; 0x07
    1d1e:	78 85       	ldd	r23, Y+8	; 0x08
    1d20:	89 85       	ldd	r24, Y+9	; 0x09
    1d22:	9a 85       	ldd	r25, Y+10	; 0x0a
    1d24:	20 e0       	ldi	r18, 0x00	; 0
    1d26:	30 e0       	ldi	r19, 0x00	; 0
    1d28:	40 e8       	ldi	r20, 0x80	; 128
    1d2a:	5f e3       	ldi	r21, 0x3F	; 63
    1d2c:	0e 94 71 03 	call	0x6e2	; 0x6e2 <__ltsf2>
    1d30:	88 23       	and	r24, r24
    1d32:	2c f4       	brge	.+10     	; 0x1d3e <flash+0x260>
		__ticks = 1;
    1d34:	81 e0       	ldi	r24, 0x01	; 1
    1d36:	90 e0       	ldi	r25, 0x00	; 0
    1d38:	9e 83       	std	Y+6, r25	; 0x06
    1d3a:	8d 83       	std	Y+5, r24	; 0x05
    1d3c:	3f c0       	rjmp	.+126    	; 0x1dbc <flash+0x2de>
	else if (__tmp > 65535)
    1d3e:	6f 81       	ldd	r22, Y+7	; 0x07
    1d40:	78 85       	ldd	r23, Y+8	; 0x08
    1d42:	89 85       	ldd	r24, Y+9	; 0x09
    1d44:	9a 85       	ldd	r25, Y+10	; 0x0a
    1d46:	20 e0       	ldi	r18, 0x00	; 0
    1d48:	3f ef       	ldi	r19, 0xFF	; 255
    1d4a:	4f e7       	ldi	r20, 0x7F	; 127
    1d4c:	57 e4       	ldi	r21, 0x47	; 71
    1d4e:	0e 94 11 03 	call	0x622	; 0x622 <__gtsf2>
    1d52:	18 16       	cp	r1, r24
    1d54:	4c f5       	brge	.+82     	; 0x1da8 <flash+0x2ca>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    1d56:	6b 85       	ldd	r22, Y+11	; 0x0b
    1d58:	7c 85       	ldd	r23, Y+12	; 0x0c
    1d5a:	8d 85       	ldd	r24, Y+13	; 0x0d
    1d5c:	9e 85       	ldd	r25, Y+14	; 0x0e
    1d5e:	20 e0       	ldi	r18, 0x00	; 0
    1d60:	30 e0       	ldi	r19, 0x00	; 0
    1d62:	40 e2       	ldi	r20, 0x20	; 32
    1d64:	51 e4       	ldi	r21, 0x41	; 65
    1d66:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
    1d6a:	dc 01       	movw	r26, r24
    1d6c:	cb 01       	movw	r24, r22
    1d6e:	bc 01       	movw	r22, r24
    1d70:	cd 01       	movw	r24, r26
    1d72:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
    1d76:	dc 01       	movw	r26, r24
    1d78:	cb 01       	movw	r24, r22
    1d7a:	9e 83       	std	Y+6, r25	; 0x06
    1d7c:	8d 83       	std	Y+5, r24	; 0x05
    1d7e:	0f c0       	rjmp	.+30     	; 0x1d9e <flash+0x2c0>
    1d80:	88 ec       	ldi	r24, 0xC8	; 200
    1d82:	90 e0       	ldi	r25, 0x00	; 0
    1d84:	9c 83       	std	Y+4, r25	; 0x04
    1d86:	8b 83       	std	Y+3, r24	; 0x03
    1d88:	8b 81       	ldd	r24, Y+3	; 0x03
    1d8a:	9c 81       	ldd	r25, Y+4	; 0x04
    1d8c:	01 97       	sbiw	r24, 0x01	; 1
    1d8e:	f1 f7       	brne	.-4      	; 0x1d8c <flash+0x2ae>
    1d90:	9c 83       	std	Y+4, r25	; 0x04
    1d92:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    1d94:	8d 81       	ldd	r24, Y+5	; 0x05
    1d96:	9e 81       	ldd	r25, Y+6	; 0x06
    1d98:	01 97       	sbiw	r24, 0x01	; 1
    1d9a:	9e 83       	std	Y+6, r25	; 0x06
    1d9c:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    1d9e:	8d 81       	ldd	r24, Y+5	; 0x05
    1da0:	9e 81       	ldd	r25, Y+6	; 0x06
    1da2:	00 97       	sbiw	r24, 0x00	; 0
    1da4:	69 f7       	brne	.-38     	; 0x1d80 <flash+0x2a2>
    1da6:	14 c0       	rjmp	.+40     	; 0x1dd0 <flash+0x2f2>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    1da8:	6f 81       	ldd	r22, Y+7	; 0x07
    1daa:	78 85       	ldd	r23, Y+8	; 0x08
    1dac:	89 85       	ldd	r24, Y+9	; 0x09
    1dae:	9a 85       	ldd	r25, Y+10	; 0x0a
    1db0:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
    1db4:	dc 01       	movw	r26, r24
    1db6:	cb 01       	movw	r24, r22
    1db8:	9e 83       	std	Y+6, r25	; 0x06
    1dba:	8d 83       	std	Y+5, r24	; 0x05
    1dbc:	8d 81       	ldd	r24, Y+5	; 0x05
    1dbe:	9e 81       	ldd	r25, Y+6	; 0x06
    1dc0:	9a 83       	std	Y+2, r25	; 0x02
    1dc2:	89 83       	std	Y+1, r24	; 0x01
    1dc4:	89 81       	ldd	r24, Y+1	; 0x01
    1dc6:	9a 81       	ldd	r25, Y+2	; 0x02
    1dc8:	01 97       	sbiw	r24, 0x01	; 1
    1dca:	f1 f7       	brne	.-4      	; 0x1dc8 <flash+0x2ea>
    1dcc:	9a 83       	std	Y+2, r25	; 0x02
    1dce:	89 83       	std	Y+1, r24	; 0x01
        DIO_SetPortLevel(DIO_PORTB,DIO_LOW);
        _delay_ms(250);
       /* code */
    }
    _delay_ms(250);
}
    1dd0:	ab 96       	adiw	r28, 0x2b	; 43
    1dd2:	0f b6       	in	r0, 0x3f	; 63
    1dd4:	f8 94       	cli
    1dd6:	de bf       	out	0x3e, r29	; 62
    1dd8:	0f be       	out	0x3f, r0	; 63
    1dda:	cd bf       	out	0x3d, r28	; 61
    1ddc:	cf 91       	pop	r28
    1dde:	df 91       	pop	r29
    1de0:	08 95       	ret

00001de2 <Assignment_1_Leds_init>:
void Assignment_1_Leds_init(){
    1de2:	df 93       	push	r29
    1de4:	cf 93       	push	r28
    1de6:	cd b7       	in	r28, 0x3d	; 61
    1de8:	de b7       	in	r29, 0x3e	; 62
    DIO_SetPortMode(DIO_PORTA,DIO_OUTPUT);
    1dea:	80 e0       	ldi	r24, 0x00	; 0
    1dec:	62 e0       	ldi	r22, 0x02	; 2
    1dee:	0e 94 ab 07 	call	0xf56	; 0xf56 <DIO_SetPortMode>
    DIO_SetPortMode(DIO_PORTB,DIO_OUTPUT);
    1df2:	81 e0       	ldi	r24, 0x01	; 1
    1df4:	62 e0       	ldi	r22, 0x02	; 2
    1df6:	0e 94 ab 07 	call	0xf56	; 0xf56 <DIO_SetPortMode>
    DIO_SetPinMode(DIO_PORTD,DIO_PIN0,DIO_INPUT_PULLUP);
    1dfa:	83 e0       	ldi	r24, 0x03	; 3
    1dfc:	60 e0       	ldi	r22, 0x00	; 0
    1dfe:	41 e0       	ldi	r20, 0x01	; 1
    1e00:	0e 94 9b 05 	call	0xb36	; 0xb36 <DIO_SetPinMode>
    DIO_SetPinMode(DIO_PORTD,DIO_PIN1,DIO_INPUT_PULLUP);
    1e04:	83 e0       	ldi	r24, 0x03	; 3
    1e06:	61 e0       	ldi	r22, 0x01	; 1
    1e08:	41 e0       	ldi	r20, 0x01	; 1
    1e0a:	0e 94 9b 05 	call	0xb36	; 0xb36 <DIO_SetPinMode>
    DIO_SetPinMode(DIO_PORTD,DIO_PIN2,DIO_INPUT_PULLUP);
    1e0e:	83 e0       	ldi	r24, 0x03	; 3
    1e10:	62 e0       	ldi	r22, 0x02	; 2
    1e12:	41 e0       	ldi	r20, 0x01	; 1
    1e14:	0e 94 9b 05 	call	0xb36	; 0xb36 <DIO_SetPinMode>
    
    while (1)
    {
        if(DIO_ReadPinLevel(DIO_PORTD,DIO_PIN0)==DIO_LOW)
    1e18:	83 e0       	ldi	r24, 0x03	; 3
    1e1a:	60 e0       	ldi	r22, 0x00	; 0
    1e1c:	0e 94 58 0a 	call	0x14b0	; 0x14b0 <DIO_ReadPinLevel>
    1e20:	88 23       	and	r24, r24
    1e22:	19 f4       	brne	.+6      	; 0x1e2a <Assignment_1_Leds_init+0x48>
            {
                func1();
    1e24:	0e 94 27 0f 	call	0x1e4e	; 0x1e4e <func1>
    1e28:	f7 cf       	rjmp	.-18     	; 0x1e18 <Assignment_1_Leds_init+0x36>
            }
            else if(DIO_ReadPinLevel(DIO_PORTD,DIO_PIN1)==DIO_LOW){
    1e2a:	83 e0       	ldi	r24, 0x03	; 3
    1e2c:	61 e0       	ldi	r22, 0x01	; 1
    1e2e:	0e 94 58 0a 	call	0x14b0	; 0x14b0 <DIO_ReadPinLevel>
    1e32:	88 23       	and	r24, r24
    1e34:	19 f4       	brne	.+6      	; 0x1e3c <Assignment_1_Leds_init+0x5a>
                //DIO_SetPinLevel(DIO_PORTA,DIO_PIN2,DIO_LOW);
                func2();
    1e36:	0e 94 6e 13 	call	0x26dc	; 0x26dc <func2>
    1e3a:	ee cf       	rjmp	.-36     	; 0x1e18 <Assignment_1_Leds_init+0x36>
            }else if(DIO_ReadPinLevel(DIO_PORTD,DIO_PIN2)==DIO_LOW){
    1e3c:	83 e0       	ldi	r24, 0x03	; 3
    1e3e:	62 e0       	ldi	r22, 0x02	; 2
    1e40:	0e 94 58 0a 	call	0x14b0	; 0x14b0 <DIO_ReadPinLevel>
    1e44:	88 23       	and	r24, r24
    1e46:	41 f7       	brne	.-48     	; 0x1e18 <Assignment_1_Leds_init+0x36>
                //DIO_SetPinLevel(DIO_PORTA,DIO_PIN2,DIO_LOW);
                func3();
    1e48:	0e 94 78 15 	call	0x2af0	; 0x2af0 <func3>
    1e4c:	e5 cf       	rjmp	.-54     	; 0x1e18 <Assignment_1_Leds_init+0x36>

00001e4e <func1>:
            }
    }

}
void func1(){
    1e4e:	0f 93       	push	r16
    1e50:	1f 93       	push	r17
    1e52:	df 93       	push	r29
    1e54:	cf 93       	push	r28
    1e56:	cd b7       	in	r28, 0x3d	; 61
    1e58:	de b7       	in	r29, 0x3e	; 62
    1e5a:	c3 56       	subi	r28, 0x63	; 99
    1e5c:	d0 40       	sbci	r29, 0x00	; 0
    1e5e:	0f b6       	in	r0, 0x3f	; 63
    1e60:	f8 94       	cli
    1e62:	de bf       	out	0x3e, r29	; 62
    1e64:	0f be       	out	0x3f, r0	; 63
    1e66:	cd bf       	out	0x3d, r28	; 61
    flash();
    1e68:	0e 94 6f 0d 	call	0x1ade	; 0x1ade <flash>
	u8 i=0;
    1e6c:	fe 01       	movw	r30, r28
    1e6e:	ed 59       	subi	r30, 0x9D	; 157
    1e70:	ff 4f       	sbci	r31, 0xFF	; 255
    1e72:	10 82       	st	Z, r1
	for ( i = 0; i <=8; i++)
    1e74:	fe 01       	movw	r30, r28
    1e76:	ed 59       	subi	r30, 0x9D	; 157
    1e78:	ff 4f       	sbci	r31, 0xFF	; 255
    1e7a:	10 82       	st	Z, r1
    1e7c:	c4 c0       	rjmp	.+392    	; 0x2006 <func1+0x1b8>
		{
		    //SET_BIT(PORTA,i);
            DIO_SetPinLevel(DIO_PORTA,i,DIO_HIGH);
    1e7e:	fe 01       	movw	r30, r28
    1e80:	ed 59       	subi	r30, 0x9D	; 157
    1e82:	ff 4f       	sbci	r31, 0xFF	; 255
    1e84:	80 e0       	ldi	r24, 0x00	; 0
    1e86:	60 81       	ld	r22, Z
    1e88:	41 e0       	ldi	r20, 0x01	; 1
    1e8a:	0e 94 a9 08 	call	0x1152	; 0x1152 <DIO_SetPinLevel>
    1e8e:	fe 01       	movw	r30, r28
    1e90:	e1 5a       	subi	r30, 0xA1	; 161
    1e92:	ff 4f       	sbci	r31, 0xFF	; 255
    1e94:	80 e0       	ldi	r24, 0x00	; 0
    1e96:	90 e0       	ldi	r25, 0x00	; 0
    1e98:	aa e7       	ldi	r26, 0x7A	; 122
    1e9a:	b3 e4       	ldi	r27, 0x43	; 67
    1e9c:	80 83       	st	Z, r24
    1e9e:	91 83       	std	Z+1, r25	; 0x01
    1ea0:	a2 83       	std	Z+2, r26	; 0x02
    1ea2:	b3 83       	std	Z+3, r27	; 0x03
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    1ea4:	8e 01       	movw	r16, r28
    1ea6:	05 5a       	subi	r16, 0xA5	; 165
    1ea8:	1f 4f       	sbci	r17, 0xFF	; 255
    1eaa:	fe 01       	movw	r30, r28
    1eac:	e1 5a       	subi	r30, 0xA1	; 161
    1eae:	ff 4f       	sbci	r31, 0xFF	; 255
    1eb0:	60 81       	ld	r22, Z
    1eb2:	71 81       	ldd	r23, Z+1	; 0x01
    1eb4:	82 81       	ldd	r24, Z+2	; 0x02
    1eb6:	93 81       	ldd	r25, Z+3	; 0x03
    1eb8:	20 e0       	ldi	r18, 0x00	; 0
    1eba:	30 e0       	ldi	r19, 0x00	; 0
    1ebc:	4a ef       	ldi	r20, 0xFA	; 250
    1ebe:	54 e4       	ldi	r21, 0x44	; 68
    1ec0:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
    1ec4:	dc 01       	movw	r26, r24
    1ec6:	cb 01       	movw	r24, r22
    1ec8:	f8 01       	movw	r30, r16
    1eca:	80 83       	st	Z, r24
    1ecc:	91 83       	std	Z+1, r25	; 0x01
    1ece:	a2 83       	std	Z+2, r26	; 0x02
    1ed0:	b3 83       	std	Z+3, r27	; 0x03
	if (__tmp < 1.0)
    1ed2:	fe 01       	movw	r30, r28
    1ed4:	e5 5a       	subi	r30, 0xA5	; 165
    1ed6:	ff 4f       	sbci	r31, 0xFF	; 255
    1ed8:	60 81       	ld	r22, Z
    1eda:	71 81       	ldd	r23, Z+1	; 0x01
    1edc:	82 81       	ldd	r24, Z+2	; 0x02
    1ede:	93 81       	ldd	r25, Z+3	; 0x03
    1ee0:	20 e0       	ldi	r18, 0x00	; 0
    1ee2:	30 e0       	ldi	r19, 0x00	; 0
    1ee4:	40 e8       	ldi	r20, 0x80	; 128
    1ee6:	5f e3       	ldi	r21, 0x3F	; 63
    1ee8:	0e 94 71 03 	call	0x6e2	; 0x6e2 <__ltsf2>
    1eec:	88 23       	and	r24, r24
    1eee:	44 f4       	brge	.+16     	; 0x1f00 <func1+0xb2>
		__ticks = 1;
    1ef0:	fe 01       	movw	r30, r28
    1ef2:	e7 5a       	subi	r30, 0xA7	; 167
    1ef4:	ff 4f       	sbci	r31, 0xFF	; 255
    1ef6:	81 e0       	ldi	r24, 0x01	; 1
    1ef8:	90 e0       	ldi	r25, 0x00	; 0
    1efa:	91 83       	std	Z+1, r25	; 0x01
    1efc:	80 83       	st	Z, r24
    1efe:	64 c0       	rjmp	.+200    	; 0x1fc8 <func1+0x17a>
	else if (__tmp > 65535)
    1f00:	fe 01       	movw	r30, r28
    1f02:	e5 5a       	subi	r30, 0xA5	; 165
    1f04:	ff 4f       	sbci	r31, 0xFF	; 255
    1f06:	60 81       	ld	r22, Z
    1f08:	71 81       	ldd	r23, Z+1	; 0x01
    1f0a:	82 81       	ldd	r24, Z+2	; 0x02
    1f0c:	93 81       	ldd	r25, Z+3	; 0x03
    1f0e:	20 e0       	ldi	r18, 0x00	; 0
    1f10:	3f ef       	ldi	r19, 0xFF	; 255
    1f12:	4f e7       	ldi	r20, 0x7F	; 127
    1f14:	57 e4       	ldi	r21, 0x47	; 71
    1f16:	0e 94 11 03 	call	0x622	; 0x622 <__gtsf2>
    1f1a:	18 16       	cp	r1, r24
    1f1c:	0c f0       	brlt	.+2      	; 0x1f20 <func1+0xd2>
    1f1e:	43 c0       	rjmp	.+134    	; 0x1fa6 <func1+0x158>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    1f20:	fe 01       	movw	r30, r28
    1f22:	e1 5a       	subi	r30, 0xA1	; 161
    1f24:	ff 4f       	sbci	r31, 0xFF	; 255
    1f26:	60 81       	ld	r22, Z
    1f28:	71 81       	ldd	r23, Z+1	; 0x01
    1f2a:	82 81       	ldd	r24, Z+2	; 0x02
    1f2c:	93 81       	ldd	r25, Z+3	; 0x03
    1f2e:	20 e0       	ldi	r18, 0x00	; 0
    1f30:	30 e0       	ldi	r19, 0x00	; 0
    1f32:	40 e2       	ldi	r20, 0x20	; 32
    1f34:	51 e4       	ldi	r21, 0x41	; 65
    1f36:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
    1f3a:	dc 01       	movw	r26, r24
    1f3c:	cb 01       	movw	r24, r22
    1f3e:	8e 01       	movw	r16, r28
    1f40:	07 5a       	subi	r16, 0xA7	; 167
    1f42:	1f 4f       	sbci	r17, 0xFF	; 255
    1f44:	bc 01       	movw	r22, r24
    1f46:	cd 01       	movw	r24, r26
    1f48:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
    1f4c:	dc 01       	movw	r26, r24
    1f4e:	cb 01       	movw	r24, r22
    1f50:	f8 01       	movw	r30, r16
    1f52:	91 83       	std	Z+1, r25	; 0x01
    1f54:	80 83       	st	Z, r24
    1f56:	1f c0       	rjmp	.+62     	; 0x1f96 <func1+0x148>
    1f58:	fe 01       	movw	r30, r28
    1f5a:	e9 5a       	subi	r30, 0xA9	; 169
    1f5c:	ff 4f       	sbci	r31, 0xFF	; 255
    1f5e:	88 ec       	ldi	r24, 0xC8	; 200
    1f60:	90 e0       	ldi	r25, 0x00	; 0
    1f62:	91 83       	std	Z+1, r25	; 0x01
    1f64:	80 83       	st	Z, r24
    1f66:	fe 01       	movw	r30, r28
    1f68:	e9 5a       	subi	r30, 0xA9	; 169
    1f6a:	ff 4f       	sbci	r31, 0xFF	; 255
    1f6c:	80 81       	ld	r24, Z
    1f6e:	91 81       	ldd	r25, Z+1	; 0x01
    1f70:	01 97       	sbiw	r24, 0x01	; 1
    1f72:	f1 f7       	brne	.-4      	; 0x1f70 <func1+0x122>
    1f74:	fe 01       	movw	r30, r28
    1f76:	e9 5a       	subi	r30, 0xA9	; 169
    1f78:	ff 4f       	sbci	r31, 0xFF	; 255
    1f7a:	91 83       	std	Z+1, r25	; 0x01
    1f7c:	80 83       	st	Z, r24
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    1f7e:	de 01       	movw	r26, r28
    1f80:	a7 5a       	subi	r26, 0xA7	; 167
    1f82:	bf 4f       	sbci	r27, 0xFF	; 255
    1f84:	fe 01       	movw	r30, r28
    1f86:	e7 5a       	subi	r30, 0xA7	; 167
    1f88:	ff 4f       	sbci	r31, 0xFF	; 255
    1f8a:	80 81       	ld	r24, Z
    1f8c:	91 81       	ldd	r25, Z+1	; 0x01
    1f8e:	01 97       	sbiw	r24, 0x01	; 1
    1f90:	11 96       	adiw	r26, 0x01	; 1
    1f92:	9c 93       	st	X, r25
    1f94:	8e 93       	st	-X, r24
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    1f96:	fe 01       	movw	r30, r28
    1f98:	e7 5a       	subi	r30, 0xA7	; 167
    1f9a:	ff 4f       	sbci	r31, 0xFF	; 255
    1f9c:	80 81       	ld	r24, Z
    1f9e:	91 81       	ldd	r25, Z+1	; 0x01
    1fa0:	00 97       	sbiw	r24, 0x00	; 0
    1fa2:	d1 f6       	brne	.-76     	; 0x1f58 <func1+0x10a>
    1fa4:	27 c0       	rjmp	.+78     	; 0x1ff4 <func1+0x1a6>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    1fa6:	8e 01       	movw	r16, r28
    1fa8:	07 5a       	subi	r16, 0xA7	; 167
    1faa:	1f 4f       	sbci	r17, 0xFF	; 255
    1fac:	fe 01       	movw	r30, r28
    1fae:	e5 5a       	subi	r30, 0xA5	; 165
    1fb0:	ff 4f       	sbci	r31, 0xFF	; 255
    1fb2:	60 81       	ld	r22, Z
    1fb4:	71 81       	ldd	r23, Z+1	; 0x01
    1fb6:	82 81       	ldd	r24, Z+2	; 0x02
    1fb8:	93 81       	ldd	r25, Z+3	; 0x03
    1fba:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
    1fbe:	dc 01       	movw	r26, r24
    1fc0:	cb 01       	movw	r24, r22
    1fc2:	f8 01       	movw	r30, r16
    1fc4:	91 83       	std	Z+1, r25	; 0x01
    1fc6:	80 83       	st	Z, r24
    1fc8:	de 01       	movw	r26, r28
    1fca:	ab 5a       	subi	r26, 0xAB	; 171
    1fcc:	bf 4f       	sbci	r27, 0xFF	; 255
    1fce:	fe 01       	movw	r30, r28
    1fd0:	e7 5a       	subi	r30, 0xA7	; 167
    1fd2:	ff 4f       	sbci	r31, 0xFF	; 255
    1fd4:	80 81       	ld	r24, Z
    1fd6:	91 81       	ldd	r25, Z+1	; 0x01
    1fd8:	8d 93       	st	X+, r24
    1fda:	9c 93       	st	X, r25
    1fdc:	fe 01       	movw	r30, r28
    1fde:	eb 5a       	subi	r30, 0xAB	; 171
    1fe0:	ff 4f       	sbci	r31, 0xFF	; 255
    1fe2:	80 81       	ld	r24, Z
    1fe4:	91 81       	ldd	r25, Z+1	; 0x01
    1fe6:	01 97       	sbiw	r24, 0x01	; 1
    1fe8:	f1 f7       	brne	.-4      	; 0x1fe6 <func1+0x198>
    1fea:	fe 01       	movw	r30, r28
    1fec:	eb 5a       	subi	r30, 0xAB	; 171
    1fee:	ff 4f       	sbci	r31, 0xFF	; 255
    1ff0:	91 83       	std	Z+1, r25	; 0x01
    1ff2:	80 83       	st	Z, r24

}
void func1(){
    flash();
	u8 i=0;
	for ( i = 0; i <=8; i++)
    1ff4:	de 01       	movw	r26, r28
    1ff6:	ad 59       	subi	r26, 0x9D	; 157
    1ff8:	bf 4f       	sbci	r27, 0xFF	; 255
    1ffa:	fe 01       	movw	r30, r28
    1ffc:	ed 59       	subi	r30, 0x9D	; 157
    1ffe:	ff 4f       	sbci	r31, 0xFF	; 255
    2000:	80 81       	ld	r24, Z
    2002:	8f 5f       	subi	r24, 0xFF	; 255
    2004:	8c 93       	st	X, r24
    2006:	fe 01       	movw	r30, r28
    2008:	ed 59       	subi	r30, 0x9D	; 157
    200a:	ff 4f       	sbci	r31, 0xFF	; 255
    200c:	80 81       	ld	r24, Z
    200e:	89 30       	cpi	r24, 0x09	; 9
    2010:	08 f4       	brcc	.+2      	; 0x2014 <func1+0x1c6>
    2012:	35 cf       	rjmp	.-406    	; 0x1e7e <func1+0x30>
    2014:	fe 01       	movw	r30, r28
    2016:	ef 5a       	subi	r30, 0xAF	; 175
    2018:	ff 4f       	sbci	r31, 0xFF	; 255
    201a:	80 e0       	ldi	r24, 0x00	; 0
    201c:	90 e0       	ldi	r25, 0x00	; 0
    201e:	aa e7       	ldi	r26, 0x7A	; 122
    2020:	b3 e4       	ldi	r27, 0x43	; 67
    2022:	80 83       	st	Z, r24
    2024:	91 83       	std	Z+1, r25	; 0x01
    2026:	a2 83       	std	Z+2, r26	; 0x02
    2028:	b3 83       	std	Z+3, r27	; 0x03
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    202a:	8e 01       	movw	r16, r28
    202c:	03 5b       	subi	r16, 0xB3	; 179
    202e:	1f 4f       	sbci	r17, 0xFF	; 255
    2030:	fe 01       	movw	r30, r28
    2032:	ef 5a       	subi	r30, 0xAF	; 175
    2034:	ff 4f       	sbci	r31, 0xFF	; 255
    2036:	60 81       	ld	r22, Z
    2038:	71 81       	ldd	r23, Z+1	; 0x01
    203a:	82 81       	ldd	r24, Z+2	; 0x02
    203c:	93 81       	ldd	r25, Z+3	; 0x03
    203e:	20 e0       	ldi	r18, 0x00	; 0
    2040:	30 e0       	ldi	r19, 0x00	; 0
    2042:	4a ef       	ldi	r20, 0xFA	; 250
    2044:	54 e4       	ldi	r21, 0x44	; 68
    2046:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
    204a:	dc 01       	movw	r26, r24
    204c:	cb 01       	movw	r24, r22
    204e:	f8 01       	movw	r30, r16
    2050:	80 83       	st	Z, r24
    2052:	91 83       	std	Z+1, r25	; 0x01
    2054:	a2 83       	std	Z+2, r26	; 0x02
    2056:	b3 83       	std	Z+3, r27	; 0x03
	if (__tmp < 1.0)
    2058:	fe 01       	movw	r30, r28
    205a:	e3 5b       	subi	r30, 0xB3	; 179
    205c:	ff 4f       	sbci	r31, 0xFF	; 255
    205e:	60 81       	ld	r22, Z
    2060:	71 81       	ldd	r23, Z+1	; 0x01
    2062:	82 81       	ldd	r24, Z+2	; 0x02
    2064:	93 81       	ldd	r25, Z+3	; 0x03
    2066:	20 e0       	ldi	r18, 0x00	; 0
    2068:	30 e0       	ldi	r19, 0x00	; 0
    206a:	40 e8       	ldi	r20, 0x80	; 128
    206c:	5f e3       	ldi	r21, 0x3F	; 63
    206e:	0e 94 71 03 	call	0x6e2	; 0x6e2 <__ltsf2>
    2072:	88 23       	and	r24, r24
    2074:	44 f4       	brge	.+16     	; 0x2086 <func1+0x238>
		__ticks = 1;
    2076:	fe 01       	movw	r30, r28
    2078:	e5 5b       	subi	r30, 0xB5	; 181
    207a:	ff 4f       	sbci	r31, 0xFF	; 255
    207c:	81 e0       	ldi	r24, 0x01	; 1
    207e:	90 e0       	ldi	r25, 0x00	; 0
    2080:	91 83       	std	Z+1, r25	; 0x01
    2082:	80 83       	st	Z, r24
    2084:	64 c0       	rjmp	.+200    	; 0x214e <func1+0x300>
	else if (__tmp > 65535)
    2086:	fe 01       	movw	r30, r28
    2088:	e3 5b       	subi	r30, 0xB3	; 179
    208a:	ff 4f       	sbci	r31, 0xFF	; 255
    208c:	60 81       	ld	r22, Z
    208e:	71 81       	ldd	r23, Z+1	; 0x01
    2090:	82 81       	ldd	r24, Z+2	; 0x02
    2092:	93 81       	ldd	r25, Z+3	; 0x03
    2094:	20 e0       	ldi	r18, 0x00	; 0
    2096:	3f ef       	ldi	r19, 0xFF	; 255
    2098:	4f e7       	ldi	r20, 0x7F	; 127
    209a:	57 e4       	ldi	r21, 0x47	; 71
    209c:	0e 94 11 03 	call	0x622	; 0x622 <__gtsf2>
    20a0:	18 16       	cp	r1, r24
    20a2:	0c f0       	brlt	.+2      	; 0x20a6 <func1+0x258>
    20a4:	43 c0       	rjmp	.+134    	; 0x212c <func1+0x2de>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    20a6:	fe 01       	movw	r30, r28
    20a8:	ef 5a       	subi	r30, 0xAF	; 175
    20aa:	ff 4f       	sbci	r31, 0xFF	; 255
    20ac:	60 81       	ld	r22, Z
    20ae:	71 81       	ldd	r23, Z+1	; 0x01
    20b0:	82 81       	ldd	r24, Z+2	; 0x02
    20b2:	93 81       	ldd	r25, Z+3	; 0x03
    20b4:	20 e0       	ldi	r18, 0x00	; 0
    20b6:	30 e0       	ldi	r19, 0x00	; 0
    20b8:	40 e2       	ldi	r20, 0x20	; 32
    20ba:	51 e4       	ldi	r21, 0x41	; 65
    20bc:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
    20c0:	dc 01       	movw	r26, r24
    20c2:	cb 01       	movw	r24, r22
    20c4:	8e 01       	movw	r16, r28
    20c6:	05 5b       	subi	r16, 0xB5	; 181
    20c8:	1f 4f       	sbci	r17, 0xFF	; 255
    20ca:	bc 01       	movw	r22, r24
    20cc:	cd 01       	movw	r24, r26
    20ce:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
    20d2:	dc 01       	movw	r26, r24
    20d4:	cb 01       	movw	r24, r22
    20d6:	f8 01       	movw	r30, r16
    20d8:	91 83       	std	Z+1, r25	; 0x01
    20da:	80 83       	st	Z, r24
    20dc:	1f c0       	rjmp	.+62     	; 0x211c <func1+0x2ce>
    20de:	fe 01       	movw	r30, r28
    20e0:	e7 5b       	subi	r30, 0xB7	; 183
    20e2:	ff 4f       	sbci	r31, 0xFF	; 255
    20e4:	88 ec       	ldi	r24, 0xC8	; 200
    20e6:	90 e0       	ldi	r25, 0x00	; 0
    20e8:	91 83       	std	Z+1, r25	; 0x01
    20ea:	80 83       	st	Z, r24
    20ec:	fe 01       	movw	r30, r28
    20ee:	e7 5b       	subi	r30, 0xB7	; 183
    20f0:	ff 4f       	sbci	r31, 0xFF	; 255
    20f2:	80 81       	ld	r24, Z
    20f4:	91 81       	ldd	r25, Z+1	; 0x01
    20f6:	01 97       	sbiw	r24, 0x01	; 1
    20f8:	f1 f7       	brne	.-4      	; 0x20f6 <func1+0x2a8>
    20fa:	fe 01       	movw	r30, r28
    20fc:	e7 5b       	subi	r30, 0xB7	; 183
    20fe:	ff 4f       	sbci	r31, 0xFF	; 255
    2100:	91 83       	std	Z+1, r25	; 0x01
    2102:	80 83       	st	Z, r24
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    2104:	de 01       	movw	r26, r28
    2106:	a5 5b       	subi	r26, 0xB5	; 181
    2108:	bf 4f       	sbci	r27, 0xFF	; 255
    210a:	fe 01       	movw	r30, r28
    210c:	e5 5b       	subi	r30, 0xB5	; 181
    210e:	ff 4f       	sbci	r31, 0xFF	; 255
    2110:	80 81       	ld	r24, Z
    2112:	91 81       	ldd	r25, Z+1	; 0x01
    2114:	01 97       	sbiw	r24, 0x01	; 1
    2116:	11 96       	adiw	r26, 0x01	; 1
    2118:	9c 93       	st	X, r25
    211a:	8e 93       	st	-X, r24
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    211c:	fe 01       	movw	r30, r28
    211e:	e5 5b       	subi	r30, 0xB5	; 181
    2120:	ff 4f       	sbci	r31, 0xFF	; 255
    2122:	80 81       	ld	r24, Z
    2124:	91 81       	ldd	r25, Z+1	; 0x01
    2126:	00 97       	sbiw	r24, 0x00	; 0
    2128:	d1 f6       	brne	.-76     	; 0x20de <func1+0x290>
    212a:	28 c0       	rjmp	.+80     	; 0x217c <func1+0x32e>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    212c:	8e 01       	movw	r16, r28
    212e:	05 5b       	subi	r16, 0xB5	; 181
    2130:	1f 4f       	sbci	r17, 0xFF	; 255
    2132:	fe 01       	movw	r30, r28
    2134:	e3 5b       	subi	r30, 0xB3	; 179
    2136:	ff 4f       	sbci	r31, 0xFF	; 255
    2138:	60 81       	ld	r22, Z
    213a:	71 81       	ldd	r23, Z+1	; 0x01
    213c:	82 81       	ldd	r24, Z+2	; 0x02
    213e:	93 81       	ldd	r25, Z+3	; 0x03
    2140:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
    2144:	dc 01       	movw	r26, r24
    2146:	cb 01       	movw	r24, r22
    2148:	f8 01       	movw	r30, r16
    214a:	91 83       	std	Z+1, r25	; 0x01
    214c:	80 83       	st	Z, r24
    214e:	de 01       	movw	r26, r28
    2150:	a9 5b       	subi	r26, 0xB9	; 185
    2152:	bf 4f       	sbci	r27, 0xFF	; 255
    2154:	fe 01       	movw	r30, r28
    2156:	e5 5b       	subi	r30, 0xB5	; 181
    2158:	ff 4f       	sbci	r31, 0xFF	; 255
    215a:	80 81       	ld	r24, Z
    215c:	91 81       	ldd	r25, Z+1	; 0x01
    215e:	11 96       	adiw	r26, 0x01	; 1
    2160:	9c 93       	st	X, r25
    2162:	8e 93       	st	-X, r24
    2164:	fe 01       	movw	r30, r28
    2166:	e9 5b       	subi	r30, 0xB9	; 185
    2168:	ff 4f       	sbci	r31, 0xFF	; 255
    216a:	80 81       	ld	r24, Z
    216c:	91 81       	ldd	r25, Z+1	; 0x01
    216e:	01 97       	sbiw	r24, 0x01	; 1
    2170:	f1 f7       	brne	.-4      	; 0x216e <func1+0x320>
    2172:	fe 01       	movw	r30, r28
    2174:	e9 5b       	subi	r30, 0xB9	; 185
    2176:	ff 4f       	sbci	r31, 0xFF	; 255
    2178:	91 83       	std	Z+1, r25	; 0x01
    217a:	80 83       	st	Z, r24
            DIO_SetPinLevel(DIO_PORTA,i,DIO_HIGH);
		    _delay_ms(250);
		    /* code */
		}
			_delay_ms(250);
	for ( i = 0; i <=8; i++)
    217c:	fe 01       	movw	r30, r28
    217e:	ed 59       	subi	r30, 0x9D	; 157
    2180:	ff 4f       	sbci	r31, 0xFF	; 255
    2182:	10 82       	st	Z, r1
    2184:	96 c0       	rjmp	.+300    	; 0x22b2 <func1+0x464>
		{
			//SET_BIT(PORTB,i);
            DIO_SetPinLevel(DIO_PORTB,i,DIO_HIGH);
    2186:	fe 01       	movw	r30, r28
    2188:	ed 59       	subi	r30, 0x9D	; 157
    218a:	ff 4f       	sbci	r31, 0xFF	; 255
    218c:	81 e0       	ldi	r24, 0x01	; 1
    218e:	60 81       	ld	r22, Z
    2190:	41 e0       	ldi	r20, 0x01	; 1
    2192:	0e 94 a9 08 	call	0x1152	; 0x1152 <DIO_SetPinLevel>
    2196:	fe 01       	movw	r30, r28
    2198:	ed 5b       	subi	r30, 0xBD	; 189
    219a:	ff 4f       	sbci	r31, 0xFF	; 255
    219c:	80 e0       	ldi	r24, 0x00	; 0
    219e:	90 e0       	ldi	r25, 0x00	; 0
    21a0:	aa e7       	ldi	r26, 0x7A	; 122
    21a2:	b3 e4       	ldi	r27, 0x43	; 67
    21a4:	80 83       	st	Z, r24
    21a6:	91 83       	std	Z+1, r25	; 0x01
    21a8:	a2 83       	std	Z+2, r26	; 0x02
    21aa:	b3 83       	std	Z+3, r27	; 0x03
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    21ac:	8e 01       	movw	r16, r28
    21ae:	01 5c       	subi	r16, 0xC1	; 193
    21b0:	1f 4f       	sbci	r17, 0xFF	; 255
    21b2:	fe 01       	movw	r30, r28
    21b4:	ed 5b       	subi	r30, 0xBD	; 189
    21b6:	ff 4f       	sbci	r31, 0xFF	; 255
    21b8:	60 81       	ld	r22, Z
    21ba:	71 81       	ldd	r23, Z+1	; 0x01
    21bc:	82 81       	ldd	r24, Z+2	; 0x02
    21be:	93 81       	ldd	r25, Z+3	; 0x03
    21c0:	20 e0       	ldi	r18, 0x00	; 0
    21c2:	30 e0       	ldi	r19, 0x00	; 0
    21c4:	4a ef       	ldi	r20, 0xFA	; 250
    21c6:	54 e4       	ldi	r21, 0x44	; 68
    21c8:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
    21cc:	dc 01       	movw	r26, r24
    21ce:	cb 01       	movw	r24, r22
    21d0:	f8 01       	movw	r30, r16
    21d2:	80 83       	st	Z, r24
    21d4:	91 83       	std	Z+1, r25	; 0x01
    21d6:	a2 83       	std	Z+2, r26	; 0x02
    21d8:	b3 83       	std	Z+3, r27	; 0x03
	if (__tmp < 1.0)
    21da:	fe 01       	movw	r30, r28
    21dc:	ff 96       	adiw	r30, 0x3f	; 63
    21de:	60 81       	ld	r22, Z
    21e0:	71 81       	ldd	r23, Z+1	; 0x01
    21e2:	82 81       	ldd	r24, Z+2	; 0x02
    21e4:	93 81       	ldd	r25, Z+3	; 0x03
    21e6:	20 e0       	ldi	r18, 0x00	; 0
    21e8:	30 e0       	ldi	r19, 0x00	; 0
    21ea:	40 e8       	ldi	r20, 0x80	; 128
    21ec:	5f e3       	ldi	r21, 0x3F	; 63
    21ee:	0e 94 71 03 	call	0x6e2	; 0x6e2 <__ltsf2>
    21f2:	88 23       	and	r24, r24
    21f4:	2c f4       	brge	.+10     	; 0x2200 <func1+0x3b2>
		__ticks = 1;
    21f6:	81 e0       	ldi	r24, 0x01	; 1
    21f8:	90 e0       	ldi	r25, 0x00	; 0
    21fa:	9e af       	std	Y+62, r25	; 0x3e
    21fc:	8d af       	std	Y+61, r24	; 0x3d
    21fe:	46 c0       	rjmp	.+140    	; 0x228c <func1+0x43e>
	else if (__tmp > 65535)
    2200:	fe 01       	movw	r30, r28
    2202:	ff 96       	adiw	r30, 0x3f	; 63
    2204:	60 81       	ld	r22, Z
    2206:	71 81       	ldd	r23, Z+1	; 0x01
    2208:	82 81       	ldd	r24, Z+2	; 0x02
    220a:	93 81       	ldd	r25, Z+3	; 0x03
    220c:	20 e0       	ldi	r18, 0x00	; 0
    220e:	3f ef       	ldi	r19, 0xFF	; 255
    2210:	4f e7       	ldi	r20, 0x7F	; 127
    2212:	57 e4       	ldi	r21, 0x47	; 71
    2214:	0e 94 11 03 	call	0x622	; 0x622 <__gtsf2>
    2218:	18 16       	cp	r1, r24
    221a:	64 f5       	brge	.+88     	; 0x2274 <func1+0x426>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    221c:	fe 01       	movw	r30, r28
    221e:	ed 5b       	subi	r30, 0xBD	; 189
    2220:	ff 4f       	sbci	r31, 0xFF	; 255
    2222:	60 81       	ld	r22, Z
    2224:	71 81       	ldd	r23, Z+1	; 0x01
    2226:	82 81       	ldd	r24, Z+2	; 0x02
    2228:	93 81       	ldd	r25, Z+3	; 0x03
    222a:	20 e0       	ldi	r18, 0x00	; 0
    222c:	30 e0       	ldi	r19, 0x00	; 0
    222e:	40 e2       	ldi	r20, 0x20	; 32
    2230:	51 e4       	ldi	r21, 0x41	; 65
    2232:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
    2236:	dc 01       	movw	r26, r24
    2238:	cb 01       	movw	r24, r22
    223a:	bc 01       	movw	r22, r24
    223c:	cd 01       	movw	r24, r26
    223e:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
    2242:	dc 01       	movw	r26, r24
    2244:	cb 01       	movw	r24, r22
    2246:	9e af       	std	Y+62, r25	; 0x3e
    2248:	8d af       	std	Y+61, r24	; 0x3d
    224a:	0f c0       	rjmp	.+30     	; 0x226a <func1+0x41c>
    224c:	88 ec       	ldi	r24, 0xC8	; 200
    224e:	90 e0       	ldi	r25, 0x00	; 0
    2250:	9c af       	std	Y+60, r25	; 0x3c
    2252:	8b af       	std	Y+59, r24	; 0x3b
    2254:	8b ad       	ldd	r24, Y+59	; 0x3b
    2256:	9c ad       	ldd	r25, Y+60	; 0x3c
    2258:	01 97       	sbiw	r24, 0x01	; 1
    225a:	f1 f7       	brne	.-4      	; 0x2258 <func1+0x40a>
    225c:	9c af       	std	Y+60, r25	; 0x3c
    225e:	8b af       	std	Y+59, r24	; 0x3b
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    2260:	8d ad       	ldd	r24, Y+61	; 0x3d
    2262:	9e ad       	ldd	r25, Y+62	; 0x3e
    2264:	01 97       	sbiw	r24, 0x01	; 1
    2266:	9e af       	std	Y+62, r25	; 0x3e
    2268:	8d af       	std	Y+61, r24	; 0x3d
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    226a:	8d ad       	ldd	r24, Y+61	; 0x3d
    226c:	9e ad       	ldd	r25, Y+62	; 0x3e
    226e:	00 97       	sbiw	r24, 0x00	; 0
    2270:	69 f7       	brne	.-38     	; 0x224c <func1+0x3fe>
    2272:	16 c0       	rjmp	.+44     	; 0x22a0 <func1+0x452>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    2274:	fe 01       	movw	r30, r28
    2276:	ff 96       	adiw	r30, 0x3f	; 63
    2278:	60 81       	ld	r22, Z
    227a:	71 81       	ldd	r23, Z+1	; 0x01
    227c:	82 81       	ldd	r24, Z+2	; 0x02
    227e:	93 81       	ldd	r25, Z+3	; 0x03
    2280:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
    2284:	dc 01       	movw	r26, r24
    2286:	cb 01       	movw	r24, r22
    2288:	9e af       	std	Y+62, r25	; 0x3e
    228a:	8d af       	std	Y+61, r24	; 0x3d
    228c:	8d ad       	ldd	r24, Y+61	; 0x3d
    228e:	9e ad       	ldd	r25, Y+62	; 0x3e
    2290:	9a af       	std	Y+58, r25	; 0x3a
    2292:	89 af       	std	Y+57, r24	; 0x39
    2294:	89 ad       	ldd	r24, Y+57	; 0x39
    2296:	9a ad       	ldd	r25, Y+58	; 0x3a
    2298:	01 97       	sbiw	r24, 0x01	; 1
    229a:	f1 f7       	brne	.-4      	; 0x2298 <func1+0x44a>
    229c:	9a af       	std	Y+58, r25	; 0x3a
    229e:	89 af       	std	Y+57, r24	; 0x39
            DIO_SetPinLevel(DIO_PORTA,i,DIO_HIGH);
		    _delay_ms(250);
		    /* code */
		}
			_delay_ms(250);
	for ( i = 0; i <=8; i++)
    22a0:	de 01       	movw	r26, r28
    22a2:	ad 59       	subi	r26, 0x9D	; 157
    22a4:	bf 4f       	sbci	r27, 0xFF	; 255
    22a6:	fe 01       	movw	r30, r28
    22a8:	ed 59       	subi	r30, 0x9D	; 157
    22aa:	ff 4f       	sbci	r31, 0xFF	; 255
    22ac:	80 81       	ld	r24, Z
    22ae:	8f 5f       	subi	r24, 0xFF	; 255
    22b0:	8c 93       	st	X, r24
    22b2:	fe 01       	movw	r30, r28
    22b4:	ed 59       	subi	r30, 0x9D	; 157
    22b6:	ff 4f       	sbci	r31, 0xFF	; 255
    22b8:	80 81       	ld	r24, Z
    22ba:	89 30       	cpi	r24, 0x09	; 9
    22bc:	08 f4       	brcc	.+2      	; 0x22c0 <func1+0x472>
    22be:	63 cf       	rjmp	.-314    	; 0x2186 <func1+0x338>
    22c0:	80 e0       	ldi	r24, 0x00	; 0
    22c2:	90 e0       	ldi	r25, 0x00	; 0
    22c4:	aa e7       	ldi	r26, 0x7A	; 122
    22c6:	b3 e4       	ldi	r27, 0x43	; 67
    22c8:	8d ab       	std	Y+53, r24	; 0x35
    22ca:	9e ab       	std	Y+54, r25	; 0x36
    22cc:	af ab       	std	Y+55, r26	; 0x37
    22ce:	b8 af       	std	Y+56, r27	; 0x38
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    22d0:	6d a9       	ldd	r22, Y+53	; 0x35
    22d2:	7e a9       	ldd	r23, Y+54	; 0x36
    22d4:	8f a9       	ldd	r24, Y+55	; 0x37
    22d6:	98 ad       	ldd	r25, Y+56	; 0x38
    22d8:	20 e0       	ldi	r18, 0x00	; 0
    22da:	30 e0       	ldi	r19, 0x00	; 0
    22dc:	4a ef       	ldi	r20, 0xFA	; 250
    22de:	54 e4       	ldi	r21, 0x44	; 68
    22e0:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
    22e4:	dc 01       	movw	r26, r24
    22e6:	cb 01       	movw	r24, r22
    22e8:	89 ab       	std	Y+49, r24	; 0x31
    22ea:	9a ab       	std	Y+50, r25	; 0x32
    22ec:	ab ab       	std	Y+51, r26	; 0x33
    22ee:	bc ab       	std	Y+52, r27	; 0x34
	if (__tmp < 1.0)
    22f0:	69 a9       	ldd	r22, Y+49	; 0x31
    22f2:	7a a9       	ldd	r23, Y+50	; 0x32
    22f4:	8b a9       	ldd	r24, Y+51	; 0x33
    22f6:	9c a9       	ldd	r25, Y+52	; 0x34
    22f8:	20 e0       	ldi	r18, 0x00	; 0
    22fa:	30 e0       	ldi	r19, 0x00	; 0
    22fc:	40 e8       	ldi	r20, 0x80	; 128
    22fe:	5f e3       	ldi	r21, 0x3F	; 63
    2300:	0e 94 71 03 	call	0x6e2	; 0x6e2 <__ltsf2>
    2304:	88 23       	and	r24, r24
    2306:	2c f4       	brge	.+10     	; 0x2312 <func1+0x4c4>
		__ticks = 1;
    2308:	81 e0       	ldi	r24, 0x01	; 1
    230a:	90 e0       	ldi	r25, 0x00	; 0
    230c:	98 ab       	std	Y+48, r25	; 0x30
    230e:	8f a7       	std	Y+47, r24	; 0x2f
    2310:	3f c0       	rjmp	.+126    	; 0x2390 <func1+0x542>
	else if (__tmp > 65535)
    2312:	69 a9       	ldd	r22, Y+49	; 0x31
    2314:	7a a9       	ldd	r23, Y+50	; 0x32
    2316:	8b a9       	ldd	r24, Y+51	; 0x33
    2318:	9c a9       	ldd	r25, Y+52	; 0x34
    231a:	20 e0       	ldi	r18, 0x00	; 0
    231c:	3f ef       	ldi	r19, 0xFF	; 255
    231e:	4f e7       	ldi	r20, 0x7F	; 127
    2320:	57 e4       	ldi	r21, 0x47	; 71
    2322:	0e 94 11 03 	call	0x622	; 0x622 <__gtsf2>
    2326:	18 16       	cp	r1, r24
    2328:	4c f5       	brge	.+82     	; 0x237c <func1+0x52e>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    232a:	6d a9       	ldd	r22, Y+53	; 0x35
    232c:	7e a9       	ldd	r23, Y+54	; 0x36
    232e:	8f a9       	ldd	r24, Y+55	; 0x37
    2330:	98 ad       	ldd	r25, Y+56	; 0x38
    2332:	20 e0       	ldi	r18, 0x00	; 0
    2334:	30 e0       	ldi	r19, 0x00	; 0
    2336:	40 e2       	ldi	r20, 0x20	; 32
    2338:	51 e4       	ldi	r21, 0x41	; 65
    233a:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
    233e:	dc 01       	movw	r26, r24
    2340:	cb 01       	movw	r24, r22
    2342:	bc 01       	movw	r22, r24
    2344:	cd 01       	movw	r24, r26
    2346:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
    234a:	dc 01       	movw	r26, r24
    234c:	cb 01       	movw	r24, r22
    234e:	98 ab       	std	Y+48, r25	; 0x30
    2350:	8f a7       	std	Y+47, r24	; 0x2f
    2352:	0f c0       	rjmp	.+30     	; 0x2372 <func1+0x524>
    2354:	88 ec       	ldi	r24, 0xC8	; 200
    2356:	90 e0       	ldi	r25, 0x00	; 0
    2358:	9e a7       	std	Y+46, r25	; 0x2e
    235a:	8d a7       	std	Y+45, r24	; 0x2d
    235c:	8d a5       	ldd	r24, Y+45	; 0x2d
    235e:	9e a5       	ldd	r25, Y+46	; 0x2e
    2360:	01 97       	sbiw	r24, 0x01	; 1
    2362:	f1 f7       	brne	.-4      	; 0x2360 <func1+0x512>
    2364:	9e a7       	std	Y+46, r25	; 0x2e
    2366:	8d a7       	std	Y+45, r24	; 0x2d
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    2368:	8f a5       	ldd	r24, Y+47	; 0x2f
    236a:	98 a9       	ldd	r25, Y+48	; 0x30
    236c:	01 97       	sbiw	r24, 0x01	; 1
    236e:	98 ab       	std	Y+48, r25	; 0x30
    2370:	8f a7       	std	Y+47, r24	; 0x2f
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    2372:	8f a5       	ldd	r24, Y+47	; 0x2f
    2374:	98 a9       	ldd	r25, Y+48	; 0x30
    2376:	00 97       	sbiw	r24, 0x00	; 0
    2378:	69 f7       	brne	.-38     	; 0x2354 <func1+0x506>
    237a:	14 c0       	rjmp	.+40     	; 0x23a4 <func1+0x556>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    237c:	69 a9       	ldd	r22, Y+49	; 0x31
    237e:	7a a9       	ldd	r23, Y+50	; 0x32
    2380:	8b a9       	ldd	r24, Y+51	; 0x33
    2382:	9c a9       	ldd	r25, Y+52	; 0x34
    2384:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
    2388:	dc 01       	movw	r26, r24
    238a:	cb 01       	movw	r24, r22
    238c:	98 ab       	std	Y+48, r25	; 0x30
    238e:	8f a7       	std	Y+47, r24	; 0x2f
    2390:	8f a5       	ldd	r24, Y+47	; 0x2f
    2392:	98 a9       	ldd	r25, Y+48	; 0x30
    2394:	9c a7       	std	Y+44, r25	; 0x2c
    2396:	8b a7       	std	Y+43, r24	; 0x2b
    2398:	8b a5       	ldd	r24, Y+43	; 0x2b
    239a:	9c a5       	ldd	r25, Y+44	; 0x2c
    239c:	01 97       	sbiw	r24, 0x01	; 1
    239e:	f1 f7       	brne	.-4      	; 0x239c <func1+0x54e>
    23a0:	9c a7       	std	Y+44, r25	; 0x2c
    23a2:	8b a7       	std	Y+43, r24	; 0x2b
            DIO_SetPinLevel(DIO_PORTB,i,DIO_HIGH);
			_delay_ms(250);
			/* code */
		}
			_delay_ms(250);
	for ( i = 7; i >=0; i--)
    23a4:	fe 01       	movw	r30, r28
    23a6:	ed 59       	subi	r30, 0x9D	; 157
    23a8:	ff 4f       	sbci	r31, 0xFF	; 255
    23aa:	87 e0       	ldi	r24, 0x07	; 7
    23ac:	80 83       	st	Z, r24
		{
			//CLR_BIT(PORTB,i);
            DIO_SetPinLevel(DIO_PORTB,i,DIO_LOW);
    23ae:	fe 01       	movw	r30, r28
    23b0:	ed 59       	subi	r30, 0x9D	; 157
    23b2:	ff 4f       	sbci	r31, 0xFF	; 255
    23b4:	81 e0       	ldi	r24, 0x01	; 1
    23b6:	60 81       	ld	r22, Z
    23b8:	40 e0       	ldi	r20, 0x00	; 0
    23ba:	0e 94 a9 08 	call	0x1152	; 0x1152 <DIO_SetPinLevel>
    23be:	80 e0       	ldi	r24, 0x00	; 0
    23c0:	90 e0       	ldi	r25, 0x00	; 0
    23c2:	aa e7       	ldi	r26, 0x7A	; 122
    23c4:	b3 e4       	ldi	r27, 0x43	; 67
    23c6:	8f a3       	std	Y+39, r24	; 0x27
    23c8:	98 a7       	std	Y+40, r25	; 0x28
    23ca:	a9 a7       	std	Y+41, r26	; 0x29
    23cc:	ba a7       	std	Y+42, r27	; 0x2a
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    23ce:	6f a1       	ldd	r22, Y+39	; 0x27
    23d0:	78 a5       	ldd	r23, Y+40	; 0x28
    23d2:	89 a5       	ldd	r24, Y+41	; 0x29
    23d4:	9a a5       	ldd	r25, Y+42	; 0x2a
    23d6:	20 e0       	ldi	r18, 0x00	; 0
    23d8:	30 e0       	ldi	r19, 0x00	; 0
    23da:	4a ef       	ldi	r20, 0xFA	; 250
    23dc:	54 e4       	ldi	r21, 0x44	; 68
    23de:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
    23e2:	dc 01       	movw	r26, r24
    23e4:	cb 01       	movw	r24, r22
    23e6:	8b a3       	std	Y+35, r24	; 0x23
    23e8:	9c a3       	std	Y+36, r25	; 0x24
    23ea:	ad a3       	std	Y+37, r26	; 0x25
    23ec:	be a3       	std	Y+38, r27	; 0x26
	if (__tmp < 1.0)
    23ee:	6b a1       	ldd	r22, Y+35	; 0x23
    23f0:	7c a1       	ldd	r23, Y+36	; 0x24
    23f2:	8d a1       	ldd	r24, Y+37	; 0x25
    23f4:	9e a1       	ldd	r25, Y+38	; 0x26
    23f6:	20 e0       	ldi	r18, 0x00	; 0
    23f8:	30 e0       	ldi	r19, 0x00	; 0
    23fa:	40 e8       	ldi	r20, 0x80	; 128
    23fc:	5f e3       	ldi	r21, 0x3F	; 63
    23fe:	0e 94 71 03 	call	0x6e2	; 0x6e2 <__ltsf2>
    2402:	88 23       	and	r24, r24
    2404:	2c f4       	brge	.+10     	; 0x2410 <func1+0x5c2>
		__ticks = 1;
    2406:	81 e0       	ldi	r24, 0x01	; 1
    2408:	90 e0       	ldi	r25, 0x00	; 0
    240a:	9a a3       	std	Y+34, r25	; 0x22
    240c:	89 a3       	std	Y+33, r24	; 0x21
    240e:	3f c0       	rjmp	.+126    	; 0x248e <func1+0x640>
	else if (__tmp > 65535)
    2410:	6b a1       	ldd	r22, Y+35	; 0x23
    2412:	7c a1       	ldd	r23, Y+36	; 0x24
    2414:	8d a1       	ldd	r24, Y+37	; 0x25
    2416:	9e a1       	ldd	r25, Y+38	; 0x26
    2418:	20 e0       	ldi	r18, 0x00	; 0
    241a:	3f ef       	ldi	r19, 0xFF	; 255
    241c:	4f e7       	ldi	r20, 0x7F	; 127
    241e:	57 e4       	ldi	r21, 0x47	; 71
    2420:	0e 94 11 03 	call	0x622	; 0x622 <__gtsf2>
    2424:	18 16       	cp	r1, r24
    2426:	4c f5       	brge	.+82     	; 0x247a <func1+0x62c>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    2428:	6f a1       	ldd	r22, Y+39	; 0x27
    242a:	78 a5       	ldd	r23, Y+40	; 0x28
    242c:	89 a5       	ldd	r24, Y+41	; 0x29
    242e:	9a a5       	ldd	r25, Y+42	; 0x2a
    2430:	20 e0       	ldi	r18, 0x00	; 0
    2432:	30 e0       	ldi	r19, 0x00	; 0
    2434:	40 e2       	ldi	r20, 0x20	; 32
    2436:	51 e4       	ldi	r21, 0x41	; 65
    2438:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
    243c:	dc 01       	movw	r26, r24
    243e:	cb 01       	movw	r24, r22
    2440:	bc 01       	movw	r22, r24
    2442:	cd 01       	movw	r24, r26
    2444:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
    2448:	dc 01       	movw	r26, r24
    244a:	cb 01       	movw	r24, r22
    244c:	9a a3       	std	Y+34, r25	; 0x22
    244e:	89 a3       	std	Y+33, r24	; 0x21
    2450:	0f c0       	rjmp	.+30     	; 0x2470 <func1+0x622>
    2452:	88 ec       	ldi	r24, 0xC8	; 200
    2454:	90 e0       	ldi	r25, 0x00	; 0
    2456:	98 a3       	std	Y+32, r25	; 0x20
    2458:	8f 8f       	std	Y+31, r24	; 0x1f
    245a:	8f 8d       	ldd	r24, Y+31	; 0x1f
    245c:	98 a1       	ldd	r25, Y+32	; 0x20
    245e:	01 97       	sbiw	r24, 0x01	; 1
    2460:	f1 f7       	brne	.-4      	; 0x245e <func1+0x610>
    2462:	98 a3       	std	Y+32, r25	; 0x20
    2464:	8f 8f       	std	Y+31, r24	; 0x1f
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    2466:	89 a1       	ldd	r24, Y+33	; 0x21
    2468:	9a a1       	ldd	r25, Y+34	; 0x22
    246a:	01 97       	sbiw	r24, 0x01	; 1
    246c:	9a a3       	std	Y+34, r25	; 0x22
    246e:	89 a3       	std	Y+33, r24	; 0x21
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    2470:	89 a1       	ldd	r24, Y+33	; 0x21
    2472:	9a a1       	ldd	r25, Y+34	; 0x22
    2474:	00 97       	sbiw	r24, 0x00	; 0
    2476:	69 f7       	brne	.-38     	; 0x2452 <func1+0x604>
    2478:	14 c0       	rjmp	.+40     	; 0x24a2 <func1+0x654>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    247a:	6b a1       	ldd	r22, Y+35	; 0x23
    247c:	7c a1       	ldd	r23, Y+36	; 0x24
    247e:	8d a1       	ldd	r24, Y+37	; 0x25
    2480:	9e a1       	ldd	r25, Y+38	; 0x26
    2482:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
    2486:	dc 01       	movw	r26, r24
    2488:	cb 01       	movw	r24, r22
    248a:	9a a3       	std	Y+34, r25	; 0x22
    248c:	89 a3       	std	Y+33, r24	; 0x21
    248e:	89 a1       	ldd	r24, Y+33	; 0x21
    2490:	9a a1       	ldd	r25, Y+34	; 0x22
    2492:	9e 8f       	std	Y+30, r25	; 0x1e
    2494:	8d 8f       	std	Y+29, r24	; 0x1d
    2496:	8d 8d       	ldd	r24, Y+29	; 0x1d
    2498:	9e 8d       	ldd	r25, Y+30	; 0x1e
    249a:	01 97       	sbiw	r24, 0x01	; 1
    249c:	f1 f7       	brne	.-4      	; 0x249a <func1+0x64c>
    249e:	9e 8f       	std	Y+30, r25	; 0x1e
    24a0:	8d 8f       	std	Y+29, r24	; 0x1d
			_delay_ms(250);
			if(i==0)
    24a2:	fe 01       	movw	r30, r28
    24a4:	ed 59       	subi	r30, 0x9D	; 157
    24a6:	ff 4f       	sbci	r31, 0xFF	; 255
    24a8:	80 81       	ld	r24, Z
    24aa:	88 23       	and	r24, r24
    24ac:	51 f0       	breq	.+20     	; 0x24c2 <func1+0x674>
            DIO_SetPinLevel(DIO_PORTB,i,DIO_HIGH);
			_delay_ms(250);
			/* code */
		}
			_delay_ms(250);
	for ( i = 7; i >=0; i--)
    24ae:	de 01       	movw	r26, r28
    24b0:	ad 59       	subi	r26, 0x9D	; 157
    24b2:	bf 4f       	sbci	r27, 0xFF	; 255
    24b4:	fe 01       	movw	r30, r28
    24b6:	ed 59       	subi	r30, 0x9D	; 157
    24b8:	ff 4f       	sbci	r31, 0xFF	; 255
    24ba:	80 81       	ld	r24, Z
    24bc:	81 50       	subi	r24, 0x01	; 1
    24be:	8c 93       	st	X, r24
    24c0:	76 cf       	rjmp	.-276    	; 0x23ae <func1+0x560>
            DIO_SetPinLevel(DIO_PORTB,i,DIO_LOW);
			_delay_ms(250);
			if(i==0)
			break;

		}
    24c2:	80 e0       	ldi	r24, 0x00	; 0
    24c4:	90 e0       	ldi	r25, 0x00	; 0
    24c6:	aa e7       	ldi	r26, 0x7A	; 122
    24c8:	b3 e4       	ldi	r27, 0x43	; 67
    24ca:	89 8f       	std	Y+25, r24	; 0x19
    24cc:	9a 8f       	std	Y+26, r25	; 0x1a
    24ce:	ab 8f       	std	Y+27, r26	; 0x1b
    24d0:	bc 8f       	std	Y+28, r27	; 0x1c
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    24d2:	69 8d       	ldd	r22, Y+25	; 0x19
    24d4:	7a 8d       	ldd	r23, Y+26	; 0x1a
    24d6:	8b 8d       	ldd	r24, Y+27	; 0x1b
    24d8:	9c 8d       	ldd	r25, Y+28	; 0x1c
    24da:	20 e0       	ldi	r18, 0x00	; 0
    24dc:	30 e0       	ldi	r19, 0x00	; 0
    24de:	4a ef       	ldi	r20, 0xFA	; 250
    24e0:	54 e4       	ldi	r21, 0x44	; 68
    24e2:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
    24e6:	dc 01       	movw	r26, r24
    24e8:	cb 01       	movw	r24, r22
    24ea:	8d 8b       	std	Y+21, r24	; 0x15
    24ec:	9e 8b       	std	Y+22, r25	; 0x16
    24ee:	af 8b       	std	Y+23, r26	; 0x17
    24f0:	b8 8f       	std	Y+24, r27	; 0x18
	if (__tmp < 1.0)
    24f2:	6d 89       	ldd	r22, Y+21	; 0x15
    24f4:	7e 89       	ldd	r23, Y+22	; 0x16
    24f6:	8f 89       	ldd	r24, Y+23	; 0x17
    24f8:	98 8d       	ldd	r25, Y+24	; 0x18
    24fa:	20 e0       	ldi	r18, 0x00	; 0
    24fc:	30 e0       	ldi	r19, 0x00	; 0
    24fe:	40 e8       	ldi	r20, 0x80	; 128
    2500:	5f e3       	ldi	r21, 0x3F	; 63
    2502:	0e 94 71 03 	call	0x6e2	; 0x6e2 <__ltsf2>
    2506:	88 23       	and	r24, r24
    2508:	2c f4       	brge	.+10     	; 0x2514 <func1+0x6c6>
		__ticks = 1;
    250a:	81 e0       	ldi	r24, 0x01	; 1
    250c:	90 e0       	ldi	r25, 0x00	; 0
    250e:	9c 8b       	std	Y+20, r25	; 0x14
    2510:	8b 8b       	std	Y+19, r24	; 0x13
    2512:	3f c0       	rjmp	.+126    	; 0x2592 <func1+0x744>
	else if (__tmp > 65535)
    2514:	6d 89       	ldd	r22, Y+21	; 0x15
    2516:	7e 89       	ldd	r23, Y+22	; 0x16
    2518:	8f 89       	ldd	r24, Y+23	; 0x17
    251a:	98 8d       	ldd	r25, Y+24	; 0x18
    251c:	20 e0       	ldi	r18, 0x00	; 0
    251e:	3f ef       	ldi	r19, 0xFF	; 255
    2520:	4f e7       	ldi	r20, 0x7F	; 127
    2522:	57 e4       	ldi	r21, 0x47	; 71
    2524:	0e 94 11 03 	call	0x622	; 0x622 <__gtsf2>
    2528:	18 16       	cp	r1, r24
    252a:	4c f5       	brge	.+82     	; 0x257e <func1+0x730>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    252c:	69 8d       	ldd	r22, Y+25	; 0x19
    252e:	7a 8d       	ldd	r23, Y+26	; 0x1a
    2530:	8b 8d       	ldd	r24, Y+27	; 0x1b
    2532:	9c 8d       	ldd	r25, Y+28	; 0x1c
    2534:	20 e0       	ldi	r18, 0x00	; 0
    2536:	30 e0       	ldi	r19, 0x00	; 0
    2538:	40 e2       	ldi	r20, 0x20	; 32
    253a:	51 e4       	ldi	r21, 0x41	; 65
    253c:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
    2540:	dc 01       	movw	r26, r24
    2542:	cb 01       	movw	r24, r22
    2544:	bc 01       	movw	r22, r24
    2546:	cd 01       	movw	r24, r26
    2548:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
    254c:	dc 01       	movw	r26, r24
    254e:	cb 01       	movw	r24, r22
    2550:	9c 8b       	std	Y+20, r25	; 0x14
    2552:	8b 8b       	std	Y+19, r24	; 0x13
    2554:	0f c0       	rjmp	.+30     	; 0x2574 <func1+0x726>
    2556:	88 ec       	ldi	r24, 0xC8	; 200
    2558:	90 e0       	ldi	r25, 0x00	; 0
    255a:	9a 8b       	std	Y+18, r25	; 0x12
    255c:	89 8b       	std	Y+17, r24	; 0x11
    255e:	89 89       	ldd	r24, Y+17	; 0x11
    2560:	9a 89       	ldd	r25, Y+18	; 0x12
    2562:	01 97       	sbiw	r24, 0x01	; 1
    2564:	f1 f7       	brne	.-4      	; 0x2562 <func1+0x714>
    2566:	9a 8b       	std	Y+18, r25	; 0x12
    2568:	89 8b       	std	Y+17, r24	; 0x11
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    256a:	8b 89       	ldd	r24, Y+19	; 0x13
    256c:	9c 89       	ldd	r25, Y+20	; 0x14
    256e:	01 97       	sbiw	r24, 0x01	; 1
    2570:	9c 8b       	std	Y+20, r25	; 0x14
    2572:	8b 8b       	std	Y+19, r24	; 0x13
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    2574:	8b 89       	ldd	r24, Y+19	; 0x13
    2576:	9c 89       	ldd	r25, Y+20	; 0x14
    2578:	00 97       	sbiw	r24, 0x00	; 0
    257a:	69 f7       	brne	.-38     	; 0x2556 <func1+0x708>
    257c:	14 c0       	rjmp	.+40     	; 0x25a6 <func1+0x758>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    257e:	6d 89       	ldd	r22, Y+21	; 0x15
    2580:	7e 89       	ldd	r23, Y+22	; 0x16
    2582:	8f 89       	ldd	r24, Y+23	; 0x17
    2584:	98 8d       	ldd	r25, Y+24	; 0x18
    2586:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
    258a:	dc 01       	movw	r26, r24
    258c:	cb 01       	movw	r24, r22
    258e:	9c 8b       	std	Y+20, r25	; 0x14
    2590:	8b 8b       	std	Y+19, r24	; 0x13
    2592:	8b 89       	ldd	r24, Y+19	; 0x13
    2594:	9c 89       	ldd	r25, Y+20	; 0x14
    2596:	98 8b       	std	Y+16, r25	; 0x10
    2598:	8f 87       	std	Y+15, r24	; 0x0f
    259a:	8f 85       	ldd	r24, Y+15	; 0x0f
    259c:	98 89       	ldd	r25, Y+16	; 0x10
    259e:	01 97       	sbiw	r24, 0x01	; 1
    25a0:	f1 f7       	brne	.-4      	; 0x259e <func1+0x750>
    25a2:	98 8b       	std	Y+16, r25	; 0x10
    25a4:	8f 87       	std	Y+15, r24	; 0x0f
			_delay_ms(250);
	for ( i = 7; i >=0; i--)
    25a6:	fe 01       	movw	r30, r28
    25a8:	ed 59       	subi	r30, 0x9D	; 157
    25aa:	ff 4f       	sbci	r31, 0xFF	; 255
    25ac:	87 e0       	ldi	r24, 0x07	; 7
    25ae:	80 83       	st	Z, r24
		{
			//CLR_BIT(PORTA,i);
            DIO_SetPinLevel(DIO_PORTA,i,DIO_LOW);
    25b0:	fe 01       	movw	r30, r28
    25b2:	ed 59       	subi	r30, 0x9D	; 157
    25b4:	ff 4f       	sbci	r31, 0xFF	; 255
    25b6:	80 e0       	ldi	r24, 0x00	; 0
    25b8:	60 81       	ld	r22, Z
    25ba:	40 e0       	ldi	r20, 0x00	; 0
    25bc:	0e 94 a9 08 	call	0x1152	; 0x1152 <DIO_SetPinLevel>
    25c0:	80 e0       	ldi	r24, 0x00	; 0
    25c2:	90 e0       	ldi	r25, 0x00	; 0
    25c4:	aa e7       	ldi	r26, 0x7A	; 122
    25c6:	b3 e4       	ldi	r27, 0x43	; 67
    25c8:	8b 87       	std	Y+11, r24	; 0x0b
    25ca:	9c 87       	std	Y+12, r25	; 0x0c
    25cc:	ad 87       	std	Y+13, r26	; 0x0d
    25ce:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    25d0:	6b 85       	ldd	r22, Y+11	; 0x0b
    25d2:	7c 85       	ldd	r23, Y+12	; 0x0c
    25d4:	8d 85       	ldd	r24, Y+13	; 0x0d
    25d6:	9e 85       	ldd	r25, Y+14	; 0x0e
    25d8:	20 e0       	ldi	r18, 0x00	; 0
    25da:	30 e0       	ldi	r19, 0x00	; 0
    25dc:	4a ef       	ldi	r20, 0xFA	; 250
    25de:	54 e4       	ldi	r21, 0x44	; 68
    25e0:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
    25e4:	dc 01       	movw	r26, r24
    25e6:	cb 01       	movw	r24, r22
    25e8:	8f 83       	std	Y+7, r24	; 0x07
    25ea:	98 87       	std	Y+8, r25	; 0x08
    25ec:	a9 87       	std	Y+9, r26	; 0x09
    25ee:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    25f0:	6f 81       	ldd	r22, Y+7	; 0x07
    25f2:	78 85       	ldd	r23, Y+8	; 0x08
    25f4:	89 85       	ldd	r24, Y+9	; 0x09
    25f6:	9a 85       	ldd	r25, Y+10	; 0x0a
    25f8:	20 e0       	ldi	r18, 0x00	; 0
    25fa:	30 e0       	ldi	r19, 0x00	; 0
    25fc:	40 e8       	ldi	r20, 0x80	; 128
    25fe:	5f e3       	ldi	r21, 0x3F	; 63
    2600:	0e 94 71 03 	call	0x6e2	; 0x6e2 <__ltsf2>
    2604:	88 23       	and	r24, r24
    2606:	2c f4       	brge	.+10     	; 0x2612 <func1+0x7c4>
		__ticks = 1;
    2608:	81 e0       	ldi	r24, 0x01	; 1
    260a:	90 e0       	ldi	r25, 0x00	; 0
    260c:	9e 83       	std	Y+6, r25	; 0x06
    260e:	8d 83       	std	Y+5, r24	; 0x05
    2610:	3f c0       	rjmp	.+126    	; 0x2690 <func1+0x842>
	else if (__tmp > 65535)
    2612:	6f 81       	ldd	r22, Y+7	; 0x07
    2614:	78 85       	ldd	r23, Y+8	; 0x08
    2616:	89 85       	ldd	r24, Y+9	; 0x09
    2618:	9a 85       	ldd	r25, Y+10	; 0x0a
    261a:	20 e0       	ldi	r18, 0x00	; 0
    261c:	3f ef       	ldi	r19, 0xFF	; 255
    261e:	4f e7       	ldi	r20, 0x7F	; 127
    2620:	57 e4       	ldi	r21, 0x47	; 71
    2622:	0e 94 11 03 	call	0x622	; 0x622 <__gtsf2>
    2626:	18 16       	cp	r1, r24
    2628:	4c f5       	brge	.+82     	; 0x267c <func1+0x82e>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    262a:	6b 85       	ldd	r22, Y+11	; 0x0b
    262c:	7c 85       	ldd	r23, Y+12	; 0x0c
    262e:	8d 85       	ldd	r24, Y+13	; 0x0d
    2630:	9e 85       	ldd	r25, Y+14	; 0x0e
    2632:	20 e0       	ldi	r18, 0x00	; 0
    2634:	30 e0       	ldi	r19, 0x00	; 0
    2636:	40 e2       	ldi	r20, 0x20	; 32
    2638:	51 e4       	ldi	r21, 0x41	; 65
    263a:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
    263e:	dc 01       	movw	r26, r24
    2640:	cb 01       	movw	r24, r22
    2642:	bc 01       	movw	r22, r24
    2644:	cd 01       	movw	r24, r26
    2646:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
    264a:	dc 01       	movw	r26, r24
    264c:	cb 01       	movw	r24, r22
    264e:	9e 83       	std	Y+6, r25	; 0x06
    2650:	8d 83       	std	Y+5, r24	; 0x05
    2652:	0f c0       	rjmp	.+30     	; 0x2672 <func1+0x824>
    2654:	88 ec       	ldi	r24, 0xC8	; 200
    2656:	90 e0       	ldi	r25, 0x00	; 0
    2658:	9c 83       	std	Y+4, r25	; 0x04
    265a:	8b 83       	std	Y+3, r24	; 0x03
    265c:	8b 81       	ldd	r24, Y+3	; 0x03
    265e:	9c 81       	ldd	r25, Y+4	; 0x04
    2660:	01 97       	sbiw	r24, 0x01	; 1
    2662:	f1 f7       	brne	.-4      	; 0x2660 <func1+0x812>
    2664:	9c 83       	std	Y+4, r25	; 0x04
    2666:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    2668:	8d 81       	ldd	r24, Y+5	; 0x05
    266a:	9e 81       	ldd	r25, Y+6	; 0x06
    266c:	01 97       	sbiw	r24, 0x01	; 1
    266e:	9e 83       	std	Y+6, r25	; 0x06
    2670:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    2672:	8d 81       	ldd	r24, Y+5	; 0x05
    2674:	9e 81       	ldd	r25, Y+6	; 0x06
    2676:	00 97       	sbiw	r24, 0x00	; 0
    2678:	69 f7       	brne	.-38     	; 0x2654 <func1+0x806>
    267a:	14 c0       	rjmp	.+40     	; 0x26a4 <func1+0x856>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    267c:	6f 81       	ldd	r22, Y+7	; 0x07
    267e:	78 85       	ldd	r23, Y+8	; 0x08
    2680:	89 85       	ldd	r24, Y+9	; 0x09
    2682:	9a 85       	ldd	r25, Y+10	; 0x0a
    2684:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
    2688:	dc 01       	movw	r26, r24
    268a:	cb 01       	movw	r24, r22
    268c:	9e 83       	std	Y+6, r25	; 0x06
    268e:	8d 83       	std	Y+5, r24	; 0x05
    2690:	8d 81       	ldd	r24, Y+5	; 0x05
    2692:	9e 81       	ldd	r25, Y+6	; 0x06
    2694:	9a 83       	std	Y+2, r25	; 0x02
    2696:	89 83       	std	Y+1, r24	; 0x01
    2698:	89 81       	ldd	r24, Y+1	; 0x01
    269a:	9a 81       	ldd	r25, Y+2	; 0x02
    269c:	01 97       	sbiw	r24, 0x01	; 1
    269e:	f1 f7       	brne	.-4      	; 0x269c <func1+0x84e>
    26a0:	9a 83       	std	Y+2, r25	; 0x02
    26a2:	89 83       	std	Y+1, r24	; 0x01
			_delay_ms(250);
			if(i==0)
    26a4:	fe 01       	movw	r30, r28
    26a6:	ed 59       	subi	r30, 0x9D	; 157
    26a8:	ff 4f       	sbci	r31, 0xFF	; 255
    26aa:	80 81       	ld	r24, Z
    26ac:	88 23       	and	r24, r24
    26ae:	51 f0       	breq	.+20     	; 0x26c4 <func1+0x876>
			if(i==0)
			break;

		}
			_delay_ms(250);
	for ( i = 7; i >=0; i--)
    26b0:	de 01       	movw	r26, r28
    26b2:	ad 59       	subi	r26, 0x9D	; 157
    26b4:	bf 4f       	sbci	r27, 0xFF	; 255
    26b6:	fe 01       	movw	r30, r28
    26b8:	ed 59       	subi	r30, 0x9D	; 157
    26ba:	ff 4f       	sbci	r31, 0xFF	; 255
    26bc:	80 81       	ld	r24, Z
    26be:	81 50       	subi	r24, 0x01	; 1
    26c0:	8c 93       	st	X, r24
    26c2:	76 cf       	rjmp	.-276    	; 0x25b0 <func1+0x762>
			/* code */
		}



}
    26c4:	cd 59       	subi	r28, 0x9D	; 157
    26c6:	df 4f       	sbci	r29, 0xFF	; 255
    26c8:	0f b6       	in	r0, 0x3f	; 63
    26ca:	f8 94       	cli
    26cc:	de bf       	out	0x3e, r29	; 62
    26ce:	0f be       	out	0x3f, r0	; 63
    26d0:	cd bf       	out	0x3d, r28	; 61
    26d2:	cf 91       	pop	r28
    26d4:	df 91       	pop	r29
    26d6:	1f 91       	pop	r17
    26d8:	0f 91       	pop	r16
    26da:	08 95       	ret

000026dc <func2>:
void func2(){
    26dc:	df 93       	push	r29
    26de:	cf 93       	push	r28
    26e0:	cd b7       	in	r28, 0x3d	; 61
    26e2:	de b7       	in	r29, 0x3e	; 62
    26e4:	e9 97       	sbiw	r28, 0x39	; 57
    26e6:	0f b6       	in	r0, 0x3f	; 63
    26e8:	f8 94       	cli
    26ea:	de bf       	out	0x3e, r29	; 62
    26ec:	0f be       	out	0x3f, r0	; 63
    26ee:	cd bf       	out	0x3d, r28	; 61
    flash();
    26f0:	0e 94 6f 0d 	call	0x1ade	; 0x1ade <flash>
	u8 i=0;
    26f4:	19 ae       	std	Y+57, r1	; 0x39
	for ( i = 0; i <=8; i++)
    26f6:	19 ae       	std	Y+57, r1	; 0x39
    26f8:	82 c0       	rjmp	.+260    	; 0x27fe <func2+0x122>
			{
				//SET_BIT(PORTA,i);
                DIO_SetPinLevel(DIO_PORTA,i,DIO_HIGH);
    26fa:	80 e0       	ldi	r24, 0x00	; 0
    26fc:	69 ad       	ldd	r22, Y+57	; 0x39
    26fe:	41 e0       	ldi	r20, 0x01	; 1
    2700:	0e 94 a9 08 	call	0x1152	; 0x1152 <DIO_SetPinLevel>
				//SET_BIT(PORTB,7-i);
                DIO_SetPinLevel(DIO_PORTB,7-i,DIO_HIGH);
    2704:	97 e0       	ldi	r25, 0x07	; 7
    2706:	89 ad       	ldd	r24, Y+57	; 0x39
    2708:	98 1b       	sub	r25, r24
    270a:	81 e0       	ldi	r24, 0x01	; 1
    270c:	69 2f       	mov	r22, r25
    270e:	41 e0       	ldi	r20, 0x01	; 1
    2710:	0e 94 a9 08 	call	0x1152	; 0x1152 <DIO_SetPinLevel>
    2714:	80 e0       	ldi	r24, 0x00	; 0
    2716:	90 e0       	ldi	r25, 0x00	; 0
    2718:	aa e7       	ldi	r26, 0x7A	; 122
    271a:	b3 e4       	ldi	r27, 0x43	; 67
    271c:	8d ab       	std	Y+53, r24	; 0x35
    271e:	9e ab       	std	Y+54, r25	; 0x36
    2720:	af ab       	std	Y+55, r26	; 0x37
    2722:	b8 af       	std	Y+56, r27	; 0x38
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    2724:	6d a9       	ldd	r22, Y+53	; 0x35
    2726:	7e a9       	ldd	r23, Y+54	; 0x36
    2728:	8f a9       	ldd	r24, Y+55	; 0x37
    272a:	98 ad       	ldd	r25, Y+56	; 0x38
    272c:	20 e0       	ldi	r18, 0x00	; 0
    272e:	30 e0       	ldi	r19, 0x00	; 0
    2730:	4a ef       	ldi	r20, 0xFA	; 250
    2732:	54 e4       	ldi	r21, 0x44	; 68
    2734:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
    2738:	dc 01       	movw	r26, r24
    273a:	cb 01       	movw	r24, r22
    273c:	89 ab       	std	Y+49, r24	; 0x31
    273e:	9a ab       	std	Y+50, r25	; 0x32
    2740:	ab ab       	std	Y+51, r26	; 0x33
    2742:	bc ab       	std	Y+52, r27	; 0x34
	if (__tmp < 1.0)
    2744:	69 a9       	ldd	r22, Y+49	; 0x31
    2746:	7a a9       	ldd	r23, Y+50	; 0x32
    2748:	8b a9       	ldd	r24, Y+51	; 0x33
    274a:	9c a9       	ldd	r25, Y+52	; 0x34
    274c:	20 e0       	ldi	r18, 0x00	; 0
    274e:	30 e0       	ldi	r19, 0x00	; 0
    2750:	40 e8       	ldi	r20, 0x80	; 128
    2752:	5f e3       	ldi	r21, 0x3F	; 63
    2754:	0e 94 71 03 	call	0x6e2	; 0x6e2 <__ltsf2>
    2758:	88 23       	and	r24, r24
    275a:	2c f4       	brge	.+10     	; 0x2766 <func2+0x8a>
		__ticks = 1;
    275c:	81 e0       	ldi	r24, 0x01	; 1
    275e:	90 e0       	ldi	r25, 0x00	; 0
    2760:	98 ab       	std	Y+48, r25	; 0x30
    2762:	8f a7       	std	Y+47, r24	; 0x2f
    2764:	3f c0       	rjmp	.+126    	; 0x27e4 <func2+0x108>
	else if (__tmp > 65535)
    2766:	69 a9       	ldd	r22, Y+49	; 0x31
    2768:	7a a9       	ldd	r23, Y+50	; 0x32
    276a:	8b a9       	ldd	r24, Y+51	; 0x33
    276c:	9c a9       	ldd	r25, Y+52	; 0x34
    276e:	20 e0       	ldi	r18, 0x00	; 0
    2770:	3f ef       	ldi	r19, 0xFF	; 255
    2772:	4f e7       	ldi	r20, 0x7F	; 127
    2774:	57 e4       	ldi	r21, 0x47	; 71
    2776:	0e 94 11 03 	call	0x622	; 0x622 <__gtsf2>
    277a:	18 16       	cp	r1, r24
    277c:	4c f5       	brge	.+82     	; 0x27d0 <func2+0xf4>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    277e:	6d a9       	ldd	r22, Y+53	; 0x35
    2780:	7e a9       	ldd	r23, Y+54	; 0x36
    2782:	8f a9       	ldd	r24, Y+55	; 0x37
    2784:	98 ad       	ldd	r25, Y+56	; 0x38
    2786:	20 e0       	ldi	r18, 0x00	; 0
    2788:	30 e0       	ldi	r19, 0x00	; 0
    278a:	40 e2       	ldi	r20, 0x20	; 32
    278c:	51 e4       	ldi	r21, 0x41	; 65
    278e:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
    2792:	dc 01       	movw	r26, r24
    2794:	cb 01       	movw	r24, r22
    2796:	bc 01       	movw	r22, r24
    2798:	cd 01       	movw	r24, r26
    279a:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
    279e:	dc 01       	movw	r26, r24
    27a0:	cb 01       	movw	r24, r22
    27a2:	98 ab       	std	Y+48, r25	; 0x30
    27a4:	8f a7       	std	Y+47, r24	; 0x2f
    27a6:	0f c0       	rjmp	.+30     	; 0x27c6 <func2+0xea>
    27a8:	88 ec       	ldi	r24, 0xC8	; 200
    27aa:	90 e0       	ldi	r25, 0x00	; 0
    27ac:	9e a7       	std	Y+46, r25	; 0x2e
    27ae:	8d a7       	std	Y+45, r24	; 0x2d
    27b0:	8d a5       	ldd	r24, Y+45	; 0x2d
    27b2:	9e a5       	ldd	r25, Y+46	; 0x2e
    27b4:	01 97       	sbiw	r24, 0x01	; 1
    27b6:	f1 f7       	brne	.-4      	; 0x27b4 <func2+0xd8>
    27b8:	9e a7       	std	Y+46, r25	; 0x2e
    27ba:	8d a7       	std	Y+45, r24	; 0x2d
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    27bc:	8f a5       	ldd	r24, Y+47	; 0x2f
    27be:	98 a9       	ldd	r25, Y+48	; 0x30
    27c0:	01 97       	sbiw	r24, 0x01	; 1
    27c2:	98 ab       	std	Y+48, r25	; 0x30
    27c4:	8f a7       	std	Y+47, r24	; 0x2f
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    27c6:	8f a5       	ldd	r24, Y+47	; 0x2f
    27c8:	98 a9       	ldd	r25, Y+48	; 0x30
    27ca:	00 97       	sbiw	r24, 0x00	; 0
    27cc:	69 f7       	brne	.-38     	; 0x27a8 <func2+0xcc>
    27ce:	14 c0       	rjmp	.+40     	; 0x27f8 <func2+0x11c>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    27d0:	69 a9       	ldd	r22, Y+49	; 0x31
    27d2:	7a a9       	ldd	r23, Y+50	; 0x32
    27d4:	8b a9       	ldd	r24, Y+51	; 0x33
    27d6:	9c a9       	ldd	r25, Y+52	; 0x34
    27d8:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
    27dc:	dc 01       	movw	r26, r24
    27de:	cb 01       	movw	r24, r22
    27e0:	98 ab       	std	Y+48, r25	; 0x30
    27e2:	8f a7       	std	Y+47, r24	; 0x2f
    27e4:	8f a5       	ldd	r24, Y+47	; 0x2f
    27e6:	98 a9       	ldd	r25, Y+48	; 0x30
    27e8:	9c a7       	std	Y+44, r25	; 0x2c
    27ea:	8b a7       	std	Y+43, r24	; 0x2b
    27ec:	8b a5       	ldd	r24, Y+43	; 0x2b
    27ee:	9c a5       	ldd	r25, Y+44	; 0x2c
    27f0:	01 97       	sbiw	r24, 0x01	; 1
    27f2:	f1 f7       	brne	.-4      	; 0x27f0 <func2+0x114>
    27f4:	9c a7       	std	Y+44, r25	; 0x2c
    27f6:	8b a7       	std	Y+43, r24	; 0x2b

}
void func2(){
    flash();
	u8 i=0;
	for ( i = 0; i <=8; i++)
    27f8:	89 ad       	ldd	r24, Y+57	; 0x39
    27fa:	8f 5f       	subi	r24, 0xFF	; 255
    27fc:	89 af       	std	Y+57, r24	; 0x39
    27fe:	89 ad       	ldd	r24, Y+57	; 0x39
    2800:	89 30       	cpi	r24, 0x09	; 9
    2802:	08 f4       	brcc	.+2      	; 0x2806 <func2+0x12a>
    2804:	7a cf       	rjmp	.-268    	; 0x26fa <func2+0x1e>
    2806:	80 e0       	ldi	r24, 0x00	; 0
    2808:	90 e0       	ldi	r25, 0x00	; 0
    280a:	aa e7       	ldi	r26, 0x7A	; 122
    280c:	b3 e4       	ldi	r27, 0x43	; 67
    280e:	8f a3       	std	Y+39, r24	; 0x27
    2810:	98 a7       	std	Y+40, r25	; 0x28
    2812:	a9 a7       	std	Y+41, r26	; 0x29
    2814:	ba a7       	std	Y+42, r27	; 0x2a
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    2816:	6f a1       	ldd	r22, Y+39	; 0x27
    2818:	78 a5       	ldd	r23, Y+40	; 0x28
    281a:	89 a5       	ldd	r24, Y+41	; 0x29
    281c:	9a a5       	ldd	r25, Y+42	; 0x2a
    281e:	20 e0       	ldi	r18, 0x00	; 0
    2820:	30 e0       	ldi	r19, 0x00	; 0
    2822:	4a ef       	ldi	r20, 0xFA	; 250
    2824:	54 e4       	ldi	r21, 0x44	; 68
    2826:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
    282a:	dc 01       	movw	r26, r24
    282c:	cb 01       	movw	r24, r22
    282e:	8b a3       	std	Y+35, r24	; 0x23
    2830:	9c a3       	std	Y+36, r25	; 0x24
    2832:	ad a3       	std	Y+37, r26	; 0x25
    2834:	be a3       	std	Y+38, r27	; 0x26
	if (__tmp < 1.0)
    2836:	6b a1       	ldd	r22, Y+35	; 0x23
    2838:	7c a1       	ldd	r23, Y+36	; 0x24
    283a:	8d a1       	ldd	r24, Y+37	; 0x25
    283c:	9e a1       	ldd	r25, Y+38	; 0x26
    283e:	20 e0       	ldi	r18, 0x00	; 0
    2840:	30 e0       	ldi	r19, 0x00	; 0
    2842:	40 e8       	ldi	r20, 0x80	; 128
    2844:	5f e3       	ldi	r21, 0x3F	; 63
    2846:	0e 94 71 03 	call	0x6e2	; 0x6e2 <__ltsf2>
    284a:	88 23       	and	r24, r24
    284c:	2c f4       	brge	.+10     	; 0x2858 <func2+0x17c>
		__ticks = 1;
    284e:	81 e0       	ldi	r24, 0x01	; 1
    2850:	90 e0       	ldi	r25, 0x00	; 0
    2852:	9a a3       	std	Y+34, r25	; 0x22
    2854:	89 a3       	std	Y+33, r24	; 0x21
    2856:	3f c0       	rjmp	.+126    	; 0x28d6 <func2+0x1fa>
	else if (__tmp > 65535)
    2858:	6b a1       	ldd	r22, Y+35	; 0x23
    285a:	7c a1       	ldd	r23, Y+36	; 0x24
    285c:	8d a1       	ldd	r24, Y+37	; 0x25
    285e:	9e a1       	ldd	r25, Y+38	; 0x26
    2860:	20 e0       	ldi	r18, 0x00	; 0
    2862:	3f ef       	ldi	r19, 0xFF	; 255
    2864:	4f e7       	ldi	r20, 0x7F	; 127
    2866:	57 e4       	ldi	r21, 0x47	; 71
    2868:	0e 94 11 03 	call	0x622	; 0x622 <__gtsf2>
    286c:	18 16       	cp	r1, r24
    286e:	4c f5       	brge	.+82     	; 0x28c2 <func2+0x1e6>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    2870:	6f a1       	ldd	r22, Y+39	; 0x27
    2872:	78 a5       	ldd	r23, Y+40	; 0x28
    2874:	89 a5       	ldd	r24, Y+41	; 0x29
    2876:	9a a5       	ldd	r25, Y+42	; 0x2a
    2878:	20 e0       	ldi	r18, 0x00	; 0
    287a:	30 e0       	ldi	r19, 0x00	; 0
    287c:	40 e2       	ldi	r20, 0x20	; 32
    287e:	51 e4       	ldi	r21, 0x41	; 65
    2880:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
    2884:	dc 01       	movw	r26, r24
    2886:	cb 01       	movw	r24, r22
    2888:	bc 01       	movw	r22, r24
    288a:	cd 01       	movw	r24, r26
    288c:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
    2890:	dc 01       	movw	r26, r24
    2892:	cb 01       	movw	r24, r22
    2894:	9a a3       	std	Y+34, r25	; 0x22
    2896:	89 a3       	std	Y+33, r24	; 0x21
    2898:	0f c0       	rjmp	.+30     	; 0x28b8 <func2+0x1dc>
    289a:	88 ec       	ldi	r24, 0xC8	; 200
    289c:	90 e0       	ldi	r25, 0x00	; 0
    289e:	98 a3       	std	Y+32, r25	; 0x20
    28a0:	8f 8f       	std	Y+31, r24	; 0x1f
    28a2:	8f 8d       	ldd	r24, Y+31	; 0x1f
    28a4:	98 a1       	ldd	r25, Y+32	; 0x20
    28a6:	01 97       	sbiw	r24, 0x01	; 1
    28a8:	f1 f7       	brne	.-4      	; 0x28a6 <func2+0x1ca>
    28aa:	98 a3       	std	Y+32, r25	; 0x20
    28ac:	8f 8f       	std	Y+31, r24	; 0x1f
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    28ae:	89 a1       	ldd	r24, Y+33	; 0x21
    28b0:	9a a1       	ldd	r25, Y+34	; 0x22
    28b2:	01 97       	sbiw	r24, 0x01	; 1
    28b4:	9a a3       	std	Y+34, r25	; 0x22
    28b6:	89 a3       	std	Y+33, r24	; 0x21
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    28b8:	89 a1       	ldd	r24, Y+33	; 0x21
    28ba:	9a a1       	ldd	r25, Y+34	; 0x22
    28bc:	00 97       	sbiw	r24, 0x00	; 0
    28be:	69 f7       	brne	.-38     	; 0x289a <func2+0x1be>
    28c0:	14 c0       	rjmp	.+40     	; 0x28ea <func2+0x20e>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    28c2:	6b a1       	ldd	r22, Y+35	; 0x23
    28c4:	7c a1       	ldd	r23, Y+36	; 0x24
    28c6:	8d a1       	ldd	r24, Y+37	; 0x25
    28c8:	9e a1       	ldd	r25, Y+38	; 0x26
    28ca:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
    28ce:	dc 01       	movw	r26, r24
    28d0:	cb 01       	movw	r24, r22
    28d2:	9a a3       	std	Y+34, r25	; 0x22
    28d4:	89 a3       	std	Y+33, r24	; 0x21
    28d6:	89 a1       	ldd	r24, Y+33	; 0x21
    28d8:	9a a1       	ldd	r25, Y+34	; 0x22
    28da:	9e 8f       	std	Y+30, r25	; 0x1e
    28dc:	8d 8f       	std	Y+29, r24	; 0x1d
    28de:	8d 8d       	ldd	r24, Y+29	; 0x1d
    28e0:	9e 8d       	ldd	r25, Y+30	; 0x1e
    28e2:	01 97       	sbiw	r24, 0x01	; 1
    28e4:	f1 f7       	brne	.-4      	; 0x28e2 <func2+0x206>
    28e6:	9e 8f       	std	Y+30, r25	; 0x1e
    28e8:	8d 8f       	std	Y+29, r24	; 0x1d
				/* code */
			}
			_delay_ms(250);


			for ( i = 7; i >=0; i--)
    28ea:	87 e0       	ldi	r24, 0x07	; 7
    28ec:	89 af       	std	Y+57, r24	; 0x39
			{

				//CLR_BIT(PORTB,7-i);
                DIO_SetPinLevel(DIO_PORTB,7-i,DIO_LOW);
    28ee:	97 e0       	ldi	r25, 0x07	; 7
    28f0:	89 ad       	ldd	r24, Y+57	; 0x39
    28f2:	98 1b       	sub	r25, r24
    28f4:	81 e0       	ldi	r24, 0x01	; 1
    28f6:	69 2f       	mov	r22, r25
    28f8:	40 e0       	ldi	r20, 0x00	; 0
    28fa:	0e 94 a9 08 	call	0x1152	; 0x1152 <DIO_SetPinLevel>
				//CLR_BIT(PORTA,i);
                DIO_SetPinLevel(DIO_PORTA,i,DIO_LOW);
    28fe:	80 e0       	ldi	r24, 0x00	; 0
    2900:	69 ad       	ldd	r22, Y+57	; 0x39
    2902:	40 e0       	ldi	r20, 0x00	; 0
    2904:	0e 94 a9 08 	call	0x1152	; 0x1152 <DIO_SetPinLevel>
    2908:	80 e0       	ldi	r24, 0x00	; 0
    290a:	90 e0       	ldi	r25, 0x00	; 0
    290c:	aa e7       	ldi	r26, 0x7A	; 122
    290e:	b3 e4       	ldi	r27, 0x43	; 67
    2910:	89 8f       	std	Y+25, r24	; 0x19
    2912:	9a 8f       	std	Y+26, r25	; 0x1a
    2914:	ab 8f       	std	Y+27, r26	; 0x1b
    2916:	bc 8f       	std	Y+28, r27	; 0x1c
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    2918:	69 8d       	ldd	r22, Y+25	; 0x19
    291a:	7a 8d       	ldd	r23, Y+26	; 0x1a
    291c:	8b 8d       	ldd	r24, Y+27	; 0x1b
    291e:	9c 8d       	ldd	r25, Y+28	; 0x1c
    2920:	20 e0       	ldi	r18, 0x00	; 0
    2922:	30 e0       	ldi	r19, 0x00	; 0
    2924:	4a ef       	ldi	r20, 0xFA	; 250
    2926:	54 e4       	ldi	r21, 0x44	; 68
    2928:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
    292c:	dc 01       	movw	r26, r24
    292e:	cb 01       	movw	r24, r22
    2930:	8d 8b       	std	Y+21, r24	; 0x15
    2932:	9e 8b       	std	Y+22, r25	; 0x16
    2934:	af 8b       	std	Y+23, r26	; 0x17
    2936:	b8 8f       	std	Y+24, r27	; 0x18
	if (__tmp < 1.0)
    2938:	6d 89       	ldd	r22, Y+21	; 0x15
    293a:	7e 89       	ldd	r23, Y+22	; 0x16
    293c:	8f 89       	ldd	r24, Y+23	; 0x17
    293e:	98 8d       	ldd	r25, Y+24	; 0x18
    2940:	20 e0       	ldi	r18, 0x00	; 0
    2942:	30 e0       	ldi	r19, 0x00	; 0
    2944:	40 e8       	ldi	r20, 0x80	; 128
    2946:	5f e3       	ldi	r21, 0x3F	; 63
    2948:	0e 94 71 03 	call	0x6e2	; 0x6e2 <__ltsf2>
    294c:	88 23       	and	r24, r24
    294e:	2c f4       	brge	.+10     	; 0x295a <func2+0x27e>
		__ticks = 1;
    2950:	81 e0       	ldi	r24, 0x01	; 1
    2952:	90 e0       	ldi	r25, 0x00	; 0
    2954:	9c 8b       	std	Y+20, r25	; 0x14
    2956:	8b 8b       	std	Y+19, r24	; 0x13
    2958:	3f c0       	rjmp	.+126    	; 0x29d8 <func2+0x2fc>
	else if (__tmp > 65535)
    295a:	6d 89       	ldd	r22, Y+21	; 0x15
    295c:	7e 89       	ldd	r23, Y+22	; 0x16
    295e:	8f 89       	ldd	r24, Y+23	; 0x17
    2960:	98 8d       	ldd	r25, Y+24	; 0x18
    2962:	20 e0       	ldi	r18, 0x00	; 0
    2964:	3f ef       	ldi	r19, 0xFF	; 255
    2966:	4f e7       	ldi	r20, 0x7F	; 127
    2968:	57 e4       	ldi	r21, 0x47	; 71
    296a:	0e 94 11 03 	call	0x622	; 0x622 <__gtsf2>
    296e:	18 16       	cp	r1, r24
    2970:	4c f5       	brge	.+82     	; 0x29c4 <func2+0x2e8>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    2972:	69 8d       	ldd	r22, Y+25	; 0x19
    2974:	7a 8d       	ldd	r23, Y+26	; 0x1a
    2976:	8b 8d       	ldd	r24, Y+27	; 0x1b
    2978:	9c 8d       	ldd	r25, Y+28	; 0x1c
    297a:	20 e0       	ldi	r18, 0x00	; 0
    297c:	30 e0       	ldi	r19, 0x00	; 0
    297e:	40 e2       	ldi	r20, 0x20	; 32
    2980:	51 e4       	ldi	r21, 0x41	; 65
    2982:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
    2986:	dc 01       	movw	r26, r24
    2988:	cb 01       	movw	r24, r22
    298a:	bc 01       	movw	r22, r24
    298c:	cd 01       	movw	r24, r26
    298e:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
    2992:	dc 01       	movw	r26, r24
    2994:	cb 01       	movw	r24, r22
    2996:	9c 8b       	std	Y+20, r25	; 0x14
    2998:	8b 8b       	std	Y+19, r24	; 0x13
    299a:	0f c0       	rjmp	.+30     	; 0x29ba <func2+0x2de>
    299c:	88 ec       	ldi	r24, 0xC8	; 200
    299e:	90 e0       	ldi	r25, 0x00	; 0
    29a0:	9a 8b       	std	Y+18, r25	; 0x12
    29a2:	89 8b       	std	Y+17, r24	; 0x11
    29a4:	89 89       	ldd	r24, Y+17	; 0x11
    29a6:	9a 89       	ldd	r25, Y+18	; 0x12
    29a8:	01 97       	sbiw	r24, 0x01	; 1
    29aa:	f1 f7       	brne	.-4      	; 0x29a8 <func2+0x2cc>
    29ac:	9a 8b       	std	Y+18, r25	; 0x12
    29ae:	89 8b       	std	Y+17, r24	; 0x11
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    29b0:	8b 89       	ldd	r24, Y+19	; 0x13
    29b2:	9c 89       	ldd	r25, Y+20	; 0x14
    29b4:	01 97       	sbiw	r24, 0x01	; 1
    29b6:	9c 8b       	std	Y+20, r25	; 0x14
    29b8:	8b 8b       	std	Y+19, r24	; 0x13
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    29ba:	8b 89       	ldd	r24, Y+19	; 0x13
    29bc:	9c 89       	ldd	r25, Y+20	; 0x14
    29be:	00 97       	sbiw	r24, 0x00	; 0
    29c0:	69 f7       	brne	.-38     	; 0x299c <func2+0x2c0>
    29c2:	14 c0       	rjmp	.+40     	; 0x29ec <func2+0x310>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    29c4:	6d 89       	ldd	r22, Y+21	; 0x15
    29c6:	7e 89       	ldd	r23, Y+22	; 0x16
    29c8:	8f 89       	ldd	r24, Y+23	; 0x17
    29ca:	98 8d       	ldd	r25, Y+24	; 0x18
    29cc:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
    29d0:	dc 01       	movw	r26, r24
    29d2:	cb 01       	movw	r24, r22
    29d4:	9c 8b       	std	Y+20, r25	; 0x14
    29d6:	8b 8b       	std	Y+19, r24	; 0x13
    29d8:	8b 89       	ldd	r24, Y+19	; 0x13
    29da:	9c 89       	ldd	r25, Y+20	; 0x14
    29dc:	98 8b       	std	Y+16, r25	; 0x10
    29de:	8f 87       	std	Y+15, r24	; 0x0f
    29e0:	8f 85       	ldd	r24, Y+15	; 0x0f
    29e2:	98 89       	ldd	r25, Y+16	; 0x10
    29e4:	01 97       	sbiw	r24, 0x01	; 1
    29e6:	f1 f7       	brne	.-4      	; 0x29e4 <func2+0x308>
    29e8:	98 8b       	std	Y+16, r25	; 0x10
    29ea:	8f 87       	std	Y+15, r24	; 0x0f
				_delay_ms(250);
				if(i==0)
    29ec:	89 ad       	ldd	r24, Y+57	; 0x39
    29ee:	88 23       	and	r24, r24
    29f0:	21 f0       	breq	.+8      	; 0x29fa <func2+0x31e>
				/* code */
			}
			_delay_ms(250);


			for ( i = 7; i >=0; i--)
    29f2:	89 ad       	ldd	r24, Y+57	; 0x39
    29f4:	81 50       	subi	r24, 0x01	; 1
    29f6:	89 af       	std	Y+57, r24	; 0x39
    29f8:	7a cf       	rjmp	.-268    	; 0x28ee <func2+0x212>
                DIO_SetPinLevel(DIO_PORTA,i,DIO_LOW);
				_delay_ms(250);
				if(i==0)
				break;
						/* code */
			}
    29fa:	80 e0       	ldi	r24, 0x00	; 0
    29fc:	90 e0       	ldi	r25, 0x00	; 0
    29fe:	aa e7       	ldi	r26, 0x7A	; 122
    2a00:	b3 e4       	ldi	r27, 0x43	; 67
    2a02:	8b 87       	std	Y+11, r24	; 0x0b
    2a04:	9c 87       	std	Y+12, r25	; 0x0c
    2a06:	ad 87       	std	Y+13, r26	; 0x0d
    2a08:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    2a0a:	6b 85       	ldd	r22, Y+11	; 0x0b
    2a0c:	7c 85       	ldd	r23, Y+12	; 0x0c
    2a0e:	8d 85       	ldd	r24, Y+13	; 0x0d
    2a10:	9e 85       	ldd	r25, Y+14	; 0x0e
    2a12:	20 e0       	ldi	r18, 0x00	; 0
    2a14:	30 e0       	ldi	r19, 0x00	; 0
    2a16:	4a ef       	ldi	r20, 0xFA	; 250
    2a18:	54 e4       	ldi	r21, 0x44	; 68
    2a1a:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
    2a1e:	dc 01       	movw	r26, r24
    2a20:	cb 01       	movw	r24, r22
    2a22:	8f 83       	std	Y+7, r24	; 0x07
    2a24:	98 87       	std	Y+8, r25	; 0x08
    2a26:	a9 87       	std	Y+9, r26	; 0x09
    2a28:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    2a2a:	6f 81       	ldd	r22, Y+7	; 0x07
    2a2c:	78 85       	ldd	r23, Y+8	; 0x08
    2a2e:	89 85       	ldd	r24, Y+9	; 0x09
    2a30:	9a 85       	ldd	r25, Y+10	; 0x0a
    2a32:	20 e0       	ldi	r18, 0x00	; 0
    2a34:	30 e0       	ldi	r19, 0x00	; 0
    2a36:	40 e8       	ldi	r20, 0x80	; 128
    2a38:	5f e3       	ldi	r21, 0x3F	; 63
    2a3a:	0e 94 71 03 	call	0x6e2	; 0x6e2 <__ltsf2>
    2a3e:	88 23       	and	r24, r24
    2a40:	2c f4       	brge	.+10     	; 0x2a4c <func2+0x370>
		__ticks = 1;
    2a42:	81 e0       	ldi	r24, 0x01	; 1
    2a44:	90 e0       	ldi	r25, 0x00	; 0
    2a46:	9e 83       	std	Y+6, r25	; 0x06
    2a48:	8d 83       	std	Y+5, r24	; 0x05
    2a4a:	3f c0       	rjmp	.+126    	; 0x2aca <func2+0x3ee>
	else if (__tmp > 65535)
    2a4c:	6f 81       	ldd	r22, Y+7	; 0x07
    2a4e:	78 85       	ldd	r23, Y+8	; 0x08
    2a50:	89 85       	ldd	r24, Y+9	; 0x09
    2a52:	9a 85       	ldd	r25, Y+10	; 0x0a
    2a54:	20 e0       	ldi	r18, 0x00	; 0
    2a56:	3f ef       	ldi	r19, 0xFF	; 255
    2a58:	4f e7       	ldi	r20, 0x7F	; 127
    2a5a:	57 e4       	ldi	r21, 0x47	; 71
    2a5c:	0e 94 11 03 	call	0x622	; 0x622 <__gtsf2>
    2a60:	18 16       	cp	r1, r24
    2a62:	4c f5       	brge	.+82     	; 0x2ab6 <func2+0x3da>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    2a64:	6b 85       	ldd	r22, Y+11	; 0x0b
    2a66:	7c 85       	ldd	r23, Y+12	; 0x0c
    2a68:	8d 85       	ldd	r24, Y+13	; 0x0d
    2a6a:	9e 85       	ldd	r25, Y+14	; 0x0e
    2a6c:	20 e0       	ldi	r18, 0x00	; 0
    2a6e:	30 e0       	ldi	r19, 0x00	; 0
    2a70:	40 e2       	ldi	r20, 0x20	; 32
    2a72:	51 e4       	ldi	r21, 0x41	; 65
    2a74:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
    2a78:	dc 01       	movw	r26, r24
    2a7a:	cb 01       	movw	r24, r22
    2a7c:	bc 01       	movw	r22, r24
    2a7e:	cd 01       	movw	r24, r26
    2a80:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
    2a84:	dc 01       	movw	r26, r24
    2a86:	cb 01       	movw	r24, r22
    2a88:	9e 83       	std	Y+6, r25	; 0x06
    2a8a:	8d 83       	std	Y+5, r24	; 0x05
    2a8c:	0f c0       	rjmp	.+30     	; 0x2aac <func2+0x3d0>
    2a8e:	88 ec       	ldi	r24, 0xC8	; 200
    2a90:	90 e0       	ldi	r25, 0x00	; 0
    2a92:	9c 83       	std	Y+4, r25	; 0x04
    2a94:	8b 83       	std	Y+3, r24	; 0x03
    2a96:	8b 81       	ldd	r24, Y+3	; 0x03
    2a98:	9c 81       	ldd	r25, Y+4	; 0x04
    2a9a:	01 97       	sbiw	r24, 0x01	; 1
    2a9c:	f1 f7       	brne	.-4      	; 0x2a9a <func2+0x3be>
    2a9e:	9c 83       	std	Y+4, r25	; 0x04
    2aa0:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    2aa2:	8d 81       	ldd	r24, Y+5	; 0x05
    2aa4:	9e 81       	ldd	r25, Y+6	; 0x06
    2aa6:	01 97       	sbiw	r24, 0x01	; 1
    2aa8:	9e 83       	std	Y+6, r25	; 0x06
    2aaa:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    2aac:	8d 81       	ldd	r24, Y+5	; 0x05
    2aae:	9e 81       	ldd	r25, Y+6	; 0x06
    2ab0:	00 97       	sbiw	r24, 0x00	; 0
    2ab2:	69 f7       	brne	.-38     	; 0x2a8e <func2+0x3b2>
    2ab4:	14 c0       	rjmp	.+40     	; 0x2ade <func2+0x402>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    2ab6:	6f 81       	ldd	r22, Y+7	; 0x07
    2ab8:	78 85       	ldd	r23, Y+8	; 0x08
    2aba:	89 85       	ldd	r24, Y+9	; 0x09
    2abc:	9a 85       	ldd	r25, Y+10	; 0x0a
    2abe:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
    2ac2:	dc 01       	movw	r26, r24
    2ac4:	cb 01       	movw	r24, r22
    2ac6:	9e 83       	std	Y+6, r25	; 0x06
    2ac8:	8d 83       	std	Y+5, r24	; 0x05
    2aca:	8d 81       	ldd	r24, Y+5	; 0x05
    2acc:	9e 81       	ldd	r25, Y+6	; 0x06
    2ace:	9a 83       	std	Y+2, r25	; 0x02
    2ad0:	89 83       	std	Y+1, r24	; 0x01
    2ad2:	89 81       	ldd	r24, Y+1	; 0x01
    2ad4:	9a 81       	ldd	r25, Y+2	; 0x02
    2ad6:	01 97       	sbiw	r24, 0x01	; 1
    2ad8:	f1 f7       	brne	.-4      	; 0x2ad6 <func2+0x3fa>
    2ada:	9a 83       	std	Y+2, r25	; 0x02
    2adc:	89 83       	std	Y+1, r24	; 0x01
			_delay_ms(250);


}
    2ade:	e9 96       	adiw	r28, 0x39	; 57
    2ae0:	0f b6       	in	r0, 0x3f	; 63
    2ae2:	f8 94       	cli
    2ae4:	de bf       	out	0x3e, r29	; 62
    2ae6:	0f be       	out	0x3f, r0	; 63
    2ae8:	cd bf       	out	0x3d, r28	; 61
    2aea:	cf 91       	pop	r28
    2aec:	df 91       	pop	r29
    2aee:	08 95       	ret

00002af0 <func3>:

void func3(){
    2af0:	0f 93       	push	r16
    2af2:	1f 93       	push	r17
    2af4:	df 93       	push	r29
    2af6:	cf 93       	push	r28
    2af8:	cd b7       	in	r28, 0x3d	; 61
    2afa:	de b7       	in	r29, 0x3e	; 62
    2afc:	c3 56       	subi	r28, 0x63	; 99
    2afe:	d0 40       	sbci	r29, 0x00	; 0
    2b00:	0f b6       	in	r0, 0x3f	; 63
    2b02:	f8 94       	cli
    2b04:	de bf       	out	0x3e, r29	; 62
    2b06:	0f be       	out	0x3f, r0	; 63
    2b08:	cd bf       	out	0x3d, r28	; 61
    flash();
    2b0a:	0e 94 6f 0d 	call	0x1ade	; 0x1ade <flash>
	u8 i=0;
    2b0e:	fe 01       	movw	r30, r28
    2b10:	ed 59       	subi	r30, 0x9D	; 157
    2b12:	ff 4f       	sbci	r31, 0xFF	; 255
    2b14:	10 82       	st	Z, r1
    for ( i = 0; i <8; i++)
    2b16:	fe 01       	movw	r30, r28
    2b18:	ed 59       	subi	r30, 0x9D	; 157
    2b1a:	ff 4f       	sbci	r31, 0xFF	; 255
    2b1c:	10 82       	st	Z, r1
    2b1e:	cc c0       	rjmp	.+408    	; 0x2cb8 <func3+0x1c8>
    {
        //SET_BIT(PORTA,i);
        DIO_SetPinLevel(DIO_PORTA,i,DIO_HIGH);
    2b20:	fe 01       	movw	r30, r28
    2b22:	ed 59       	subi	r30, 0x9D	; 157
    2b24:	ff 4f       	sbci	r31, 0xFF	; 255
    2b26:	80 e0       	ldi	r24, 0x00	; 0
    2b28:	60 81       	ld	r22, Z
    2b2a:	41 e0       	ldi	r20, 0x01	; 1
    2b2c:	0e 94 a9 08 	call	0x1152	; 0x1152 <DIO_SetPinLevel>
    2b30:	fe 01       	movw	r30, r28
    2b32:	e1 5a       	subi	r30, 0xA1	; 161
    2b34:	ff 4f       	sbci	r31, 0xFF	; 255
    2b36:	80 e0       	ldi	r24, 0x00	; 0
    2b38:	90 e0       	ldi	r25, 0x00	; 0
    2b3a:	aa e7       	ldi	r26, 0x7A	; 122
    2b3c:	b3 e4       	ldi	r27, 0x43	; 67
    2b3e:	80 83       	st	Z, r24
    2b40:	91 83       	std	Z+1, r25	; 0x01
    2b42:	a2 83       	std	Z+2, r26	; 0x02
    2b44:	b3 83       	std	Z+3, r27	; 0x03
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    2b46:	8e 01       	movw	r16, r28
    2b48:	05 5a       	subi	r16, 0xA5	; 165
    2b4a:	1f 4f       	sbci	r17, 0xFF	; 255
    2b4c:	fe 01       	movw	r30, r28
    2b4e:	e1 5a       	subi	r30, 0xA1	; 161
    2b50:	ff 4f       	sbci	r31, 0xFF	; 255
    2b52:	60 81       	ld	r22, Z
    2b54:	71 81       	ldd	r23, Z+1	; 0x01
    2b56:	82 81       	ldd	r24, Z+2	; 0x02
    2b58:	93 81       	ldd	r25, Z+3	; 0x03
    2b5a:	20 e0       	ldi	r18, 0x00	; 0
    2b5c:	30 e0       	ldi	r19, 0x00	; 0
    2b5e:	4a ef       	ldi	r20, 0xFA	; 250
    2b60:	54 e4       	ldi	r21, 0x44	; 68
    2b62:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
    2b66:	dc 01       	movw	r26, r24
    2b68:	cb 01       	movw	r24, r22
    2b6a:	f8 01       	movw	r30, r16
    2b6c:	80 83       	st	Z, r24
    2b6e:	91 83       	std	Z+1, r25	; 0x01
    2b70:	a2 83       	std	Z+2, r26	; 0x02
    2b72:	b3 83       	std	Z+3, r27	; 0x03
	if (__tmp < 1.0)
    2b74:	fe 01       	movw	r30, r28
    2b76:	e5 5a       	subi	r30, 0xA5	; 165
    2b78:	ff 4f       	sbci	r31, 0xFF	; 255
    2b7a:	60 81       	ld	r22, Z
    2b7c:	71 81       	ldd	r23, Z+1	; 0x01
    2b7e:	82 81       	ldd	r24, Z+2	; 0x02
    2b80:	93 81       	ldd	r25, Z+3	; 0x03
    2b82:	20 e0       	ldi	r18, 0x00	; 0
    2b84:	30 e0       	ldi	r19, 0x00	; 0
    2b86:	40 e8       	ldi	r20, 0x80	; 128
    2b88:	5f e3       	ldi	r21, 0x3F	; 63
    2b8a:	0e 94 71 03 	call	0x6e2	; 0x6e2 <__ltsf2>
    2b8e:	88 23       	and	r24, r24
    2b90:	44 f4       	brge	.+16     	; 0x2ba2 <func3+0xb2>
		__ticks = 1;
    2b92:	fe 01       	movw	r30, r28
    2b94:	e7 5a       	subi	r30, 0xA7	; 167
    2b96:	ff 4f       	sbci	r31, 0xFF	; 255
    2b98:	81 e0       	ldi	r24, 0x01	; 1
    2b9a:	90 e0       	ldi	r25, 0x00	; 0
    2b9c:	91 83       	std	Z+1, r25	; 0x01
    2b9e:	80 83       	st	Z, r24
    2ba0:	64 c0       	rjmp	.+200    	; 0x2c6a <func3+0x17a>
	else if (__tmp > 65535)
    2ba2:	fe 01       	movw	r30, r28
    2ba4:	e5 5a       	subi	r30, 0xA5	; 165
    2ba6:	ff 4f       	sbci	r31, 0xFF	; 255
    2ba8:	60 81       	ld	r22, Z
    2baa:	71 81       	ldd	r23, Z+1	; 0x01
    2bac:	82 81       	ldd	r24, Z+2	; 0x02
    2bae:	93 81       	ldd	r25, Z+3	; 0x03
    2bb0:	20 e0       	ldi	r18, 0x00	; 0
    2bb2:	3f ef       	ldi	r19, 0xFF	; 255
    2bb4:	4f e7       	ldi	r20, 0x7F	; 127
    2bb6:	57 e4       	ldi	r21, 0x47	; 71
    2bb8:	0e 94 11 03 	call	0x622	; 0x622 <__gtsf2>
    2bbc:	18 16       	cp	r1, r24
    2bbe:	0c f0       	brlt	.+2      	; 0x2bc2 <func3+0xd2>
    2bc0:	43 c0       	rjmp	.+134    	; 0x2c48 <func3+0x158>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    2bc2:	fe 01       	movw	r30, r28
    2bc4:	e1 5a       	subi	r30, 0xA1	; 161
    2bc6:	ff 4f       	sbci	r31, 0xFF	; 255
    2bc8:	60 81       	ld	r22, Z
    2bca:	71 81       	ldd	r23, Z+1	; 0x01
    2bcc:	82 81       	ldd	r24, Z+2	; 0x02
    2bce:	93 81       	ldd	r25, Z+3	; 0x03
    2bd0:	20 e0       	ldi	r18, 0x00	; 0
    2bd2:	30 e0       	ldi	r19, 0x00	; 0
    2bd4:	40 e2       	ldi	r20, 0x20	; 32
    2bd6:	51 e4       	ldi	r21, 0x41	; 65
    2bd8:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
    2bdc:	dc 01       	movw	r26, r24
    2bde:	cb 01       	movw	r24, r22
    2be0:	8e 01       	movw	r16, r28
    2be2:	07 5a       	subi	r16, 0xA7	; 167
    2be4:	1f 4f       	sbci	r17, 0xFF	; 255
    2be6:	bc 01       	movw	r22, r24
    2be8:	cd 01       	movw	r24, r26
    2bea:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
    2bee:	dc 01       	movw	r26, r24
    2bf0:	cb 01       	movw	r24, r22
    2bf2:	f8 01       	movw	r30, r16
    2bf4:	91 83       	std	Z+1, r25	; 0x01
    2bf6:	80 83       	st	Z, r24
    2bf8:	1f c0       	rjmp	.+62     	; 0x2c38 <func3+0x148>
    2bfa:	fe 01       	movw	r30, r28
    2bfc:	e9 5a       	subi	r30, 0xA9	; 169
    2bfe:	ff 4f       	sbci	r31, 0xFF	; 255
    2c00:	88 ec       	ldi	r24, 0xC8	; 200
    2c02:	90 e0       	ldi	r25, 0x00	; 0
    2c04:	91 83       	std	Z+1, r25	; 0x01
    2c06:	80 83       	st	Z, r24
    2c08:	fe 01       	movw	r30, r28
    2c0a:	e9 5a       	subi	r30, 0xA9	; 169
    2c0c:	ff 4f       	sbci	r31, 0xFF	; 255
    2c0e:	80 81       	ld	r24, Z
    2c10:	91 81       	ldd	r25, Z+1	; 0x01
    2c12:	01 97       	sbiw	r24, 0x01	; 1
    2c14:	f1 f7       	brne	.-4      	; 0x2c12 <func3+0x122>
    2c16:	fe 01       	movw	r30, r28
    2c18:	e9 5a       	subi	r30, 0xA9	; 169
    2c1a:	ff 4f       	sbci	r31, 0xFF	; 255
    2c1c:	91 83       	std	Z+1, r25	; 0x01
    2c1e:	80 83       	st	Z, r24
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    2c20:	de 01       	movw	r26, r28
    2c22:	a7 5a       	subi	r26, 0xA7	; 167
    2c24:	bf 4f       	sbci	r27, 0xFF	; 255
    2c26:	fe 01       	movw	r30, r28
    2c28:	e7 5a       	subi	r30, 0xA7	; 167
    2c2a:	ff 4f       	sbci	r31, 0xFF	; 255
    2c2c:	80 81       	ld	r24, Z
    2c2e:	91 81       	ldd	r25, Z+1	; 0x01
    2c30:	01 97       	sbiw	r24, 0x01	; 1
    2c32:	11 96       	adiw	r26, 0x01	; 1
    2c34:	9c 93       	st	X, r25
    2c36:	8e 93       	st	-X, r24
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    2c38:	fe 01       	movw	r30, r28
    2c3a:	e7 5a       	subi	r30, 0xA7	; 167
    2c3c:	ff 4f       	sbci	r31, 0xFF	; 255
    2c3e:	80 81       	ld	r24, Z
    2c40:	91 81       	ldd	r25, Z+1	; 0x01
    2c42:	00 97       	sbiw	r24, 0x00	; 0
    2c44:	d1 f6       	brne	.-76     	; 0x2bfa <func3+0x10a>
    2c46:	27 c0       	rjmp	.+78     	; 0x2c96 <func3+0x1a6>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    2c48:	8e 01       	movw	r16, r28
    2c4a:	07 5a       	subi	r16, 0xA7	; 167
    2c4c:	1f 4f       	sbci	r17, 0xFF	; 255
    2c4e:	fe 01       	movw	r30, r28
    2c50:	e5 5a       	subi	r30, 0xA5	; 165
    2c52:	ff 4f       	sbci	r31, 0xFF	; 255
    2c54:	60 81       	ld	r22, Z
    2c56:	71 81       	ldd	r23, Z+1	; 0x01
    2c58:	82 81       	ldd	r24, Z+2	; 0x02
    2c5a:	93 81       	ldd	r25, Z+3	; 0x03
    2c5c:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
    2c60:	dc 01       	movw	r26, r24
    2c62:	cb 01       	movw	r24, r22
    2c64:	f8 01       	movw	r30, r16
    2c66:	91 83       	std	Z+1, r25	; 0x01
    2c68:	80 83       	st	Z, r24
    2c6a:	de 01       	movw	r26, r28
    2c6c:	ab 5a       	subi	r26, 0xAB	; 171
    2c6e:	bf 4f       	sbci	r27, 0xFF	; 255
    2c70:	fe 01       	movw	r30, r28
    2c72:	e7 5a       	subi	r30, 0xA7	; 167
    2c74:	ff 4f       	sbci	r31, 0xFF	; 255
    2c76:	80 81       	ld	r24, Z
    2c78:	91 81       	ldd	r25, Z+1	; 0x01
    2c7a:	8d 93       	st	X+, r24
    2c7c:	9c 93       	st	X, r25
    2c7e:	fe 01       	movw	r30, r28
    2c80:	eb 5a       	subi	r30, 0xAB	; 171
    2c82:	ff 4f       	sbci	r31, 0xFF	; 255
    2c84:	80 81       	ld	r24, Z
    2c86:	91 81       	ldd	r25, Z+1	; 0x01
    2c88:	01 97       	sbiw	r24, 0x01	; 1
    2c8a:	f1 f7       	brne	.-4      	; 0x2c88 <func3+0x198>
    2c8c:	fe 01       	movw	r30, r28
    2c8e:	eb 5a       	subi	r30, 0xAB	; 171
    2c90:	ff 4f       	sbci	r31, 0xFF	; 255
    2c92:	91 83       	std	Z+1, r25	; 0x01
    2c94:	80 83       	st	Z, r24
        _delay_ms(250);
        //if(i!=0)
        //CLR_BIT(PORTA,i);
        DIO_SetPinLevel(DIO_PORTA,i,DIO_LOW);
    2c96:	fe 01       	movw	r30, r28
    2c98:	ed 59       	subi	r30, 0x9D	; 157
    2c9a:	ff 4f       	sbci	r31, 0xFF	; 255
    2c9c:	80 e0       	ldi	r24, 0x00	; 0
    2c9e:	60 81       	ld	r22, Z
    2ca0:	40 e0       	ldi	r20, 0x00	; 0
    2ca2:	0e 94 a9 08 	call	0x1152	; 0x1152 <DIO_SetPinLevel>
}

void func3(){
    flash();
	u8 i=0;
    for ( i = 0; i <8; i++)
    2ca6:	de 01       	movw	r26, r28
    2ca8:	ad 59       	subi	r26, 0x9D	; 157
    2caa:	bf 4f       	sbci	r27, 0xFF	; 255
    2cac:	fe 01       	movw	r30, r28
    2cae:	ed 59       	subi	r30, 0x9D	; 157
    2cb0:	ff 4f       	sbci	r31, 0xFF	; 255
    2cb2:	80 81       	ld	r24, Z
    2cb4:	8f 5f       	subi	r24, 0xFF	; 255
    2cb6:	8c 93       	st	X, r24
    2cb8:	fe 01       	movw	r30, r28
    2cba:	ed 59       	subi	r30, 0x9D	; 157
    2cbc:	ff 4f       	sbci	r31, 0xFF	; 255
    2cbe:	80 81       	ld	r24, Z
    2cc0:	88 30       	cpi	r24, 0x08	; 8
    2cc2:	08 f4       	brcc	.+2      	; 0x2cc6 <func3+0x1d6>
    2cc4:	2d cf       	rjmp	.-422    	; 0x2b20 <func3+0x30>
    2cc6:	fe 01       	movw	r30, r28
    2cc8:	ef 5a       	subi	r30, 0xAF	; 175
    2cca:	ff 4f       	sbci	r31, 0xFF	; 255
    2ccc:	80 e0       	ldi	r24, 0x00	; 0
    2cce:	90 e0       	ldi	r25, 0x00	; 0
    2cd0:	aa e7       	ldi	r26, 0x7A	; 122
    2cd2:	b3 e4       	ldi	r27, 0x43	; 67
    2cd4:	80 83       	st	Z, r24
    2cd6:	91 83       	std	Z+1, r25	; 0x01
    2cd8:	a2 83       	std	Z+2, r26	; 0x02
    2cda:	b3 83       	std	Z+3, r27	; 0x03
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    2cdc:	8e 01       	movw	r16, r28
    2cde:	03 5b       	subi	r16, 0xB3	; 179
    2ce0:	1f 4f       	sbci	r17, 0xFF	; 255
    2ce2:	fe 01       	movw	r30, r28
    2ce4:	ef 5a       	subi	r30, 0xAF	; 175
    2ce6:	ff 4f       	sbci	r31, 0xFF	; 255
    2ce8:	60 81       	ld	r22, Z
    2cea:	71 81       	ldd	r23, Z+1	; 0x01
    2cec:	82 81       	ldd	r24, Z+2	; 0x02
    2cee:	93 81       	ldd	r25, Z+3	; 0x03
    2cf0:	20 e0       	ldi	r18, 0x00	; 0
    2cf2:	30 e0       	ldi	r19, 0x00	; 0
    2cf4:	4a ef       	ldi	r20, 0xFA	; 250
    2cf6:	54 e4       	ldi	r21, 0x44	; 68
    2cf8:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
    2cfc:	dc 01       	movw	r26, r24
    2cfe:	cb 01       	movw	r24, r22
    2d00:	f8 01       	movw	r30, r16
    2d02:	80 83       	st	Z, r24
    2d04:	91 83       	std	Z+1, r25	; 0x01
    2d06:	a2 83       	std	Z+2, r26	; 0x02
    2d08:	b3 83       	std	Z+3, r27	; 0x03
	if (__tmp < 1.0)
    2d0a:	fe 01       	movw	r30, r28
    2d0c:	e3 5b       	subi	r30, 0xB3	; 179
    2d0e:	ff 4f       	sbci	r31, 0xFF	; 255
    2d10:	60 81       	ld	r22, Z
    2d12:	71 81       	ldd	r23, Z+1	; 0x01
    2d14:	82 81       	ldd	r24, Z+2	; 0x02
    2d16:	93 81       	ldd	r25, Z+3	; 0x03
    2d18:	20 e0       	ldi	r18, 0x00	; 0
    2d1a:	30 e0       	ldi	r19, 0x00	; 0
    2d1c:	40 e8       	ldi	r20, 0x80	; 128
    2d1e:	5f e3       	ldi	r21, 0x3F	; 63
    2d20:	0e 94 71 03 	call	0x6e2	; 0x6e2 <__ltsf2>
    2d24:	88 23       	and	r24, r24
    2d26:	44 f4       	brge	.+16     	; 0x2d38 <func3+0x248>
		__ticks = 1;
    2d28:	fe 01       	movw	r30, r28
    2d2a:	e5 5b       	subi	r30, 0xB5	; 181
    2d2c:	ff 4f       	sbci	r31, 0xFF	; 255
    2d2e:	81 e0       	ldi	r24, 0x01	; 1
    2d30:	90 e0       	ldi	r25, 0x00	; 0
    2d32:	91 83       	std	Z+1, r25	; 0x01
    2d34:	80 83       	st	Z, r24
    2d36:	64 c0       	rjmp	.+200    	; 0x2e00 <func3+0x310>
	else if (__tmp > 65535)
    2d38:	fe 01       	movw	r30, r28
    2d3a:	e3 5b       	subi	r30, 0xB3	; 179
    2d3c:	ff 4f       	sbci	r31, 0xFF	; 255
    2d3e:	60 81       	ld	r22, Z
    2d40:	71 81       	ldd	r23, Z+1	; 0x01
    2d42:	82 81       	ldd	r24, Z+2	; 0x02
    2d44:	93 81       	ldd	r25, Z+3	; 0x03
    2d46:	20 e0       	ldi	r18, 0x00	; 0
    2d48:	3f ef       	ldi	r19, 0xFF	; 255
    2d4a:	4f e7       	ldi	r20, 0x7F	; 127
    2d4c:	57 e4       	ldi	r21, 0x47	; 71
    2d4e:	0e 94 11 03 	call	0x622	; 0x622 <__gtsf2>
    2d52:	18 16       	cp	r1, r24
    2d54:	0c f0       	brlt	.+2      	; 0x2d58 <func3+0x268>
    2d56:	43 c0       	rjmp	.+134    	; 0x2dde <func3+0x2ee>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    2d58:	fe 01       	movw	r30, r28
    2d5a:	ef 5a       	subi	r30, 0xAF	; 175
    2d5c:	ff 4f       	sbci	r31, 0xFF	; 255
    2d5e:	60 81       	ld	r22, Z
    2d60:	71 81       	ldd	r23, Z+1	; 0x01
    2d62:	82 81       	ldd	r24, Z+2	; 0x02
    2d64:	93 81       	ldd	r25, Z+3	; 0x03
    2d66:	20 e0       	ldi	r18, 0x00	; 0
    2d68:	30 e0       	ldi	r19, 0x00	; 0
    2d6a:	40 e2       	ldi	r20, 0x20	; 32
    2d6c:	51 e4       	ldi	r21, 0x41	; 65
    2d6e:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
    2d72:	dc 01       	movw	r26, r24
    2d74:	cb 01       	movw	r24, r22
    2d76:	8e 01       	movw	r16, r28
    2d78:	05 5b       	subi	r16, 0xB5	; 181
    2d7a:	1f 4f       	sbci	r17, 0xFF	; 255
    2d7c:	bc 01       	movw	r22, r24
    2d7e:	cd 01       	movw	r24, r26
    2d80:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
    2d84:	dc 01       	movw	r26, r24
    2d86:	cb 01       	movw	r24, r22
    2d88:	f8 01       	movw	r30, r16
    2d8a:	91 83       	std	Z+1, r25	; 0x01
    2d8c:	80 83       	st	Z, r24
    2d8e:	1f c0       	rjmp	.+62     	; 0x2dce <func3+0x2de>
    2d90:	fe 01       	movw	r30, r28
    2d92:	e7 5b       	subi	r30, 0xB7	; 183
    2d94:	ff 4f       	sbci	r31, 0xFF	; 255
    2d96:	88 ec       	ldi	r24, 0xC8	; 200
    2d98:	90 e0       	ldi	r25, 0x00	; 0
    2d9a:	91 83       	std	Z+1, r25	; 0x01
    2d9c:	80 83       	st	Z, r24
    2d9e:	fe 01       	movw	r30, r28
    2da0:	e7 5b       	subi	r30, 0xB7	; 183
    2da2:	ff 4f       	sbci	r31, 0xFF	; 255
    2da4:	80 81       	ld	r24, Z
    2da6:	91 81       	ldd	r25, Z+1	; 0x01
    2da8:	01 97       	sbiw	r24, 0x01	; 1
    2daa:	f1 f7       	brne	.-4      	; 0x2da8 <func3+0x2b8>
    2dac:	fe 01       	movw	r30, r28
    2dae:	e7 5b       	subi	r30, 0xB7	; 183
    2db0:	ff 4f       	sbci	r31, 0xFF	; 255
    2db2:	91 83       	std	Z+1, r25	; 0x01
    2db4:	80 83       	st	Z, r24
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    2db6:	de 01       	movw	r26, r28
    2db8:	a5 5b       	subi	r26, 0xB5	; 181
    2dba:	bf 4f       	sbci	r27, 0xFF	; 255
    2dbc:	fe 01       	movw	r30, r28
    2dbe:	e5 5b       	subi	r30, 0xB5	; 181
    2dc0:	ff 4f       	sbci	r31, 0xFF	; 255
    2dc2:	80 81       	ld	r24, Z
    2dc4:	91 81       	ldd	r25, Z+1	; 0x01
    2dc6:	01 97       	sbiw	r24, 0x01	; 1
    2dc8:	11 96       	adiw	r26, 0x01	; 1
    2dca:	9c 93       	st	X, r25
    2dcc:	8e 93       	st	-X, r24
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    2dce:	fe 01       	movw	r30, r28
    2dd0:	e5 5b       	subi	r30, 0xB5	; 181
    2dd2:	ff 4f       	sbci	r31, 0xFF	; 255
    2dd4:	80 81       	ld	r24, Z
    2dd6:	91 81       	ldd	r25, Z+1	; 0x01
    2dd8:	00 97       	sbiw	r24, 0x00	; 0
    2dda:	d1 f6       	brne	.-76     	; 0x2d90 <func3+0x2a0>
    2ddc:	28 c0       	rjmp	.+80     	; 0x2e2e <func3+0x33e>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    2dde:	8e 01       	movw	r16, r28
    2de0:	05 5b       	subi	r16, 0xB5	; 181
    2de2:	1f 4f       	sbci	r17, 0xFF	; 255
    2de4:	fe 01       	movw	r30, r28
    2de6:	e3 5b       	subi	r30, 0xB3	; 179
    2de8:	ff 4f       	sbci	r31, 0xFF	; 255
    2dea:	60 81       	ld	r22, Z
    2dec:	71 81       	ldd	r23, Z+1	; 0x01
    2dee:	82 81       	ldd	r24, Z+2	; 0x02
    2df0:	93 81       	ldd	r25, Z+3	; 0x03
    2df2:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
    2df6:	dc 01       	movw	r26, r24
    2df8:	cb 01       	movw	r24, r22
    2dfa:	f8 01       	movw	r30, r16
    2dfc:	91 83       	std	Z+1, r25	; 0x01
    2dfe:	80 83       	st	Z, r24
    2e00:	de 01       	movw	r26, r28
    2e02:	a9 5b       	subi	r26, 0xB9	; 185
    2e04:	bf 4f       	sbci	r27, 0xFF	; 255
    2e06:	fe 01       	movw	r30, r28
    2e08:	e5 5b       	subi	r30, 0xB5	; 181
    2e0a:	ff 4f       	sbci	r31, 0xFF	; 255
    2e0c:	80 81       	ld	r24, Z
    2e0e:	91 81       	ldd	r25, Z+1	; 0x01
    2e10:	11 96       	adiw	r26, 0x01	; 1
    2e12:	9c 93       	st	X, r25
    2e14:	8e 93       	st	-X, r24
    2e16:	fe 01       	movw	r30, r28
    2e18:	e9 5b       	subi	r30, 0xB9	; 185
    2e1a:	ff 4f       	sbci	r31, 0xFF	; 255
    2e1c:	80 81       	ld	r24, Z
    2e1e:	91 81       	ldd	r25, Z+1	; 0x01
    2e20:	01 97       	sbiw	r24, 0x01	; 1
    2e22:	f1 f7       	brne	.-4      	; 0x2e20 <func3+0x330>
    2e24:	fe 01       	movw	r30, r28
    2e26:	e9 5b       	subi	r30, 0xB9	; 185
    2e28:	ff 4f       	sbci	r31, 0xFF	; 255
    2e2a:	91 83       	std	Z+1, r25	; 0x01
    2e2c:	80 83       	st	Z, r24
        //CLR_BIT(PORTA,i);
        DIO_SetPinLevel(DIO_PORTA,i,DIO_LOW);
        /* code */
    }
    _delay_ms(250);
    for ( i = 0; i <8; i++)
    2e2e:	fe 01       	movw	r30, r28
    2e30:	ed 59       	subi	r30, 0x9D	; 157
    2e32:	ff 4f       	sbci	r31, 0xFF	; 255
    2e34:	10 82       	st	Z, r1
    2e36:	9e c0       	rjmp	.+316    	; 0x2f74 <func3+0x484>
    {
        //SET_BIT(PORTB,i);
        DIO_SetPinLevel(DIO_PORTB,i,DIO_HIGH);
    2e38:	fe 01       	movw	r30, r28
    2e3a:	ed 59       	subi	r30, 0x9D	; 157
    2e3c:	ff 4f       	sbci	r31, 0xFF	; 255
    2e3e:	81 e0       	ldi	r24, 0x01	; 1
    2e40:	60 81       	ld	r22, Z
    2e42:	41 e0       	ldi	r20, 0x01	; 1
    2e44:	0e 94 a9 08 	call	0x1152	; 0x1152 <DIO_SetPinLevel>
    2e48:	fe 01       	movw	r30, r28
    2e4a:	ed 5b       	subi	r30, 0xBD	; 189
    2e4c:	ff 4f       	sbci	r31, 0xFF	; 255
    2e4e:	80 e0       	ldi	r24, 0x00	; 0
    2e50:	90 e0       	ldi	r25, 0x00	; 0
    2e52:	aa e7       	ldi	r26, 0x7A	; 122
    2e54:	b3 e4       	ldi	r27, 0x43	; 67
    2e56:	80 83       	st	Z, r24
    2e58:	91 83       	std	Z+1, r25	; 0x01
    2e5a:	a2 83       	std	Z+2, r26	; 0x02
    2e5c:	b3 83       	std	Z+3, r27	; 0x03
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    2e5e:	8e 01       	movw	r16, r28
    2e60:	01 5c       	subi	r16, 0xC1	; 193
    2e62:	1f 4f       	sbci	r17, 0xFF	; 255
    2e64:	fe 01       	movw	r30, r28
    2e66:	ed 5b       	subi	r30, 0xBD	; 189
    2e68:	ff 4f       	sbci	r31, 0xFF	; 255
    2e6a:	60 81       	ld	r22, Z
    2e6c:	71 81       	ldd	r23, Z+1	; 0x01
    2e6e:	82 81       	ldd	r24, Z+2	; 0x02
    2e70:	93 81       	ldd	r25, Z+3	; 0x03
    2e72:	20 e0       	ldi	r18, 0x00	; 0
    2e74:	30 e0       	ldi	r19, 0x00	; 0
    2e76:	4a ef       	ldi	r20, 0xFA	; 250
    2e78:	54 e4       	ldi	r21, 0x44	; 68
    2e7a:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
    2e7e:	dc 01       	movw	r26, r24
    2e80:	cb 01       	movw	r24, r22
    2e82:	f8 01       	movw	r30, r16
    2e84:	80 83       	st	Z, r24
    2e86:	91 83       	std	Z+1, r25	; 0x01
    2e88:	a2 83       	std	Z+2, r26	; 0x02
    2e8a:	b3 83       	std	Z+3, r27	; 0x03
	if (__tmp < 1.0)
    2e8c:	fe 01       	movw	r30, r28
    2e8e:	ff 96       	adiw	r30, 0x3f	; 63
    2e90:	60 81       	ld	r22, Z
    2e92:	71 81       	ldd	r23, Z+1	; 0x01
    2e94:	82 81       	ldd	r24, Z+2	; 0x02
    2e96:	93 81       	ldd	r25, Z+3	; 0x03
    2e98:	20 e0       	ldi	r18, 0x00	; 0
    2e9a:	30 e0       	ldi	r19, 0x00	; 0
    2e9c:	40 e8       	ldi	r20, 0x80	; 128
    2e9e:	5f e3       	ldi	r21, 0x3F	; 63
    2ea0:	0e 94 71 03 	call	0x6e2	; 0x6e2 <__ltsf2>
    2ea4:	88 23       	and	r24, r24
    2ea6:	2c f4       	brge	.+10     	; 0x2eb2 <func3+0x3c2>
		__ticks = 1;
    2ea8:	81 e0       	ldi	r24, 0x01	; 1
    2eaa:	90 e0       	ldi	r25, 0x00	; 0
    2eac:	9e af       	std	Y+62, r25	; 0x3e
    2eae:	8d af       	std	Y+61, r24	; 0x3d
    2eb0:	46 c0       	rjmp	.+140    	; 0x2f3e <func3+0x44e>
	else if (__tmp > 65535)
    2eb2:	fe 01       	movw	r30, r28
    2eb4:	ff 96       	adiw	r30, 0x3f	; 63
    2eb6:	60 81       	ld	r22, Z
    2eb8:	71 81       	ldd	r23, Z+1	; 0x01
    2eba:	82 81       	ldd	r24, Z+2	; 0x02
    2ebc:	93 81       	ldd	r25, Z+3	; 0x03
    2ebe:	20 e0       	ldi	r18, 0x00	; 0
    2ec0:	3f ef       	ldi	r19, 0xFF	; 255
    2ec2:	4f e7       	ldi	r20, 0x7F	; 127
    2ec4:	57 e4       	ldi	r21, 0x47	; 71
    2ec6:	0e 94 11 03 	call	0x622	; 0x622 <__gtsf2>
    2eca:	18 16       	cp	r1, r24
    2ecc:	64 f5       	brge	.+88     	; 0x2f26 <func3+0x436>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    2ece:	fe 01       	movw	r30, r28
    2ed0:	ed 5b       	subi	r30, 0xBD	; 189
    2ed2:	ff 4f       	sbci	r31, 0xFF	; 255
    2ed4:	60 81       	ld	r22, Z
    2ed6:	71 81       	ldd	r23, Z+1	; 0x01
    2ed8:	82 81       	ldd	r24, Z+2	; 0x02
    2eda:	93 81       	ldd	r25, Z+3	; 0x03
    2edc:	20 e0       	ldi	r18, 0x00	; 0
    2ede:	30 e0       	ldi	r19, 0x00	; 0
    2ee0:	40 e2       	ldi	r20, 0x20	; 32
    2ee2:	51 e4       	ldi	r21, 0x41	; 65
    2ee4:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
    2ee8:	dc 01       	movw	r26, r24
    2eea:	cb 01       	movw	r24, r22
    2eec:	bc 01       	movw	r22, r24
    2eee:	cd 01       	movw	r24, r26
    2ef0:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
    2ef4:	dc 01       	movw	r26, r24
    2ef6:	cb 01       	movw	r24, r22
    2ef8:	9e af       	std	Y+62, r25	; 0x3e
    2efa:	8d af       	std	Y+61, r24	; 0x3d
    2efc:	0f c0       	rjmp	.+30     	; 0x2f1c <func3+0x42c>
    2efe:	88 ec       	ldi	r24, 0xC8	; 200
    2f00:	90 e0       	ldi	r25, 0x00	; 0
    2f02:	9c af       	std	Y+60, r25	; 0x3c
    2f04:	8b af       	std	Y+59, r24	; 0x3b
    2f06:	8b ad       	ldd	r24, Y+59	; 0x3b
    2f08:	9c ad       	ldd	r25, Y+60	; 0x3c
    2f0a:	01 97       	sbiw	r24, 0x01	; 1
    2f0c:	f1 f7       	brne	.-4      	; 0x2f0a <func3+0x41a>
    2f0e:	9c af       	std	Y+60, r25	; 0x3c
    2f10:	8b af       	std	Y+59, r24	; 0x3b
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    2f12:	8d ad       	ldd	r24, Y+61	; 0x3d
    2f14:	9e ad       	ldd	r25, Y+62	; 0x3e
    2f16:	01 97       	sbiw	r24, 0x01	; 1
    2f18:	9e af       	std	Y+62, r25	; 0x3e
    2f1a:	8d af       	std	Y+61, r24	; 0x3d
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    2f1c:	8d ad       	ldd	r24, Y+61	; 0x3d
    2f1e:	9e ad       	ldd	r25, Y+62	; 0x3e
    2f20:	00 97       	sbiw	r24, 0x00	; 0
    2f22:	69 f7       	brne	.-38     	; 0x2efe <func3+0x40e>
    2f24:	16 c0       	rjmp	.+44     	; 0x2f52 <func3+0x462>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    2f26:	fe 01       	movw	r30, r28
    2f28:	ff 96       	adiw	r30, 0x3f	; 63
    2f2a:	60 81       	ld	r22, Z
    2f2c:	71 81       	ldd	r23, Z+1	; 0x01
    2f2e:	82 81       	ldd	r24, Z+2	; 0x02
    2f30:	93 81       	ldd	r25, Z+3	; 0x03
    2f32:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
    2f36:	dc 01       	movw	r26, r24
    2f38:	cb 01       	movw	r24, r22
    2f3a:	9e af       	std	Y+62, r25	; 0x3e
    2f3c:	8d af       	std	Y+61, r24	; 0x3d
    2f3e:	8d ad       	ldd	r24, Y+61	; 0x3d
    2f40:	9e ad       	ldd	r25, Y+62	; 0x3e
    2f42:	9a af       	std	Y+58, r25	; 0x3a
    2f44:	89 af       	std	Y+57, r24	; 0x39
    2f46:	89 ad       	ldd	r24, Y+57	; 0x39
    2f48:	9a ad       	ldd	r25, Y+58	; 0x3a
    2f4a:	01 97       	sbiw	r24, 0x01	; 1
    2f4c:	f1 f7       	brne	.-4      	; 0x2f4a <func3+0x45a>
    2f4e:	9a af       	std	Y+58, r25	; 0x3a
    2f50:	89 af       	std	Y+57, r24	; 0x39
        _delay_ms(250);
        //CLR_BIT(PORTB,i);
        DIO_SetPinLevel(DIO_PORTB,i,DIO_LOW);
    2f52:	fe 01       	movw	r30, r28
    2f54:	ed 59       	subi	r30, 0x9D	; 157
    2f56:	ff 4f       	sbci	r31, 0xFF	; 255
    2f58:	81 e0       	ldi	r24, 0x01	; 1
    2f5a:	60 81       	ld	r22, Z
    2f5c:	40 e0       	ldi	r20, 0x00	; 0
    2f5e:	0e 94 a9 08 	call	0x1152	; 0x1152 <DIO_SetPinLevel>
        //CLR_BIT(PORTA,i);
        DIO_SetPinLevel(DIO_PORTA,i,DIO_LOW);
        /* code */
    }
    _delay_ms(250);
    for ( i = 0; i <8; i++)
    2f62:	de 01       	movw	r26, r28
    2f64:	ad 59       	subi	r26, 0x9D	; 157
    2f66:	bf 4f       	sbci	r27, 0xFF	; 255
    2f68:	fe 01       	movw	r30, r28
    2f6a:	ed 59       	subi	r30, 0x9D	; 157
    2f6c:	ff 4f       	sbci	r31, 0xFF	; 255
    2f6e:	80 81       	ld	r24, Z
    2f70:	8f 5f       	subi	r24, 0xFF	; 255
    2f72:	8c 93       	st	X, r24
    2f74:	fe 01       	movw	r30, r28
    2f76:	ed 59       	subi	r30, 0x9D	; 157
    2f78:	ff 4f       	sbci	r31, 0xFF	; 255
    2f7a:	80 81       	ld	r24, Z
    2f7c:	88 30       	cpi	r24, 0x08	; 8
    2f7e:	08 f4       	brcc	.+2      	; 0x2f82 <func3+0x492>
    2f80:	5b cf       	rjmp	.-330    	; 0x2e38 <func3+0x348>
    2f82:	80 e0       	ldi	r24, 0x00	; 0
    2f84:	90 e0       	ldi	r25, 0x00	; 0
    2f86:	aa e7       	ldi	r26, 0x7A	; 122
    2f88:	b3 e4       	ldi	r27, 0x43	; 67
    2f8a:	8d ab       	std	Y+53, r24	; 0x35
    2f8c:	9e ab       	std	Y+54, r25	; 0x36
    2f8e:	af ab       	std	Y+55, r26	; 0x37
    2f90:	b8 af       	std	Y+56, r27	; 0x38
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    2f92:	6d a9       	ldd	r22, Y+53	; 0x35
    2f94:	7e a9       	ldd	r23, Y+54	; 0x36
    2f96:	8f a9       	ldd	r24, Y+55	; 0x37
    2f98:	98 ad       	ldd	r25, Y+56	; 0x38
    2f9a:	20 e0       	ldi	r18, 0x00	; 0
    2f9c:	30 e0       	ldi	r19, 0x00	; 0
    2f9e:	4a ef       	ldi	r20, 0xFA	; 250
    2fa0:	54 e4       	ldi	r21, 0x44	; 68
    2fa2:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
    2fa6:	dc 01       	movw	r26, r24
    2fa8:	cb 01       	movw	r24, r22
    2faa:	89 ab       	std	Y+49, r24	; 0x31
    2fac:	9a ab       	std	Y+50, r25	; 0x32
    2fae:	ab ab       	std	Y+51, r26	; 0x33
    2fb0:	bc ab       	std	Y+52, r27	; 0x34
	if (__tmp < 1.0)
    2fb2:	69 a9       	ldd	r22, Y+49	; 0x31
    2fb4:	7a a9       	ldd	r23, Y+50	; 0x32
    2fb6:	8b a9       	ldd	r24, Y+51	; 0x33
    2fb8:	9c a9       	ldd	r25, Y+52	; 0x34
    2fba:	20 e0       	ldi	r18, 0x00	; 0
    2fbc:	30 e0       	ldi	r19, 0x00	; 0
    2fbe:	40 e8       	ldi	r20, 0x80	; 128
    2fc0:	5f e3       	ldi	r21, 0x3F	; 63
    2fc2:	0e 94 71 03 	call	0x6e2	; 0x6e2 <__ltsf2>
    2fc6:	88 23       	and	r24, r24
    2fc8:	2c f4       	brge	.+10     	; 0x2fd4 <func3+0x4e4>
		__ticks = 1;
    2fca:	81 e0       	ldi	r24, 0x01	; 1
    2fcc:	90 e0       	ldi	r25, 0x00	; 0
    2fce:	98 ab       	std	Y+48, r25	; 0x30
    2fd0:	8f a7       	std	Y+47, r24	; 0x2f
    2fd2:	3f c0       	rjmp	.+126    	; 0x3052 <func3+0x562>
	else if (__tmp > 65535)
    2fd4:	69 a9       	ldd	r22, Y+49	; 0x31
    2fd6:	7a a9       	ldd	r23, Y+50	; 0x32
    2fd8:	8b a9       	ldd	r24, Y+51	; 0x33
    2fda:	9c a9       	ldd	r25, Y+52	; 0x34
    2fdc:	20 e0       	ldi	r18, 0x00	; 0
    2fde:	3f ef       	ldi	r19, 0xFF	; 255
    2fe0:	4f e7       	ldi	r20, 0x7F	; 127
    2fe2:	57 e4       	ldi	r21, 0x47	; 71
    2fe4:	0e 94 11 03 	call	0x622	; 0x622 <__gtsf2>
    2fe8:	18 16       	cp	r1, r24
    2fea:	4c f5       	brge	.+82     	; 0x303e <func3+0x54e>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    2fec:	6d a9       	ldd	r22, Y+53	; 0x35
    2fee:	7e a9       	ldd	r23, Y+54	; 0x36
    2ff0:	8f a9       	ldd	r24, Y+55	; 0x37
    2ff2:	98 ad       	ldd	r25, Y+56	; 0x38
    2ff4:	20 e0       	ldi	r18, 0x00	; 0
    2ff6:	30 e0       	ldi	r19, 0x00	; 0
    2ff8:	40 e2       	ldi	r20, 0x20	; 32
    2ffa:	51 e4       	ldi	r21, 0x41	; 65
    2ffc:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
    3000:	dc 01       	movw	r26, r24
    3002:	cb 01       	movw	r24, r22
    3004:	bc 01       	movw	r22, r24
    3006:	cd 01       	movw	r24, r26
    3008:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
    300c:	dc 01       	movw	r26, r24
    300e:	cb 01       	movw	r24, r22
    3010:	98 ab       	std	Y+48, r25	; 0x30
    3012:	8f a7       	std	Y+47, r24	; 0x2f
    3014:	0f c0       	rjmp	.+30     	; 0x3034 <func3+0x544>
    3016:	88 ec       	ldi	r24, 0xC8	; 200
    3018:	90 e0       	ldi	r25, 0x00	; 0
    301a:	9e a7       	std	Y+46, r25	; 0x2e
    301c:	8d a7       	std	Y+45, r24	; 0x2d
    301e:	8d a5       	ldd	r24, Y+45	; 0x2d
    3020:	9e a5       	ldd	r25, Y+46	; 0x2e
    3022:	01 97       	sbiw	r24, 0x01	; 1
    3024:	f1 f7       	brne	.-4      	; 0x3022 <func3+0x532>
    3026:	9e a7       	std	Y+46, r25	; 0x2e
    3028:	8d a7       	std	Y+45, r24	; 0x2d
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    302a:	8f a5       	ldd	r24, Y+47	; 0x2f
    302c:	98 a9       	ldd	r25, Y+48	; 0x30
    302e:	01 97       	sbiw	r24, 0x01	; 1
    3030:	98 ab       	std	Y+48, r25	; 0x30
    3032:	8f a7       	std	Y+47, r24	; 0x2f
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    3034:	8f a5       	ldd	r24, Y+47	; 0x2f
    3036:	98 a9       	ldd	r25, Y+48	; 0x30
    3038:	00 97       	sbiw	r24, 0x00	; 0
    303a:	69 f7       	brne	.-38     	; 0x3016 <func3+0x526>
    303c:	14 c0       	rjmp	.+40     	; 0x3066 <func3+0x576>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    303e:	69 a9       	ldd	r22, Y+49	; 0x31
    3040:	7a a9       	ldd	r23, Y+50	; 0x32
    3042:	8b a9       	ldd	r24, Y+51	; 0x33
    3044:	9c a9       	ldd	r25, Y+52	; 0x34
    3046:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
    304a:	dc 01       	movw	r26, r24
    304c:	cb 01       	movw	r24, r22
    304e:	98 ab       	std	Y+48, r25	; 0x30
    3050:	8f a7       	std	Y+47, r24	; 0x2f
    3052:	8f a5       	ldd	r24, Y+47	; 0x2f
    3054:	98 a9       	ldd	r25, Y+48	; 0x30
    3056:	9c a7       	std	Y+44, r25	; 0x2c
    3058:	8b a7       	std	Y+43, r24	; 0x2b
    305a:	8b a5       	ldd	r24, Y+43	; 0x2b
    305c:	9c a5       	ldd	r25, Y+44	; 0x2c
    305e:	01 97       	sbiw	r24, 0x01	; 1
    3060:	f1 f7       	brne	.-4      	; 0x305e <func3+0x56e>
    3062:	9c a7       	std	Y+44, r25	; 0x2c
    3064:	8b a7       	std	Y+43, r24	; 0x2b
        DIO_SetPinLevel(DIO_PORTB,i,DIO_LOW);
        /* code */
    }
    _delay_ms(250);

    for ( i = 7; i >=0; i--)
    3066:	fe 01       	movw	r30, r28
    3068:	ed 59       	subi	r30, 0x9D	; 157
    306a:	ff 4f       	sbci	r31, 0xFF	; 255
    306c:	87 e0       	ldi	r24, 0x07	; 7
    306e:	80 83       	st	Z, r24
    {
        //SET_BIT(PORTB,i);
        DIO_SetPinLevel(DIO_PORTB,i,DIO_HIGH);
    3070:	fe 01       	movw	r30, r28
    3072:	ed 59       	subi	r30, 0x9D	; 157
    3074:	ff 4f       	sbci	r31, 0xFF	; 255
    3076:	81 e0       	ldi	r24, 0x01	; 1
    3078:	60 81       	ld	r22, Z
    307a:	41 e0       	ldi	r20, 0x01	; 1
    307c:	0e 94 a9 08 	call	0x1152	; 0x1152 <DIO_SetPinLevel>
    3080:	80 e0       	ldi	r24, 0x00	; 0
    3082:	90 e0       	ldi	r25, 0x00	; 0
    3084:	aa e7       	ldi	r26, 0x7A	; 122
    3086:	b3 e4       	ldi	r27, 0x43	; 67
    3088:	8f a3       	std	Y+39, r24	; 0x27
    308a:	98 a7       	std	Y+40, r25	; 0x28
    308c:	a9 a7       	std	Y+41, r26	; 0x29
    308e:	ba a7       	std	Y+42, r27	; 0x2a
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    3090:	6f a1       	ldd	r22, Y+39	; 0x27
    3092:	78 a5       	ldd	r23, Y+40	; 0x28
    3094:	89 a5       	ldd	r24, Y+41	; 0x29
    3096:	9a a5       	ldd	r25, Y+42	; 0x2a
    3098:	20 e0       	ldi	r18, 0x00	; 0
    309a:	30 e0       	ldi	r19, 0x00	; 0
    309c:	4a ef       	ldi	r20, 0xFA	; 250
    309e:	54 e4       	ldi	r21, 0x44	; 68
    30a0:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
    30a4:	dc 01       	movw	r26, r24
    30a6:	cb 01       	movw	r24, r22
    30a8:	8b a3       	std	Y+35, r24	; 0x23
    30aa:	9c a3       	std	Y+36, r25	; 0x24
    30ac:	ad a3       	std	Y+37, r26	; 0x25
    30ae:	be a3       	std	Y+38, r27	; 0x26
	if (__tmp < 1.0)
    30b0:	6b a1       	ldd	r22, Y+35	; 0x23
    30b2:	7c a1       	ldd	r23, Y+36	; 0x24
    30b4:	8d a1       	ldd	r24, Y+37	; 0x25
    30b6:	9e a1       	ldd	r25, Y+38	; 0x26
    30b8:	20 e0       	ldi	r18, 0x00	; 0
    30ba:	30 e0       	ldi	r19, 0x00	; 0
    30bc:	40 e8       	ldi	r20, 0x80	; 128
    30be:	5f e3       	ldi	r21, 0x3F	; 63
    30c0:	0e 94 71 03 	call	0x6e2	; 0x6e2 <__ltsf2>
    30c4:	88 23       	and	r24, r24
    30c6:	2c f4       	brge	.+10     	; 0x30d2 <func3+0x5e2>
		__ticks = 1;
    30c8:	81 e0       	ldi	r24, 0x01	; 1
    30ca:	90 e0       	ldi	r25, 0x00	; 0
    30cc:	9a a3       	std	Y+34, r25	; 0x22
    30ce:	89 a3       	std	Y+33, r24	; 0x21
    30d0:	3f c0       	rjmp	.+126    	; 0x3150 <func3+0x660>
	else if (__tmp > 65535)
    30d2:	6b a1       	ldd	r22, Y+35	; 0x23
    30d4:	7c a1       	ldd	r23, Y+36	; 0x24
    30d6:	8d a1       	ldd	r24, Y+37	; 0x25
    30d8:	9e a1       	ldd	r25, Y+38	; 0x26
    30da:	20 e0       	ldi	r18, 0x00	; 0
    30dc:	3f ef       	ldi	r19, 0xFF	; 255
    30de:	4f e7       	ldi	r20, 0x7F	; 127
    30e0:	57 e4       	ldi	r21, 0x47	; 71
    30e2:	0e 94 11 03 	call	0x622	; 0x622 <__gtsf2>
    30e6:	18 16       	cp	r1, r24
    30e8:	4c f5       	brge	.+82     	; 0x313c <func3+0x64c>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    30ea:	6f a1       	ldd	r22, Y+39	; 0x27
    30ec:	78 a5       	ldd	r23, Y+40	; 0x28
    30ee:	89 a5       	ldd	r24, Y+41	; 0x29
    30f0:	9a a5       	ldd	r25, Y+42	; 0x2a
    30f2:	20 e0       	ldi	r18, 0x00	; 0
    30f4:	30 e0       	ldi	r19, 0x00	; 0
    30f6:	40 e2       	ldi	r20, 0x20	; 32
    30f8:	51 e4       	ldi	r21, 0x41	; 65
    30fa:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
    30fe:	dc 01       	movw	r26, r24
    3100:	cb 01       	movw	r24, r22
    3102:	bc 01       	movw	r22, r24
    3104:	cd 01       	movw	r24, r26
    3106:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
    310a:	dc 01       	movw	r26, r24
    310c:	cb 01       	movw	r24, r22
    310e:	9a a3       	std	Y+34, r25	; 0x22
    3110:	89 a3       	std	Y+33, r24	; 0x21
    3112:	0f c0       	rjmp	.+30     	; 0x3132 <func3+0x642>
    3114:	88 ec       	ldi	r24, 0xC8	; 200
    3116:	90 e0       	ldi	r25, 0x00	; 0
    3118:	98 a3       	std	Y+32, r25	; 0x20
    311a:	8f 8f       	std	Y+31, r24	; 0x1f
    311c:	8f 8d       	ldd	r24, Y+31	; 0x1f
    311e:	98 a1       	ldd	r25, Y+32	; 0x20
    3120:	01 97       	sbiw	r24, 0x01	; 1
    3122:	f1 f7       	brne	.-4      	; 0x3120 <func3+0x630>
    3124:	98 a3       	std	Y+32, r25	; 0x20
    3126:	8f 8f       	std	Y+31, r24	; 0x1f
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    3128:	89 a1       	ldd	r24, Y+33	; 0x21
    312a:	9a a1       	ldd	r25, Y+34	; 0x22
    312c:	01 97       	sbiw	r24, 0x01	; 1
    312e:	9a a3       	std	Y+34, r25	; 0x22
    3130:	89 a3       	std	Y+33, r24	; 0x21
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    3132:	89 a1       	ldd	r24, Y+33	; 0x21
    3134:	9a a1       	ldd	r25, Y+34	; 0x22
    3136:	00 97       	sbiw	r24, 0x00	; 0
    3138:	69 f7       	brne	.-38     	; 0x3114 <func3+0x624>
    313a:	14 c0       	rjmp	.+40     	; 0x3164 <func3+0x674>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    313c:	6b a1       	ldd	r22, Y+35	; 0x23
    313e:	7c a1       	ldd	r23, Y+36	; 0x24
    3140:	8d a1       	ldd	r24, Y+37	; 0x25
    3142:	9e a1       	ldd	r25, Y+38	; 0x26
    3144:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
    3148:	dc 01       	movw	r26, r24
    314a:	cb 01       	movw	r24, r22
    314c:	9a a3       	std	Y+34, r25	; 0x22
    314e:	89 a3       	std	Y+33, r24	; 0x21
    3150:	89 a1       	ldd	r24, Y+33	; 0x21
    3152:	9a a1       	ldd	r25, Y+34	; 0x22
    3154:	9e 8f       	std	Y+30, r25	; 0x1e
    3156:	8d 8f       	std	Y+29, r24	; 0x1d
    3158:	8d 8d       	ldd	r24, Y+29	; 0x1d
    315a:	9e 8d       	ldd	r25, Y+30	; 0x1e
    315c:	01 97       	sbiw	r24, 0x01	; 1
    315e:	f1 f7       	brne	.-4      	; 0x315c <func3+0x66c>
    3160:	9e 8f       	std	Y+30, r25	; 0x1e
    3162:	8d 8f       	std	Y+29, r24	; 0x1d
        _delay_ms(250);
        //CLR_BIT(PORTB,i);
        DIO_SetPinLevel(DIO_PORTB,i,DIO_LOW);
    3164:	fe 01       	movw	r30, r28
    3166:	ed 59       	subi	r30, 0x9D	; 157
    3168:	ff 4f       	sbci	r31, 0xFF	; 255
    316a:	81 e0       	ldi	r24, 0x01	; 1
    316c:	60 81       	ld	r22, Z
    316e:	40 e0       	ldi	r20, 0x00	; 0
    3170:	0e 94 a9 08 	call	0x1152	; 0x1152 <DIO_SetPinLevel>
        if(i==0)
    3174:	fe 01       	movw	r30, r28
    3176:	ed 59       	subi	r30, 0x9D	; 157
    3178:	ff 4f       	sbci	r31, 0xFF	; 255
    317a:	80 81       	ld	r24, Z
    317c:	88 23       	and	r24, r24
    317e:	51 f0       	breq	.+20     	; 0x3194 <func3+0x6a4>
        DIO_SetPinLevel(DIO_PORTB,i,DIO_LOW);
        /* code */
    }
    _delay_ms(250);

    for ( i = 7; i >=0; i--)
    3180:	de 01       	movw	r26, r28
    3182:	ad 59       	subi	r26, 0x9D	; 157
    3184:	bf 4f       	sbci	r27, 0xFF	; 255
    3186:	fe 01       	movw	r30, r28
    3188:	ed 59       	subi	r30, 0x9D	; 157
    318a:	ff 4f       	sbci	r31, 0xFF	; 255
    318c:	80 81       	ld	r24, Z
    318e:	81 50       	subi	r24, 0x01	; 1
    3190:	8c 93       	st	X, r24
    3192:	6e cf       	rjmp	.-292    	; 0x3070 <func3+0x580>
        //CLR_BIT(PORTB,i);
        DIO_SetPinLevel(DIO_PORTB,i,DIO_LOW);
        if(i==0)
        break;
        /* code */
        }
    3194:	80 e0       	ldi	r24, 0x00	; 0
    3196:	90 e0       	ldi	r25, 0x00	; 0
    3198:	aa e7       	ldi	r26, 0x7A	; 122
    319a:	b3 e4       	ldi	r27, 0x43	; 67
    319c:	89 8f       	std	Y+25, r24	; 0x19
    319e:	9a 8f       	std	Y+26, r25	; 0x1a
    31a0:	ab 8f       	std	Y+27, r26	; 0x1b
    31a2:	bc 8f       	std	Y+28, r27	; 0x1c
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    31a4:	69 8d       	ldd	r22, Y+25	; 0x19
    31a6:	7a 8d       	ldd	r23, Y+26	; 0x1a
    31a8:	8b 8d       	ldd	r24, Y+27	; 0x1b
    31aa:	9c 8d       	ldd	r25, Y+28	; 0x1c
    31ac:	20 e0       	ldi	r18, 0x00	; 0
    31ae:	30 e0       	ldi	r19, 0x00	; 0
    31b0:	4a ef       	ldi	r20, 0xFA	; 250
    31b2:	54 e4       	ldi	r21, 0x44	; 68
    31b4:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
    31b8:	dc 01       	movw	r26, r24
    31ba:	cb 01       	movw	r24, r22
    31bc:	8d 8b       	std	Y+21, r24	; 0x15
    31be:	9e 8b       	std	Y+22, r25	; 0x16
    31c0:	af 8b       	std	Y+23, r26	; 0x17
    31c2:	b8 8f       	std	Y+24, r27	; 0x18
	if (__tmp < 1.0)
    31c4:	6d 89       	ldd	r22, Y+21	; 0x15
    31c6:	7e 89       	ldd	r23, Y+22	; 0x16
    31c8:	8f 89       	ldd	r24, Y+23	; 0x17
    31ca:	98 8d       	ldd	r25, Y+24	; 0x18
    31cc:	20 e0       	ldi	r18, 0x00	; 0
    31ce:	30 e0       	ldi	r19, 0x00	; 0
    31d0:	40 e8       	ldi	r20, 0x80	; 128
    31d2:	5f e3       	ldi	r21, 0x3F	; 63
    31d4:	0e 94 71 03 	call	0x6e2	; 0x6e2 <__ltsf2>
    31d8:	88 23       	and	r24, r24
    31da:	2c f4       	brge	.+10     	; 0x31e6 <func3+0x6f6>
		__ticks = 1;
    31dc:	81 e0       	ldi	r24, 0x01	; 1
    31de:	90 e0       	ldi	r25, 0x00	; 0
    31e0:	9c 8b       	std	Y+20, r25	; 0x14
    31e2:	8b 8b       	std	Y+19, r24	; 0x13
    31e4:	3f c0       	rjmp	.+126    	; 0x3264 <func3+0x774>
	else if (__tmp > 65535)
    31e6:	6d 89       	ldd	r22, Y+21	; 0x15
    31e8:	7e 89       	ldd	r23, Y+22	; 0x16
    31ea:	8f 89       	ldd	r24, Y+23	; 0x17
    31ec:	98 8d       	ldd	r25, Y+24	; 0x18
    31ee:	20 e0       	ldi	r18, 0x00	; 0
    31f0:	3f ef       	ldi	r19, 0xFF	; 255
    31f2:	4f e7       	ldi	r20, 0x7F	; 127
    31f4:	57 e4       	ldi	r21, 0x47	; 71
    31f6:	0e 94 11 03 	call	0x622	; 0x622 <__gtsf2>
    31fa:	18 16       	cp	r1, r24
    31fc:	4c f5       	brge	.+82     	; 0x3250 <func3+0x760>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    31fe:	69 8d       	ldd	r22, Y+25	; 0x19
    3200:	7a 8d       	ldd	r23, Y+26	; 0x1a
    3202:	8b 8d       	ldd	r24, Y+27	; 0x1b
    3204:	9c 8d       	ldd	r25, Y+28	; 0x1c
    3206:	20 e0       	ldi	r18, 0x00	; 0
    3208:	30 e0       	ldi	r19, 0x00	; 0
    320a:	40 e2       	ldi	r20, 0x20	; 32
    320c:	51 e4       	ldi	r21, 0x41	; 65
    320e:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
    3212:	dc 01       	movw	r26, r24
    3214:	cb 01       	movw	r24, r22
    3216:	bc 01       	movw	r22, r24
    3218:	cd 01       	movw	r24, r26
    321a:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
    321e:	dc 01       	movw	r26, r24
    3220:	cb 01       	movw	r24, r22
    3222:	9c 8b       	std	Y+20, r25	; 0x14
    3224:	8b 8b       	std	Y+19, r24	; 0x13
    3226:	0f c0       	rjmp	.+30     	; 0x3246 <func3+0x756>
    3228:	88 ec       	ldi	r24, 0xC8	; 200
    322a:	90 e0       	ldi	r25, 0x00	; 0
    322c:	9a 8b       	std	Y+18, r25	; 0x12
    322e:	89 8b       	std	Y+17, r24	; 0x11
    3230:	89 89       	ldd	r24, Y+17	; 0x11
    3232:	9a 89       	ldd	r25, Y+18	; 0x12
    3234:	01 97       	sbiw	r24, 0x01	; 1
    3236:	f1 f7       	brne	.-4      	; 0x3234 <func3+0x744>
    3238:	9a 8b       	std	Y+18, r25	; 0x12
    323a:	89 8b       	std	Y+17, r24	; 0x11
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    323c:	8b 89       	ldd	r24, Y+19	; 0x13
    323e:	9c 89       	ldd	r25, Y+20	; 0x14
    3240:	01 97       	sbiw	r24, 0x01	; 1
    3242:	9c 8b       	std	Y+20, r25	; 0x14
    3244:	8b 8b       	std	Y+19, r24	; 0x13
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    3246:	8b 89       	ldd	r24, Y+19	; 0x13
    3248:	9c 89       	ldd	r25, Y+20	; 0x14
    324a:	00 97       	sbiw	r24, 0x00	; 0
    324c:	69 f7       	brne	.-38     	; 0x3228 <func3+0x738>
    324e:	14 c0       	rjmp	.+40     	; 0x3278 <func3+0x788>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    3250:	6d 89       	ldd	r22, Y+21	; 0x15
    3252:	7e 89       	ldd	r23, Y+22	; 0x16
    3254:	8f 89       	ldd	r24, Y+23	; 0x17
    3256:	98 8d       	ldd	r25, Y+24	; 0x18
    3258:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
    325c:	dc 01       	movw	r26, r24
    325e:	cb 01       	movw	r24, r22
    3260:	9c 8b       	std	Y+20, r25	; 0x14
    3262:	8b 8b       	std	Y+19, r24	; 0x13
    3264:	8b 89       	ldd	r24, Y+19	; 0x13
    3266:	9c 89       	ldd	r25, Y+20	; 0x14
    3268:	98 8b       	std	Y+16, r25	; 0x10
    326a:	8f 87       	std	Y+15, r24	; 0x0f
    326c:	8f 85       	ldd	r24, Y+15	; 0x0f
    326e:	98 89       	ldd	r25, Y+16	; 0x10
    3270:	01 97       	sbiw	r24, 0x01	; 1
    3272:	f1 f7       	brne	.-4      	; 0x3270 <func3+0x780>
    3274:	98 8b       	std	Y+16, r25	; 0x10
    3276:	8f 87       	std	Y+15, r24	; 0x0f
        _delay_ms(250);
        for ( i = 7; i >=0; i--)
    3278:	fe 01       	movw	r30, r28
    327a:	ed 59       	subi	r30, 0x9D	; 157
    327c:	ff 4f       	sbci	r31, 0xFF	; 255
    327e:	87 e0       	ldi	r24, 0x07	; 7
    3280:	80 83       	st	Z, r24
        {
        //SET_BIT(PORTA,i);
        DIO_SetPinLevel(DIO_PORTA,i,DIO_HIGH);
    3282:	fe 01       	movw	r30, r28
    3284:	ed 59       	subi	r30, 0x9D	; 157
    3286:	ff 4f       	sbci	r31, 0xFF	; 255
    3288:	80 e0       	ldi	r24, 0x00	; 0
    328a:	60 81       	ld	r22, Z
    328c:	41 e0       	ldi	r20, 0x01	; 1
    328e:	0e 94 a9 08 	call	0x1152	; 0x1152 <DIO_SetPinLevel>
    3292:	80 e0       	ldi	r24, 0x00	; 0
    3294:	90 e0       	ldi	r25, 0x00	; 0
    3296:	aa e7       	ldi	r26, 0x7A	; 122
    3298:	b3 e4       	ldi	r27, 0x43	; 67
    329a:	8b 87       	std	Y+11, r24	; 0x0b
    329c:	9c 87       	std	Y+12, r25	; 0x0c
    329e:	ad 87       	std	Y+13, r26	; 0x0d
    32a0:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    32a2:	6b 85       	ldd	r22, Y+11	; 0x0b
    32a4:	7c 85       	ldd	r23, Y+12	; 0x0c
    32a6:	8d 85       	ldd	r24, Y+13	; 0x0d
    32a8:	9e 85       	ldd	r25, Y+14	; 0x0e
    32aa:	20 e0       	ldi	r18, 0x00	; 0
    32ac:	30 e0       	ldi	r19, 0x00	; 0
    32ae:	4a ef       	ldi	r20, 0xFA	; 250
    32b0:	54 e4       	ldi	r21, 0x44	; 68
    32b2:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
    32b6:	dc 01       	movw	r26, r24
    32b8:	cb 01       	movw	r24, r22
    32ba:	8f 83       	std	Y+7, r24	; 0x07
    32bc:	98 87       	std	Y+8, r25	; 0x08
    32be:	a9 87       	std	Y+9, r26	; 0x09
    32c0:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    32c2:	6f 81       	ldd	r22, Y+7	; 0x07
    32c4:	78 85       	ldd	r23, Y+8	; 0x08
    32c6:	89 85       	ldd	r24, Y+9	; 0x09
    32c8:	9a 85       	ldd	r25, Y+10	; 0x0a
    32ca:	20 e0       	ldi	r18, 0x00	; 0
    32cc:	30 e0       	ldi	r19, 0x00	; 0
    32ce:	40 e8       	ldi	r20, 0x80	; 128
    32d0:	5f e3       	ldi	r21, 0x3F	; 63
    32d2:	0e 94 71 03 	call	0x6e2	; 0x6e2 <__ltsf2>
    32d6:	88 23       	and	r24, r24
    32d8:	2c f4       	brge	.+10     	; 0x32e4 <func3+0x7f4>
		__ticks = 1;
    32da:	81 e0       	ldi	r24, 0x01	; 1
    32dc:	90 e0       	ldi	r25, 0x00	; 0
    32de:	9e 83       	std	Y+6, r25	; 0x06
    32e0:	8d 83       	std	Y+5, r24	; 0x05
    32e2:	3f c0       	rjmp	.+126    	; 0x3362 <func3+0x872>
	else if (__tmp > 65535)
    32e4:	6f 81       	ldd	r22, Y+7	; 0x07
    32e6:	78 85       	ldd	r23, Y+8	; 0x08
    32e8:	89 85       	ldd	r24, Y+9	; 0x09
    32ea:	9a 85       	ldd	r25, Y+10	; 0x0a
    32ec:	20 e0       	ldi	r18, 0x00	; 0
    32ee:	3f ef       	ldi	r19, 0xFF	; 255
    32f0:	4f e7       	ldi	r20, 0x7F	; 127
    32f2:	57 e4       	ldi	r21, 0x47	; 71
    32f4:	0e 94 11 03 	call	0x622	; 0x622 <__gtsf2>
    32f8:	18 16       	cp	r1, r24
    32fa:	4c f5       	brge	.+82     	; 0x334e <func3+0x85e>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    32fc:	6b 85       	ldd	r22, Y+11	; 0x0b
    32fe:	7c 85       	ldd	r23, Y+12	; 0x0c
    3300:	8d 85       	ldd	r24, Y+13	; 0x0d
    3302:	9e 85       	ldd	r25, Y+14	; 0x0e
    3304:	20 e0       	ldi	r18, 0x00	; 0
    3306:	30 e0       	ldi	r19, 0x00	; 0
    3308:	40 e2       	ldi	r20, 0x20	; 32
    330a:	51 e4       	ldi	r21, 0x41	; 65
    330c:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
    3310:	dc 01       	movw	r26, r24
    3312:	cb 01       	movw	r24, r22
    3314:	bc 01       	movw	r22, r24
    3316:	cd 01       	movw	r24, r26
    3318:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
    331c:	dc 01       	movw	r26, r24
    331e:	cb 01       	movw	r24, r22
    3320:	9e 83       	std	Y+6, r25	; 0x06
    3322:	8d 83       	std	Y+5, r24	; 0x05
    3324:	0f c0       	rjmp	.+30     	; 0x3344 <func3+0x854>
    3326:	88 ec       	ldi	r24, 0xC8	; 200
    3328:	90 e0       	ldi	r25, 0x00	; 0
    332a:	9c 83       	std	Y+4, r25	; 0x04
    332c:	8b 83       	std	Y+3, r24	; 0x03
    332e:	8b 81       	ldd	r24, Y+3	; 0x03
    3330:	9c 81       	ldd	r25, Y+4	; 0x04
    3332:	01 97       	sbiw	r24, 0x01	; 1
    3334:	f1 f7       	brne	.-4      	; 0x3332 <func3+0x842>
    3336:	9c 83       	std	Y+4, r25	; 0x04
    3338:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    333a:	8d 81       	ldd	r24, Y+5	; 0x05
    333c:	9e 81       	ldd	r25, Y+6	; 0x06
    333e:	01 97       	sbiw	r24, 0x01	; 1
    3340:	9e 83       	std	Y+6, r25	; 0x06
    3342:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    3344:	8d 81       	ldd	r24, Y+5	; 0x05
    3346:	9e 81       	ldd	r25, Y+6	; 0x06
    3348:	00 97       	sbiw	r24, 0x00	; 0
    334a:	69 f7       	brne	.-38     	; 0x3326 <func3+0x836>
    334c:	14 c0       	rjmp	.+40     	; 0x3376 <func3+0x886>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    334e:	6f 81       	ldd	r22, Y+7	; 0x07
    3350:	78 85       	ldd	r23, Y+8	; 0x08
    3352:	89 85       	ldd	r24, Y+9	; 0x09
    3354:	9a 85       	ldd	r25, Y+10	; 0x0a
    3356:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
    335a:	dc 01       	movw	r26, r24
    335c:	cb 01       	movw	r24, r22
    335e:	9e 83       	std	Y+6, r25	; 0x06
    3360:	8d 83       	std	Y+5, r24	; 0x05
    3362:	8d 81       	ldd	r24, Y+5	; 0x05
    3364:	9e 81       	ldd	r25, Y+6	; 0x06
    3366:	9a 83       	std	Y+2, r25	; 0x02
    3368:	89 83       	std	Y+1, r24	; 0x01
    336a:	89 81       	ldd	r24, Y+1	; 0x01
    336c:	9a 81       	ldd	r25, Y+2	; 0x02
    336e:	01 97       	sbiw	r24, 0x01	; 1
    3370:	f1 f7       	brne	.-4      	; 0x336e <func3+0x87e>
    3372:	9a 83       	std	Y+2, r25	; 0x02
    3374:	89 83       	std	Y+1, r24	; 0x01
        _delay_ms(250);
        //if(i!=0)
        //CLR_BIT(PORTA,i);
        DIO_SetPinLevel(DIO_PORTA,i,DIO_LOW);
    3376:	fe 01       	movw	r30, r28
    3378:	ed 59       	subi	r30, 0x9D	; 157
    337a:	ff 4f       	sbci	r31, 0xFF	; 255
    337c:	80 e0       	ldi	r24, 0x00	; 0
    337e:	60 81       	ld	r22, Z
    3380:	40 e0       	ldi	r20, 0x00	; 0
    3382:	0e 94 a9 08 	call	0x1152	; 0x1152 <DIO_SetPinLevel>
        if(i==0)
    3386:	fe 01       	movw	r30, r28
    3388:	ed 59       	subi	r30, 0x9D	; 157
    338a:	ff 4f       	sbci	r31, 0xFF	; 255
    338c:	80 81       	ld	r24, Z
    338e:	88 23       	and	r24, r24
    3390:	51 f0       	breq	.+20     	; 0x33a6 <func3+0x8b6>
        if(i==0)
        break;
        /* code */
        }
        _delay_ms(250);
        for ( i = 7; i >=0; i--)
    3392:	de 01       	movw	r26, r28
    3394:	ad 59       	subi	r26, 0x9D	; 157
    3396:	bf 4f       	sbci	r27, 0xFF	; 255
    3398:	fe 01       	movw	r30, r28
    339a:	ed 59       	subi	r30, 0x9D	; 157
    339c:	ff 4f       	sbci	r31, 0xFF	; 255
    339e:	80 81       	ld	r24, Z
    33a0:	81 50       	subi	r24, 0x01	; 1
    33a2:	8c 93       	st	X, r24
    33a4:	6e cf       	rjmp	.-292    	; 0x3282 <func3+0x792>
    }




}
    33a6:	cd 59       	subi	r28, 0x9D	; 157
    33a8:	df 4f       	sbci	r29, 0xFF	; 255
    33aa:	0f b6       	in	r0, 0x3f	; 63
    33ac:	f8 94       	cli
    33ae:	de bf       	out	0x3e, r29	; 62
    33b0:	0f be       	out	0x3f, r0	; 63
    33b2:	cd bf       	out	0x3d, r28	; 61
    33b4:	cf 91       	pop	r28
    33b6:	df 91       	pop	r29
    33b8:	1f 91       	pop	r17
    33ba:	0f 91       	pop	r16
    33bc:	08 95       	ret

000033be <countup>:
void countup(){
    33be:	df 93       	push	r29
    33c0:	cf 93       	push	r28
    33c2:	cd b7       	in	r28, 0x3d	; 61
    33c4:	de b7       	in	r29, 0x3e	; 62
    33c6:	a2 97       	sbiw	r28, 0x22	; 34
    33c8:	0f b6       	in	r0, 0x3f	; 63
    33ca:	f8 94       	cli
    33cc:	de bf       	out	0x3e, r29	; 62
    33ce:	0f be       	out	0x3f, r0	; 63
    33d0:	cd bf       	out	0x3d, r28	; 61
    u8 i;
    u8 j;
    u32 k;
    for ( i = 0; i <= 9; i++)
    33d2:	1a a2       	std	Y+34, r1	; 0x22
    33d4:	32 c1       	rjmp	.+612    	; 0x363a <countup+0x27c>
    {
        DIO_SetPinLevel(DIO_PORTC,DIO_PIN1,DIO_HIGH);
    33d6:	82 e0       	ldi	r24, 0x02	; 2
    33d8:	61 e0       	ldi	r22, 0x01	; 1
    33da:	41 e0       	ldi	r20, 0x01	; 1
    33dc:	0e 94 a9 08 	call	0x1152	; 0x1152 <DIO_SetPinLevel>
        SSD_Write(i);
    33e0:	8a a1       	ldd	r24, Y+34	; 0x22
    33e2:	0e 94 7a 0b 	call	0x16f4	; 0x16f4 <SSD_Write>
        //_delay_ms(500);
        DIO_SetPinLevel(DIO_PORTC,DIO_PIN1,DIO_LOW);
    33e6:	82 e0       	ldi	r24, 0x02	; 2
    33e8:	61 e0       	ldi	r22, 0x01	; 1
    33ea:	40 e0       	ldi	r20, 0x00	; 0
    33ec:	0e 94 a9 08 	call	0x1152	; 0x1152 <DIO_SetPinLevel>
        for ( j = 0; j <= 9; j++)
    33f0:	19 a2       	std	Y+33, r1	; 0x21
    33f2:	0f c1       	rjmp	.+542    	; 0x3612 <countup+0x254>
        {   
            for (u32 k = 0; k < 100; k++)
    33f4:	1e 8e       	std	Y+30, r1	; 0x1e
    33f6:	1d 8e       	std	Y+29, r1	; 0x1d
    33f8:	03 c1       	rjmp	.+518    	; 0x3600 <countup+0x242>
            {
                /* code */
            
            
            DIO_SetPinLevel(DIO_PORTC,DIO_PIN1,DIO_HIGH);
    33fa:	82 e0       	ldi	r24, 0x02	; 2
    33fc:	61 e0       	ldi	r22, 0x01	; 1
    33fe:	41 e0       	ldi	r20, 0x01	; 1
    3400:	0e 94 a9 08 	call	0x1152	; 0x1152 <DIO_SetPinLevel>
            SSD_Write(i);
    3404:	8a a1       	ldd	r24, Y+34	; 0x22
    3406:	0e 94 7a 0b 	call	0x16f4	; 0x16f4 <SSD_Write>
    340a:	80 e0       	ldi	r24, 0x00	; 0
    340c:	90 e0       	ldi	r25, 0x00	; 0
    340e:	a0 e4       	ldi	r26, 0x40	; 64
    3410:	b0 e4       	ldi	r27, 0x40	; 64
    3412:	89 8f       	std	Y+25, r24	; 0x19
    3414:	9a 8f       	std	Y+26, r25	; 0x1a
    3416:	ab 8f       	std	Y+27, r26	; 0x1b
    3418:	bc 8f       	std	Y+28, r27	; 0x1c
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    341a:	69 8d       	ldd	r22, Y+25	; 0x19
    341c:	7a 8d       	ldd	r23, Y+26	; 0x1a
    341e:	8b 8d       	ldd	r24, Y+27	; 0x1b
    3420:	9c 8d       	ldd	r25, Y+28	; 0x1c
    3422:	20 e0       	ldi	r18, 0x00	; 0
    3424:	30 e0       	ldi	r19, 0x00	; 0
    3426:	4a ef       	ldi	r20, 0xFA	; 250
    3428:	54 e4       	ldi	r21, 0x44	; 68
    342a:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
    342e:	dc 01       	movw	r26, r24
    3430:	cb 01       	movw	r24, r22
    3432:	8d 8b       	std	Y+21, r24	; 0x15
    3434:	9e 8b       	std	Y+22, r25	; 0x16
    3436:	af 8b       	std	Y+23, r26	; 0x17
    3438:	b8 8f       	std	Y+24, r27	; 0x18
	if (__tmp < 1.0)
    343a:	6d 89       	ldd	r22, Y+21	; 0x15
    343c:	7e 89       	ldd	r23, Y+22	; 0x16
    343e:	8f 89       	ldd	r24, Y+23	; 0x17
    3440:	98 8d       	ldd	r25, Y+24	; 0x18
    3442:	20 e0       	ldi	r18, 0x00	; 0
    3444:	30 e0       	ldi	r19, 0x00	; 0
    3446:	40 e8       	ldi	r20, 0x80	; 128
    3448:	5f e3       	ldi	r21, 0x3F	; 63
    344a:	0e 94 71 03 	call	0x6e2	; 0x6e2 <__ltsf2>
    344e:	88 23       	and	r24, r24
    3450:	2c f4       	brge	.+10     	; 0x345c <countup+0x9e>
		__ticks = 1;
    3452:	81 e0       	ldi	r24, 0x01	; 1
    3454:	90 e0       	ldi	r25, 0x00	; 0
    3456:	9c 8b       	std	Y+20, r25	; 0x14
    3458:	8b 8b       	std	Y+19, r24	; 0x13
    345a:	3f c0       	rjmp	.+126    	; 0x34da <countup+0x11c>
	else if (__tmp > 65535)
    345c:	6d 89       	ldd	r22, Y+21	; 0x15
    345e:	7e 89       	ldd	r23, Y+22	; 0x16
    3460:	8f 89       	ldd	r24, Y+23	; 0x17
    3462:	98 8d       	ldd	r25, Y+24	; 0x18
    3464:	20 e0       	ldi	r18, 0x00	; 0
    3466:	3f ef       	ldi	r19, 0xFF	; 255
    3468:	4f e7       	ldi	r20, 0x7F	; 127
    346a:	57 e4       	ldi	r21, 0x47	; 71
    346c:	0e 94 11 03 	call	0x622	; 0x622 <__gtsf2>
    3470:	18 16       	cp	r1, r24
    3472:	4c f5       	brge	.+82     	; 0x34c6 <countup+0x108>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    3474:	69 8d       	ldd	r22, Y+25	; 0x19
    3476:	7a 8d       	ldd	r23, Y+26	; 0x1a
    3478:	8b 8d       	ldd	r24, Y+27	; 0x1b
    347a:	9c 8d       	ldd	r25, Y+28	; 0x1c
    347c:	20 e0       	ldi	r18, 0x00	; 0
    347e:	30 e0       	ldi	r19, 0x00	; 0
    3480:	40 e2       	ldi	r20, 0x20	; 32
    3482:	51 e4       	ldi	r21, 0x41	; 65
    3484:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
    3488:	dc 01       	movw	r26, r24
    348a:	cb 01       	movw	r24, r22
    348c:	bc 01       	movw	r22, r24
    348e:	cd 01       	movw	r24, r26
    3490:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
    3494:	dc 01       	movw	r26, r24
    3496:	cb 01       	movw	r24, r22
    3498:	9c 8b       	std	Y+20, r25	; 0x14
    349a:	8b 8b       	std	Y+19, r24	; 0x13
    349c:	0f c0       	rjmp	.+30     	; 0x34bc <countup+0xfe>
    349e:	88 ec       	ldi	r24, 0xC8	; 200
    34a0:	90 e0       	ldi	r25, 0x00	; 0
    34a2:	9a 8b       	std	Y+18, r25	; 0x12
    34a4:	89 8b       	std	Y+17, r24	; 0x11
    34a6:	89 89       	ldd	r24, Y+17	; 0x11
    34a8:	9a 89       	ldd	r25, Y+18	; 0x12
    34aa:	01 97       	sbiw	r24, 0x01	; 1
    34ac:	f1 f7       	brne	.-4      	; 0x34aa <countup+0xec>
    34ae:	9a 8b       	std	Y+18, r25	; 0x12
    34b0:	89 8b       	std	Y+17, r24	; 0x11
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    34b2:	8b 89       	ldd	r24, Y+19	; 0x13
    34b4:	9c 89       	ldd	r25, Y+20	; 0x14
    34b6:	01 97       	sbiw	r24, 0x01	; 1
    34b8:	9c 8b       	std	Y+20, r25	; 0x14
    34ba:	8b 8b       	std	Y+19, r24	; 0x13
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    34bc:	8b 89       	ldd	r24, Y+19	; 0x13
    34be:	9c 89       	ldd	r25, Y+20	; 0x14
    34c0:	00 97       	sbiw	r24, 0x00	; 0
    34c2:	69 f7       	brne	.-38     	; 0x349e <countup+0xe0>
    34c4:	14 c0       	rjmp	.+40     	; 0x34ee <countup+0x130>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    34c6:	6d 89       	ldd	r22, Y+21	; 0x15
    34c8:	7e 89       	ldd	r23, Y+22	; 0x16
    34ca:	8f 89       	ldd	r24, Y+23	; 0x17
    34cc:	98 8d       	ldd	r25, Y+24	; 0x18
    34ce:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
    34d2:	dc 01       	movw	r26, r24
    34d4:	cb 01       	movw	r24, r22
    34d6:	9c 8b       	std	Y+20, r25	; 0x14
    34d8:	8b 8b       	std	Y+19, r24	; 0x13
    34da:	8b 89       	ldd	r24, Y+19	; 0x13
    34dc:	9c 89       	ldd	r25, Y+20	; 0x14
    34de:	98 8b       	std	Y+16, r25	; 0x10
    34e0:	8f 87       	std	Y+15, r24	; 0x0f
    34e2:	8f 85       	ldd	r24, Y+15	; 0x0f
    34e4:	98 89       	ldd	r25, Y+16	; 0x10
    34e6:	01 97       	sbiw	r24, 0x01	; 1
    34e8:	f1 f7       	brne	.-4      	; 0x34e6 <countup+0x128>
    34ea:	98 8b       	std	Y+16, r25	; 0x10
    34ec:	8f 87       	std	Y+15, r24	; 0x0f
            _delay_ms(3);
            DIO_SetPinLevel(DIO_PORTC,DIO_PIN1,DIO_LOW);
    34ee:	82 e0       	ldi	r24, 0x02	; 2
    34f0:	61 e0       	ldi	r22, 0x01	; 1
    34f2:	40 e0       	ldi	r20, 0x00	; 0
    34f4:	0e 94 a9 08 	call	0x1152	; 0x1152 <DIO_SetPinLevel>
            DIO_SetPinLevel(DIO_PORTC,DIO_PIN0,DIO_HIGH);
    34f8:	82 e0       	ldi	r24, 0x02	; 2
    34fa:	60 e0       	ldi	r22, 0x00	; 0
    34fc:	41 e0       	ldi	r20, 0x01	; 1
    34fe:	0e 94 a9 08 	call	0x1152	; 0x1152 <DIO_SetPinLevel>
            SSD_Write(j);
    3502:	89 a1       	ldd	r24, Y+33	; 0x21
    3504:	0e 94 7a 0b 	call	0x16f4	; 0x16f4 <SSD_Write>
    3508:	80 e0       	ldi	r24, 0x00	; 0
    350a:	90 e0       	ldi	r25, 0x00	; 0
    350c:	a0 e4       	ldi	r26, 0x40	; 64
    350e:	b0 e4       	ldi	r27, 0x40	; 64
    3510:	8b 87       	std	Y+11, r24	; 0x0b
    3512:	9c 87       	std	Y+12, r25	; 0x0c
    3514:	ad 87       	std	Y+13, r26	; 0x0d
    3516:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    3518:	6b 85       	ldd	r22, Y+11	; 0x0b
    351a:	7c 85       	ldd	r23, Y+12	; 0x0c
    351c:	8d 85       	ldd	r24, Y+13	; 0x0d
    351e:	9e 85       	ldd	r25, Y+14	; 0x0e
    3520:	20 e0       	ldi	r18, 0x00	; 0
    3522:	30 e0       	ldi	r19, 0x00	; 0
    3524:	4a ef       	ldi	r20, 0xFA	; 250
    3526:	54 e4       	ldi	r21, 0x44	; 68
    3528:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
    352c:	dc 01       	movw	r26, r24
    352e:	cb 01       	movw	r24, r22
    3530:	8f 83       	std	Y+7, r24	; 0x07
    3532:	98 87       	std	Y+8, r25	; 0x08
    3534:	a9 87       	std	Y+9, r26	; 0x09
    3536:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    3538:	6f 81       	ldd	r22, Y+7	; 0x07
    353a:	78 85       	ldd	r23, Y+8	; 0x08
    353c:	89 85       	ldd	r24, Y+9	; 0x09
    353e:	9a 85       	ldd	r25, Y+10	; 0x0a
    3540:	20 e0       	ldi	r18, 0x00	; 0
    3542:	30 e0       	ldi	r19, 0x00	; 0
    3544:	40 e8       	ldi	r20, 0x80	; 128
    3546:	5f e3       	ldi	r21, 0x3F	; 63
    3548:	0e 94 71 03 	call	0x6e2	; 0x6e2 <__ltsf2>
    354c:	88 23       	and	r24, r24
    354e:	2c f4       	brge	.+10     	; 0x355a <countup+0x19c>
		__ticks = 1;
    3550:	81 e0       	ldi	r24, 0x01	; 1
    3552:	90 e0       	ldi	r25, 0x00	; 0
    3554:	9e 83       	std	Y+6, r25	; 0x06
    3556:	8d 83       	std	Y+5, r24	; 0x05
    3558:	3f c0       	rjmp	.+126    	; 0x35d8 <countup+0x21a>
	else if (__tmp > 65535)
    355a:	6f 81       	ldd	r22, Y+7	; 0x07
    355c:	78 85       	ldd	r23, Y+8	; 0x08
    355e:	89 85       	ldd	r24, Y+9	; 0x09
    3560:	9a 85       	ldd	r25, Y+10	; 0x0a
    3562:	20 e0       	ldi	r18, 0x00	; 0
    3564:	3f ef       	ldi	r19, 0xFF	; 255
    3566:	4f e7       	ldi	r20, 0x7F	; 127
    3568:	57 e4       	ldi	r21, 0x47	; 71
    356a:	0e 94 11 03 	call	0x622	; 0x622 <__gtsf2>
    356e:	18 16       	cp	r1, r24
    3570:	4c f5       	brge	.+82     	; 0x35c4 <countup+0x206>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    3572:	6b 85       	ldd	r22, Y+11	; 0x0b
    3574:	7c 85       	ldd	r23, Y+12	; 0x0c
    3576:	8d 85       	ldd	r24, Y+13	; 0x0d
    3578:	9e 85       	ldd	r25, Y+14	; 0x0e
    357a:	20 e0       	ldi	r18, 0x00	; 0
    357c:	30 e0       	ldi	r19, 0x00	; 0
    357e:	40 e2       	ldi	r20, 0x20	; 32
    3580:	51 e4       	ldi	r21, 0x41	; 65
    3582:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
    3586:	dc 01       	movw	r26, r24
    3588:	cb 01       	movw	r24, r22
    358a:	bc 01       	movw	r22, r24
    358c:	cd 01       	movw	r24, r26
    358e:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
    3592:	dc 01       	movw	r26, r24
    3594:	cb 01       	movw	r24, r22
    3596:	9e 83       	std	Y+6, r25	; 0x06
    3598:	8d 83       	std	Y+5, r24	; 0x05
    359a:	0f c0       	rjmp	.+30     	; 0x35ba <countup+0x1fc>
    359c:	88 ec       	ldi	r24, 0xC8	; 200
    359e:	90 e0       	ldi	r25, 0x00	; 0
    35a0:	9c 83       	std	Y+4, r25	; 0x04
    35a2:	8b 83       	std	Y+3, r24	; 0x03
    35a4:	8b 81       	ldd	r24, Y+3	; 0x03
    35a6:	9c 81       	ldd	r25, Y+4	; 0x04
    35a8:	01 97       	sbiw	r24, 0x01	; 1
    35aa:	f1 f7       	brne	.-4      	; 0x35a8 <countup+0x1ea>
    35ac:	9c 83       	std	Y+4, r25	; 0x04
    35ae:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    35b0:	8d 81       	ldd	r24, Y+5	; 0x05
    35b2:	9e 81       	ldd	r25, Y+6	; 0x06
    35b4:	01 97       	sbiw	r24, 0x01	; 1
    35b6:	9e 83       	std	Y+6, r25	; 0x06
    35b8:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    35ba:	8d 81       	ldd	r24, Y+5	; 0x05
    35bc:	9e 81       	ldd	r25, Y+6	; 0x06
    35be:	00 97       	sbiw	r24, 0x00	; 0
    35c0:	69 f7       	brne	.-38     	; 0x359c <countup+0x1de>
    35c2:	14 c0       	rjmp	.+40     	; 0x35ec <countup+0x22e>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    35c4:	6f 81       	ldd	r22, Y+7	; 0x07
    35c6:	78 85       	ldd	r23, Y+8	; 0x08
    35c8:	89 85       	ldd	r24, Y+9	; 0x09
    35ca:	9a 85       	ldd	r25, Y+10	; 0x0a
    35cc:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
    35d0:	dc 01       	movw	r26, r24
    35d2:	cb 01       	movw	r24, r22
    35d4:	9e 83       	std	Y+6, r25	; 0x06
    35d6:	8d 83       	std	Y+5, r24	; 0x05
    35d8:	8d 81       	ldd	r24, Y+5	; 0x05
    35da:	9e 81       	ldd	r25, Y+6	; 0x06
    35dc:	9a 83       	std	Y+2, r25	; 0x02
    35de:	89 83       	std	Y+1, r24	; 0x01
    35e0:	89 81       	ldd	r24, Y+1	; 0x01
    35e2:	9a 81       	ldd	r25, Y+2	; 0x02
    35e4:	01 97       	sbiw	r24, 0x01	; 1
    35e6:	f1 f7       	brne	.-4      	; 0x35e4 <countup+0x226>
    35e8:	9a 83       	std	Y+2, r25	; 0x02
    35ea:	89 83       	std	Y+1, r24	; 0x01
            _delay_ms(3);
            DIO_SetPinLevel(DIO_PORTC,DIO_PIN0,DIO_LOW);
    35ec:	82 e0       	ldi	r24, 0x02	; 2
    35ee:	60 e0       	ldi	r22, 0x00	; 0
    35f0:	40 e0       	ldi	r20, 0x00	; 0
    35f2:	0e 94 a9 08 	call	0x1152	; 0x1152 <DIO_SetPinLevel>
        SSD_Write(i);
        //_delay_ms(500);
        DIO_SetPinLevel(DIO_PORTC,DIO_PIN1,DIO_LOW);
        for ( j = 0; j <= 9; j++)
        {   
            for (u32 k = 0; k < 100; k++)
    35f6:	8d 8d       	ldd	r24, Y+29	; 0x1d
    35f8:	9e 8d       	ldd	r25, Y+30	; 0x1e
    35fa:	01 96       	adiw	r24, 0x01	; 1
    35fc:	9e 8f       	std	Y+30, r25	; 0x1e
    35fe:	8d 8f       	std	Y+29, r24	; 0x1d
    3600:	8d 8d       	ldd	r24, Y+29	; 0x1d
    3602:	9e 8d       	ldd	r25, Y+30	; 0x1e
    3604:	84 36       	cpi	r24, 0x64	; 100
    3606:	91 05       	cpc	r25, r1
    3608:	08 f4       	brcc	.+2      	; 0x360c <countup+0x24e>
    360a:	f7 ce       	rjmp	.-530    	; 0x33fa <countup+0x3c>
    {
        DIO_SetPinLevel(DIO_PORTC,DIO_PIN1,DIO_HIGH);
        SSD_Write(i);
        //_delay_ms(500);
        DIO_SetPinLevel(DIO_PORTC,DIO_PIN1,DIO_LOW);
        for ( j = 0; j <= 9; j++)
    360c:	89 a1       	ldd	r24, Y+33	; 0x21
    360e:	8f 5f       	subi	r24, 0xFF	; 255
    3610:	89 a3       	std	Y+33, r24	; 0x21
    3612:	89 a1       	ldd	r24, Y+33	; 0x21
    3614:	8a 30       	cpi	r24, 0x0A	; 10
    3616:	08 f4       	brcc	.+2      	; 0x361a <countup+0x25c>
    3618:	ed ce       	rjmp	.-550    	; 0x33f4 <countup+0x36>
            DIO_SetPinLevel(DIO_PORTC,DIO_PIN0,DIO_LOW);
            }
            //_delay_ms(100);
            /* code */
        }
        DIO_SetPinLevel(DIO_PORTC,DIO_PIN0,DIO_HIGH);
    361a:	82 e0       	ldi	r24, 0x02	; 2
    361c:	60 e0       	ldi	r22, 0x00	; 0
    361e:	41 e0       	ldi	r20, 0x01	; 1
    3620:	0e 94 a9 08 	call	0x1152	; 0x1152 <DIO_SetPinLevel>
        SSD_Write(0);
    3624:	80 e0       	ldi	r24, 0x00	; 0
    3626:	0e 94 7a 0b 	call	0x16f4	; 0x16f4 <SSD_Write>
        DIO_SetPinLevel(DIO_PORTC,DIO_PIN0,DIO_LOW);
    362a:	82 e0       	ldi	r24, 0x02	; 2
    362c:	60 e0       	ldi	r22, 0x00	; 0
    362e:	40 e0       	ldi	r20, 0x00	; 0
    3630:	0e 94 a9 08 	call	0x1152	; 0x1152 <DIO_SetPinLevel>
}
void countup(){
    u8 i;
    u8 j;
    u32 k;
    for ( i = 0; i <= 9; i++)
    3634:	8a a1       	ldd	r24, Y+34	; 0x22
    3636:	8f 5f       	subi	r24, 0xFF	; 255
    3638:	8a a3       	std	Y+34, r24	; 0x22
    363a:	8a a1       	ldd	r24, Y+34	; 0x22
    363c:	8a 30       	cpi	r24, 0x0A	; 10
    363e:	08 f4       	brcc	.+2      	; 0x3642 <countup+0x284>
    3640:	ca ce       	rjmp	.-620    	; 0x33d6 <countup+0x18>
        DIO_SetPinLevel(DIO_PORTC,DIO_PIN0,DIO_LOW);
        /* code */
    }
    

}
    3642:	a2 96       	adiw	r28, 0x22	; 34
    3644:	0f b6       	in	r0, 0x3f	; 63
    3646:	f8 94       	cli
    3648:	de bf       	out	0x3e, r29	; 62
    364a:	0f be       	out	0x3f, r0	; 63
    364c:	cd bf       	out	0x3d, r28	; 61
    364e:	cf 91       	pop	r28
    3650:	df 91       	pop	r29
    3652:	08 95       	ret

00003654 <countdown>:
void countdown(){
    3654:	df 93       	push	r29
    3656:	cf 93       	push	r28
    3658:	cd b7       	in	r28, 0x3d	; 61
    365a:	de b7       	in	r29, 0x3e	; 62
    365c:	a2 97       	sbiw	r28, 0x22	; 34
    365e:	0f b6       	in	r0, 0x3f	; 63
    3660:	f8 94       	cli
    3662:	de bf       	out	0x3e, r29	; 62
    3664:	0f be       	out	0x3f, r0	; 63
    3666:	cd bf       	out	0x3d, r28	; 61
    u8 i;
    u8 j;
    u32 k;
    for ( i = 9; i >= 0; i--)
    3668:	89 e0       	ldi	r24, 0x09	; 9
    366a:	8a a3       	std	Y+34, r24	; 0x22
    {
        DIO_SetPinLevel(DIO_PORTC,DIO_PIN1,DIO_HIGH);
    366c:	82 e0       	ldi	r24, 0x02	; 2
    366e:	61 e0       	ldi	r22, 0x01	; 1
    3670:	41 e0       	ldi	r20, 0x01	; 1
    3672:	0e 94 a9 08 	call	0x1152	; 0x1152 <DIO_SetPinLevel>
        SSD_Write(i);
    3676:	8a a1       	ldd	r24, Y+34	; 0x22
    3678:	0e 94 7a 0b 	call	0x16f4	; 0x16f4 <SSD_Write>
        //_delay_ms(500);
        DIO_SetPinLevel(DIO_PORTC,DIO_PIN1,DIO_LOW);
    367c:	82 e0       	ldi	r24, 0x02	; 2
    367e:	61 e0       	ldi	r22, 0x01	; 1
    3680:	40 e0       	ldi	r20, 0x00	; 0
    3682:	0e 94 a9 08 	call	0x1152	; 0x1152 <DIO_SetPinLevel>
        for ( j = 9; j >= 0; j--)
    3686:	89 e0       	ldi	r24, 0x09	; 9
    3688:	89 a3       	std	Y+33, r24	; 0x21
        {   
            for (u32 k = 0; k < 100; k++)
    368a:	1e 8e       	std	Y+30, r1	; 0x1e
    368c:	1d 8e       	std	Y+29, r1	; 0x1d
    368e:	03 c1       	rjmp	.+518    	; 0x3896 <countdown+0x242>
            {
                /* code */
            
            
            DIO_SetPinLevel(DIO_PORTC,DIO_PIN1,DIO_HIGH);
    3690:	82 e0       	ldi	r24, 0x02	; 2
    3692:	61 e0       	ldi	r22, 0x01	; 1
    3694:	41 e0       	ldi	r20, 0x01	; 1
    3696:	0e 94 a9 08 	call	0x1152	; 0x1152 <DIO_SetPinLevel>
            SSD_Write(i);
    369a:	8a a1       	ldd	r24, Y+34	; 0x22
    369c:	0e 94 7a 0b 	call	0x16f4	; 0x16f4 <SSD_Write>
    36a0:	80 e0       	ldi	r24, 0x00	; 0
    36a2:	90 e0       	ldi	r25, 0x00	; 0
    36a4:	a0 e4       	ldi	r26, 0x40	; 64
    36a6:	b0 e4       	ldi	r27, 0x40	; 64
    36a8:	89 8f       	std	Y+25, r24	; 0x19
    36aa:	9a 8f       	std	Y+26, r25	; 0x1a
    36ac:	ab 8f       	std	Y+27, r26	; 0x1b
    36ae:	bc 8f       	std	Y+28, r27	; 0x1c
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    36b0:	69 8d       	ldd	r22, Y+25	; 0x19
    36b2:	7a 8d       	ldd	r23, Y+26	; 0x1a
    36b4:	8b 8d       	ldd	r24, Y+27	; 0x1b
    36b6:	9c 8d       	ldd	r25, Y+28	; 0x1c
    36b8:	20 e0       	ldi	r18, 0x00	; 0
    36ba:	30 e0       	ldi	r19, 0x00	; 0
    36bc:	4a ef       	ldi	r20, 0xFA	; 250
    36be:	54 e4       	ldi	r21, 0x44	; 68
    36c0:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
    36c4:	dc 01       	movw	r26, r24
    36c6:	cb 01       	movw	r24, r22
    36c8:	8d 8b       	std	Y+21, r24	; 0x15
    36ca:	9e 8b       	std	Y+22, r25	; 0x16
    36cc:	af 8b       	std	Y+23, r26	; 0x17
    36ce:	b8 8f       	std	Y+24, r27	; 0x18
	if (__tmp < 1.0)
    36d0:	6d 89       	ldd	r22, Y+21	; 0x15
    36d2:	7e 89       	ldd	r23, Y+22	; 0x16
    36d4:	8f 89       	ldd	r24, Y+23	; 0x17
    36d6:	98 8d       	ldd	r25, Y+24	; 0x18
    36d8:	20 e0       	ldi	r18, 0x00	; 0
    36da:	30 e0       	ldi	r19, 0x00	; 0
    36dc:	40 e8       	ldi	r20, 0x80	; 128
    36de:	5f e3       	ldi	r21, 0x3F	; 63
    36e0:	0e 94 71 03 	call	0x6e2	; 0x6e2 <__ltsf2>
    36e4:	88 23       	and	r24, r24
    36e6:	2c f4       	brge	.+10     	; 0x36f2 <countdown+0x9e>
		__ticks = 1;
    36e8:	81 e0       	ldi	r24, 0x01	; 1
    36ea:	90 e0       	ldi	r25, 0x00	; 0
    36ec:	9c 8b       	std	Y+20, r25	; 0x14
    36ee:	8b 8b       	std	Y+19, r24	; 0x13
    36f0:	3f c0       	rjmp	.+126    	; 0x3770 <countdown+0x11c>
	else if (__tmp > 65535)
    36f2:	6d 89       	ldd	r22, Y+21	; 0x15
    36f4:	7e 89       	ldd	r23, Y+22	; 0x16
    36f6:	8f 89       	ldd	r24, Y+23	; 0x17
    36f8:	98 8d       	ldd	r25, Y+24	; 0x18
    36fa:	20 e0       	ldi	r18, 0x00	; 0
    36fc:	3f ef       	ldi	r19, 0xFF	; 255
    36fe:	4f e7       	ldi	r20, 0x7F	; 127
    3700:	57 e4       	ldi	r21, 0x47	; 71
    3702:	0e 94 11 03 	call	0x622	; 0x622 <__gtsf2>
    3706:	18 16       	cp	r1, r24
    3708:	4c f5       	brge	.+82     	; 0x375c <countdown+0x108>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    370a:	69 8d       	ldd	r22, Y+25	; 0x19
    370c:	7a 8d       	ldd	r23, Y+26	; 0x1a
    370e:	8b 8d       	ldd	r24, Y+27	; 0x1b
    3710:	9c 8d       	ldd	r25, Y+28	; 0x1c
    3712:	20 e0       	ldi	r18, 0x00	; 0
    3714:	30 e0       	ldi	r19, 0x00	; 0
    3716:	40 e2       	ldi	r20, 0x20	; 32
    3718:	51 e4       	ldi	r21, 0x41	; 65
    371a:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
    371e:	dc 01       	movw	r26, r24
    3720:	cb 01       	movw	r24, r22
    3722:	bc 01       	movw	r22, r24
    3724:	cd 01       	movw	r24, r26
    3726:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
    372a:	dc 01       	movw	r26, r24
    372c:	cb 01       	movw	r24, r22
    372e:	9c 8b       	std	Y+20, r25	; 0x14
    3730:	8b 8b       	std	Y+19, r24	; 0x13
    3732:	0f c0       	rjmp	.+30     	; 0x3752 <countdown+0xfe>
    3734:	88 ec       	ldi	r24, 0xC8	; 200
    3736:	90 e0       	ldi	r25, 0x00	; 0
    3738:	9a 8b       	std	Y+18, r25	; 0x12
    373a:	89 8b       	std	Y+17, r24	; 0x11
    373c:	89 89       	ldd	r24, Y+17	; 0x11
    373e:	9a 89       	ldd	r25, Y+18	; 0x12
    3740:	01 97       	sbiw	r24, 0x01	; 1
    3742:	f1 f7       	brne	.-4      	; 0x3740 <countdown+0xec>
    3744:	9a 8b       	std	Y+18, r25	; 0x12
    3746:	89 8b       	std	Y+17, r24	; 0x11
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    3748:	8b 89       	ldd	r24, Y+19	; 0x13
    374a:	9c 89       	ldd	r25, Y+20	; 0x14
    374c:	01 97       	sbiw	r24, 0x01	; 1
    374e:	9c 8b       	std	Y+20, r25	; 0x14
    3750:	8b 8b       	std	Y+19, r24	; 0x13
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    3752:	8b 89       	ldd	r24, Y+19	; 0x13
    3754:	9c 89       	ldd	r25, Y+20	; 0x14
    3756:	00 97       	sbiw	r24, 0x00	; 0
    3758:	69 f7       	brne	.-38     	; 0x3734 <countdown+0xe0>
    375a:	14 c0       	rjmp	.+40     	; 0x3784 <countdown+0x130>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    375c:	6d 89       	ldd	r22, Y+21	; 0x15
    375e:	7e 89       	ldd	r23, Y+22	; 0x16
    3760:	8f 89       	ldd	r24, Y+23	; 0x17
    3762:	98 8d       	ldd	r25, Y+24	; 0x18
    3764:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
    3768:	dc 01       	movw	r26, r24
    376a:	cb 01       	movw	r24, r22
    376c:	9c 8b       	std	Y+20, r25	; 0x14
    376e:	8b 8b       	std	Y+19, r24	; 0x13
    3770:	8b 89       	ldd	r24, Y+19	; 0x13
    3772:	9c 89       	ldd	r25, Y+20	; 0x14
    3774:	98 8b       	std	Y+16, r25	; 0x10
    3776:	8f 87       	std	Y+15, r24	; 0x0f
    3778:	8f 85       	ldd	r24, Y+15	; 0x0f
    377a:	98 89       	ldd	r25, Y+16	; 0x10
    377c:	01 97       	sbiw	r24, 0x01	; 1
    377e:	f1 f7       	brne	.-4      	; 0x377c <countdown+0x128>
    3780:	98 8b       	std	Y+16, r25	; 0x10
    3782:	8f 87       	std	Y+15, r24	; 0x0f
            _delay_ms(3);
            DIO_SetPinLevel(DIO_PORTC,DIO_PIN1,DIO_LOW);
    3784:	82 e0       	ldi	r24, 0x02	; 2
    3786:	61 e0       	ldi	r22, 0x01	; 1
    3788:	40 e0       	ldi	r20, 0x00	; 0
    378a:	0e 94 a9 08 	call	0x1152	; 0x1152 <DIO_SetPinLevel>
            DIO_SetPinLevel(DIO_PORTC,DIO_PIN0,DIO_HIGH);
    378e:	82 e0       	ldi	r24, 0x02	; 2
    3790:	60 e0       	ldi	r22, 0x00	; 0
    3792:	41 e0       	ldi	r20, 0x01	; 1
    3794:	0e 94 a9 08 	call	0x1152	; 0x1152 <DIO_SetPinLevel>
            SSD_Write(j);
    3798:	89 a1       	ldd	r24, Y+33	; 0x21
    379a:	0e 94 7a 0b 	call	0x16f4	; 0x16f4 <SSD_Write>
    379e:	80 e0       	ldi	r24, 0x00	; 0
    37a0:	90 e0       	ldi	r25, 0x00	; 0
    37a2:	a0 e4       	ldi	r26, 0x40	; 64
    37a4:	b0 e4       	ldi	r27, 0x40	; 64
    37a6:	8b 87       	std	Y+11, r24	; 0x0b
    37a8:	9c 87       	std	Y+12, r25	; 0x0c
    37aa:	ad 87       	std	Y+13, r26	; 0x0d
    37ac:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    37ae:	6b 85       	ldd	r22, Y+11	; 0x0b
    37b0:	7c 85       	ldd	r23, Y+12	; 0x0c
    37b2:	8d 85       	ldd	r24, Y+13	; 0x0d
    37b4:	9e 85       	ldd	r25, Y+14	; 0x0e
    37b6:	20 e0       	ldi	r18, 0x00	; 0
    37b8:	30 e0       	ldi	r19, 0x00	; 0
    37ba:	4a ef       	ldi	r20, 0xFA	; 250
    37bc:	54 e4       	ldi	r21, 0x44	; 68
    37be:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
    37c2:	dc 01       	movw	r26, r24
    37c4:	cb 01       	movw	r24, r22
    37c6:	8f 83       	std	Y+7, r24	; 0x07
    37c8:	98 87       	std	Y+8, r25	; 0x08
    37ca:	a9 87       	std	Y+9, r26	; 0x09
    37cc:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    37ce:	6f 81       	ldd	r22, Y+7	; 0x07
    37d0:	78 85       	ldd	r23, Y+8	; 0x08
    37d2:	89 85       	ldd	r24, Y+9	; 0x09
    37d4:	9a 85       	ldd	r25, Y+10	; 0x0a
    37d6:	20 e0       	ldi	r18, 0x00	; 0
    37d8:	30 e0       	ldi	r19, 0x00	; 0
    37da:	40 e8       	ldi	r20, 0x80	; 128
    37dc:	5f e3       	ldi	r21, 0x3F	; 63
    37de:	0e 94 71 03 	call	0x6e2	; 0x6e2 <__ltsf2>
    37e2:	88 23       	and	r24, r24
    37e4:	2c f4       	brge	.+10     	; 0x37f0 <countdown+0x19c>
		__ticks = 1;
    37e6:	81 e0       	ldi	r24, 0x01	; 1
    37e8:	90 e0       	ldi	r25, 0x00	; 0
    37ea:	9e 83       	std	Y+6, r25	; 0x06
    37ec:	8d 83       	std	Y+5, r24	; 0x05
    37ee:	3f c0       	rjmp	.+126    	; 0x386e <countdown+0x21a>
	else if (__tmp > 65535)
    37f0:	6f 81       	ldd	r22, Y+7	; 0x07
    37f2:	78 85       	ldd	r23, Y+8	; 0x08
    37f4:	89 85       	ldd	r24, Y+9	; 0x09
    37f6:	9a 85       	ldd	r25, Y+10	; 0x0a
    37f8:	20 e0       	ldi	r18, 0x00	; 0
    37fa:	3f ef       	ldi	r19, 0xFF	; 255
    37fc:	4f e7       	ldi	r20, 0x7F	; 127
    37fe:	57 e4       	ldi	r21, 0x47	; 71
    3800:	0e 94 11 03 	call	0x622	; 0x622 <__gtsf2>
    3804:	18 16       	cp	r1, r24
    3806:	4c f5       	brge	.+82     	; 0x385a <countdown+0x206>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    3808:	6b 85       	ldd	r22, Y+11	; 0x0b
    380a:	7c 85       	ldd	r23, Y+12	; 0x0c
    380c:	8d 85       	ldd	r24, Y+13	; 0x0d
    380e:	9e 85       	ldd	r25, Y+14	; 0x0e
    3810:	20 e0       	ldi	r18, 0x00	; 0
    3812:	30 e0       	ldi	r19, 0x00	; 0
    3814:	40 e2       	ldi	r20, 0x20	; 32
    3816:	51 e4       	ldi	r21, 0x41	; 65
    3818:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
    381c:	dc 01       	movw	r26, r24
    381e:	cb 01       	movw	r24, r22
    3820:	bc 01       	movw	r22, r24
    3822:	cd 01       	movw	r24, r26
    3824:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
    3828:	dc 01       	movw	r26, r24
    382a:	cb 01       	movw	r24, r22
    382c:	9e 83       	std	Y+6, r25	; 0x06
    382e:	8d 83       	std	Y+5, r24	; 0x05
    3830:	0f c0       	rjmp	.+30     	; 0x3850 <countdown+0x1fc>
    3832:	88 ec       	ldi	r24, 0xC8	; 200
    3834:	90 e0       	ldi	r25, 0x00	; 0
    3836:	9c 83       	std	Y+4, r25	; 0x04
    3838:	8b 83       	std	Y+3, r24	; 0x03
    383a:	8b 81       	ldd	r24, Y+3	; 0x03
    383c:	9c 81       	ldd	r25, Y+4	; 0x04
    383e:	01 97       	sbiw	r24, 0x01	; 1
    3840:	f1 f7       	brne	.-4      	; 0x383e <countdown+0x1ea>
    3842:	9c 83       	std	Y+4, r25	; 0x04
    3844:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    3846:	8d 81       	ldd	r24, Y+5	; 0x05
    3848:	9e 81       	ldd	r25, Y+6	; 0x06
    384a:	01 97       	sbiw	r24, 0x01	; 1
    384c:	9e 83       	std	Y+6, r25	; 0x06
    384e:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    3850:	8d 81       	ldd	r24, Y+5	; 0x05
    3852:	9e 81       	ldd	r25, Y+6	; 0x06
    3854:	00 97       	sbiw	r24, 0x00	; 0
    3856:	69 f7       	brne	.-38     	; 0x3832 <countdown+0x1de>
    3858:	14 c0       	rjmp	.+40     	; 0x3882 <countdown+0x22e>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    385a:	6f 81       	ldd	r22, Y+7	; 0x07
    385c:	78 85       	ldd	r23, Y+8	; 0x08
    385e:	89 85       	ldd	r24, Y+9	; 0x09
    3860:	9a 85       	ldd	r25, Y+10	; 0x0a
    3862:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
    3866:	dc 01       	movw	r26, r24
    3868:	cb 01       	movw	r24, r22
    386a:	9e 83       	std	Y+6, r25	; 0x06
    386c:	8d 83       	std	Y+5, r24	; 0x05
    386e:	8d 81       	ldd	r24, Y+5	; 0x05
    3870:	9e 81       	ldd	r25, Y+6	; 0x06
    3872:	9a 83       	std	Y+2, r25	; 0x02
    3874:	89 83       	std	Y+1, r24	; 0x01
    3876:	89 81       	ldd	r24, Y+1	; 0x01
    3878:	9a 81       	ldd	r25, Y+2	; 0x02
    387a:	01 97       	sbiw	r24, 0x01	; 1
    387c:	f1 f7       	brne	.-4      	; 0x387a <countdown+0x226>
    387e:	9a 83       	std	Y+2, r25	; 0x02
    3880:	89 83       	std	Y+1, r24	; 0x01
            _delay_ms(3);
            DIO_SetPinLevel(DIO_PORTC,DIO_PIN0,DIO_LOW);
    3882:	82 e0       	ldi	r24, 0x02	; 2
    3884:	60 e0       	ldi	r22, 0x00	; 0
    3886:	40 e0       	ldi	r20, 0x00	; 0
    3888:	0e 94 a9 08 	call	0x1152	; 0x1152 <DIO_SetPinLevel>
        SSD_Write(i);
        //_delay_ms(500);
        DIO_SetPinLevel(DIO_PORTC,DIO_PIN1,DIO_LOW);
        for ( j = 9; j >= 0; j--)
        {   
            for (u32 k = 0; k < 100; k++)
    388c:	8d 8d       	ldd	r24, Y+29	; 0x1d
    388e:	9e 8d       	ldd	r25, Y+30	; 0x1e
    3890:	01 96       	adiw	r24, 0x01	; 1
    3892:	9e 8f       	std	Y+30, r25	; 0x1e
    3894:	8d 8f       	std	Y+29, r24	; 0x1d
    3896:	8d 8d       	ldd	r24, Y+29	; 0x1d
    3898:	9e 8d       	ldd	r25, Y+30	; 0x1e
    389a:	84 36       	cpi	r24, 0x64	; 100
    389c:	91 05       	cpc	r25, r1
    389e:	08 f4       	brcc	.+2      	; 0x38a2 <countdown+0x24e>
    38a0:	f7 ce       	rjmp	.-530    	; 0x3690 <countdown+0x3c>
            DIO_SetPinLevel(DIO_PORTC,DIO_PIN0,DIO_HIGH);
            SSD_Write(j);
            _delay_ms(3);
            DIO_SetPinLevel(DIO_PORTC,DIO_PIN0,DIO_LOW);
            }
            if(j==0)
    38a2:	89 a1       	ldd	r24, Y+33	; 0x21
    38a4:	88 23       	and	r24, r24
    38a6:	21 f0       	breq	.+8      	; 0x38b0 <countdown+0x25c>
    {
        DIO_SetPinLevel(DIO_PORTC,DIO_PIN1,DIO_HIGH);
        SSD_Write(i);
        //_delay_ms(500);
        DIO_SetPinLevel(DIO_PORTC,DIO_PIN1,DIO_LOW);
        for ( j = 9; j >= 0; j--)
    38a8:	89 a1       	ldd	r24, Y+33	; 0x21
    38aa:	81 50       	subi	r24, 0x01	; 1
    38ac:	89 a3       	std	Y+33, r24	; 0x21
    38ae:	ed ce       	rjmp	.-550    	; 0x368a <countdown+0x36>
            if(j==0)
                break;
            //_delay_ms(100);
            /* code */
        }
        DIO_SetPinLevel(DIO_PORTC,DIO_PIN0,DIO_HIGH);
    38b0:	82 e0       	ldi	r24, 0x02	; 2
    38b2:	60 e0       	ldi	r22, 0x00	; 0
    38b4:	41 e0       	ldi	r20, 0x01	; 1
    38b6:	0e 94 a9 08 	call	0x1152	; 0x1152 <DIO_SetPinLevel>
        SSD_Write(0);
    38ba:	80 e0       	ldi	r24, 0x00	; 0
    38bc:	0e 94 7a 0b 	call	0x16f4	; 0x16f4 <SSD_Write>
        DIO_SetPinLevel(DIO_PORTC,DIO_PIN0,DIO_LOW);
    38c0:	82 e0       	ldi	r24, 0x02	; 2
    38c2:	60 e0       	ldi	r22, 0x00	; 0
    38c4:	40 e0       	ldi	r20, 0x00	; 0
    38c6:	0e 94 a9 08 	call	0x1152	; 0x1152 <DIO_SetPinLevel>
        /* code */
        if(i==0)
    38ca:	8a a1       	ldd	r24, Y+34	; 0x22
    38cc:	88 23       	and	r24, r24
    38ce:	21 f0       	breq	.+8      	; 0x38d8 <countdown+0x284>
}
void countdown(){
    u8 i;
    u8 j;
    u32 k;
    for ( i = 9; i >= 0; i--)
    38d0:	8a a1       	ldd	r24, Y+34	; 0x22
    38d2:	81 50       	subi	r24, 0x01	; 1
    38d4:	8a a3       	std	Y+34, r24	; 0x22
    38d6:	ca ce       	rjmp	.-620    	; 0x366c <countdown+0x18>
        /* code */
        if(i==0)
            break;
    }
    
}
    38d8:	a2 96       	adiw	r28, 0x22	; 34
    38da:	0f b6       	in	r0, 0x3f	; 63
    38dc:	f8 94       	cli
    38de:	de bf       	out	0x3e, r29	; 62
    38e0:	0f be       	out	0x3f, r0	; 63
    38e2:	cd bf       	out	0x3d, r28	; 61
    38e4:	cf 91       	pop	r28
    38e6:	df 91       	pop	r29
    38e8:	08 95       	ret

000038ea <__prologue_saves__>:
    38ea:	2f 92       	push	r2
    38ec:	3f 92       	push	r3
    38ee:	4f 92       	push	r4
    38f0:	5f 92       	push	r5
    38f2:	6f 92       	push	r6
    38f4:	7f 92       	push	r7
    38f6:	8f 92       	push	r8
    38f8:	9f 92       	push	r9
    38fa:	af 92       	push	r10
    38fc:	bf 92       	push	r11
    38fe:	cf 92       	push	r12
    3900:	df 92       	push	r13
    3902:	ef 92       	push	r14
    3904:	ff 92       	push	r15
    3906:	0f 93       	push	r16
    3908:	1f 93       	push	r17
    390a:	cf 93       	push	r28
    390c:	df 93       	push	r29
    390e:	cd b7       	in	r28, 0x3d	; 61
    3910:	de b7       	in	r29, 0x3e	; 62
    3912:	ca 1b       	sub	r28, r26
    3914:	db 0b       	sbc	r29, r27
    3916:	0f b6       	in	r0, 0x3f	; 63
    3918:	f8 94       	cli
    391a:	de bf       	out	0x3e, r29	; 62
    391c:	0f be       	out	0x3f, r0	; 63
    391e:	cd bf       	out	0x3d, r28	; 61
    3920:	09 94       	ijmp

00003922 <__epilogue_restores__>:
    3922:	2a 88       	ldd	r2, Y+18	; 0x12
    3924:	39 88       	ldd	r3, Y+17	; 0x11
    3926:	48 88       	ldd	r4, Y+16	; 0x10
    3928:	5f 84       	ldd	r5, Y+15	; 0x0f
    392a:	6e 84       	ldd	r6, Y+14	; 0x0e
    392c:	7d 84       	ldd	r7, Y+13	; 0x0d
    392e:	8c 84       	ldd	r8, Y+12	; 0x0c
    3930:	9b 84       	ldd	r9, Y+11	; 0x0b
    3932:	aa 84       	ldd	r10, Y+10	; 0x0a
    3934:	b9 84       	ldd	r11, Y+9	; 0x09
    3936:	c8 84       	ldd	r12, Y+8	; 0x08
    3938:	df 80       	ldd	r13, Y+7	; 0x07
    393a:	ee 80       	ldd	r14, Y+6	; 0x06
    393c:	fd 80       	ldd	r15, Y+5	; 0x05
    393e:	0c 81       	ldd	r16, Y+4	; 0x04
    3940:	1b 81       	ldd	r17, Y+3	; 0x03
    3942:	aa 81       	ldd	r26, Y+2	; 0x02
    3944:	b9 81       	ldd	r27, Y+1	; 0x01
    3946:	ce 0f       	add	r28, r30
    3948:	d1 1d       	adc	r29, r1
    394a:	0f b6       	in	r0, 0x3f	; 63
    394c:	f8 94       	cli
    394e:	de bf       	out	0x3e, r29	; 62
    3950:	0f be       	out	0x3f, r0	; 63
    3952:	cd bf       	out	0x3d, r28	; 61
    3954:	ed 01       	movw	r28, r26
    3956:	08 95       	ret

00003958 <_exit>:
    3958:	f8 94       	cli

0000395a <__stop_program>:
    395a:	ff cf       	rjmp	.-2      	; 0x395a <__stop_program>
