
Drivers.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         00004882  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .data         00000012  00800060  00004882  00004916  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  2 .bss          00000016  00800072  00800072  00004928  2**0
                  ALLOC
  3 .stab         00004614  00000000  00000000  00004928  2**2
                  CONTENTS, READONLY, DEBUGGING
  4 .stabstr      000022e9  00000000  00000000  00008f3c  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_aranges 00000140  00000000  00000000  0000b225  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_pubnames 00000170  00000000  00000000  0000b365  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_info   00001c49  00000000  00000000  0000b4d5  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_abbrev 00000eeb  00000000  00000000  0000d11e  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_line   00000dad  00000000  00000000  0000e009  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_frame  00000160  00000000  00000000  0000edb8  2**2
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_str    0000028d  00000000  00000000  0000ef18  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_loc    000007ce  00000000  00000000  0000f1a5  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_ranges 00000050  00000000  00000000  0000f973  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
       0:	0c 94 2a 00 	jmp	0x54	; 0x54 <__ctors_end>
       4:	0c 94 24 0e 	jmp	0x1c48	; 0x1c48 <__vector_1>
       8:	0c 94 51 0e 	jmp	0x1ca2	; 0x1ca2 <__vector_2>
       c:	0c 94 7e 0e 	jmp	0x1cfc	; 0x1cfc <__vector_3>
      10:	0c 94 1f 10 	jmp	0x203e	; 0x203e <__vector_4>
      14:	0c 94 4c 10 	jmp	0x2098	; 0x2098 <__vector_5>
      18:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      1c:	0c 94 98 0f 	jmp	0x1f30	; 0x1f30 <__vector_7>
      20:	0c 94 f2 0f 	jmp	0x1fe4	; 0x1fe4 <__vector_8>
      24:	0c 94 c5 0f 	jmp	0x1f8a	; 0x1f8a <__vector_9>
      28:	0c 94 3e 0f 	jmp	0x1e7c	; 0x1e7c <__vector_10>
      2c:	0c 94 6b 0f 	jmp	0x1ed6	; 0x1ed6 <__vector_11>
      30:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      34:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      38:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      3c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      40:	0c 94 a3 05 	jmp	0xb46	; 0xb46 <__vector_16>
      44:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      48:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      4c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      50:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>

00000054 <__ctors_end>:
      54:	11 24       	eor	r1, r1
      56:	1f be       	out	0x3f, r1	; 63
      58:	cf e5       	ldi	r28, 0x5F	; 95
      5a:	d8 e0       	ldi	r29, 0x08	; 8
      5c:	de bf       	out	0x3e, r29	; 62
      5e:	cd bf       	out	0x3d, r28	; 61

00000060 <__do_copy_data>:
      60:	10 e0       	ldi	r17, 0x00	; 0
      62:	a0 e6       	ldi	r26, 0x60	; 96
      64:	b0 e0       	ldi	r27, 0x00	; 0
      66:	e2 e8       	ldi	r30, 0x82	; 130
      68:	f8 e4       	ldi	r31, 0x48	; 72
      6a:	02 c0       	rjmp	.+4      	; 0x70 <.do_copy_data_start>

0000006c <.do_copy_data_loop>:
      6c:	05 90       	lpm	r0, Z+
      6e:	0d 92       	st	X+, r0

00000070 <.do_copy_data_start>:
      70:	a2 37       	cpi	r26, 0x72	; 114
      72:	b1 07       	cpc	r27, r17
      74:	d9 f7       	brne	.-10     	; 0x6c <.do_copy_data_loop>

00000076 <__do_clear_bss>:
      76:	10 e0       	ldi	r17, 0x00	; 0
      78:	a2 e7       	ldi	r26, 0x72	; 114
      7a:	b0 e0       	ldi	r27, 0x00	; 0
      7c:	01 c0       	rjmp	.+2      	; 0x80 <.do_clear_bss_start>

0000007e <.do_clear_bss_loop>:
      7e:	1d 92       	st	X+, r1

00000080 <.do_clear_bss_start>:
      80:	a8 38       	cpi	r26, 0x88	; 136
      82:	b1 07       	cpc	r27, r17
      84:	e1 f7       	brne	.-8      	; 0x7e <.do_clear_bss_loop>
      86:	0e 94 76 23 	call	0x46ec	; 0x46ec <main>
      8a:	0c 94 3f 24 	jmp	0x487e	; 0x487e <_exit>

0000008e <__bad_interrupt>:
      8e:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

00000092 <__fixunssfsi>:
      92:	ef 92       	push	r14
      94:	ff 92       	push	r15
      96:	0f 93       	push	r16
      98:	1f 93       	push	r17
      9a:	7b 01       	movw	r14, r22
      9c:	8c 01       	movw	r16, r24
      9e:	20 e0       	ldi	r18, 0x00	; 0
      a0:	30 e0       	ldi	r19, 0x00	; 0
      a2:	40 e0       	ldi	r20, 0x00	; 0
      a4:	5f e4       	ldi	r21, 0x4F	; 79
      a6:	0e 94 49 03 	call	0x692	; 0x692 <__gesf2>
      aa:	88 23       	and	r24, r24
      ac:	8c f0       	brlt	.+34     	; 0xd0 <__fixunssfsi+0x3e>
      ae:	c8 01       	movw	r24, r16
      b0:	b7 01       	movw	r22, r14
      b2:	20 e0       	ldi	r18, 0x00	; 0
      b4:	30 e0       	ldi	r19, 0x00	; 0
      b6:	40 e0       	ldi	r20, 0x00	; 0
      b8:	5f e4       	ldi	r21, 0x4F	; 79
      ba:	0e 94 c1 01 	call	0x382	; 0x382 <__subsf3>
      be:	0e 94 a9 03 	call	0x752	; 0x752 <__fixsfsi>
      c2:	9b 01       	movw	r18, r22
      c4:	ac 01       	movw	r20, r24
      c6:	20 50       	subi	r18, 0x00	; 0
      c8:	30 40       	sbci	r19, 0x00	; 0
      ca:	40 40       	sbci	r20, 0x00	; 0
      cc:	50 48       	sbci	r21, 0x80	; 128
      ce:	06 c0       	rjmp	.+12     	; 0xdc <__fixunssfsi+0x4a>
      d0:	c8 01       	movw	r24, r16
      d2:	b7 01       	movw	r22, r14
      d4:	0e 94 a9 03 	call	0x752	; 0x752 <__fixsfsi>
      d8:	9b 01       	movw	r18, r22
      da:	ac 01       	movw	r20, r24
      dc:	b9 01       	movw	r22, r18
      de:	ca 01       	movw	r24, r20
      e0:	1f 91       	pop	r17
      e2:	0f 91       	pop	r16
      e4:	ff 90       	pop	r15
      e6:	ef 90       	pop	r14
      e8:	08 95       	ret

000000ea <_fpadd_parts>:
      ea:	a0 e0       	ldi	r26, 0x00	; 0
      ec:	b0 e0       	ldi	r27, 0x00	; 0
      ee:	eb e7       	ldi	r30, 0x7B	; 123
      f0:	f0 e0       	ldi	r31, 0x00	; 0
      f2:	0c 94 08 24 	jmp	0x4810	; 0x4810 <__prologue_saves__>
      f6:	dc 01       	movw	r26, r24
      f8:	2b 01       	movw	r4, r22
      fa:	fa 01       	movw	r30, r20
      fc:	9c 91       	ld	r25, X
      fe:	92 30       	cpi	r25, 0x02	; 2
     100:	08 f4       	brcc	.+2      	; 0x104 <_fpadd_parts+0x1a>
     102:	39 c1       	rjmp	.+626    	; 0x376 <_fpadd_parts+0x28c>
     104:	eb 01       	movw	r28, r22
     106:	88 81       	ld	r24, Y
     108:	82 30       	cpi	r24, 0x02	; 2
     10a:	08 f4       	brcc	.+2      	; 0x10e <_fpadd_parts+0x24>
     10c:	33 c1       	rjmp	.+614    	; 0x374 <_fpadd_parts+0x28a>
     10e:	94 30       	cpi	r25, 0x04	; 4
     110:	69 f4       	brne	.+26     	; 0x12c <_fpadd_parts+0x42>
     112:	84 30       	cpi	r24, 0x04	; 4
     114:	09 f0       	breq	.+2      	; 0x118 <_fpadd_parts+0x2e>
     116:	2f c1       	rjmp	.+606    	; 0x376 <_fpadd_parts+0x28c>
     118:	11 96       	adiw	r26, 0x01	; 1
     11a:	9c 91       	ld	r25, X
     11c:	11 97       	sbiw	r26, 0x01	; 1
     11e:	89 81       	ldd	r24, Y+1	; 0x01
     120:	98 17       	cp	r25, r24
     122:	09 f4       	brne	.+2      	; 0x126 <_fpadd_parts+0x3c>
     124:	28 c1       	rjmp	.+592    	; 0x376 <_fpadd_parts+0x28c>
     126:	aa e6       	ldi	r26, 0x6A	; 106
     128:	b0 e0       	ldi	r27, 0x00	; 0
     12a:	25 c1       	rjmp	.+586    	; 0x376 <_fpadd_parts+0x28c>
     12c:	84 30       	cpi	r24, 0x04	; 4
     12e:	09 f4       	brne	.+2      	; 0x132 <_fpadd_parts+0x48>
     130:	21 c1       	rjmp	.+578    	; 0x374 <_fpadd_parts+0x28a>
     132:	82 30       	cpi	r24, 0x02	; 2
     134:	a9 f4       	brne	.+42     	; 0x160 <_fpadd_parts+0x76>
     136:	92 30       	cpi	r25, 0x02	; 2
     138:	09 f0       	breq	.+2      	; 0x13c <_fpadd_parts+0x52>
     13a:	1d c1       	rjmp	.+570    	; 0x376 <_fpadd_parts+0x28c>
     13c:	9a 01       	movw	r18, r20
     13e:	ad 01       	movw	r20, r26
     140:	88 e0       	ldi	r24, 0x08	; 8
     142:	ea 01       	movw	r28, r20
     144:	09 90       	ld	r0, Y+
     146:	ae 01       	movw	r20, r28
     148:	e9 01       	movw	r28, r18
     14a:	09 92       	st	Y+, r0
     14c:	9e 01       	movw	r18, r28
     14e:	81 50       	subi	r24, 0x01	; 1
     150:	c1 f7       	brne	.-16     	; 0x142 <_fpadd_parts+0x58>
     152:	e2 01       	movw	r28, r4
     154:	89 81       	ldd	r24, Y+1	; 0x01
     156:	11 96       	adiw	r26, 0x01	; 1
     158:	9c 91       	ld	r25, X
     15a:	89 23       	and	r24, r25
     15c:	81 83       	std	Z+1, r24	; 0x01
     15e:	08 c1       	rjmp	.+528    	; 0x370 <_fpadd_parts+0x286>
     160:	92 30       	cpi	r25, 0x02	; 2
     162:	09 f4       	brne	.+2      	; 0x166 <_fpadd_parts+0x7c>
     164:	07 c1       	rjmp	.+526    	; 0x374 <_fpadd_parts+0x28a>
     166:	12 96       	adiw	r26, 0x02	; 2
     168:	2d 90       	ld	r2, X+
     16a:	3c 90       	ld	r3, X
     16c:	13 97       	sbiw	r26, 0x03	; 3
     16e:	eb 01       	movw	r28, r22
     170:	8a 81       	ldd	r24, Y+2	; 0x02
     172:	9b 81       	ldd	r25, Y+3	; 0x03
     174:	14 96       	adiw	r26, 0x04	; 4
     176:	ad 90       	ld	r10, X+
     178:	bd 90       	ld	r11, X+
     17a:	cd 90       	ld	r12, X+
     17c:	dc 90       	ld	r13, X
     17e:	17 97       	sbiw	r26, 0x07	; 7
     180:	ec 80       	ldd	r14, Y+4	; 0x04
     182:	fd 80       	ldd	r15, Y+5	; 0x05
     184:	0e 81       	ldd	r16, Y+6	; 0x06
     186:	1f 81       	ldd	r17, Y+7	; 0x07
     188:	91 01       	movw	r18, r2
     18a:	28 1b       	sub	r18, r24
     18c:	39 0b       	sbc	r19, r25
     18e:	b9 01       	movw	r22, r18
     190:	37 ff       	sbrs	r19, 7
     192:	04 c0       	rjmp	.+8      	; 0x19c <_fpadd_parts+0xb2>
     194:	66 27       	eor	r22, r22
     196:	77 27       	eor	r23, r23
     198:	62 1b       	sub	r22, r18
     19a:	73 0b       	sbc	r23, r19
     19c:	60 32       	cpi	r22, 0x20	; 32
     19e:	71 05       	cpc	r23, r1
     1a0:	0c f0       	brlt	.+2      	; 0x1a4 <_fpadd_parts+0xba>
     1a2:	61 c0       	rjmp	.+194    	; 0x266 <_fpadd_parts+0x17c>
     1a4:	12 16       	cp	r1, r18
     1a6:	13 06       	cpc	r1, r19
     1a8:	6c f5       	brge	.+90     	; 0x204 <_fpadd_parts+0x11a>
     1aa:	37 01       	movw	r6, r14
     1ac:	48 01       	movw	r8, r16
     1ae:	06 2e       	mov	r0, r22
     1b0:	04 c0       	rjmp	.+8      	; 0x1ba <_fpadd_parts+0xd0>
     1b2:	96 94       	lsr	r9
     1b4:	87 94       	ror	r8
     1b6:	77 94       	ror	r7
     1b8:	67 94       	ror	r6
     1ba:	0a 94       	dec	r0
     1bc:	d2 f7       	brpl	.-12     	; 0x1b2 <_fpadd_parts+0xc8>
     1be:	21 e0       	ldi	r18, 0x01	; 1
     1c0:	30 e0       	ldi	r19, 0x00	; 0
     1c2:	40 e0       	ldi	r20, 0x00	; 0
     1c4:	50 e0       	ldi	r21, 0x00	; 0
     1c6:	04 c0       	rjmp	.+8      	; 0x1d0 <_fpadd_parts+0xe6>
     1c8:	22 0f       	add	r18, r18
     1ca:	33 1f       	adc	r19, r19
     1cc:	44 1f       	adc	r20, r20
     1ce:	55 1f       	adc	r21, r21
     1d0:	6a 95       	dec	r22
     1d2:	d2 f7       	brpl	.-12     	; 0x1c8 <_fpadd_parts+0xde>
     1d4:	21 50       	subi	r18, 0x01	; 1
     1d6:	30 40       	sbci	r19, 0x00	; 0
     1d8:	40 40       	sbci	r20, 0x00	; 0
     1da:	50 40       	sbci	r21, 0x00	; 0
     1dc:	2e 21       	and	r18, r14
     1de:	3f 21       	and	r19, r15
     1e0:	40 23       	and	r20, r16
     1e2:	51 23       	and	r21, r17
     1e4:	21 15       	cp	r18, r1
     1e6:	31 05       	cpc	r19, r1
     1e8:	41 05       	cpc	r20, r1
     1ea:	51 05       	cpc	r21, r1
     1ec:	21 f0       	breq	.+8      	; 0x1f6 <_fpadd_parts+0x10c>
     1ee:	21 e0       	ldi	r18, 0x01	; 1
     1f0:	30 e0       	ldi	r19, 0x00	; 0
     1f2:	40 e0       	ldi	r20, 0x00	; 0
     1f4:	50 e0       	ldi	r21, 0x00	; 0
     1f6:	79 01       	movw	r14, r18
     1f8:	8a 01       	movw	r16, r20
     1fa:	e6 28       	or	r14, r6
     1fc:	f7 28       	or	r15, r7
     1fe:	08 29       	or	r16, r8
     200:	19 29       	or	r17, r9
     202:	3c c0       	rjmp	.+120    	; 0x27c <_fpadd_parts+0x192>
     204:	23 2b       	or	r18, r19
     206:	d1 f1       	breq	.+116    	; 0x27c <_fpadd_parts+0x192>
     208:	26 0e       	add	r2, r22
     20a:	37 1e       	adc	r3, r23
     20c:	35 01       	movw	r6, r10
     20e:	46 01       	movw	r8, r12
     210:	06 2e       	mov	r0, r22
     212:	04 c0       	rjmp	.+8      	; 0x21c <_fpadd_parts+0x132>
     214:	96 94       	lsr	r9
     216:	87 94       	ror	r8
     218:	77 94       	ror	r7
     21a:	67 94       	ror	r6
     21c:	0a 94       	dec	r0
     21e:	d2 f7       	brpl	.-12     	; 0x214 <_fpadd_parts+0x12a>
     220:	21 e0       	ldi	r18, 0x01	; 1
     222:	30 e0       	ldi	r19, 0x00	; 0
     224:	40 e0       	ldi	r20, 0x00	; 0
     226:	50 e0       	ldi	r21, 0x00	; 0
     228:	04 c0       	rjmp	.+8      	; 0x232 <_fpadd_parts+0x148>
     22a:	22 0f       	add	r18, r18
     22c:	33 1f       	adc	r19, r19
     22e:	44 1f       	adc	r20, r20
     230:	55 1f       	adc	r21, r21
     232:	6a 95       	dec	r22
     234:	d2 f7       	brpl	.-12     	; 0x22a <_fpadd_parts+0x140>
     236:	21 50       	subi	r18, 0x01	; 1
     238:	30 40       	sbci	r19, 0x00	; 0
     23a:	40 40       	sbci	r20, 0x00	; 0
     23c:	50 40       	sbci	r21, 0x00	; 0
     23e:	2a 21       	and	r18, r10
     240:	3b 21       	and	r19, r11
     242:	4c 21       	and	r20, r12
     244:	5d 21       	and	r21, r13
     246:	21 15       	cp	r18, r1
     248:	31 05       	cpc	r19, r1
     24a:	41 05       	cpc	r20, r1
     24c:	51 05       	cpc	r21, r1
     24e:	21 f0       	breq	.+8      	; 0x258 <_fpadd_parts+0x16e>
     250:	21 e0       	ldi	r18, 0x01	; 1
     252:	30 e0       	ldi	r19, 0x00	; 0
     254:	40 e0       	ldi	r20, 0x00	; 0
     256:	50 e0       	ldi	r21, 0x00	; 0
     258:	59 01       	movw	r10, r18
     25a:	6a 01       	movw	r12, r20
     25c:	a6 28       	or	r10, r6
     25e:	b7 28       	or	r11, r7
     260:	c8 28       	or	r12, r8
     262:	d9 28       	or	r13, r9
     264:	0b c0       	rjmp	.+22     	; 0x27c <_fpadd_parts+0x192>
     266:	82 15       	cp	r24, r2
     268:	93 05       	cpc	r25, r3
     26a:	2c f0       	brlt	.+10     	; 0x276 <_fpadd_parts+0x18c>
     26c:	1c 01       	movw	r2, r24
     26e:	aa 24       	eor	r10, r10
     270:	bb 24       	eor	r11, r11
     272:	65 01       	movw	r12, r10
     274:	03 c0       	rjmp	.+6      	; 0x27c <_fpadd_parts+0x192>
     276:	ee 24       	eor	r14, r14
     278:	ff 24       	eor	r15, r15
     27a:	87 01       	movw	r16, r14
     27c:	11 96       	adiw	r26, 0x01	; 1
     27e:	9c 91       	ld	r25, X
     280:	d2 01       	movw	r26, r4
     282:	11 96       	adiw	r26, 0x01	; 1
     284:	8c 91       	ld	r24, X
     286:	98 17       	cp	r25, r24
     288:	09 f4       	brne	.+2      	; 0x28c <_fpadd_parts+0x1a2>
     28a:	45 c0       	rjmp	.+138    	; 0x316 <_fpadd_parts+0x22c>
     28c:	99 23       	and	r25, r25
     28e:	39 f0       	breq	.+14     	; 0x29e <_fpadd_parts+0x1b4>
     290:	a8 01       	movw	r20, r16
     292:	97 01       	movw	r18, r14
     294:	2a 19       	sub	r18, r10
     296:	3b 09       	sbc	r19, r11
     298:	4c 09       	sbc	r20, r12
     29a:	5d 09       	sbc	r21, r13
     29c:	06 c0       	rjmp	.+12     	; 0x2aa <_fpadd_parts+0x1c0>
     29e:	a6 01       	movw	r20, r12
     2a0:	95 01       	movw	r18, r10
     2a2:	2e 19       	sub	r18, r14
     2a4:	3f 09       	sbc	r19, r15
     2a6:	40 0b       	sbc	r20, r16
     2a8:	51 0b       	sbc	r21, r17
     2aa:	57 fd       	sbrc	r21, 7
     2ac:	08 c0       	rjmp	.+16     	; 0x2be <_fpadd_parts+0x1d4>
     2ae:	11 82       	std	Z+1, r1	; 0x01
     2b0:	33 82       	std	Z+3, r3	; 0x03
     2b2:	22 82       	std	Z+2, r2	; 0x02
     2b4:	24 83       	std	Z+4, r18	; 0x04
     2b6:	35 83       	std	Z+5, r19	; 0x05
     2b8:	46 83       	std	Z+6, r20	; 0x06
     2ba:	57 83       	std	Z+7, r21	; 0x07
     2bc:	1d c0       	rjmp	.+58     	; 0x2f8 <_fpadd_parts+0x20e>
     2be:	81 e0       	ldi	r24, 0x01	; 1
     2c0:	81 83       	std	Z+1, r24	; 0x01
     2c2:	33 82       	std	Z+3, r3	; 0x03
     2c4:	22 82       	std	Z+2, r2	; 0x02
     2c6:	88 27       	eor	r24, r24
     2c8:	99 27       	eor	r25, r25
     2ca:	dc 01       	movw	r26, r24
     2cc:	82 1b       	sub	r24, r18
     2ce:	93 0b       	sbc	r25, r19
     2d0:	a4 0b       	sbc	r26, r20
     2d2:	b5 0b       	sbc	r27, r21
     2d4:	84 83       	std	Z+4, r24	; 0x04
     2d6:	95 83       	std	Z+5, r25	; 0x05
     2d8:	a6 83       	std	Z+6, r26	; 0x06
     2da:	b7 83       	std	Z+7, r27	; 0x07
     2dc:	0d c0       	rjmp	.+26     	; 0x2f8 <_fpadd_parts+0x20e>
     2de:	22 0f       	add	r18, r18
     2e0:	33 1f       	adc	r19, r19
     2e2:	44 1f       	adc	r20, r20
     2e4:	55 1f       	adc	r21, r21
     2e6:	24 83       	std	Z+4, r18	; 0x04
     2e8:	35 83       	std	Z+5, r19	; 0x05
     2ea:	46 83       	std	Z+6, r20	; 0x06
     2ec:	57 83       	std	Z+7, r21	; 0x07
     2ee:	82 81       	ldd	r24, Z+2	; 0x02
     2f0:	93 81       	ldd	r25, Z+3	; 0x03
     2f2:	01 97       	sbiw	r24, 0x01	; 1
     2f4:	93 83       	std	Z+3, r25	; 0x03
     2f6:	82 83       	std	Z+2, r24	; 0x02
     2f8:	24 81       	ldd	r18, Z+4	; 0x04
     2fa:	35 81       	ldd	r19, Z+5	; 0x05
     2fc:	46 81       	ldd	r20, Z+6	; 0x06
     2fe:	57 81       	ldd	r21, Z+7	; 0x07
     300:	da 01       	movw	r26, r20
     302:	c9 01       	movw	r24, r18
     304:	01 97       	sbiw	r24, 0x01	; 1
     306:	a1 09       	sbc	r26, r1
     308:	b1 09       	sbc	r27, r1
     30a:	8f 5f       	subi	r24, 0xFF	; 255
     30c:	9f 4f       	sbci	r25, 0xFF	; 255
     30e:	af 4f       	sbci	r26, 0xFF	; 255
     310:	bf 43       	sbci	r27, 0x3F	; 63
     312:	28 f3       	brcs	.-54     	; 0x2de <_fpadd_parts+0x1f4>
     314:	0b c0       	rjmp	.+22     	; 0x32c <_fpadd_parts+0x242>
     316:	91 83       	std	Z+1, r25	; 0x01
     318:	33 82       	std	Z+3, r3	; 0x03
     31a:	22 82       	std	Z+2, r2	; 0x02
     31c:	ea 0c       	add	r14, r10
     31e:	fb 1c       	adc	r15, r11
     320:	0c 1d       	adc	r16, r12
     322:	1d 1d       	adc	r17, r13
     324:	e4 82       	std	Z+4, r14	; 0x04
     326:	f5 82       	std	Z+5, r15	; 0x05
     328:	06 83       	std	Z+6, r16	; 0x06
     32a:	17 83       	std	Z+7, r17	; 0x07
     32c:	83 e0       	ldi	r24, 0x03	; 3
     32e:	80 83       	st	Z, r24
     330:	24 81       	ldd	r18, Z+4	; 0x04
     332:	35 81       	ldd	r19, Z+5	; 0x05
     334:	46 81       	ldd	r20, Z+6	; 0x06
     336:	57 81       	ldd	r21, Z+7	; 0x07
     338:	57 ff       	sbrs	r21, 7
     33a:	1a c0       	rjmp	.+52     	; 0x370 <_fpadd_parts+0x286>
     33c:	c9 01       	movw	r24, r18
     33e:	aa 27       	eor	r26, r26
     340:	97 fd       	sbrc	r25, 7
     342:	a0 95       	com	r26
     344:	ba 2f       	mov	r27, r26
     346:	81 70       	andi	r24, 0x01	; 1
     348:	90 70       	andi	r25, 0x00	; 0
     34a:	a0 70       	andi	r26, 0x00	; 0
     34c:	b0 70       	andi	r27, 0x00	; 0
     34e:	56 95       	lsr	r21
     350:	47 95       	ror	r20
     352:	37 95       	ror	r19
     354:	27 95       	ror	r18
     356:	82 2b       	or	r24, r18
     358:	93 2b       	or	r25, r19
     35a:	a4 2b       	or	r26, r20
     35c:	b5 2b       	or	r27, r21
     35e:	84 83       	std	Z+4, r24	; 0x04
     360:	95 83       	std	Z+5, r25	; 0x05
     362:	a6 83       	std	Z+6, r26	; 0x06
     364:	b7 83       	std	Z+7, r27	; 0x07
     366:	82 81       	ldd	r24, Z+2	; 0x02
     368:	93 81       	ldd	r25, Z+3	; 0x03
     36a:	01 96       	adiw	r24, 0x01	; 1
     36c:	93 83       	std	Z+3, r25	; 0x03
     36e:	82 83       	std	Z+2, r24	; 0x02
     370:	df 01       	movw	r26, r30
     372:	01 c0       	rjmp	.+2      	; 0x376 <_fpadd_parts+0x28c>
     374:	d2 01       	movw	r26, r4
     376:	cd 01       	movw	r24, r26
     378:	cd b7       	in	r28, 0x3d	; 61
     37a:	de b7       	in	r29, 0x3e	; 62
     37c:	e2 e1       	ldi	r30, 0x12	; 18
     37e:	0c 94 24 24 	jmp	0x4848	; 0x4848 <__epilogue_restores__>

00000382 <__subsf3>:
     382:	a0 e2       	ldi	r26, 0x20	; 32
     384:	b0 e0       	ldi	r27, 0x00	; 0
     386:	e7 ec       	ldi	r30, 0xC7	; 199
     388:	f1 e0       	ldi	r31, 0x01	; 1
     38a:	0c 94 14 24 	jmp	0x4828	; 0x4828 <__prologue_saves__+0x18>
     38e:	69 83       	std	Y+1, r22	; 0x01
     390:	7a 83       	std	Y+2, r23	; 0x02
     392:	8b 83       	std	Y+3, r24	; 0x03
     394:	9c 83       	std	Y+4, r25	; 0x04
     396:	2d 83       	std	Y+5, r18	; 0x05
     398:	3e 83       	std	Y+6, r19	; 0x06
     39a:	4f 83       	std	Y+7, r20	; 0x07
     39c:	58 87       	std	Y+8, r21	; 0x08
     39e:	e9 e0       	ldi	r30, 0x09	; 9
     3a0:	ee 2e       	mov	r14, r30
     3a2:	f1 2c       	mov	r15, r1
     3a4:	ec 0e       	add	r14, r28
     3a6:	fd 1e       	adc	r15, r29
     3a8:	ce 01       	movw	r24, r28
     3aa:	01 96       	adiw	r24, 0x01	; 1
     3ac:	b7 01       	movw	r22, r14
     3ae:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     3b2:	8e 01       	movw	r16, r28
     3b4:	0f 5e       	subi	r16, 0xEF	; 239
     3b6:	1f 4f       	sbci	r17, 0xFF	; 255
     3b8:	ce 01       	movw	r24, r28
     3ba:	05 96       	adiw	r24, 0x05	; 5
     3bc:	b8 01       	movw	r22, r16
     3be:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     3c2:	8a 89       	ldd	r24, Y+18	; 0x12
     3c4:	91 e0       	ldi	r25, 0x01	; 1
     3c6:	89 27       	eor	r24, r25
     3c8:	8a 8b       	std	Y+18, r24	; 0x12
     3ca:	c7 01       	movw	r24, r14
     3cc:	b8 01       	movw	r22, r16
     3ce:	ae 01       	movw	r20, r28
     3d0:	47 5e       	subi	r20, 0xE7	; 231
     3d2:	5f 4f       	sbci	r21, 0xFF	; 255
     3d4:	0e 94 75 00 	call	0xea	; 0xea <_fpadd_parts>
     3d8:	0e 94 fd 03 	call	0x7fa	; 0x7fa <__pack_f>
     3dc:	a0 96       	adiw	r28, 0x20	; 32
     3de:	e6 e0       	ldi	r30, 0x06	; 6
     3e0:	0c 94 30 24 	jmp	0x4860	; 0x4860 <__epilogue_restores__+0x18>

000003e4 <__addsf3>:
     3e4:	a0 e2       	ldi	r26, 0x20	; 32
     3e6:	b0 e0       	ldi	r27, 0x00	; 0
     3e8:	e8 ef       	ldi	r30, 0xF8	; 248
     3ea:	f1 e0       	ldi	r31, 0x01	; 1
     3ec:	0c 94 14 24 	jmp	0x4828	; 0x4828 <__prologue_saves__+0x18>
     3f0:	69 83       	std	Y+1, r22	; 0x01
     3f2:	7a 83       	std	Y+2, r23	; 0x02
     3f4:	8b 83       	std	Y+3, r24	; 0x03
     3f6:	9c 83       	std	Y+4, r25	; 0x04
     3f8:	2d 83       	std	Y+5, r18	; 0x05
     3fa:	3e 83       	std	Y+6, r19	; 0x06
     3fc:	4f 83       	std	Y+7, r20	; 0x07
     3fe:	58 87       	std	Y+8, r21	; 0x08
     400:	f9 e0       	ldi	r31, 0x09	; 9
     402:	ef 2e       	mov	r14, r31
     404:	f1 2c       	mov	r15, r1
     406:	ec 0e       	add	r14, r28
     408:	fd 1e       	adc	r15, r29
     40a:	ce 01       	movw	r24, r28
     40c:	01 96       	adiw	r24, 0x01	; 1
     40e:	b7 01       	movw	r22, r14
     410:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     414:	8e 01       	movw	r16, r28
     416:	0f 5e       	subi	r16, 0xEF	; 239
     418:	1f 4f       	sbci	r17, 0xFF	; 255
     41a:	ce 01       	movw	r24, r28
     41c:	05 96       	adiw	r24, 0x05	; 5
     41e:	b8 01       	movw	r22, r16
     420:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     424:	c7 01       	movw	r24, r14
     426:	b8 01       	movw	r22, r16
     428:	ae 01       	movw	r20, r28
     42a:	47 5e       	subi	r20, 0xE7	; 231
     42c:	5f 4f       	sbci	r21, 0xFF	; 255
     42e:	0e 94 75 00 	call	0xea	; 0xea <_fpadd_parts>
     432:	0e 94 fd 03 	call	0x7fa	; 0x7fa <__pack_f>
     436:	a0 96       	adiw	r28, 0x20	; 32
     438:	e6 e0       	ldi	r30, 0x06	; 6
     43a:	0c 94 30 24 	jmp	0x4860	; 0x4860 <__epilogue_restores__+0x18>

0000043e <__mulsf3>:
     43e:	a0 e2       	ldi	r26, 0x20	; 32
     440:	b0 e0       	ldi	r27, 0x00	; 0
     442:	e5 e2       	ldi	r30, 0x25	; 37
     444:	f2 e0       	ldi	r31, 0x02	; 2
     446:	0c 94 08 24 	jmp	0x4810	; 0x4810 <__prologue_saves__>
     44a:	69 83       	std	Y+1, r22	; 0x01
     44c:	7a 83       	std	Y+2, r23	; 0x02
     44e:	8b 83       	std	Y+3, r24	; 0x03
     450:	9c 83       	std	Y+4, r25	; 0x04
     452:	2d 83       	std	Y+5, r18	; 0x05
     454:	3e 83       	std	Y+6, r19	; 0x06
     456:	4f 83       	std	Y+7, r20	; 0x07
     458:	58 87       	std	Y+8, r21	; 0x08
     45a:	ce 01       	movw	r24, r28
     45c:	01 96       	adiw	r24, 0x01	; 1
     45e:	be 01       	movw	r22, r28
     460:	67 5f       	subi	r22, 0xF7	; 247
     462:	7f 4f       	sbci	r23, 0xFF	; 255
     464:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     468:	ce 01       	movw	r24, r28
     46a:	05 96       	adiw	r24, 0x05	; 5
     46c:	be 01       	movw	r22, r28
     46e:	6f 5e       	subi	r22, 0xEF	; 239
     470:	7f 4f       	sbci	r23, 0xFF	; 255
     472:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     476:	99 85       	ldd	r25, Y+9	; 0x09
     478:	92 30       	cpi	r25, 0x02	; 2
     47a:	88 f0       	brcs	.+34     	; 0x49e <__mulsf3+0x60>
     47c:	89 89       	ldd	r24, Y+17	; 0x11
     47e:	82 30       	cpi	r24, 0x02	; 2
     480:	c8 f0       	brcs	.+50     	; 0x4b4 <__mulsf3+0x76>
     482:	94 30       	cpi	r25, 0x04	; 4
     484:	19 f4       	brne	.+6      	; 0x48c <__mulsf3+0x4e>
     486:	82 30       	cpi	r24, 0x02	; 2
     488:	51 f4       	brne	.+20     	; 0x49e <__mulsf3+0x60>
     48a:	04 c0       	rjmp	.+8      	; 0x494 <__mulsf3+0x56>
     48c:	84 30       	cpi	r24, 0x04	; 4
     48e:	29 f4       	brne	.+10     	; 0x49a <__mulsf3+0x5c>
     490:	92 30       	cpi	r25, 0x02	; 2
     492:	81 f4       	brne	.+32     	; 0x4b4 <__mulsf3+0x76>
     494:	8a e6       	ldi	r24, 0x6A	; 106
     496:	90 e0       	ldi	r25, 0x00	; 0
     498:	c6 c0       	rjmp	.+396    	; 0x626 <__mulsf3+0x1e8>
     49a:	92 30       	cpi	r25, 0x02	; 2
     49c:	49 f4       	brne	.+18     	; 0x4b0 <__mulsf3+0x72>
     49e:	20 e0       	ldi	r18, 0x00	; 0
     4a0:	9a 85       	ldd	r25, Y+10	; 0x0a
     4a2:	8a 89       	ldd	r24, Y+18	; 0x12
     4a4:	98 13       	cpse	r25, r24
     4a6:	21 e0       	ldi	r18, 0x01	; 1
     4a8:	2a 87       	std	Y+10, r18	; 0x0a
     4aa:	ce 01       	movw	r24, r28
     4ac:	09 96       	adiw	r24, 0x09	; 9
     4ae:	bb c0       	rjmp	.+374    	; 0x626 <__mulsf3+0x1e8>
     4b0:	82 30       	cpi	r24, 0x02	; 2
     4b2:	49 f4       	brne	.+18     	; 0x4c6 <__mulsf3+0x88>
     4b4:	20 e0       	ldi	r18, 0x00	; 0
     4b6:	9a 85       	ldd	r25, Y+10	; 0x0a
     4b8:	8a 89       	ldd	r24, Y+18	; 0x12
     4ba:	98 13       	cpse	r25, r24
     4bc:	21 e0       	ldi	r18, 0x01	; 1
     4be:	2a 8b       	std	Y+18, r18	; 0x12
     4c0:	ce 01       	movw	r24, r28
     4c2:	41 96       	adiw	r24, 0x11	; 17
     4c4:	b0 c0       	rjmp	.+352    	; 0x626 <__mulsf3+0x1e8>
     4c6:	2d 84       	ldd	r2, Y+13	; 0x0d
     4c8:	3e 84       	ldd	r3, Y+14	; 0x0e
     4ca:	4f 84       	ldd	r4, Y+15	; 0x0f
     4cc:	58 88       	ldd	r5, Y+16	; 0x10
     4ce:	6d 88       	ldd	r6, Y+21	; 0x15
     4d0:	7e 88       	ldd	r7, Y+22	; 0x16
     4d2:	8f 88       	ldd	r8, Y+23	; 0x17
     4d4:	98 8c       	ldd	r9, Y+24	; 0x18
     4d6:	ee 24       	eor	r14, r14
     4d8:	ff 24       	eor	r15, r15
     4da:	87 01       	movw	r16, r14
     4dc:	aa 24       	eor	r10, r10
     4de:	bb 24       	eor	r11, r11
     4e0:	65 01       	movw	r12, r10
     4e2:	40 e0       	ldi	r20, 0x00	; 0
     4e4:	50 e0       	ldi	r21, 0x00	; 0
     4e6:	60 e0       	ldi	r22, 0x00	; 0
     4e8:	70 e0       	ldi	r23, 0x00	; 0
     4ea:	e0 e0       	ldi	r30, 0x00	; 0
     4ec:	f0 e0       	ldi	r31, 0x00	; 0
     4ee:	c1 01       	movw	r24, r2
     4f0:	81 70       	andi	r24, 0x01	; 1
     4f2:	90 70       	andi	r25, 0x00	; 0
     4f4:	89 2b       	or	r24, r25
     4f6:	e9 f0       	breq	.+58     	; 0x532 <__mulsf3+0xf4>
     4f8:	e6 0c       	add	r14, r6
     4fa:	f7 1c       	adc	r15, r7
     4fc:	08 1d       	adc	r16, r8
     4fe:	19 1d       	adc	r17, r9
     500:	9a 01       	movw	r18, r20
     502:	ab 01       	movw	r20, r22
     504:	2a 0d       	add	r18, r10
     506:	3b 1d       	adc	r19, r11
     508:	4c 1d       	adc	r20, r12
     50a:	5d 1d       	adc	r21, r13
     50c:	80 e0       	ldi	r24, 0x00	; 0
     50e:	90 e0       	ldi	r25, 0x00	; 0
     510:	a0 e0       	ldi	r26, 0x00	; 0
     512:	b0 e0       	ldi	r27, 0x00	; 0
     514:	e6 14       	cp	r14, r6
     516:	f7 04       	cpc	r15, r7
     518:	08 05       	cpc	r16, r8
     51a:	19 05       	cpc	r17, r9
     51c:	20 f4       	brcc	.+8      	; 0x526 <__mulsf3+0xe8>
     51e:	81 e0       	ldi	r24, 0x01	; 1
     520:	90 e0       	ldi	r25, 0x00	; 0
     522:	a0 e0       	ldi	r26, 0x00	; 0
     524:	b0 e0       	ldi	r27, 0x00	; 0
     526:	ba 01       	movw	r22, r20
     528:	a9 01       	movw	r20, r18
     52a:	48 0f       	add	r20, r24
     52c:	59 1f       	adc	r21, r25
     52e:	6a 1f       	adc	r22, r26
     530:	7b 1f       	adc	r23, r27
     532:	aa 0c       	add	r10, r10
     534:	bb 1c       	adc	r11, r11
     536:	cc 1c       	adc	r12, r12
     538:	dd 1c       	adc	r13, r13
     53a:	97 fe       	sbrs	r9, 7
     53c:	08 c0       	rjmp	.+16     	; 0x54e <__mulsf3+0x110>
     53e:	81 e0       	ldi	r24, 0x01	; 1
     540:	90 e0       	ldi	r25, 0x00	; 0
     542:	a0 e0       	ldi	r26, 0x00	; 0
     544:	b0 e0       	ldi	r27, 0x00	; 0
     546:	a8 2a       	or	r10, r24
     548:	b9 2a       	or	r11, r25
     54a:	ca 2a       	or	r12, r26
     54c:	db 2a       	or	r13, r27
     54e:	31 96       	adiw	r30, 0x01	; 1
     550:	e0 32       	cpi	r30, 0x20	; 32
     552:	f1 05       	cpc	r31, r1
     554:	49 f0       	breq	.+18     	; 0x568 <__mulsf3+0x12a>
     556:	66 0c       	add	r6, r6
     558:	77 1c       	adc	r7, r7
     55a:	88 1c       	adc	r8, r8
     55c:	99 1c       	adc	r9, r9
     55e:	56 94       	lsr	r5
     560:	47 94       	ror	r4
     562:	37 94       	ror	r3
     564:	27 94       	ror	r2
     566:	c3 cf       	rjmp	.-122    	; 0x4ee <__mulsf3+0xb0>
     568:	fa 85       	ldd	r31, Y+10	; 0x0a
     56a:	ea 89       	ldd	r30, Y+18	; 0x12
     56c:	2b 89       	ldd	r18, Y+19	; 0x13
     56e:	3c 89       	ldd	r19, Y+20	; 0x14
     570:	8b 85       	ldd	r24, Y+11	; 0x0b
     572:	9c 85       	ldd	r25, Y+12	; 0x0c
     574:	28 0f       	add	r18, r24
     576:	39 1f       	adc	r19, r25
     578:	2e 5f       	subi	r18, 0xFE	; 254
     57a:	3f 4f       	sbci	r19, 0xFF	; 255
     57c:	17 c0       	rjmp	.+46     	; 0x5ac <__mulsf3+0x16e>
     57e:	ca 01       	movw	r24, r20
     580:	81 70       	andi	r24, 0x01	; 1
     582:	90 70       	andi	r25, 0x00	; 0
     584:	89 2b       	or	r24, r25
     586:	61 f0       	breq	.+24     	; 0x5a0 <__mulsf3+0x162>
     588:	16 95       	lsr	r17
     58a:	07 95       	ror	r16
     58c:	f7 94       	ror	r15
     58e:	e7 94       	ror	r14
     590:	80 e0       	ldi	r24, 0x00	; 0
     592:	90 e0       	ldi	r25, 0x00	; 0
     594:	a0 e0       	ldi	r26, 0x00	; 0
     596:	b0 e8       	ldi	r27, 0x80	; 128
     598:	e8 2a       	or	r14, r24
     59a:	f9 2a       	or	r15, r25
     59c:	0a 2b       	or	r16, r26
     59e:	1b 2b       	or	r17, r27
     5a0:	76 95       	lsr	r23
     5a2:	67 95       	ror	r22
     5a4:	57 95       	ror	r21
     5a6:	47 95       	ror	r20
     5a8:	2f 5f       	subi	r18, 0xFF	; 255
     5aa:	3f 4f       	sbci	r19, 0xFF	; 255
     5ac:	77 fd       	sbrc	r23, 7
     5ae:	e7 cf       	rjmp	.-50     	; 0x57e <__mulsf3+0x140>
     5b0:	0c c0       	rjmp	.+24     	; 0x5ca <__mulsf3+0x18c>
     5b2:	44 0f       	add	r20, r20
     5b4:	55 1f       	adc	r21, r21
     5b6:	66 1f       	adc	r22, r22
     5b8:	77 1f       	adc	r23, r23
     5ba:	17 fd       	sbrc	r17, 7
     5bc:	41 60       	ori	r20, 0x01	; 1
     5be:	ee 0c       	add	r14, r14
     5c0:	ff 1c       	adc	r15, r15
     5c2:	00 1f       	adc	r16, r16
     5c4:	11 1f       	adc	r17, r17
     5c6:	21 50       	subi	r18, 0x01	; 1
     5c8:	30 40       	sbci	r19, 0x00	; 0
     5ca:	40 30       	cpi	r20, 0x00	; 0
     5cc:	90 e0       	ldi	r25, 0x00	; 0
     5ce:	59 07       	cpc	r21, r25
     5d0:	90 e0       	ldi	r25, 0x00	; 0
     5d2:	69 07       	cpc	r22, r25
     5d4:	90 e4       	ldi	r25, 0x40	; 64
     5d6:	79 07       	cpc	r23, r25
     5d8:	60 f3       	brcs	.-40     	; 0x5b2 <__mulsf3+0x174>
     5da:	2b 8f       	std	Y+27, r18	; 0x1b
     5dc:	3c 8f       	std	Y+28, r19	; 0x1c
     5de:	db 01       	movw	r26, r22
     5e0:	ca 01       	movw	r24, r20
     5e2:	8f 77       	andi	r24, 0x7F	; 127
     5e4:	90 70       	andi	r25, 0x00	; 0
     5e6:	a0 70       	andi	r26, 0x00	; 0
     5e8:	b0 70       	andi	r27, 0x00	; 0
     5ea:	80 34       	cpi	r24, 0x40	; 64
     5ec:	91 05       	cpc	r25, r1
     5ee:	a1 05       	cpc	r26, r1
     5f0:	b1 05       	cpc	r27, r1
     5f2:	61 f4       	brne	.+24     	; 0x60c <__mulsf3+0x1ce>
     5f4:	47 fd       	sbrc	r20, 7
     5f6:	0a c0       	rjmp	.+20     	; 0x60c <__mulsf3+0x1ce>
     5f8:	e1 14       	cp	r14, r1
     5fa:	f1 04       	cpc	r15, r1
     5fc:	01 05       	cpc	r16, r1
     5fe:	11 05       	cpc	r17, r1
     600:	29 f0       	breq	.+10     	; 0x60c <__mulsf3+0x1ce>
     602:	40 5c       	subi	r20, 0xC0	; 192
     604:	5f 4f       	sbci	r21, 0xFF	; 255
     606:	6f 4f       	sbci	r22, 0xFF	; 255
     608:	7f 4f       	sbci	r23, 0xFF	; 255
     60a:	40 78       	andi	r20, 0x80	; 128
     60c:	1a 8e       	std	Y+26, r1	; 0x1a
     60e:	fe 17       	cp	r31, r30
     610:	11 f0       	breq	.+4      	; 0x616 <__mulsf3+0x1d8>
     612:	81 e0       	ldi	r24, 0x01	; 1
     614:	8a 8f       	std	Y+26, r24	; 0x1a
     616:	4d 8f       	std	Y+29, r20	; 0x1d
     618:	5e 8f       	std	Y+30, r21	; 0x1e
     61a:	6f 8f       	std	Y+31, r22	; 0x1f
     61c:	78 a3       	std	Y+32, r23	; 0x20
     61e:	83 e0       	ldi	r24, 0x03	; 3
     620:	89 8f       	std	Y+25, r24	; 0x19
     622:	ce 01       	movw	r24, r28
     624:	49 96       	adiw	r24, 0x19	; 25
     626:	0e 94 fd 03 	call	0x7fa	; 0x7fa <__pack_f>
     62a:	a0 96       	adiw	r28, 0x20	; 32
     62c:	e2 e1       	ldi	r30, 0x12	; 18
     62e:	0c 94 24 24 	jmp	0x4848	; 0x4848 <__epilogue_restores__>

00000632 <__gtsf2>:
     632:	a8 e1       	ldi	r26, 0x18	; 24
     634:	b0 e0       	ldi	r27, 0x00	; 0
     636:	ef e1       	ldi	r30, 0x1F	; 31
     638:	f3 e0       	ldi	r31, 0x03	; 3
     63a:	0c 94 14 24 	jmp	0x4828	; 0x4828 <__prologue_saves__+0x18>
     63e:	69 83       	std	Y+1, r22	; 0x01
     640:	7a 83       	std	Y+2, r23	; 0x02
     642:	8b 83       	std	Y+3, r24	; 0x03
     644:	9c 83       	std	Y+4, r25	; 0x04
     646:	2d 83       	std	Y+5, r18	; 0x05
     648:	3e 83       	std	Y+6, r19	; 0x06
     64a:	4f 83       	std	Y+7, r20	; 0x07
     64c:	58 87       	std	Y+8, r21	; 0x08
     64e:	89 e0       	ldi	r24, 0x09	; 9
     650:	e8 2e       	mov	r14, r24
     652:	f1 2c       	mov	r15, r1
     654:	ec 0e       	add	r14, r28
     656:	fd 1e       	adc	r15, r29
     658:	ce 01       	movw	r24, r28
     65a:	01 96       	adiw	r24, 0x01	; 1
     65c:	b7 01       	movw	r22, r14
     65e:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     662:	8e 01       	movw	r16, r28
     664:	0f 5e       	subi	r16, 0xEF	; 239
     666:	1f 4f       	sbci	r17, 0xFF	; 255
     668:	ce 01       	movw	r24, r28
     66a:	05 96       	adiw	r24, 0x05	; 5
     66c:	b8 01       	movw	r22, r16
     66e:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     672:	89 85       	ldd	r24, Y+9	; 0x09
     674:	82 30       	cpi	r24, 0x02	; 2
     676:	40 f0       	brcs	.+16     	; 0x688 <__gtsf2+0x56>
     678:	89 89       	ldd	r24, Y+17	; 0x11
     67a:	82 30       	cpi	r24, 0x02	; 2
     67c:	28 f0       	brcs	.+10     	; 0x688 <__gtsf2+0x56>
     67e:	c7 01       	movw	r24, r14
     680:	b8 01       	movw	r22, r16
     682:	0e 94 4a 05 	call	0xa94	; 0xa94 <__fpcmp_parts_f>
     686:	01 c0       	rjmp	.+2      	; 0x68a <__gtsf2+0x58>
     688:	8f ef       	ldi	r24, 0xFF	; 255
     68a:	68 96       	adiw	r28, 0x18	; 24
     68c:	e6 e0       	ldi	r30, 0x06	; 6
     68e:	0c 94 30 24 	jmp	0x4860	; 0x4860 <__epilogue_restores__+0x18>

00000692 <__gesf2>:
     692:	a8 e1       	ldi	r26, 0x18	; 24
     694:	b0 e0       	ldi	r27, 0x00	; 0
     696:	ef e4       	ldi	r30, 0x4F	; 79
     698:	f3 e0       	ldi	r31, 0x03	; 3
     69a:	0c 94 14 24 	jmp	0x4828	; 0x4828 <__prologue_saves__+0x18>
     69e:	69 83       	std	Y+1, r22	; 0x01
     6a0:	7a 83       	std	Y+2, r23	; 0x02
     6a2:	8b 83       	std	Y+3, r24	; 0x03
     6a4:	9c 83       	std	Y+4, r25	; 0x04
     6a6:	2d 83       	std	Y+5, r18	; 0x05
     6a8:	3e 83       	std	Y+6, r19	; 0x06
     6aa:	4f 83       	std	Y+7, r20	; 0x07
     6ac:	58 87       	std	Y+8, r21	; 0x08
     6ae:	89 e0       	ldi	r24, 0x09	; 9
     6b0:	e8 2e       	mov	r14, r24
     6b2:	f1 2c       	mov	r15, r1
     6b4:	ec 0e       	add	r14, r28
     6b6:	fd 1e       	adc	r15, r29
     6b8:	ce 01       	movw	r24, r28
     6ba:	01 96       	adiw	r24, 0x01	; 1
     6bc:	b7 01       	movw	r22, r14
     6be:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     6c2:	8e 01       	movw	r16, r28
     6c4:	0f 5e       	subi	r16, 0xEF	; 239
     6c6:	1f 4f       	sbci	r17, 0xFF	; 255
     6c8:	ce 01       	movw	r24, r28
     6ca:	05 96       	adiw	r24, 0x05	; 5
     6cc:	b8 01       	movw	r22, r16
     6ce:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     6d2:	89 85       	ldd	r24, Y+9	; 0x09
     6d4:	82 30       	cpi	r24, 0x02	; 2
     6d6:	40 f0       	brcs	.+16     	; 0x6e8 <__gesf2+0x56>
     6d8:	89 89       	ldd	r24, Y+17	; 0x11
     6da:	82 30       	cpi	r24, 0x02	; 2
     6dc:	28 f0       	brcs	.+10     	; 0x6e8 <__gesf2+0x56>
     6de:	c7 01       	movw	r24, r14
     6e0:	b8 01       	movw	r22, r16
     6e2:	0e 94 4a 05 	call	0xa94	; 0xa94 <__fpcmp_parts_f>
     6e6:	01 c0       	rjmp	.+2      	; 0x6ea <__gesf2+0x58>
     6e8:	8f ef       	ldi	r24, 0xFF	; 255
     6ea:	68 96       	adiw	r28, 0x18	; 24
     6ec:	e6 e0       	ldi	r30, 0x06	; 6
     6ee:	0c 94 30 24 	jmp	0x4860	; 0x4860 <__epilogue_restores__+0x18>

000006f2 <__ltsf2>:
     6f2:	a8 e1       	ldi	r26, 0x18	; 24
     6f4:	b0 e0       	ldi	r27, 0x00	; 0
     6f6:	ef e7       	ldi	r30, 0x7F	; 127
     6f8:	f3 e0       	ldi	r31, 0x03	; 3
     6fa:	0c 94 14 24 	jmp	0x4828	; 0x4828 <__prologue_saves__+0x18>
     6fe:	69 83       	std	Y+1, r22	; 0x01
     700:	7a 83       	std	Y+2, r23	; 0x02
     702:	8b 83       	std	Y+3, r24	; 0x03
     704:	9c 83       	std	Y+4, r25	; 0x04
     706:	2d 83       	std	Y+5, r18	; 0x05
     708:	3e 83       	std	Y+6, r19	; 0x06
     70a:	4f 83       	std	Y+7, r20	; 0x07
     70c:	58 87       	std	Y+8, r21	; 0x08
     70e:	89 e0       	ldi	r24, 0x09	; 9
     710:	e8 2e       	mov	r14, r24
     712:	f1 2c       	mov	r15, r1
     714:	ec 0e       	add	r14, r28
     716:	fd 1e       	adc	r15, r29
     718:	ce 01       	movw	r24, r28
     71a:	01 96       	adiw	r24, 0x01	; 1
     71c:	b7 01       	movw	r22, r14
     71e:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     722:	8e 01       	movw	r16, r28
     724:	0f 5e       	subi	r16, 0xEF	; 239
     726:	1f 4f       	sbci	r17, 0xFF	; 255
     728:	ce 01       	movw	r24, r28
     72a:	05 96       	adiw	r24, 0x05	; 5
     72c:	b8 01       	movw	r22, r16
     72e:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     732:	89 85       	ldd	r24, Y+9	; 0x09
     734:	82 30       	cpi	r24, 0x02	; 2
     736:	40 f0       	brcs	.+16     	; 0x748 <__ltsf2+0x56>
     738:	89 89       	ldd	r24, Y+17	; 0x11
     73a:	82 30       	cpi	r24, 0x02	; 2
     73c:	28 f0       	brcs	.+10     	; 0x748 <__ltsf2+0x56>
     73e:	c7 01       	movw	r24, r14
     740:	b8 01       	movw	r22, r16
     742:	0e 94 4a 05 	call	0xa94	; 0xa94 <__fpcmp_parts_f>
     746:	01 c0       	rjmp	.+2      	; 0x74a <__ltsf2+0x58>
     748:	81 e0       	ldi	r24, 0x01	; 1
     74a:	68 96       	adiw	r28, 0x18	; 24
     74c:	e6 e0       	ldi	r30, 0x06	; 6
     74e:	0c 94 30 24 	jmp	0x4860	; 0x4860 <__epilogue_restores__+0x18>

00000752 <__fixsfsi>:
     752:	ac e0       	ldi	r26, 0x0C	; 12
     754:	b0 e0       	ldi	r27, 0x00	; 0
     756:	ef ea       	ldi	r30, 0xAF	; 175
     758:	f3 e0       	ldi	r31, 0x03	; 3
     75a:	0c 94 18 24 	jmp	0x4830	; 0x4830 <__prologue_saves__+0x20>
     75e:	69 83       	std	Y+1, r22	; 0x01
     760:	7a 83       	std	Y+2, r23	; 0x02
     762:	8b 83       	std	Y+3, r24	; 0x03
     764:	9c 83       	std	Y+4, r25	; 0x04
     766:	ce 01       	movw	r24, r28
     768:	01 96       	adiw	r24, 0x01	; 1
     76a:	be 01       	movw	r22, r28
     76c:	6b 5f       	subi	r22, 0xFB	; 251
     76e:	7f 4f       	sbci	r23, 0xFF	; 255
     770:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     774:	8d 81       	ldd	r24, Y+5	; 0x05
     776:	82 30       	cpi	r24, 0x02	; 2
     778:	61 f1       	breq	.+88     	; 0x7d2 <__fixsfsi+0x80>
     77a:	82 30       	cpi	r24, 0x02	; 2
     77c:	50 f1       	brcs	.+84     	; 0x7d2 <__fixsfsi+0x80>
     77e:	84 30       	cpi	r24, 0x04	; 4
     780:	21 f4       	brne	.+8      	; 0x78a <__fixsfsi+0x38>
     782:	8e 81       	ldd	r24, Y+6	; 0x06
     784:	88 23       	and	r24, r24
     786:	51 f1       	breq	.+84     	; 0x7dc <__fixsfsi+0x8a>
     788:	2e c0       	rjmp	.+92     	; 0x7e6 <__fixsfsi+0x94>
     78a:	2f 81       	ldd	r18, Y+7	; 0x07
     78c:	38 85       	ldd	r19, Y+8	; 0x08
     78e:	37 fd       	sbrc	r19, 7
     790:	20 c0       	rjmp	.+64     	; 0x7d2 <__fixsfsi+0x80>
     792:	6e 81       	ldd	r22, Y+6	; 0x06
     794:	2f 31       	cpi	r18, 0x1F	; 31
     796:	31 05       	cpc	r19, r1
     798:	1c f0       	brlt	.+6      	; 0x7a0 <__fixsfsi+0x4e>
     79a:	66 23       	and	r22, r22
     79c:	f9 f0       	breq	.+62     	; 0x7dc <__fixsfsi+0x8a>
     79e:	23 c0       	rjmp	.+70     	; 0x7e6 <__fixsfsi+0x94>
     7a0:	8e e1       	ldi	r24, 0x1E	; 30
     7a2:	90 e0       	ldi	r25, 0x00	; 0
     7a4:	82 1b       	sub	r24, r18
     7a6:	93 0b       	sbc	r25, r19
     7a8:	29 85       	ldd	r18, Y+9	; 0x09
     7aa:	3a 85       	ldd	r19, Y+10	; 0x0a
     7ac:	4b 85       	ldd	r20, Y+11	; 0x0b
     7ae:	5c 85       	ldd	r21, Y+12	; 0x0c
     7b0:	04 c0       	rjmp	.+8      	; 0x7ba <__fixsfsi+0x68>
     7b2:	56 95       	lsr	r21
     7b4:	47 95       	ror	r20
     7b6:	37 95       	ror	r19
     7b8:	27 95       	ror	r18
     7ba:	8a 95       	dec	r24
     7bc:	d2 f7       	brpl	.-12     	; 0x7b2 <__fixsfsi+0x60>
     7be:	66 23       	and	r22, r22
     7c0:	b1 f0       	breq	.+44     	; 0x7ee <__fixsfsi+0x9c>
     7c2:	50 95       	com	r21
     7c4:	40 95       	com	r20
     7c6:	30 95       	com	r19
     7c8:	21 95       	neg	r18
     7ca:	3f 4f       	sbci	r19, 0xFF	; 255
     7cc:	4f 4f       	sbci	r20, 0xFF	; 255
     7ce:	5f 4f       	sbci	r21, 0xFF	; 255
     7d0:	0e c0       	rjmp	.+28     	; 0x7ee <__fixsfsi+0x9c>
     7d2:	20 e0       	ldi	r18, 0x00	; 0
     7d4:	30 e0       	ldi	r19, 0x00	; 0
     7d6:	40 e0       	ldi	r20, 0x00	; 0
     7d8:	50 e0       	ldi	r21, 0x00	; 0
     7da:	09 c0       	rjmp	.+18     	; 0x7ee <__fixsfsi+0x9c>
     7dc:	2f ef       	ldi	r18, 0xFF	; 255
     7de:	3f ef       	ldi	r19, 0xFF	; 255
     7e0:	4f ef       	ldi	r20, 0xFF	; 255
     7e2:	5f e7       	ldi	r21, 0x7F	; 127
     7e4:	04 c0       	rjmp	.+8      	; 0x7ee <__fixsfsi+0x9c>
     7e6:	20 e0       	ldi	r18, 0x00	; 0
     7e8:	30 e0       	ldi	r19, 0x00	; 0
     7ea:	40 e0       	ldi	r20, 0x00	; 0
     7ec:	50 e8       	ldi	r21, 0x80	; 128
     7ee:	b9 01       	movw	r22, r18
     7f0:	ca 01       	movw	r24, r20
     7f2:	2c 96       	adiw	r28, 0x0c	; 12
     7f4:	e2 e0       	ldi	r30, 0x02	; 2
     7f6:	0c 94 34 24 	jmp	0x4868	; 0x4868 <__epilogue_restores__+0x20>

000007fa <__pack_f>:
     7fa:	df 92       	push	r13
     7fc:	ef 92       	push	r14
     7fe:	ff 92       	push	r15
     800:	0f 93       	push	r16
     802:	1f 93       	push	r17
     804:	fc 01       	movw	r30, r24
     806:	e4 80       	ldd	r14, Z+4	; 0x04
     808:	f5 80       	ldd	r15, Z+5	; 0x05
     80a:	06 81       	ldd	r16, Z+6	; 0x06
     80c:	17 81       	ldd	r17, Z+7	; 0x07
     80e:	d1 80       	ldd	r13, Z+1	; 0x01
     810:	80 81       	ld	r24, Z
     812:	82 30       	cpi	r24, 0x02	; 2
     814:	48 f4       	brcc	.+18     	; 0x828 <__pack_f+0x2e>
     816:	80 e0       	ldi	r24, 0x00	; 0
     818:	90 e0       	ldi	r25, 0x00	; 0
     81a:	a0 e1       	ldi	r26, 0x10	; 16
     81c:	b0 e0       	ldi	r27, 0x00	; 0
     81e:	e8 2a       	or	r14, r24
     820:	f9 2a       	or	r15, r25
     822:	0a 2b       	or	r16, r26
     824:	1b 2b       	or	r17, r27
     826:	a5 c0       	rjmp	.+330    	; 0x972 <__stack+0x113>
     828:	84 30       	cpi	r24, 0x04	; 4
     82a:	09 f4       	brne	.+2      	; 0x82e <__pack_f+0x34>
     82c:	9f c0       	rjmp	.+318    	; 0x96c <__stack+0x10d>
     82e:	82 30       	cpi	r24, 0x02	; 2
     830:	21 f4       	brne	.+8      	; 0x83a <__pack_f+0x40>
     832:	ee 24       	eor	r14, r14
     834:	ff 24       	eor	r15, r15
     836:	87 01       	movw	r16, r14
     838:	05 c0       	rjmp	.+10     	; 0x844 <__pack_f+0x4a>
     83a:	e1 14       	cp	r14, r1
     83c:	f1 04       	cpc	r15, r1
     83e:	01 05       	cpc	r16, r1
     840:	11 05       	cpc	r17, r1
     842:	19 f4       	brne	.+6      	; 0x84a <__pack_f+0x50>
     844:	e0 e0       	ldi	r30, 0x00	; 0
     846:	f0 e0       	ldi	r31, 0x00	; 0
     848:	96 c0       	rjmp	.+300    	; 0x976 <__stack+0x117>
     84a:	62 81       	ldd	r22, Z+2	; 0x02
     84c:	73 81       	ldd	r23, Z+3	; 0x03
     84e:	9f ef       	ldi	r25, 0xFF	; 255
     850:	62 38       	cpi	r22, 0x82	; 130
     852:	79 07       	cpc	r23, r25
     854:	0c f0       	brlt	.+2      	; 0x858 <__pack_f+0x5e>
     856:	5b c0       	rjmp	.+182    	; 0x90e <__stack+0xaf>
     858:	22 e8       	ldi	r18, 0x82	; 130
     85a:	3f ef       	ldi	r19, 0xFF	; 255
     85c:	26 1b       	sub	r18, r22
     85e:	37 0b       	sbc	r19, r23
     860:	2a 31       	cpi	r18, 0x1A	; 26
     862:	31 05       	cpc	r19, r1
     864:	2c f0       	brlt	.+10     	; 0x870 <__stack+0x11>
     866:	20 e0       	ldi	r18, 0x00	; 0
     868:	30 e0       	ldi	r19, 0x00	; 0
     86a:	40 e0       	ldi	r20, 0x00	; 0
     86c:	50 e0       	ldi	r21, 0x00	; 0
     86e:	2a c0       	rjmp	.+84     	; 0x8c4 <__stack+0x65>
     870:	b8 01       	movw	r22, r16
     872:	a7 01       	movw	r20, r14
     874:	02 2e       	mov	r0, r18
     876:	04 c0       	rjmp	.+8      	; 0x880 <__stack+0x21>
     878:	76 95       	lsr	r23
     87a:	67 95       	ror	r22
     87c:	57 95       	ror	r21
     87e:	47 95       	ror	r20
     880:	0a 94       	dec	r0
     882:	d2 f7       	brpl	.-12     	; 0x878 <__stack+0x19>
     884:	81 e0       	ldi	r24, 0x01	; 1
     886:	90 e0       	ldi	r25, 0x00	; 0
     888:	a0 e0       	ldi	r26, 0x00	; 0
     88a:	b0 e0       	ldi	r27, 0x00	; 0
     88c:	04 c0       	rjmp	.+8      	; 0x896 <__stack+0x37>
     88e:	88 0f       	add	r24, r24
     890:	99 1f       	adc	r25, r25
     892:	aa 1f       	adc	r26, r26
     894:	bb 1f       	adc	r27, r27
     896:	2a 95       	dec	r18
     898:	d2 f7       	brpl	.-12     	; 0x88e <__stack+0x2f>
     89a:	01 97       	sbiw	r24, 0x01	; 1
     89c:	a1 09       	sbc	r26, r1
     89e:	b1 09       	sbc	r27, r1
     8a0:	8e 21       	and	r24, r14
     8a2:	9f 21       	and	r25, r15
     8a4:	a0 23       	and	r26, r16
     8a6:	b1 23       	and	r27, r17
     8a8:	00 97       	sbiw	r24, 0x00	; 0
     8aa:	a1 05       	cpc	r26, r1
     8ac:	b1 05       	cpc	r27, r1
     8ae:	21 f0       	breq	.+8      	; 0x8b8 <__stack+0x59>
     8b0:	81 e0       	ldi	r24, 0x01	; 1
     8b2:	90 e0       	ldi	r25, 0x00	; 0
     8b4:	a0 e0       	ldi	r26, 0x00	; 0
     8b6:	b0 e0       	ldi	r27, 0x00	; 0
     8b8:	9a 01       	movw	r18, r20
     8ba:	ab 01       	movw	r20, r22
     8bc:	28 2b       	or	r18, r24
     8be:	39 2b       	or	r19, r25
     8c0:	4a 2b       	or	r20, r26
     8c2:	5b 2b       	or	r21, r27
     8c4:	da 01       	movw	r26, r20
     8c6:	c9 01       	movw	r24, r18
     8c8:	8f 77       	andi	r24, 0x7F	; 127
     8ca:	90 70       	andi	r25, 0x00	; 0
     8cc:	a0 70       	andi	r26, 0x00	; 0
     8ce:	b0 70       	andi	r27, 0x00	; 0
     8d0:	80 34       	cpi	r24, 0x40	; 64
     8d2:	91 05       	cpc	r25, r1
     8d4:	a1 05       	cpc	r26, r1
     8d6:	b1 05       	cpc	r27, r1
     8d8:	39 f4       	brne	.+14     	; 0x8e8 <__stack+0x89>
     8da:	27 ff       	sbrs	r18, 7
     8dc:	09 c0       	rjmp	.+18     	; 0x8f0 <__stack+0x91>
     8de:	20 5c       	subi	r18, 0xC0	; 192
     8e0:	3f 4f       	sbci	r19, 0xFF	; 255
     8e2:	4f 4f       	sbci	r20, 0xFF	; 255
     8e4:	5f 4f       	sbci	r21, 0xFF	; 255
     8e6:	04 c0       	rjmp	.+8      	; 0x8f0 <__stack+0x91>
     8e8:	21 5c       	subi	r18, 0xC1	; 193
     8ea:	3f 4f       	sbci	r19, 0xFF	; 255
     8ec:	4f 4f       	sbci	r20, 0xFF	; 255
     8ee:	5f 4f       	sbci	r21, 0xFF	; 255
     8f0:	e0 e0       	ldi	r30, 0x00	; 0
     8f2:	f0 e0       	ldi	r31, 0x00	; 0
     8f4:	20 30       	cpi	r18, 0x00	; 0
     8f6:	a0 e0       	ldi	r26, 0x00	; 0
     8f8:	3a 07       	cpc	r19, r26
     8fa:	a0 e0       	ldi	r26, 0x00	; 0
     8fc:	4a 07       	cpc	r20, r26
     8fe:	a0 e4       	ldi	r26, 0x40	; 64
     900:	5a 07       	cpc	r21, r26
     902:	10 f0       	brcs	.+4      	; 0x908 <__stack+0xa9>
     904:	e1 e0       	ldi	r30, 0x01	; 1
     906:	f0 e0       	ldi	r31, 0x00	; 0
     908:	79 01       	movw	r14, r18
     90a:	8a 01       	movw	r16, r20
     90c:	27 c0       	rjmp	.+78     	; 0x95c <__stack+0xfd>
     90e:	60 38       	cpi	r22, 0x80	; 128
     910:	71 05       	cpc	r23, r1
     912:	64 f5       	brge	.+88     	; 0x96c <__stack+0x10d>
     914:	fb 01       	movw	r30, r22
     916:	e1 58       	subi	r30, 0x81	; 129
     918:	ff 4f       	sbci	r31, 0xFF	; 255
     91a:	d8 01       	movw	r26, r16
     91c:	c7 01       	movw	r24, r14
     91e:	8f 77       	andi	r24, 0x7F	; 127
     920:	90 70       	andi	r25, 0x00	; 0
     922:	a0 70       	andi	r26, 0x00	; 0
     924:	b0 70       	andi	r27, 0x00	; 0
     926:	80 34       	cpi	r24, 0x40	; 64
     928:	91 05       	cpc	r25, r1
     92a:	a1 05       	cpc	r26, r1
     92c:	b1 05       	cpc	r27, r1
     92e:	39 f4       	brne	.+14     	; 0x93e <__stack+0xdf>
     930:	e7 fe       	sbrs	r14, 7
     932:	0d c0       	rjmp	.+26     	; 0x94e <__stack+0xef>
     934:	80 e4       	ldi	r24, 0x40	; 64
     936:	90 e0       	ldi	r25, 0x00	; 0
     938:	a0 e0       	ldi	r26, 0x00	; 0
     93a:	b0 e0       	ldi	r27, 0x00	; 0
     93c:	04 c0       	rjmp	.+8      	; 0x946 <__stack+0xe7>
     93e:	8f e3       	ldi	r24, 0x3F	; 63
     940:	90 e0       	ldi	r25, 0x00	; 0
     942:	a0 e0       	ldi	r26, 0x00	; 0
     944:	b0 e0       	ldi	r27, 0x00	; 0
     946:	e8 0e       	add	r14, r24
     948:	f9 1e       	adc	r15, r25
     94a:	0a 1f       	adc	r16, r26
     94c:	1b 1f       	adc	r17, r27
     94e:	17 ff       	sbrs	r17, 7
     950:	05 c0       	rjmp	.+10     	; 0x95c <__stack+0xfd>
     952:	16 95       	lsr	r17
     954:	07 95       	ror	r16
     956:	f7 94       	ror	r15
     958:	e7 94       	ror	r14
     95a:	31 96       	adiw	r30, 0x01	; 1
     95c:	87 e0       	ldi	r24, 0x07	; 7
     95e:	16 95       	lsr	r17
     960:	07 95       	ror	r16
     962:	f7 94       	ror	r15
     964:	e7 94       	ror	r14
     966:	8a 95       	dec	r24
     968:	d1 f7       	brne	.-12     	; 0x95e <__stack+0xff>
     96a:	05 c0       	rjmp	.+10     	; 0x976 <__stack+0x117>
     96c:	ee 24       	eor	r14, r14
     96e:	ff 24       	eor	r15, r15
     970:	87 01       	movw	r16, r14
     972:	ef ef       	ldi	r30, 0xFF	; 255
     974:	f0 e0       	ldi	r31, 0x00	; 0
     976:	6e 2f       	mov	r22, r30
     978:	67 95       	ror	r22
     97a:	66 27       	eor	r22, r22
     97c:	67 95       	ror	r22
     97e:	90 2f       	mov	r25, r16
     980:	9f 77       	andi	r25, 0x7F	; 127
     982:	d7 94       	ror	r13
     984:	dd 24       	eor	r13, r13
     986:	d7 94       	ror	r13
     988:	8e 2f       	mov	r24, r30
     98a:	86 95       	lsr	r24
     98c:	49 2f       	mov	r20, r25
     98e:	46 2b       	or	r20, r22
     990:	58 2f       	mov	r21, r24
     992:	5d 29       	or	r21, r13
     994:	b7 01       	movw	r22, r14
     996:	ca 01       	movw	r24, r20
     998:	1f 91       	pop	r17
     99a:	0f 91       	pop	r16
     99c:	ff 90       	pop	r15
     99e:	ef 90       	pop	r14
     9a0:	df 90       	pop	r13
     9a2:	08 95       	ret

000009a4 <__unpack_f>:
     9a4:	fc 01       	movw	r30, r24
     9a6:	db 01       	movw	r26, r22
     9a8:	40 81       	ld	r20, Z
     9aa:	51 81       	ldd	r21, Z+1	; 0x01
     9ac:	22 81       	ldd	r18, Z+2	; 0x02
     9ae:	62 2f       	mov	r22, r18
     9b0:	6f 77       	andi	r22, 0x7F	; 127
     9b2:	70 e0       	ldi	r23, 0x00	; 0
     9b4:	22 1f       	adc	r18, r18
     9b6:	22 27       	eor	r18, r18
     9b8:	22 1f       	adc	r18, r18
     9ba:	93 81       	ldd	r25, Z+3	; 0x03
     9bc:	89 2f       	mov	r24, r25
     9be:	88 0f       	add	r24, r24
     9c0:	82 2b       	or	r24, r18
     9c2:	28 2f       	mov	r18, r24
     9c4:	30 e0       	ldi	r19, 0x00	; 0
     9c6:	99 1f       	adc	r25, r25
     9c8:	99 27       	eor	r25, r25
     9ca:	99 1f       	adc	r25, r25
     9cc:	11 96       	adiw	r26, 0x01	; 1
     9ce:	9c 93       	st	X, r25
     9d0:	11 97       	sbiw	r26, 0x01	; 1
     9d2:	21 15       	cp	r18, r1
     9d4:	31 05       	cpc	r19, r1
     9d6:	a9 f5       	brne	.+106    	; 0xa42 <__unpack_f+0x9e>
     9d8:	41 15       	cp	r20, r1
     9da:	51 05       	cpc	r21, r1
     9dc:	61 05       	cpc	r22, r1
     9de:	71 05       	cpc	r23, r1
     9e0:	11 f4       	brne	.+4      	; 0x9e6 <__unpack_f+0x42>
     9e2:	82 e0       	ldi	r24, 0x02	; 2
     9e4:	37 c0       	rjmp	.+110    	; 0xa54 <__unpack_f+0xb0>
     9e6:	82 e8       	ldi	r24, 0x82	; 130
     9e8:	9f ef       	ldi	r25, 0xFF	; 255
     9ea:	13 96       	adiw	r26, 0x03	; 3
     9ec:	9c 93       	st	X, r25
     9ee:	8e 93       	st	-X, r24
     9f0:	12 97       	sbiw	r26, 0x02	; 2
     9f2:	9a 01       	movw	r18, r20
     9f4:	ab 01       	movw	r20, r22
     9f6:	67 e0       	ldi	r22, 0x07	; 7
     9f8:	22 0f       	add	r18, r18
     9fa:	33 1f       	adc	r19, r19
     9fc:	44 1f       	adc	r20, r20
     9fe:	55 1f       	adc	r21, r21
     a00:	6a 95       	dec	r22
     a02:	d1 f7       	brne	.-12     	; 0x9f8 <__unpack_f+0x54>
     a04:	83 e0       	ldi	r24, 0x03	; 3
     a06:	8c 93       	st	X, r24
     a08:	0d c0       	rjmp	.+26     	; 0xa24 <__unpack_f+0x80>
     a0a:	22 0f       	add	r18, r18
     a0c:	33 1f       	adc	r19, r19
     a0e:	44 1f       	adc	r20, r20
     a10:	55 1f       	adc	r21, r21
     a12:	12 96       	adiw	r26, 0x02	; 2
     a14:	8d 91       	ld	r24, X+
     a16:	9c 91       	ld	r25, X
     a18:	13 97       	sbiw	r26, 0x03	; 3
     a1a:	01 97       	sbiw	r24, 0x01	; 1
     a1c:	13 96       	adiw	r26, 0x03	; 3
     a1e:	9c 93       	st	X, r25
     a20:	8e 93       	st	-X, r24
     a22:	12 97       	sbiw	r26, 0x02	; 2
     a24:	20 30       	cpi	r18, 0x00	; 0
     a26:	80 e0       	ldi	r24, 0x00	; 0
     a28:	38 07       	cpc	r19, r24
     a2a:	80 e0       	ldi	r24, 0x00	; 0
     a2c:	48 07       	cpc	r20, r24
     a2e:	80 e4       	ldi	r24, 0x40	; 64
     a30:	58 07       	cpc	r21, r24
     a32:	58 f3       	brcs	.-42     	; 0xa0a <__unpack_f+0x66>
     a34:	14 96       	adiw	r26, 0x04	; 4
     a36:	2d 93       	st	X+, r18
     a38:	3d 93       	st	X+, r19
     a3a:	4d 93       	st	X+, r20
     a3c:	5c 93       	st	X, r21
     a3e:	17 97       	sbiw	r26, 0x07	; 7
     a40:	08 95       	ret
     a42:	2f 3f       	cpi	r18, 0xFF	; 255
     a44:	31 05       	cpc	r19, r1
     a46:	79 f4       	brne	.+30     	; 0xa66 <__unpack_f+0xc2>
     a48:	41 15       	cp	r20, r1
     a4a:	51 05       	cpc	r21, r1
     a4c:	61 05       	cpc	r22, r1
     a4e:	71 05       	cpc	r23, r1
     a50:	19 f4       	brne	.+6      	; 0xa58 <__unpack_f+0xb4>
     a52:	84 e0       	ldi	r24, 0x04	; 4
     a54:	8c 93       	st	X, r24
     a56:	08 95       	ret
     a58:	64 ff       	sbrs	r22, 4
     a5a:	03 c0       	rjmp	.+6      	; 0xa62 <__unpack_f+0xbe>
     a5c:	81 e0       	ldi	r24, 0x01	; 1
     a5e:	8c 93       	st	X, r24
     a60:	12 c0       	rjmp	.+36     	; 0xa86 <__unpack_f+0xe2>
     a62:	1c 92       	st	X, r1
     a64:	10 c0       	rjmp	.+32     	; 0xa86 <__unpack_f+0xe2>
     a66:	2f 57       	subi	r18, 0x7F	; 127
     a68:	30 40       	sbci	r19, 0x00	; 0
     a6a:	13 96       	adiw	r26, 0x03	; 3
     a6c:	3c 93       	st	X, r19
     a6e:	2e 93       	st	-X, r18
     a70:	12 97       	sbiw	r26, 0x02	; 2
     a72:	83 e0       	ldi	r24, 0x03	; 3
     a74:	8c 93       	st	X, r24
     a76:	87 e0       	ldi	r24, 0x07	; 7
     a78:	44 0f       	add	r20, r20
     a7a:	55 1f       	adc	r21, r21
     a7c:	66 1f       	adc	r22, r22
     a7e:	77 1f       	adc	r23, r23
     a80:	8a 95       	dec	r24
     a82:	d1 f7       	brne	.-12     	; 0xa78 <__unpack_f+0xd4>
     a84:	70 64       	ori	r23, 0x40	; 64
     a86:	14 96       	adiw	r26, 0x04	; 4
     a88:	4d 93       	st	X+, r20
     a8a:	5d 93       	st	X+, r21
     a8c:	6d 93       	st	X+, r22
     a8e:	7c 93       	st	X, r23
     a90:	17 97       	sbiw	r26, 0x07	; 7
     a92:	08 95       	ret

00000a94 <__fpcmp_parts_f>:
     a94:	1f 93       	push	r17
     a96:	dc 01       	movw	r26, r24
     a98:	fb 01       	movw	r30, r22
     a9a:	9c 91       	ld	r25, X
     a9c:	92 30       	cpi	r25, 0x02	; 2
     a9e:	08 f4       	brcc	.+2      	; 0xaa2 <__fpcmp_parts_f+0xe>
     aa0:	47 c0       	rjmp	.+142    	; 0xb30 <__fpcmp_parts_f+0x9c>
     aa2:	80 81       	ld	r24, Z
     aa4:	82 30       	cpi	r24, 0x02	; 2
     aa6:	08 f4       	brcc	.+2      	; 0xaaa <__fpcmp_parts_f+0x16>
     aa8:	43 c0       	rjmp	.+134    	; 0xb30 <__fpcmp_parts_f+0x9c>
     aaa:	94 30       	cpi	r25, 0x04	; 4
     aac:	51 f4       	brne	.+20     	; 0xac2 <__fpcmp_parts_f+0x2e>
     aae:	11 96       	adiw	r26, 0x01	; 1
     ab0:	1c 91       	ld	r17, X
     ab2:	84 30       	cpi	r24, 0x04	; 4
     ab4:	99 f5       	brne	.+102    	; 0xb1c <__fpcmp_parts_f+0x88>
     ab6:	81 81       	ldd	r24, Z+1	; 0x01
     ab8:	68 2f       	mov	r22, r24
     aba:	70 e0       	ldi	r23, 0x00	; 0
     abc:	61 1b       	sub	r22, r17
     abe:	71 09       	sbc	r23, r1
     ac0:	3f c0       	rjmp	.+126    	; 0xb40 <__fpcmp_parts_f+0xac>
     ac2:	84 30       	cpi	r24, 0x04	; 4
     ac4:	21 f0       	breq	.+8      	; 0xace <__fpcmp_parts_f+0x3a>
     ac6:	92 30       	cpi	r25, 0x02	; 2
     ac8:	31 f4       	brne	.+12     	; 0xad6 <__fpcmp_parts_f+0x42>
     aca:	82 30       	cpi	r24, 0x02	; 2
     acc:	b9 f1       	breq	.+110    	; 0xb3c <__fpcmp_parts_f+0xa8>
     ace:	81 81       	ldd	r24, Z+1	; 0x01
     ad0:	88 23       	and	r24, r24
     ad2:	89 f1       	breq	.+98     	; 0xb36 <__fpcmp_parts_f+0xa2>
     ad4:	2d c0       	rjmp	.+90     	; 0xb30 <__fpcmp_parts_f+0x9c>
     ad6:	11 96       	adiw	r26, 0x01	; 1
     ad8:	1c 91       	ld	r17, X
     ada:	11 97       	sbiw	r26, 0x01	; 1
     adc:	82 30       	cpi	r24, 0x02	; 2
     ade:	f1 f0       	breq	.+60     	; 0xb1c <__fpcmp_parts_f+0x88>
     ae0:	81 81       	ldd	r24, Z+1	; 0x01
     ae2:	18 17       	cp	r17, r24
     ae4:	d9 f4       	brne	.+54     	; 0xb1c <__fpcmp_parts_f+0x88>
     ae6:	12 96       	adiw	r26, 0x02	; 2
     ae8:	2d 91       	ld	r18, X+
     aea:	3c 91       	ld	r19, X
     aec:	13 97       	sbiw	r26, 0x03	; 3
     aee:	82 81       	ldd	r24, Z+2	; 0x02
     af0:	93 81       	ldd	r25, Z+3	; 0x03
     af2:	82 17       	cp	r24, r18
     af4:	93 07       	cpc	r25, r19
     af6:	94 f0       	brlt	.+36     	; 0xb1c <__fpcmp_parts_f+0x88>
     af8:	28 17       	cp	r18, r24
     afa:	39 07       	cpc	r19, r25
     afc:	bc f0       	brlt	.+46     	; 0xb2c <__fpcmp_parts_f+0x98>
     afe:	14 96       	adiw	r26, 0x04	; 4
     b00:	8d 91       	ld	r24, X+
     b02:	9d 91       	ld	r25, X+
     b04:	0d 90       	ld	r0, X+
     b06:	bc 91       	ld	r27, X
     b08:	a0 2d       	mov	r26, r0
     b0a:	24 81       	ldd	r18, Z+4	; 0x04
     b0c:	35 81       	ldd	r19, Z+5	; 0x05
     b0e:	46 81       	ldd	r20, Z+6	; 0x06
     b10:	57 81       	ldd	r21, Z+7	; 0x07
     b12:	28 17       	cp	r18, r24
     b14:	39 07       	cpc	r19, r25
     b16:	4a 07       	cpc	r20, r26
     b18:	5b 07       	cpc	r21, r27
     b1a:	18 f4       	brcc	.+6      	; 0xb22 <__fpcmp_parts_f+0x8e>
     b1c:	11 23       	and	r17, r17
     b1e:	41 f0       	breq	.+16     	; 0xb30 <__fpcmp_parts_f+0x9c>
     b20:	0a c0       	rjmp	.+20     	; 0xb36 <__fpcmp_parts_f+0xa2>
     b22:	82 17       	cp	r24, r18
     b24:	93 07       	cpc	r25, r19
     b26:	a4 07       	cpc	r26, r20
     b28:	b5 07       	cpc	r27, r21
     b2a:	40 f4       	brcc	.+16     	; 0xb3c <__fpcmp_parts_f+0xa8>
     b2c:	11 23       	and	r17, r17
     b2e:	19 f0       	breq	.+6      	; 0xb36 <__fpcmp_parts_f+0xa2>
     b30:	61 e0       	ldi	r22, 0x01	; 1
     b32:	70 e0       	ldi	r23, 0x00	; 0
     b34:	05 c0       	rjmp	.+10     	; 0xb40 <__fpcmp_parts_f+0xac>
     b36:	6f ef       	ldi	r22, 0xFF	; 255
     b38:	7f ef       	ldi	r23, 0xFF	; 255
     b3a:	02 c0       	rjmp	.+4      	; 0xb40 <__fpcmp_parts_f+0xac>
     b3c:	60 e0       	ldi	r22, 0x00	; 0
     b3e:	70 e0       	ldi	r23, 0x00	; 0
     b40:	cb 01       	movw	r24, r22
     b42:	1f 91       	pop	r17
     b44:	08 95       	ret

00000b46 <__vector_16>:
#include "Adc_cfg.h"
#include "GlobalInterrupt.h"

void (*Adc_Callback) (u16 res);

ISR(VECTOR_ADC) {
     b46:	1f 92       	push	r1
     b48:	0f 92       	push	r0
     b4a:	0f b6       	in	r0, 0x3f	; 63
     b4c:	0f 92       	push	r0
     b4e:	11 24       	eor	r1, r1
     b50:	2f 93       	push	r18
     b52:	3f 93       	push	r19
     b54:	4f 93       	push	r20
     b56:	5f 93       	push	r21
     b58:	6f 93       	push	r22
     b5a:	7f 93       	push	r23
     b5c:	8f 93       	push	r24
     b5e:	9f 93       	push	r25
     b60:	af 93       	push	r26
     b62:	bf 93       	push	r27
     b64:	ef 93       	push	r30
     b66:	ff 93       	push	r31
     b68:	df 93       	push	r29
     b6a:	cf 93       	push	r28
     b6c:	cd b7       	in	r28, 0x3d	; 61
     b6e:	de b7       	in	r29, 0x3e	; 62
    Adc_Callback((ADC_DATA_REGISTER & 0b0000001111111111));
     b70:	20 91 72 00 	lds	r18, 0x0072
     b74:	30 91 73 00 	lds	r19, 0x0073
     b78:	e4 e2       	ldi	r30, 0x24	; 36
     b7a:	f0 e0       	ldi	r31, 0x00	; 0
     b7c:	80 81       	ld	r24, Z
     b7e:	91 81       	ldd	r25, Z+1	; 0x01
     b80:	93 70       	andi	r25, 0x03	; 3
     b82:	f9 01       	movw	r30, r18
     b84:	09 95       	icall
}
     b86:	cf 91       	pop	r28
     b88:	df 91       	pop	r29
     b8a:	ff 91       	pop	r31
     b8c:	ef 91       	pop	r30
     b8e:	bf 91       	pop	r27
     b90:	af 91       	pop	r26
     b92:	9f 91       	pop	r25
     b94:	8f 91       	pop	r24
     b96:	7f 91       	pop	r23
     b98:	6f 91       	pop	r22
     b9a:	5f 91       	pop	r21
     b9c:	4f 91       	pop	r20
     b9e:	3f 91       	pop	r19
     ba0:	2f 91       	pop	r18
     ba2:	0f 90       	pop	r0
     ba4:	0f be       	out	0x3f, r0	; 63
     ba6:	0f 90       	pop	r0
     ba8:	1f 90       	pop	r1
     baa:	18 95       	reti

00000bac <Adc_Init>:

void Adc_Init(void) {
     bac:	df 93       	push	r29
     bae:	cf 93       	push	r28
     bb0:	cd b7       	in	r28, 0x3d	; 61
     bb2:	de b7       	in	r29, 0x3e	; 62
    /*Reference Selection Bits*/
#if (ADC_REF_SELECTION == ADC_REF_AREF)
    CLR_BIT(ADMUX, ADMUX_REFS1);
     bb4:	a7 e2       	ldi	r26, 0x27	; 39
     bb6:	b0 e0       	ldi	r27, 0x00	; 0
     bb8:	e7 e2       	ldi	r30, 0x27	; 39
     bba:	f0 e0       	ldi	r31, 0x00	; 0
     bbc:	80 81       	ld	r24, Z
     bbe:	8f 77       	andi	r24, 0x7F	; 127
     bc0:	8c 93       	st	X, r24
    CLR_BIT(ADMUX, ADMUX_REFS0);
     bc2:	a7 e2       	ldi	r26, 0x27	; 39
     bc4:	b0 e0       	ldi	r27, 0x00	; 0
     bc6:	e7 e2       	ldi	r30, 0x27	; 39
     bc8:	f0 e0       	ldi	r31, 0x00	; 0
     bca:	80 81       	ld	r24, Z
     bcc:	8f 7b       	andi	r24, 0xBF	; 191
     bce:	8c 93       	st	X, r24
#else
    #error "Error Ref Selection Choise"
#endif

    /* No Left Adjust */
    CLR_BIT(ADMUX, ADMUX_ADLAR);
     bd0:	a7 e2       	ldi	r26, 0x27	; 39
     bd2:	b0 e0       	ldi	r27, 0x00	; 0
     bd4:	e7 e2       	ldi	r30, 0x27	; 39
     bd6:	f0 e0       	ldi	r31, 0x00	; 0
     bd8:	80 81       	ld	r24, Z
     bda:	8f 7d       	andi	r24, 0xDF	; 223
     bdc:	8c 93       	st	X, r24

    /* ADC Enable */
    SET_BIT(ADCSRA, ADCSRA_ADEN);
     bde:	a6 e2       	ldi	r26, 0x26	; 38
     be0:	b0 e0       	ldi	r27, 0x00	; 0
     be2:	e6 e2       	ldi	r30, 0x26	; 38
     be4:	f0 e0       	ldi	r31, 0x00	; 0
     be6:	80 81       	ld	r24, Z
     be8:	80 68       	ori	r24, 0x80	; 128
     bea:	8c 93       	st	X, r24

    /* ADC Interrupt Enable */
#if (ADC_INT_STATE == ADC_INT_DISABLE)
    CLR_BIT(ADCSRA, ADCSRA_ADIE);
#elif (ADC_INT_STATE == ADC_INT_ENABLE)
    SET_BIT(ADCSRA, ADCSRA_ADIE);
     bec:	a6 e2       	ldi	r26, 0x26	; 38
     bee:	b0 e0       	ldi	r27, 0x00	; 0
     bf0:	e6 e2       	ldi	r30, 0x26	; 38
     bf2:	f0 e0       	ldi	r31, 0x00	; 0
     bf4:	80 81       	ld	r24, Z
     bf6:	88 60       	ori	r24, 0x08	; 8
     bf8:	8c 93       	st	X, r24
    GlobalInterrupt_Enable();
     bfa:	0e 94 22 0f 	call	0x1e44	; 0x1e44 <GlobalInterrupt_Enable>
#endif

    /* ADC Prescaler Select */

#if (ADC_PRESCALER == 128)
    SET_BIT(ADCSRA, ADCSRA_ADPS0);
     bfe:	a6 e2       	ldi	r26, 0x26	; 38
     c00:	b0 e0       	ldi	r27, 0x00	; 0
     c02:	e6 e2       	ldi	r30, 0x26	; 38
     c04:	f0 e0       	ldi	r31, 0x00	; 0
     c06:	80 81       	ld	r24, Z
     c08:	81 60       	ori	r24, 0x01	; 1
     c0a:	8c 93       	st	X, r24
    SET_BIT(ADCSRA, ADCSRA_ADPS1);
     c0c:	a6 e2       	ldi	r26, 0x26	; 38
     c0e:	b0 e0       	ldi	r27, 0x00	; 0
     c10:	e6 e2       	ldi	r30, 0x26	; 38
     c12:	f0 e0       	ldi	r31, 0x00	; 0
     c14:	80 81       	ld	r24, Z
     c16:	82 60       	ori	r24, 0x02	; 2
     c18:	8c 93       	st	X, r24
    SET_BIT(ADCSRA, ADCSRA_ADPS2);
     c1a:	a6 e2       	ldi	r26, 0x26	; 38
     c1c:	b0 e0       	ldi	r27, 0x00	; 0
     c1e:	e6 e2       	ldi	r30, 0x26	; 38
     c20:	f0 e0       	ldi	r31, 0x00	; 0
     c22:	80 81       	ld	r24, Z
     c24:	84 60       	ori	r24, 0x04	; 4
     c26:	8c 93       	st	X, r24
    CLR_BIT(ADCSRA, ADCSRA_ADPS2);
    // TODO
#else
    #error "Error Prescaler Choise"
#endif
}
     c28:	cf 91       	pop	r28
     c2a:	df 91       	pop	r29
     c2c:	08 95       	ret

00000c2e <Adc_StartConversion>:

void Adc_StartConversion(Adc_ChannelType channel) {
     c2e:	df 93       	push	r29
     c30:	cf 93       	push	r28
     c32:	0f 92       	push	r0
     c34:	cd b7       	in	r28, 0x3d	; 61
     c36:	de b7       	in	r29, 0x3e	; 62
     c38:	89 83       	std	Y+1, r24	; 0x01
    ADMUX &= 0b11100000;
     c3a:	a7 e2       	ldi	r26, 0x27	; 39
     c3c:	b0 e0       	ldi	r27, 0x00	; 0
     c3e:	e7 e2       	ldi	r30, 0x27	; 39
     c40:	f0 e0       	ldi	r31, 0x00	; 0
     c42:	80 81       	ld	r24, Z
     c44:	80 7e       	andi	r24, 0xE0	; 224
     c46:	8c 93       	st	X, r24
    ADMUX |= channel;
     c48:	a7 e2       	ldi	r26, 0x27	; 39
     c4a:	b0 e0       	ldi	r27, 0x00	; 0
     c4c:	e7 e2       	ldi	r30, 0x27	; 39
     c4e:	f0 e0       	ldi	r31, 0x00	; 0
     c50:	90 81       	ld	r25, Z
     c52:	89 81       	ldd	r24, Y+1	; 0x01
     c54:	89 2b       	or	r24, r25
     c56:	8c 93       	st	X, r24
    SET_BIT(ADCSRA, ADCSRA_ADSC);
     c58:	a6 e2       	ldi	r26, 0x26	; 38
     c5a:	b0 e0       	ldi	r27, 0x00	; 0
     c5c:	e6 e2       	ldi	r30, 0x26	; 38
     c5e:	f0 e0       	ldi	r31, 0x00	; 0
     c60:	80 81       	ld	r24, Z
     c62:	80 64       	ori	r24, 0x40	; 64
     c64:	8c 93       	st	X, r24
}
     c66:	0f 90       	pop	r0
     c68:	cf 91       	pop	r28
     c6a:	df 91       	pop	r29
     c6c:	08 95       	ret

00000c6e <Adc_Enable>:

void Adc_Enable(void) {
     c6e:	df 93       	push	r29
     c70:	cf 93       	push	r28
     c72:	cd b7       	in	r28, 0x3d	; 61
     c74:	de b7       	in	r29, 0x3e	; 62
    SET_BIT(ADCSRA, ADCSRA_ADEN);
     c76:	a6 e2       	ldi	r26, 0x26	; 38
     c78:	b0 e0       	ldi	r27, 0x00	; 0
     c7a:	e6 e2       	ldi	r30, 0x26	; 38
     c7c:	f0 e0       	ldi	r31, 0x00	; 0
     c7e:	80 81       	ld	r24, Z
     c80:	80 68       	ori	r24, 0x80	; 128
     c82:	8c 93       	st	X, r24
    // TODO
}
     c84:	cf 91       	pop	r28
     c86:	df 91       	pop	r29
     c88:	08 95       	ret

00000c8a <Adc_Disable>:

void Adc_Disable(void) {
     c8a:	df 93       	push	r29
     c8c:	cf 93       	push	r28
     c8e:	cd b7       	in	r28, 0x3d	; 61
     c90:	de b7       	in	r29, 0x3e	; 62
    CLR_BIT(ADCSRA, ADCSRA_ADEN);
     c92:	a6 e2       	ldi	r26, 0x26	; 38
     c94:	b0 e0       	ldi	r27, 0x00	; 0
     c96:	e6 e2       	ldi	r30, 0x26	; 38
     c98:	f0 e0       	ldi	r31, 0x00	; 0
     c9a:	80 81       	ld	r24, Z
     c9c:	8f 77       	andi	r24, 0x7F	; 127
     c9e:	8c 93       	st	X, r24
    // TODO
}
     ca0:	cf 91       	pop	r28
     ca2:	df 91       	pop	r29
     ca4:	08 95       	ret

00000ca6 <Adc_GetResult>:


Adc_ConversionStateType Adc_GetResult(u16* result) {
     ca6:	df 93       	push	r29
     ca8:	cf 93       	push	r28
     caa:	00 d0       	rcall	.+0      	; 0xcac <Adc_GetResult+0x6>
     cac:	0f 92       	push	r0
     cae:	cd b7       	in	r28, 0x3d	; 61
     cb0:	de b7       	in	r29, 0x3e	; 62
     cb2:	9b 83       	std	Y+3, r25	; 0x03
     cb4:	8a 83       	std	Y+2, r24	; 0x02
    Adc_ConversionStateType flag = ADC_CONVERSION_NOT_COMPLETE;
     cb6:	19 82       	std	Y+1, r1	; 0x01
    if (GET_BIT(ADCSRA, ADCSRA_ADIF) == 1) {
     cb8:	e6 e2       	ldi	r30, 0x26	; 38
     cba:	f0 e0       	ldi	r31, 0x00	; 0
     cbc:	80 81       	ld	r24, Z
     cbe:	82 95       	swap	r24
     cc0:	8f 70       	andi	r24, 0x0F	; 15
     cc2:	88 2f       	mov	r24, r24
     cc4:	90 e0       	ldi	r25, 0x00	; 0
     cc6:	81 70       	andi	r24, 0x01	; 1
     cc8:	90 70       	andi	r25, 0x00	; 0
     cca:	88 23       	and	r24, r24
     ccc:	91 f0       	breq	.+36     	; 0xcf2 <Adc_GetResult+0x4c>
        SET_BIT(ADCSRA, ADCSRA_ADIF);
     cce:	a6 e2       	ldi	r26, 0x26	; 38
     cd0:	b0 e0       	ldi	r27, 0x00	; 0
     cd2:	e6 e2       	ldi	r30, 0x26	; 38
     cd4:	f0 e0       	ldi	r31, 0x00	; 0
     cd6:	80 81       	ld	r24, Z
     cd8:	80 61       	ori	r24, 0x10	; 16
     cda:	8c 93       	st	X, r24
        *result = ADC_DATA_REGISTER & 0b0000001111111111;
     cdc:	e4 e2       	ldi	r30, 0x24	; 36
     cde:	f0 e0       	ldi	r31, 0x00	; 0
     ce0:	80 81       	ld	r24, Z
     ce2:	91 81       	ldd	r25, Z+1	; 0x01
     ce4:	93 70       	andi	r25, 0x03	; 3
     ce6:	ea 81       	ldd	r30, Y+2	; 0x02
     ce8:	fb 81       	ldd	r31, Y+3	; 0x03
     cea:	91 83       	std	Z+1, r25	; 0x01
     cec:	80 83       	st	Z, r24
        flag = ADC_CONVERSION_COMPLETE;
     cee:	81 e0       	ldi	r24, 0x01	; 1
     cf0:	89 83       	std	Y+1, r24	; 0x01
    }
    return flag;
     cf2:	89 81       	ldd	r24, Y+1	; 0x01
}
     cf4:	0f 90       	pop	r0
     cf6:	0f 90       	pop	r0
     cf8:	0f 90       	pop	r0
     cfa:	cf 91       	pop	r28
     cfc:	df 91       	pop	r29
     cfe:	08 95       	ret

00000d00 <Adc_GetResultPolling>:

u16 Adc_GetResultPolling(void) {
     d00:	df 93       	push	r29
     d02:	cf 93       	push	r28
     d04:	cd b7       	in	r28, 0x3d	; 61
     d06:	de b7       	in	r29, 0x3e	; 62
    while (GET_BIT(ADCSRA, ADCSRA_ADIF) == 0);
     d08:	e6 e2       	ldi	r30, 0x26	; 38
     d0a:	f0 e0       	ldi	r31, 0x00	; 0
     d0c:	80 81       	ld	r24, Z
     d0e:	82 95       	swap	r24
     d10:	8f 70       	andi	r24, 0x0F	; 15
     d12:	88 2f       	mov	r24, r24
     d14:	90 e0       	ldi	r25, 0x00	; 0
     d16:	81 70       	andi	r24, 0x01	; 1
     d18:	90 70       	andi	r25, 0x00	; 0
     d1a:	00 97       	sbiw	r24, 0x00	; 0
     d1c:	a9 f3       	breq	.-22     	; 0xd08 <Adc_GetResultPolling+0x8>
    return (ADC_DATA_REGISTER & 0b0000001111111111);
     d1e:	e4 e2       	ldi	r30, 0x24	; 36
     d20:	f0 e0       	ldi	r31, 0x00	; 0
     d22:	80 81       	ld	r24, Z
     d24:	91 81       	ldd	r25, Z+1	; 0x01
     d26:	93 70       	andi	r25, 0x03	; 3
}
     d28:	cf 91       	pop	r28
     d2a:	df 91       	pop	r29
     d2c:	08 95       	ret

00000d2e <Adc_SetCallback>:


void Adc_SetCallback (void (*callback) (u16 res)) {
     d2e:	df 93       	push	r29
     d30:	cf 93       	push	r28
     d32:	00 d0       	rcall	.+0      	; 0xd34 <Adc_SetCallback+0x6>
     d34:	cd b7       	in	r28, 0x3d	; 61
     d36:	de b7       	in	r29, 0x3e	; 62
     d38:	9a 83       	std	Y+2, r25	; 0x02
     d3a:	89 83       	std	Y+1, r24	; 0x01
    Adc_Callback = callback;
     d3c:	89 81       	ldd	r24, Y+1	; 0x01
     d3e:	9a 81       	ldd	r25, Y+2	; 0x02
     d40:	90 93 73 00 	sts	0x0073, r25
     d44:	80 93 72 00 	sts	0x0072, r24
}
     d48:	0f 90       	pop	r0
     d4a:	0f 90       	pop	r0
     d4c:	cf 91       	pop	r28
     d4e:	df 91       	pop	r29
     d50:	08 95       	ret

00000d52 <Calculator_Run>:
#include "LCD.h"
#include "Calculator.h"

//u8 Calculator_GetRealNumber (Keypad_ButtonType button);

void Calculator_Run(void) {
     d52:	df 93       	push	r29
     d54:	cf 93       	push	r28
     d56:	cd b7       	in	r28, 0x3d	; 61
     d58:	de b7       	in	r29, 0x3e	; 62
     d5a:	2d 97       	sbiw	r28, 0x0d	; 13
     d5c:	0f b6       	in	r0, 0x3f	; 63
     d5e:	f8 94       	cli
     d60:	de bf       	out	0x3e, r29	; 62
     d62:	0f be       	out	0x3f, r0	; 63
     d64:	cd bf       	out	0x3d, r28	; 61
    s8 num1=0, num2=0, operation=0, result=0;
     d66:	19 86       	std	Y+9, r1	; 0x09
     d68:	18 86       	std	Y+8, r1	; 0x08
     d6a:	1f 82       	std	Y+7, r1	; 0x07
     d6c:	1e 82       	std	Y+6, r1	; 0x06
    u8 num1_flag=0, num2_flag=0, operation_flag=0, result_flag=0;
     d6e:	1d 82       	std	Y+5, r1	; 0x05
     d70:	1c 82       	std	Y+4, r1	; 0x04
     d72:	1b 82       	std	Y+3, r1	; 0x03
     d74:	1a 82       	std	Y+2, r1	; 0x02
    Keypad_ButtonType pressed_button;
    while (1)
    {
        /* Wait for user input */
        do {
            pressed_button = Keypad_GetPressedButton();
     d76:	0e 94 ae 1b 	call	0x375c	; 0x375c <Keypad_GetPressedButton>
     d7a:	89 83       	std	Y+1, r24	; 0x01
        }
        while (pressed_button == KEYPAD_BUTTON_INVALID);
     d7c:	89 81       	ldd	r24, Y+1	; 0x01
     d7e:	80 31       	cpi	r24, 0x10	; 16
     d80:	d1 f3       	breq	.-12     	; 0xd76 <Calculator_Run+0x24>

        if (pressed_button == CALCULATOR_BUTTON_CLR) {
     d82:	89 81       	ldd	r24, Y+1	; 0x01
     d84:	88 23       	and	r24, r24
     d86:	39 f4       	brne	.+14     	; 0xd96 <Calculator_Run+0x44>
            num1_flag = 0;
     d88:	1d 82       	std	Y+5, r1	; 0x05
            num2_flag = 0;
     d8a:	1c 82       	std	Y+4, r1	; 0x04
            operation_flag = 0;
     d8c:	1b 82       	std	Y+3, r1	; 0x03
            result_flag = 0;
     d8e:	1a 82       	std	Y+2, r1	; 0x02
            LCD_Clear();
     d90:	0e 94 73 1c 	call	0x38e6	; 0x38e6 <LCD_Clear>
     d94:	f0 cf       	rjmp	.-32     	; 0xd76 <Calculator_Run+0x24>
            continue;
        }
        if (num1_flag == 0) {
     d96:	8d 81       	ldd	r24, Y+5	; 0x05
     d98:	88 23       	and	r24, r24
     d9a:	81 f4       	brne	.+32     	; 0xdbc <Calculator_Run+0x6a>
            num1_flag = 1;
     d9c:	81 e0       	ldi	r24, 0x01	; 1
     d9e:	8d 83       	std	Y+5, r24	; 0x05
            num1 = Calculator_GetRealNumber(pressed_button);
     da0:	89 81       	ldd	r24, Y+1	; 0x01
     da2:	0e 94 7b 07 	call	0xef6	; 0xef6 <Calculator_GetRealNumber>
     da6:	89 87       	std	Y+9, r24	; 0x09
            LCD_DisplayNumber(num1);
     da8:	89 85       	ldd	r24, Y+9	; 0x09
     daa:	88 2f       	mov	r24, r24
     dac:	90 e0       	ldi	r25, 0x00	; 0
     dae:	a0 e0       	ldi	r26, 0x00	; 0
     db0:	b0 e0       	ldi	r27, 0x00	; 0
     db2:	bc 01       	movw	r22, r24
     db4:	cd 01       	movw	r24, r26
     db6:	0e 94 d7 1c 	call	0x39ae	; 0x39ae <LCD_DisplayNumber>
     dba:	dd cf       	rjmp	.-70     	; 0xd76 <Calculator_Run+0x24>
        }
        else if (operation_flag == 0) {
     dbc:	8b 81       	ldd	r24, Y+3	; 0x03
     dbe:	88 23       	and	r24, r24
     dc0:	89 f5       	brne	.+98     	; 0xe24 <Calculator_Run+0xd2>
            operation_flag = 1;
     dc2:	81 e0       	ldi	r24, 0x01	; 1
     dc4:	8b 83       	std	Y+3, r24	; 0x03
            switch (pressed_button)
     dc6:	89 81       	ldd	r24, Y+1	; 0x01
     dc8:	28 2f       	mov	r18, r24
     dca:	30 e0       	ldi	r19, 0x00	; 0
     dcc:	3d 87       	std	Y+13, r19	; 0x0d
     dce:	2c 87       	std	Y+12, r18	; 0x0c
     dd0:	8c 85       	ldd	r24, Y+12	; 0x0c
     dd2:	9d 85       	ldd	r25, Y+13	; 0x0d
     dd4:	87 30       	cpi	r24, 0x07	; 7
     dd6:	91 05       	cpc	r25, r1
     dd8:	c9 f0       	breq	.+50     	; 0xe0c <Calculator_Run+0xba>
     dda:	2c 85       	ldd	r18, Y+12	; 0x0c
     ddc:	3d 85       	ldd	r19, Y+13	; 0x0d
     dde:	28 30       	cpi	r18, 0x08	; 8
     de0:	31 05       	cpc	r19, r1
     de2:	34 f4       	brge	.+12     	; 0xdf0 <Calculator_Run+0x9e>
     de4:	8c 85       	ldd	r24, Y+12	; 0x0c
     de6:	9d 85       	ldd	r25, Y+13	; 0x0d
     de8:	83 30       	cpi	r24, 0x03	; 3
     dea:	91 05       	cpc	r25, r1
     dec:	61 f0       	breq	.+24     	; 0xe06 <Calculator_Run+0xb4>
     dee:	16 c0       	rjmp	.+44     	; 0xe1c <Calculator_Run+0xca>
     df0:	2c 85       	ldd	r18, Y+12	; 0x0c
     df2:	3d 85       	ldd	r19, Y+13	; 0x0d
     df4:	2b 30       	cpi	r18, 0x0B	; 11
     df6:	31 05       	cpc	r19, r1
     df8:	61 f0       	breq	.+24     	; 0xe12 <Calculator_Run+0xc0>
     dfa:	8c 85       	ldd	r24, Y+12	; 0x0c
     dfc:	9d 85       	ldd	r25, Y+13	; 0x0d
     dfe:	8f 30       	cpi	r24, 0x0F	; 15
     e00:	91 05       	cpc	r25, r1
     e02:	51 f0       	breq	.+20     	; 0xe18 <Calculator_Run+0xc6>
     e04:	0b c0       	rjmp	.+22     	; 0xe1c <Calculator_Run+0xca>
            {
            case CALCULATOR_BUTTON_PLUS:
                operation = '+';
     e06:	8b e2       	ldi	r24, 0x2B	; 43
     e08:	8f 83       	std	Y+7, r24	; 0x07
     e0a:	08 c0       	rjmp	.+16     	; 0xe1c <Calculator_Run+0xca>
                break;
            case CALCULATOR_BUTTON_MINUS:
                operation = '-';
     e0c:	8d e2       	ldi	r24, 0x2D	; 45
     e0e:	8f 83       	std	Y+7, r24	; 0x07
     e10:	05 c0       	rjmp	.+10     	; 0xe1c <Calculator_Run+0xca>
                break;
            case CALCULATOR_BUTTON_MUL:
                operation = '*';
     e12:	8a e2       	ldi	r24, 0x2A	; 42
     e14:	8f 83       	std	Y+7, r24	; 0x07
     e16:	02 c0       	rjmp	.+4      	; 0xe1c <Calculator_Run+0xca>
                break;
            case CALCULATOR_BUTTON_DIV:
                operation = '/';
     e18:	8f e2       	ldi	r24, 0x2F	; 47
     e1a:	8f 83       	std	Y+7, r24	; 0x07
                break;
            default:
                break;
            }
            LCD_DisplayCharacter(operation);
     e1c:	8f 81       	ldd	r24, Y+7	; 0x07
     e1e:	0e 94 7d 1c 	call	0x38fa	; 0x38fa <LCD_DisplayCharacter>
     e22:	a9 cf       	rjmp	.-174    	; 0xd76 <Calculator_Run+0x24>
        }
        else if (num2_flag == 0) {
     e24:	8c 81       	ldd	r24, Y+4	; 0x04
     e26:	88 23       	and	r24, r24
     e28:	81 f4       	brne	.+32     	; 0xe4a <Calculator_Run+0xf8>
            num2_flag = 1;
     e2a:	81 e0       	ldi	r24, 0x01	; 1
     e2c:	8c 83       	std	Y+4, r24	; 0x04
            num2 = Calculator_GetRealNumber(pressed_button);
     e2e:	89 81       	ldd	r24, Y+1	; 0x01
     e30:	0e 94 7b 07 	call	0xef6	; 0xef6 <Calculator_GetRealNumber>
     e34:	88 87       	std	Y+8, r24	; 0x08
            LCD_DisplayNumber(num2);
     e36:	88 85       	ldd	r24, Y+8	; 0x08
     e38:	88 2f       	mov	r24, r24
     e3a:	90 e0       	ldi	r25, 0x00	; 0
     e3c:	a0 e0       	ldi	r26, 0x00	; 0
     e3e:	b0 e0       	ldi	r27, 0x00	; 0
     e40:	bc 01       	movw	r22, r24
     e42:	cd 01       	movw	r24, r26
     e44:	0e 94 d7 1c 	call	0x39ae	; 0x39ae <LCD_DisplayNumber>
     e48:	96 cf       	rjmp	.-212    	; 0xd76 <Calculator_Run+0x24>
        }
        else if (result_flag == 0) {
     e4a:	8a 81       	ldd	r24, Y+2	; 0x02
     e4c:	88 23       	and	r24, r24
     e4e:	09 f0       	breq	.+2      	; 0xe52 <Calculator_Run+0x100>
     e50:	92 cf       	rjmp	.-220    	; 0xd76 <Calculator_Run+0x24>
            if (pressed_button == CALCULATOR_BUTTON_EQUAL) {
     e52:	89 81       	ldd	r24, Y+1	; 0x01
     e54:	82 30       	cpi	r24, 0x02	; 2
     e56:	09 f0       	breq	.+2      	; 0xe5a <Calculator_Run+0x108>
     e58:	8e cf       	rjmp	.-228    	; 0xd76 <Calculator_Run+0x24>
                result_flag = 1;
     e5a:	81 e0       	ldi	r24, 0x01	; 1
     e5c:	8a 83       	std	Y+2, r24	; 0x02
                switch (operation)
     e5e:	8f 81       	ldd	r24, Y+7	; 0x07
     e60:	28 2f       	mov	r18, r24
     e62:	30 e0       	ldi	r19, 0x00	; 0
     e64:	3b 87       	std	Y+11, r19	; 0x0b
     e66:	2a 87       	std	Y+10, r18	; 0x0a
     e68:	8a 85       	ldd	r24, Y+10	; 0x0a
     e6a:	9b 85       	ldd	r25, Y+11	; 0x0b
     e6c:	8b 32       	cpi	r24, 0x2B	; 43
     e6e:	91 05       	cpc	r25, r1
     e70:	b1 f0       	breq	.+44     	; 0xe9e <Calculator_Run+0x14c>
     e72:	2a 85       	ldd	r18, Y+10	; 0x0a
     e74:	3b 85       	ldd	r19, Y+11	; 0x0b
     e76:	2c 32       	cpi	r18, 0x2C	; 44
     e78:	31 05       	cpc	r19, r1
     e7a:	34 f4       	brge	.+12     	; 0xe88 <Calculator_Run+0x136>
     e7c:	8a 85       	ldd	r24, Y+10	; 0x0a
     e7e:	9b 85       	ldd	r25, Y+11	; 0x0b
     e80:	8a 32       	cpi	r24, 0x2A	; 42
     e82:	91 05       	cpc	r25, r1
     e84:	b1 f0       	breq	.+44     	; 0xeb2 <Calculator_Run+0x160>
     e86:	22 c0       	rjmp	.+68     	; 0xecc <Calculator_Run+0x17a>
     e88:	2a 85       	ldd	r18, Y+10	; 0x0a
     e8a:	3b 85       	ldd	r19, Y+11	; 0x0b
     e8c:	2d 32       	cpi	r18, 0x2D	; 45
     e8e:	31 05       	cpc	r19, r1
     e90:	59 f0       	breq	.+22     	; 0xea8 <Calculator_Run+0x156>
     e92:	8a 85       	ldd	r24, Y+10	; 0x0a
     e94:	9b 85       	ldd	r25, Y+11	; 0x0b
     e96:	8f 32       	cpi	r24, 0x2F	; 47
     e98:	91 05       	cpc	r25, r1
     e9a:	91 f0       	breq	.+36     	; 0xec0 <Calculator_Run+0x16e>
     e9c:	17 c0       	rjmp	.+46     	; 0xecc <Calculator_Run+0x17a>
                {
                case '+':
                    result = num1 + num2;
     e9e:	89 85       	ldd	r24, Y+9	; 0x09
     ea0:	98 85       	ldd	r25, Y+8	; 0x08
     ea2:	89 0f       	add	r24, r25
     ea4:	8e 83       	std	Y+6, r24	; 0x06
     ea6:	12 c0       	rjmp	.+36     	; 0xecc <Calculator_Run+0x17a>
                    break;
                case '-':
                    result = num1 - num2;
     ea8:	89 85       	ldd	r24, Y+9	; 0x09
     eaa:	98 85       	ldd	r25, Y+8	; 0x08
     eac:	89 1b       	sub	r24, r25
     eae:	8e 83       	std	Y+6, r24	; 0x06
     eb0:	0d c0       	rjmp	.+26     	; 0xecc <Calculator_Run+0x17a>
                    break;
                case '*':
                    result = num1 * num2;
     eb2:	89 85       	ldd	r24, Y+9	; 0x09
     eb4:	98 85       	ldd	r25, Y+8	; 0x08
     eb6:	89 9f       	mul	r24, r25
     eb8:	80 2d       	mov	r24, r0
     eba:	11 24       	eor	r1, r1
     ebc:	8e 83       	std	Y+6, r24	; 0x06
     ebe:	06 c0       	rjmp	.+12     	; 0xecc <Calculator_Run+0x17a>
                    break;
                case '/':
                    result = num1 / num2;
     ec0:	89 85       	ldd	r24, Y+9	; 0x09
     ec2:	98 85       	ldd	r25, Y+8	; 0x08
     ec4:	69 2f       	mov	r22, r25
     ec6:	0e 94 bf 23 	call	0x477e	; 0x477e <__udivmodqi4>
     eca:	8e 83       	std	Y+6, r24	; 0x06
                    break;
                default:
                    break;
                }
                LCD_DisplayCharacter('=');
     ecc:	8d e3       	ldi	r24, 0x3D	; 61
     ece:	0e 94 7d 1c 	call	0x38fa	; 0x38fa <LCD_DisplayCharacter>
                LCD_SetCursorPosition(1,0);
     ed2:	81 e0       	ldi	r24, 0x01	; 1
     ed4:	60 e0       	ldi	r22, 0x00	; 0
     ed6:	0e 94 b3 1c 	call	0x3966	; 0x3966 <LCD_SetCursorPosition>
                LCD_DisplayString((u8*)"Result = ");
     eda:	80 e6       	ldi	r24, 0x60	; 96
     edc:	90 e0       	ldi	r25, 0x00	; 0
     ede:	0e 94 8a 1c 	call	0x3914	; 0x3914 <LCD_DisplayString>
                LCD_DisplayNumber(result);
     ee2:	8e 81       	ldd	r24, Y+6	; 0x06
     ee4:	88 2f       	mov	r24, r24
     ee6:	90 e0       	ldi	r25, 0x00	; 0
     ee8:	a0 e0       	ldi	r26, 0x00	; 0
     eea:	b0 e0       	ldi	r27, 0x00	; 0
     eec:	bc 01       	movw	r22, r24
     eee:	cd 01       	movw	r24, r26
     ef0:	0e 94 d7 1c 	call	0x39ae	; 0x39ae <LCD_DisplayNumber>
     ef4:	40 cf       	rjmp	.-384    	; 0xd76 <Calculator_Run+0x24>

00000ef6 <Calculator_GetRealNumber>:
            }
        }
    }
}

 u8 Calculator_GetRealNumber (Keypad_ButtonType button) {
     ef6:	df 93       	push	r29
     ef8:	cf 93       	push	r28
     efa:	00 d0       	rcall	.+0      	; 0xefc <Calculator_GetRealNumber+0x6>
     efc:	00 d0       	rcall	.+0      	; 0xefe <Calculator_GetRealNumber+0x8>
     efe:	cd b7       	in	r28, 0x3d	; 61
     f00:	de b7       	in	r29, 0x3e	; 62
     f02:	8a 83       	std	Y+2, r24	; 0x02
    u8 num = 0;
     f04:	19 82       	std	Y+1, r1	; 0x01
    switch (button)
     f06:	8a 81       	ldd	r24, Y+2	; 0x02
     f08:	28 2f       	mov	r18, r24
     f0a:	30 e0       	ldi	r19, 0x00	; 0
     f0c:	3c 83       	std	Y+4, r19	; 0x04
     f0e:	2b 83       	std	Y+3, r18	; 0x03
     f10:	8b 81       	ldd	r24, Y+3	; 0x03
     f12:	9c 81       	ldd	r25, Y+4	; 0x04
     f14:	88 30       	cpi	r24, 0x08	; 8
     f16:	91 05       	cpc	r25, r1
     f18:	09 f4       	brne	.+2      	; 0xf1c <Calculator_GetRealNumber+0x26>
     f1a:	4b c0       	rjmp	.+150    	; 0xfb2 <Calculator_GetRealNumber+0xbc>
     f1c:	2b 81       	ldd	r18, Y+3	; 0x03
     f1e:	3c 81       	ldd	r19, Y+4	; 0x04
     f20:	29 30       	cpi	r18, 0x09	; 9
     f22:	31 05       	cpc	r19, r1
     f24:	dc f4       	brge	.+54     	; 0xf5c <Calculator_GetRealNumber+0x66>
     f26:	8b 81       	ldd	r24, Y+3	; 0x03
     f28:	9c 81       	ldd	r25, Y+4	; 0x04
     f2a:	84 30       	cpi	r24, 0x04	; 4
     f2c:	91 05       	cpc	r25, r1
     f2e:	c1 f1       	breq	.+112    	; 0xfa0 <Calculator_GetRealNumber+0xaa>
     f30:	2b 81       	ldd	r18, Y+3	; 0x03
     f32:	3c 81       	ldd	r19, Y+4	; 0x04
     f34:	25 30       	cpi	r18, 0x05	; 5
     f36:	31 05       	cpc	r19, r1
     f38:	34 f4       	brge	.+12     	; 0xf46 <Calculator_GetRealNumber+0x50>
     f3a:	8b 81       	ldd	r24, Y+3	; 0x03
     f3c:	9c 81       	ldd	r25, Y+4	; 0x04
     f3e:	81 30       	cpi	r24, 0x01	; 1
     f40:	91 05       	cpc	r25, r1
     f42:	61 f1       	breq	.+88     	; 0xf9c <Calculator_GetRealNumber+0xa6>
     f44:	47 c0       	rjmp	.+142    	; 0xfd4 <Calculator_GetRealNumber+0xde>
     f46:	2b 81       	ldd	r18, Y+3	; 0x03
     f48:	3c 81       	ldd	r19, Y+4	; 0x04
     f4a:	25 30       	cpi	r18, 0x05	; 5
     f4c:	31 05       	cpc	r19, r1
     f4e:	59 f1       	breq	.+86     	; 0xfa6 <Calculator_GetRealNumber+0xb0>
     f50:	8b 81       	ldd	r24, Y+3	; 0x03
     f52:	9c 81       	ldd	r25, Y+4	; 0x04
     f54:	86 30       	cpi	r24, 0x06	; 6
     f56:	91 05       	cpc	r25, r1
     f58:	49 f1       	breq	.+82     	; 0xfac <Calculator_GetRealNumber+0xb6>
     f5a:	3c c0       	rjmp	.+120    	; 0xfd4 <Calculator_GetRealNumber+0xde>
     f5c:	2b 81       	ldd	r18, Y+3	; 0x03
     f5e:	3c 81       	ldd	r19, Y+4	; 0x04
     f60:	2c 30       	cpi	r18, 0x0C	; 12
     f62:	31 05       	cpc	r19, r1
     f64:	79 f1       	breq	.+94     	; 0xfc4 <Calculator_GetRealNumber+0xce>
     f66:	8b 81       	ldd	r24, Y+3	; 0x03
     f68:	9c 81       	ldd	r25, Y+4	; 0x04
     f6a:	8d 30       	cpi	r24, 0x0D	; 13
     f6c:	91 05       	cpc	r25, r1
     f6e:	5c f4       	brge	.+22     	; 0xf86 <Calculator_GetRealNumber+0x90>
     f70:	2b 81       	ldd	r18, Y+3	; 0x03
     f72:	3c 81       	ldd	r19, Y+4	; 0x04
     f74:	29 30       	cpi	r18, 0x09	; 9
     f76:	31 05       	cpc	r19, r1
     f78:	f9 f0       	breq	.+62     	; 0xfb8 <Calculator_GetRealNumber+0xc2>
     f7a:	8b 81       	ldd	r24, Y+3	; 0x03
     f7c:	9c 81       	ldd	r25, Y+4	; 0x04
     f7e:	8a 30       	cpi	r24, 0x0A	; 10
     f80:	91 05       	cpc	r25, r1
     f82:	e9 f0       	breq	.+58     	; 0xfbe <Calculator_GetRealNumber+0xc8>
     f84:	27 c0       	rjmp	.+78     	; 0xfd4 <Calculator_GetRealNumber+0xde>
     f86:	2b 81       	ldd	r18, Y+3	; 0x03
     f88:	3c 81       	ldd	r19, Y+4	; 0x04
     f8a:	2d 30       	cpi	r18, 0x0D	; 13
     f8c:	31 05       	cpc	r19, r1
     f8e:	e9 f0       	breq	.+58     	; 0xfca <Calculator_GetRealNumber+0xd4>
     f90:	8b 81       	ldd	r24, Y+3	; 0x03
     f92:	9c 81       	ldd	r25, Y+4	; 0x04
     f94:	8e 30       	cpi	r24, 0x0E	; 14
     f96:	91 05       	cpc	r25, r1
     f98:	d9 f0       	breq	.+54     	; 0xfd0 <Calculator_GetRealNumber+0xda>
     f9a:	1c c0       	rjmp	.+56     	; 0xfd4 <Calculator_GetRealNumber+0xde>
    {
    case CALCULATOR_BUTTON_NUM0:
        num = 0;
     f9c:	19 82       	std	Y+1, r1	; 0x01
     f9e:	1a c0       	rjmp	.+52     	; 0xfd4 <Calculator_GetRealNumber+0xde>
        break;
    case CALCULATOR_BUTTON_NUM1:
        num = 1;
     fa0:	81 e0       	ldi	r24, 0x01	; 1
     fa2:	89 83       	std	Y+1, r24	; 0x01
     fa4:	17 c0       	rjmp	.+46     	; 0xfd4 <Calculator_GetRealNumber+0xde>
        break;
    case CALCULATOR_BUTTON_NUM2:
        num = 2;
     fa6:	82 e0       	ldi	r24, 0x02	; 2
     fa8:	89 83       	std	Y+1, r24	; 0x01
     faa:	14 c0       	rjmp	.+40     	; 0xfd4 <Calculator_GetRealNumber+0xde>
        break;
    case CALCULATOR_BUTTON_NUM3:
        num = 3;
     fac:	83 e0       	ldi	r24, 0x03	; 3
     fae:	89 83       	std	Y+1, r24	; 0x01
     fb0:	11 c0       	rjmp	.+34     	; 0xfd4 <Calculator_GetRealNumber+0xde>
        break;
    case CALCULATOR_BUTTON_NUM4:
        num = 4;
     fb2:	84 e0       	ldi	r24, 0x04	; 4
     fb4:	89 83       	std	Y+1, r24	; 0x01
     fb6:	0e c0       	rjmp	.+28     	; 0xfd4 <Calculator_GetRealNumber+0xde>
        break;
    case CALCULATOR_BUTTON_NUM5:
        num = 5;
     fb8:	85 e0       	ldi	r24, 0x05	; 5
     fba:	89 83       	std	Y+1, r24	; 0x01
     fbc:	0b c0       	rjmp	.+22     	; 0xfd4 <Calculator_GetRealNumber+0xde>
        break;
    case CALCULATOR_BUTTON_NUM6:
        num = 6;
     fbe:	86 e0       	ldi	r24, 0x06	; 6
     fc0:	89 83       	std	Y+1, r24	; 0x01
     fc2:	08 c0       	rjmp	.+16     	; 0xfd4 <Calculator_GetRealNumber+0xde>
        break;
    case CALCULATOR_BUTTON_NUM7:
        num = 7;
     fc4:	87 e0       	ldi	r24, 0x07	; 7
     fc6:	89 83       	std	Y+1, r24	; 0x01
     fc8:	05 c0       	rjmp	.+10     	; 0xfd4 <Calculator_GetRealNumber+0xde>
        break;
    case CALCULATOR_BUTTON_NUM8:
        num = 8;
     fca:	88 e0       	ldi	r24, 0x08	; 8
     fcc:	89 83       	std	Y+1, r24	; 0x01
     fce:	02 c0       	rjmp	.+4      	; 0xfd4 <Calculator_GetRealNumber+0xde>
        break;
    case CALCULATOR_BUTTON_NUM9:
        num = 9;
     fd0:	89 e0       	ldi	r24, 0x09	; 9
     fd2:	89 83       	std	Y+1, r24	; 0x01
        break;
    default:
        break;
    }
    return num;
     fd4:	89 81       	ldd	r24, Y+1	; 0x01
}
     fd6:	0f 90       	pop	r0
     fd8:	0f 90       	pop	r0
     fda:	0f 90       	pop	r0
     fdc:	0f 90       	pop	r0
     fde:	cf 91       	pop	r28
     fe0:	df 91       	pop	r29
     fe2:	08 95       	ret

00000fe4 <DIO_FlipPinLevel>:
#include "std_types.h"
#include "macros.h"
#include "DIO.h"

void DIO_FlipPinLevel(DIO_PortType port, DIO_PinType pin) {
     fe4:	df 93       	push	r29
     fe6:	cf 93       	push	r28
     fe8:	00 d0       	rcall	.+0      	; 0xfea <DIO_FlipPinLevel+0x6>
     fea:	00 d0       	rcall	.+0      	; 0xfec <DIO_FlipPinLevel+0x8>
     fec:	cd b7       	in	r28, 0x3d	; 61
     fee:	de b7       	in	r29, 0x3e	; 62
     ff0:	89 83       	std	Y+1, r24	; 0x01
     ff2:	6a 83       	std	Y+2, r22	; 0x02
    switch (port)
     ff4:	89 81       	ldd	r24, Y+1	; 0x01
     ff6:	28 2f       	mov	r18, r24
     ff8:	30 e0       	ldi	r19, 0x00	; 0
     ffa:	3c 83       	std	Y+4, r19	; 0x04
     ffc:	2b 83       	std	Y+3, r18	; 0x03
     ffe:	8b 81       	ldd	r24, Y+3	; 0x03
    1000:	9c 81       	ldd	r25, Y+4	; 0x04
    1002:	81 30       	cpi	r24, 0x01	; 1
    1004:	91 05       	cpc	r25, r1
    1006:	49 f1       	breq	.+82     	; 0x105a <DIO_FlipPinLevel+0x76>
    1008:	2b 81       	ldd	r18, Y+3	; 0x03
    100a:	3c 81       	ldd	r19, Y+4	; 0x04
    100c:	22 30       	cpi	r18, 0x02	; 2
    100e:	31 05       	cpc	r19, r1
    1010:	2c f4       	brge	.+10     	; 0x101c <DIO_FlipPinLevel+0x38>
    1012:	8b 81       	ldd	r24, Y+3	; 0x03
    1014:	9c 81       	ldd	r25, Y+4	; 0x04
    1016:	00 97       	sbiw	r24, 0x00	; 0
    1018:	61 f0       	breq	.+24     	; 0x1032 <DIO_FlipPinLevel+0x4e>
    101a:	5a c0       	rjmp	.+180    	; 0x10d0 <DIO_FlipPinLevel+0xec>
    101c:	2b 81       	ldd	r18, Y+3	; 0x03
    101e:	3c 81       	ldd	r19, Y+4	; 0x04
    1020:	22 30       	cpi	r18, 0x02	; 2
    1022:	31 05       	cpc	r19, r1
    1024:	71 f1       	breq	.+92     	; 0x1082 <DIO_FlipPinLevel+0x9e>
    1026:	8b 81       	ldd	r24, Y+3	; 0x03
    1028:	9c 81       	ldd	r25, Y+4	; 0x04
    102a:	83 30       	cpi	r24, 0x03	; 3
    102c:	91 05       	cpc	r25, r1
    102e:	e9 f1       	breq	.+122    	; 0x10aa <DIO_FlipPinLevel+0xc6>
    1030:	4f c0       	rjmp	.+158    	; 0x10d0 <DIO_FlipPinLevel+0xec>
    {
    case DIO_PORTA:
        TOG_BIT(PORTA, pin);
    1032:	ab e3       	ldi	r26, 0x3B	; 59
    1034:	b0 e0       	ldi	r27, 0x00	; 0
    1036:	eb e3       	ldi	r30, 0x3B	; 59
    1038:	f0 e0       	ldi	r31, 0x00	; 0
    103a:	80 81       	ld	r24, Z
    103c:	48 2f       	mov	r20, r24
    103e:	8a 81       	ldd	r24, Y+2	; 0x02
    1040:	28 2f       	mov	r18, r24
    1042:	30 e0       	ldi	r19, 0x00	; 0
    1044:	81 e0       	ldi	r24, 0x01	; 1
    1046:	90 e0       	ldi	r25, 0x00	; 0
    1048:	02 2e       	mov	r0, r18
    104a:	02 c0       	rjmp	.+4      	; 0x1050 <DIO_FlipPinLevel+0x6c>
    104c:	88 0f       	add	r24, r24
    104e:	99 1f       	adc	r25, r25
    1050:	0a 94       	dec	r0
    1052:	e2 f7       	brpl	.-8      	; 0x104c <DIO_FlipPinLevel+0x68>
    1054:	84 27       	eor	r24, r20
    1056:	8c 93       	st	X, r24
    1058:	3b c0       	rjmp	.+118    	; 0x10d0 <DIO_FlipPinLevel+0xec>
        break;
    case DIO_PORTB:
        TOG_BIT(PORTB, pin);
    105a:	a8 e3       	ldi	r26, 0x38	; 56
    105c:	b0 e0       	ldi	r27, 0x00	; 0
    105e:	e8 e3       	ldi	r30, 0x38	; 56
    1060:	f0 e0       	ldi	r31, 0x00	; 0
    1062:	80 81       	ld	r24, Z
    1064:	48 2f       	mov	r20, r24
    1066:	8a 81       	ldd	r24, Y+2	; 0x02
    1068:	28 2f       	mov	r18, r24
    106a:	30 e0       	ldi	r19, 0x00	; 0
    106c:	81 e0       	ldi	r24, 0x01	; 1
    106e:	90 e0       	ldi	r25, 0x00	; 0
    1070:	02 2e       	mov	r0, r18
    1072:	02 c0       	rjmp	.+4      	; 0x1078 <DIO_FlipPinLevel+0x94>
    1074:	88 0f       	add	r24, r24
    1076:	99 1f       	adc	r25, r25
    1078:	0a 94       	dec	r0
    107a:	e2 f7       	brpl	.-8      	; 0x1074 <DIO_FlipPinLevel+0x90>
    107c:	84 27       	eor	r24, r20
    107e:	8c 93       	st	X, r24
    1080:	27 c0       	rjmp	.+78     	; 0x10d0 <DIO_FlipPinLevel+0xec>
        break;
    case DIO_PORTC:
        TOG_BIT(PORTC, pin);
    1082:	a5 e3       	ldi	r26, 0x35	; 53
    1084:	b0 e0       	ldi	r27, 0x00	; 0
    1086:	e5 e3       	ldi	r30, 0x35	; 53
    1088:	f0 e0       	ldi	r31, 0x00	; 0
    108a:	80 81       	ld	r24, Z
    108c:	48 2f       	mov	r20, r24
    108e:	8a 81       	ldd	r24, Y+2	; 0x02
    1090:	28 2f       	mov	r18, r24
    1092:	30 e0       	ldi	r19, 0x00	; 0
    1094:	81 e0       	ldi	r24, 0x01	; 1
    1096:	90 e0       	ldi	r25, 0x00	; 0
    1098:	02 2e       	mov	r0, r18
    109a:	02 c0       	rjmp	.+4      	; 0x10a0 <DIO_FlipPinLevel+0xbc>
    109c:	88 0f       	add	r24, r24
    109e:	99 1f       	adc	r25, r25
    10a0:	0a 94       	dec	r0
    10a2:	e2 f7       	brpl	.-8      	; 0x109c <DIO_FlipPinLevel+0xb8>
    10a4:	84 27       	eor	r24, r20
    10a6:	8c 93       	st	X, r24
    10a8:	13 c0       	rjmp	.+38     	; 0x10d0 <DIO_FlipPinLevel+0xec>
        break;
    case DIO_PORTD:
        TOG_BIT(PORTD, pin);
    10aa:	a2 e3       	ldi	r26, 0x32	; 50
    10ac:	b0 e0       	ldi	r27, 0x00	; 0
    10ae:	e2 e3       	ldi	r30, 0x32	; 50
    10b0:	f0 e0       	ldi	r31, 0x00	; 0
    10b2:	80 81       	ld	r24, Z
    10b4:	48 2f       	mov	r20, r24
    10b6:	8a 81       	ldd	r24, Y+2	; 0x02
    10b8:	28 2f       	mov	r18, r24
    10ba:	30 e0       	ldi	r19, 0x00	; 0
    10bc:	81 e0       	ldi	r24, 0x01	; 1
    10be:	90 e0       	ldi	r25, 0x00	; 0
    10c0:	02 2e       	mov	r0, r18
    10c2:	02 c0       	rjmp	.+4      	; 0x10c8 <DIO_FlipPinLevel+0xe4>
    10c4:	88 0f       	add	r24, r24
    10c6:	99 1f       	adc	r25, r25
    10c8:	0a 94       	dec	r0
    10ca:	e2 f7       	brpl	.-8      	; 0x10c4 <DIO_FlipPinLevel+0xe0>
    10cc:	84 27       	eor	r24, r20
    10ce:	8c 93       	st	X, r24
        break;
    default:
        break;
    }
}
    10d0:	0f 90       	pop	r0
    10d2:	0f 90       	pop	r0
    10d4:	0f 90       	pop	r0
    10d6:	0f 90       	pop	r0
    10d8:	cf 91       	pop	r28
    10da:	df 91       	pop	r29
    10dc:	08 95       	ret

000010de <DIO_SetPinMode>:
void DIO_SetPinMode(DIO_PortType port, DIO_PinType pin, DIO_ModeType mode) {
    10de:	df 93       	push	r29
    10e0:	cf 93       	push	r28
    10e2:	cd b7       	in	r28, 0x3d	; 61
    10e4:	de b7       	in	r29, 0x3e	; 62
    10e6:	29 97       	sbiw	r28, 0x09	; 9
    10e8:	0f b6       	in	r0, 0x3f	; 63
    10ea:	f8 94       	cli
    10ec:	de bf       	out	0x3e, r29	; 62
    10ee:	0f be       	out	0x3f, r0	; 63
    10f0:	cd bf       	out	0x3d, r28	; 61
    10f2:	89 83       	std	Y+1, r24	; 0x01
    10f4:	6a 83       	std	Y+2, r22	; 0x02
    10f6:	4b 83       	std	Y+3, r20	; 0x03
    if (mode == DIO_INPUT_FLOATING)
    10f8:	8b 81       	ldd	r24, Y+3	; 0x03
    10fa:	88 23       	and	r24, r24
    10fc:	09 f0       	breq	.+2      	; 0x1100 <DIO_SetPinMode+0x22>
    10fe:	c2 c0       	rjmp	.+388    	; 0x1284 <DIO_SetPinMode+0x1a6>
    {
        switch (port)
    1100:	89 81       	ldd	r24, Y+1	; 0x01
    1102:	28 2f       	mov	r18, r24
    1104:	30 e0       	ldi	r19, 0x00	; 0
    1106:	39 87       	std	Y+9, r19	; 0x09
    1108:	28 87       	std	Y+8, r18	; 0x08
    110a:	88 85       	ldd	r24, Y+8	; 0x08
    110c:	99 85       	ldd	r25, Y+9	; 0x09
    110e:	81 30       	cpi	r24, 0x01	; 1
    1110:	91 05       	cpc	r25, r1
    1112:	09 f4       	brne	.+2      	; 0x1116 <DIO_SetPinMode+0x38>
    1114:	3f c0       	rjmp	.+126    	; 0x1194 <DIO_SetPinMode+0xb6>
    1116:	28 85       	ldd	r18, Y+8	; 0x08
    1118:	39 85       	ldd	r19, Y+9	; 0x09
    111a:	22 30       	cpi	r18, 0x02	; 2
    111c:	31 05       	cpc	r19, r1
    111e:	2c f4       	brge	.+10     	; 0x112a <DIO_SetPinMode+0x4c>
    1120:	88 85       	ldd	r24, Y+8	; 0x08
    1122:	99 85       	ldd	r25, Y+9	; 0x09
    1124:	00 97       	sbiw	r24, 0x00	; 0
    1126:	71 f0       	breq	.+28     	; 0x1144 <DIO_SetPinMode+0x66>
    1128:	e1 c1       	rjmp	.+962    	; 0x14ec <DIO_SetPinMode+0x40e>
    112a:	28 85       	ldd	r18, Y+8	; 0x08
    112c:	39 85       	ldd	r19, Y+9	; 0x09
    112e:	22 30       	cpi	r18, 0x02	; 2
    1130:	31 05       	cpc	r19, r1
    1132:	09 f4       	brne	.+2      	; 0x1136 <DIO_SetPinMode+0x58>
    1134:	57 c0       	rjmp	.+174    	; 0x11e4 <DIO_SetPinMode+0x106>
    1136:	88 85       	ldd	r24, Y+8	; 0x08
    1138:	99 85       	ldd	r25, Y+9	; 0x09
    113a:	83 30       	cpi	r24, 0x03	; 3
    113c:	91 05       	cpc	r25, r1
    113e:	09 f4       	brne	.+2      	; 0x1142 <DIO_SetPinMode+0x64>
    1140:	79 c0       	rjmp	.+242    	; 0x1234 <DIO_SetPinMode+0x156>
    1142:	d4 c1       	rjmp	.+936    	; 0x14ec <DIO_SetPinMode+0x40e>
        {
        case DIO_PORTA:
            CLR_BIT(DDRA, pin);
    1144:	aa e3       	ldi	r26, 0x3A	; 58
    1146:	b0 e0       	ldi	r27, 0x00	; 0
    1148:	ea e3       	ldi	r30, 0x3A	; 58
    114a:	f0 e0       	ldi	r31, 0x00	; 0
    114c:	80 81       	ld	r24, Z
    114e:	48 2f       	mov	r20, r24
    1150:	8a 81       	ldd	r24, Y+2	; 0x02
    1152:	28 2f       	mov	r18, r24
    1154:	30 e0       	ldi	r19, 0x00	; 0
    1156:	81 e0       	ldi	r24, 0x01	; 1
    1158:	90 e0       	ldi	r25, 0x00	; 0
    115a:	02 c0       	rjmp	.+4      	; 0x1160 <DIO_SetPinMode+0x82>
    115c:	88 0f       	add	r24, r24
    115e:	99 1f       	adc	r25, r25
    1160:	2a 95       	dec	r18
    1162:	e2 f7       	brpl	.-8      	; 0x115c <DIO_SetPinMode+0x7e>
    1164:	80 95       	com	r24
    1166:	84 23       	and	r24, r20
    1168:	8c 93       	st	X, r24
            CLR_BIT(PORTA, pin);
    116a:	ab e3       	ldi	r26, 0x3B	; 59
    116c:	b0 e0       	ldi	r27, 0x00	; 0
    116e:	eb e3       	ldi	r30, 0x3B	; 59
    1170:	f0 e0       	ldi	r31, 0x00	; 0
    1172:	80 81       	ld	r24, Z
    1174:	48 2f       	mov	r20, r24
    1176:	8a 81       	ldd	r24, Y+2	; 0x02
    1178:	28 2f       	mov	r18, r24
    117a:	30 e0       	ldi	r19, 0x00	; 0
    117c:	81 e0       	ldi	r24, 0x01	; 1
    117e:	90 e0       	ldi	r25, 0x00	; 0
    1180:	02 2e       	mov	r0, r18
    1182:	02 c0       	rjmp	.+4      	; 0x1188 <DIO_SetPinMode+0xaa>
    1184:	88 0f       	add	r24, r24
    1186:	99 1f       	adc	r25, r25
    1188:	0a 94       	dec	r0
    118a:	e2 f7       	brpl	.-8      	; 0x1184 <DIO_SetPinMode+0xa6>
    118c:	80 95       	com	r24
    118e:	84 23       	and	r24, r20
    1190:	8c 93       	st	X, r24
    1192:	ac c1       	rjmp	.+856    	; 0x14ec <DIO_SetPinMode+0x40e>
            break;
        case DIO_PORTB:
            CLR_BIT(DDRB, pin);
    1194:	a7 e3       	ldi	r26, 0x37	; 55
    1196:	b0 e0       	ldi	r27, 0x00	; 0
    1198:	e7 e3       	ldi	r30, 0x37	; 55
    119a:	f0 e0       	ldi	r31, 0x00	; 0
    119c:	80 81       	ld	r24, Z
    119e:	48 2f       	mov	r20, r24
    11a0:	8a 81       	ldd	r24, Y+2	; 0x02
    11a2:	28 2f       	mov	r18, r24
    11a4:	30 e0       	ldi	r19, 0x00	; 0
    11a6:	81 e0       	ldi	r24, 0x01	; 1
    11a8:	90 e0       	ldi	r25, 0x00	; 0
    11aa:	02 c0       	rjmp	.+4      	; 0x11b0 <DIO_SetPinMode+0xd2>
    11ac:	88 0f       	add	r24, r24
    11ae:	99 1f       	adc	r25, r25
    11b0:	2a 95       	dec	r18
    11b2:	e2 f7       	brpl	.-8      	; 0x11ac <DIO_SetPinMode+0xce>
    11b4:	80 95       	com	r24
    11b6:	84 23       	and	r24, r20
    11b8:	8c 93       	st	X, r24
            CLR_BIT(PORTB, pin);
    11ba:	a8 e3       	ldi	r26, 0x38	; 56
    11bc:	b0 e0       	ldi	r27, 0x00	; 0
    11be:	e8 e3       	ldi	r30, 0x38	; 56
    11c0:	f0 e0       	ldi	r31, 0x00	; 0
    11c2:	80 81       	ld	r24, Z
    11c4:	48 2f       	mov	r20, r24
    11c6:	8a 81       	ldd	r24, Y+2	; 0x02
    11c8:	28 2f       	mov	r18, r24
    11ca:	30 e0       	ldi	r19, 0x00	; 0
    11cc:	81 e0       	ldi	r24, 0x01	; 1
    11ce:	90 e0       	ldi	r25, 0x00	; 0
    11d0:	02 2e       	mov	r0, r18
    11d2:	02 c0       	rjmp	.+4      	; 0x11d8 <DIO_SetPinMode+0xfa>
    11d4:	88 0f       	add	r24, r24
    11d6:	99 1f       	adc	r25, r25
    11d8:	0a 94       	dec	r0
    11da:	e2 f7       	brpl	.-8      	; 0x11d4 <DIO_SetPinMode+0xf6>
    11dc:	80 95       	com	r24
    11de:	84 23       	and	r24, r20
    11e0:	8c 93       	st	X, r24
    11e2:	84 c1       	rjmp	.+776    	; 0x14ec <DIO_SetPinMode+0x40e>
            break;
        case DIO_PORTC:
            CLR_BIT(DDRC, pin);
    11e4:	a4 e3       	ldi	r26, 0x34	; 52
    11e6:	b0 e0       	ldi	r27, 0x00	; 0
    11e8:	e4 e3       	ldi	r30, 0x34	; 52
    11ea:	f0 e0       	ldi	r31, 0x00	; 0
    11ec:	80 81       	ld	r24, Z
    11ee:	48 2f       	mov	r20, r24
    11f0:	8a 81       	ldd	r24, Y+2	; 0x02
    11f2:	28 2f       	mov	r18, r24
    11f4:	30 e0       	ldi	r19, 0x00	; 0
    11f6:	81 e0       	ldi	r24, 0x01	; 1
    11f8:	90 e0       	ldi	r25, 0x00	; 0
    11fa:	02 c0       	rjmp	.+4      	; 0x1200 <DIO_SetPinMode+0x122>
    11fc:	88 0f       	add	r24, r24
    11fe:	99 1f       	adc	r25, r25
    1200:	2a 95       	dec	r18
    1202:	e2 f7       	brpl	.-8      	; 0x11fc <DIO_SetPinMode+0x11e>
    1204:	80 95       	com	r24
    1206:	84 23       	and	r24, r20
    1208:	8c 93       	st	X, r24
            CLR_BIT(PORTC, pin);
    120a:	a5 e3       	ldi	r26, 0x35	; 53
    120c:	b0 e0       	ldi	r27, 0x00	; 0
    120e:	e5 e3       	ldi	r30, 0x35	; 53
    1210:	f0 e0       	ldi	r31, 0x00	; 0
    1212:	80 81       	ld	r24, Z
    1214:	48 2f       	mov	r20, r24
    1216:	8a 81       	ldd	r24, Y+2	; 0x02
    1218:	28 2f       	mov	r18, r24
    121a:	30 e0       	ldi	r19, 0x00	; 0
    121c:	81 e0       	ldi	r24, 0x01	; 1
    121e:	90 e0       	ldi	r25, 0x00	; 0
    1220:	02 2e       	mov	r0, r18
    1222:	02 c0       	rjmp	.+4      	; 0x1228 <DIO_SetPinMode+0x14a>
    1224:	88 0f       	add	r24, r24
    1226:	99 1f       	adc	r25, r25
    1228:	0a 94       	dec	r0
    122a:	e2 f7       	brpl	.-8      	; 0x1224 <DIO_SetPinMode+0x146>
    122c:	80 95       	com	r24
    122e:	84 23       	and	r24, r20
    1230:	8c 93       	st	X, r24
    1232:	5c c1       	rjmp	.+696    	; 0x14ec <DIO_SetPinMode+0x40e>
            break;
        case DIO_PORTD:
            CLR_BIT(DDRD, pin);
    1234:	a1 e3       	ldi	r26, 0x31	; 49
    1236:	b0 e0       	ldi	r27, 0x00	; 0
    1238:	e1 e3       	ldi	r30, 0x31	; 49
    123a:	f0 e0       	ldi	r31, 0x00	; 0
    123c:	80 81       	ld	r24, Z
    123e:	48 2f       	mov	r20, r24
    1240:	8a 81       	ldd	r24, Y+2	; 0x02
    1242:	28 2f       	mov	r18, r24
    1244:	30 e0       	ldi	r19, 0x00	; 0
    1246:	81 e0       	ldi	r24, 0x01	; 1
    1248:	90 e0       	ldi	r25, 0x00	; 0
    124a:	02 c0       	rjmp	.+4      	; 0x1250 <DIO_SetPinMode+0x172>
    124c:	88 0f       	add	r24, r24
    124e:	99 1f       	adc	r25, r25
    1250:	2a 95       	dec	r18
    1252:	e2 f7       	brpl	.-8      	; 0x124c <DIO_SetPinMode+0x16e>
    1254:	80 95       	com	r24
    1256:	84 23       	and	r24, r20
    1258:	8c 93       	st	X, r24
            CLR_BIT(PORTD, pin);
    125a:	a2 e3       	ldi	r26, 0x32	; 50
    125c:	b0 e0       	ldi	r27, 0x00	; 0
    125e:	e2 e3       	ldi	r30, 0x32	; 50
    1260:	f0 e0       	ldi	r31, 0x00	; 0
    1262:	80 81       	ld	r24, Z
    1264:	48 2f       	mov	r20, r24
    1266:	8a 81       	ldd	r24, Y+2	; 0x02
    1268:	28 2f       	mov	r18, r24
    126a:	30 e0       	ldi	r19, 0x00	; 0
    126c:	81 e0       	ldi	r24, 0x01	; 1
    126e:	90 e0       	ldi	r25, 0x00	; 0
    1270:	02 2e       	mov	r0, r18
    1272:	02 c0       	rjmp	.+4      	; 0x1278 <DIO_SetPinMode+0x19a>
    1274:	88 0f       	add	r24, r24
    1276:	99 1f       	adc	r25, r25
    1278:	0a 94       	dec	r0
    127a:	e2 f7       	brpl	.-8      	; 0x1274 <DIO_SetPinMode+0x196>
    127c:	80 95       	com	r24
    127e:	84 23       	and	r24, r20
    1280:	8c 93       	st	X, r24
    1282:	34 c1       	rjmp	.+616    	; 0x14ec <DIO_SetPinMode+0x40e>
            break;
        default:
            break;
        }
    }
    else if (mode == DIO_INPUT_PULLUP)
    1284:	8b 81       	ldd	r24, Y+3	; 0x03
    1286:	81 30       	cpi	r24, 0x01	; 1
    1288:	09 f0       	breq	.+2      	; 0x128c <DIO_SetPinMode+0x1ae>
    128a:	be c0       	rjmp	.+380    	; 0x1408 <DIO_SetPinMode+0x32a>
    {
        switch (port)
    128c:	89 81       	ldd	r24, Y+1	; 0x01
    128e:	28 2f       	mov	r18, r24
    1290:	30 e0       	ldi	r19, 0x00	; 0
    1292:	3f 83       	std	Y+7, r19	; 0x07
    1294:	2e 83       	std	Y+6, r18	; 0x06
    1296:	8e 81       	ldd	r24, Y+6	; 0x06
    1298:	9f 81       	ldd	r25, Y+7	; 0x07
    129a:	81 30       	cpi	r24, 0x01	; 1
    129c:	91 05       	cpc	r25, r1
    129e:	09 f4       	brne	.+2      	; 0x12a2 <DIO_SetPinMode+0x1c4>
    12a0:	3e c0       	rjmp	.+124    	; 0x131e <DIO_SetPinMode+0x240>
    12a2:	2e 81       	ldd	r18, Y+6	; 0x06
    12a4:	3f 81       	ldd	r19, Y+7	; 0x07
    12a6:	22 30       	cpi	r18, 0x02	; 2
    12a8:	31 05       	cpc	r19, r1
    12aa:	2c f4       	brge	.+10     	; 0x12b6 <DIO_SetPinMode+0x1d8>
    12ac:	8e 81       	ldd	r24, Y+6	; 0x06
    12ae:	9f 81       	ldd	r25, Y+7	; 0x07
    12b0:	00 97       	sbiw	r24, 0x00	; 0
    12b2:	71 f0       	breq	.+28     	; 0x12d0 <DIO_SetPinMode+0x1f2>
    12b4:	1b c1       	rjmp	.+566    	; 0x14ec <DIO_SetPinMode+0x40e>
    12b6:	2e 81       	ldd	r18, Y+6	; 0x06
    12b8:	3f 81       	ldd	r19, Y+7	; 0x07
    12ba:	22 30       	cpi	r18, 0x02	; 2
    12bc:	31 05       	cpc	r19, r1
    12be:	09 f4       	brne	.+2      	; 0x12c2 <DIO_SetPinMode+0x1e4>
    12c0:	55 c0       	rjmp	.+170    	; 0x136c <DIO_SetPinMode+0x28e>
    12c2:	8e 81       	ldd	r24, Y+6	; 0x06
    12c4:	9f 81       	ldd	r25, Y+7	; 0x07
    12c6:	83 30       	cpi	r24, 0x03	; 3
    12c8:	91 05       	cpc	r25, r1
    12ca:	09 f4       	brne	.+2      	; 0x12ce <DIO_SetPinMode+0x1f0>
    12cc:	76 c0       	rjmp	.+236    	; 0x13ba <DIO_SetPinMode+0x2dc>
    12ce:	0e c1       	rjmp	.+540    	; 0x14ec <DIO_SetPinMode+0x40e>
        {
        case DIO_PORTA:
            CLR_BIT(DDRA, pin);
    12d0:	aa e3       	ldi	r26, 0x3A	; 58
    12d2:	b0 e0       	ldi	r27, 0x00	; 0
    12d4:	ea e3       	ldi	r30, 0x3A	; 58
    12d6:	f0 e0       	ldi	r31, 0x00	; 0
    12d8:	80 81       	ld	r24, Z
    12da:	48 2f       	mov	r20, r24
    12dc:	8a 81       	ldd	r24, Y+2	; 0x02
    12de:	28 2f       	mov	r18, r24
    12e0:	30 e0       	ldi	r19, 0x00	; 0
    12e2:	81 e0       	ldi	r24, 0x01	; 1
    12e4:	90 e0       	ldi	r25, 0x00	; 0
    12e6:	02 c0       	rjmp	.+4      	; 0x12ec <DIO_SetPinMode+0x20e>
    12e8:	88 0f       	add	r24, r24
    12ea:	99 1f       	adc	r25, r25
    12ec:	2a 95       	dec	r18
    12ee:	e2 f7       	brpl	.-8      	; 0x12e8 <DIO_SetPinMode+0x20a>
    12f0:	80 95       	com	r24
    12f2:	84 23       	and	r24, r20
    12f4:	8c 93       	st	X, r24
            SET_BIT(PORTA, pin);
    12f6:	ab e3       	ldi	r26, 0x3B	; 59
    12f8:	b0 e0       	ldi	r27, 0x00	; 0
    12fa:	eb e3       	ldi	r30, 0x3B	; 59
    12fc:	f0 e0       	ldi	r31, 0x00	; 0
    12fe:	80 81       	ld	r24, Z
    1300:	48 2f       	mov	r20, r24
    1302:	8a 81       	ldd	r24, Y+2	; 0x02
    1304:	28 2f       	mov	r18, r24
    1306:	30 e0       	ldi	r19, 0x00	; 0
    1308:	81 e0       	ldi	r24, 0x01	; 1
    130a:	90 e0       	ldi	r25, 0x00	; 0
    130c:	02 2e       	mov	r0, r18
    130e:	02 c0       	rjmp	.+4      	; 0x1314 <DIO_SetPinMode+0x236>
    1310:	88 0f       	add	r24, r24
    1312:	99 1f       	adc	r25, r25
    1314:	0a 94       	dec	r0
    1316:	e2 f7       	brpl	.-8      	; 0x1310 <DIO_SetPinMode+0x232>
    1318:	84 2b       	or	r24, r20
    131a:	8c 93       	st	X, r24
    131c:	e7 c0       	rjmp	.+462    	; 0x14ec <DIO_SetPinMode+0x40e>
            break;
        case DIO_PORTB:
            CLR_BIT(DDRB, pin);
    131e:	a7 e3       	ldi	r26, 0x37	; 55
    1320:	b0 e0       	ldi	r27, 0x00	; 0
    1322:	e7 e3       	ldi	r30, 0x37	; 55
    1324:	f0 e0       	ldi	r31, 0x00	; 0
    1326:	80 81       	ld	r24, Z
    1328:	48 2f       	mov	r20, r24
    132a:	8a 81       	ldd	r24, Y+2	; 0x02
    132c:	28 2f       	mov	r18, r24
    132e:	30 e0       	ldi	r19, 0x00	; 0
    1330:	81 e0       	ldi	r24, 0x01	; 1
    1332:	90 e0       	ldi	r25, 0x00	; 0
    1334:	02 c0       	rjmp	.+4      	; 0x133a <DIO_SetPinMode+0x25c>
    1336:	88 0f       	add	r24, r24
    1338:	99 1f       	adc	r25, r25
    133a:	2a 95       	dec	r18
    133c:	e2 f7       	brpl	.-8      	; 0x1336 <DIO_SetPinMode+0x258>
    133e:	80 95       	com	r24
    1340:	84 23       	and	r24, r20
    1342:	8c 93       	st	X, r24
            SET_BIT(PORTB, pin);
    1344:	a8 e3       	ldi	r26, 0x38	; 56
    1346:	b0 e0       	ldi	r27, 0x00	; 0
    1348:	e8 e3       	ldi	r30, 0x38	; 56
    134a:	f0 e0       	ldi	r31, 0x00	; 0
    134c:	80 81       	ld	r24, Z
    134e:	48 2f       	mov	r20, r24
    1350:	8a 81       	ldd	r24, Y+2	; 0x02
    1352:	28 2f       	mov	r18, r24
    1354:	30 e0       	ldi	r19, 0x00	; 0
    1356:	81 e0       	ldi	r24, 0x01	; 1
    1358:	90 e0       	ldi	r25, 0x00	; 0
    135a:	02 2e       	mov	r0, r18
    135c:	02 c0       	rjmp	.+4      	; 0x1362 <DIO_SetPinMode+0x284>
    135e:	88 0f       	add	r24, r24
    1360:	99 1f       	adc	r25, r25
    1362:	0a 94       	dec	r0
    1364:	e2 f7       	brpl	.-8      	; 0x135e <DIO_SetPinMode+0x280>
    1366:	84 2b       	or	r24, r20
    1368:	8c 93       	st	X, r24
    136a:	c0 c0       	rjmp	.+384    	; 0x14ec <DIO_SetPinMode+0x40e>
            break;
        case DIO_PORTC:
            CLR_BIT(DDRC, pin);
    136c:	a4 e3       	ldi	r26, 0x34	; 52
    136e:	b0 e0       	ldi	r27, 0x00	; 0
    1370:	e4 e3       	ldi	r30, 0x34	; 52
    1372:	f0 e0       	ldi	r31, 0x00	; 0
    1374:	80 81       	ld	r24, Z
    1376:	48 2f       	mov	r20, r24
    1378:	8a 81       	ldd	r24, Y+2	; 0x02
    137a:	28 2f       	mov	r18, r24
    137c:	30 e0       	ldi	r19, 0x00	; 0
    137e:	81 e0       	ldi	r24, 0x01	; 1
    1380:	90 e0       	ldi	r25, 0x00	; 0
    1382:	02 c0       	rjmp	.+4      	; 0x1388 <DIO_SetPinMode+0x2aa>
    1384:	88 0f       	add	r24, r24
    1386:	99 1f       	adc	r25, r25
    1388:	2a 95       	dec	r18
    138a:	e2 f7       	brpl	.-8      	; 0x1384 <DIO_SetPinMode+0x2a6>
    138c:	80 95       	com	r24
    138e:	84 23       	and	r24, r20
    1390:	8c 93       	st	X, r24
            SET_BIT(PORTC, pin);
    1392:	a5 e3       	ldi	r26, 0x35	; 53
    1394:	b0 e0       	ldi	r27, 0x00	; 0
    1396:	e5 e3       	ldi	r30, 0x35	; 53
    1398:	f0 e0       	ldi	r31, 0x00	; 0
    139a:	80 81       	ld	r24, Z
    139c:	48 2f       	mov	r20, r24
    139e:	8a 81       	ldd	r24, Y+2	; 0x02
    13a0:	28 2f       	mov	r18, r24
    13a2:	30 e0       	ldi	r19, 0x00	; 0
    13a4:	81 e0       	ldi	r24, 0x01	; 1
    13a6:	90 e0       	ldi	r25, 0x00	; 0
    13a8:	02 2e       	mov	r0, r18
    13aa:	02 c0       	rjmp	.+4      	; 0x13b0 <DIO_SetPinMode+0x2d2>
    13ac:	88 0f       	add	r24, r24
    13ae:	99 1f       	adc	r25, r25
    13b0:	0a 94       	dec	r0
    13b2:	e2 f7       	brpl	.-8      	; 0x13ac <DIO_SetPinMode+0x2ce>
    13b4:	84 2b       	or	r24, r20
    13b6:	8c 93       	st	X, r24
    13b8:	99 c0       	rjmp	.+306    	; 0x14ec <DIO_SetPinMode+0x40e>
            break;
        case DIO_PORTD:
            CLR_BIT(DDRD, pin);
    13ba:	a1 e3       	ldi	r26, 0x31	; 49
    13bc:	b0 e0       	ldi	r27, 0x00	; 0
    13be:	e1 e3       	ldi	r30, 0x31	; 49
    13c0:	f0 e0       	ldi	r31, 0x00	; 0
    13c2:	80 81       	ld	r24, Z
    13c4:	48 2f       	mov	r20, r24
    13c6:	8a 81       	ldd	r24, Y+2	; 0x02
    13c8:	28 2f       	mov	r18, r24
    13ca:	30 e0       	ldi	r19, 0x00	; 0
    13cc:	81 e0       	ldi	r24, 0x01	; 1
    13ce:	90 e0       	ldi	r25, 0x00	; 0
    13d0:	02 c0       	rjmp	.+4      	; 0x13d6 <DIO_SetPinMode+0x2f8>
    13d2:	88 0f       	add	r24, r24
    13d4:	99 1f       	adc	r25, r25
    13d6:	2a 95       	dec	r18
    13d8:	e2 f7       	brpl	.-8      	; 0x13d2 <DIO_SetPinMode+0x2f4>
    13da:	80 95       	com	r24
    13dc:	84 23       	and	r24, r20
    13de:	8c 93       	st	X, r24
            SET_BIT(PORTD, pin);
    13e0:	a2 e3       	ldi	r26, 0x32	; 50
    13e2:	b0 e0       	ldi	r27, 0x00	; 0
    13e4:	e2 e3       	ldi	r30, 0x32	; 50
    13e6:	f0 e0       	ldi	r31, 0x00	; 0
    13e8:	80 81       	ld	r24, Z
    13ea:	48 2f       	mov	r20, r24
    13ec:	8a 81       	ldd	r24, Y+2	; 0x02
    13ee:	28 2f       	mov	r18, r24
    13f0:	30 e0       	ldi	r19, 0x00	; 0
    13f2:	81 e0       	ldi	r24, 0x01	; 1
    13f4:	90 e0       	ldi	r25, 0x00	; 0
    13f6:	02 2e       	mov	r0, r18
    13f8:	02 c0       	rjmp	.+4      	; 0x13fe <DIO_SetPinMode+0x320>
    13fa:	88 0f       	add	r24, r24
    13fc:	99 1f       	adc	r25, r25
    13fe:	0a 94       	dec	r0
    1400:	e2 f7       	brpl	.-8      	; 0x13fa <DIO_SetPinMode+0x31c>
    1402:	84 2b       	or	r24, r20
    1404:	8c 93       	st	X, r24
    1406:	72 c0       	rjmp	.+228    	; 0x14ec <DIO_SetPinMode+0x40e>
            break;
        default:
            break;
        }
    }
    else if (mode == DIO_OUTPUT)
    1408:	8b 81       	ldd	r24, Y+3	; 0x03
    140a:	82 30       	cpi	r24, 0x02	; 2
    140c:	09 f0       	breq	.+2      	; 0x1410 <DIO_SetPinMode+0x332>
    140e:	6e c0       	rjmp	.+220    	; 0x14ec <DIO_SetPinMode+0x40e>
    {
        switch (port)
    1410:	89 81       	ldd	r24, Y+1	; 0x01
    1412:	28 2f       	mov	r18, r24
    1414:	30 e0       	ldi	r19, 0x00	; 0
    1416:	3d 83       	std	Y+5, r19	; 0x05
    1418:	2c 83       	std	Y+4, r18	; 0x04
    141a:	8c 81       	ldd	r24, Y+4	; 0x04
    141c:	9d 81       	ldd	r25, Y+5	; 0x05
    141e:	81 30       	cpi	r24, 0x01	; 1
    1420:	91 05       	cpc	r25, r1
    1422:	49 f1       	breq	.+82     	; 0x1476 <DIO_SetPinMode+0x398>
    1424:	2c 81       	ldd	r18, Y+4	; 0x04
    1426:	3d 81       	ldd	r19, Y+5	; 0x05
    1428:	22 30       	cpi	r18, 0x02	; 2
    142a:	31 05       	cpc	r19, r1
    142c:	2c f4       	brge	.+10     	; 0x1438 <DIO_SetPinMode+0x35a>
    142e:	8c 81       	ldd	r24, Y+4	; 0x04
    1430:	9d 81       	ldd	r25, Y+5	; 0x05
    1432:	00 97       	sbiw	r24, 0x00	; 0
    1434:	61 f0       	breq	.+24     	; 0x144e <DIO_SetPinMode+0x370>
    1436:	5a c0       	rjmp	.+180    	; 0x14ec <DIO_SetPinMode+0x40e>
    1438:	2c 81       	ldd	r18, Y+4	; 0x04
    143a:	3d 81       	ldd	r19, Y+5	; 0x05
    143c:	22 30       	cpi	r18, 0x02	; 2
    143e:	31 05       	cpc	r19, r1
    1440:	71 f1       	breq	.+92     	; 0x149e <DIO_SetPinMode+0x3c0>
    1442:	8c 81       	ldd	r24, Y+4	; 0x04
    1444:	9d 81       	ldd	r25, Y+5	; 0x05
    1446:	83 30       	cpi	r24, 0x03	; 3
    1448:	91 05       	cpc	r25, r1
    144a:	e9 f1       	breq	.+122    	; 0x14c6 <DIO_SetPinMode+0x3e8>
    144c:	4f c0       	rjmp	.+158    	; 0x14ec <DIO_SetPinMode+0x40e>
        {
        case DIO_PORTA:
            SET_BIT(DDRA, pin);
    144e:	aa e3       	ldi	r26, 0x3A	; 58
    1450:	b0 e0       	ldi	r27, 0x00	; 0
    1452:	ea e3       	ldi	r30, 0x3A	; 58
    1454:	f0 e0       	ldi	r31, 0x00	; 0
    1456:	80 81       	ld	r24, Z
    1458:	48 2f       	mov	r20, r24
    145a:	8a 81       	ldd	r24, Y+2	; 0x02
    145c:	28 2f       	mov	r18, r24
    145e:	30 e0       	ldi	r19, 0x00	; 0
    1460:	81 e0       	ldi	r24, 0x01	; 1
    1462:	90 e0       	ldi	r25, 0x00	; 0
    1464:	02 2e       	mov	r0, r18
    1466:	02 c0       	rjmp	.+4      	; 0x146c <DIO_SetPinMode+0x38e>
    1468:	88 0f       	add	r24, r24
    146a:	99 1f       	adc	r25, r25
    146c:	0a 94       	dec	r0
    146e:	e2 f7       	brpl	.-8      	; 0x1468 <DIO_SetPinMode+0x38a>
    1470:	84 2b       	or	r24, r20
    1472:	8c 93       	st	X, r24
    1474:	3b c0       	rjmp	.+118    	; 0x14ec <DIO_SetPinMode+0x40e>
            break;
        case DIO_PORTB:
            SET_BIT(DDRB, pin);
    1476:	a7 e3       	ldi	r26, 0x37	; 55
    1478:	b0 e0       	ldi	r27, 0x00	; 0
    147a:	e7 e3       	ldi	r30, 0x37	; 55
    147c:	f0 e0       	ldi	r31, 0x00	; 0
    147e:	80 81       	ld	r24, Z
    1480:	48 2f       	mov	r20, r24
    1482:	8a 81       	ldd	r24, Y+2	; 0x02
    1484:	28 2f       	mov	r18, r24
    1486:	30 e0       	ldi	r19, 0x00	; 0
    1488:	81 e0       	ldi	r24, 0x01	; 1
    148a:	90 e0       	ldi	r25, 0x00	; 0
    148c:	02 2e       	mov	r0, r18
    148e:	02 c0       	rjmp	.+4      	; 0x1494 <DIO_SetPinMode+0x3b6>
    1490:	88 0f       	add	r24, r24
    1492:	99 1f       	adc	r25, r25
    1494:	0a 94       	dec	r0
    1496:	e2 f7       	brpl	.-8      	; 0x1490 <DIO_SetPinMode+0x3b2>
    1498:	84 2b       	or	r24, r20
    149a:	8c 93       	st	X, r24
    149c:	27 c0       	rjmp	.+78     	; 0x14ec <DIO_SetPinMode+0x40e>
            break;
        case DIO_PORTC:
            SET_BIT(DDRC, pin);
    149e:	a4 e3       	ldi	r26, 0x34	; 52
    14a0:	b0 e0       	ldi	r27, 0x00	; 0
    14a2:	e4 e3       	ldi	r30, 0x34	; 52
    14a4:	f0 e0       	ldi	r31, 0x00	; 0
    14a6:	80 81       	ld	r24, Z
    14a8:	48 2f       	mov	r20, r24
    14aa:	8a 81       	ldd	r24, Y+2	; 0x02
    14ac:	28 2f       	mov	r18, r24
    14ae:	30 e0       	ldi	r19, 0x00	; 0
    14b0:	81 e0       	ldi	r24, 0x01	; 1
    14b2:	90 e0       	ldi	r25, 0x00	; 0
    14b4:	02 2e       	mov	r0, r18
    14b6:	02 c0       	rjmp	.+4      	; 0x14bc <DIO_SetPinMode+0x3de>
    14b8:	88 0f       	add	r24, r24
    14ba:	99 1f       	adc	r25, r25
    14bc:	0a 94       	dec	r0
    14be:	e2 f7       	brpl	.-8      	; 0x14b8 <DIO_SetPinMode+0x3da>
    14c0:	84 2b       	or	r24, r20
    14c2:	8c 93       	st	X, r24
    14c4:	13 c0       	rjmp	.+38     	; 0x14ec <DIO_SetPinMode+0x40e>
            break;
        case DIO_PORTD:
            SET_BIT(DDRD, pin);
    14c6:	a1 e3       	ldi	r26, 0x31	; 49
    14c8:	b0 e0       	ldi	r27, 0x00	; 0
    14ca:	e1 e3       	ldi	r30, 0x31	; 49
    14cc:	f0 e0       	ldi	r31, 0x00	; 0
    14ce:	80 81       	ld	r24, Z
    14d0:	48 2f       	mov	r20, r24
    14d2:	8a 81       	ldd	r24, Y+2	; 0x02
    14d4:	28 2f       	mov	r18, r24
    14d6:	30 e0       	ldi	r19, 0x00	; 0
    14d8:	81 e0       	ldi	r24, 0x01	; 1
    14da:	90 e0       	ldi	r25, 0x00	; 0
    14dc:	02 2e       	mov	r0, r18
    14de:	02 c0       	rjmp	.+4      	; 0x14e4 <DIO_SetPinMode+0x406>
    14e0:	88 0f       	add	r24, r24
    14e2:	99 1f       	adc	r25, r25
    14e4:	0a 94       	dec	r0
    14e6:	e2 f7       	brpl	.-8      	; 0x14e0 <DIO_SetPinMode+0x402>
    14e8:	84 2b       	or	r24, r20
    14ea:	8c 93       	st	X, r24
        default:
            break;
        }

    }
}
    14ec:	29 96       	adiw	r28, 0x09	; 9
    14ee:	0f b6       	in	r0, 0x3f	; 63
    14f0:	f8 94       	cli
    14f2:	de bf       	out	0x3e, r29	; 62
    14f4:	0f be       	out	0x3f, r0	; 63
    14f6:	cd bf       	out	0x3d, r28	; 61
    14f8:	cf 91       	pop	r28
    14fa:	df 91       	pop	r29
    14fc:	08 95       	ret

000014fe <DIO_SetPortMode>:

void DIO_SetPortMode(DIO_PortType port, DIO_ModeType mode) {
    14fe:	df 93       	push	r29
    1500:	cf 93       	push	r28
    1502:	cd b7       	in	r28, 0x3d	; 61
    1504:	de b7       	in	r29, 0x3e	; 62
    1506:	2a 97       	sbiw	r28, 0x0a	; 10
    1508:	0f b6       	in	r0, 0x3f	; 63
    150a:	f8 94       	cli
    150c:	de bf       	out	0x3e, r29	; 62
    150e:	0f be       	out	0x3f, r0	; 63
    1510:	cd bf       	out	0x3d, r28	; 61
    1512:	89 83       	std	Y+1, r24	; 0x01
    1514:	6a 83       	std	Y+2, r22	; 0x02
    if (mode == DIO_INPUT_FLOATING)
    1516:	8a 81       	ldd	r24, Y+2	; 0x02
    1518:	88 23       	and	r24, r24
    151a:	d9 f5       	brne	.+118    	; 0x1592 <DIO_SetPortMode+0x94>
    {
        switch (port)
    151c:	89 81       	ldd	r24, Y+1	; 0x01
    151e:	28 2f       	mov	r18, r24
    1520:	30 e0       	ldi	r19, 0x00	; 0
    1522:	3a 87       	std	Y+10, r19	; 0x0a
    1524:	29 87       	std	Y+9, r18	; 0x09
    1526:	89 85       	ldd	r24, Y+9	; 0x09
    1528:	9a 85       	ldd	r25, Y+10	; 0x0a
    152a:	81 30       	cpi	r24, 0x01	; 1
    152c:	91 05       	cpc	r25, r1
    152e:	e1 f0       	breq	.+56     	; 0x1568 <DIO_SetPortMode+0x6a>
    1530:	29 85       	ldd	r18, Y+9	; 0x09
    1532:	3a 85       	ldd	r19, Y+10	; 0x0a
    1534:	22 30       	cpi	r18, 0x02	; 2
    1536:	31 05       	cpc	r19, r1
    1538:	2c f4       	brge	.+10     	; 0x1544 <DIO_SetPortMode+0x46>
    153a:	89 85       	ldd	r24, Y+9	; 0x09
    153c:	9a 85       	ldd	r25, Y+10	; 0x0a
    153e:	00 97       	sbiw	r24, 0x00	; 0
    1540:	61 f0       	breq	.+24     	; 0x155a <DIO_SetPortMode+0x5c>
    1542:	d2 c0       	rjmp	.+420    	; 0x16e8 <DIO_SetPortMode+0x1ea>
    1544:	29 85       	ldd	r18, Y+9	; 0x09
    1546:	3a 85       	ldd	r19, Y+10	; 0x0a
    1548:	22 30       	cpi	r18, 0x02	; 2
    154a:	31 05       	cpc	r19, r1
    154c:	a1 f0       	breq	.+40     	; 0x1576 <DIO_SetPortMode+0x78>
    154e:	89 85       	ldd	r24, Y+9	; 0x09
    1550:	9a 85       	ldd	r25, Y+10	; 0x0a
    1552:	83 30       	cpi	r24, 0x03	; 3
    1554:	91 05       	cpc	r25, r1
    1556:	b1 f0       	breq	.+44     	; 0x1584 <DIO_SetPortMode+0x86>
    1558:	c7 c0       	rjmp	.+398    	; 0x16e8 <DIO_SetPortMode+0x1ea>
        {
        case DIO_PORTA:
            DDRA = 0x00;
    155a:	ea e3       	ldi	r30, 0x3A	; 58
    155c:	f0 e0       	ldi	r31, 0x00	; 0
    155e:	10 82       	st	Z, r1
            PORTA = 0x00;
    1560:	eb e3       	ldi	r30, 0x3B	; 59
    1562:	f0 e0       	ldi	r31, 0x00	; 0
    1564:	10 82       	st	Z, r1
    1566:	c0 c0       	rjmp	.+384    	; 0x16e8 <DIO_SetPortMode+0x1ea>
            break;
        case DIO_PORTB:
            DDRB = 0x00;
    1568:	e7 e3       	ldi	r30, 0x37	; 55
    156a:	f0 e0       	ldi	r31, 0x00	; 0
    156c:	10 82       	st	Z, r1
            PORTB = 0x00;
    156e:	e8 e3       	ldi	r30, 0x38	; 56
    1570:	f0 e0       	ldi	r31, 0x00	; 0
    1572:	10 82       	st	Z, r1
    1574:	b9 c0       	rjmp	.+370    	; 0x16e8 <DIO_SetPortMode+0x1ea>
            break;
        case DIO_PORTC:
            DDRC = 0x00;
    1576:	e4 e3       	ldi	r30, 0x34	; 52
    1578:	f0 e0       	ldi	r31, 0x00	; 0
    157a:	10 82       	st	Z, r1
            PORTC = 0x00;
    157c:	e5 e3       	ldi	r30, 0x35	; 53
    157e:	f0 e0       	ldi	r31, 0x00	; 0
    1580:	10 82       	st	Z, r1
    1582:	b2 c0       	rjmp	.+356    	; 0x16e8 <DIO_SetPortMode+0x1ea>
            break;
        case DIO_PORTD:
            DDRD = 0x00;
    1584:	e1 e3       	ldi	r30, 0x31	; 49
    1586:	f0 e0       	ldi	r31, 0x00	; 0
    1588:	10 82       	st	Z, r1
            PORTD = 0x00;
    158a:	e2 e3       	ldi	r30, 0x32	; 50
    158c:	f0 e0       	ldi	r31, 0x00	; 0
    158e:	10 82       	st	Z, r1
    1590:	ab c0       	rjmp	.+342    	; 0x16e8 <DIO_SetPortMode+0x1ea>
            break;
        default:
            break;
        }
    }
    else if (mode == DIO_INPUT_PULLUP)
    1592:	8a 81       	ldd	r24, Y+2	; 0x02
    1594:	81 30       	cpi	r24, 0x01	; 1
    1596:	09 f0       	breq	.+2      	; 0x159a <DIO_SetPortMode+0x9c>
    1598:	3f c0       	rjmp	.+126    	; 0x1618 <DIO_SetPortMode+0x11a>
    {
        switch (port)
    159a:	89 81       	ldd	r24, Y+1	; 0x01
    159c:	28 2f       	mov	r18, r24
    159e:	30 e0       	ldi	r19, 0x00	; 0
    15a0:	38 87       	std	Y+8, r19	; 0x08
    15a2:	2f 83       	std	Y+7, r18	; 0x07
    15a4:	8f 81       	ldd	r24, Y+7	; 0x07
    15a6:	98 85       	ldd	r25, Y+8	; 0x08
    15a8:	81 30       	cpi	r24, 0x01	; 1
    15aa:	91 05       	cpc	r25, r1
    15ac:	e9 f0       	breq	.+58     	; 0x15e8 <DIO_SetPortMode+0xea>
    15ae:	2f 81       	ldd	r18, Y+7	; 0x07
    15b0:	38 85       	ldd	r19, Y+8	; 0x08
    15b2:	22 30       	cpi	r18, 0x02	; 2
    15b4:	31 05       	cpc	r19, r1
    15b6:	2c f4       	brge	.+10     	; 0x15c2 <DIO_SetPortMode+0xc4>
    15b8:	8f 81       	ldd	r24, Y+7	; 0x07
    15ba:	98 85       	ldd	r25, Y+8	; 0x08
    15bc:	00 97       	sbiw	r24, 0x00	; 0
    15be:	61 f0       	breq	.+24     	; 0x15d8 <DIO_SetPortMode+0xda>
    15c0:	93 c0       	rjmp	.+294    	; 0x16e8 <DIO_SetPortMode+0x1ea>
    15c2:	2f 81       	ldd	r18, Y+7	; 0x07
    15c4:	38 85       	ldd	r19, Y+8	; 0x08
    15c6:	22 30       	cpi	r18, 0x02	; 2
    15c8:	31 05       	cpc	r19, r1
    15ca:	b1 f0       	breq	.+44     	; 0x15f8 <DIO_SetPortMode+0xfa>
    15cc:	8f 81       	ldd	r24, Y+7	; 0x07
    15ce:	98 85       	ldd	r25, Y+8	; 0x08
    15d0:	83 30       	cpi	r24, 0x03	; 3
    15d2:	91 05       	cpc	r25, r1
    15d4:	c9 f0       	breq	.+50     	; 0x1608 <DIO_SetPortMode+0x10a>
    15d6:	88 c0       	rjmp	.+272    	; 0x16e8 <DIO_SetPortMode+0x1ea>
        {
        case DIO_PORTA:
            DDRA = 0x00;
    15d8:	ea e3       	ldi	r30, 0x3A	; 58
    15da:	f0 e0       	ldi	r31, 0x00	; 0
    15dc:	10 82       	st	Z, r1
            PORTA = 0xFF;
    15de:	eb e3       	ldi	r30, 0x3B	; 59
    15e0:	f0 e0       	ldi	r31, 0x00	; 0
    15e2:	8f ef       	ldi	r24, 0xFF	; 255
    15e4:	80 83       	st	Z, r24
    15e6:	80 c0       	rjmp	.+256    	; 0x16e8 <DIO_SetPortMode+0x1ea>
            break;
        case DIO_PORTB:
            DDRB = 0x00;
    15e8:	e7 e3       	ldi	r30, 0x37	; 55
    15ea:	f0 e0       	ldi	r31, 0x00	; 0
    15ec:	10 82       	st	Z, r1
            PORTB = 0xFF;
    15ee:	e8 e3       	ldi	r30, 0x38	; 56
    15f0:	f0 e0       	ldi	r31, 0x00	; 0
    15f2:	8f ef       	ldi	r24, 0xFF	; 255
    15f4:	80 83       	st	Z, r24
    15f6:	78 c0       	rjmp	.+240    	; 0x16e8 <DIO_SetPortMode+0x1ea>
            break;
        case DIO_PORTC:
            DDRC = 0x00;
    15f8:	e4 e3       	ldi	r30, 0x34	; 52
    15fa:	f0 e0       	ldi	r31, 0x00	; 0
    15fc:	10 82       	st	Z, r1
            PORTC = 0xFF;
    15fe:	e5 e3       	ldi	r30, 0x35	; 53
    1600:	f0 e0       	ldi	r31, 0x00	; 0
    1602:	8f ef       	ldi	r24, 0xFF	; 255
    1604:	80 83       	st	Z, r24
    1606:	70 c0       	rjmp	.+224    	; 0x16e8 <DIO_SetPortMode+0x1ea>
            break;
        case DIO_PORTD:
            DDRD = 0x00;
    1608:	e1 e3       	ldi	r30, 0x31	; 49
    160a:	f0 e0       	ldi	r31, 0x00	; 0
    160c:	10 82       	st	Z, r1
            PORTD = 0xFF;
    160e:	e2 e3       	ldi	r30, 0x32	; 50
    1610:	f0 e0       	ldi	r31, 0x00	; 0
    1612:	8f ef       	ldi	r24, 0xFF	; 255
    1614:	80 83       	st	Z, r24
    1616:	68 c0       	rjmp	.+208    	; 0x16e8 <DIO_SetPortMode+0x1ea>
            break;
        default:
            break;
        }
    }
    else if (mode == DIO_OUTPUT)
    1618:	8a 81       	ldd	r24, Y+2	; 0x02
    161a:	82 30       	cpi	r24, 0x02	; 2
    161c:	99 f5       	brne	.+102    	; 0x1684 <DIO_SetPortMode+0x186>
    {
        switch (port)
    161e:	89 81       	ldd	r24, Y+1	; 0x01
    1620:	28 2f       	mov	r18, r24
    1622:	30 e0       	ldi	r19, 0x00	; 0
    1624:	3e 83       	std	Y+6, r19	; 0x06
    1626:	2d 83       	std	Y+5, r18	; 0x05
    1628:	8d 81       	ldd	r24, Y+5	; 0x05
    162a:	9e 81       	ldd	r25, Y+6	; 0x06
    162c:	81 30       	cpi	r24, 0x01	; 1
    162e:	91 05       	cpc	r25, r1
    1630:	d1 f0       	breq	.+52     	; 0x1666 <DIO_SetPortMode+0x168>
    1632:	2d 81       	ldd	r18, Y+5	; 0x05
    1634:	3e 81       	ldd	r19, Y+6	; 0x06
    1636:	22 30       	cpi	r18, 0x02	; 2
    1638:	31 05       	cpc	r19, r1
    163a:	2c f4       	brge	.+10     	; 0x1646 <DIO_SetPortMode+0x148>
    163c:	8d 81       	ldd	r24, Y+5	; 0x05
    163e:	9e 81       	ldd	r25, Y+6	; 0x06
    1640:	00 97       	sbiw	r24, 0x00	; 0
    1642:	61 f0       	breq	.+24     	; 0x165c <DIO_SetPortMode+0x15e>
    1644:	51 c0       	rjmp	.+162    	; 0x16e8 <DIO_SetPortMode+0x1ea>
    1646:	2d 81       	ldd	r18, Y+5	; 0x05
    1648:	3e 81       	ldd	r19, Y+6	; 0x06
    164a:	22 30       	cpi	r18, 0x02	; 2
    164c:	31 05       	cpc	r19, r1
    164e:	81 f0       	breq	.+32     	; 0x1670 <DIO_SetPortMode+0x172>
    1650:	8d 81       	ldd	r24, Y+5	; 0x05
    1652:	9e 81       	ldd	r25, Y+6	; 0x06
    1654:	83 30       	cpi	r24, 0x03	; 3
    1656:	91 05       	cpc	r25, r1
    1658:	81 f0       	breq	.+32     	; 0x167a <DIO_SetPortMode+0x17c>
    165a:	46 c0       	rjmp	.+140    	; 0x16e8 <DIO_SetPortMode+0x1ea>
        {
        case DIO_PORTA:
            DDRA = 0xFF;
    165c:	ea e3       	ldi	r30, 0x3A	; 58
    165e:	f0 e0       	ldi	r31, 0x00	; 0
    1660:	8f ef       	ldi	r24, 0xFF	; 255
    1662:	80 83       	st	Z, r24
    1664:	41 c0       	rjmp	.+130    	; 0x16e8 <DIO_SetPortMode+0x1ea>
            break;
        case DIO_PORTB:
            DDRB = 0xFF;
    1666:	e7 e3       	ldi	r30, 0x37	; 55
    1668:	f0 e0       	ldi	r31, 0x00	; 0
    166a:	8f ef       	ldi	r24, 0xFF	; 255
    166c:	80 83       	st	Z, r24
    166e:	3c c0       	rjmp	.+120    	; 0x16e8 <DIO_SetPortMode+0x1ea>
            break;
        case DIO_PORTC:
            DDRC = 0xFF;
    1670:	e4 e3       	ldi	r30, 0x34	; 52
    1672:	f0 e0       	ldi	r31, 0x00	; 0
    1674:	8f ef       	ldi	r24, 0xFF	; 255
    1676:	80 83       	st	Z, r24
    1678:	37 c0       	rjmp	.+110    	; 0x16e8 <DIO_SetPortMode+0x1ea>
            break;
        case DIO_PORTD:
            DDRD = 0xFF;
    167a:	e1 e3       	ldi	r30, 0x31	; 49
    167c:	f0 e0       	ldi	r31, 0x00	; 0
    167e:	8f ef       	ldi	r24, 0xFF	; 255
    1680:	80 83       	st	Z, r24
    1682:	32 c0       	rjmp	.+100    	; 0x16e8 <DIO_SetPortMode+0x1ea>
        }

    }
    else
    {
        switch (port)
    1684:	89 81       	ldd	r24, Y+1	; 0x01
    1686:	28 2f       	mov	r18, r24
    1688:	30 e0       	ldi	r19, 0x00	; 0
    168a:	3c 83       	std	Y+4, r19	; 0x04
    168c:	2b 83       	std	Y+3, r18	; 0x03
    168e:	8b 81       	ldd	r24, Y+3	; 0x03
    1690:	9c 81       	ldd	r25, Y+4	; 0x04
    1692:	81 30       	cpi	r24, 0x01	; 1
    1694:	91 05       	cpc	r25, r1
    1696:	d1 f0       	breq	.+52     	; 0x16cc <DIO_SetPortMode+0x1ce>
    1698:	2b 81       	ldd	r18, Y+3	; 0x03
    169a:	3c 81       	ldd	r19, Y+4	; 0x04
    169c:	22 30       	cpi	r18, 0x02	; 2
    169e:	31 05       	cpc	r19, r1
    16a0:	2c f4       	brge	.+10     	; 0x16ac <DIO_SetPortMode+0x1ae>
    16a2:	8b 81       	ldd	r24, Y+3	; 0x03
    16a4:	9c 81       	ldd	r25, Y+4	; 0x04
    16a6:	00 97       	sbiw	r24, 0x00	; 0
    16a8:	61 f0       	breq	.+24     	; 0x16c2 <DIO_SetPortMode+0x1c4>
    16aa:	1e c0       	rjmp	.+60     	; 0x16e8 <DIO_SetPortMode+0x1ea>
    16ac:	2b 81       	ldd	r18, Y+3	; 0x03
    16ae:	3c 81       	ldd	r19, Y+4	; 0x04
    16b0:	22 30       	cpi	r18, 0x02	; 2
    16b2:	31 05       	cpc	r19, r1
    16b4:	81 f0       	breq	.+32     	; 0x16d6 <DIO_SetPortMode+0x1d8>
    16b6:	8b 81       	ldd	r24, Y+3	; 0x03
    16b8:	9c 81       	ldd	r25, Y+4	; 0x04
    16ba:	83 30       	cpi	r24, 0x03	; 3
    16bc:	91 05       	cpc	r25, r1
    16be:	81 f0       	breq	.+32     	; 0x16e0 <DIO_SetPortMode+0x1e2>
    16c0:	13 c0       	rjmp	.+38     	; 0x16e8 <DIO_SetPortMode+0x1ea>
        {
        case DIO_PORTA:
            DDRA = mode;
    16c2:	ea e3       	ldi	r30, 0x3A	; 58
    16c4:	f0 e0       	ldi	r31, 0x00	; 0
    16c6:	8a 81       	ldd	r24, Y+2	; 0x02
    16c8:	80 83       	st	Z, r24
    16ca:	0e c0       	rjmp	.+28     	; 0x16e8 <DIO_SetPortMode+0x1ea>
            break;
        case DIO_PORTB:
            DDRB = mode;
    16cc:	e7 e3       	ldi	r30, 0x37	; 55
    16ce:	f0 e0       	ldi	r31, 0x00	; 0
    16d0:	8a 81       	ldd	r24, Y+2	; 0x02
    16d2:	80 83       	st	Z, r24
    16d4:	09 c0       	rjmp	.+18     	; 0x16e8 <DIO_SetPortMode+0x1ea>
            break;
        case DIO_PORTC:
            DDRC = mode;
    16d6:	e4 e3       	ldi	r30, 0x34	; 52
    16d8:	f0 e0       	ldi	r31, 0x00	; 0
    16da:	8a 81       	ldd	r24, Y+2	; 0x02
    16dc:	80 83       	st	Z, r24
    16de:	04 c0       	rjmp	.+8      	; 0x16e8 <DIO_SetPortMode+0x1ea>
            break;
        case DIO_PORTD:
            DDRD = mode;
    16e0:	e1 e3       	ldi	r30, 0x31	; 49
    16e2:	f0 e0       	ldi	r31, 0x00	; 0
    16e4:	8a 81       	ldd	r24, Y+2	; 0x02
    16e6:	80 83       	st	Z, r24
        default:
            break;
        }

    }
}
    16e8:	2a 96       	adiw	r28, 0x0a	; 10
    16ea:	0f b6       	in	r0, 0x3f	; 63
    16ec:	f8 94       	cli
    16ee:	de bf       	out	0x3e, r29	; 62
    16f0:	0f be       	out	0x3f, r0	; 63
    16f2:	cd bf       	out	0x3d, r28	; 61
    16f4:	cf 91       	pop	r28
    16f6:	df 91       	pop	r29
    16f8:	08 95       	ret

000016fa <DIO_SetPinLevel>:


void DIO_SetPinLevel(DIO_PortType port, DIO_PinType pin, DIO_LevelType level) {
    16fa:	df 93       	push	r29
    16fc:	cf 93       	push	r28
    16fe:	cd b7       	in	r28, 0x3d	; 61
    1700:	de b7       	in	r29, 0x3e	; 62
    1702:	27 97       	sbiw	r28, 0x07	; 7
    1704:	0f b6       	in	r0, 0x3f	; 63
    1706:	f8 94       	cli
    1708:	de bf       	out	0x3e, r29	; 62
    170a:	0f be       	out	0x3f, r0	; 63
    170c:	cd bf       	out	0x3d, r28	; 61
    170e:	89 83       	std	Y+1, r24	; 0x01
    1710:	6a 83       	std	Y+2, r22	; 0x02
    1712:	4b 83       	std	Y+3, r20	; 0x03
    if (level == DIO_HIGH)
    1714:	8b 81       	ldd	r24, Y+3	; 0x03
    1716:	81 30       	cpi	r24, 0x01	; 1
    1718:	09 f0       	breq	.+2      	; 0x171c <DIO_SetPinLevel+0x22>
    171a:	6f c0       	rjmp	.+222    	; 0x17fa <DIO_SetPinLevel+0x100>
    {
        switch (port)
    171c:	89 81       	ldd	r24, Y+1	; 0x01
    171e:	28 2f       	mov	r18, r24
    1720:	30 e0       	ldi	r19, 0x00	; 0
    1722:	3f 83       	std	Y+7, r19	; 0x07
    1724:	2e 83       	std	Y+6, r18	; 0x06
    1726:	8e 81       	ldd	r24, Y+6	; 0x06
    1728:	9f 81       	ldd	r25, Y+7	; 0x07
    172a:	81 30       	cpi	r24, 0x01	; 1
    172c:	91 05       	cpc	r25, r1
    172e:	49 f1       	breq	.+82     	; 0x1782 <DIO_SetPinLevel+0x88>
    1730:	2e 81       	ldd	r18, Y+6	; 0x06
    1732:	3f 81       	ldd	r19, Y+7	; 0x07
    1734:	22 30       	cpi	r18, 0x02	; 2
    1736:	31 05       	cpc	r19, r1
    1738:	2c f4       	brge	.+10     	; 0x1744 <DIO_SetPinLevel+0x4a>
    173a:	8e 81       	ldd	r24, Y+6	; 0x06
    173c:	9f 81       	ldd	r25, Y+7	; 0x07
    173e:	00 97       	sbiw	r24, 0x00	; 0
    1740:	61 f0       	breq	.+24     	; 0x175a <DIO_SetPinLevel+0x60>
    1742:	d2 c0       	rjmp	.+420    	; 0x18e8 <DIO_SetPinLevel+0x1ee>
    1744:	2e 81       	ldd	r18, Y+6	; 0x06
    1746:	3f 81       	ldd	r19, Y+7	; 0x07
    1748:	22 30       	cpi	r18, 0x02	; 2
    174a:	31 05       	cpc	r19, r1
    174c:	71 f1       	breq	.+92     	; 0x17aa <DIO_SetPinLevel+0xb0>
    174e:	8e 81       	ldd	r24, Y+6	; 0x06
    1750:	9f 81       	ldd	r25, Y+7	; 0x07
    1752:	83 30       	cpi	r24, 0x03	; 3
    1754:	91 05       	cpc	r25, r1
    1756:	e9 f1       	breq	.+122    	; 0x17d2 <DIO_SetPinLevel+0xd8>
    1758:	c7 c0       	rjmp	.+398    	; 0x18e8 <DIO_SetPinLevel+0x1ee>
        {
        case DIO_PORTA:
            SET_BIT(PORTA, pin);
    175a:	ab e3       	ldi	r26, 0x3B	; 59
    175c:	b0 e0       	ldi	r27, 0x00	; 0
    175e:	eb e3       	ldi	r30, 0x3B	; 59
    1760:	f0 e0       	ldi	r31, 0x00	; 0
    1762:	80 81       	ld	r24, Z
    1764:	48 2f       	mov	r20, r24
    1766:	8a 81       	ldd	r24, Y+2	; 0x02
    1768:	28 2f       	mov	r18, r24
    176a:	30 e0       	ldi	r19, 0x00	; 0
    176c:	81 e0       	ldi	r24, 0x01	; 1
    176e:	90 e0       	ldi	r25, 0x00	; 0
    1770:	02 2e       	mov	r0, r18
    1772:	02 c0       	rjmp	.+4      	; 0x1778 <DIO_SetPinLevel+0x7e>
    1774:	88 0f       	add	r24, r24
    1776:	99 1f       	adc	r25, r25
    1778:	0a 94       	dec	r0
    177a:	e2 f7       	brpl	.-8      	; 0x1774 <DIO_SetPinLevel+0x7a>
    177c:	84 2b       	or	r24, r20
    177e:	8c 93       	st	X, r24
    1780:	b3 c0       	rjmp	.+358    	; 0x18e8 <DIO_SetPinLevel+0x1ee>
            break;
        case DIO_PORTB:
            SET_BIT(PORTB, pin);
    1782:	a8 e3       	ldi	r26, 0x38	; 56
    1784:	b0 e0       	ldi	r27, 0x00	; 0
    1786:	e8 e3       	ldi	r30, 0x38	; 56
    1788:	f0 e0       	ldi	r31, 0x00	; 0
    178a:	80 81       	ld	r24, Z
    178c:	48 2f       	mov	r20, r24
    178e:	8a 81       	ldd	r24, Y+2	; 0x02
    1790:	28 2f       	mov	r18, r24
    1792:	30 e0       	ldi	r19, 0x00	; 0
    1794:	81 e0       	ldi	r24, 0x01	; 1
    1796:	90 e0       	ldi	r25, 0x00	; 0
    1798:	02 2e       	mov	r0, r18
    179a:	02 c0       	rjmp	.+4      	; 0x17a0 <DIO_SetPinLevel+0xa6>
    179c:	88 0f       	add	r24, r24
    179e:	99 1f       	adc	r25, r25
    17a0:	0a 94       	dec	r0
    17a2:	e2 f7       	brpl	.-8      	; 0x179c <DIO_SetPinLevel+0xa2>
    17a4:	84 2b       	or	r24, r20
    17a6:	8c 93       	st	X, r24
    17a8:	9f c0       	rjmp	.+318    	; 0x18e8 <DIO_SetPinLevel+0x1ee>
            break;
        case DIO_PORTC:
            SET_BIT(PORTC, pin);
    17aa:	a5 e3       	ldi	r26, 0x35	; 53
    17ac:	b0 e0       	ldi	r27, 0x00	; 0
    17ae:	e5 e3       	ldi	r30, 0x35	; 53
    17b0:	f0 e0       	ldi	r31, 0x00	; 0
    17b2:	80 81       	ld	r24, Z
    17b4:	48 2f       	mov	r20, r24
    17b6:	8a 81       	ldd	r24, Y+2	; 0x02
    17b8:	28 2f       	mov	r18, r24
    17ba:	30 e0       	ldi	r19, 0x00	; 0
    17bc:	81 e0       	ldi	r24, 0x01	; 1
    17be:	90 e0       	ldi	r25, 0x00	; 0
    17c0:	02 2e       	mov	r0, r18
    17c2:	02 c0       	rjmp	.+4      	; 0x17c8 <DIO_SetPinLevel+0xce>
    17c4:	88 0f       	add	r24, r24
    17c6:	99 1f       	adc	r25, r25
    17c8:	0a 94       	dec	r0
    17ca:	e2 f7       	brpl	.-8      	; 0x17c4 <DIO_SetPinLevel+0xca>
    17cc:	84 2b       	or	r24, r20
    17ce:	8c 93       	st	X, r24
    17d0:	8b c0       	rjmp	.+278    	; 0x18e8 <DIO_SetPinLevel+0x1ee>
            break;
        case DIO_PORTD:
            SET_BIT(PORTD, pin);
    17d2:	a2 e3       	ldi	r26, 0x32	; 50
    17d4:	b0 e0       	ldi	r27, 0x00	; 0
    17d6:	e2 e3       	ldi	r30, 0x32	; 50
    17d8:	f0 e0       	ldi	r31, 0x00	; 0
    17da:	80 81       	ld	r24, Z
    17dc:	48 2f       	mov	r20, r24
    17de:	8a 81       	ldd	r24, Y+2	; 0x02
    17e0:	28 2f       	mov	r18, r24
    17e2:	30 e0       	ldi	r19, 0x00	; 0
    17e4:	81 e0       	ldi	r24, 0x01	; 1
    17e6:	90 e0       	ldi	r25, 0x00	; 0
    17e8:	02 2e       	mov	r0, r18
    17ea:	02 c0       	rjmp	.+4      	; 0x17f0 <DIO_SetPinLevel+0xf6>
    17ec:	88 0f       	add	r24, r24
    17ee:	99 1f       	adc	r25, r25
    17f0:	0a 94       	dec	r0
    17f2:	e2 f7       	brpl	.-8      	; 0x17ec <DIO_SetPinLevel+0xf2>
    17f4:	84 2b       	or	r24, r20
    17f6:	8c 93       	st	X, r24
    17f8:	77 c0       	rjmp	.+238    	; 0x18e8 <DIO_SetPinLevel+0x1ee>
            break;
        default:
            break;
        }
    }
    else if (level == DIO_LOW)
    17fa:	8b 81       	ldd	r24, Y+3	; 0x03
    17fc:	88 23       	and	r24, r24
    17fe:	09 f0       	breq	.+2      	; 0x1802 <DIO_SetPinLevel+0x108>
    1800:	73 c0       	rjmp	.+230    	; 0x18e8 <DIO_SetPinLevel+0x1ee>
    {
        switch (port)
    1802:	89 81       	ldd	r24, Y+1	; 0x01
    1804:	28 2f       	mov	r18, r24
    1806:	30 e0       	ldi	r19, 0x00	; 0
    1808:	3d 83       	std	Y+5, r19	; 0x05
    180a:	2c 83       	std	Y+4, r18	; 0x04
    180c:	8c 81       	ldd	r24, Y+4	; 0x04
    180e:	9d 81       	ldd	r25, Y+5	; 0x05
    1810:	81 30       	cpi	r24, 0x01	; 1
    1812:	91 05       	cpc	r25, r1
    1814:	59 f1       	breq	.+86     	; 0x186c <DIO_SetPinLevel+0x172>
    1816:	2c 81       	ldd	r18, Y+4	; 0x04
    1818:	3d 81       	ldd	r19, Y+5	; 0x05
    181a:	22 30       	cpi	r18, 0x02	; 2
    181c:	31 05       	cpc	r19, r1
    181e:	2c f4       	brge	.+10     	; 0x182a <DIO_SetPinLevel+0x130>
    1820:	8c 81       	ldd	r24, Y+4	; 0x04
    1822:	9d 81       	ldd	r25, Y+5	; 0x05
    1824:	00 97       	sbiw	r24, 0x00	; 0
    1826:	69 f0       	breq	.+26     	; 0x1842 <DIO_SetPinLevel+0x148>
    1828:	5f c0       	rjmp	.+190    	; 0x18e8 <DIO_SetPinLevel+0x1ee>
    182a:	2c 81       	ldd	r18, Y+4	; 0x04
    182c:	3d 81       	ldd	r19, Y+5	; 0x05
    182e:	22 30       	cpi	r18, 0x02	; 2
    1830:	31 05       	cpc	r19, r1
    1832:	89 f1       	breq	.+98     	; 0x1896 <DIO_SetPinLevel+0x19c>
    1834:	8c 81       	ldd	r24, Y+4	; 0x04
    1836:	9d 81       	ldd	r25, Y+5	; 0x05
    1838:	83 30       	cpi	r24, 0x03	; 3
    183a:	91 05       	cpc	r25, r1
    183c:	09 f4       	brne	.+2      	; 0x1840 <DIO_SetPinLevel+0x146>
    183e:	40 c0       	rjmp	.+128    	; 0x18c0 <DIO_SetPinLevel+0x1c6>
    1840:	53 c0       	rjmp	.+166    	; 0x18e8 <DIO_SetPinLevel+0x1ee>
        {
        case DIO_PORTA:
            CLR_BIT(PORTA, pin);
    1842:	ab e3       	ldi	r26, 0x3B	; 59
    1844:	b0 e0       	ldi	r27, 0x00	; 0
    1846:	eb e3       	ldi	r30, 0x3B	; 59
    1848:	f0 e0       	ldi	r31, 0x00	; 0
    184a:	80 81       	ld	r24, Z
    184c:	48 2f       	mov	r20, r24
    184e:	8a 81       	ldd	r24, Y+2	; 0x02
    1850:	28 2f       	mov	r18, r24
    1852:	30 e0       	ldi	r19, 0x00	; 0
    1854:	81 e0       	ldi	r24, 0x01	; 1
    1856:	90 e0       	ldi	r25, 0x00	; 0
    1858:	02 2e       	mov	r0, r18
    185a:	02 c0       	rjmp	.+4      	; 0x1860 <DIO_SetPinLevel+0x166>
    185c:	88 0f       	add	r24, r24
    185e:	99 1f       	adc	r25, r25
    1860:	0a 94       	dec	r0
    1862:	e2 f7       	brpl	.-8      	; 0x185c <DIO_SetPinLevel+0x162>
    1864:	80 95       	com	r24
    1866:	84 23       	and	r24, r20
    1868:	8c 93       	st	X, r24
    186a:	3e c0       	rjmp	.+124    	; 0x18e8 <DIO_SetPinLevel+0x1ee>
            break;
        case DIO_PORTB:
            CLR_BIT(PORTB, pin);
    186c:	a8 e3       	ldi	r26, 0x38	; 56
    186e:	b0 e0       	ldi	r27, 0x00	; 0
    1870:	e8 e3       	ldi	r30, 0x38	; 56
    1872:	f0 e0       	ldi	r31, 0x00	; 0
    1874:	80 81       	ld	r24, Z
    1876:	48 2f       	mov	r20, r24
    1878:	8a 81       	ldd	r24, Y+2	; 0x02
    187a:	28 2f       	mov	r18, r24
    187c:	30 e0       	ldi	r19, 0x00	; 0
    187e:	81 e0       	ldi	r24, 0x01	; 1
    1880:	90 e0       	ldi	r25, 0x00	; 0
    1882:	02 2e       	mov	r0, r18
    1884:	02 c0       	rjmp	.+4      	; 0x188a <DIO_SetPinLevel+0x190>
    1886:	88 0f       	add	r24, r24
    1888:	99 1f       	adc	r25, r25
    188a:	0a 94       	dec	r0
    188c:	e2 f7       	brpl	.-8      	; 0x1886 <DIO_SetPinLevel+0x18c>
    188e:	80 95       	com	r24
    1890:	84 23       	and	r24, r20
    1892:	8c 93       	st	X, r24
    1894:	29 c0       	rjmp	.+82     	; 0x18e8 <DIO_SetPinLevel+0x1ee>
            break;
        case DIO_PORTC:
            CLR_BIT(PORTC, pin);
    1896:	a5 e3       	ldi	r26, 0x35	; 53
    1898:	b0 e0       	ldi	r27, 0x00	; 0
    189a:	e5 e3       	ldi	r30, 0x35	; 53
    189c:	f0 e0       	ldi	r31, 0x00	; 0
    189e:	80 81       	ld	r24, Z
    18a0:	48 2f       	mov	r20, r24
    18a2:	8a 81       	ldd	r24, Y+2	; 0x02
    18a4:	28 2f       	mov	r18, r24
    18a6:	30 e0       	ldi	r19, 0x00	; 0
    18a8:	81 e0       	ldi	r24, 0x01	; 1
    18aa:	90 e0       	ldi	r25, 0x00	; 0
    18ac:	02 2e       	mov	r0, r18
    18ae:	02 c0       	rjmp	.+4      	; 0x18b4 <DIO_SetPinLevel+0x1ba>
    18b0:	88 0f       	add	r24, r24
    18b2:	99 1f       	adc	r25, r25
    18b4:	0a 94       	dec	r0
    18b6:	e2 f7       	brpl	.-8      	; 0x18b0 <DIO_SetPinLevel+0x1b6>
    18b8:	80 95       	com	r24
    18ba:	84 23       	and	r24, r20
    18bc:	8c 93       	st	X, r24
    18be:	14 c0       	rjmp	.+40     	; 0x18e8 <DIO_SetPinLevel+0x1ee>
            break;
        case DIO_PORTD:
            CLR_BIT(PORTD, pin);
    18c0:	a2 e3       	ldi	r26, 0x32	; 50
    18c2:	b0 e0       	ldi	r27, 0x00	; 0
    18c4:	e2 e3       	ldi	r30, 0x32	; 50
    18c6:	f0 e0       	ldi	r31, 0x00	; 0
    18c8:	80 81       	ld	r24, Z
    18ca:	48 2f       	mov	r20, r24
    18cc:	8a 81       	ldd	r24, Y+2	; 0x02
    18ce:	28 2f       	mov	r18, r24
    18d0:	30 e0       	ldi	r19, 0x00	; 0
    18d2:	81 e0       	ldi	r24, 0x01	; 1
    18d4:	90 e0       	ldi	r25, 0x00	; 0
    18d6:	02 2e       	mov	r0, r18
    18d8:	02 c0       	rjmp	.+4      	; 0x18de <DIO_SetPinLevel+0x1e4>
    18da:	88 0f       	add	r24, r24
    18dc:	99 1f       	adc	r25, r25
    18de:	0a 94       	dec	r0
    18e0:	e2 f7       	brpl	.-8      	; 0x18da <DIO_SetPinLevel+0x1e0>
    18e2:	80 95       	com	r24
    18e4:	84 23       	and	r24, r20
    18e6:	8c 93       	st	X, r24
            break;
        default:
            break;
        }
    }
}
    18e8:	27 96       	adiw	r28, 0x07	; 7
    18ea:	0f b6       	in	r0, 0x3f	; 63
    18ec:	f8 94       	cli
    18ee:	de bf       	out	0x3e, r29	; 62
    18f0:	0f be       	out	0x3f, r0	; 63
    18f2:	cd bf       	out	0x3d, r28	; 61
    18f4:	cf 91       	pop	r28
    18f6:	df 91       	pop	r29
    18f8:	08 95       	ret

000018fa <DIO_SetPortLevel>:

void DIO_SetPortLevel (DIO_PortType port, DIO_LevelType level) {
    18fa:	df 93       	push	r29
    18fc:	cf 93       	push	r28
    18fe:	cd b7       	in	r28, 0x3d	; 61
    1900:	de b7       	in	r29, 0x3e	; 62
    1902:	28 97       	sbiw	r28, 0x08	; 8
    1904:	0f b6       	in	r0, 0x3f	; 63
    1906:	f8 94       	cli
    1908:	de bf       	out	0x3e, r29	; 62
    190a:	0f be       	out	0x3f, r0	; 63
    190c:	cd bf       	out	0x3d, r28	; 61
    190e:	89 83       	std	Y+1, r24	; 0x01
    1910:	6a 83       	std	Y+2, r22	; 0x02
    if (level == DIO_HIGH) {
    1912:	8a 81       	ldd	r24, Y+2	; 0x02
    1914:	81 30       	cpi	r24, 0x01	; 1
    1916:	99 f5       	brne	.+102    	; 0x197e <DIO_SetPortLevel+0x84>
        switch (port)
    1918:	89 81       	ldd	r24, Y+1	; 0x01
    191a:	28 2f       	mov	r18, r24
    191c:	30 e0       	ldi	r19, 0x00	; 0
    191e:	38 87       	std	Y+8, r19	; 0x08
    1920:	2f 83       	std	Y+7, r18	; 0x07
    1922:	8f 81       	ldd	r24, Y+7	; 0x07
    1924:	98 85       	ldd	r25, Y+8	; 0x08
    1926:	81 30       	cpi	r24, 0x01	; 1
    1928:	91 05       	cpc	r25, r1
    192a:	d1 f0       	breq	.+52     	; 0x1960 <DIO_SetPortLevel+0x66>
    192c:	2f 81       	ldd	r18, Y+7	; 0x07
    192e:	38 85       	ldd	r19, Y+8	; 0x08
    1930:	22 30       	cpi	r18, 0x02	; 2
    1932:	31 05       	cpc	r19, r1
    1934:	2c f4       	brge	.+10     	; 0x1940 <DIO_SetPortLevel+0x46>
    1936:	8f 81       	ldd	r24, Y+7	; 0x07
    1938:	98 85       	ldd	r25, Y+8	; 0x08
    193a:	00 97       	sbiw	r24, 0x00	; 0
    193c:	61 f0       	breq	.+24     	; 0x1956 <DIO_SetPortLevel+0x5c>
    193e:	83 c0       	rjmp	.+262    	; 0x1a46 <DIO_SetPortLevel+0x14c>
    1940:	2f 81       	ldd	r18, Y+7	; 0x07
    1942:	38 85       	ldd	r19, Y+8	; 0x08
    1944:	22 30       	cpi	r18, 0x02	; 2
    1946:	31 05       	cpc	r19, r1
    1948:	81 f0       	breq	.+32     	; 0x196a <DIO_SetPortLevel+0x70>
    194a:	8f 81       	ldd	r24, Y+7	; 0x07
    194c:	98 85       	ldd	r25, Y+8	; 0x08
    194e:	83 30       	cpi	r24, 0x03	; 3
    1950:	91 05       	cpc	r25, r1
    1952:	81 f0       	breq	.+32     	; 0x1974 <DIO_SetPortLevel+0x7a>
    1954:	78 c0       	rjmp	.+240    	; 0x1a46 <DIO_SetPortLevel+0x14c>
        {
        case DIO_PORTA:
            PORTA = 0xFF;
    1956:	eb e3       	ldi	r30, 0x3B	; 59
    1958:	f0 e0       	ldi	r31, 0x00	; 0
    195a:	8f ef       	ldi	r24, 0xFF	; 255
    195c:	80 83       	st	Z, r24
    195e:	73 c0       	rjmp	.+230    	; 0x1a46 <DIO_SetPortLevel+0x14c>
            break;
        case DIO_PORTB:
            PORTB = 0xFF;
    1960:	e8 e3       	ldi	r30, 0x38	; 56
    1962:	f0 e0       	ldi	r31, 0x00	; 0
    1964:	8f ef       	ldi	r24, 0xFF	; 255
    1966:	80 83       	st	Z, r24
    1968:	6e c0       	rjmp	.+220    	; 0x1a46 <DIO_SetPortLevel+0x14c>
            break;
        case DIO_PORTC:
            PORTC = 0xFF;
    196a:	e5 e3       	ldi	r30, 0x35	; 53
    196c:	f0 e0       	ldi	r31, 0x00	; 0
    196e:	8f ef       	ldi	r24, 0xFF	; 255
    1970:	80 83       	st	Z, r24
    1972:	69 c0       	rjmp	.+210    	; 0x1a46 <DIO_SetPortLevel+0x14c>
            break;
        case DIO_PORTD:
            PORTD = 0xFF;
    1974:	e2 e3       	ldi	r30, 0x32	; 50
    1976:	f0 e0       	ldi	r31, 0x00	; 0
    1978:	8f ef       	ldi	r24, 0xFF	; 255
    197a:	80 83       	st	Z, r24
    197c:	64 c0       	rjmp	.+200    	; 0x1a46 <DIO_SetPortLevel+0x14c>
            break;
        default:
            break;
        }
    }
    else if (level == DIO_LOW) {
    197e:	8a 81       	ldd	r24, Y+2	; 0x02
    1980:	88 23       	and	r24, r24
    1982:	79 f5       	brne	.+94     	; 0x19e2 <DIO_SetPortLevel+0xe8>
        switch (port)
    1984:	89 81       	ldd	r24, Y+1	; 0x01
    1986:	28 2f       	mov	r18, r24
    1988:	30 e0       	ldi	r19, 0x00	; 0
    198a:	3e 83       	std	Y+6, r19	; 0x06
    198c:	2d 83       	std	Y+5, r18	; 0x05
    198e:	8d 81       	ldd	r24, Y+5	; 0x05
    1990:	9e 81       	ldd	r25, Y+6	; 0x06
    1992:	81 30       	cpi	r24, 0x01	; 1
    1994:	91 05       	cpc	r25, r1
    1996:	c9 f0       	breq	.+50     	; 0x19ca <DIO_SetPortLevel+0xd0>
    1998:	2d 81       	ldd	r18, Y+5	; 0x05
    199a:	3e 81       	ldd	r19, Y+6	; 0x06
    199c:	22 30       	cpi	r18, 0x02	; 2
    199e:	31 05       	cpc	r19, r1
    19a0:	2c f4       	brge	.+10     	; 0x19ac <DIO_SetPortLevel+0xb2>
    19a2:	8d 81       	ldd	r24, Y+5	; 0x05
    19a4:	9e 81       	ldd	r25, Y+6	; 0x06
    19a6:	00 97       	sbiw	r24, 0x00	; 0
    19a8:	61 f0       	breq	.+24     	; 0x19c2 <DIO_SetPortLevel+0xc8>
    19aa:	4d c0       	rjmp	.+154    	; 0x1a46 <DIO_SetPortLevel+0x14c>
    19ac:	2d 81       	ldd	r18, Y+5	; 0x05
    19ae:	3e 81       	ldd	r19, Y+6	; 0x06
    19b0:	22 30       	cpi	r18, 0x02	; 2
    19b2:	31 05       	cpc	r19, r1
    19b4:	71 f0       	breq	.+28     	; 0x19d2 <DIO_SetPortLevel+0xd8>
    19b6:	8d 81       	ldd	r24, Y+5	; 0x05
    19b8:	9e 81       	ldd	r25, Y+6	; 0x06
    19ba:	83 30       	cpi	r24, 0x03	; 3
    19bc:	91 05       	cpc	r25, r1
    19be:	69 f0       	breq	.+26     	; 0x19da <DIO_SetPortLevel+0xe0>
    19c0:	42 c0       	rjmp	.+132    	; 0x1a46 <DIO_SetPortLevel+0x14c>
        {
        case DIO_PORTA:
            PORTA = 0x00;
    19c2:	eb e3       	ldi	r30, 0x3B	; 59
    19c4:	f0 e0       	ldi	r31, 0x00	; 0
    19c6:	10 82       	st	Z, r1
    19c8:	3e c0       	rjmp	.+124    	; 0x1a46 <DIO_SetPortLevel+0x14c>
            break;
        case DIO_PORTB:
            PORTB = 0x00;
    19ca:	e8 e3       	ldi	r30, 0x38	; 56
    19cc:	f0 e0       	ldi	r31, 0x00	; 0
    19ce:	10 82       	st	Z, r1
    19d0:	3a c0       	rjmp	.+116    	; 0x1a46 <DIO_SetPortLevel+0x14c>
            break;
        case DIO_PORTC:
            PORTC = 0x00;
    19d2:	e5 e3       	ldi	r30, 0x35	; 53
    19d4:	f0 e0       	ldi	r31, 0x00	; 0
    19d6:	10 82       	st	Z, r1
    19d8:	36 c0       	rjmp	.+108    	; 0x1a46 <DIO_SetPortLevel+0x14c>
            break;
        case DIO_PORTD:
            PORTD = 0x00;
    19da:	e2 e3       	ldi	r30, 0x32	; 50
    19dc:	f0 e0       	ldi	r31, 0x00	; 0
    19de:	10 82       	st	Z, r1
    19e0:	32 c0       	rjmp	.+100    	; 0x1a46 <DIO_SetPortLevel+0x14c>
        default:
            break;
        }
    }
    else {
        switch (port)
    19e2:	89 81       	ldd	r24, Y+1	; 0x01
    19e4:	28 2f       	mov	r18, r24
    19e6:	30 e0       	ldi	r19, 0x00	; 0
    19e8:	3c 83       	std	Y+4, r19	; 0x04
    19ea:	2b 83       	std	Y+3, r18	; 0x03
    19ec:	8b 81       	ldd	r24, Y+3	; 0x03
    19ee:	9c 81       	ldd	r25, Y+4	; 0x04
    19f0:	81 30       	cpi	r24, 0x01	; 1
    19f2:	91 05       	cpc	r25, r1
    19f4:	d1 f0       	breq	.+52     	; 0x1a2a <DIO_SetPortLevel+0x130>
    19f6:	2b 81       	ldd	r18, Y+3	; 0x03
    19f8:	3c 81       	ldd	r19, Y+4	; 0x04
    19fa:	22 30       	cpi	r18, 0x02	; 2
    19fc:	31 05       	cpc	r19, r1
    19fe:	2c f4       	brge	.+10     	; 0x1a0a <DIO_SetPortLevel+0x110>
    1a00:	8b 81       	ldd	r24, Y+3	; 0x03
    1a02:	9c 81       	ldd	r25, Y+4	; 0x04
    1a04:	00 97       	sbiw	r24, 0x00	; 0
    1a06:	61 f0       	breq	.+24     	; 0x1a20 <DIO_SetPortLevel+0x126>
    1a08:	1e c0       	rjmp	.+60     	; 0x1a46 <DIO_SetPortLevel+0x14c>
    1a0a:	2b 81       	ldd	r18, Y+3	; 0x03
    1a0c:	3c 81       	ldd	r19, Y+4	; 0x04
    1a0e:	22 30       	cpi	r18, 0x02	; 2
    1a10:	31 05       	cpc	r19, r1
    1a12:	81 f0       	breq	.+32     	; 0x1a34 <DIO_SetPortLevel+0x13a>
    1a14:	8b 81       	ldd	r24, Y+3	; 0x03
    1a16:	9c 81       	ldd	r25, Y+4	; 0x04
    1a18:	83 30       	cpi	r24, 0x03	; 3
    1a1a:	91 05       	cpc	r25, r1
    1a1c:	81 f0       	breq	.+32     	; 0x1a3e <DIO_SetPortLevel+0x144>
    1a1e:	13 c0       	rjmp	.+38     	; 0x1a46 <DIO_SetPortLevel+0x14c>
        {
        case DIO_PORTA:
            PORTA = level;
    1a20:	eb e3       	ldi	r30, 0x3B	; 59
    1a22:	f0 e0       	ldi	r31, 0x00	; 0
    1a24:	8a 81       	ldd	r24, Y+2	; 0x02
    1a26:	80 83       	st	Z, r24
    1a28:	0e c0       	rjmp	.+28     	; 0x1a46 <DIO_SetPortLevel+0x14c>
            break;
        case DIO_PORTB:
            PORTB = level;
    1a2a:	e8 e3       	ldi	r30, 0x38	; 56
    1a2c:	f0 e0       	ldi	r31, 0x00	; 0
    1a2e:	8a 81       	ldd	r24, Y+2	; 0x02
    1a30:	80 83       	st	Z, r24
    1a32:	09 c0       	rjmp	.+18     	; 0x1a46 <DIO_SetPortLevel+0x14c>
            break;
        case DIO_PORTC:
            PORTC = level;
    1a34:	e5 e3       	ldi	r30, 0x35	; 53
    1a36:	f0 e0       	ldi	r31, 0x00	; 0
    1a38:	8a 81       	ldd	r24, Y+2	; 0x02
    1a3a:	80 83       	st	Z, r24
    1a3c:	04 c0       	rjmp	.+8      	; 0x1a46 <DIO_SetPortLevel+0x14c>
            break;
        case DIO_PORTD:
            PORTD = level;
    1a3e:	e2 e3       	ldi	r30, 0x32	; 50
    1a40:	f0 e0       	ldi	r31, 0x00	; 0
    1a42:	8a 81       	ldd	r24, Y+2	; 0x02
    1a44:	80 83       	st	Z, r24
        default:
            break;
        }

    }
}
    1a46:	28 96       	adiw	r28, 0x08	; 8
    1a48:	0f b6       	in	r0, 0x3f	; 63
    1a4a:	f8 94       	cli
    1a4c:	de bf       	out	0x3e, r29	; 62
    1a4e:	0f be       	out	0x3f, r0	; 63
    1a50:	cd bf       	out	0x3d, r28	; 61
    1a52:	cf 91       	pop	r28
    1a54:	df 91       	pop	r29
    1a56:	08 95       	ret

00001a58 <DIO_ReadPinLevel>:



DIO_LevelType DIO_ReadPinLevel(DIO_PortType port, DIO_PinType pin) {
    1a58:	df 93       	push	r29
    1a5a:	cf 93       	push	r28
    1a5c:	00 d0       	rcall	.+0      	; 0x1a5e <DIO_ReadPinLevel+0x6>
    1a5e:	00 d0       	rcall	.+0      	; 0x1a60 <DIO_ReadPinLevel+0x8>
    1a60:	0f 92       	push	r0
    1a62:	cd b7       	in	r28, 0x3d	; 61
    1a64:	de b7       	in	r29, 0x3e	; 62
    1a66:	8a 83       	std	Y+2, r24	; 0x02
    1a68:	6b 83       	std	Y+3, r22	; 0x03
    DIO_LevelType result = DIO_LOW;
    1a6a:	19 82       	std	Y+1, r1	; 0x01
    switch (port)
    1a6c:	8a 81       	ldd	r24, Y+2	; 0x02
    1a6e:	28 2f       	mov	r18, r24
    1a70:	30 e0       	ldi	r19, 0x00	; 0
    1a72:	3d 83       	std	Y+5, r19	; 0x05
    1a74:	2c 83       	std	Y+4, r18	; 0x04
    1a76:	4c 81       	ldd	r20, Y+4	; 0x04
    1a78:	5d 81       	ldd	r21, Y+5	; 0x05
    1a7a:	41 30       	cpi	r20, 0x01	; 1
    1a7c:	51 05       	cpc	r21, r1
    1a7e:	41 f1       	breq	.+80     	; 0x1ad0 <DIO_ReadPinLevel+0x78>
    1a80:	8c 81       	ldd	r24, Y+4	; 0x04
    1a82:	9d 81       	ldd	r25, Y+5	; 0x05
    1a84:	82 30       	cpi	r24, 0x02	; 2
    1a86:	91 05       	cpc	r25, r1
    1a88:	34 f4       	brge	.+12     	; 0x1a96 <DIO_ReadPinLevel+0x3e>
    1a8a:	2c 81       	ldd	r18, Y+4	; 0x04
    1a8c:	3d 81       	ldd	r19, Y+5	; 0x05
    1a8e:	21 15       	cp	r18, r1
    1a90:	31 05       	cpc	r19, r1
    1a92:	61 f0       	breq	.+24     	; 0x1aac <DIO_ReadPinLevel+0x54>
    1a94:	52 c0       	rjmp	.+164    	; 0x1b3a <DIO_ReadPinLevel+0xe2>
    1a96:	4c 81       	ldd	r20, Y+4	; 0x04
    1a98:	5d 81       	ldd	r21, Y+5	; 0x05
    1a9a:	42 30       	cpi	r20, 0x02	; 2
    1a9c:	51 05       	cpc	r21, r1
    1a9e:	51 f1       	breq	.+84     	; 0x1af4 <DIO_ReadPinLevel+0x9c>
    1aa0:	8c 81       	ldd	r24, Y+4	; 0x04
    1aa2:	9d 81       	ldd	r25, Y+5	; 0x05
    1aa4:	83 30       	cpi	r24, 0x03	; 3
    1aa6:	91 05       	cpc	r25, r1
    1aa8:	b9 f1       	breq	.+110    	; 0x1b18 <DIO_ReadPinLevel+0xc0>
    1aaa:	47 c0       	rjmp	.+142    	; 0x1b3a <DIO_ReadPinLevel+0xe2>
    {
    case DIO_PORTA:
        result = GET_BIT(PINA, pin);
    1aac:	e9 e3       	ldi	r30, 0x39	; 57
    1aae:	f0 e0       	ldi	r31, 0x00	; 0
    1ab0:	80 81       	ld	r24, Z
    1ab2:	28 2f       	mov	r18, r24
    1ab4:	30 e0       	ldi	r19, 0x00	; 0
    1ab6:	8b 81       	ldd	r24, Y+3	; 0x03
    1ab8:	88 2f       	mov	r24, r24
    1aba:	90 e0       	ldi	r25, 0x00	; 0
    1abc:	a9 01       	movw	r20, r18
    1abe:	02 c0       	rjmp	.+4      	; 0x1ac4 <DIO_ReadPinLevel+0x6c>
    1ac0:	55 95       	asr	r21
    1ac2:	47 95       	ror	r20
    1ac4:	8a 95       	dec	r24
    1ac6:	e2 f7       	brpl	.-8      	; 0x1ac0 <DIO_ReadPinLevel+0x68>
    1ac8:	ca 01       	movw	r24, r20
    1aca:	81 70       	andi	r24, 0x01	; 1
    1acc:	89 83       	std	Y+1, r24	; 0x01
    1ace:	35 c0       	rjmp	.+106    	; 0x1b3a <DIO_ReadPinLevel+0xe2>
        break;
    case DIO_PORTB:
        result = GET_BIT(PINB, pin);
    1ad0:	e6 e3       	ldi	r30, 0x36	; 54
    1ad2:	f0 e0       	ldi	r31, 0x00	; 0
    1ad4:	80 81       	ld	r24, Z
    1ad6:	28 2f       	mov	r18, r24
    1ad8:	30 e0       	ldi	r19, 0x00	; 0
    1ada:	8b 81       	ldd	r24, Y+3	; 0x03
    1adc:	88 2f       	mov	r24, r24
    1ade:	90 e0       	ldi	r25, 0x00	; 0
    1ae0:	a9 01       	movw	r20, r18
    1ae2:	02 c0       	rjmp	.+4      	; 0x1ae8 <DIO_ReadPinLevel+0x90>
    1ae4:	55 95       	asr	r21
    1ae6:	47 95       	ror	r20
    1ae8:	8a 95       	dec	r24
    1aea:	e2 f7       	brpl	.-8      	; 0x1ae4 <DIO_ReadPinLevel+0x8c>
    1aec:	ca 01       	movw	r24, r20
    1aee:	81 70       	andi	r24, 0x01	; 1
    1af0:	89 83       	std	Y+1, r24	; 0x01
    1af2:	23 c0       	rjmp	.+70     	; 0x1b3a <DIO_ReadPinLevel+0xe2>
        break;
    case DIO_PORTC:
        result = GET_BIT(PINC, pin);
    1af4:	e3 e3       	ldi	r30, 0x33	; 51
    1af6:	f0 e0       	ldi	r31, 0x00	; 0
    1af8:	80 81       	ld	r24, Z
    1afa:	28 2f       	mov	r18, r24
    1afc:	30 e0       	ldi	r19, 0x00	; 0
    1afe:	8b 81       	ldd	r24, Y+3	; 0x03
    1b00:	88 2f       	mov	r24, r24
    1b02:	90 e0       	ldi	r25, 0x00	; 0
    1b04:	a9 01       	movw	r20, r18
    1b06:	02 c0       	rjmp	.+4      	; 0x1b0c <DIO_ReadPinLevel+0xb4>
    1b08:	55 95       	asr	r21
    1b0a:	47 95       	ror	r20
    1b0c:	8a 95       	dec	r24
    1b0e:	e2 f7       	brpl	.-8      	; 0x1b08 <DIO_ReadPinLevel+0xb0>
    1b10:	ca 01       	movw	r24, r20
    1b12:	81 70       	andi	r24, 0x01	; 1
    1b14:	89 83       	std	Y+1, r24	; 0x01
    1b16:	11 c0       	rjmp	.+34     	; 0x1b3a <DIO_ReadPinLevel+0xe2>
        break;
    case DIO_PORTD:
        result = GET_BIT(PIND, pin);
    1b18:	e0 e3       	ldi	r30, 0x30	; 48
    1b1a:	f0 e0       	ldi	r31, 0x00	; 0
    1b1c:	80 81       	ld	r24, Z
    1b1e:	28 2f       	mov	r18, r24
    1b20:	30 e0       	ldi	r19, 0x00	; 0
    1b22:	8b 81       	ldd	r24, Y+3	; 0x03
    1b24:	88 2f       	mov	r24, r24
    1b26:	90 e0       	ldi	r25, 0x00	; 0
    1b28:	a9 01       	movw	r20, r18
    1b2a:	02 c0       	rjmp	.+4      	; 0x1b30 <DIO_ReadPinLevel+0xd8>
    1b2c:	55 95       	asr	r21
    1b2e:	47 95       	ror	r20
    1b30:	8a 95       	dec	r24
    1b32:	e2 f7       	brpl	.-8      	; 0x1b2c <DIO_ReadPinLevel+0xd4>
    1b34:	ca 01       	movw	r24, r20
    1b36:	81 70       	andi	r24, 0x01	; 1
    1b38:	89 83       	std	Y+1, r24	; 0x01
        break;
    default:
        break;
    }
    return result;
    1b3a:	89 81       	ldd	r24, Y+1	; 0x01
}
    1b3c:	0f 90       	pop	r0
    1b3e:	0f 90       	pop	r0
    1b40:	0f 90       	pop	r0
    1b42:	0f 90       	pop	r0
    1b44:	0f 90       	pop	r0
    1b46:	cf 91       	pop	r28
    1b48:	df 91       	pop	r29
    1b4a:	08 95       	ret

00001b4c <DIO_ReadPortLevel>:

DIO_LevelType DIO_ReadPortLevel (DIO_PortType port) {
    1b4c:	df 93       	push	r29
    1b4e:	cf 93       	push	r28
    1b50:	00 d0       	rcall	.+0      	; 0x1b52 <DIO_ReadPortLevel+0x6>
    1b52:	00 d0       	rcall	.+0      	; 0x1b54 <DIO_ReadPortLevel+0x8>
    1b54:	cd b7       	in	r28, 0x3d	; 61
    1b56:	de b7       	in	r29, 0x3e	; 62
    1b58:	8a 83       	std	Y+2, r24	; 0x02
    u8 result = 0x00;
    1b5a:	19 82       	std	Y+1, r1	; 0x01
    switch (port)
    1b5c:	8a 81       	ldd	r24, Y+2	; 0x02
    1b5e:	28 2f       	mov	r18, r24
    1b60:	30 e0       	ldi	r19, 0x00	; 0
    1b62:	3c 83       	std	Y+4, r19	; 0x04
    1b64:	2b 83       	std	Y+3, r18	; 0x03
    1b66:	8b 81       	ldd	r24, Y+3	; 0x03
    1b68:	9c 81       	ldd	r25, Y+4	; 0x04
    1b6a:	81 30       	cpi	r24, 0x01	; 1
    1b6c:	91 05       	cpc	r25, r1
    1b6e:	49 f1       	breq	.+82     	; 0x1bc2 <DIO_ReadPortLevel+0x76>
    1b70:	2b 81       	ldd	r18, Y+3	; 0x03
    1b72:	3c 81       	ldd	r19, Y+4	; 0x04
    1b74:	22 30       	cpi	r18, 0x02	; 2
    1b76:	31 05       	cpc	r19, r1
    1b78:	2c f4       	brge	.+10     	; 0x1b84 <DIO_ReadPortLevel+0x38>
    1b7a:	8b 81       	ldd	r24, Y+3	; 0x03
    1b7c:	9c 81       	ldd	r25, Y+4	; 0x04
    1b7e:	00 97       	sbiw	r24, 0x00	; 0
    1b80:	61 f0       	breq	.+24     	; 0x1b9a <DIO_ReadPortLevel+0x4e>
    1b82:	5a c0       	rjmp	.+180    	; 0x1c38 <DIO_ReadPortLevel+0xec>
    1b84:	2b 81       	ldd	r18, Y+3	; 0x03
    1b86:	3c 81       	ldd	r19, Y+4	; 0x04
    1b88:	22 30       	cpi	r18, 0x02	; 2
    1b8a:	31 05       	cpc	r19, r1
    1b8c:	71 f1       	breq	.+92     	; 0x1bea <DIO_ReadPortLevel+0x9e>
    1b8e:	8b 81       	ldd	r24, Y+3	; 0x03
    1b90:	9c 81       	ldd	r25, Y+4	; 0x04
    1b92:	83 30       	cpi	r24, 0x03	; 3
    1b94:	91 05       	cpc	r25, r1
    1b96:	e9 f1       	breq	.+122    	; 0x1c12 <DIO_ReadPortLevel+0xc6>
    1b98:	4f c0       	rjmp	.+158    	; 0x1c38 <DIO_ReadPortLevel+0xec>
    {
    case DIO_PORTA:
        if (PINA == 0xFF) {
    1b9a:	e9 e3       	ldi	r30, 0x39	; 57
    1b9c:	f0 e0       	ldi	r31, 0x00	; 0
    1b9e:	80 81       	ld	r24, Z
    1ba0:	8f 3f       	cpi	r24, 0xFF	; 255
    1ba2:	19 f4       	brne	.+6      	; 0x1baa <DIO_ReadPortLevel+0x5e>
            result = DIO_HIGH;
    1ba4:	81 e0       	ldi	r24, 0x01	; 1
    1ba6:	89 83       	std	Y+1, r24	; 0x01
    1ba8:	47 c0       	rjmp	.+142    	; 0x1c38 <DIO_ReadPortLevel+0xec>
        }
        else if (PINA == 0x00) {
    1baa:	e9 e3       	ldi	r30, 0x39	; 57
    1bac:	f0 e0       	ldi	r31, 0x00	; 0
    1bae:	80 81       	ld	r24, Z
    1bb0:	88 23       	and	r24, r24
    1bb2:	11 f4       	brne	.+4      	; 0x1bb8 <DIO_ReadPortLevel+0x6c>
            result = DIO_LOW;
    1bb4:	19 82       	std	Y+1, r1	; 0x01
    1bb6:	40 c0       	rjmp	.+128    	; 0x1c38 <DIO_ReadPortLevel+0xec>
        }
        else {
            result = PINA;
    1bb8:	e9 e3       	ldi	r30, 0x39	; 57
    1bba:	f0 e0       	ldi	r31, 0x00	; 0
    1bbc:	80 81       	ld	r24, Z
    1bbe:	89 83       	std	Y+1, r24	; 0x01
    1bc0:	3b c0       	rjmp	.+118    	; 0x1c38 <DIO_ReadPortLevel+0xec>
        }
        break;
    case DIO_PORTB:
        if (PINB == 0xFF) {
    1bc2:	e6 e3       	ldi	r30, 0x36	; 54
    1bc4:	f0 e0       	ldi	r31, 0x00	; 0
    1bc6:	80 81       	ld	r24, Z
    1bc8:	8f 3f       	cpi	r24, 0xFF	; 255
    1bca:	19 f4       	brne	.+6      	; 0x1bd2 <DIO_ReadPortLevel+0x86>
            result = DIO_HIGH;
    1bcc:	81 e0       	ldi	r24, 0x01	; 1
    1bce:	89 83       	std	Y+1, r24	; 0x01
    1bd0:	33 c0       	rjmp	.+102    	; 0x1c38 <DIO_ReadPortLevel+0xec>
        }
        else if (PINB == 0x00) {
    1bd2:	e6 e3       	ldi	r30, 0x36	; 54
    1bd4:	f0 e0       	ldi	r31, 0x00	; 0
    1bd6:	80 81       	ld	r24, Z
    1bd8:	88 23       	and	r24, r24
    1bda:	11 f4       	brne	.+4      	; 0x1be0 <DIO_ReadPortLevel+0x94>
            result = DIO_LOW;
    1bdc:	19 82       	std	Y+1, r1	; 0x01
    1bde:	2c c0       	rjmp	.+88     	; 0x1c38 <DIO_ReadPortLevel+0xec>
        }
        else {
            result = PINB;
    1be0:	e6 e3       	ldi	r30, 0x36	; 54
    1be2:	f0 e0       	ldi	r31, 0x00	; 0
    1be4:	80 81       	ld	r24, Z
    1be6:	89 83       	std	Y+1, r24	; 0x01
    1be8:	27 c0       	rjmp	.+78     	; 0x1c38 <DIO_ReadPortLevel+0xec>
        }
        break;
    case DIO_PORTC:
        if (PINC == 0xFF) {
    1bea:	e3 e3       	ldi	r30, 0x33	; 51
    1bec:	f0 e0       	ldi	r31, 0x00	; 0
    1bee:	80 81       	ld	r24, Z
    1bf0:	8f 3f       	cpi	r24, 0xFF	; 255
    1bf2:	19 f4       	brne	.+6      	; 0x1bfa <DIO_ReadPortLevel+0xae>
            result = DIO_HIGH;
    1bf4:	81 e0       	ldi	r24, 0x01	; 1
    1bf6:	89 83       	std	Y+1, r24	; 0x01
    1bf8:	1f c0       	rjmp	.+62     	; 0x1c38 <DIO_ReadPortLevel+0xec>
        }
        else if (PINC == 0x00) {
    1bfa:	e3 e3       	ldi	r30, 0x33	; 51
    1bfc:	f0 e0       	ldi	r31, 0x00	; 0
    1bfe:	80 81       	ld	r24, Z
    1c00:	88 23       	and	r24, r24
    1c02:	11 f4       	brne	.+4      	; 0x1c08 <DIO_ReadPortLevel+0xbc>
            result = DIO_LOW;
    1c04:	19 82       	std	Y+1, r1	; 0x01
    1c06:	18 c0       	rjmp	.+48     	; 0x1c38 <DIO_ReadPortLevel+0xec>
        }
        else {
            result = PINC;
    1c08:	e3 e3       	ldi	r30, 0x33	; 51
    1c0a:	f0 e0       	ldi	r31, 0x00	; 0
    1c0c:	80 81       	ld	r24, Z
    1c0e:	89 83       	std	Y+1, r24	; 0x01
    1c10:	13 c0       	rjmp	.+38     	; 0x1c38 <DIO_ReadPortLevel+0xec>
        }
        break;
    case DIO_PORTD:
        if (PIND == 0xFF) {
    1c12:	e0 e3       	ldi	r30, 0x30	; 48
    1c14:	f0 e0       	ldi	r31, 0x00	; 0
    1c16:	80 81       	ld	r24, Z
    1c18:	8f 3f       	cpi	r24, 0xFF	; 255
    1c1a:	19 f4       	brne	.+6      	; 0x1c22 <DIO_ReadPortLevel+0xd6>
            result = DIO_HIGH;
    1c1c:	81 e0       	ldi	r24, 0x01	; 1
    1c1e:	89 83       	std	Y+1, r24	; 0x01
    1c20:	0b c0       	rjmp	.+22     	; 0x1c38 <DIO_ReadPortLevel+0xec>
        }
        else if (PIND == 0x00) {
    1c22:	e0 e3       	ldi	r30, 0x30	; 48
    1c24:	f0 e0       	ldi	r31, 0x00	; 0
    1c26:	80 81       	ld	r24, Z
    1c28:	88 23       	and	r24, r24
    1c2a:	11 f4       	brne	.+4      	; 0x1c30 <DIO_ReadPortLevel+0xe4>
            result = DIO_LOW;
    1c2c:	19 82       	std	Y+1, r1	; 0x01
    1c2e:	04 c0       	rjmp	.+8      	; 0x1c38 <DIO_ReadPortLevel+0xec>
        }
        else {
            result = PIND;
    1c30:	e0 e3       	ldi	r30, 0x30	; 48
    1c32:	f0 e0       	ldi	r31, 0x00	; 0
    1c34:	80 81       	ld	r24, Z
    1c36:	89 83       	std	Y+1, r24	; 0x01
        }
        break;
    default:
        break;
    }
    return result;
    1c38:	89 81       	ldd	r24, Y+1	; 0x01
}
    1c3a:	0f 90       	pop	r0
    1c3c:	0f 90       	pop	r0
    1c3e:	0f 90       	pop	r0
    1c40:	0f 90       	pop	r0
    1c42:	cf 91       	pop	r28
    1c44:	df 91       	pop	r29
    1c46:	08 95       	ret

00001c48 <__vector_1>:
void (*ExtInterrupt_INT0Callback) (void);
void (*ExtInterrupt_INT1Callback) (void);
void (*ExtInterrupt_INT2Callback) (void);

void __vector_1 (void) __attribute__ ((signal));
void __vector_1 (void) {
    1c48:	1f 92       	push	r1
    1c4a:	0f 92       	push	r0
    1c4c:	0f b6       	in	r0, 0x3f	; 63
    1c4e:	0f 92       	push	r0
    1c50:	11 24       	eor	r1, r1
    1c52:	2f 93       	push	r18
    1c54:	3f 93       	push	r19
    1c56:	4f 93       	push	r20
    1c58:	5f 93       	push	r21
    1c5a:	6f 93       	push	r22
    1c5c:	7f 93       	push	r23
    1c5e:	8f 93       	push	r24
    1c60:	9f 93       	push	r25
    1c62:	af 93       	push	r26
    1c64:	bf 93       	push	r27
    1c66:	ef 93       	push	r30
    1c68:	ff 93       	push	r31
    1c6a:	df 93       	push	r29
    1c6c:	cf 93       	push	r28
    1c6e:	cd b7       	in	r28, 0x3d	; 61
    1c70:	de b7       	in	r29, 0x3e	; 62
	ExtInterrupt_INT0Callback();
    1c72:	e0 91 76 00 	lds	r30, 0x0076
    1c76:	f0 91 77 00 	lds	r31, 0x0077
    1c7a:	09 95       	icall
}
    1c7c:	cf 91       	pop	r28
    1c7e:	df 91       	pop	r29
    1c80:	ff 91       	pop	r31
    1c82:	ef 91       	pop	r30
    1c84:	bf 91       	pop	r27
    1c86:	af 91       	pop	r26
    1c88:	9f 91       	pop	r25
    1c8a:	8f 91       	pop	r24
    1c8c:	7f 91       	pop	r23
    1c8e:	6f 91       	pop	r22
    1c90:	5f 91       	pop	r21
    1c92:	4f 91       	pop	r20
    1c94:	3f 91       	pop	r19
    1c96:	2f 91       	pop	r18
    1c98:	0f 90       	pop	r0
    1c9a:	0f be       	out	0x3f, r0	; 63
    1c9c:	0f 90       	pop	r0
    1c9e:	1f 90       	pop	r1
    1ca0:	18 95       	reti

00001ca2 <__vector_2>:
void __vector_2 (void) __attribute__ ((signal));
void __vector_2 (void) {
    1ca2:	1f 92       	push	r1
    1ca4:	0f 92       	push	r0
    1ca6:	0f b6       	in	r0, 0x3f	; 63
    1ca8:	0f 92       	push	r0
    1caa:	11 24       	eor	r1, r1
    1cac:	2f 93       	push	r18
    1cae:	3f 93       	push	r19
    1cb0:	4f 93       	push	r20
    1cb2:	5f 93       	push	r21
    1cb4:	6f 93       	push	r22
    1cb6:	7f 93       	push	r23
    1cb8:	8f 93       	push	r24
    1cba:	9f 93       	push	r25
    1cbc:	af 93       	push	r26
    1cbe:	bf 93       	push	r27
    1cc0:	ef 93       	push	r30
    1cc2:	ff 93       	push	r31
    1cc4:	df 93       	push	r29
    1cc6:	cf 93       	push	r28
    1cc8:	cd b7       	in	r28, 0x3d	; 61
    1cca:	de b7       	in	r29, 0x3e	; 62
	ExtInterrupt_INT1Callback();
    1ccc:	e0 91 74 00 	lds	r30, 0x0074
    1cd0:	f0 91 75 00 	lds	r31, 0x0075
    1cd4:	09 95       	icall
}
    1cd6:	cf 91       	pop	r28
    1cd8:	df 91       	pop	r29
    1cda:	ff 91       	pop	r31
    1cdc:	ef 91       	pop	r30
    1cde:	bf 91       	pop	r27
    1ce0:	af 91       	pop	r26
    1ce2:	9f 91       	pop	r25
    1ce4:	8f 91       	pop	r24
    1ce6:	7f 91       	pop	r23
    1ce8:	6f 91       	pop	r22
    1cea:	5f 91       	pop	r21
    1cec:	4f 91       	pop	r20
    1cee:	3f 91       	pop	r19
    1cf0:	2f 91       	pop	r18
    1cf2:	0f 90       	pop	r0
    1cf4:	0f be       	out	0x3f, r0	; 63
    1cf6:	0f 90       	pop	r0
    1cf8:	1f 90       	pop	r1
    1cfa:	18 95       	reti

00001cfc <__vector_3>:
void __vector_3 (void) __attribute__ ((signal));
void __vector_3 (void) {
    1cfc:	1f 92       	push	r1
    1cfe:	0f 92       	push	r0
    1d00:	0f b6       	in	r0, 0x3f	; 63
    1d02:	0f 92       	push	r0
    1d04:	11 24       	eor	r1, r1
    1d06:	2f 93       	push	r18
    1d08:	3f 93       	push	r19
    1d0a:	4f 93       	push	r20
    1d0c:	5f 93       	push	r21
    1d0e:	6f 93       	push	r22
    1d10:	7f 93       	push	r23
    1d12:	8f 93       	push	r24
    1d14:	9f 93       	push	r25
    1d16:	af 93       	push	r26
    1d18:	bf 93       	push	r27
    1d1a:	ef 93       	push	r30
    1d1c:	ff 93       	push	r31
    1d1e:	df 93       	push	r29
    1d20:	cf 93       	push	r28
    1d22:	cd b7       	in	r28, 0x3d	; 61
    1d24:	de b7       	in	r29, 0x3e	; 62
	ExtInterrupt_INT2Callback();
    1d26:	e0 91 78 00 	lds	r30, 0x0078
    1d2a:	f0 91 79 00 	lds	r31, 0x0079
    1d2e:	09 95       	icall
}
    1d30:	cf 91       	pop	r28
    1d32:	df 91       	pop	r29
    1d34:	ff 91       	pop	r31
    1d36:	ef 91       	pop	r30
    1d38:	bf 91       	pop	r27
    1d3a:	af 91       	pop	r26
    1d3c:	9f 91       	pop	r25
    1d3e:	8f 91       	pop	r24
    1d40:	7f 91       	pop	r23
    1d42:	6f 91       	pop	r22
    1d44:	5f 91       	pop	r21
    1d46:	4f 91       	pop	r20
    1d48:	3f 91       	pop	r19
    1d4a:	2f 91       	pop	r18
    1d4c:	0f 90       	pop	r0
    1d4e:	0f be       	out	0x3f, r0	; 63
    1d50:	0f 90       	pop	r0
    1d52:	1f 90       	pop	r1
    1d54:	18 95       	reti

00001d56 <ExtInterrupt_Init>:
//void __vector_1 (void) __attribute__ ((signal));
//void __vector_1 (void) {
//	// TODO
//}

void ExtInterrupt_Init(void) {
    1d56:	df 93       	push	r29
    1d58:	cf 93       	push	r28
    1d5a:	cd b7       	in	r28, 0x3d	; 61
    1d5c:	de b7       	in	r29, 0x3e	; 62

    /*************************** Interrupt 0 Init ***************************/
#ifdef EXT_INTERRUPT_INT0
    /* Interrupt Enable */
#if EXT_INTERRUPT_INT0_INT_ENABLE == EXT_INTERRUPT_ENABLE
    SET_BIT(GICR, GICR_INT0); // External Interrupt Request 0 Enable
    1d5e:	ab e5       	ldi	r26, 0x5B	; 91
    1d60:	b0 e0       	ldi	r27, 0x00	; 0
    1d62:	eb e5       	ldi	r30, 0x5B	; 91
    1d64:	f0 e0       	ldi	r31, 0x00	; 0
    1d66:	80 81       	ld	r24, Z
    1d68:	80 64       	ori	r24, 0x40	; 64
    1d6a:	8c 93       	st	X, r24
    GlobalInterrupt_Enable(); // Global Interrupt Enable
    1d6c:	0e 94 22 0f 	call	0x1e44	; 0x1e44 <GlobalInterrupt_Enable>
    SET_BIT(MCUCR, MCUCR_ISC00);
    SET_BIT(MCUCR, MCUCR_ISC01);
    // TODO
#elif EXT_INTERRUPT_INT0_SENSE == EXT_INTERRUPT_ON_CHANGE
    /* Any logical change on INT0 generates an interrupt request. */
    SET_BIT(MCUCR, MCUCR_ISC00);
    1d70:	a5 e5       	ldi	r26, 0x55	; 85
    1d72:	b0 e0       	ldi	r27, 0x00	; 0
    1d74:	e5 e5       	ldi	r30, 0x55	; 85
    1d76:	f0 e0       	ldi	r31, 0x00	; 0
    1d78:	80 81       	ld	r24, Z
    1d7a:	81 60       	ori	r24, 0x01	; 1
    1d7c:	8c 93       	st	X, r24
    CLR_BIT(MCUCR, MCUCR_ISC01);
    1d7e:	a5 e5       	ldi	r26, 0x55	; 85
    1d80:	b0 e0       	ldi	r27, 0x00	; 0
    1d82:	e5 e5       	ldi	r30, 0x55	; 85
    1d84:	f0 e0       	ldi	r31, 0x00	; 0
    1d86:	80 81       	ld	r24, Z
    1d88:	8d 7f       	andi	r24, 0xFD	; 253
    1d8a:	8c 93       	st	X, r24
    /*************************** Interrupt 1 Init ***************************/

#ifdef EXT_INTERRUPT_INT1
    /* Interrupt Enable */
#if EXT_INTERRUPT_INT1_INT_ENABLE == EXT_INTERRUPT_ENABLE
    SET_BIT(GICR, GICR_INT1); // External Interrupt Request 1 Enable
    1d8c:	ab e5       	ldi	r26, 0x5B	; 91
    1d8e:	b0 e0       	ldi	r27, 0x00	; 0
    1d90:	eb e5       	ldi	r30, 0x5B	; 91
    1d92:	f0 e0       	ldi	r31, 0x00	; 0
    1d94:	80 81       	ld	r24, Z
    1d96:	80 68       	ori	r24, 0x80	; 128
    1d98:	8c 93       	st	X, r24
#elif EXT_INTERRUPT_INT1_SENSE == EXT_INTERRUPT_RISING_EDGE
    SET_BIT(MCUCR, MCUCR_ISC10);
    SET_BIT(MCUCR, MCUCR_ISC11);
    // TODO
#elif EXT_INTERRUPT_INT1_SENSE == EXT_INTERRUPT_ON_CHANGE
    SET_BIT(MCUCR, MCUCR_ISC10);
    1d9a:	a5 e5       	ldi	r26, 0x55	; 85
    1d9c:	b0 e0       	ldi	r27, 0x00	; 0
    1d9e:	e5 e5       	ldi	r30, 0x55	; 85
    1da0:	f0 e0       	ldi	r31, 0x00	; 0
    1da2:	80 81       	ld	r24, Z
    1da4:	84 60       	ori	r24, 0x04	; 4
    1da6:	8c 93       	st	X, r24
    CLR_BIT(MCUCR, MCUCR_ISC11);
    1da8:	a5 e5       	ldi	r26, 0x55	; 85
    1daa:	b0 e0       	ldi	r27, 0x00	; 0
    1dac:	e5 e5       	ldi	r30, 0x55	; 85
    1dae:	f0 e0       	ldi	r31, 0x00	; 0
    1db0:	80 81       	ld	r24, Z
    1db2:	87 7f       	andi	r24, 0xF7	; 247
    1db4:	8c 93       	st	X, r24

    /*************************** Interrupt 2 Init ***************************/
#ifdef EXT_INTERRUPT_INT2
    /* Interrupt Enable */
#if EXT_INTERRUPT_INT2_INT_ENABLE == EXT_INTERRUPT_ENABLE
    SET_BIT(GICR, GICR_INT2); // External Interrupt Request 1 Enable
    1db6:	ab e5       	ldi	r26, 0x5B	; 91
    1db8:	b0 e0       	ldi	r27, 0x00	; 0
    1dba:	eb e5       	ldi	r30, 0x5B	; 91
    1dbc:	f0 e0       	ldi	r31, 0x00	; 0
    1dbe:	80 81       	ld	r24, Z
    1dc0:	80 62       	ori	r24, 0x20	; 32
    1dc2:	8c 93       	st	X, r24
    // TODO
#endif

    /* Sense Control */
#if EXT_INTERRUPT_INT2_SENSE == EXT_INTERRUPT_FALLING_EDGE
    CLR_BIT(MCUCR, MCUCSR_ISC2);
    1dc4:	a5 e5       	ldi	r26, 0x55	; 85
    1dc6:	b0 e0       	ldi	r27, 0x00	; 0
    1dc8:	e5 e5       	ldi	r30, 0x55	; 85
    1dca:	f0 e0       	ldi	r31, 0x00	; 0
    1dcc:	80 81       	ld	r24, Z
    1dce:	8f 7b       	andi	r24, 0xBF	; 191
    1dd0:	8c 93       	st	X, r24
#endif
#endif



}
    1dd2:	cf 91       	pop	r28
    1dd4:	df 91       	pop	r29
    1dd6:	08 95       	ret

00001dd8 <ExtInterrupt_SetINT0Callback>:

void ExtInterrupt_SetINT0Callback (void (*callback) (void)) {
    1dd8:	df 93       	push	r29
    1dda:	cf 93       	push	r28
    1ddc:	00 d0       	rcall	.+0      	; 0x1dde <ExtInterrupt_SetINT0Callback+0x6>
    1dde:	cd b7       	in	r28, 0x3d	; 61
    1de0:	de b7       	in	r29, 0x3e	; 62
    1de2:	9a 83       	std	Y+2, r25	; 0x02
    1de4:	89 83       	std	Y+1, r24	; 0x01
    ExtInterrupt_INT0Callback = callback;
    1de6:	89 81       	ldd	r24, Y+1	; 0x01
    1de8:	9a 81       	ldd	r25, Y+2	; 0x02
    1dea:	90 93 77 00 	sts	0x0077, r25
    1dee:	80 93 76 00 	sts	0x0076, r24
}
    1df2:	0f 90       	pop	r0
    1df4:	0f 90       	pop	r0
    1df6:	cf 91       	pop	r28
    1df8:	df 91       	pop	r29
    1dfa:	08 95       	ret

00001dfc <ExtInterrupt_SetINT1Callback>:

void ExtInterrupt_SetINT1Callback (void (*callback) (void)) {
    1dfc:	df 93       	push	r29
    1dfe:	cf 93       	push	r28
    1e00:	00 d0       	rcall	.+0      	; 0x1e02 <ExtInterrupt_SetINT1Callback+0x6>
    1e02:	cd b7       	in	r28, 0x3d	; 61
    1e04:	de b7       	in	r29, 0x3e	; 62
    1e06:	9a 83       	std	Y+2, r25	; 0x02
    1e08:	89 83       	std	Y+1, r24	; 0x01
    ExtInterrupt_INT1Callback = callback;
    1e0a:	89 81       	ldd	r24, Y+1	; 0x01
    1e0c:	9a 81       	ldd	r25, Y+2	; 0x02
    1e0e:	90 93 75 00 	sts	0x0075, r25
    1e12:	80 93 74 00 	sts	0x0074, r24
   // TODO
}
    1e16:	0f 90       	pop	r0
    1e18:	0f 90       	pop	r0
    1e1a:	cf 91       	pop	r28
    1e1c:	df 91       	pop	r29
    1e1e:	08 95       	ret

00001e20 <ExtInterrupt_SetINT2Callback>:

void ExtInterrupt_SetINT2Callback (void (*callback) (void)) {
    1e20:	df 93       	push	r29
    1e22:	cf 93       	push	r28
    1e24:	00 d0       	rcall	.+0      	; 0x1e26 <ExtInterrupt_SetINT2Callback+0x6>
    1e26:	cd b7       	in	r28, 0x3d	; 61
    1e28:	de b7       	in	r29, 0x3e	; 62
    1e2a:	9a 83       	std	Y+2, r25	; 0x02
    1e2c:	89 83       	std	Y+1, r24	; 0x01
    ExtInterrupt_INT2Callback = callback;
    1e2e:	89 81       	ldd	r24, Y+1	; 0x01
    1e30:	9a 81       	ldd	r25, Y+2	; 0x02
    1e32:	90 93 79 00 	sts	0x0079, r25
    1e36:	80 93 78 00 	sts	0x0078, r24
   // TODO
}
    1e3a:	0f 90       	pop	r0
    1e3c:	0f 90       	pop	r0
    1e3e:	cf 91       	pop	r28
    1e40:	df 91       	pop	r29
    1e42:	08 95       	ret

00001e44 <GlobalInterrupt_Enable>:
#include "std_types.h"
#include "macros.h"
#include "Registers.h"
#include "GlobalInterrupt.h"

void GlobalInterrupt_Enable(void) {
    1e44:	df 93       	push	r29
    1e46:	cf 93       	push	r28
    1e48:	cd b7       	in	r28, 0x3d	; 61
    1e4a:	de b7       	in	r29, 0x3e	; 62
	SET_BIT(SREG, SREG_I);
    1e4c:	af e5       	ldi	r26, 0x5F	; 95
    1e4e:	b0 e0       	ldi	r27, 0x00	; 0
    1e50:	ef e5       	ldi	r30, 0x5F	; 95
    1e52:	f0 e0       	ldi	r31, 0x00	; 0
    1e54:	80 81       	ld	r24, Z
    1e56:	80 68       	ori	r24, 0x80	; 128
    1e58:	8c 93       	st	X, r24
}
    1e5a:	cf 91       	pop	r28
    1e5c:	df 91       	pop	r29
    1e5e:	08 95       	ret

00001e60 <GlobalInterrupt_Disable>:

void GlobalInterrupt_Disable(void) {
    1e60:	df 93       	push	r29
    1e62:	cf 93       	push	r28
    1e64:	cd b7       	in	r28, 0x3d	; 61
    1e66:	de b7       	in	r29, 0x3e	; 62
	CLR_BIT(SREG, SREG_I);
    1e68:	af e5       	ldi	r26, 0x5F	; 95
    1e6a:	b0 e0       	ldi	r27, 0x00	; 0
    1e6c:	ef e5       	ldi	r30, 0x5F	; 95
    1e6e:	f0 e0       	ldi	r31, 0x00	; 0
    1e70:	80 81       	ld	r24, Z
    1e72:	8f 77       	andi	r24, 0x7F	; 127
    1e74:	8c 93       	st	X, r24
}
    1e76:	cf 91       	pop	r28
    1e78:	df 91       	pop	r29
    1e7a:	08 95       	ret

00001e7c <__vector_10>:
void (*Gpt_Timer2_Callback_Ctc)(void);
void (*Gpt_Timer2_Callback_Normal)(void);

/************ ISR ************/
ISR(VECTOR_TIMER0_CTC)
{
    1e7c:	1f 92       	push	r1
    1e7e:	0f 92       	push	r0
    1e80:	0f b6       	in	r0, 0x3f	; 63
    1e82:	0f 92       	push	r0
    1e84:	11 24       	eor	r1, r1
    1e86:	2f 93       	push	r18
    1e88:	3f 93       	push	r19
    1e8a:	4f 93       	push	r20
    1e8c:	5f 93       	push	r21
    1e8e:	6f 93       	push	r22
    1e90:	7f 93       	push	r23
    1e92:	8f 93       	push	r24
    1e94:	9f 93       	push	r25
    1e96:	af 93       	push	r26
    1e98:	bf 93       	push	r27
    1e9a:	ef 93       	push	r30
    1e9c:	ff 93       	push	r31
    1e9e:	df 93       	push	r29
    1ea0:	cf 93       	push	r28
    1ea2:	cd b7       	in	r28, 0x3d	; 61
    1ea4:	de b7       	in	r29, 0x3e	; 62
    Gpt_Timer0_Callback_Ctc();
    1ea6:	e0 91 7a 00 	lds	r30, 0x007A
    1eaa:	f0 91 7b 00 	lds	r31, 0x007B
    1eae:	09 95       	icall
}
    1eb0:	cf 91       	pop	r28
    1eb2:	df 91       	pop	r29
    1eb4:	ff 91       	pop	r31
    1eb6:	ef 91       	pop	r30
    1eb8:	bf 91       	pop	r27
    1eba:	af 91       	pop	r26
    1ebc:	9f 91       	pop	r25
    1ebe:	8f 91       	pop	r24
    1ec0:	7f 91       	pop	r23
    1ec2:	6f 91       	pop	r22
    1ec4:	5f 91       	pop	r21
    1ec6:	4f 91       	pop	r20
    1ec8:	3f 91       	pop	r19
    1eca:	2f 91       	pop	r18
    1ecc:	0f 90       	pop	r0
    1ece:	0f be       	out	0x3f, r0	; 63
    1ed0:	0f 90       	pop	r0
    1ed2:	1f 90       	pop	r1
    1ed4:	18 95       	reti

00001ed6 <__vector_11>:
ISR(VECTOR_TIMER0_NORM)
{
    1ed6:	1f 92       	push	r1
    1ed8:	0f 92       	push	r0
    1eda:	0f b6       	in	r0, 0x3f	; 63
    1edc:	0f 92       	push	r0
    1ede:	11 24       	eor	r1, r1
    1ee0:	2f 93       	push	r18
    1ee2:	3f 93       	push	r19
    1ee4:	4f 93       	push	r20
    1ee6:	5f 93       	push	r21
    1ee8:	6f 93       	push	r22
    1eea:	7f 93       	push	r23
    1eec:	8f 93       	push	r24
    1eee:	9f 93       	push	r25
    1ef0:	af 93       	push	r26
    1ef2:	bf 93       	push	r27
    1ef4:	ef 93       	push	r30
    1ef6:	ff 93       	push	r31
    1ef8:	df 93       	push	r29
    1efa:	cf 93       	push	r28
    1efc:	cd b7       	in	r28, 0x3d	; 61
    1efe:	de b7       	in	r29, 0x3e	; 62
    Gpt_Timer0_Callback_Normal();
    1f00:	e0 91 84 00 	lds	r30, 0x0084
    1f04:	f0 91 85 00 	lds	r31, 0x0085
    1f08:	09 95       	icall
}
    1f0a:	cf 91       	pop	r28
    1f0c:	df 91       	pop	r29
    1f0e:	ff 91       	pop	r31
    1f10:	ef 91       	pop	r30
    1f12:	bf 91       	pop	r27
    1f14:	af 91       	pop	r26
    1f16:	9f 91       	pop	r25
    1f18:	8f 91       	pop	r24
    1f1a:	7f 91       	pop	r23
    1f1c:	6f 91       	pop	r22
    1f1e:	5f 91       	pop	r21
    1f20:	4f 91       	pop	r20
    1f22:	3f 91       	pop	r19
    1f24:	2f 91       	pop	r18
    1f26:	0f 90       	pop	r0
    1f28:	0f be       	out	0x3f, r0	; 63
    1f2a:	0f 90       	pop	r0
    1f2c:	1f 90       	pop	r1
    1f2e:	18 95       	reti

00001f30 <__vector_7>:

ISR(VECTOR_TIMER1A_CTC)
{
    1f30:	1f 92       	push	r1
    1f32:	0f 92       	push	r0
    1f34:	0f b6       	in	r0, 0x3f	; 63
    1f36:	0f 92       	push	r0
    1f38:	11 24       	eor	r1, r1
    1f3a:	2f 93       	push	r18
    1f3c:	3f 93       	push	r19
    1f3e:	4f 93       	push	r20
    1f40:	5f 93       	push	r21
    1f42:	6f 93       	push	r22
    1f44:	7f 93       	push	r23
    1f46:	8f 93       	push	r24
    1f48:	9f 93       	push	r25
    1f4a:	af 93       	push	r26
    1f4c:	bf 93       	push	r27
    1f4e:	ef 93       	push	r30
    1f50:	ff 93       	push	r31
    1f52:	df 93       	push	r29
    1f54:	cf 93       	push	r28
    1f56:	cd b7       	in	r28, 0x3d	; 61
    1f58:	de b7       	in	r29, 0x3e	; 62
    Gpt_Timer1A_Callback_Ctc();
    1f5a:	e0 91 82 00 	lds	r30, 0x0082
    1f5e:	f0 91 83 00 	lds	r31, 0x0083
    1f62:	09 95       	icall
}
    1f64:	cf 91       	pop	r28
    1f66:	df 91       	pop	r29
    1f68:	ff 91       	pop	r31
    1f6a:	ef 91       	pop	r30
    1f6c:	bf 91       	pop	r27
    1f6e:	af 91       	pop	r26
    1f70:	9f 91       	pop	r25
    1f72:	8f 91       	pop	r24
    1f74:	7f 91       	pop	r23
    1f76:	6f 91       	pop	r22
    1f78:	5f 91       	pop	r21
    1f7a:	4f 91       	pop	r20
    1f7c:	3f 91       	pop	r19
    1f7e:	2f 91       	pop	r18
    1f80:	0f 90       	pop	r0
    1f82:	0f be       	out	0x3f, r0	; 63
    1f84:	0f 90       	pop	r0
    1f86:	1f 90       	pop	r1
    1f88:	18 95       	reti

00001f8a <__vector_9>:
ISR(VECTOR_TIMER1_NORM)
{
    1f8a:	1f 92       	push	r1
    1f8c:	0f 92       	push	r0
    1f8e:	0f b6       	in	r0, 0x3f	; 63
    1f90:	0f 92       	push	r0
    1f92:	11 24       	eor	r1, r1
    1f94:	2f 93       	push	r18
    1f96:	3f 93       	push	r19
    1f98:	4f 93       	push	r20
    1f9a:	5f 93       	push	r21
    1f9c:	6f 93       	push	r22
    1f9e:	7f 93       	push	r23
    1fa0:	8f 93       	push	r24
    1fa2:	9f 93       	push	r25
    1fa4:	af 93       	push	r26
    1fa6:	bf 93       	push	r27
    1fa8:	ef 93       	push	r30
    1faa:	ff 93       	push	r31
    1fac:	df 93       	push	r29
    1fae:	cf 93       	push	r28
    1fb0:	cd b7       	in	r28, 0x3d	; 61
    1fb2:	de b7       	in	r29, 0x3e	; 62
    Gpt_Timer1_Callback_Normal();
    1fb4:	e0 91 86 00 	lds	r30, 0x0086
    1fb8:	f0 91 87 00 	lds	r31, 0x0087
    1fbc:	09 95       	icall
}
    1fbe:	cf 91       	pop	r28
    1fc0:	df 91       	pop	r29
    1fc2:	ff 91       	pop	r31
    1fc4:	ef 91       	pop	r30
    1fc6:	bf 91       	pop	r27
    1fc8:	af 91       	pop	r26
    1fca:	9f 91       	pop	r25
    1fcc:	8f 91       	pop	r24
    1fce:	7f 91       	pop	r23
    1fd0:	6f 91       	pop	r22
    1fd2:	5f 91       	pop	r21
    1fd4:	4f 91       	pop	r20
    1fd6:	3f 91       	pop	r19
    1fd8:	2f 91       	pop	r18
    1fda:	0f 90       	pop	r0
    1fdc:	0f be       	out	0x3f, r0	; 63
    1fde:	0f 90       	pop	r0
    1fe0:	1f 90       	pop	r1
    1fe2:	18 95       	reti

00001fe4 <__vector_8>:

ISR(VECTOR_TIMER1B_CTC)
{
    1fe4:	1f 92       	push	r1
    1fe6:	0f 92       	push	r0
    1fe8:	0f b6       	in	r0, 0x3f	; 63
    1fea:	0f 92       	push	r0
    1fec:	11 24       	eor	r1, r1
    1fee:	2f 93       	push	r18
    1ff0:	3f 93       	push	r19
    1ff2:	4f 93       	push	r20
    1ff4:	5f 93       	push	r21
    1ff6:	6f 93       	push	r22
    1ff8:	7f 93       	push	r23
    1ffa:	8f 93       	push	r24
    1ffc:	9f 93       	push	r25
    1ffe:	af 93       	push	r26
    2000:	bf 93       	push	r27
    2002:	ef 93       	push	r30
    2004:	ff 93       	push	r31
    2006:	df 93       	push	r29
    2008:	cf 93       	push	r28
    200a:	cd b7       	in	r28, 0x3d	; 61
    200c:	de b7       	in	r29, 0x3e	; 62
    Gpt_Timer1B_Callback_Ctc();
    200e:	e0 91 7e 00 	lds	r30, 0x007E
    2012:	f0 91 7f 00 	lds	r31, 0x007F
    2016:	09 95       	icall
}
    2018:	cf 91       	pop	r28
    201a:	df 91       	pop	r29
    201c:	ff 91       	pop	r31
    201e:	ef 91       	pop	r30
    2020:	bf 91       	pop	r27
    2022:	af 91       	pop	r26
    2024:	9f 91       	pop	r25
    2026:	8f 91       	pop	r24
    2028:	7f 91       	pop	r23
    202a:	6f 91       	pop	r22
    202c:	5f 91       	pop	r21
    202e:	4f 91       	pop	r20
    2030:	3f 91       	pop	r19
    2032:	2f 91       	pop	r18
    2034:	0f 90       	pop	r0
    2036:	0f be       	out	0x3f, r0	; 63
    2038:	0f 90       	pop	r0
    203a:	1f 90       	pop	r1
    203c:	18 95       	reti

0000203e <__vector_4>:


ISR(VECTOR_TIMER2_CTC)
{
    203e:	1f 92       	push	r1
    2040:	0f 92       	push	r0
    2042:	0f b6       	in	r0, 0x3f	; 63
    2044:	0f 92       	push	r0
    2046:	11 24       	eor	r1, r1
    2048:	2f 93       	push	r18
    204a:	3f 93       	push	r19
    204c:	4f 93       	push	r20
    204e:	5f 93       	push	r21
    2050:	6f 93       	push	r22
    2052:	7f 93       	push	r23
    2054:	8f 93       	push	r24
    2056:	9f 93       	push	r25
    2058:	af 93       	push	r26
    205a:	bf 93       	push	r27
    205c:	ef 93       	push	r30
    205e:	ff 93       	push	r31
    2060:	df 93       	push	r29
    2062:	cf 93       	push	r28
    2064:	cd b7       	in	r28, 0x3d	; 61
    2066:	de b7       	in	r29, 0x3e	; 62
    Gpt_Timer2_Callback_Ctc();
    2068:	e0 91 7c 00 	lds	r30, 0x007C
    206c:	f0 91 7d 00 	lds	r31, 0x007D
    2070:	09 95       	icall
}
    2072:	cf 91       	pop	r28
    2074:	df 91       	pop	r29
    2076:	ff 91       	pop	r31
    2078:	ef 91       	pop	r30
    207a:	bf 91       	pop	r27
    207c:	af 91       	pop	r26
    207e:	9f 91       	pop	r25
    2080:	8f 91       	pop	r24
    2082:	7f 91       	pop	r23
    2084:	6f 91       	pop	r22
    2086:	5f 91       	pop	r21
    2088:	4f 91       	pop	r20
    208a:	3f 91       	pop	r19
    208c:	2f 91       	pop	r18
    208e:	0f 90       	pop	r0
    2090:	0f be       	out	0x3f, r0	; 63
    2092:	0f 90       	pop	r0
    2094:	1f 90       	pop	r1
    2096:	18 95       	reti

00002098 <__vector_5>:
ISR(VECTOR_TIMER2_NORM)
{
    2098:	1f 92       	push	r1
    209a:	0f 92       	push	r0
    209c:	0f b6       	in	r0, 0x3f	; 63
    209e:	0f 92       	push	r0
    20a0:	11 24       	eor	r1, r1
    20a2:	2f 93       	push	r18
    20a4:	3f 93       	push	r19
    20a6:	4f 93       	push	r20
    20a8:	5f 93       	push	r21
    20aa:	6f 93       	push	r22
    20ac:	7f 93       	push	r23
    20ae:	8f 93       	push	r24
    20b0:	9f 93       	push	r25
    20b2:	af 93       	push	r26
    20b4:	bf 93       	push	r27
    20b6:	ef 93       	push	r30
    20b8:	ff 93       	push	r31
    20ba:	df 93       	push	r29
    20bc:	cf 93       	push	r28
    20be:	cd b7       	in	r28, 0x3d	; 61
    20c0:	de b7       	in	r29, 0x3e	; 62
    Gpt_Timer2_Callback_Normal();
    20c2:	e0 91 80 00 	lds	r30, 0x0080
    20c6:	f0 91 81 00 	lds	r31, 0x0081
    20ca:	09 95       	icall
}
    20cc:	cf 91       	pop	r28
    20ce:	df 91       	pop	r29
    20d0:	ff 91       	pop	r31
    20d2:	ef 91       	pop	r30
    20d4:	bf 91       	pop	r27
    20d6:	af 91       	pop	r26
    20d8:	9f 91       	pop	r25
    20da:	8f 91       	pop	r24
    20dc:	7f 91       	pop	r23
    20de:	6f 91       	pop	r22
    20e0:	5f 91       	pop	r21
    20e2:	4f 91       	pop	r20
    20e4:	3f 91       	pop	r19
    20e6:	2f 91       	pop	r18
    20e8:	0f 90       	pop	r0
    20ea:	0f be       	out	0x3f, r0	; 63
    20ec:	0f 90       	pop	r0
    20ee:	1f 90       	pop	r1
    20f0:	18 95       	reti

000020f2 <Gpt_Init>:



Gpt_ReturnType Gpt_Init(Gpt_ConfigType *config)
{
    20f2:	df 93       	push	r29
    20f4:	cf 93       	push	r28
    20f6:	cd b7       	in	r28, 0x3d	; 61
    20f8:	de b7       	in	r29, 0x3e	; 62
    20fa:	65 97       	sbiw	r28, 0x15	; 21
    20fc:	0f b6       	in	r0, 0x3f	; 63
    20fe:	f8 94       	cli
    2100:	de bf       	out	0x3e, r29	; 62
    2102:	0f be       	out	0x3f, r0	; 63
    2104:	cd bf       	out	0x3d, r28	; 61
    2106:	9b 83       	std	Y+3, r25	; 0x03
    2108:	8a 83       	std	Y+2, r24	; 0x02
    Gpt_ReturnType returnValue = GPT_OK;
    210a:	81 e0       	ldi	r24, 0x01	; 1
    210c:	89 83       	std	Y+1, r24	; 0x01

    switch (config->channel)
    210e:	ea 81       	ldd	r30, Y+2	; 0x02
    2110:	fb 81       	ldd	r31, Y+3	; 0x03
    2112:	80 81       	ld	r24, Z
    2114:	28 2f       	mov	r18, r24
    2116:	30 e0       	ldi	r19, 0x00	; 0
    2118:	3d 8b       	std	Y+21, r19	; 0x15
    211a:	2c 8b       	std	Y+20, r18	; 0x14
    211c:	8c 89       	ldd	r24, Y+20	; 0x14
    211e:	9d 89       	ldd	r25, Y+21	; 0x15
    2120:	81 30       	cpi	r24, 0x01	; 1
    2122:	91 05       	cpc	r25, r1
    2124:	09 f4       	brne	.+2      	; 0x2128 <Gpt_Init+0x36>
    2126:	ba c1       	rjmp	.+884    	; 0x249c <Gpt_Init+0x3aa>
    2128:	2c 89       	ldd	r18, Y+20	; 0x14
    212a:	3d 89       	ldd	r19, Y+21	; 0x15
    212c:	22 30       	cpi	r18, 0x02	; 2
    212e:	31 05       	cpc	r19, r1
    2130:	2c f4       	brge	.+10     	; 0x213c <Gpt_Init+0x4a>
    2132:	8c 89       	ldd	r24, Y+20	; 0x14
    2134:	9d 89       	ldd	r25, Y+21	; 0x15
    2136:	00 97       	sbiw	r24, 0x00	; 0
    2138:	71 f0       	breq	.+28     	; 0x2156 <Gpt_Init+0x64>
    213a:	74 c6       	rjmp	.+3304   	; 0x2e24 <Gpt_Init+0xd32>
    213c:	2c 89       	ldd	r18, Y+20	; 0x14
    213e:	3d 89       	ldd	r19, Y+21	; 0x15
    2140:	22 30       	cpi	r18, 0x02	; 2
    2142:	31 05       	cpc	r19, r1
    2144:	09 f4       	brne	.+2      	; 0x2148 <Gpt_Init+0x56>
    2146:	63 c3       	rjmp	.+1734   	; 0x280e <Gpt_Init+0x71c>
    2148:	8c 89       	ldd	r24, Y+20	; 0x14
    214a:	9d 89       	ldd	r25, Y+21	; 0x15
    214c:	83 30       	cpi	r24, 0x03	; 3
    214e:	91 05       	cpc	r25, r1
    2150:	09 f4       	brne	.+2      	; 0x2154 <Gpt_Init+0x62>
    2152:	f4 c4       	rjmp	.+2536   	; 0x2b3c <Gpt_Init+0xa4a>
    2154:	67 c6       	rjmp	.+3278   	; 0x2e24 <Gpt_Init+0xd32>
    {

    case GPT_CHANNEL_TIMER0:
        /*Waveform Generation Mode*/
        if (config->mode == GPT_MODE_NORMAL)
    2156:	ea 81       	ldd	r30, Y+2	; 0x02
    2158:	fb 81       	ldd	r31, Y+3	; 0x03
    215a:	81 81       	ldd	r24, Z+1	; 0x01
    215c:	88 23       	and	r24, r24
    215e:	79 f4       	brne	.+30     	; 0x217e <Gpt_Init+0x8c>
        {
            CLR_BIT(TCCR0, TCCR0_WGM00);
    2160:	a3 e5       	ldi	r26, 0x53	; 83
    2162:	b0 e0       	ldi	r27, 0x00	; 0
    2164:	e3 e5       	ldi	r30, 0x53	; 83
    2166:	f0 e0       	ldi	r31, 0x00	; 0
    2168:	80 81       	ld	r24, Z
    216a:	8f 7b       	andi	r24, 0xBF	; 191
    216c:	8c 93       	st	X, r24
            CLR_BIT(TCCR0, TCCR0_WGM01);
    216e:	a3 e5       	ldi	r26, 0x53	; 83
    2170:	b0 e0       	ldi	r27, 0x00	; 0
    2172:	e3 e5       	ldi	r30, 0x53	; 83
    2174:	f0 e0       	ldi	r31, 0x00	; 0
    2176:	80 81       	ld	r24, Z
    2178:	87 7f       	andi	r24, 0xF7	; 247
    217a:	8c 93       	st	X, r24
    217c:	3d c0       	rjmp	.+122    	; 0x21f8 <Gpt_Init+0x106>
        }
        else if (config->mode == GPT_MODE_CTC)
    217e:	ea 81       	ldd	r30, Y+2	; 0x02
    2180:	fb 81       	ldd	r31, Y+3	; 0x03
    2182:	81 81       	ldd	r24, Z+1	; 0x01
    2184:	81 30       	cpi	r24, 0x01	; 1
    2186:	79 f4       	brne	.+30     	; 0x21a6 <Gpt_Init+0xb4>
        {
            CLR_BIT(TCCR0, TCCR0_WGM00);
    2188:	a3 e5       	ldi	r26, 0x53	; 83
    218a:	b0 e0       	ldi	r27, 0x00	; 0
    218c:	e3 e5       	ldi	r30, 0x53	; 83
    218e:	f0 e0       	ldi	r31, 0x00	; 0
    2190:	80 81       	ld	r24, Z
    2192:	8f 7b       	andi	r24, 0xBF	; 191
    2194:	8c 93       	st	X, r24
            SET_BIT(TCCR0, TCCR0_WGM01);
    2196:	a3 e5       	ldi	r26, 0x53	; 83
    2198:	b0 e0       	ldi	r27, 0x00	; 0
    219a:	e3 e5       	ldi	r30, 0x53	; 83
    219c:	f0 e0       	ldi	r31, 0x00	; 0
    219e:	80 81       	ld	r24, Z
    21a0:	88 60       	ori	r24, 0x08	; 8
    21a2:	8c 93       	st	X, r24
    21a4:	29 c0       	rjmp	.+82     	; 0x21f8 <Gpt_Init+0x106>
        }
        else if (config->mode == SPT_MODE_Fast_PWM)
    21a6:	ea 81       	ldd	r30, Y+2	; 0x02
    21a8:	fb 81       	ldd	r31, Y+3	; 0x03
    21aa:	81 81       	ldd	r24, Z+1	; 0x01
    21ac:	83 30       	cpi	r24, 0x03	; 3
    21ae:	79 f4       	brne	.+30     	; 0x21ce <Gpt_Init+0xdc>
        {
            SET_BIT(TCCR0, TCCR0_WGM00);
    21b0:	a3 e5       	ldi	r26, 0x53	; 83
    21b2:	b0 e0       	ldi	r27, 0x00	; 0
    21b4:	e3 e5       	ldi	r30, 0x53	; 83
    21b6:	f0 e0       	ldi	r31, 0x00	; 0
    21b8:	80 81       	ld	r24, Z
    21ba:	80 64       	ori	r24, 0x40	; 64
    21bc:	8c 93       	st	X, r24
            CLR_BIT(TCCR0, TCCR0_WGM01);
    21be:	a3 e5       	ldi	r26, 0x53	; 83
    21c0:	b0 e0       	ldi	r27, 0x00	; 0
    21c2:	e3 e5       	ldi	r30, 0x53	; 83
    21c4:	f0 e0       	ldi	r31, 0x00	; 0
    21c6:	80 81       	ld	r24, Z
    21c8:	87 7f       	andi	r24, 0xF7	; 247
    21ca:	8c 93       	st	X, r24
    21cc:	15 c0       	rjmp	.+42     	; 0x21f8 <Gpt_Init+0x106>
        }
        else if (config->mode == SPT_MODE_Fast_PWM)
    21ce:	ea 81       	ldd	r30, Y+2	; 0x02
    21d0:	fb 81       	ldd	r31, Y+3	; 0x03
    21d2:	81 81       	ldd	r24, Z+1	; 0x01
    21d4:	83 30       	cpi	r24, 0x03	; 3
    21d6:	79 f4       	brne	.+30     	; 0x21f6 <Gpt_Init+0x104>
        {
            SET_BIT(TCCR0, TCCR0_WGM00);
    21d8:	a3 e5       	ldi	r26, 0x53	; 83
    21da:	b0 e0       	ldi	r27, 0x00	; 0
    21dc:	e3 e5       	ldi	r30, 0x53	; 83
    21de:	f0 e0       	ldi	r31, 0x00	; 0
    21e0:	80 81       	ld	r24, Z
    21e2:	80 64       	ori	r24, 0x40	; 64
    21e4:	8c 93       	st	X, r24
            SET_BIT(TCCR0, TCCR0_WGM01);
    21e6:	a3 e5       	ldi	r26, 0x53	; 83
    21e8:	b0 e0       	ldi	r27, 0x00	; 0
    21ea:	e3 e5       	ldi	r30, 0x53	; 83
    21ec:	f0 e0       	ldi	r31, 0x00	; 0
    21ee:	80 81       	ld	r24, Z
    21f0:	88 60       	ori	r24, 0x08	; 8
    21f2:	8c 93       	st	X, r24
    21f4:	01 c0       	rjmp	.+2      	; 0x21f8 <Gpt_Init+0x106>
        }
        else
        {
            returnValue = GPT_ERROR;
    21f6:	19 82       	std	Y+1, r1	; 0x01
        }

        /*Compare Match Output Mode*/
        switch (config->output)
    21f8:	ea 81       	ldd	r30, Y+2	; 0x02
    21fa:	fb 81       	ldd	r31, Y+3	; 0x03
    21fc:	82 81       	ldd	r24, Z+2	; 0x02
    21fe:	28 2f       	mov	r18, r24
    2200:	30 e0       	ldi	r19, 0x00	; 0
    2202:	3b 8b       	std	Y+19, r19	; 0x13
    2204:	2a 8b       	std	Y+18, r18	; 0x12
    2206:	8a 89       	ldd	r24, Y+18	; 0x12
    2208:	9b 89       	ldd	r25, Y+19	; 0x13
    220a:	81 30       	cpi	r24, 0x01	; 1
    220c:	91 05       	cpc	r25, r1
    220e:	21 f1       	breq	.+72     	; 0x2258 <Gpt_Init+0x166>
    2210:	2a 89       	ldd	r18, Y+18	; 0x12
    2212:	3b 89       	ldd	r19, Y+19	; 0x13
    2214:	22 30       	cpi	r18, 0x02	; 2
    2216:	31 05       	cpc	r19, r1
    2218:	2c f4       	brge	.+10     	; 0x2224 <Gpt_Init+0x132>
    221a:	8a 89       	ldd	r24, Y+18	; 0x12
    221c:	9b 89       	ldd	r25, Y+19	; 0x13
    221e:	00 97       	sbiw	r24, 0x00	; 0
    2220:	61 f0       	breq	.+24     	; 0x223a <Gpt_Init+0x148>
    2222:	47 c0       	rjmp	.+142    	; 0x22b2 <Gpt_Init+0x1c0>
    2224:	2a 89       	ldd	r18, Y+18	; 0x12
    2226:	3b 89       	ldd	r19, Y+19	; 0x13
    2228:	22 30       	cpi	r18, 0x02	; 2
    222a:	31 05       	cpc	r19, r1
    222c:	21 f1       	breq	.+72     	; 0x2276 <Gpt_Init+0x184>
    222e:	8a 89       	ldd	r24, Y+18	; 0x12
    2230:	9b 89       	ldd	r25, Y+19	; 0x13
    2232:	83 30       	cpi	r24, 0x03	; 3
    2234:	91 05       	cpc	r25, r1
    2236:	71 f1       	breq	.+92     	; 0x2294 <Gpt_Init+0x1a2>
    2238:	3c c0       	rjmp	.+120    	; 0x22b2 <Gpt_Init+0x1c0>
        {
        case GPT_OUTPUT_NORMAL:
            CLR_BIT(TCCR0, TCCR0_COM00);
    223a:	a3 e5       	ldi	r26, 0x53	; 83
    223c:	b0 e0       	ldi	r27, 0x00	; 0
    223e:	e3 e5       	ldi	r30, 0x53	; 83
    2240:	f0 e0       	ldi	r31, 0x00	; 0
    2242:	80 81       	ld	r24, Z
    2244:	8f 7e       	andi	r24, 0xEF	; 239
    2246:	8c 93       	st	X, r24
            CLR_BIT(TCCR0, TCCR0_COM01);
    2248:	a3 e5       	ldi	r26, 0x53	; 83
    224a:	b0 e0       	ldi	r27, 0x00	; 0
    224c:	e3 e5       	ldi	r30, 0x53	; 83
    224e:	f0 e0       	ldi	r31, 0x00	; 0
    2250:	80 81       	ld	r24, Z
    2252:	8f 7d       	andi	r24, 0xDF	; 223
    2254:	8c 93       	st	X, r24
    2256:	2e c0       	rjmp	.+92     	; 0x22b4 <Gpt_Init+0x1c2>
            break;
        case GPT_OUTPUT_TOGGLE:
            SET_BIT(TCCR0, TCCR0_COM00);
    2258:	a3 e5       	ldi	r26, 0x53	; 83
    225a:	b0 e0       	ldi	r27, 0x00	; 0
    225c:	e3 e5       	ldi	r30, 0x53	; 83
    225e:	f0 e0       	ldi	r31, 0x00	; 0
    2260:	80 81       	ld	r24, Z
    2262:	80 61       	ori	r24, 0x10	; 16
    2264:	8c 93       	st	X, r24
            CLR_BIT(TCCR0, TCCR0_COM01);
    2266:	a3 e5       	ldi	r26, 0x53	; 83
    2268:	b0 e0       	ldi	r27, 0x00	; 0
    226a:	e3 e5       	ldi	r30, 0x53	; 83
    226c:	f0 e0       	ldi	r31, 0x00	; 0
    226e:	80 81       	ld	r24, Z
    2270:	8f 7d       	andi	r24, 0xDF	; 223
    2272:	8c 93       	st	X, r24
    2274:	1f c0       	rjmp	.+62     	; 0x22b4 <Gpt_Init+0x1c2>
            // TODO
            break;
        case GPT_OUTPUT_SET:
            SET_BIT(TCCR0, TCCR0_COM00);
    2276:	a3 e5       	ldi	r26, 0x53	; 83
    2278:	b0 e0       	ldi	r27, 0x00	; 0
    227a:	e3 e5       	ldi	r30, 0x53	; 83
    227c:	f0 e0       	ldi	r31, 0x00	; 0
    227e:	80 81       	ld	r24, Z
    2280:	80 61       	ori	r24, 0x10	; 16
    2282:	8c 93       	st	X, r24
            SET_BIT(TCCR0, TCCR0_COM01);
    2284:	a3 e5       	ldi	r26, 0x53	; 83
    2286:	b0 e0       	ldi	r27, 0x00	; 0
    2288:	e3 e5       	ldi	r30, 0x53	; 83
    228a:	f0 e0       	ldi	r31, 0x00	; 0
    228c:	80 81       	ld	r24, Z
    228e:	80 62       	ori	r24, 0x20	; 32
    2290:	8c 93       	st	X, r24
    2292:	10 c0       	rjmp	.+32     	; 0x22b4 <Gpt_Init+0x1c2>
            // TODO
            break;
        case GPT_OUTPUT_CLEAR:
            CLR_BIT(TCCR0, TCCR0_COM00);
    2294:	a3 e5       	ldi	r26, 0x53	; 83
    2296:	b0 e0       	ldi	r27, 0x00	; 0
    2298:	e3 e5       	ldi	r30, 0x53	; 83
    229a:	f0 e0       	ldi	r31, 0x00	; 0
    229c:	80 81       	ld	r24, Z
    229e:	8f 7e       	andi	r24, 0xEF	; 239
    22a0:	8c 93       	st	X, r24
            SET_BIT(TCCR0, TCCR0_COM01);
    22a2:	a3 e5       	ldi	r26, 0x53	; 83
    22a4:	b0 e0       	ldi	r27, 0x00	; 0
    22a6:	e3 e5       	ldi	r30, 0x53	; 83
    22a8:	f0 e0       	ldi	r31, 0x00	; 0
    22aa:	80 81       	ld	r24, Z
    22ac:	80 62       	ori	r24, 0x20	; 32
    22ae:	8c 93       	st	X, r24
    22b0:	01 c0       	rjmp	.+2      	; 0x22b4 <Gpt_Init+0x1c2>
            // TODO
            break;
        default:
            returnValue = GPT_ERROR;
    22b2:	19 82       	std	Y+1, r1	; 0x01
            break;
        }

        /*Clock Select*/
        switch (config->prescaler)
    22b4:	ea 81       	ldd	r30, Y+2	; 0x02
    22b6:	fb 81       	ldd	r31, Y+3	; 0x03
    22b8:	83 81       	ldd	r24, Z+3	; 0x03
    22ba:	28 2f       	mov	r18, r24
    22bc:	30 e0       	ldi	r19, 0x00	; 0
    22be:	39 8b       	std	Y+17, r19	; 0x11
    22c0:	28 8b       	std	Y+16, r18	; 0x10
    22c2:	88 89       	ldd	r24, Y+16	; 0x10
    22c4:	99 89       	ldd	r25, Y+17	; 0x11
    22c6:	84 30       	cpi	r24, 0x04	; 4
    22c8:	91 05       	cpc	r25, r1
    22ca:	09 f4       	brne	.+2      	; 0x22ce <Gpt_Init+0x1dc>
    22cc:	77 c0       	rjmp	.+238    	; 0x23bc <Gpt_Init+0x2ca>
    22ce:	28 89       	ldd	r18, Y+16	; 0x10
    22d0:	39 89       	ldd	r19, Y+17	; 0x11
    22d2:	25 30       	cpi	r18, 0x05	; 5
    22d4:	31 05       	cpc	r19, r1
    22d6:	8c f4       	brge	.+34     	; 0x22fa <Gpt_Init+0x208>
    22d8:	88 89       	ldd	r24, Y+16	; 0x10
    22da:	99 89       	ldd	r25, Y+17	; 0x11
    22dc:	81 30       	cpi	r24, 0x01	; 1
    22de:	91 05       	cpc	r25, r1
    22e0:	09 f4       	brne	.+2      	; 0x22e4 <Gpt_Init+0x1f2>
    22e2:	40 c0       	rjmp	.+128    	; 0x2364 <Gpt_Init+0x272>
    22e4:	28 89       	ldd	r18, Y+16	; 0x10
    22e6:	39 89       	ldd	r19, Y+17	; 0x11
    22e8:	22 30       	cpi	r18, 0x02	; 2
    22ea:	31 05       	cpc	r19, r1
    22ec:	09 f4       	brne	.+2      	; 0x22f0 <Gpt_Init+0x1fe>
    22ee:	50 c0       	rjmp	.+160    	; 0x2390 <Gpt_Init+0x29e>
    22f0:	88 89       	ldd	r24, Y+16	; 0x10
    22f2:	99 89       	ldd	r25, Y+17	; 0x11
    22f4:	00 97       	sbiw	r24, 0x00	; 0
    22f6:	01 f1       	breq	.+64     	; 0x2338 <Gpt_Init+0x246>
    22f8:	cf c0       	rjmp	.+414    	; 0x2498 <Gpt_Init+0x3a6>
    22fa:	28 89       	ldd	r18, Y+16	; 0x10
    22fc:	39 89       	ldd	r19, Y+17	; 0x11
    22fe:	27 30       	cpi	r18, 0x07	; 7
    2300:	31 05       	cpc	r19, r1
    2302:	09 f4       	brne	.+2      	; 0x2306 <Gpt_Init+0x214>
    2304:	87 c0       	rjmp	.+270    	; 0x2414 <Gpt_Init+0x322>
    2306:	88 89       	ldd	r24, Y+16	; 0x10
    2308:	99 89       	ldd	r25, Y+17	; 0x11
    230a:	88 30       	cpi	r24, 0x08	; 8
    230c:	91 05       	cpc	r25, r1
    230e:	3c f4       	brge	.+14     	; 0x231e <Gpt_Init+0x22c>
    2310:	28 89       	ldd	r18, Y+16	; 0x10
    2312:	39 89       	ldd	r19, Y+17	; 0x11
    2314:	26 30       	cpi	r18, 0x06	; 6
    2316:	31 05       	cpc	r19, r1
    2318:	09 f4       	brne	.+2      	; 0x231c <Gpt_Init+0x22a>
    231a:	66 c0       	rjmp	.+204    	; 0x23e8 <Gpt_Init+0x2f6>
    231c:	bd c0       	rjmp	.+378    	; 0x2498 <Gpt_Init+0x3a6>
    231e:	88 89       	ldd	r24, Y+16	; 0x10
    2320:	99 89       	ldd	r25, Y+17	; 0x11
    2322:	88 30       	cpi	r24, 0x08	; 8
    2324:	91 05       	cpc	r25, r1
    2326:	09 f4       	brne	.+2      	; 0x232a <Gpt_Init+0x238>
    2328:	8b c0       	rjmp	.+278    	; 0x2440 <Gpt_Init+0x34e>
    232a:	28 89       	ldd	r18, Y+16	; 0x10
    232c:	39 89       	ldd	r19, Y+17	; 0x11
    232e:	29 30       	cpi	r18, 0x09	; 9
    2330:	31 05       	cpc	r19, r1
    2332:	09 f4       	brne	.+2      	; 0x2336 <Gpt_Init+0x244>
    2334:	9b c0       	rjmp	.+310    	; 0x246c <Gpt_Init+0x37a>
    2336:	b0 c0       	rjmp	.+352    	; 0x2498 <Gpt_Init+0x3a6>
        {
        case GPT_PRESCALER_0:
            CLR_BIT(TCCR0, TCCR0_CS00);
    2338:	a3 e5       	ldi	r26, 0x53	; 83
    233a:	b0 e0       	ldi	r27, 0x00	; 0
    233c:	e3 e5       	ldi	r30, 0x53	; 83
    233e:	f0 e0       	ldi	r31, 0x00	; 0
    2340:	80 81       	ld	r24, Z
    2342:	8e 7f       	andi	r24, 0xFE	; 254
    2344:	8c 93       	st	X, r24
            CLR_BIT(TCCR0, TCCR0_CS01);
    2346:	a3 e5       	ldi	r26, 0x53	; 83
    2348:	b0 e0       	ldi	r27, 0x00	; 0
    234a:	e3 e5       	ldi	r30, 0x53	; 83
    234c:	f0 e0       	ldi	r31, 0x00	; 0
    234e:	80 81       	ld	r24, Z
    2350:	8d 7f       	andi	r24, 0xFD	; 253
    2352:	8c 93       	st	X, r24
            CLR_BIT(TCCR0, TCCR0_CS02);
    2354:	a3 e5       	ldi	r26, 0x53	; 83
    2356:	b0 e0       	ldi	r27, 0x00	; 0
    2358:	e3 e5       	ldi	r30, 0x53	; 83
    235a:	f0 e0       	ldi	r31, 0x00	; 0
    235c:	80 81       	ld	r24, Z
    235e:	8b 7f       	andi	r24, 0xFB	; 251
    2360:	8c 93       	st	X, r24
    2362:	61 c5       	rjmp	.+2754   	; 0x2e26 <Gpt_Init+0xd34>
            break;
        case GPT_PRESCALER_1:
            SET_BIT(TCCR0, TCCR0_CS00);
    2364:	a3 e5       	ldi	r26, 0x53	; 83
    2366:	b0 e0       	ldi	r27, 0x00	; 0
    2368:	e3 e5       	ldi	r30, 0x53	; 83
    236a:	f0 e0       	ldi	r31, 0x00	; 0
    236c:	80 81       	ld	r24, Z
    236e:	81 60       	ori	r24, 0x01	; 1
    2370:	8c 93       	st	X, r24
            CLR_BIT(TCCR0, TCCR0_CS01);
    2372:	a3 e5       	ldi	r26, 0x53	; 83
    2374:	b0 e0       	ldi	r27, 0x00	; 0
    2376:	e3 e5       	ldi	r30, 0x53	; 83
    2378:	f0 e0       	ldi	r31, 0x00	; 0
    237a:	80 81       	ld	r24, Z
    237c:	8d 7f       	andi	r24, 0xFD	; 253
    237e:	8c 93       	st	X, r24
            CLR_BIT(TCCR0, TCCR0_CS02);
    2380:	a3 e5       	ldi	r26, 0x53	; 83
    2382:	b0 e0       	ldi	r27, 0x00	; 0
    2384:	e3 e5       	ldi	r30, 0x53	; 83
    2386:	f0 e0       	ldi	r31, 0x00	; 0
    2388:	80 81       	ld	r24, Z
    238a:	8b 7f       	andi	r24, 0xFB	; 251
    238c:	8c 93       	st	X, r24
    238e:	4b c5       	rjmp	.+2710   	; 0x2e26 <Gpt_Init+0xd34>
            break;
        case GPT_PRESCALER_8:
            CLR_BIT(TCCR0, TCCR0_CS00);
    2390:	a3 e5       	ldi	r26, 0x53	; 83
    2392:	b0 e0       	ldi	r27, 0x00	; 0
    2394:	e3 e5       	ldi	r30, 0x53	; 83
    2396:	f0 e0       	ldi	r31, 0x00	; 0
    2398:	80 81       	ld	r24, Z
    239a:	8e 7f       	andi	r24, 0xFE	; 254
    239c:	8c 93       	st	X, r24
            SET_BIT(TCCR0, TCCR0_CS01);
    239e:	a3 e5       	ldi	r26, 0x53	; 83
    23a0:	b0 e0       	ldi	r27, 0x00	; 0
    23a2:	e3 e5       	ldi	r30, 0x53	; 83
    23a4:	f0 e0       	ldi	r31, 0x00	; 0
    23a6:	80 81       	ld	r24, Z
    23a8:	82 60       	ori	r24, 0x02	; 2
    23aa:	8c 93       	st	X, r24
            CLR_BIT(TCCR0, TCCR0_CS02);
    23ac:	a3 e5       	ldi	r26, 0x53	; 83
    23ae:	b0 e0       	ldi	r27, 0x00	; 0
    23b0:	e3 e5       	ldi	r30, 0x53	; 83
    23b2:	f0 e0       	ldi	r31, 0x00	; 0
    23b4:	80 81       	ld	r24, Z
    23b6:	8b 7f       	andi	r24, 0xFB	; 251
    23b8:	8c 93       	st	X, r24
    23ba:	35 c5       	rjmp	.+2666   	; 0x2e26 <Gpt_Init+0xd34>
            break;
        case GPT_PRESCALER_64:
            SET_BIT(TCCR0, TCCR0_CS00);
    23bc:	a3 e5       	ldi	r26, 0x53	; 83
    23be:	b0 e0       	ldi	r27, 0x00	; 0
    23c0:	e3 e5       	ldi	r30, 0x53	; 83
    23c2:	f0 e0       	ldi	r31, 0x00	; 0
    23c4:	80 81       	ld	r24, Z
    23c6:	81 60       	ori	r24, 0x01	; 1
    23c8:	8c 93       	st	X, r24
            SET_BIT(TCCR0, TCCR0_CS01);
    23ca:	a3 e5       	ldi	r26, 0x53	; 83
    23cc:	b0 e0       	ldi	r27, 0x00	; 0
    23ce:	e3 e5       	ldi	r30, 0x53	; 83
    23d0:	f0 e0       	ldi	r31, 0x00	; 0
    23d2:	80 81       	ld	r24, Z
    23d4:	82 60       	ori	r24, 0x02	; 2
    23d6:	8c 93       	st	X, r24
            CLR_BIT(TCCR0, TCCR0_CS02);
    23d8:	a3 e5       	ldi	r26, 0x53	; 83
    23da:	b0 e0       	ldi	r27, 0x00	; 0
    23dc:	e3 e5       	ldi	r30, 0x53	; 83
    23de:	f0 e0       	ldi	r31, 0x00	; 0
    23e0:	80 81       	ld	r24, Z
    23e2:	8b 7f       	andi	r24, 0xFB	; 251
    23e4:	8c 93       	st	X, r24
    23e6:	1f c5       	rjmp	.+2622   	; 0x2e26 <Gpt_Init+0xd34>
            // TODO
            break;
        case GPT_PRESCALER_256:
            CLR_BIT(TCCR0, TCCR0_CS00);
    23e8:	a3 e5       	ldi	r26, 0x53	; 83
    23ea:	b0 e0       	ldi	r27, 0x00	; 0
    23ec:	e3 e5       	ldi	r30, 0x53	; 83
    23ee:	f0 e0       	ldi	r31, 0x00	; 0
    23f0:	80 81       	ld	r24, Z
    23f2:	8e 7f       	andi	r24, 0xFE	; 254
    23f4:	8c 93       	st	X, r24
            CLR_BIT(TCCR0, TCCR0_CS01);
    23f6:	a3 e5       	ldi	r26, 0x53	; 83
    23f8:	b0 e0       	ldi	r27, 0x00	; 0
    23fa:	e3 e5       	ldi	r30, 0x53	; 83
    23fc:	f0 e0       	ldi	r31, 0x00	; 0
    23fe:	80 81       	ld	r24, Z
    2400:	8d 7f       	andi	r24, 0xFD	; 253
    2402:	8c 93       	st	X, r24
            SET_BIT(TCCR0, TCCR0_CS02);
    2404:	a3 e5       	ldi	r26, 0x53	; 83
    2406:	b0 e0       	ldi	r27, 0x00	; 0
    2408:	e3 e5       	ldi	r30, 0x53	; 83
    240a:	f0 e0       	ldi	r31, 0x00	; 0
    240c:	80 81       	ld	r24, Z
    240e:	84 60       	ori	r24, 0x04	; 4
    2410:	8c 93       	st	X, r24
    2412:	09 c5       	rjmp	.+2578   	; 0x2e26 <Gpt_Init+0xd34>
            // TODO
            break;
        case GPT_PRESCALER_1024:
            SET_BIT(TCCR0, TCCR0_CS00);
    2414:	a3 e5       	ldi	r26, 0x53	; 83
    2416:	b0 e0       	ldi	r27, 0x00	; 0
    2418:	e3 e5       	ldi	r30, 0x53	; 83
    241a:	f0 e0       	ldi	r31, 0x00	; 0
    241c:	80 81       	ld	r24, Z
    241e:	81 60       	ori	r24, 0x01	; 1
    2420:	8c 93       	st	X, r24
            CLR_BIT(TCCR0, TCCR0_CS01);
    2422:	a3 e5       	ldi	r26, 0x53	; 83
    2424:	b0 e0       	ldi	r27, 0x00	; 0
    2426:	e3 e5       	ldi	r30, 0x53	; 83
    2428:	f0 e0       	ldi	r31, 0x00	; 0
    242a:	80 81       	ld	r24, Z
    242c:	8d 7f       	andi	r24, 0xFD	; 253
    242e:	8c 93       	st	X, r24
            SET_BIT(TCCR0, TCCR0_CS02);
    2430:	a3 e5       	ldi	r26, 0x53	; 83
    2432:	b0 e0       	ldi	r27, 0x00	; 0
    2434:	e3 e5       	ldi	r30, 0x53	; 83
    2436:	f0 e0       	ldi	r31, 0x00	; 0
    2438:	80 81       	ld	r24, Z
    243a:	84 60       	ori	r24, 0x04	; 4
    243c:	8c 93       	st	X, r24
    243e:	f3 c4       	rjmp	.+2534   	; 0x2e26 <Gpt_Init+0xd34>
            break;
        case GPT_PRESCALER_EXT_FALLING:
            CLR_BIT(TCCR0, TCCR0_CS00);
    2440:	a3 e5       	ldi	r26, 0x53	; 83
    2442:	b0 e0       	ldi	r27, 0x00	; 0
    2444:	e3 e5       	ldi	r30, 0x53	; 83
    2446:	f0 e0       	ldi	r31, 0x00	; 0
    2448:	80 81       	ld	r24, Z
    244a:	8e 7f       	andi	r24, 0xFE	; 254
    244c:	8c 93       	st	X, r24
            SET_BIT(TCCR0, TCCR0_CS01);
    244e:	a3 e5       	ldi	r26, 0x53	; 83
    2450:	b0 e0       	ldi	r27, 0x00	; 0
    2452:	e3 e5       	ldi	r30, 0x53	; 83
    2454:	f0 e0       	ldi	r31, 0x00	; 0
    2456:	80 81       	ld	r24, Z
    2458:	82 60       	ori	r24, 0x02	; 2
    245a:	8c 93       	st	X, r24
            SET_BIT(TCCR0, TCCR0_CS02);
    245c:	a3 e5       	ldi	r26, 0x53	; 83
    245e:	b0 e0       	ldi	r27, 0x00	; 0
    2460:	e3 e5       	ldi	r30, 0x53	; 83
    2462:	f0 e0       	ldi	r31, 0x00	; 0
    2464:	80 81       	ld	r24, Z
    2466:	84 60       	ori	r24, 0x04	; 4
    2468:	8c 93       	st	X, r24
    246a:	dd c4       	rjmp	.+2490   	; 0x2e26 <Gpt_Init+0xd34>
            // TODO
            break;
        case GPT_PRESCALER_EXT_RISING:
            SET_BIT(TCCR0, TCCR0_CS00);
    246c:	a3 e5       	ldi	r26, 0x53	; 83
    246e:	b0 e0       	ldi	r27, 0x00	; 0
    2470:	e3 e5       	ldi	r30, 0x53	; 83
    2472:	f0 e0       	ldi	r31, 0x00	; 0
    2474:	80 81       	ld	r24, Z
    2476:	81 60       	ori	r24, 0x01	; 1
    2478:	8c 93       	st	X, r24
            SET_BIT(TCCR0, TCCR0_CS01);
    247a:	a3 e5       	ldi	r26, 0x53	; 83
    247c:	b0 e0       	ldi	r27, 0x00	; 0
    247e:	e3 e5       	ldi	r30, 0x53	; 83
    2480:	f0 e0       	ldi	r31, 0x00	; 0
    2482:	80 81       	ld	r24, Z
    2484:	82 60       	ori	r24, 0x02	; 2
    2486:	8c 93       	st	X, r24
            SET_BIT(TCCR0, TCCR0_CS02);
    2488:	a3 e5       	ldi	r26, 0x53	; 83
    248a:	b0 e0       	ldi	r27, 0x00	; 0
    248c:	e3 e5       	ldi	r30, 0x53	; 83
    248e:	f0 e0       	ldi	r31, 0x00	; 0
    2490:	80 81       	ld	r24, Z
    2492:	84 60       	ori	r24, 0x04	; 4
    2494:	8c 93       	st	X, r24
    2496:	c7 c4       	rjmp	.+2446   	; 0x2e26 <Gpt_Init+0xd34>
            // TODO
            break;
        default:
            returnValue = GPT_ERROR;
    2498:	19 82       	std	Y+1, r1	; 0x01
    249a:	c5 c4       	rjmp	.+2442   	; 0x2e26 <Gpt_Init+0xd34>
            break;
        }
        break;
    case GPT_CHANNEL_TIMER1A:
        /*Waveform Generation Mode*/
        if (config->mode == GPT_MODE_NORMAL)
    249c:	ea 81       	ldd	r30, Y+2	; 0x02
    249e:	fb 81       	ldd	r31, Y+3	; 0x03
    24a0:	81 81       	ldd	r24, Z+1	; 0x01
    24a2:	88 23       	and	r24, r24
    24a4:	e9 f4       	brne	.+58     	; 0x24e0 <Gpt_Init+0x3ee>
        {
            CLR_BIT(TCCR1A,TCCR1A_WGM10);
    24a6:	af e4       	ldi	r26, 0x4F	; 79
    24a8:	b0 e0       	ldi	r27, 0x00	; 0
    24aa:	ef e4       	ldi	r30, 0x4F	; 79
    24ac:	f0 e0       	ldi	r31, 0x00	; 0
    24ae:	80 81       	ld	r24, Z
    24b0:	8e 7f       	andi	r24, 0xFE	; 254
    24b2:	8c 93       	st	X, r24
            CLR_BIT(TCCR1A,TCCR1A_WGM11);
    24b4:	af e4       	ldi	r26, 0x4F	; 79
    24b6:	b0 e0       	ldi	r27, 0x00	; 0
    24b8:	ef e4       	ldi	r30, 0x4F	; 79
    24ba:	f0 e0       	ldi	r31, 0x00	; 0
    24bc:	80 81       	ld	r24, Z
    24be:	8d 7f       	andi	r24, 0xFD	; 253
    24c0:	8c 93       	st	X, r24
            CLR_BIT(TCCR1B,TCCR1B_WGM12);
    24c2:	ae e4       	ldi	r26, 0x4E	; 78
    24c4:	b0 e0       	ldi	r27, 0x00	; 0
    24c6:	ee e4       	ldi	r30, 0x4E	; 78
    24c8:	f0 e0       	ldi	r31, 0x00	; 0
    24ca:	80 81       	ld	r24, Z
    24cc:	87 7f       	andi	r24, 0xF7	; 247
    24ce:	8c 93       	st	X, r24
            CLR_BIT(TCCR1B,TCCR1B_WGM13);
    24d0:	ae e4       	ldi	r26, 0x4E	; 78
    24d2:	b0 e0       	ldi	r27, 0x00	; 0
    24d4:	ee e4       	ldi	r30, 0x4E	; 78
    24d6:	f0 e0       	ldi	r31, 0x00	; 0
    24d8:	80 81       	ld	r24, Z
    24da:	8f 7e       	andi	r24, 0xEF	; 239
    24dc:	8c 93       	st	X, r24
    24de:	45 c0       	rjmp	.+138    	; 0x256a <Gpt_Init+0x478>
            // TODO
            // TODO
        }
        else if (config->mode == GPT_MODE_CTC)
    24e0:	ea 81       	ldd	r30, Y+2	; 0x02
    24e2:	fb 81       	ldd	r31, Y+3	; 0x03
    24e4:	81 81       	ldd	r24, Z+1	; 0x01
    24e6:	81 30       	cpi	r24, 0x01	; 1
    24e8:	e9 f4       	brne	.+58     	; 0x2524 <Gpt_Init+0x432>
        {
            CLR_BIT(TCCR1A,TCCR1A_WGM10);
    24ea:	af e4       	ldi	r26, 0x4F	; 79
    24ec:	b0 e0       	ldi	r27, 0x00	; 0
    24ee:	ef e4       	ldi	r30, 0x4F	; 79
    24f0:	f0 e0       	ldi	r31, 0x00	; 0
    24f2:	80 81       	ld	r24, Z
    24f4:	8e 7f       	andi	r24, 0xFE	; 254
    24f6:	8c 93       	st	X, r24
            CLR_BIT(TCCR1A,TCCR1A_WGM11);
    24f8:	af e4       	ldi	r26, 0x4F	; 79
    24fa:	b0 e0       	ldi	r27, 0x00	; 0
    24fc:	ef e4       	ldi	r30, 0x4F	; 79
    24fe:	f0 e0       	ldi	r31, 0x00	; 0
    2500:	80 81       	ld	r24, Z
    2502:	8d 7f       	andi	r24, 0xFD	; 253
    2504:	8c 93       	st	X, r24
            SET_BIT(TCCR1B,TCCR1B_WGM12);
    2506:	ae e4       	ldi	r26, 0x4E	; 78
    2508:	b0 e0       	ldi	r27, 0x00	; 0
    250a:	ee e4       	ldi	r30, 0x4E	; 78
    250c:	f0 e0       	ldi	r31, 0x00	; 0
    250e:	80 81       	ld	r24, Z
    2510:	88 60       	ori	r24, 0x08	; 8
    2512:	8c 93       	st	X, r24
            CLR_BIT(TCCR1B,TCCR1B_WGM13);
    2514:	ae e4       	ldi	r26, 0x4E	; 78
    2516:	b0 e0       	ldi	r27, 0x00	; 0
    2518:	ee e4       	ldi	r30, 0x4E	; 78
    251a:	f0 e0       	ldi	r31, 0x00	; 0
    251c:	80 81       	ld	r24, Z
    251e:	8f 7e       	andi	r24, 0xEF	; 239
    2520:	8c 93       	st	X, r24
    2522:	23 c0       	rjmp	.+70     	; 0x256a <Gpt_Init+0x478>
            // TODO
            // TODO
        }else if (config->mode == SPT_MODE_Fast_PWM_mod14)
    2524:	ea 81       	ldd	r30, Y+2	; 0x02
    2526:	fb 81       	ldd	r31, Y+3	; 0x03
    2528:	81 81       	ldd	r24, Z+1	; 0x01
    252a:	84 30       	cpi	r24, 0x04	; 4
    252c:	e9 f4       	brne	.+58     	; 0x2568 <Gpt_Init+0x476>
        {
            CLR_BIT(TCCR1A,TCCR1A_WGM10);
    252e:	af e4       	ldi	r26, 0x4F	; 79
    2530:	b0 e0       	ldi	r27, 0x00	; 0
    2532:	ef e4       	ldi	r30, 0x4F	; 79
    2534:	f0 e0       	ldi	r31, 0x00	; 0
    2536:	80 81       	ld	r24, Z
    2538:	8e 7f       	andi	r24, 0xFE	; 254
    253a:	8c 93       	st	X, r24
            SET_BIT(TCCR1A,TCCR1A_WGM11);
    253c:	af e4       	ldi	r26, 0x4F	; 79
    253e:	b0 e0       	ldi	r27, 0x00	; 0
    2540:	ef e4       	ldi	r30, 0x4F	; 79
    2542:	f0 e0       	ldi	r31, 0x00	; 0
    2544:	80 81       	ld	r24, Z
    2546:	82 60       	ori	r24, 0x02	; 2
    2548:	8c 93       	st	X, r24
            SET_BIT(TCCR1B,TCCR1B_WGM12);
    254a:	ae e4       	ldi	r26, 0x4E	; 78
    254c:	b0 e0       	ldi	r27, 0x00	; 0
    254e:	ee e4       	ldi	r30, 0x4E	; 78
    2550:	f0 e0       	ldi	r31, 0x00	; 0
    2552:	80 81       	ld	r24, Z
    2554:	88 60       	ori	r24, 0x08	; 8
    2556:	8c 93       	st	X, r24
            SET_BIT(TCCR1B,TCCR1B_WGM13);
    2558:	ae e4       	ldi	r26, 0x4E	; 78
    255a:	b0 e0       	ldi	r27, 0x00	; 0
    255c:	ee e4       	ldi	r30, 0x4E	; 78
    255e:	f0 e0       	ldi	r31, 0x00	; 0
    2560:	80 81       	ld	r24, Z
    2562:	80 61       	ori	r24, 0x10	; 16
    2564:	8c 93       	st	X, r24
    2566:	01 c0       	rjmp	.+2      	; 0x256a <Gpt_Init+0x478>
            // TODO
            // TODO
        }
        else
        {
            returnValue = GPT_ERROR;
    2568:	19 82       	std	Y+1, r1	; 0x01
        }
        /*Compare Match Output Mode*/
        switch (config->output)
    256a:	ea 81       	ldd	r30, Y+2	; 0x02
    256c:	fb 81       	ldd	r31, Y+3	; 0x03
    256e:	82 81       	ldd	r24, Z+2	; 0x02
    2570:	28 2f       	mov	r18, r24
    2572:	30 e0       	ldi	r19, 0x00	; 0
    2574:	3f 87       	std	Y+15, r19	; 0x0f
    2576:	2e 87       	std	Y+14, r18	; 0x0e
    2578:	8e 85       	ldd	r24, Y+14	; 0x0e
    257a:	9f 85       	ldd	r25, Y+15	; 0x0f
    257c:	81 30       	cpi	r24, 0x01	; 1
    257e:	91 05       	cpc	r25, r1
    2580:	21 f1       	breq	.+72     	; 0x25ca <Gpt_Init+0x4d8>
    2582:	2e 85       	ldd	r18, Y+14	; 0x0e
    2584:	3f 85       	ldd	r19, Y+15	; 0x0f
    2586:	22 30       	cpi	r18, 0x02	; 2
    2588:	31 05       	cpc	r19, r1
    258a:	2c f4       	brge	.+10     	; 0x2596 <Gpt_Init+0x4a4>
    258c:	8e 85       	ldd	r24, Y+14	; 0x0e
    258e:	9f 85       	ldd	r25, Y+15	; 0x0f
    2590:	00 97       	sbiw	r24, 0x00	; 0
    2592:	61 f0       	breq	.+24     	; 0x25ac <Gpt_Init+0x4ba>
    2594:	47 c0       	rjmp	.+142    	; 0x2624 <Gpt_Init+0x532>
    2596:	2e 85       	ldd	r18, Y+14	; 0x0e
    2598:	3f 85       	ldd	r19, Y+15	; 0x0f
    259a:	22 30       	cpi	r18, 0x02	; 2
    259c:	31 05       	cpc	r19, r1
    259e:	21 f1       	breq	.+72     	; 0x25e8 <Gpt_Init+0x4f6>
    25a0:	8e 85       	ldd	r24, Y+14	; 0x0e
    25a2:	9f 85       	ldd	r25, Y+15	; 0x0f
    25a4:	83 30       	cpi	r24, 0x03	; 3
    25a6:	91 05       	cpc	r25, r1
    25a8:	71 f1       	breq	.+92     	; 0x2606 <Gpt_Init+0x514>
    25aa:	3c c0       	rjmp	.+120    	; 0x2624 <Gpt_Init+0x532>
        {
        case GPT_OUTPUT_NORMAL:
            CLR_BIT(TCCR1A,TCCR1A_COM1A0);
    25ac:	af e4       	ldi	r26, 0x4F	; 79
    25ae:	b0 e0       	ldi	r27, 0x00	; 0
    25b0:	ef e4       	ldi	r30, 0x4F	; 79
    25b2:	f0 e0       	ldi	r31, 0x00	; 0
    25b4:	80 81       	ld	r24, Z
    25b6:	8f 7b       	andi	r24, 0xBF	; 191
    25b8:	8c 93       	st	X, r24
            CLR_BIT(TCCR1A,TCCR1A_COM1A1);
    25ba:	af e4       	ldi	r26, 0x4F	; 79
    25bc:	b0 e0       	ldi	r27, 0x00	; 0
    25be:	ef e4       	ldi	r30, 0x4F	; 79
    25c0:	f0 e0       	ldi	r31, 0x00	; 0
    25c2:	80 81       	ld	r24, Z
    25c4:	8f 77       	andi	r24, 0x7F	; 127
    25c6:	8c 93       	st	X, r24
    25c8:	2e c0       	rjmp	.+92     	; 0x2626 <Gpt_Init+0x534>
            
            // TODO
            break;
        case GPT_OUTPUT_TOGGLE:
            SET_BIT(TCCR1A,TCCR1A_COM1A0);
    25ca:	af e4       	ldi	r26, 0x4F	; 79
    25cc:	b0 e0       	ldi	r27, 0x00	; 0
    25ce:	ef e4       	ldi	r30, 0x4F	; 79
    25d0:	f0 e0       	ldi	r31, 0x00	; 0
    25d2:	80 81       	ld	r24, Z
    25d4:	80 64       	ori	r24, 0x40	; 64
    25d6:	8c 93       	st	X, r24
            CLR_BIT(TCCR1A,TCCR1A_COM1A1);
    25d8:	af e4       	ldi	r26, 0x4F	; 79
    25da:	b0 e0       	ldi	r27, 0x00	; 0
    25dc:	ef e4       	ldi	r30, 0x4F	; 79
    25de:	f0 e0       	ldi	r31, 0x00	; 0
    25e0:	80 81       	ld	r24, Z
    25e2:	8f 77       	andi	r24, 0x7F	; 127
    25e4:	8c 93       	st	X, r24
    25e6:	1f c0       	rjmp	.+62     	; 0x2626 <Gpt_Init+0x534>
            // TODO
            break;
        case GPT_OUTPUT_SET:
            SET_BIT(TCCR1A,TCCR1A_COM1A0);
    25e8:	af e4       	ldi	r26, 0x4F	; 79
    25ea:	b0 e0       	ldi	r27, 0x00	; 0
    25ec:	ef e4       	ldi	r30, 0x4F	; 79
    25ee:	f0 e0       	ldi	r31, 0x00	; 0
    25f0:	80 81       	ld	r24, Z
    25f2:	80 64       	ori	r24, 0x40	; 64
    25f4:	8c 93       	st	X, r24
            SET_BIT(TCCR1A,TCCR1A_COM1A1);
    25f6:	af e4       	ldi	r26, 0x4F	; 79
    25f8:	b0 e0       	ldi	r27, 0x00	; 0
    25fa:	ef e4       	ldi	r30, 0x4F	; 79
    25fc:	f0 e0       	ldi	r31, 0x00	; 0
    25fe:	80 81       	ld	r24, Z
    2600:	80 68       	ori	r24, 0x80	; 128
    2602:	8c 93       	st	X, r24
    2604:	10 c0       	rjmp	.+32     	; 0x2626 <Gpt_Init+0x534>
            // TODO
            break;
        case GPT_OUTPUT_CLEAR:
            CLR_BIT(TCCR1A,TCCR1A_COM1A0);
    2606:	af e4       	ldi	r26, 0x4F	; 79
    2608:	b0 e0       	ldi	r27, 0x00	; 0
    260a:	ef e4       	ldi	r30, 0x4F	; 79
    260c:	f0 e0       	ldi	r31, 0x00	; 0
    260e:	80 81       	ld	r24, Z
    2610:	8f 7b       	andi	r24, 0xBF	; 191
    2612:	8c 93       	st	X, r24
            SET_BIT(TCCR1A,TCCR1A_COM1A1);
    2614:	af e4       	ldi	r26, 0x4F	; 79
    2616:	b0 e0       	ldi	r27, 0x00	; 0
    2618:	ef e4       	ldi	r30, 0x4F	; 79
    261a:	f0 e0       	ldi	r31, 0x00	; 0
    261c:	80 81       	ld	r24, Z
    261e:	80 68       	ori	r24, 0x80	; 128
    2620:	8c 93       	st	X, r24
    2622:	01 c0       	rjmp	.+2      	; 0x2626 <Gpt_Init+0x534>
            // TODO
            break;
        default:
            returnValue = GPT_ERROR;
    2624:	19 82       	std	Y+1, r1	; 0x01
            break;
        }

        /*Clock Select*/
        switch (config->prescaler)
    2626:	ea 81       	ldd	r30, Y+2	; 0x02
    2628:	fb 81       	ldd	r31, Y+3	; 0x03
    262a:	83 81       	ldd	r24, Z+3	; 0x03
    262c:	28 2f       	mov	r18, r24
    262e:	30 e0       	ldi	r19, 0x00	; 0
    2630:	3d 87       	std	Y+13, r19	; 0x0d
    2632:	2c 87       	std	Y+12, r18	; 0x0c
    2634:	8c 85       	ldd	r24, Y+12	; 0x0c
    2636:	9d 85       	ldd	r25, Y+13	; 0x0d
    2638:	84 30       	cpi	r24, 0x04	; 4
    263a:	91 05       	cpc	r25, r1
    263c:	09 f4       	brne	.+2      	; 0x2640 <Gpt_Init+0x54e>
    263e:	77 c0       	rjmp	.+238    	; 0x272e <Gpt_Init+0x63c>
    2640:	2c 85       	ldd	r18, Y+12	; 0x0c
    2642:	3d 85       	ldd	r19, Y+13	; 0x0d
    2644:	25 30       	cpi	r18, 0x05	; 5
    2646:	31 05       	cpc	r19, r1
    2648:	8c f4       	brge	.+34     	; 0x266c <Gpt_Init+0x57a>
    264a:	8c 85       	ldd	r24, Y+12	; 0x0c
    264c:	9d 85       	ldd	r25, Y+13	; 0x0d
    264e:	81 30       	cpi	r24, 0x01	; 1
    2650:	91 05       	cpc	r25, r1
    2652:	09 f4       	brne	.+2      	; 0x2656 <Gpt_Init+0x564>
    2654:	40 c0       	rjmp	.+128    	; 0x26d6 <Gpt_Init+0x5e4>
    2656:	2c 85       	ldd	r18, Y+12	; 0x0c
    2658:	3d 85       	ldd	r19, Y+13	; 0x0d
    265a:	22 30       	cpi	r18, 0x02	; 2
    265c:	31 05       	cpc	r19, r1
    265e:	09 f4       	brne	.+2      	; 0x2662 <Gpt_Init+0x570>
    2660:	50 c0       	rjmp	.+160    	; 0x2702 <Gpt_Init+0x610>
    2662:	8c 85       	ldd	r24, Y+12	; 0x0c
    2664:	9d 85       	ldd	r25, Y+13	; 0x0d
    2666:	00 97       	sbiw	r24, 0x00	; 0
    2668:	01 f1       	breq	.+64     	; 0x26aa <Gpt_Init+0x5b8>
    266a:	cf c0       	rjmp	.+414    	; 0x280a <Gpt_Init+0x718>
    266c:	2c 85       	ldd	r18, Y+12	; 0x0c
    266e:	3d 85       	ldd	r19, Y+13	; 0x0d
    2670:	27 30       	cpi	r18, 0x07	; 7
    2672:	31 05       	cpc	r19, r1
    2674:	09 f4       	brne	.+2      	; 0x2678 <Gpt_Init+0x586>
    2676:	87 c0       	rjmp	.+270    	; 0x2786 <Gpt_Init+0x694>
    2678:	8c 85       	ldd	r24, Y+12	; 0x0c
    267a:	9d 85       	ldd	r25, Y+13	; 0x0d
    267c:	88 30       	cpi	r24, 0x08	; 8
    267e:	91 05       	cpc	r25, r1
    2680:	3c f4       	brge	.+14     	; 0x2690 <Gpt_Init+0x59e>
    2682:	2c 85       	ldd	r18, Y+12	; 0x0c
    2684:	3d 85       	ldd	r19, Y+13	; 0x0d
    2686:	26 30       	cpi	r18, 0x06	; 6
    2688:	31 05       	cpc	r19, r1
    268a:	09 f4       	brne	.+2      	; 0x268e <Gpt_Init+0x59c>
    268c:	66 c0       	rjmp	.+204    	; 0x275a <Gpt_Init+0x668>
    268e:	bd c0       	rjmp	.+378    	; 0x280a <Gpt_Init+0x718>
    2690:	8c 85       	ldd	r24, Y+12	; 0x0c
    2692:	9d 85       	ldd	r25, Y+13	; 0x0d
    2694:	88 30       	cpi	r24, 0x08	; 8
    2696:	91 05       	cpc	r25, r1
    2698:	09 f4       	brne	.+2      	; 0x269c <Gpt_Init+0x5aa>
    269a:	8b c0       	rjmp	.+278    	; 0x27b2 <Gpt_Init+0x6c0>
    269c:	2c 85       	ldd	r18, Y+12	; 0x0c
    269e:	3d 85       	ldd	r19, Y+13	; 0x0d
    26a0:	29 30       	cpi	r18, 0x09	; 9
    26a2:	31 05       	cpc	r19, r1
    26a4:	09 f4       	brne	.+2      	; 0x26a8 <Gpt_Init+0x5b6>
    26a6:	9b c0       	rjmp	.+310    	; 0x27de <Gpt_Init+0x6ec>
    26a8:	b0 c0       	rjmp	.+352    	; 0x280a <Gpt_Init+0x718>
        {
        case GPT_PRESCALER_0:
            CLR_BIT(TCCR1B,TCCR1B_CS10);
    26aa:	ae e4       	ldi	r26, 0x4E	; 78
    26ac:	b0 e0       	ldi	r27, 0x00	; 0
    26ae:	ee e4       	ldi	r30, 0x4E	; 78
    26b0:	f0 e0       	ldi	r31, 0x00	; 0
    26b2:	80 81       	ld	r24, Z
    26b4:	8e 7f       	andi	r24, 0xFE	; 254
    26b6:	8c 93       	st	X, r24
            CLR_BIT(TCCR1B,TCCR1B_CS11);
    26b8:	ae e4       	ldi	r26, 0x4E	; 78
    26ba:	b0 e0       	ldi	r27, 0x00	; 0
    26bc:	ee e4       	ldi	r30, 0x4E	; 78
    26be:	f0 e0       	ldi	r31, 0x00	; 0
    26c0:	80 81       	ld	r24, Z
    26c2:	8d 7f       	andi	r24, 0xFD	; 253
    26c4:	8c 93       	st	X, r24
            CLR_BIT(TCCR1B,TCCR1B_CS12);
    26c6:	ae e4       	ldi	r26, 0x4E	; 78
    26c8:	b0 e0       	ldi	r27, 0x00	; 0
    26ca:	ee e4       	ldi	r30, 0x4E	; 78
    26cc:	f0 e0       	ldi	r31, 0x00	; 0
    26ce:	80 81       	ld	r24, Z
    26d0:	8b 7f       	andi	r24, 0xFB	; 251
    26d2:	8c 93       	st	X, r24
    26d4:	a8 c3       	rjmp	.+1872   	; 0x2e26 <Gpt_Init+0xd34>
            // TODO
            break;
        case GPT_PRESCALER_1:
            SET_BIT(TCCR1B,TCCR1B_CS10);
    26d6:	ae e4       	ldi	r26, 0x4E	; 78
    26d8:	b0 e0       	ldi	r27, 0x00	; 0
    26da:	ee e4       	ldi	r30, 0x4E	; 78
    26dc:	f0 e0       	ldi	r31, 0x00	; 0
    26de:	80 81       	ld	r24, Z
    26e0:	81 60       	ori	r24, 0x01	; 1
    26e2:	8c 93       	st	X, r24
            CLR_BIT(TCCR1B,TCCR1B_CS11);
    26e4:	ae e4       	ldi	r26, 0x4E	; 78
    26e6:	b0 e0       	ldi	r27, 0x00	; 0
    26e8:	ee e4       	ldi	r30, 0x4E	; 78
    26ea:	f0 e0       	ldi	r31, 0x00	; 0
    26ec:	80 81       	ld	r24, Z
    26ee:	8d 7f       	andi	r24, 0xFD	; 253
    26f0:	8c 93       	st	X, r24
            CLR_BIT(TCCR1B,TCCR1B_CS12);        
    26f2:	ae e4       	ldi	r26, 0x4E	; 78
    26f4:	b0 e0       	ldi	r27, 0x00	; 0
    26f6:	ee e4       	ldi	r30, 0x4E	; 78
    26f8:	f0 e0       	ldi	r31, 0x00	; 0
    26fa:	80 81       	ld	r24, Z
    26fc:	8b 7f       	andi	r24, 0xFB	; 251
    26fe:	8c 93       	st	X, r24
    2700:	92 c3       	rjmp	.+1828   	; 0x2e26 <Gpt_Init+0xd34>
            // TODO
            break;
        case GPT_PRESCALER_8:
            CLR_BIT(TCCR1B,TCCR1B_CS10);
    2702:	ae e4       	ldi	r26, 0x4E	; 78
    2704:	b0 e0       	ldi	r27, 0x00	; 0
    2706:	ee e4       	ldi	r30, 0x4E	; 78
    2708:	f0 e0       	ldi	r31, 0x00	; 0
    270a:	80 81       	ld	r24, Z
    270c:	8e 7f       	andi	r24, 0xFE	; 254
    270e:	8c 93       	st	X, r24
            SET_BIT(TCCR1B,TCCR1B_CS11);
    2710:	ae e4       	ldi	r26, 0x4E	; 78
    2712:	b0 e0       	ldi	r27, 0x00	; 0
    2714:	ee e4       	ldi	r30, 0x4E	; 78
    2716:	f0 e0       	ldi	r31, 0x00	; 0
    2718:	80 81       	ld	r24, Z
    271a:	82 60       	ori	r24, 0x02	; 2
    271c:	8c 93       	st	X, r24
            CLR_BIT(TCCR1B,TCCR1B_CS12);
    271e:	ae e4       	ldi	r26, 0x4E	; 78
    2720:	b0 e0       	ldi	r27, 0x00	; 0
    2722:	ee e4       	ldi	r30, 0x4E	; 78
    2724:	f0 e0       	ldi	r31, 0x00	; 0
    2726:	80 81       	ld	r24, Z
    2728:	8b 7f       	andi	r24, 0xFB	; 251
    272a:	8c 93       	st	X, r24
    272c:	7c c3       	rjmp	.+1784   	; 0x2e26 <Gpt_Init+0xd34>
            // TODO
            break;
        case GPT_PRESCALER_64:
            SET_BIT(TCCR1B,TCCR1B_CS10);
    272e:	ae e4       	ldi	r26, 0x4E	; 78
    2730:	b0 e0       	ldi	r27, 0x00	; 0
    2732:	ee e4       	ldi	r30, 0x4E	; 78
    2734:	f0 e0       	ldi	r31, 0x00	; 0
    2736:	80 81       	ld	r24, Z
    2738:	81 60       	ori	r24, 0x01	; 1
    273a:	8c 93       	st	X, r24
            SET_BIT(TCCR1B,TCCR1B_CS11);
    273c:	ae e4       	ldi	r26, 0x4E	; 78
    273e:	b0 e0       	ldi	r27, 0x00	; 0
    2740:	ee e4       	ldi	r30, 0x4E	; 78
    2742:	f0 e0       	ldi	r31, 0x00	; 0
    2744:	80 81       	ld	r24, Z
    2746:	82 60       	ori	r24, 0x02	; 2
    2748:	8c 93       	st	X, r24
            CLR_BIT(TCCR1B,TCCR1B_CS12);
    274a:	ae e4       	ldi	r26, 0x4E	; 78
    274c:	b0 e0       	ldi	r27, 0x00	; 0
    274e:	ee e4       	ldi	r30, 0x4E	; 78
    2750:	f0 e0       	ldi	r31, 0x00	; 0
    2752:	80 81       	ld	r24, Z
    2754:	8b 7f       	andi	r24, 0xFB	; 251
    2756:	8c 93       	st	X, r24
    2758:	66 c3       	rjmp	.+1740   	; 0x2e26 <Gpt_Init+0xd34>
            // TODO
            break;
        case GPT_PRESCALER_256:
            CLR_BIT(TCCR1B,TCCR1B_CS10);
    275a:	ae e4       	ldi	r26, 0x4E	; 78
    275c:	b0 e0       	ldi	r27, 0x00	; 0
    275e:	ee e4       	ldi	r30, 0x4E	; 78
    2760:	f0 e0       	ldi	r31, 0x00	; 0
    2762:	80 81       	ld	r24, Z
    2764:	8e 7f       	andi	r24, 0xFE	; 254
    2766:	8c 93       	st	X, r24
            CLR_BIT(TCCR1B,TCCR1B_CS11);
    2768:	ae e4       	ldi	r26, 0x4E	; 78
    276a:	b0 e0       	ldi	r27, 0x00	; 0
    276c:	ee e4       	ldi	r30, 0x4E	; 78
    276e:	f0 e0       	ldi	r31, 0x00	; 0
    2770:	80 81       	ld	r24, Z
    2772:	8d 7f       	andi	r24, 0xFD	; 253
    2774:	8c 93       	st	X, r24
            SET_BIT(TCCR1B,TCCR1B_CS12);
    2776:	ae e4       	ldi	r26, 0x4E	; 78
    2778:	b0 e0       	ldi	r27, 0x00	; 0
    277a:	ee e4       	ldi	r30, 0x4E	; 78
    277c:	f0 e0       	ldi	r31, 0x00	; 0
    277e:	80 81       	ld	r24, Z
    2780:	84 60       	ori	r24, 0x04	; 4
    2782:	8c 93       	st	X, r24
    2784:	50 c3       	rjmp	.+1696   	; 0x2e26 <Gpt_Init+0xd34>
            // TODO
            break;
        case GPT_PRESCALER_1024:
            SET_BIT(TCCR1B,TCCR1B_CS10);
    2786:	ae e4       	ldi	r26, 0x4E	; 78
    2788:	b0 e0       	ldi	r27, 0x00	; 0
    278a:	ee e4       	ldi	r30, 0x4E	; 78
    278c:	f0 e0       	ldi	r31, 0x00	; 0
    278e:	80 81       	ld	r24, Z
    2790:	81 60       	ori	r24, 0x01	; 1
    2792:	8c 93       	st	X, r24
            CLR_BIT(TCCR1B,TCCR1B_CS11);
    2794:	ae e4       	ldi	r26, 0x4E	; 78
    2796:	b0 e0       	ldi	r27, 0x00	; 0
    2798:	ee e4       	ldi	r30, 0x4E	; 78
    279a:	f0 e0       	ldi	r31, 0x00	; 0
    279c:	80 81       	ld	r24, Z
    279e:	8d 7f       	andi	r24, 0xFD	; 253
    27a0:	8c 93       	st	X, r24
            SET_BIT(TCCR1B,TCCR1B_CS12);
    27a2:	ae e4       	ldi	r26, 0x4E	; 78
    27a4:	b0 e0       	ldi	r27, 0x00	; 0
    27a6:	ee e4       	ldi	r30, 0x4E	; 78
    27a8:	f0 e0       	ldi	r31, 0x00	; 0
    27aa:	80 81       	ld	r24, Z
    27ac:	84 60       	ori	r24, 0x04	; 4
    27ae:	8c 93       	st	X, r24
    27b0:	3a c3       	rjmp	.+1652   	; 0x2e26 <Gpt_Init+0xd34>
            // TODO
            break;
        case GPT_PRESCALER_EXT_FALLING:
            CLR_BIT(TCCR1B,TCCR1B_CS10);
    27b2:	ae e4       	ldi	r26, 0x4E	; 78
    27b4:	b0 e0       	ldi	r27, 0x00	; 0
    27b6:	ee e4       	ldi	r30, 0x4E	; 78
    27b8:	f0 e0       	ldi	r31, 0x00	; 0
    27ba:	80 81       	ld	r24, Z
    27bc:	8e 7f       	andi	r24, 0xFE	; 254
    27be:	8c 93       	st	X, r24
            SET_BIT(TCCR1B,TCCR1B_CS11);
    27c0:	ae e4       	ldi	r26, 0x4E	; 78
    27c2:	b0 e0       	ldi	r27, 0x00	; 0
    27c4:	ee e4       	ldi	r30, 0x4E	; 78
    27c6:	f0 e0       	ldi	r31, 0x00	; 0
    27c8:	80 81       	ld	r24, Z
    27ca:	82 60       	ori	r24, 0x02	; 2
    27cc:	8c 93       	st	X, r24
            SET_BIT(TCCR1B,TCCR1B_CS12);
    27ce:	ae e4       	ldi	r26, 0x4E	; 78
    27d0:	b0 e0       	ldi	r27, 0x00	; 0
    27d2:	ee e4       	ldi	r30, 0x4E	; 78
    27d4:	f0 e0       	ldi	r31, 0x00	; 0
    27d6:	80 81       	ld	r24, Z
    27d8:	84 60       	ori	r24, 0x04	; 4
    27da:	8c 93       	st	X, r24
    27dc:	24 c3       	rjmp	.+1608   	; 0x2e26 <Gpt_Init+0xd34>
            // TODO
            break;
        case GPT_PRESCALER_EXT_RISING:
            SET_BIT(TCCR1B,TCCR1B_CS10);
    27de:	ae e4       	ldi	r26, 0x4E	; 78
    27e0:	b0 e0       	ldi	r27, 0x00	; 0
    27e2:	ee e4       	ldi	r30, 0x4E	; 78
    27e4:	f0 e0       	ldi	r31, 0x00	; 0
    27e6:	80 81       	ld	r24, Z
    27e8:	81 60       	ori	r24, 0x01	; 1
    27ea:	8c 93       	st	X, r24
            SET_BIT(TCCR1B,TCCR1B_CS11);
    27ec:	ae e4       	ldi	r26, 0x4E	; 78
    27ee:	b0 e0       	ldi	r27, 0x00	; 0
    27f0:	ee e4       	ldi	r30, 0x4E	; 78
    27f2:	f0 e0       	ldi	r31, 0x00	; 0
    27f4:	80 81       	ld	r24, Z
    27f6:	82 60       	ori	r24, 0x02	; 2
    27f8:	8c 93       	st	X, r24
            SET_BIT(TCCR1B,TCCR1B_CS12);
    27fa:	ae e4       	ldi	r26, 0x4E	; 78
    27fc:	b0 e0       	ldi	r27, 0x00	; 0
    27fe:	ee e4       	ldi	r30, 0x4E	; 78
    2800:	f0 e0       	ldi	r31, 0x00	; 0
    2802:	80 81       	ld	r24, Z
    2804:	84 60       	ori	r24, 0x04	; 4
    2806:	8c 93       	st	X, r24
    2808:	0e c3       	rjmp	.+1564   	; 0x2e26 <Gpt_Init+0xd34>
            // TODO
            break;
        default:
            returnValue = GPT_ERROR;
    280a:	19 82       	std	Y+1, r1	; 0x01
    280c:	0c c3       	rjmp	.+1560   	; 0x2e26 <Gpt_Init+0xd34>
        }
        break;

    case GPT_CHANNEL_TIMER1B:
        /*Waveform Generation Mode*/
        if (config->mode == GPT_MODE_NORMAL)
    280e:	ea 81       	ldd	r30, Y+2	; 0x02
    2810:	fb 81       	ldd	r31, Y+3	; 0x03
    2812:	81 81       	ldd	r24, Z+1	; 0x01
    2814:	88 23       	and	r24, r24
    2816:	e9 f4       	brne	.+58     	; 0x2852 <Gpt_Init+0x760>
        {
            CLR_BIT(TCCR1A,TCCR1A_WGM10);
    2818:	af e4       	ldi	r26, 0x4F	; 79
    281a:	b0 e0       	ldi	r27, 0x00	; 0
    281c:	ef e4       	ldi	r30, 0x4F	; 79
    281e:	f0 e0       	ldi	r31, 0x00	; 0
    2820:	80 81       	ld	r24, Z
    2822:	8e 7f       	andi	r24, 0xFE	; 254
    2824:	8c 93       	st	X, r24
            CLR_BIT(TCCR1A,TCCR1A_WGM11);
    2826:	af e4       	ldi	r26, 0x4F	; 79
    2828:	b0 e0       	ldi	r27, 0x00	; 0
    282a:	ef e4       	ldi	r30, 0x4F	; 79
    282c:	f0 e0       	ldi	r31, 0x00	; 0
    282e:	80 81       	ld	r24, Z
    2830:	8d 7f       	andi	r24, 0xFD	; 253
    2832:	8c 93       	st	X, r24
            CLR_BIT(TCCR1B,TCCR1B_WGM12);
    2834:	ae e4       	ldi	r26, 0x4E	; 78
    2836:	b0 e0       	ldi	r27, 0x00	; 0
    2838:	ee e4       	ldi	r30, 0x4E	; 78
    283a:	f0 e0       	ldi	r31, 0x00	; 0
    283c:	80 81       	ld	r24, Z
    283e:	87 7f       	andi	r24, 0xF7	; 247
    2840:	8c 93       	st	X, r24
            CLR_BIT(TCCR1B,TCCR1B_WGM13);
    2842:	ae e4       	ldi	r26, 0x4E	; 78
    2844:	b0 e0       	ldi	r27, 0x00	; 0
    2846:	ee e4       	ldi	r30, 0x4E	; 78
    2848:	f0 e0       	ldi	r31, 0x00	; 0
    284a:	80 81       	ld	r24, Z
    284c:	8f 7e       	andi	r24, 0xEF	; 239
    284e:	8c 93       	st	X, r24
    2850:	23 c0       	rjmp	.+70     	; 0x2898 <Gpt_Init+0x7a6>
            // TODO
            // TODO
        }
        else if (config->mode == GPT_MODE_CTC)
    2852:	ea 81       	ldd	r30, Y+2	; 0x02
    2854:	fb 81       	ldd	r31, Y+3	; 0x03
    2856:	81 81       	ldd	r24, Z+1	; 0x01
    2858:	81 30       	cpi	r24, 0x01	; 1
    285a:	e9 f4       	brne	.+58     	; 0x2896 <Gpt_Init+0x7a4>
        {
            CLR_BIT(TCCR1A,TCCR1A_WGM10);
    285c:	af e4       	ldi	r26, 0x4F	; 79
    285e:	b0 e0       	ldi	r27, 0x00	; 0
    2860:	ef e4       	ldi	r30, 0x4F	; 79
    2862:	f0 e0       	ldi	r31, 0x00	; 0
    2864:	80 81       	ld	r24, Z
    2866:	8e 7f       	andi	r24, 0xFE	; 254
    2868:	8c 93       	st	X, r24
            CLR_BIT(TCCR1A,TCCR1A_WGM11);
    286a:	af e4       	ldi	r26, 0x4F	; 79
    286c:	b0 e0       	ldi	r27, 0x00	; 0
    286e:	ef e4       	ldi	r30, 0x4F	; 79
    2870:	f0 e0       	ldi	r31, 0x00	; 0
    2872:	80 81       	ld	r24, Z
    2874:	8d 7f       	andi	r24, 0xFD	; 253
    2876:	8c 93       	st	X, r24
            SET_BIT(TCCR1B,TCCR1B_WGM12);
    2878:	ae e4       	ldi	r26, 0x4E	; 78
    287a:	b0 e0       	ldi	r27, 0x00	; 0
    287c:	ee e4       	ldi	r30, 0x4E	; 78
    287e:	f0 e0       	ldi	r31, 0x00	; 0
    2880:	80 81       	ld	r24, Z
    2882:	88 60       	ori	r24, 0x08	; 8
    2884:	8c 93       	st	X, r24
            CLR_BIT(TCCR1B,TCCR1B_WGM13);
    2886:	ae e4       	ldi	r26, 0x4E	; 78
    2888:	b0 e0       	ldi	r27, 0x00	; 0
    288a:	ee e4       	ldi	r30, 0x4E	; 78
    288c:	f0 e0       	ldi	r31, 0x00	; 0
    288e:	80 81       	ld	r24, Z
    2890:	8f 7e       	andi	r24, 0xEF	; 239
    2892:	8c 93       	st	X, r24
    2894:	01 c0       	rjmp	.+2      	; 0x2898 <Gpt_Init+0x7a6>
            // TODO
            // TODO
        }
        else
        {
            returnValue = GPT_ERROR;
    2896:	19 82       	std	Y+1, r1	; 0x01
        }

        /*Compare Match Output Mode*/
        switch (config->output)
    2898:	ea 81       	ldd	r30, Y+2	; 0x02
    289a:	fb 81       	ldd	r31, Y+3	; 0x03
    289c:	82 81       	ldd	r24, Z+2	; 0x02
    289e:	28 2f       	mov	r18, r24
    28a0:	30 e0       	ldi	r19, 0x00	; 0
    28a2:	3b 87       	std	Y+11, r19	; 0x0b
    28a4:	2a 87       	std	Y+10, r18	; 0x0a
    28a6:	8a 85       	ldd	r24, Y+10	; 0x0a
    28a8:	9b 85       	ldd	r25, Y+11	; 0x0b
    28aa:	81 30       	cpi	r24, 0x01	; 1
    28ac:	91 05       	cpc	r25, r1
    28ae:	21 f1       	breq	.+72     	; 0x28f8 <Gpt_Init+0x806>
    28b0:	2a 85       	ldd	r18, Y+10	; 0x0a
    28b2:	3b 85       	ldd	r19, Y+11	; 0x0b
    28b4:	22 30       	cpi	r18, 0x02	; 2
    28b6:	31 05       	cpc	r19, r1
    28b8:	2c f4       	brge	.+10     	; 0x28c4 <Gpt_Init+0x7d2>
    28ba:	8a 85       	ldd	r24, Y+10	; 0x0a
    28bc:	9b 85       	ldd	r25, Y+11	; 0x0b
    28be:	00 97       	sbiw	r24, 0x00	; 0
    28c0:	61 f0       	breq	.+24     	; 0x28da <Gpt_Init+0x7e8>
    28c2:	47 c0       	rjmp	.+142    	; 0x2952 <Gpt_Init+0x860>
    28c4:	2a 85       	ldd	r18, Y+10	; 0x0a
    28c6:	3b 85       	ldd	r19, Y+11	; 0x0b
    28c8:	22 30       	cpi	r18, 0x02	; 2
    28ca:	31 05       	cpc	r19, r1
    28cc:	21 f1       	breq	.+72     	; 0x2916 <Gpt_Init+0x824>
    28ce:	8a 85       	ldd	r24, Y+10	; 0x0a
    28d0:	9b 85       	ldd	r25, Y+11	; 0x0b
    28d2:	83 30       	cpi	r24, 0x03	; 3
    28d4:	91 05       	cpc	r25, r1
    28d6:	71 f1       	breq	.+92     	; 0x2934 <Gpt_Init+0x842>
    28d8:	3c c0       	rjmp	.+120    	; 0x2952 <Gpt_Init+0x860>
        {
        case GPT_OUTPUT_NORMAL:
            CLR_BIT(TCCR1A,TCCR1A_COM1B0);
    28da:	af e4       	ldi	r26, 0x4F	; 79
    28dc:	b0 e0       	ldi	r27, 0x00	; 0
    28de:	ef e4       	ldi	r30, 0x4F	; 79
    28e0:	f0 e0       	ldi	r31, 0x00	; 0
    28e2:	80 81       	ld	r24, Z
    28e4:	8f 7e       	andi	r24, 0xEF	; 239
    28e6:	8c 93       	st	X, r24
            CLR_BIT(TCCR1A,TCCR1A_COM1B1);
    28e8:	af e4       	ldi	r26, 0x4F	; 79
    28ea:	b0 e0       	ldi	r27, 0x00	; 0
    28ec:	ef e4       	ldi	r30, 0x4F	; 79
    28ee:	f0 e0       	ldi	r31, 0x00	; 0
    28f0:	80 81       	ld	r24, Z
    28f2:	8f 7d       	andi	r24, 0xDF	; 223
    28f4:	8c 93       	st	X, r24
    28f6:	2e c0       	rjmp	.+92     	; 0x2954 <Gpt_Init+0x862>
            
            // TODO
            break;
        case GPT_OUTPUT_TOGGLE:
            SET_BIT(TCCR1A,TCCR1A_COM1B0);
    28f8:	af e4       	ldi	r26, 0x4F	; 79
    28fa:	b0 e0       	ldi	r27, 0x00	; 0
    28fc:	ef e4       	ldi	r30, 0x4F	; 79
    28fe:	f0 e0       	ldi	r31, 0x00	; 0
    2900:	80 81       	ld	r24, Z
    2902:	80 61       	ori	r24, 0x10	; 16
    2904:	8c 93       	st	X, r24
            CLR_BIT(TCCR1A,TCCR1A_COM1B1);
    2906:	af e4       	ldi	r26, 0x4F	; 79
    2908:	b0 e0       	ldi	r27, 0x00	; 0
    290a:	ef e4       	ldi	r30, 0x4F	; 79
    290c:	f0 e0       	ldi	r31, 0x00	; 0
    290e:	80 81       	ld	r24, Z
    2910:	8f 7d       	andi	r24, 0xDF	; 223
    2912:	8c 93       	st	X, r24
    2914:	1f c0       	rjmp	.+62     	; 0x2954 <Gpt_Init+0x862>
            // TODO
            break;
        case GPT_OUTPUT_SET:
            SET_BIT(TCCR1A,TCCR1A_COM1B0);
    2916:	af e4       	ldi	r26, 0x4F	; 79
    2918:	b0 e0       	ldi	r27, 0x00	; 0
    291a:	ef e4       	ldi	r30, 0x4F	; 79
    291c:	f0 e0       	ldi	r31, 0x00	; 0
    291e:	80 81       	ld	r24, Z
    2920:	80 61       	ori	r24, 0x10	; 16
    2922:	8c 93       	st	X, r24
            SET_BIT(TCCR1A,TCCR1A_COM1B1);
    2924:	af e4       	ldi	r26, 0x4F	; 79
    2926:	b0 e0       	ldi	r27, 0x00	; 0
    2928:	ef e4       	ldi	r30, 0x4F	; 79
    292a:	f0 e0       	ldi	r31, 0x00	; 0
    292c:	80 81       	ld	r24, Z
    292e:	80 62       	ori	r24, 0x20	; 32
    2930:	8c 93       	st	X, r24
    2932:	10 c0       	rjmp	.+32     	; 0x2954 <Gpt_Init+0x862>
            // TODO
            break;
        case GPT_OUTPUT_CLEAR:
            CLR_BIT(TCCR1A,TCCR1A_COM1B0);
    2934:	af e4       	ldi	r26, 0x4F	; 79
    2936:	b0 e0       	ldi	r27, 0x00	; 0
    2938:	ef e4       	ldi	r30, 0x4F	; 79
    293a:	f0 e0       	ldi	r31, 0x00	; 0
    293c:	80 81       	ld	r24, Z
    293e:	8f 7e       	andi	r24, 0xEF	; 239
    2940:	8c 93       	st	X, r24
            SET_BIT(TCCR1A,TCCR1A_COM1B1);
    2942:	af e4       	ldi	r26, 0x4F	; 79
    2944:	b0 e0       	ldi	r27, 0x00	; 0
    2946:	ef e4       	ldi	r30, 0x4F	; 79
    2948:	f0 e0       	ldi	r31, 0x00	; 0
    294a:	80 81       	ld	r24, Z
    294c:	80 62       	ori	r24, 0x20	; 32
    294e:	8c 93       	st	X, r24
    2950:	01 c0       	rjmp	.+2      	; 0x2954 <Gpt_Init+0x862>
            // TODO
            break;
        default:
            returnValue = GPT_ERROR;
    2952:	19 82       	std	Y+1, r1	; 0x01
            break;
        }

        /*Clock Select*/
        switch (config->prescaler)
    2954:	ea 81       	ldd	r30, Y+2	; 0x02
    2956:	fb 81       	ldd	r31, Y+3	; 0x03
    2958:	83 81       	ldd	r24, Z+3	; 0x03
    295a:	28 2f       	mov	r18, r24
    295c:	30 e0       	ldi	r19, 0x00	; 0
    295e:	39 87       	std	Y+9, r19	; 0x09
    2960:	28 87       	std	Y+8, r18	; 0x08
    2962:	88 85       	ldd	r24, Y+8	; 0x08
    2964:	99 85       	ldd	r25, Y+9	; 0x09
    2966:	84 30       	cpi	r24, 0x04	; 4
    2968:	91 05       	cpc	r25, r1
    296a:	09 f4       	brne	.+2      	; 0x296e <Gpt_Init+0x87c>
    296c:	77 c0       	rjmp	.+238    	; 0x2a5c <Gpt_Init+0x96a>
    296e:	28 85       	ldd	r18, Y+8	; 0x08
    2970:	39 85       	ldd	r19, Y+9	; 0x09
    2972:	25 30       	cpi	r18, 0x05	; 5
    2974:	31 05       	cpc	r19, r1
    2976:	8c f4       	brge	.+34     	; 0x299a <Gpt_Init+0x8a8>
    2978:	88 85       	ldd	r24, Y+8	; 0x08
    297a:	99 85       	ldd	r25, Y+9	; 0x09
    297c:	81 30       	cpi	r24, 0x01	; 1
    297e:	91 05       	cpc	r25, r1
    2980:	09 f4       	brne	.+2      	; 0x2984 <Gpt_Init+0x892>
    2982:	40 c0       	rjmp	.+128    	; 0x2a04 <Gpt_Init+0x912>
    2984:	28 85       	ldd	r18, Y+8	; 0x08
    2986:	39 85       	ldd	r19, Y+9	; 0x09
    2988:	22 30       	cpi	r18, 0x02	; 2
    298a:	31 05       	cpc	r19, r1
    298c:	09 f4       	brne	.+2      	; 0x2990 <Gpt_Init+0x89e>
    298e:	50 c0       	rjmp	.+160    	; 0x2a30 <Gpt_Init+0x93e>
    2990:	88 85       	ldd	r24, Y+8	; 0x08
    2992:	99 85       	ldd	r25, Y+9	; 0x09
    2994:	00 97       	sbiw	r24, 0x00	; 0
    2996:	01 f1       	breq	.+64     	; 0x29d8 <Gpt_Init+0x8e6>
    2998:	cf c0       	rjmp	.+414    	; 0x2b38 <Gpt_Init+0xa46>
    299a:	28 85       	ldd	r18, Y+8	; 0x08
    299c:	39 85       	ldd	r19, Y+9	; 0x09
    299e:	27 30       	cpi	r18, 0x07	; 7
    29a0:	31 05       	cpc	r19, r1
    29a2:	09 f4       	brne	.+2      	; 0x29a6 <Gpt_Init+0x8b4>
    29a4:	87 c0       	rjmp	.+270    	; 0x2ab4 <Gpt_Init+0x9c2>
    29a6:	88 85       	ldd	r24, Y+8	; 0x08
    29a8:	99 85       	ldd	r25, Y+9	; 0x09
    29aa:	88 30       	cpi	r24, 0x08	; 8
    29ac:	91 05       	cpc	r25, r1
    29ae:	3c f4       	brge	.+14     	; 0x29be <Gpt_Init+0x8cc>
    29b0:	28 85       	ldd	r18, Y+8	; 0x08
    29b2:	39 85       	ldd	r19, Y+9	; 0x09
    29b4:	26 30       	cpi	r18, 0x06	; 6
    29b6:	31 05       	cpc	r19, r1
    29b8:	09 f4       	brne	.+2      	; 0x29bc <Gpt_Init+0x8ca>
    29ba:	66 c0       	rjmp	.+204    	; 0x2a88 <Gpt_Init+0x996>
    29bc:	bd c0       	rjmp	.+378    	; 0x2b38 <Gpt_Init+0xa46>
    29be:	88 85       	ldd	r24, Y+8	; 0x08
    29c0:	99 85       	ldd	r25, Y+9	; 0x09
    29c2:	88 30       	cpi	r24, 0x08	; 8
    29c4:	91 05       	cpc	r25, r1
    29c6:	09 f4       	brne	.+2      	; 0x29ca <Gpt_Init+0x8d8>
    29c8:	8b c0       	rjmp	.+278    	; 0x2ae0 <Gpt_Init+0x9ee>
    29ca:	28 85       	ldd	r18, Y+8	; 0x08
    29cc:	39 85       	ldd	r19, Y+9	; 0x09
    29ce:	29 30       	cpi	r18, 0x09	; 9
    29d0:	31 05       	cpc	r19, r1
    29d2:	09 f4       	brne	.+2      	; 0x29d6 <Gpt_Init+0x8e4>
    29d4:	9b c0       	rjmp	.+310    	; 0x2b0c <Gpt_Init+0xa1a>
    29d6:	b0 c0       	rjmp	.+352    	; 0x2b38 <Gpt_Init+0xa46>
        {
        case GPT_PRESCALER_0:
            CLR_BIT(TCCR0, TCCR0_CS00);
    29d8:	a3 e5       	ldi	r26, 0x53	; 83
    29da:	b0 e0       	ldi	r27, 0x00	; 0
    29dc:	e3 e5       	ldi	r30, 0x53	; 83
    29de:	f0 e0       	ldi	r31, 0x00	; 0
    29e0:	80 81       	ld	r24, Z
    29e2:	8e 7f       	andi	r24, 0xFE	; 254
    29e4:	8c 93       	st	X, r24
            CLR_BIT(TCCR0, TCCR0_CS01);
    29e6:	a3 e5       	ldi	r26, 0x53	; 83
    29e8:	b0 e0       	ldi	r27, 0x00	; 0
    29ea:	e3 e5       	ldi	r30, 0x53	; 83
    29ec:	f0 e0       	ldi	r31, 0x00	; 0
    29ee:	80 81       	ld	r24, Z
    29f0:	8d 7f       	andi	r24, 0xFD	; 253
    29f2:	8c 93       	st	X, r24
            CLR_BIT(TCCR0, TCCR0_CS02);
    29f4:	a3 e5       	ldi	r26, 0x53	; 83
    29f6:	b0 e0       	ldi	r27, 0x00	; 0
    29f8:	e3 e5       	ldi	r30, 0x53	; 83
    29fa:	f0 e0       	ldi	r31, 0x00	; 0
    29fc:	80 81       	ld	r24, Z
    29fe:	8b 7f       	andi	r24, 0xFB	; 251
    2a00:	8c 93       	st	X, r24
    2a02:	11 c2       	rjmp	.+1058   	; 0x2e26 <Gpt_Init+0xd34>
            break;
        case GPT_PRESCALER_1:
            SET_BIT(TCCR0, TCCR0_CS00);
    2a04:	a3 e5       	ldi	r26, 0x53	; 83
    2a06:	b0 e0       	ldi	r27, 0x00	; 0
    2a08:	e3 e5       	ldi	r30, 0x53	; 83
    2a0a:	f0 e0       	ldi	r31, 0x00	; 0
    2a0c:	80 81       	ld	r24, Z
    2a0e:	81 60       	ori	r24, 0x01	; 1
    2a10:	8c 93       	st	X, r24
            CLR_BIT(TCCR0, TCCR0_CS01);
    2a12:	a3 e5       	ldi	r26, 0x53	; 83
    2a14:	b0 e0       	ldi	r27, 0x00	; 0
    2a16:	e3 e5       	ldi	r30, 0x53	; 83
    2a18:	f0 e0       	ldi	r31, 0x00	; 0
    2a1a:	80 81       	ld	r24, Z
    2a1c:	8d 7f       	andi	r24, 0xFD	; 253
    2a1e:	8c 93       	st	X, r24
            CLR_BIT(TCCR0, TCCR0_CS02);
    2a20:	a3 e5       	ldi	r26, 0x53	; 83
    2a22:	b0 e0       	ldi	r27, 0x00	; 0
    2a24:	e3 e5       	ldi	r30, 0x53	; 83
    2a26:	f0 e0       	ldi	r31, 0x00	; 0
    2a28:	80 81       	ld	r24, Z
    2a2a:	8b 7f       	andi	r24, 0xFB	; 251
    2a2c:	8c 93       	st	X, r24
    2a2e:	fb c1       	rjmp	.+1014   	; 0x2e26 <Gpt_Init+0xd34>
            break;
        case GPT_PRESCALER_8:
            CLR_BIT(TCCR0, TCCR0_CS00);
    2a30:	a3 e5       	ldi	r26, 0x53	; 83
    2a32:	b0 e0       	ldi	r27, 0x00	; 0
    2a34:	e3 e5       	ldi	r30, 0x53	; 83
    2a36:	f0 e0       	ldi	r31, 0x00	; 0
    2a38:	80 81       	ld	r24, Z
    2a3a:	8e 7f       	andi	r24, 0xFE	; 254
    2a3c:	8c 93       	st	X, r24
            SET_BIT(TCCR0, TCCR0_CS01);
    2a3e:	a3 e5       	ldi	r26, 0x53	; 83
    2a40:	b0 e0       	ldi	r27, 0x00	; 0
    2a42:	e3 e5       	ldi	r30, 0x53	; 83
    2a44:	f0 e0       	ldi	r31, 0x00	; 0
    2a46:	80 81       	ld	r24, Z
    2a48:	82 60       	ori	r24, 0x02	; 2
    2a4a:	8c 93       	st	X, r24
            CLR_BIT(TCCR0, TCCR0_CS02);
    2a4c:	a3 e5       	ldi	r26, 0x53	; 83
    2a4e:	b0 e0       	ldi	r27, 0x00	; 0
    2a50:	e3 e5       	ldi	r30, 0x53	; 83
    2a52:	f0 e0       	ldi	r31, 0x00	; 0
    2a54:	80 81       	ld	r24, Z
    2a56:	8b 7f       	andi	r24, 0xFB	; 251
    2a58:	8c 93       	st	X, r24
    2a5a:	e5 c1       	rjmp	.+970    	; 0x2e26 <Gpt_Init+0xd34>
            break;
        case GPT_PRESCALER_64:
            SET_BIT(TCCR0, TCCR0_CS00);
    2a5c:	a3 e5       	ldi	r26, 0x53	; 83
    2a5e:	b0 e0       	ldi	r27, 0x00	; 0
    2a60:	e3 e5       	ldi	r30, 0x53	; 83
    2a62:	f0 e0       	ldi	r31, 0x00	; 0
    2a64:	80 81       	ld	r24, Z
    2a66:	81 60       	ori	r24, 0x01	; 1
    2a68:	8c 93       	st	X, r24
            SET_BIT(TCCR0, TCCR0_CS01);
    2a6a:	a3 e5       	ldi	r26, 0x53	; 83
    2a6c:	b0 e0       	ldi	r27, 0x00	; 0
    2a6e:	e3 e5       	ldi	r30, 0x53	; 83
    2a70:	f0 e0       	ldi	r31, 0x00	; 0
    2a72:	80 81       	ld	r24, Z
    2a74:	82 60       	ori	r24, 0x02	; 2
    2a76:	8c 93       	st	X, r24
            CLR_BIT(TCCR0, TCCR0_CS02);
    2a78:	a3 e5       	ldi	r26, 0x53	; 83
    2a7a:	b0 e0       	ldi	r27, 0x00	; 0
    2a7c:	e3 e5       	ldi	r30, 0x53	; 83
    2a7e:	f0 e0       	ldi	r31, 0x00	; 0
    2a80:	80 81       	ld	r24, Z
    2a82:	8b 7f       	andi	r24, 0xFB	; 251
    2a84:	8c 93       	st	X, r24
    2a86:	cf c1       	rjmp	.+926    	; 0x2e26 <Gpt_Init+0xd34>
            // TODO
            break;
        case GPT_PRESCALER_256:
            CLR_BIT(TCCR0, TCCR0_CS00);
    2a88:	a3 e5       	ldi	r26, 0x53	; 83
    2a8a:	b0 e0       	ldi	r27, 0x00	; 0
    2a8c:	e3 e5       	ldi	r30, 0x53	; 83
    2a8e:	f0 e0       	ldi	r31, 0x00	; 0
    2a90:	80 81       	ld	r24, Z
    2a92:	8e 7f       	andi	r24, 0xFE	; 254
    2a94:	8c 93       	st	X, r24
            CLR_BIT(TCCR0, TCCR0_CS01);
    2a96:	a3 e5       	ldi	r26, 0x53	; 83
    2a98:	b0 e0       	ldi	r27, 0x00	; 0
    2a9a:	e3 e5       	ldi	r30, 0x53	; 83
    2a9c:	f0 e0       	ldi	r31, 0x00	; 0
    2a9e:	80 81       	ld	r24, Z
    2aa0:	8d 7f       	andi	r24, 0xFD	; 253
    2aa2:	8c 93       	st	X, r24
            SET_BIT(TCCR0, TCCR0_CS02);
    2aa4:	a3 e5       	ldi	r26, 0x53	; 83
    2aa6:	b0 e0       	ldi	r27, 0x00	; 0
    2aa8:	e3 e5       	ldi	r30, 0x53	; 83
    2aaa:	f0 e0       	ldi	r31, 0x00	; 0
    2aac:	80 81       	ld	r24, Z
    2aae:	84 60       	ori	r24, 0x04	; 4
    2ab0:	8c 93       	st	X, r24
    2ab2:	b9 c1       	rjmp	.+882    	; 0x2e26 <Gpt_Init+0xd34>
            // TODO
            break;
        case GPT_PRESCALER_1024:
            SET_BIT(TCCR0, TCCR0_CS00);
    2ab4:	a3 e5       	ldi	r26, 0x53	; 83
    2ab6:	b0 e0       	ldi	r27, 0x00	; 0
    2ab8:	e3 e5       	ldi	r30, 0x53	; 83
    2aba:	f0 e0       	ldi	r31, 0x00	; 0
    2abc:	80 81       	ld	r24, Z
    2abe:	81 60       	ori	r24, 0x01	; 1
    2ac0:	8c 93       	st	X, r24
            CLR_BIT(TCCR0, TCCR0_CS01);
    2ac2:	a3 e5       	ldi	r26, 0x53	; 83
    2ac4:	b0 e0       	ldi	r27, 0x00	; 0
    2ac6:	e3 e5       	ldi	r30, 0x53	; 83
    2ac8:	f0 e0       	ldi	r31, 0x00	; 0
    2aca:	80 81       	ld	r24, Z
    2acc:	8d 7f       	andi	r24, 0xFD	; 253
    2ace:	8c 93       	st	X, r24
            SET_BIT(TCCR0, TCCR0_CS02);
    2ad0:	a3 e5       	ldi	r26, 0x53	; 83
    2ad2:	b0 e0       	ldi	r27, 0x00	; 0
    2ad4:	e3 e5       	ldi	r30, 0x53	; 83
    2ad6:	f0 e0       	ldi	r31, 0x00	; 0
    2ad8:	80 81       	ld	r24, Z
    2ada:	84 60       	ori	r24, 0x04	; 4
    2adc:	8c 93       	st	X, r24
    2ade:	a3 c1       	rjmp	.+838    	; 0x2e26 <Gpt_Init+0xd34>
            break;
        case GPT_PRESCALER_EXT_FALLING:
            CLR_BIT(TCCR0, TCCR0_CS00);
    2ae0:	a3 e5       	ldi	r26, 0x53	; 83
    2ae2:	b0 e0       	ldi	r27, 0x00	; 0
    2ae4:	e3 e5       	ldi	r30, 0x53	; 83
    2ae6:	f0 e0       	ldi	r31, 0x00	; 0
    2ae8:	80 81       	ld	r24, Z
    2aea:	8e 7f       	andi	r24, 0xFE	; 254
    2aec:	8c 93       	st	X, r24
            SET_BIT(TCCR0, TCCR0_CS01);
    2aee:	a3 e5       	ldi	r26, 0x53	; 83
    2af0:	b0 e0       	ldi	r27, 0x00	; 0
    2af2:	e3 e5       	ldi	r30, 0x53	; 83
    2af4:	f0 e0       	ldi	r31, 0x00	; 0
    2af6:	80 81       	ld	r24, Z
    2af8:	82 60       	ori	r24, 0x02	; 2
    2afa:	8c 93       	st	X, r24
            SET_BIT(TCCR0, TCCR0_CS02);
    2afc:	a3 e5       	ldi	r26, 0x53	; 83
    2afe:	b0 e0       	ldi	r27, 0x00	; 0
    2b00:	e3 e5       	ldi	r30, 0x53	; 83
    2b02:	f0 e0       	ldi	r31, 0x00	; 0
    2b04:	80 81       	ld	r24, Z
    2b06:	84 60       	ori	r24, 0x04	; 4
    2b08:	8c 93       	st	X, r24
    2b0a:	8d c1       	rjmp	.+794    	; 0x2e26 <Gpt_Init+0xd34>
            // TODO
            break;
        case GPT_PRESCALER_EXT_RISING:
            SET_BIT(TCCR0, TCCR0_CS00);
    2b0c:	a3 e5       	ldi	r26, 0x53	; 83
    2b0e:	b0 e0       	ldi	r27, 0x00	; 0
    2b10:	e3 e5       	ldi	r30, 0x53	; 83
    2b12:	f0 e0       	ldi	r31, 0x00	; 0
    2b14:	80 81       	ld	r24, Z
    2b16:	81 60       	ori	r24, 0x01	; 1
    2b18:	8c 93       	st	X, r24
            SET_BIT(TCCR0, TCCR0_CS01);
    2b1a:	a3 e5       	ldi	r26, 0x53	; 83
    2b1c:	b0 e0       	ldi	r27, 0x00	; 0
    2b1e:	e3 e5       	ldi	r30, 0x53	; 83
    2b20:	f0 e0       	ldi	r31, 0x00	; 0
    2b22:	80 81       	ld	r24, Z
    2b24:	82 60       	ori	r24, 0x02	; 2
    2b26:	8c 93       	st	X, r24
            SET_BIT(TCCR0, TCCR0_CS02);
    2b28:	a3 e5       	ldi	r26, 0x53	; 83
    2b2a:	b0 e0       	ldi	r27, 0x00	; 0
    2b2c:	e3 e5       	ldi	r30, 0x53	; 83
    2b2e:	f0 e0       	ldi	r31, 0x00	; 0
    2b30:	80 81       	ld	r24, Z
    2b32:	84 60       	ori	r24, 0x04	; 4
    2b34:	8c 93       	st	X, r24
    2b36:	77 c1       	rjmp	.+750    	; 0x2e26 <Gpt_Init+0xd34>
            // TODO
            break;
        default:
            returnValue = GPT_ERROR;
    2b38:	19 82       	std	Y+1, r1	; 0x01
    2b3a:	75 c1       	rjmp	.+746    	; 0x2e26 <Gpt_Init+0xd34>
        }
        break;

    case GPT_CHANNEL_TIMER2:
        /*Waveform Generation Mode*/
        if (config->mode == GPT_MODE_NORMAL)
    2b3c:	ea 81       	ldd	r30, Y+2	; 0x02
    2b3e:	fb 81       	ldd	r31, Y+3	; 0x03
    2b40:	81 81       	ldd	r24, Z+1	; 0x01
    2b42:	88 23       	and	r24, r24
    2b44:	79 f4       	brne	.+30     	; 0x2b64 <Gpt_Init+0xa72>
        {
            CLR_BIT(TCCR2, TCCR2_WGM20);
    2b46:	a5 e4       	ldi	r26, 0x45	; 69
    2b48:	b0 e0       	ldi	r27, 0x00	; 0
    2b4a:	e5 e4       	ldi	r30, 0x45	; 69
    2b4c:	f0 e0       	ldi	r31, 0x00	; 0
    2b4e:	80 81       	ld	r24, Z
    2b50:	8f 7b       	andi	r24, 0xBF	; 191
    2b52:	8c 93       	st	X, r24
            CLR_BIT(TCCR2, TCCR2_WGM21);
    2b54:	a5 e4       	ldi	r26, 0x45	; 69
    2b56:	b0 e0       	ldi	r27, 0x00	; 0
    2b58:	e5 e4       	ldi	r30, 0x45	; 69
    2b5a:	f0 e0       	ldi	r31, 0x00	; 0
    2b5c:	80 81       	ld	r24, Z
    2b5e:	87 7f       	andi	r24, 0xF7	; 247
    2b60:	8c 93       	st	X, r24
    2b62:	15 c0       	rjmp	.+42     	; 0x2b8e <Gpt_Init+0xa9c>
            // TODO
            // TODO
        }
        else if (config->mode == GPT_MODE_CTC)
    2b64:	ea 81       	ldd	r30, Y+2	; 0x02
    2b66:	fb 81       	ldd	r31, Y+3	; 0x03
    2b68:	81 81       	ldd	r24, Z+1	; 0x01
    2b6a:	81 30       	cpi	r24, 0x01	; 1
    2b6c:	79 f4       	brne	.+30     	; 0x2b8c <Gpt_Init+0xa9a>
        {
            CLR_BIT(TCCR2, TCCR2_WGM20);
    2b6e:	a5 e4       	ldi	r26, 0x45	; 69
    2b70:	b0 e0       	ldi	r27, 0x00	; 0
    2b72:	e5 e4       	ldi	r30, 0x45	; 69
    2b74:	f0 e0       	ldi	r31, 0x00	; 0
    2b76:	80 81       	ld	r24, Z
    2b78:	8f 7b       	andi	r24, 0xBF	; 191
    2b7a:	8c 93       	st	X, r24
            SET_BIT(TCCR2, TCCR2_WGM21);
    2b7c:	a5 e4       	ldi	r26, 0x45	; 69
    2b7e:	b0 e0       	ldi	r27, 0x00	; 0
    2b80:	e5 e4       	ldi	r30, 0x45	; 69
    2b82:	f0 e0       	ldi	r31, 0x00	; 0
    2b84:	80 81       	ld	r24, Z
    2b86:	88 60       	ori	r24, 0x08	; 8
    2b88:	8c 93       	st	X, r24
    2b8a:	01 c0       	rjmp	.+2      	; 0x2b8e <Gpt_Init+0xa9c>
            // TODO
            // TODO
        }
        else
        {
            returnValue = GPT_ERROR;
    2b8c:	19 82       	std	Y+1, r1	; 0x01
        }

        /*Compare Match Output Mode*/
        switch (config->output)
    2b8e:	ea 81       	ldd	r30, Y+2	; 0x02
    2b90:	fb 81       	ldd	r31, Y+3	; 0x03
    2b92:	82 81       	ldd	r24, Z+2	; 0x02
    2b94:	28 2f       	mov	r18, r24
    2b96:	30 e0       	ldi	r19, 0x00	; 0
    2b98:	3f 83       	std	Y+7, r19	; 0x07
    2b9a:	2e 83       	std	Y+6, r18	; 0x06
    2b9c:	8e 81       	ldd	r24, Y+6	; 0x06
    2b9e:	9f 81       	ldd	r25, Y+7	; 0x07
    2ba0:	81 30       	cpi	r24, 0x01	; 1
    2ba2:	91 05       	cpc	r25, r1
    2ba4:	21 f1       	breq	.+72     	; 0x2bee <Gpt_Init+0xafc>
    2ba6:	2e 81       	ldd	r18, Y+6	; 0x06
    2ba8:	3f 81       	ldd	r19, Y+7	; 0x07
    2baa:	22 30       	cpi	r18, 0x02	; 2
    2bac:	31 05       	cpc	r19, r1
    2bae:	2c f4       	brge	.+10     	; 0x2bba <Gpt_Init+0xac8>
    2bb0:	8e 81       	ldd	r24, Y+6	; 0x06
    2bb2:	9f 81       	ldd	r25, Y+7	; 0x07
    2bb4:	00 97       	sbiw	r24, 0x00	; 0
    2bb6:	61 f0       	breq	.+24     	; 0x2bd0 <Gpt_Init+0xade>
    2bb8:	47 c0       	rjmp	.+142    	; 0x2c48 <Gpt_Init+0xb56>
    2bba:	2e 81       	ldd	r18, Y+6	; 0x06
    2bbc:	3f 81       	ldd	r19, Y+7	; 0x07
    2bbe:	22 30       	cpi	r18, 0x02	; 2
    2bc0:	31 05       	cpc	r19, r1
    2bc2:	21 f1       	breq	.+72     	; 0x2c0c <Gpt_Init+0xb1a>
    2bc4:	8e 81       	ldd	r24, Y+6	; 0x06
    2bc6:	9f 81       	ldd	r25, Y+7	; 0x07
    2bc8:	83 30       	cpi	r24, 0x03	; 3
    2bca:	91 05       	cpc	r25, r1
    2bcc:	71 f1       	breq	.+92     	; 0x2c2a <Gpt_Init+0xb38>
    2bce:	3c c0       	rjmp	.+120    	; 0x2c48 <Gpt_Init+0xb56>
        {
        case GPT_OUTPUT_NORMAL:
            CLR_BIT(TCCR2, TCCR2_COM20);
    2bd0:	a5 e4       	ldi	r26, 0x45	; 69
    2bd2:	b0 e0       	ldi	r27, 0x00	; 0
    2bd4:	e5 e4       	ldi	r30, 0x45	; 69
    2bd6:	f0 e0       	ldi	r31, 0x00	; 0
    2bd8:	80 81       	ld	r24, Z
    2bda:	8f 7e       	andi	r24, 0xEF	; 239
    2bdc:	8c 93       	st	X, r24
            CLR_BIT(TCCR2, TCCR2_COM21);
    2bde:	a5 e4       	ldi	r26, 0x45	; 69
    2be0:	b0 e0       	ldi	r27, 0x00	; 0
    2be2:	e5 e4       	ldi	r30, 0x45	; 69
    2be4:	f0 e0       	ldi	r31, 0x00	; 0
    2be6:	80 81       	ld	r24, Z
    2be8:	8f 7d       	andi	r24, 0xDF	; 223
    2bea:	8c 93       	st	X, r24
    2bec:	2e c0       	rjmp	.+92     	; 0x2c4a <Gpt_Init+0xb58>
            // TODO
            break;
        case GPT_OUTPUT_TOGGLE:
            SET_BIT(TCCR2, TCCR2_COM20);
    2bee:	a5 e4       	ldi	r26, 0x45	; 69
    2bf0:	b0 e0       	ldi	r27, 0x00	; 0
    2bf2:	e5 e4       	ldi	r30, 0x45	; 69
    2bf4:	f0 e0       	ldi	r31, 0x00	; 0
    2bf6:	80 81       	ld	r24, Z
    2bf8:	80 61       	ori	r24, 0x10	; 16
    2bfa:	8c 93       	st	X, r24
            CLR_BIT(TCCR2, TCCR2_COM21);
    2bfc:	a5 e4       	ldi	r26, 0x45	; 69
    2bfe:	b0 e0       	ldi	r27, 0x00	; 0
    2c00:	e5 e4       	ldi	r30, 0x45	; 69
    2c02:	f0 e0       	ldi	r31, 0x00	; 0
    2c04:	80 81       	ld	r24, Z
    2c06:	8f 7d       	andi	r24, 0xDF	; 223
    2c08:	8c 93       	st	X, r24
    2c0a:	1f c0       	rjmp	.+62     	; 0x2c4a <Gpt_Init+0xb58>
            // TODO
            break;
        case GPT_OUTPUT_SET:
            SET_BIT(TCCR2, TCCR2_COM20);
    2c0c:	a5 e4       	ldi	r26, 0x45	; 69
    2c0e:	b0 e0       	ldi	r27, 0x00	; 0
    2c10:	e5 e4       	ldi	r30, 0x45	; 69
    2c12:	f0 e0       	ldi	r31, 0x00	; 0
    2c14:	80 81       	ld	r24, Z
    2c16:	80 61       	ori	r24, 0x10	; 16
    2c18:	8c 93       	st	X, r24
            SET_BIT(TCCR2, TCCR2_COM21);
    2c1a:	a5 e4       	ldi	r26, 0x45	; 69
    2c1c:	b0 e0       	ldi	r27, 0x00	; 0
    2c1e:	e5 e4       	ldi	r30, 0x45	; 69
    2c20:	f0 e0       	ldi	r31, 0x00	; 0
    2c22:	80 81       	ld	r24, Z
    2c24:	80 62       	ori	r24, 0x20	; 32
    2c26:	8c 93       	st	X, r24
    2c28:	10 c0       	rjmp	.+32     	; 0x2c4a <Gpt_Init+0xb58>
            // TODO
            break;
        case GPT_OUTPUT_CLEAR:
            CLR_BIT(TCCR2, TCCR2_COM20);
    2c2a:	a5 e4       	ldi	r26, 0x45	; 69
    2c2c:	b0 e0       	ldi	r27, 0x00	; 0
    2c2e:	e5 e4       	ldi	r30, 0x45	; 69
    2c30:	f0 e0       	ldi	r31, 0x00	; 0
    2c32:	80 81       	ld	r24, Z
    2c34:	8f 7e       	andi	r24, 0xEF	; 239
    2c36:	8c 93       	st	X, r24
            SET_BIT(TCCR2, TCCR2_COM21);
    2c38:	a5 e4       	ldi	r26, 0x45	; 69
    2c3a:	b0 e0       	ldi	r27, 0x00	; 0
    2c3c:	e5 e4       	ldi	r30, 0x45	; 69
    2c3e:	f0 e0       	ldi	r31, 0x00	; 0
    2c40:	80 81       	ld	r24, Z
    2c42:	80 62       	ori	r24, 0x20	; 32
    2c44:	8c 93       	st	X, r24
    2c46:	01 c0       	rjmp	.+2      	; 0x2c4a <Gpt_Init+0xb58>
            // TODO
            break;
        default:
            returnValue = GPT_ERROR;
    2c48:	19 82       	std	Y+1, r1	; 0x01
            break;
        }

        /*Clock Select*/
        switch (config->prescaler)
    2c4a:	ea 81       	ldd	r30, Y+2	; 0x02
    2c4c:	fb 81       	ldd	r31, Y+3	; 0x03
    2c4e:	83 81       	ldd	r24, Z+3	; 0x03
    2c50:	28 2f       	mov	r18, r24
    2c52:	30 e0       	ldi	r19, 0x00	; 0
    2c54:	3d 83       	std	Y+5, r19	; 0x05
    2c56:	2c 83       	std	Y+4, r18	; 0x04
    2c58:	8c 81       	ldd	r24, Y+4	; 0x04
    2c5a:	9d 81       	ldd	r25, Y+5	; 0x05
    2c5c:	83 30       	cpi	r24, 0x03	; 3
    2c5e:	91 05       	cpc	r25, r1
    2c60:	09 f4       	brne	.+2      	; 0x2c64 <Gpt_Init+0xb72>
    2c62:	70 c0       	rjmp	.+224    	; 0x2d44 <Gpt_Init+0xc52>
    2c64:	2c 81       	ldd	r18, Y+4	; 0x04
    2c66:	3d 81       	ldd	r19, Y+5	; 0x05
    2c68:	24 30       	cpi	r18, 0x04	; 4
    2c6a:	31 05       	cpc	r19, r1
    2c6c:	84 f4       	brge	.+32     	; 0x2c8e <Gpt_Init+0xb9c>
    2c6e:	8c 81       	ldd	r24, Y+4	; 0x04
    2c70:	9d 81       	ldd	r25, Y+5	; 0x05
    2c72:	81 30       	cpi	r24, 0x01	; 1
    2c74:	91 05       	cpc	r25, r1
    2c76:	d1 f1       	breq	.+116    	; 0x2cec <Gpt_Init+0xbfa>
    2c78:	2c 81       	ldd	r18, Y+4	; 0x04
    2c7a:	3d 81       	ldd	r19, Y+5	; 0x05
    2c7c:	22 30       	cpi	r18, 0x02	; 2
    2c7e:	31 05       	cpc	r19, r1
    2c80:	0c f0       	brlt	.+2      	; 0x2c84 <Gpt_Init+0xb92>
    2c82:	4a c0       	rjmp	.+148    	; 0x2d18 <Gpt_Init+0xc26>
    2c84:	8c 81       	ldd	r24, Y+4	; 0x04
    2c86:	9d 81       	ldd	r25, Y+5	; 0x05
    2c88:	00 97       	sbiw	r24, 0x00	; 0
    2c8a:	d1 f0       	breq	.+52     	; 0x2cc0 <Gpt_Init+0xbce>
    2c8c:	c9 c0       	rjmp	.+402    	; 0x2e20 <Gpt_Init+0xd2e>
    2c8e:	2c 81       	ldd	r18, Y+4	; 0x04
    2c90:	3d 81       	ldd	r19, Y+5	; 0x05
    2c92:	25 30       	cpi	r18, 0x05	; 5
    2c94:	31 05       	cpc	r19, r1
    2c96:	09 f4       	brne	.+2      	; 0x2c9a <Gpt_Init+0xba8>
    2c98:	81 c0       	rjmp	.+258    	; 0x2d9c <Gpt_Init+0xcaa>
    2c9a:	8c 81       	ldd	r24, Y+4	; 0x04
    2c9c:	9d 81       	ldd	r25, Y+5	; 0x05
    2c9e:	85 30       	cpi	r24, 0x05	; 5
    2ca0:	91 05       	cpc	r25, r1
    2ca2:	0c f4       	brge	.+2      	; 0x2ca6 <Gpt_Init+0xbb4>
    2ca4:	65 c0       	rjmp	.+202    	; 0x2d70 <Gpt_Init+0xc7e>
    2ca6:	2c 81       	ldd	r18, Y+4	; 0x04
    2ca8:	3d 81       	ldd	r19, Y+5	; 0x05
    2caa:	26 30       	cpi	r18, 0x06	; 6
    2cac:	31 05       	cpc	r19, r1
    2cae:	09 f4       	brne	.+2      	; 0x2cb2 <Gpt_Init+0xbc0>
    2cb0:	8b c0       	rjmp	.+278    	; 0x2dc8 <Gpt_Init+0xcd6>
    2cb2:	8c 81       	ldd	r24, Y+4	; 0x04
    2cb4:	9d 81       	ldd	r25, Y+5	; 0x05
    2cb6:	87 30       	cpi	r24, 0x07	; 7
    2cb8:	91 05       	cpc	r25, r1
    2cba:	09 f4       	brne	.+2      	; 0x2cbe <Gpt_Init+0xbcc>
    2cbc:	9b c0       	rjmp	.+310    	; 0x2df4 <Gpt_Init+0xd02>
    2cbe:	b0 c0       	rjmp	.+352    	; 0x2e20 <Gpt_Init+0xd2e>
        {
        case GPT_PRESCALER_0:
            CLR_BIT(TCCR0, TCCR0_CS00);
    2cc0:	a3 e5       	ldi	r26, 0x53	; 83
    2cc2:	b0 e0       	ldi	r27, 0x00	; 0
    2cc4:	e3 e5       	ldi	r30, 0x53	; 83
    2cc6:	f0 e0       	ldi	r31, 0x00	; 0
    2cc8:	80 81       	ld	r24, Z
    2cca:	8e 7f       	andi	r24, 0xFE	; 254
    2ccc:	8c 93       	st	X, r24
            CLR_BIT(TCCR0, TCCR0_CS01);
    2cce:	a3 e5       	ldi	r26, 0x53	; 83
    2cd0:	b0 e0       	ldi	r27, 0x00	; 0
    2cd2:	e3 e5       	ldi	r30, 0x53	; 83
    2cd4:	f0 e0       	ldi	r31, 0x00	; 0
    2cd6:	80 81       	ld	r24, Z
    2cd8:	8d 7f       	andi	r24, 0xFD	; 253
    2cda:	8c 93       	st	X, r24
            CLR_BIT(TCCR0, TCCR0_CS02);
    2cdc:	a3 e5       	ldi	r26, 0x53	; 83
    2cde:	b0 e0       	ldi	r27, 0x00	; 0
    2ce0:	e3 e5       	ldi	r30, 0x53	; 83
    2ce2:	f0 e0       	ldi	r31, 0x00	; 0
    2ce4:	80 81       	ld	r24, Z
    2ce6:	8b 7f       	andi	r24, 0xFB	; 251
    2ce8:	8c 93       	st	X, r24
    2cea:	9d c0       	rjmp	.+314    	; 0x2e26 <Gpt_Init+0xd34>
            break;
        case GPT_PRESCALER_1:
            SET_BIT(TCCR0, TCCR0_CS00);
    2cec:	a3 e5       	ldi	r26, 0x53	; 83
    2cee:	b0 e0       	ldi	r27, 0x00	; 0
    2cf0:	e3 e5       	ldi	r30, 0x53	; 83
    2cf2:	f0 e0       	ldi	r31, 0x00	; 0
    2cf4:	80 81       	ld	r24, Z
    2cf6:	81 60       	ori	r24, 0x01	; 1
    2cf8:	8c 93       	st	X, r24
            CLR_BIT(TCCR0, TCCR0_CS01);
    2cfa:	a3 e5       	ldi	r26, 0x53	; 83
    2cfc:	b0 e0       	ldi	r27, 0x00	; 0
    2cfe:	e3 e5       	ldi	r30, 0x53	; 83
    2d00:	f0 e0       	ldi	r31, 0x00	; 0
    2d02:	80 81       	ld	r24, Z
    2d04:	8d 7f       	andi	r24, 0xFD	; 253
    2d06:	8c 93       	st	X, r24
            CLR_BIT(TCCR0, TCCR0_CS02);
    2d08:	a3 e5       	ldi	r26, 0x53	; 83
    2d0a:	b0 e0       	ldi	r27, 0x00	; 0
    2d0c:	e3 e5       	ldi	r30, 0x53	; 83
    2d0e:	f0 e0       	ldi	r31, 0x00	; 0
    2d10:	80 81       	ld	r24, Z
    2d12:	8b 7f       	andi	r24, 0xFB	; 251
    2d14:	8c 93       	st	X, r24
    2d16:	87 c0       	rjmp	.+270    	; 0x2e26 <Gpt_Init+0xd34>
            break;
        case GPT_PRESCALER_8:
            CLR_BIT(TCCR0, TCCR0_CS00);
    2d18:	a3 e5       	ldi	r26, 0x53	; 83
    2d1a:	b0 e0       	ldi	r27, 0x00	; 0
    2d1c:	e3 e5       	ldi	r30, 0x53	; 83
    2d1e:	f0 e0       	ldi	r31, 0x00	; 0
    2d20:	80 81       	ld	r24, Z
    2d22:	8e 7f       	andi	r24, 0xFE	; 254
    2d24:	8c 93       	st	X, r24
            SET_BIT(TCCR0, TCCR0_CS01);
    2d26:	a3 e5       	ldi	r26, 0x53	; 83
    2d28:	b0 e0       	ldi	r27, 0x00	; 0
    2d2a:	e3 e5       	ldi	r30, 0x53	; 83
    2d2c:	f0 e0       	ldi	r31, 0x00	; 0
    2d2e:	80 81       	ld	r24, Z
    2d30:	82 60       	ori	r24, 0x02	; 2
    2d32:	8c 93       	st	X, r24
            CLR_BIT(TCCR0, TCCR0_CS02);
    2d34:	a3 e5       	ldi	r26, 0x53	; 83
    2d36:	b0 e0       	ldi	r27, 0x00	; 0
    2d38:	e3 e5       	ldi	r30, 0x53	; 83
    2d3a:	f0 e0       	ldi	r31, 0x00	; 0
    2d3c:	80 81       	ld	r24, Z
    2d3e:	8b 7f       	andi	r24, 0xFB	; 251
    2d40:	8c 93       	st	X, r24
    2d42:	71 c0       	rjmp	.+226    	; 0x2e26 <Gpt_Init+0xd34>
            break;
        case GPT_PRESCALER_32:
            SET_BIT(TCCR0, TCCR0_CS00);
    2d44:	a3 e5       	ldi	r26, 0x53	; 83
    2d46:	b0 e0       	ldi	r27, 0x00	; 0
    2d48:	e3 e5       	ldi	r30, 0x53	; 83
    2d4a:	f0 e0       	ldi	r31, 0x00	; 0
    2d4c:	80 81       	ld	r24, Z
    2d4e:	81 60       	ori	r24, 0x01	; 1
    2d50:	8c 93       	st	X, r24
            SET_BIT(TCCR0, TCCR0_CS01);
    2d52:	a3 e5       	ldi	r26, 0x53	; 83
    2d54:	b0 e0       	ldi	r27, 0x00	; 0
    2d56:	e3 e5       	ldi	r30, 0x53	; 83
    2d58:	f0 e0       	ldi	r31, 0x00	; 0
    2d5a:	80 81       	ld	r24, Z
    2d5c:	82 60       	ori	r24, 0x02	; 2
    2d5e:	8c 93       	st	X, r24
            CLR_BIT(TCCR0, TCCR0_CS02);
    2d60:	a3 e5       	ldi	r26, 0x53	; 83
    2d62:	b0 e0       	ldi	r27, 0x00	; 0
    2d64:	e3 e5       	ldi	r30, 0x53	; 83
    2d66:	f0 e0       	ldi	r31, 0x00	; 0
    2d68:	80 81       	ld	r24, Z
    2d6a:	8b 7f       	andi	r24, 0xFB	; 251
    2d6c:	8c 93       	st	X, r24
    2d6e:	5b c0       	rjmp	.+182    	; 0x2e26 <Gpt_Init+0xd34>
            // TODO
            break;
        case GPT_PRESCALER_64:
            CLR_BIT(TCCR0, TCCR0_CS00);
    2d70:	a3 e5       	ldi	r26, 0x53	; 83
    2d72:	b0 e0       	ldi	r27, 0x00	; 0
    2d74:	e3 e5       	ldi	r30, 0x53	; 83
    2d76:	f0 e0       	ldi	r31, 0x00	; 0
    2d78:	80 81       	ld	r24, Z
    2d7a:	8e 7f       	andi	r24, 0xFE	; 254
    2d7c:	8c 93       	st	X, r24
            CLR_BIT(TCCR0, TCCR0_CS01);
    2d7e:	a3 e5       	ldi	r26, 0x53	; 83
    2d80:	b0 e0       	ldi	r27, 0x00	; 0
    2d82:	e3 e5       	ldi	r30, 0x53	; 83
    2d84:	f0 e0       	ldi	r31, 0x00	; 0
    2d86:	80 81       	ld	r24, Z
    2d88:	8d 7f       	andi	r24, 0xFD	; 253
    2d8a:	8c 93       	st	X, r24
            SET_BIT(TCCR0, TCCR0_CS02);
    2d8c:	a3 e5       	ldi	r26, 0x53	; 83
    2d8e:	b0 e0       	ldi	r27, 0x00	; 0
    2d90:	e3 e5       	ldi	r30, 0x53	; 83
    2d92:	f0 e0       	ldi	r31, 0x00	; 0
    2d94:	80 81       	ld	r24, Z
    2d96:	84 60       	ori	r24, 0x04	; 4
    2d98:	8c 93       	st	X, r24
    2d9a:	45 c0       	rjmp	.+138    	; 0x2e26 <Gpt_Init+0xd34>
            // TODO
            break;
        case GPT_PRESCALER_128:
            SET_BIT(TCCR0, TCCR0_CS00);
    2d9c:	a3 e5       	ldi	r26, 0x53	; 83
    2d9e:	b0 e0       	ldi	r27, 0x00	; 0
    2da0:	e3 e5       	ldi	r30, 0x53	; 83
    2da2:	f0 e0       	ldi	r31, 0x00	; 0
    2da4:	80 81       	ld	r24, Z
    2da6:	81 60       	ori	r24, 0x01	; 1
    2da8:	8c 93       	st	X, r24
            CLR_BIT(TCCR0, TCCR0_CS01);
    2daa:	a3 e5       	ldi	r26, 0x53	; 83
    2dac:	b0 e0       	ldi	r27, 0x00	; 0
    2dae:	e3 e5       	ldi	r30, 0x53	; 83
    2db0:	f0 e0       	ldi	r31, 0x00	; 0
    2db2:	80 81       	ld	r24, Z
    2db4:	8d 7f       	andi	r24, 0xFD	; 253
    2db6:	8c 93       	st	X, r24
            SET_BIT(TCCR0, TCCR0_CS02);
    2db8:	a3 e5       	ldi	r26, 0x53	; 83
    2dba:	b0 e0       	ldi	r27, 0x00	; 0
    2dbc:	e3 e5       	ldi	r30, 0x53	; 83
    2dbe:	f0 e0       	ldi	r31, 0x00	; 0
    2dc0:	80 81       	ld	r24, Z
    2dc2:	84 60       	ori	r24, 0x04	; 4
    2dc4:	8c 93       	st	X, r24
    2dc6:	2f c0       	rjmp	.+94     	; 0x2e26 <Gpt_Init+0xd34>
            break;
        case GPT_PRESCALER_256:
            CLR_BIT(TCCR0, TCCR0_CS00);
    2dc8:	a3 e5       	ldi	r26, 0x53	; 83
    2dca:	b0 e0       	ldi	r27, 0x00	; 0
    2dcc:	e3 e5       	ldi	r30, 0x53	; 83
    2dce:	f0 e0       	ldi	r31, 0x00	; 0
    2dd0:	80 81       	ld	r24, Z
    2dd2:	8e 7f       	andi	r24, 0xFE	; 254
    2dd4:	8c 93       	st	X, r24
            SET_BIT(TCCR0, TCCR0_CS01);
    2dd6:	a3 e5       	ldi	r26, 0x53	; 83
    2dd8:	b0 e0       	ldi	r27, 0x00	; 0
    2dda:	e3 e5       	ldi	r30, 0x53	; 83
    2ddc:	f0 e0       	ldi	r31, 0x00	; 0
    2dde:	80 81       	ld	r24, Z
    2de0:	82 60       	ori	r24, 0x02	; 2
    2de2:	8c 93       	st	X, r24
            SET_BIT(TCCR0, TCCR0_CS02);
    2de4:	a3 e5       	ldi	r26, 0x53	; 83
    2de6:	b0 e0       	ldi	r27, 0x00	; 0
    2de8:	e3 e5       	ldi	r30, 0x53	; 83
    2dea:	f0 e0       	ldi	r31, 0x00	; 0
    2dec:	80 81       	ld	r24, Z
    2dee:	84 60       	ori	r24, 0x04	; 4
    2df0:	8c 93       	st	X, r24
    2df2:	19 c0       	rjmp	.+50     	; 0x2e26 <Gpt_Init+0xd34>
            // TODO
            break;
        case GPT_PRESCALER_1024:
            SET_BIT(TCCR0, TCCR0_CS00);
    2df4:	a3 e5       	ldi	r26, 0x53	; 83
    2df6:	b0 e0       	ldi	r27, 0x00	; 0
    2df8:	e3 e5       	ldi	r30, 0x53	; 83
    2dfa:	f0 e0       	ldi	r31, 0x00	; 0
    2dfc:	80 81       	ld	r24, Z
    2dfe:	81 60       	ori	r24, 0x01	; 1
    2e00:	8c 93       	st	X, r24
            SET_BIT(TCCR0, TCCR0_CS01);
    2e02:	a3 e5       	ldi	r26, 0x53	; 83
    2e04:	b0 e0       	ldi	r27, 0x00	; 0
    2e06:	e3 e5       	ldi	r30, 0x53	; 83
    2e08:	f0 e0       	ldi	r31, 0x00	; 0
    2e0a:	80 81       	ld	r24, Z
    2e0c:	82 60       	ori	r24, 0x02	; 2
    2e0e:	8c 93       	st	X, r24
            SET_BIT(TCCR0, TCCR0_CS02);
    2e10:	a3 e5       	ldi	r26, 0x53	; 83
    2e12:	b0 e0       	ldi	r27, 0x00	; 0
    2e14:	e3 e5       	ldi	r30, 0x53	; 83
    2e16:	f0 e0       	ldi	r31, 0x00	; 0
    2e18:	80 81       	ld	r24, Z
    2e1a:	84 60       	ori	r24, 0x04	; 4
    2e1c:	8c 93       	st	X, r24
    2e1e:	03 c0       	rjmp	.+6      	; 0x2e26 <Gpt_Init+0xd34>
            // TODO
            break;
        default:
            returnValue = GPT_ERROR;
    2e20:	19 82       	std	Y+1, r1	; 0x01
    2e22:	01 c0       	rjmp	.+2      	; 0x2e26 <Gpt_Init+0xd34>
            break;
        }
        break;

    default:
        returnValue = GPT_ERROR;
    2e24:	19 82       	std	Y+1, r1	; 0x01
    }
    return returnValue;
    2e26:	89 81       	ldd	r24, Y+1	; 0x01
}
    2e28:	65 96       	adiw	r28, 0x15	; 21
    2e2a:	0f b6       	in	r0, 0x3f	; 63
    2e2c:	f8 94       	cli
    2e2e:	de bf       	out	0x3e, r29	; 62
    2e30:	0f be       	out	0x3f, r0	; 63
    2e32:	cd bf       	out	0x3d, r28	; 61
    2e34:	cf 91       	pop	r28
    2e36:	df 91       	pop	r29
    2e38:	08 95       	ret

00002e3a <Gpt_StartTimer>:

Gpt_ReturnType Gpt_StartTimer(Gpt_ChannelType channel, u16 value)
{
    2e3a:	df 93       	push	r29
    2e3c:	cf 93       	push	r28
    2e3e:	00 d0       	rcall	.+0      	; 0x2e40 <Gpt_StartTimer+0x6>
    2e40:	00 d0       	rcall	.+0      	; 0x2e42 <Gpt_StartTimer+0x8>
    2e42:	00 d0       	rcall	.+0      	; 0x2e44 <Gpt_StartTimer+0xa>
    2e44:	cd b7       	in	r28, 0x3d	; 61
    2e46:	de b7       	in	r29, 0x3e	; 62
    2e48:	8a 83       	std	Y+2, r24	; 0x02
    2e4a:	7c 83       	std	Y+4, r23	; 0x04
    2e4c:	6b 83       	std	Y+3, r22	; 0x03
    Gpt_ReturnType returnValue = GPT_OK;
    2e4e:	81 e0       	ldi	r24, 0x01	; 1
    2e50:	89 83       	std	Y+1, r24	; 0x01
    switch (channel)
    2e52:	8a 81       	ldd	r24, Y+2	; 0x02
    2e54:	28 2f       	mov	r18, r24
    2e56:	30 e0       	ldi	r19, 0x00	; 0
    2e58:	3e 83       	std	Y+6, r19	; 0x06
    2e5a:	2d 83       	std	Y+5, r18	; 0x05
    2e5c:	8d 81       	ldd	r24, Y+5	; 0x05
    2e5e:	9e 81       	ldd	r25, Y+6	; 0x06
    2e60:	81 30       	cpi	r24, 0x01	; 1
    2e62:	91 05       	cpc	r25, r1
    2e64:	11 f1       	breq	.+68     	; 0x2eaa <Gpt_StartTimer+0x70>
    2e66:	2d 81       	ldd	r18, Y+5	; 0x05
    2e68:	3e 81       	ldd	r19, Y+6	; 0x06
    2e6a:	22 30       	cpi	r18, 0x02	; 2
    2e6c:	31 05       	cpc	r19, r1
    2e6e:	2c f4       	brge	.+10     	; 0x2e7a <Gpt_StartTimer+0x40>
    2e70:	8d 81       	ldd	r24, Y+5	; 0x05
    2e72:	9e 81       	ldd	r25, Y+6	; 0x06
    2e74:	00 97       	sbiw	r24, 0x00	; 0
    2e76:	61 f0       	breq	.+24     	; 0x2e90 <Gpt_StartTimer+0x56>
    2e78:	4c c0       	rjmp	.+152    	; 0x2f12 <Gpt_StartTimer+0xd8>
    2e7a:	2d 81       	ldd	r18, Y+5	; 0x05
    2e7c:	3e 81       	ldd	r19, Y+6	; 0x06
    2e7e:	22 30       	cpi	r18, 0x02	; 2
    2e80:	31 05       	cpc	r19, r1
    2e82:	39 f1       	breq	.+78     	; 0x2ed2 <Gpt_StartTimer+0x98>
    2e84:	8d 81       	ldd	r24, Y+5	; 0x05
    2e86:	9e 81       	ldd	r25, Y+6	; 0x06
    2e88:	83 30       	cpi	r24, 0x03	; 3
    2e8a:	91 05       	cpc	r25, r1
    2e8c:	b1 f1       	breq	.+108    	; 0x2efa <Gpt_StartTimer+0xc0>
    2e8e:	41 c0       	rjmp	.+130    	; 0x2f12 <Gpt_StartTimer+0xd8>
    {
    case GPT_CHANNEL_TIMER0:
        if (value < 256)
    2e90:	8b 81       	ldd	r24, Y+3	; 0x03
    2e92:	9c 81       	ldd	r25, Y+4	; 0x04
    2e94:	8f 3f       	cpi	r24, 0xFF	; 255
    2e96:	91 05       	cpc	r25, r1
    2e98:	09 f0       	breq	.+2      	; 0x2e9c <Gpt_StartTimer+0x62>
    2e9a:	28 f4       	brcc	.+10     	; 0x2ea6 <Gpt_StartTimer+0x6c>
        {
            OCR0 = value;
    2e9c:	ec e5       	ldi	r30, 0x5C	; 92
    2e9e:	f0 e0       	ldi	r31, 0x00	; 0
    2ea0:	8b 81       	ldd	r24, Y+3	; 0x03
    2ea2:	80 83       	st	Z, r24
    2ea4:	36 c0       	rjmp	.+108    	; 0x2f12 <Gpt_StartTimer+0xd8>
        }
        else
        {
            returnValue = GPT_ERROR;
    2ea6:	19 82       	std	Y+1, r1	; 0x01
    2ea8:	34 c0       	rjmp	.+104    	; 0x2f12 <Gpt_StartTimer+0xd8>
        }
        break;
    case GPT_CHANNEL_TIMER1A:
        if (value < 0xFFFF)
    2eaa:	8b 81       	ldd	r24, Y+3	; 0x03
    2eac:	9c 81       	ldd	r25, Y+4	; 0x04
    2eae:	2f ef       	ldi	r18, 0xFF	; 255
    2eb0:	8f 3f       	cpi	r24, 0xFF	; 255
    2eb2:	92 07       	cpc	r25, r18
    2eb4:	61 f0       	breq	.+24     	; 0x2ece <Gpt_StartTimer+0x94>
        {
            OCR1AL=(0X0FF & value);
    2eb6:	ea e4       	ldi	r30, 0x4A	; 74
    2eb8:	f0 e0       	ldi	r31, 0x00	; 0
    2eba:	8b 81       	ldd	r24, Y+3	; 0x03
    2ebc:	80 83       	st	Z, r24
            OCR1AH=(value>>8);
    2ebe:	eb e4       	ldi	r30, 0x4B	; 75
    2ec0:	f0 e0       	ldi	r31, 0x00	; 0
    2ec2:	8b 81       	ldd	r24, Y+3	; 0x03
    2ec4:	9c 81       	ldd	r25, Y+4	; 0x04
    2ec6:	89 2f       	mov	r24, r25
    2ec8:	99 27       	eor	r25, r25
    2eca:	80 83       	st	Z, r24
    2ecc:	22 c0       	rjmp	.+68     	; 0x2f12 <Gpt_StartTimer+0xd8>
        }
        else
        {
            returnValue = GPT_ERROR;
    2ece:	19 82       	std	Y+1, r1	; 0x01
    2ed0:	20 c0       	rjmp	.+64     	; 0x2f12 <Gpt_StartTimer+0xd8>
        }
        // TODO
        break;
    case GPT_CHANNEL_TIMER1B:
        if (value < 0xFFFF)
    2ed2:	8b 81       	ldd	r24, Y+3	; 0x03
    2ed4:	9c 81       	ldd	r25, Y+4	; 0x04
    2ed6:	3f ef       	ldi	r19, 0xFF	; 255
    2ed8:	8f 3f       	cpi	r24, 0xFF	; 255
    2eda:	93 07       	cpc	r25, r19
    2edc:	61 f0       	breq	.+24     	; 0x2ef6 <Gpt_StartTimer+0xbc>
        {
            OCR1BL=(0X0FF & value);
    2ede:	e8 e4       	ldi	r30, 0x48	; 72
    2ee0:	f0 e0       	ldi	r31, 0x00	; 0
    2ee2:	8b 81       	ldd	r24, Y+3	; 0x03
    2ee4:	80 83       	st	Z, r24
            OCR1BH=(value>>8);
    2ee6:	e9 e4       	ldi	r30, 0x49	; 73
    2ee8:	f0 e0       	ldi	r31, 0x00	; 0
    2eea:	8b 81       	ldd	r24, Y+3	; 0x03
    2eec:	9c 81       	ldd	r25, Y+4	; 0x04
    2eee:	89 2f       	mov	r24, r25
    2ef0:	99 27       	eor	r25, r25
    2ef2:	80 83       	st	Z, r24
    2ef4:	0e c0       	rjmp	.+28     	; 0x2f12 <Gpt_StartTimer+0xd8>
        }
        else
        {
            returnValue = GPT_ERROR;
    2ef6:	19 82       	std	Y+1, r1	; 0x01
    2ef8:	0c c0       	rjmp	.+24     	; 0x2f12 <Gpt_StartTimer+0xd8>
        }
        // TODO
        break;
    case GPT_CHANNEL_TIMER2:
        if (value < 256)
    2efa:	8b 81       	ldd	r24, Y+3	; 0x03
    2efc:	9c 81       	ldd	r25, Y+4	; 0x04
    2efe:	8f 3f       	cpi	r24, 0xFF	; 255
    2f00:	91 05       	cpc	r25, r1
    2f02:	09 f0       	breq	.+2      	; 0x2f06 <Gpt_StartTimer+0xcc>
    2f04:	28 f4       	brcc	.+10     	; 0x2f10 <Gpt_StartTimer+0xd6>
        {
            OCR2 = value;
    2f06:	e3 e4       	ldi	r30, 0x43	; 67
    2f08:	f0 e0       	ldi	r31, 0x00	; 0
    2f0a:	8b 81       	ldd	r24, Y+3	; 0x03
    2f0c:	80 83       	st	Z, r24
    2f0e:	01 c0       	rjmp	.+2      	; 0x2f12 <Gpt_StartTimer+0xd8>
        }
        else
        {
            returnValue = GPT_ERROR;
    2f10:	19 82       	std	Y+1, r1	; 0x01
        break;

    default:
        break;
    }
    return returnValue;
    2f12:	89 81       	ldd	r24, Y+1	; 0x01
}
    2f14:	26 96       	adiw	r28, 0x06	; 6
    2f16:	0f b6       	in	r0, 0x3f	; 63
    2f18:	f8 94       	cli
    2f1a:	de bf       	out	0x3e, r29	; 62
    2f1c:	0f be       	out	0x3f, r0	; 63
    2f1e:	cd bf       	out	0x3d, r28	; 61
    2f20:	cf 91       	pop	r28
    2f22:	df 91       	pop	r29
    2f24:	08 95       	ret

00002f26 <Gpt_GetTimeElapsed>:

u16 Gpt_GetTimeElapsed(Gpt_ChannelType channel)
{
    2f26:	df 93       	push	r29
    2f28:	cf 93       	push	r28
    2f2a:	00 d0       	rcall	.+0      	; 0x2f2c <Gpt_GetTimeElapsed+0x6>
    2f2c:	00 d0       	rcall	.+0      	; 0x2f2e <Gpt_GetTimeElapsed+0x8>
    2f2e:	0f 92       	push	r0
    2f30:	cd b7       	in	r28, 0x3d	; 61
    2f32:	de b7       	in	r29, 0x3e	; 62
    2f34:	8b 83       	std	Y+3, r24	; 0x03
    u16 value = 0;
    2f36:	1a 82       	std	Y+2, r1	; 0x02
    2f38:	19 82       	std	Y+1, r1	; 0x01
    switch (channel)
    2f3a:	8b 81       	ldd	r24, Y+3	; 0x03
    2f3c:	28 2f       	mov	r18, r24
    2f3e:	30 e0       	ldi	r19, 0x00	; 0
    2f40:	3d 83       	std	Y+5, r19	; 0x05
    2f42:	2c 83       	std	Y+4, r18	; 0x04
    2f44:	8c 81       	ldd	r24, Y+4	; 0x04
    2f46:	9d 81       	ldd	r25, Y+5	; 0x05
    2f48:	81 30       	cpi	r24, 0x01	; 1
    2f4a:	91 05       	cpc	r25, r1
    2f4c:	e9 f0       	breq	.+58     	; 0x2f88 <Gpt_GetTimeElapsed+0x62>
    2f4e:	2c 81       	ldd	r18, Y+4	; 0x04
    2f50:	3d 81       	ldd	r19, Y+5	; 0x05
    2f52:	22 30       	cpi	r18, 0x02	; 2
    2f54:	31 05       	cpc	r19, r1
    2f56:	2c f4       	brge	.+10     	; 0x2f62 <Gpt_GetTimeElapsed+0x3c>
    2f58:	8c 81       	ldd	r24, Y+4	; 0x04
    2f5a:	9d 81       	ldd	r25, Y+5	; 0x05
    2f5c:	00 97       	sbiw	r24, 0x00	; 0
    2f5e:	61 f0       	breq	.+24     	; 0x2f78 <Gpt_GetTimeElapsed+0x52>
    2f60:	28 c0       	rjmp	.+80     	; 0x2fb2 <Gpt_GetTimeElapsed+0x8c>
    2f62:	2c 81       	ldd	r18, Y+4	; 0x04
    2f64:	3d 81       	ldd	r19, Y+5	; 0x05
    2f66:	22 30       	cpi	r18, 0x02	; 2
    2f68:	31 05       	cpc	r19, r1
    2f6a:	a9 f0       	breq	.+42     	; 0x2f96 <Gpt_GetTimeElapsed+0x70>
    2f6c:	8c 81       	ldd	r24, Y+4	; 0x04
    2f6e:	9d 81       	ldd	r25, Y+5	; 0x05
    2f70:	83 30       	cpi	r24, 0x03	; 3
    2f72:	91 05       	cpc	r25, r1
    2f74:	b9 f0       	breq	.+46     	; 0x2fa4 <Gpt_GetTimeElapsed+0x7e>
    2f76:	1d c0       	rjmp	.+58     	; 0x2fb2 <Gpt_GetTimeElapsed+0x8c>
    {
    case GPT_CHANNEL_TIMER0:
        value = TCNT0;
    2f78:	e2 e5       	ldi	r30, 0x52	; 82
    2f7a:	f0 e0       	ldi	r31, 0x00	; 0
    2f7c:	80 81       	ld	r24, Z
    2f7e:	88 2f       	mov	r24, r24
    2f80:	90 e0       	ldi	r25, 0x00	; 0
    2f82:	9a 83       	std	Y+2, r25	; 0x02
    2f84:	89 83       	std	Y+1, r24	; 0x01
    2f86:	15 c0       	rjmp	.+42     	; 0x2fb2 <Gpt_GetTimeElapsed+0x8c>
        break;
    case GPT_CHANNEL_TIMER1A:
        // u16 dummy=(0XFFFF & TCNT1H);
        // dummy = dummy <<8;
        value=TCNT1HL_DATA_REGISTER;
    2f88:	ec e4       	ldi	r30, 0x4C	; 76
    2f8a:	f0 e0       	ldi	r31, 0x00	; 0
    2f8c:	80 81       	ld	r24, Z
    2f8e:	91 81       	ldd	r25, Z+1	; 0x01
    2f90:	9a 83       	std	Y+2, r25	; 0x02
    2f92:	89 83       	std	Y+1, r24	; 0x01
    2f94:	0e c0       	rjmp	.+28     	; 0x2fb2 <Gpt_GetTimeElapsed+0x8c>
        // TODO
        break;
    case GPT_CHANNEL_TIMER1B:
        value=TCNT1HL_DATA_REGISTER;
    2f96:	ec e4       	ldi	r30, 0x4C	; 76
    2f98:	f0 e0       	ldi	r31, 0x00	; 0
    2f9a:	80 81       	ld	r24, Z
    2f9c:	91 81       	ldd	r25, Z+1	; 0x01
    2f9e:	9a 83       	std	Y+2, r25	; 0x02
    2fa0:	89 83       	std	Y+1, r24	; 0x01
    2fa2:	07 c0       	rjmp	.+14     	; 0x2fb2 <Gpt_GetTimeElapsed+0x8c>
        // TODO
        break;
    case GPT_CHANNEL_TIMER2:
        value = TCNT2;
    2fa4:	e4 e4       	ldi	r30, 0x44	; 68
    2fa6:	f0 e0       	ldi	r31, 0x00	; 0
    2fa8:	80 81       	ld	r24, Z
    2faa:	88 2f       	mov	r24, r24
    2fac:	90 e0       	ldi	r25, 0x00	; 0
    2fae:	9a 83       	std	Y+2, r25	; 0x02
    2fb0:	89 83       	std	Y+1, r24	; 0x01
        // TODO
        break;
    default:
        break;
    }
    return value;
    2fb2:	89 81       	ldd	r24, Y+1	; 0x01
    2fb4:	9a 81       	ldd	r25, Y+2	; 0x02
}
    2fb6:	0f 90       	pop	r0
    2fb8:	0f 90       	pop	r0
    2fba:	0f 90       	pop	r0
    2fbc:	0f 90       	pop	r0
    2fbe:	0f 90       	pop	r0
    2fc0:	cf 91       	pop	r28
    2fc2:	df 91       	pop	r29
    2fc4:	08 95       	ret

00002fc6 <Gpt_GetTimeRemaining>:

u16 Gpt_GetTimeRemaining(Gpt_ChannelType channel, Gpt_ModeType mode)
{
    2fc6:	df 93       	push	r29
    2fc8:	cf 93       	push	r28
    2fca:	00 d0       	rcall	.+0      	; 0x2fcc <Gpt_GetTimeRemaining+0x6>
    2fcc:	00 d0       	rcall	.+0      	; 0x2fce <Gpt_GetTimeRemaining+0x8>
    2fce:	00 d0       	rcall	.+0      	; 0x2fd0 <Gpt_GetTimeRemaining+0xa>
    2fd0:	cd b7       	in	r28, 0x3d	; 61
    2fd2:	de b7       	in	r29, 0x3e	; 62
    2fd4:	8b 83       	std	Y+3, r24	; 0x03
    2fd6:	6c 83       	std	Y+4, r22	; 0x04
    u16 value = 0;
    2fd8:	1a 82       	std	Y+2, r1	; 0x02
    2fda:	19 82       	std	Y+1, r1	; 0x01
    switch (channel)
    2fdc:	8b 81       	ldd	r24, Y+3	; 0x03
    2fde:	28 2f       	mov	r18, r24
    2fe0:	30 e0       	ldi	r19, 0x00	; 0
    2fe2:	3e 83       	std	Y+6, r19	; 0x06
    2fe4:	2d 83       	std	Y+5, r18	; 0x05
    2fe6:	4d 81       	ldd	r20, Y+5	; 0x05
    2fe8:	5e 81       	ldd	r21, Y+6	; 0x06
    2fea:	41 30       	cpi	r20, 0x01	; 1
    2fec:	51 05       	cpc	r21, r1
    2fee:	e1 f1       	breq	.+120    	; 0x3068 <Gpt_GetTimeRemaining+0xa2>
    2ff0:	8d 81       	ldd	r24, Y+5	; 0x05
    2ff2:	9e 81       	ldd	r25, Y+6	; 0x06
    2ff4:	82 30       	cpi	r24, 0x02	; 2
    2ff6:	91 05       	cpc	r25, r1
    2ff8:	34 f4       	brge	.+12     	; 0x3006 <Gpt_GetTimeRemaining+0x40>
    2ffa:	2d 81       	ldd	r18, Y+5	; 0x05
    2ffc:	3e 81       	ldd	r19, Y+6	; 0x06
    2ffe:	21 15       	cp	r18, r1
    3000:	31 05       	cpc	r19, r1
    3002:	71 f0       	breq	.+28     	; 0x3020 <Gpt_GetTimeRemaining+0x5a>
    3004:	92 c0       	rjmp	.+292    	; 0x312a <Gpt_GetTimeRemaining+0x164>
    3006:	4d 81       	ldd	r20, Y+5	; 0x05
    3008:	5e 81       	ldd	r21, Y+6	; 0x06
    300a:	42 30       	cpi	r20, 0x02	; 2
    300c:	51 05       	cpc	r21, r1
    300e:	09 f4       	brne	.+2      	; 0x3012 <Gpt_GetTimeRemaining+0x4c>
    3010:	4a c0       	rjmp	.+148    	; 0x30a6 <Gpt_GetTimeRemaining+0xe0>
    3012:	8d 81       	ldd	r24, Y+5	; 0x05
    3014:	9e 81       	ldd	r25, Y+6	; 0x06
    3016:	83 30       	cpi	r24, 0x03	; 3
    3018:	91 05       	cpc	r25, r1
    301a:	09 f4       	brne	.+2      	; 0x301e <Gpt_GetTimeRemaining+0x58>
    301c:	64 c0       	rjmp	.+200    	; 0x30e6 <Gpt_GetTimeRemaining+0x120>
    301e:	85 c0       	rjmp	.+266    	; 0x312a <Gpt_GetTimeRemaining+0x164>
    {
    case GPT_CHANNEL_TIMER0:
        if (mode == GPT_MODE_NORMAL)
    3020:	8c 81       	ldd	r24, Y+4	; 0x04
    3022:	88 23       	and	r24, r24
    3024:	61 f4       	brne	.+24     	; 0x303e <Gpt_GetTimeRemaining+0x78>
        {
            value = 0xFF - TCNT0;
    3026:	e2 e5       	ldi	r30, 0x52	; 82
    3028:	f0 e0       	ldi	r31, 0x00	; 0
    302a:	80 81       	ld	r24, Z
    302c:	28 2f       	mov	r18, r24
    302e:	30 e0       	ldi	r19, 0x00	; 0
    3030:	8f ef       	ldi	r24, 0xFF	; 255
    3032:	90 e0       	ldi	r25, 0x00	; 0
    3034:	82 1b       	sub	r24, r18
    3036:	93 0b       	sbc	r25, r19
    3038:	9a 83       	std	Y+2, r25	; 0x02
    303a:	89 83       	std	Y+1, r24	; 0x01
    303c:	76 c0       	rjmp	.+236    	; 0x312a <Gpt_GetTimeRemaining+0x164>
        }
        else if (mode == GPT_MODE_CTC)
    303e:	8c 81       	ldd	r24, Y+4	; 0x04
    3040:	81 30       	cpi	r24, 0x01	; 1
    3042:	09 f0       	breq	.+2      	; 0x3046 <Gpt_GetTimeRemaining+0x80>
    3044:	72 c0       	rjmp	.+228    	; 0x312a <Gpt_GetTimeRemaining+0x164>
        {
            value = OCR0 - TCNT0;
    3046:	ec e5       	ldi	r30, 0x5C	; 92
    3048:	f0 e0       	ldi	r31, 0x00	; 0
    304a:	80 81       	ld	r24, Z
    304c:	28 2f       	mov	r18, r24
    304e:	30 e0       	ldi	r19, 0x00	; 0
    3050:	e2 e5       	ldi	r30, 0x52	; 82
    3052:	f0 e0       	ldi	r31, 0x00	; 0
    3054:	80 81       	ld	r24, Z
    3056:	88 2f       	mov	r24, r24
    3058:	90 e0       	ldi	r25, 0x00	; 0
    305a:	a9 01       	movw	r20, r18
    305c:	48 1b       	sub	r20, r24
    305e:	59 0b       	sbc	r21, r25
    3060:	ca 01       	movw	r24, r20
    3062:	9a 83       	std	Y+2, r25	; 0x02
    3064:	89 83       	std	Y+1, r24	; 0x01
    3066:	61 c0       	rjmp	.+194    	; 0x312a <Gpt_GetTimeRemaining+0x164>
        }
        break;
    case GPT_CHANNEL_TIMER1A:
        if (mode == GPT_MODE_NORMAL)
    3068:	8c 81       	ldd	r24, Y+4	; 0x04
    306a:	88 23       	and	r24, r24
    306c:	49 f4       	brne	.+18     	; 0x3080 <Gpt_GetTimeRemaining+0xba>
        {
            value = 0xFFFF - TCNT1HL_DATA_REGISTER;
    306e:	ec e4       	ldi	r30, 0x4C	; 76
    3070:	f0 e0       	ldi	r31, 0x00	; 0
    3072:	80 81       	ld	r24, Z
    3074:	91 81       	ldd	r25, Z+1	; 0x01
    3076:	80 95       	com	r24
    3078:	90 95       	com	r25
    307a:	9a 83       	std	Y+2, r25	; 0x02
    307c:	89 83       	std	Y+1, r24	; 0x01
    307e:	55 c0       	rjmp	.+170    	; 0x312a <Gpt_GetTimeRemaining+0x164>
        }
        else if (mode == GPT_MODE_CTC)
    3080:	8c 81       	ldd	r24, Y+4	; 0x04
    3082:	81 30       	cpi	r24, 0x01	; 1
    3084:	09 f0       	breq	.+2      	; 0x3088 <Gpt_GetTimeRemaining+0xc2>
    3086:	51 c0       	rjmp	.+162    	; 0x312a <Gpt_GetTimeRemaining+0x164>
        {
            value = OCR1AHL_DATA_REGISTER - TCNT1HL_DATA_REGISTER;
    3088:	ea e4       	ldi	r30, 0x4A	; 74
    308a:	f0 e0       	ldi	r31, 0x00	; 0
    308c:	20 81       	ld	r18, Z
    308e:	31 81       	ldd	r19, Z+1	; 0x01
    3090:	ec e4       	ldi	r30, 0x4C	; 76
    3092:	f0 e0       	ldi	r31, 0x00	; 0
    3094:	80 81       	ld	r24, Z
    3096:	91 81       	ldd	r25, Z+1	; 0x01
    3098:	a9 01       	movw	r20, r18
    309a:	48 1b       	sub	r20, r24
    309c:	59 0b       	sbc	r21, r25
    309e:	ca 01       	movw	r24, r20
    30a0:	9a 83       	std	Y+2, r25	; 0x02
    30a2:	89 83       	std	Y+1, r24	; 0x01
    30a4:	42 c0       	rjmp	.+132    	; 0x312a <Gpt_GetTimeRemaining+0x164>
        }
        // TODO
        break;
    case GPT_CHANNEL_TIMER1B:
        if (mode == GPT_MODE_NORMAL)
    30a6:	8c 81       	ldd	r24, Y+4	; 0x04
    30a8:	88 23       	and	r24, r24
    30aa:	59 f4       	brne	.+22     	; 0x30c2 <Gpt_GetTimeRemaining+0xfc>
        {
            value = 0xFF - TCNT1HL_DATA_REGISTER;
    30ac:	ec e4       	ldi	r30, 0x4C	; 76
    30ae:	f0 e0       	ldi	r31, 0x00	; 0
    30b0:	20 81       	ld	r18, Z
    30b2:	31 81       	ldd	r19, Z+1	; 0x01
    30b4:	8f ef       	ldi	r24, 0xFF	; 255
    30b6:	90 e0       	ldi	r25, 0x00	; 0
    30b8:	82 1b       	sub	r24, r18
    30ba:	93 0b       	sbc	r25, r19
    30bc:	9a 83       	std	Y+2, r25	; 0x02
    30be:	89 83       	std	Y+1, r24	; 0x01
    30c0:	34 c0       	rjmp	.+104    	; 0x312a <Gpt_GetTimeRemaining+0x164>
        }
        else if (mode == GPT_MODE_CTC)
    30c2:	8c 81       	ldd	r24, Y+4	; 0x04
    30c4:	81 30       	cpi	r24, 0x01	; 1
    30c6:	89 f5       	brne	.+98     	; 0x312a <Gpt_GetTimeRemaining+0x164>
        {
            value = OCR1BHL_DATA_REGISTER - TCNT1HL_DATA_REGISTER;
    30c8:	e8 e4       	ldi	r30, 0x48	; 72
    30ca:	f0 e0       	ldi	r31, 0x00	; 0
    30cc:	20 81       	ld	r18, Z
    30ce:	31 81       	ldd	r19, Z+1	; 0x01
    30d0:	ec e4       	ldi	r30, 0x4C	; 76
    30d2:	f0 e0       	ldi	r31, 0x00	; 0
    30d4:	80 81       	ld	r24, Z
    30d6:	91 81       	ldd	r25, Z+1	; 0x01
    30d8:	a9 01       	movw	r20, r18
    30da:	48 1b       	sub	r20, r24
    30dc:	59 0b       	sbc	r21, r25
    30de:	ca 01       	movw	r24, r20
    30e0:	9a 83       	std	Y+2, r25	; 0x02
    30e2:	89 83       	std	Y+1, r24	; 0x01
    30e4:	22 c0       	rjmp	.+68     	; 0x312a <Gpt_GetTimeRemaining+0x164>
        }
        // TODO
        break;
    case GPT_CHANNEL_TIMER2:
        if (mode == GPT_MODE_NORMAL)
    30e6:	8c 81       	ldd	r24, Y+4	; 0x04
    30e8:	88 23       	and	r24, r24
    30ea:	61 f4       	brne	.+24     	; 0x3104 <Gpt_GetTimeRemaining+0x13e>
        {
            value = 0xFF - TCNT2;
    30ec:	e4 e4       	ldi	r30, 0x44	; 68
    30ee:	f0 e0       	ldi	r31, 0x00	; 0
    30f0:	80 81       	ld	r24, Z
    30f2:	28 2f       	mov	r18, r24
    30f4:	30 e0       	ldi	r19, 0x00	; 0
    30f6:	8f ef       	ldi	r24, 0xFF	; 255
    30f8:	90 e0       	ldi	r25, 0x00	; 0
    30fa:	82 1b       	sub	r24, r18
    30fc:	93 0b       	sbc	r25, r19
    30fe:	9a 83       	std	Y+2, r25	; 0x02
    3100:	89 83       	std	Y+1, r24	; 0x01
    3102:	13 c0       	rjmp	.+38     	; 0x312a <Gpt_GetTimeRemaining+0x164>
        }
        else if (mode == GPT_MODE_CTC)
    3104:	8c 81       	ldd	r24, Y+4	; 0x04
    3106:	81 30       	cpi	r24, 0x01	; 1
    3108:	81 f4       	brne	.+32     	; 0x312a <Gpt_GetTimeRemaining+0x164>
        {
            value = OCR2 - TCNT2;
    310a:	e3 e4       	ldi	r30, 0x43	; 67
    310c:	f0 e0       	ldi	r31, 0x00	; 0
    310e:	80 81       	ld	r24, Z
    3110:	28 2f       	mov	r18, r24
    3112:	30 e0       	ldi	r19, 0x00	; 0
    3114:	e4 e4       	ldi	r30, 0x44	; 68
    3116:	f0 e0       	ldi	r31, 0x00	; 0
    3118:	80 81       	ld	r24, Z
    311a:	88 2f       	mov	r24, r24
    311c:	90 e0       	ldi	r25, 0x00	; 0
    311e:	a9 01       	movw	r20, r18
    3120:	48 1b       	sub	r20, r24
    3122:	59 0b       	sbc	r21, r25
    3124:	ca 01       	movw	r24, r20
    3126:	9a 83       	std	Y+2, r25	; 0x02
    3128:	89 83       	std	Y+1, r24	; 0x01
        // TODO
        break;
    default:
        break;
    }
    return value;
    312a:	89 81       	ldd	r24, Y+1	; 0x01
    312c:	9a 81       	ldd	r25, Y+2	; 0x02
}
    312e:	26 96       	adiw	r28, 0x06	; 6
    3130:	0f b6       	in	r0, 0x3f	; 63
    3132:	f8 94       	cli
    3134:	de bf       	out	0x3e, r29	; 62
    3136:	0f be       	out	0x3f, r0	; 63
    3138:	cd bf       	out	0x3d, r28	; 61
    313a:	cf 91       	pop	r28
    313c:	df 91       	pop	r29
    313e:	08 95       	ret

00003140 <Gpt_EnableNotification>:

void Gpt_EnableNotification(Gpt_ChannelType channel, Gpt_ModeType mode, void (*callback)(void))
{
    3140:	df 93       	push	r29
    3142:	cf 93       	push	r28
    3144:	00 d0       	rcall	.+0      	; 0x3146 <Gpt_EnableNotification+0x6>
    3146:	00 d0       	rcall	.+0      	; 0x3148 <Gpt_EnableNotification+0x8>
    3148:	00 d0       	rcall	.+0      	; 0x314a <Gpt_EnableNotification+0xa>
    314a:	cd b7       	in	r28, 0x3d	; 61
    314c:	de b7       	in	r29, 0x3e	; 62
    314e:	89 83       	std	Y+1, r24	; 0x01
    3150:	6a 83       	std	Y+2, r22	; 0x02
    3152:	5c 83       	std	Y+4, r21	; 0x04
    3154:	4b 83       	std	Y+3, r20	; 0x03
    switch (channel)
    3156:	89 81       	ldd	r24, Y+1	; 0x01
    3158:	28 2f       	mov	r18, r24
    315a:	30 e0       	ldi	r19, 0x00	; 0
    315c:	3e 83       	std	Y+6, r19	; 0x06
    315e:	2d 83       	std	Y+5, r18	; 0x05
    3160:	8d 81       	ldd	r24, Y+5	; 0x05
    3162:	9e 81       	ldd	r25, Y+6	; 0x06
    3164:	81 30       	cpi	r24, 0x01	; 1
    3166:	91 05       	cpc	r25, r1
    3168:	d1 f1       	breq	.+116    	; 0x31de <Gpt_EnableNotification+0x9e>
    316a:	2d 81       	ldd	r18, Y+5	; 0x05
    316c:	3e 81       	ldd	r19, Y+6	; 0x06
    316e:	22 30       	cpi	r18, 0x02	; 2
    3170:	31 05       	cpc	r19, r1
    3172:	2c f4       	brge	.+10     	; 0x317e <Gpt_EnableNotification+0x3e>
    3174:	8d 81       	ldd	r24, Y+5	; 0x05
    3176:	9e 81       	ldd	r25, Y+6	; 0x06
    3178:	00 97       	sbiw	r24, 0x00	; 0
    317a:	71 f0       	breq	.+28     	; 0x3198 <Gpt_EnableNotification+0x58>
    317c:	96 c0       	rjmp	.+300    	; 0x32aa <Gpt_EnableNotification+0x16a>
    317e:	2d 81       	ldd	r18, Y+5	; 0x05
    3180:	3e 81       	ldd	r19, Y+6	; 0x06
    3182:	22 30       	cpi	r18, 0x02	; 2
    3184:	31 05       	cpc	r19, r1
    3186:	09 f4       	brne	.+2      	; 0x318a <Gpt_EnableNotification+0x4a>
    3188:	4d c0       	rjmp	.+154    	; 0x3224 <Gpt_EnableNotification+0xe4>
    318a:	8d 81       	ldd	r24, Y+5	; 0x05
    318c:	9e 81       	ldd	r25, Y+6	; 0x06
    318e:	83 30       	cpi	r24, 0x03	; 3
    3190:	91 05       	cpc	r25, r1
    3192:	09 f4       	brne	.+2      	; 0x3196 <Gpt_EnableNotification+0x56>
    3194:	69 c0       	rjmp	.+210    	; 0x3268 <Gpt_EnableNotification+0x128>
    3196:	89 c0       	rjmp	.+274    	; 0x32aa <Gpt_EnableNotification+0x16a>
    {
    case GPT_CHANNEL_TIMER0:
        if (mode == GPT_MODE_NORMAL)
    3198:	8a 81       	ldd	r24, Y+2	; 0x02
    319a:	88 23       	and	r24, r24
    319c:	71 f4       	brne	.+28     	; 0x31ba <Gpt_EnableNotification+0x7a>
        {
            Gpt_Timer0_Callback_Normal = callback;
    319e:	8b 81       	ldd	r24, Y+3	; 0x03
    31a0:	9c 81       	ldd	r25, Y+4	; 0x04
    31a2:	90 93 85 00 	sts	0x0085, r25
    31a6:	80 93 84 00 	sts	0x0084, r24
            SET_BIT(TIMSK, TIMSK_TOIE0);
    31aa:	a9 e5       	ldi	r26, 0x59	; 89
    31ac:	b0 e0       	ldi	r27, 0x00	; 0
    31ae:	e9 e5       	ldi	r30, 0x59	; 89
    31b0:	f0 e0       	ldi	r31, 0x00	; 0
    31b2:	80 81       	ld	r24, Z
    31b4:	81 60       	ori	r24, 0x01	; 1
    31b6:	8c 93       	st	X, r24
    31b8:	78 c0       	rjmp	.+240    	; 0x32aa <Gpt_EnableNotification+0x16a>
        }
        else if (mode == GPT_MODE_CTC)
    31ba:	8a 81       	ldd	r24, Y+2	; 0x02
    31bc:	81 30       	cpi	r24, 0x01	; 1
    31be:	09 f0       	breq	.+2      	; 0x31c2 <Gpt_EnableNotification+0x82>
    31c0:	74 c0       	rjmp	.+232    	; 0x32aa <Gpt_EnableNotification+0x16a>
        {
            Gpt_Timer0_Callback_Ctc = callback;
    31c2:	8b 81       	ldd	r24, Y+3	; 0x03
    31c4:	9c 81       	ldd	r25, Y+4	; 0x04
    31c6:	90 93 7b 00 	sts	0x007B, r25
    31ca:	80 93 7a 00 	sts	0x007A, r24
            SET_BIT(TIMSK, TIMSK_OCIE0);
    31ce:	a9 e5       	ldi	r26, 0x59	; 89
    31d0:	b0 e0       	ldi	r27, 0x00	; 0
    31d2:	e9 e5       	ldi	r30, 0x59	; 89
    31d4:	f0 e0       	ldi	r31, 0x00	; 0
    31d6:	80 81       	ld	r24, Z
    31d8:	82 60       	ori	r24, 0x02	; 2
    31da:	8c 93       	st	X, r24
    31dc:	66 c0       	rjmp	.+204    	; 0x32aa <Gpt_EnableNotification+0x16a>
        }
        break;

    case GPT_CHANNEL_TIMER1A:
        if (mode == GPT_MODE_NORMAL)
    31de:	8a 81       	ldd	r24, Y+2	; 0x02
    31e0:	88 23       	and	r24, r24
    31e2:	71 f4       	brne	.+28     	; 0x3200 <Gpt_EnableNotification+0xc0>
        {
            Gpt_Timer1_Callback_Normal = callback;
    31e4:	8b 81       	ldd	r24, Y+3	; 0x03
    31e6:	9c 81       	ldd	r25, Y+4	; 0x04
    31e8:	90 93 87 00 	sts	0x0087, r25
    31ec:	80 93 86 00 	sts	0x0086, r24
            SET_BIT(TIMSK, TIMSK_TOIE1);
    31f0:	a9 e5       	ldi	r26, 0x59	; 89
    31f2:	b0 e0       	ldi	r27, 0x00	; 0
    31f4:	e9 e5       	ldi	r30, 0x59	; 89
    31f6:	f0 e0       	ldi	r31, 0x00	; 0
    31f8:	80 81       	ld	r24, Z
    31fa:	84 60       	ori	r24, 0x04	; 4
    31fc:	8c 93       	st	X, r24
    31fe:	55 c0       	rjmp	.+170    	; 0x32aa <Gpt_EnableNotification+0x16a>
            // TODO
        }
        else if (mode == GPT_MODE_CTC)
    3200:	8a 81       	ldd	r24, Y+2	; 0x02
    3202:	81 30       	cpi	r24, 0x01	; 1
    3204:	09 f0       	breq	.+2      	; 0x3208 <Gpt_EnableNotification+0xc8>
    3206:	51 c0       	rjmp	.+162    	; 0x32aa <Gpt_EnableNotification+0x16a>
        {
            Gpt_Timer1A_Callback_Ctc = callback;
    3208:	8b 81       	ldd	r24, Y+3	; 0x03
    320a:	9c 81       	ldd	r25, Y+4	; 0x04
    320c:	90 93 83 00 	sts	0x0083, r25
    3210:	80 93 82 00 	sts	0x0082, r24
            SET_BIT(TIMSK, TIMSK_OCIE1A);
    3214:	a9 e5       	ldi	r26, 0x59	; 89
    3216:	b0 e0       	ldi	r27, 0x00	; 0
    3218:	e9 e5       	ldi	r30, 0x59	; 89
    321a:	f0 e0       	ldi	r31, 0x00	; 0
    321c:	80 81       	ld	r24, Z
    321e:	80 61       	ori	r24, 0x10	; 16
    3220:	8c 93       	st	X, r24
    3222:	43 c0       	rjmp	.+134    	; 0x32aa <Gpt_EnableNotification+0x16a>
            // TODO
        }
        break;

    case GPT_CHANNEL_TIMER1B:
        if (mode == GPT_MODE_NORMAL)
    3224:	8a 81       	ldd	r24, Y+2	; 0x02
    3226:	88 23       	and	r24, r24
    3228:	71 f4       	brne	.+28     	; 0x3246 <Gpt_EnableNotification+0x106>
        {
            Gpt_Timer1_Callback_Normal = callback;
    322a:	8b 81       	ldd	r24, Y+3	; 0x03
    322c:	9c 81       	ldd	r25, Y+4	; 0x04
    322e:	90 93 87 00 	sts	0x0087, r25
    3232:	80 93 86 00 	sts	0x0086, r24
            SET_BIT(TIMSK, TIMSK_TOIE1);
    3236:	a9 e5       	ldi	r26, 0x59	; 89
    3238:	b0 e0       	ldi	r27, 0x00	; 0
    323a:	e9 e5       	ldi	r30, 0x59	; 89
    323c:	f0 e0       	ldi	r31, 0x00	; 0
    323e:	80 81       	ld	r24, Z
    3240:	84 60       	ori	r24, 0x04	; 4
    3242:	8c 93       	st	X, r24
    3244:	32 c0       	rjmp	.+100    	; 0x32aa <Gpt_EnableNotification+0x16a>
            // TODO
        }
        else if (mode == GPT_MODE_CTC)
    3246:	8a 81       	ldd	r24, Y+2	; 0x02
    3248:	81 30       	cpi	r24, 0x01	; 1
    324a:	79 f5       	brne	.+94     	; 0x32aa <Gpt_EnableNotification+0x16a>
        {
            Gpt_Timer1B_Callback_Ctc = callback;
    324c:	8b 81       	ldd	r24, Y+3	; 0x03
    324e:	9c 81       	ldd	r25, Y+4	; 0x04
    3250:	90 93 7f 00 	sts	0x007F, r25
    3254:	80 93 7e 00 	sts	0x007E, r24
            SET_BIT(TIMSK, TIMSK_OCIE1B);
    3258:	a9 e5       	ldi	r26, 0x59	; 89
    325a:	b0 e0       	ldi	r27, 0x00	; 0
    325c:	e9 e5       	ldi	r30, 0x59	; 89
    325e:	f0 e0       	ldi	r31, 0x00	; 0
    3260:	80 81       	ld	r24, Z
    3262:	88 60       	ori	r24, 0x08	; 8
    3264:	8c 93       	st	X, r24
    3266:	21 c0       	rjmp	.+66     	; 0x32aa <Gpt_EnableNotification+0x16a>
            // TODO
        }
        break;

    case GPT_CHANNEL_TIMER2:
        if (mode == GPT_MODE_NORMAL)
    3268:	8a 81       	ldd	r24, Y+2	; 0x02
    326a:	88 23       	and	r24, r24
    326c:	71 f4       	brne	.+28     	; 0x328a <Gpt_EnableNotification+0x14a>
        {
            Gpt_Timer2_Callback_Normal = callback;
    326e:	8b 81       	ldd	r24, Y+3	; 0x03
    3270:	9c 81       	ldd	r25, Y+4	; 0x04
    3272:	90 93 81 00 	sts	0x0081, r25
    3276:	80 93 80 00 	sts	0x0080, r24
            SET_BIT(TIMSK, TIMSK_TOIE2);
    327a:	a9 e5       	ldi	r26, 0x59	; 89
    327c:	b0 e0       	ldi	r27, 0x00	; 0
    327e:	e9 e5       	ldi	r30, 0x59	; 89
    3280:	f0 e0       	ldi	r31, 0x00	; 0
    3282:	80 81       	ld	r24, Z
    3284:	80 64       	ori	r24, 0x40	; 64
    3286:	8c 93       	st	X, r24
    3288:	10 c0       	rjmp	.+32     	; 0x32aa <Gpt_EnableNotification+0x16a>
            // TODO
        }
        else if (mode == GPT_MODE_CTC)
    328a:	8a 81       	ldd	r24, Y+2	; 0x02
    328c:	81 30       	cpi	r24, 0x01	; 1
    328e:	69 f4       	brne	.+26     	; 0x32aa <Gpt_EnableNotification+0x16a>
        {
            Gpt_Timer2_Callback_Ctc = callback;
    3290:	8b 81       	ldd	r24, Y+3	; 0x03
    3292:	9c 81       	ldd	r25, Y+4	; 0x04
    3294:	90 93 7d 00 	sts	0x007D, r25
    3298:	80 93 7c 00 	sts	0x007C, r24
            SET_BIT(TIMSK, TIMSK_OCIE2);
    329c:	a9 e5       	ldi	r26, 0x59	; 89
    329e:	b0 e0       	ldi	r27, 0x00	; 0
    32a0:	e9 e5       	ldi	r30, 0x59	; 89
    32a2:	f0 e0       	ldi	r31, 0x00	; 0
    32a4:	80 81       	ld	r24, Z
    32a6:	80 68       	ori	r24, 0x80	; 128
    32a8:	8c 93       	st	X, r24
        break;

    default:
        break;
    }
}
    32aa:	26 96       	adiw	r28, 0x06	; 6
    32ac:	0f b6       	in	r0, 0x3f	; 63
    32ae:	f8 94       	cli
    32b0:	de bf       	out	0x3e, r29	; 62
    32b2:	0f be       	out	0x3f, r0	; 63
    32b4:	cd bf       	out	0x3d, r28	; 61
    32b6:	cf 91       	pop	r28
    32b8:	df 91       	pop	r29
    32ba:	08 95       	ret

000032bc <Gpt_DisableNotification>:

void Gpt_DisableNotification(Gpt_ChannelType channel, Gpt_ModeType mode)
{
    32bc:	df 93       	push	r29
    32be:	cf 93       	push	r28
    32c0:	00 d0       	rcall	.+0      	; 0x32c2 <Gpt_DisableNotification+0x6>
    32c2:	00 d0       	rcall	.+0      	; 0x32c4 <Gpt_DisableNotification+0x8>
    32c4:	cd b7       	in	r28, 0x3d	; 61
    32c6:	de b7       	in	r29, 0x3e	; 62
    32c8:	89 83       	std	Y+1, r24	; 0x01
    32ca:	6a 83       	std	Y+2, r22	; 0x02
    switch (channel)
    32cc:	89 81       	ldd	r24, Y+1	; 0x01
    32ce:	28 2f       	mov	r18, r24
    32d0:	30 e0       	ldi	r19, 0x00	; 0
    32d2:	3c 83       	std	Y+4, r19	; 0x04
    32d4:	2b 83       	std	Y+3, r18	; 0x03
    32d6:	8b 81       	ldd	r24, Y+3	; 0x03
    32d8:	9c 81       	ldd	r25, Y+4	; 0x04
    32da:	81 30       	cpi	r24, 0x01	; 1
    32dc:	91 05       	cpc	r25, r1
    32de:	69 f1       	breq	.+90     	; 0x333a <Gpt_DisableNotification+0x7e>
    32e0:	2b 81       	ldd	r18, Y+3	; 0x03
    32e2:	3c 81       	ldd	r19, Y+4	; 0x04
    32e4:	22 30       	cpi	r18, 0x02	; 2
    32e6:	31 05       	cpc	r19, r1
    32e8:	2c f4       	brge	.+10     	; 0x32f4 <Gpt_DisableNotification+0x38>
    32ea:	8b 81       	ldd	r24, Y+3	; 0x03
    32ec:	9c 81       	ldd	r25, Y+4	; 0x04
    32ee:	00 97       	sbiw	r24, 0x00	; 0
    32f0:	69 f0       	breq	.+26     	; 0x330c <Gpt_DisableNotification+0x50>
    32f2:	64 c0       	rjmp	.+200    	; 0x33bc <Gpt_DisableNotification+0x100>
    32f4:	2b 81       	ldd	r18, Y+3	; 0x03
    32f6:	3c 81       	ldd	r19, Y+4	; 0x04
    32f8:	22 30       	cpi	r18, 0x02	; 2
    32fa:	31 05       	cpc	r19, r1
    32fc:	a1 f1       	breq	.+104    	; 0x3366 <Gpt_DisableNotification+0xaa>
    32fe:	8b 81       	ldd	r24, Y+3	; 0x03
    3300:	9c 81       	ldd	r25, Y+4	; 0x04
    3302:	83 30       	cpi	r24, 0x03	; 3
    3304:	91 05       	cpc	r25, r1
    3306:	09 f4       	brne	.+2      	; 0x330a <Gpt_DisableNotification+0x4e>
    3308:	44 c0       	rjmp	.+136    	; 0x3392 <Gpt_DisableNotification+0xd6>
    330a:	58 c0       	rjmp	.+176    	; 0x33bc <Gpt_DisableNotification+0x100>
    {
    case GPT_CHANNEL_TIMER0:
        if (mode == GPT_MODE_NORMAL)
    330c:	8a 81       	ldd	r24, Y+2	; 0x02
    330e:	88 23       	and	r24, r24
    3310:	41 f4       	brne	.+16     	; 0x3322 <Gpt_DisableNotification+0x66>
        {
            CLR_BIT(TIMSK, TIMSK_TOIE0);
    3312:	a9 e5       	ldi	r26, 0x59	; 89
    3314:	b0 e0       	ldi	r27, 0x00	; 0
    3316:	e9 e5       	ldi	r30, 0x59	; 89
    3318:	f0 e0       	ldi	r31, 0x00	; 0
    331a:	80 81       	ld	r24, Z
    331c:	8e 7f       	andi	r24, 0xFE	; 254
    331e:	8c 93       	st	X, r24
    3320:	4d c0       	rjmp	.+154    	; 0x33bc <Gpt_DisableNotification+0x100>
        }
        else if (mode == GPT_MODE_CTC)
    3322:	8a 81       	ldd	r24, Y+2	; 0x02
    3324:	81 30       	cpi	r24, 0x01	; 1
    3326:	09 f0       	breq	.+2      	; 0x332a <Gpt_DisableNotification+0x6e>
    3328:	49 c0       	rjmp	.+146    	; 0x33bc <Gpt_DisableNotification+0x100>
        {
            CLR_BIT(TIMSK, TIMSK_OCIE0);
    332a:	a9 e5       	ldi	r26, 0x59	; 89
    332c:	b0 e0       	ldi	r27, 0x00	; 0
    332e:	e9 e5       	ldi	r30, 0x59	; 89
    3330:	f0 e0       	ldi	r31, 0x00	; 0
    3332:	80 81       	ld	r24, Z
    3334:	8d 7f       	andi	r24, 0xFD	; 253
    3336:	8c 93       	st	X, r24
    3338:	41 c0       	rjmp	.+130    	; 0x33bc <Gpt_DisableNotification+0x100>
        }
        break;

    case GPT_CHANNEL_TIMER1A:
        if (mode == GPT_MODE_NORMAL)
    333a:	8a 81       	ldd	r24, Y+2	; 0x02
    333c:	88 23       	and	r24, r24
    333e:	41 f4       	brne	.+16     	; 0x3350 <Gpt_DisableNotification+0x94>
        {
            CLR_BIT(TIMSK, TIMSK_TOIE1);
    3340:	a9 e5       	ldi	r26, 0x59	; 89
    3342:	b0 e0       	ldi	r27, 0x00	; 0
    3344:	e9 e5       	ldi	r30, 0x59	; 89
    3346:	f0 e0       	ldi	r31, 0x00	; 0
    3348:	80 81       	ld	r24, Z
    334a:	8b 7f       	andi	r24, 0xFB	; 251
    334c:	8c 93       	st	X, r24
    334e:	36 c0       	rjmp	.+108    	; 0x33bc <Gpt_DisableNotification+0x100>
            // TODO
        }
        else if (mode == GPT_MODE_CTC)
    3350:	8a 81       	ldd	r24, Y+2	; 0x02
    3352:	81 30       	cpi	r24, 0x01	; 1
    3354:	99 f5       	brne	.+102    	; 0x33bc <Gpt_DisableNotification+0x100>
        {
            CLR_BIT(TIMSK, TIMSK_OCIE1A);
    3356:	a9 e5       	ldi	r26, 0x59	; 89
    3358:	b0 e0       	ldi	r27, 0x00	; 0
    335a:	e9 e5       	ldi	r30, 0x59	; 89
    335c:	f0 e0       	ldi	r31, 0x00	; 0
    335e:	80 81       	ld	r24, Z
    3360:	8f 7e       	andi	r24, 0xEF	; 239
    3362:	8c 93       	st	X, r24
    3364:	2b c0       	rjmp	.+86     	; 0x33bc <Gpt_DisableNotification+0x100>
            // TODO
        }
        break;

    case GPT_CHANNEL_TIMER1B:
        if (mode == GPT_MODE_NORMAL)
    3366:	8a 81       	ldd	r24, Y+2	; 0x02
    3368:	88 23       	and	r24, r24
    336a:	41 f4       	brne	.+16     	; 0x337c <Gpt_DisableNotification+0xc0>
        {
            CLR_BIT(TIMSK, TIMSK_TOIE1);
    336c:	a9 e5       	ldi	r26, 0x59	; 89
    336e:	b0 e0       	ldi	r27, 0x00	; 0
    3370:	e9 e5       	ldi	r30, 0x59	; 89
    3372:	f0 e0       	ldi	r31, 0x00	; 0
    3374:	80 81       	ld	r24, Z
    3376:	8b 7f       	andi	r24, 0xFB	; 251
    3378:	8c 93       	st	X, r24
    337a:	20 c0       	rjmp	.+64     	; 0x33bc <Gpt_DisableNotification+0x100>
            // TODO
        }
        else if (mode == GPT_MODE_CTC)
    337c:	8a 81       	ldd	r24, Y+2	; 0x02
    337e:	81 30       	cpi	r24, 0x01	; 1
    3380:	e9 f4       	brne	.+58     	; 0x33bc <Gpt_DisableNotification+0x100>
        {
            CLR_BIT(TIMSK, TIMSK_OCIE1B);
    3382:	a9 e5       	ldi	r26, 0x59	; 89
    3384:	b0 e0       	ldi	r27, 0x00	; 0
    3386:	e9 e5       	ldi	r30, 0x59	; 89
    3388:	f0 e0       	ldi	r31, 0x00	; 0
    338a:	80 81       	ld	r24, Z
    338c:	87 7f       	andi	r24, 0xF7	; 247
    338e:	8c 93       	st	X, r24
    3390:	15 c0       	rjmp	.+42     	; 0x33bc <Gpt_DisableNotification+0x100>
            // TODO
        }
        break;

    case GPT_CHANNEL_TIMER2:
        if (mode == GPT_MODE_NORMAL)
    3392:	8a 81       	ldd	r24, Y+2	; 0x02
    3394:	88 23       	and	r24, r24
    3396:	41 f4       	brne	.+16     	; 0x33a8 <Gpt_DisableNotification+0xec>
        {
            CLR_BIT(TIMSK, TIMSK_TOIE2);
    3398:	a9 e5       	ldi	r26, 0x59	; 89
    339a:	b0 e0       	ldi	r27, 0x00	; 0
    339c:	e9 e5       	ldi	r30, 0x59	; 89
    339e:	f0 e0       	ldi	r31, 0x00	; 0
    33a0:	80 81       	ld	r24, Z
    33a2:	8f 7b       	andi	r24, 0xBF	; 191
    33a4:	8c 93       	st	X, r24
    33a6:	0a c0       	rjmp	.+20     	; 0x33bc <Gpt_DisableNotification+0x100>
            // TODO
        }
        else if (mode == GPT_MODE_CTC)
    33a8:	8a 81       	ldd	r24, Y+2	; 0x02
    33aa:	81 30       	cpi	r24, 0x01	; 1
    33ac:	39 f4       	brne	.+14     	; 0x33bc <Gpt_DisableNotification+0x100>
        {
            CLR_BIT(TIMSK, TIMSK_OCIE2);
    33ae:	a9 e5       	ldi	r26, 0x59	; 89
    33b0:	b0 e0       	ldi	r27, 0x00	; 0
    33b2:	e9 e5       	ldi	r30, 0x59	; 89
    33b4:	f0 e0       	ldi	r31, 0x00	; 0
    33b6:	80 81       	ld	r24, Z
    33b8:	8f 77       	andi	r24, 0x7F	; 127
    33ba:	8c 93       	st	X, r24
        break;

    default:
        break;
    }
}
    33bc:	0f 90       	pop	r0
    33be:	0f 90       	pop	r0
    33c0:	0f 90       	pop	r0
    33c2:	0f 90       	pop	r0
    33c4:	cf 91       	pop	r28
    33c6:	df 91       	pop	r29
    33c8:	08 95       	ret

000033ca <servo>:


void servo(u8 angle){
    33ca:	df 93       	push	r29
    33cc:	cf 93       	push	r28
    33ce:	00 d0       	rcall	.+0      	; 0x33d0 <servo+0x6>
    33d0:	00 d0       	rcall	.+0      	; 0x33d2 <servo+0x8>
    33d2:	0f 92       	push	r0
    33d4:	cd b7       	in	r28, 0x3d	; 61
    33d6:	de b7       	in	r29, 0x3e	; 62
    33d8:	8d 83       	std	Y+5, r24	; 0x05
    Gpt_ConfigType config = {GPT_CHANNEL_TIMER1A, SPT_MODE_Fast_PWM_mod14, GPT_OUTPUT_CLEAR, GPT_PRESCALER_8};
    33da:	81 e0       	ldi	r24, 0x01	; 1
    33dc:	89 83       	std	Y+1, r24	; 0x01
    33de:	84 e0       	ldi	r24, 0x04	; 4
    33e0:	8a 83       	std	Y+2, r24	; 0x02
    33e2:	83 e0       	ldi	r24, 0x03	; 3
    33e4:	8b 83       	std	Y+3, r24	; 0x03
    33e6:	82 e0       	ldi	r24, 0x02	; 2
    33e8:	8c 83       	std	Y+4, r24	; 0x04

    // CLR_BIT(TCCR1A,TCCR1A_WGM10);
    // SET_BIT(TCCR1A,TCCR1A_WGM11);
    // SET_BIT(TCCR1B,TCCR1B_WGM12);
    // SET_BIT(TCCR1B,TCCR1B_WGM13);
    Gpt_Init(&config);
    33ea:	ce 01       	movw	r24, r28
    33ec:	01 96       	adiw	r24, 0x01	; 1
    33ee:	0e 94 79 10 	call	0x20f2	; 0x20f2 <Gpt_Init>
    ICR1_LH=0x0000;
    33f2:	e6 e4       	ldi	r30, 0x46	; 70
    33f4:	f0 e0       	ldi	r31, 0x00	; 0
    33f6:	11 82       	std	Z+1, r1	; 0x01
    33f8:	10 82       	st	Z, r1
    ICR1_LH=20000*8;
    33fa:	e6 e4       	ldi	r30, 0x46	; 70
    33fc:	f0 e0       	ldi	r31, 0x00	; 0
    33fe:	80 e0       	ldi	r24, 0x00	; 0
    3400:	91 e7       	ldi	r25, 0x71	; 113
    3402:	91 83       	std	Z+1, r25	; 0x01
    3404:	80 83       	st	Z, r24
    OCR1BHL_DATA_REGISTER=20000;
    3406:	e8 e4       	ldi	r30, 0x48	; 72
    3408:	f0 e0       	ldi	r31, 0x00	; 0
    340a:	80 e2       	ldi	r24, 0x20	; 32
    340c:	9e e4       	ldi	r25, 0x4E	; 78
    340e:	91 83       	std	Z+1, r25	; 0x01
    3410:	80 83       	st	Z, r24
    OCR1AHL_DATA_REGISTER=0x0000;
    3412:	ea e4       	ldi	r30, 0x4A	; 74
    3414:	f0 e0       	ldi	r31, 0x00	; 0
    3416:	11 82       	std	Z+1, r1	; 0x01
    3418:	10 82       	st	Z, r1
    OCR1AHL_DATA_REGISTER=((90 *1000)/180 +1000);
    341a:	ea e4       	ldi	r30, 0x4A	; 74
    341c:	f0 e0       	ldi	r31, 0x00	; 0
    341e:	8f e6       	ldi	r24, 0x6F	; 111
    3420:	94 e0       	ldi	r25, 0x04	; 4
    3422:	91 83       	std	Z+1, r25	; 0x01
    3424:	80 83       	st	Z, r24
    // OCR1AHL_DATA_REGISTER=2000;

   
    
}
    3426:	0f 90       	pop	r0
    3428:	0f 90       	pop	r0
    342a:	0f 90       	pop	r0
    342c:	0f 90       	pop	r0
    342e:	0f 90       	pop	r0
    3430:	cf 91       	pop	r28
    3432:	df 91       	pop	r29
    3434:	08 95       	ret

00003436 <Keypad_Init>:
#include "std_types.h"
#include "macros.h"
#include "DIO.h"
#include "Keypad.h"

void Keypad_Init(void) {
    3436:	df 93       	push	r29
    3438:	cf 93       	push	r28
    343a:	cd b7       	in	r28, 0x3d	; 61
    343c:	de b7       	in	r29, 0x3e	; 62
    /* Set all rows to input pullup */
    DIO_SetPinMode(KEYPAD_PIN_R0, DIO_INPUT_PULLUP);
    343e:	83 e0       	ldi	r24, 0x03	; 3
    3440:	60 e0       	ldi	r22, 0x00	; 0
    3442:	41 e0       	ldi	r20, 0x01	; 1
    3444:	0e 94 6f 08 	call	0x10de	; 0x10de <DIO_SetPinMode>
    DIO_SetPinMode(KEYPAD_PIN_R1, DIO_INPUT_PULLUP);
    3448:	83 e0       	ldi	r24, 0x03	; 3
    344a:	61 e0       	ldi	r22, 0x01	; 1
    344c:	41 e0       	ldi	r20, 0x01	; 1
    344e:	0e 94 6f 08 	call	0x10de	; 0x10de <DIO_SetPinMode>
    DIO_SetPinMode(KEYPAD_PIN_R2, DIO_INPUT_PULLUP);
    3452:	83 e0       	ldi	r24, 0x03	; 3
    3454:	62 e0       	ldi	r22, 0x02	; 2
    3456:	41 e0       	ldi	r20, 0x01	; 1
    3458:	0e 94 6f 08 	call	0x10de	; 0x10de <DIO_SetPinMode>
    DIO_SetPinMode(KEYPAD_PIN_R3, DIO_INPUT_PULLUP);
    345c:	83 e0       	ldi	r24, 0x03	; 3
    345e:	63 e0       	ldi	r22, 0x03	; 3
    3460:	41 e0       	ldi	r20, 0x01	; 1
    3462:	0e 94 6f 08 	call	0x10de	; 0x10de <DIO_SetPinMode>
    /* Set all columns to output */
    DIO_SetPinMode(KEYPAD_PIN_C0, DIO_OUTPUT);
    3466:	83 e0       	ldi	r24, 0x03	; 3
    3468:	64 e0       	ldi	r22, 0x04	; 4
    346a:	42 e0       	ldi	r20, 0x02	; 2
    346c:	0e 94 6f 08 	call	0x10de	; 0x10de <DIO_SetPinMode>
    DIO_SetPinMode(KEYPAD_PIN_C1, DIO_OUTPUT);
    3470:	83 e0       	ldi	r24, 0x03	; 3
    3472:	65 e0       	ldi	r22, 0x05	; 5
    3474:	42 e0       	ldi	r20, 0x02	; 2
    3476:	0e 94 6f 08 	call	0x10de	; 0x10de <DIO_SetPinMode>
    DIO_SetPinMode(KEYPAD_PIN_C2, DIO_OUTPUT);
    347a:	83 e0       	ldi	r24, 0x03	; 3
    347c:	66 e0       	ldi	r22, 0x06	; 6
    347e:	42 e0       	ldi	r20, 0x02	; 2
    3480:	0e 94 6f 08 	call	0x10de	; 0x10de <DIO_SetPinMode>
    DIO_SetPinMode(KEYPAD_PIN_C3, DIO_OUTPUT);
    3484:	83 e0       	ldi	r24, 0x03	; 3
    3486:	67 e0       	ldi	r22, 0x07	; 7
    3488:	42 e0       	ldi	r20, 0x02	; 2
    348a:	0e 94 6f 08 	call	0x10de	; 0x10de <DIO_SetPinMode>
}
    348e:	cf 91       	pop	r28
    3490:	df 91       	pop	r29
    3492:	08 95       	ret

00003494 <Keypad_GetButtonState>:
	low  -> Pressed

*/


Keypad_StateType Keypad_GetButtonState(Keypad_ButtonType button) {
    3494:	df 93       	push	r29
    3496:	cf 93       	push	r28
    3498:	cd b7       	in	r28, 0x3d	; 61
    349a:	de b7       	in	r29, 0x3e	; 62
    349c:	28 97       	sbiw	r28, 0x08	; 8
    349e:	0f b6       	in	r0, 0x3f	; 63
    34a0:	f8 94       	cli
    34a2:	de bf       	out	0x3e, r29	; 62
    34a4:	0f be       	out	0x3f, r0	; 63
    34a6:	cd bf       	out	0x3d, r28	; 61
    34a8:	8c 83       	std	Y+4, r24	; 0x04
    Keypad_StateType state = KEYPAD_STATE_NOT_PRESSED;
    34aa:	81 e0       	ldi	r24, 0x01	; 1
    34ac:	8b 83       	std	Y+3, r24	; 0x03
    u8 row = button / 4;
    34ae:	8c 81       	ldd	r24, Y+4	; 0x04
    34b0:	86 95       	lsr	r24
    34b2:	86 95       	lsr	r24
    34b4:	8a 83       	std	Y+2, r24	; 0x02
    u8 column = button % 4;
    34b6:	8c 81       	ldd	r24, Y+4	; 0x04
    34b8:	83 70       	andi	r24, 0x03	; 3
    34ba:	89 83       	std	Y+1, r24	; 0x01
    DIO_SetPinLevel(KEYPAD_PIN_C0, DIO_HIGH);
    34bc:	83 e0       	ldi	r24, 0x03	; 3
    34be:	64 e0       	ldi	r22, 0x04	; 4
    34c0:	41 e0       	ldi	r20, 0x01	; 1
    34c2:	0e 94 7d 0b 	call	0x16fa	; 0x16fa <DIO_SetPinLevel>
    DIO_SetPinLevel(KEYPAD_PIN_C1, DIO_HIGH);
    34c6:	83 e0       	ldi	r24, 0x03	; 3
    34c8:	65 e0       	ldi	r22, 0x05	; 5
    34ca:	41 e0       	ldi	r20, 0x01	; 1
    34cc:	0e 94 7d 0b 	call	0x16fa	; 0x16fa <DIO_SetPinLevel>
    DIO_SetPinLevel(KEYPAD_PIN_C2, DIO_HIGH);
    34d0:	83 e0       	ldi	r24, 0x03	; 3
    34d2:	66 e0       	ldi	r22, 0x06	; 6
    34d4:	41 e0       	ldi	r20, 0x01	; 1
    34d6:	0e 94 7d 0b 	call	0x16fa	; 0x16fa <DIO_SetPinLevel>
    DIO_SetPinLevel(KEYPAD_PIN_C3, DIO_HIGH);
    34da:	83 e0       	ldi	r24, 0x03	; 3
    34dc:	67 e0       	ldi	r22, 0x07	; 7
    34de:	41 e0       	ldi	r20, 0x01	; 1
    34e0:	0e 94 7d 0b 	call	0x16fa	; 0x16fa <DIO_SetPinLevel>
    switch (column)
    34e4:	89 81       	ldd	r24, Y+1	; 0x01
    34e6:	28 2f       	mov	r18, r24
    34e8:	30 e0       	ldi	r19, 0x00	; 0
    34ea:	38 87       	std	Y+8, r19	; 0x08
    34ec:	2f 83       	std	Y+7, r18	; 0x07
    34ee:	8f 81       	ldd	r24, Y+7	; 0x07
    34f0:	98 85       	ldd	r25, Y+8	; 0x08
    34f2:	81 30       	cpi	r24, 0x01	; 1
    34f4:	91 05       	cpc	r25, r1
    34f6:	d9 f0       	breq	.+54     	; 0x352e <Keypad_GetButtonState+0x9a>
    34f8:	2f 81       	ldd	r18, Y+7	; 0x07
    34fa:	38 85       	ldd	r19, Y+8	; 0x08
    34fc:	22 30       	cpi	r18, 0x02	; 2
    34fe:	31 05       	cpc	r19, r1
    3500:	2c f4       	brge	.+10     	; 0x350c <Keypad_GetButtonState+0x78>
    3502:	8f 81       	ldd	r24, Y+7	; 0x07
    3504:	98 85       	ldd	r25, Y+8	; 0x08
    3506:	00 97       	sbiw	r24, 0x00	; 0
    3508:	61 f0       	breq	.+24     	; 0x3522 <Keypad_GetButtonState+0x8e>
    350a:	22 c0       	rjmp	.+68     	; 0x3550 <Keypad_GetButtonState+0xbc>
    350c:	2f 81       	ldd	r18, Y+7	; 0x07
    350e:	38 85       	ldd	r19, Y+8	; 0x08
    3510:	22 30       	cpi	r18, 0x02	; 2
    3512:	31 05       	cpc	r19, r1
    3514:	91 f0       	breq	.+36     	; 0x353a <Keypad_GetButtonState+0xa6>
    3516:	8f 81       	ldd	r24, Y+7	; 0x07
    3518:	98 85       	ldd	r25, Y+8	; 0x08
    351a:	83 30       	cpi	r24, 0x03	; 3
    351c:	91 05       	cpc	r25, r1
    351e:	99 f0       	breq	.+38     	; 0x3546 <Keypad_GetButtonState+0xb2>
    3520:	17 c0       	rjmp	.+46     	; 0x3550 <Keypad_GetButtonState+0xbc>
    {
    case 0:
        DIO_SetPinLevel(KEYPAD_PIN_C0, DIO_LOW);
    3522:	83 e0       	ldi	r24, 0x03	; 3
    3524:	64 e0       	ldi	r22, 0x04	; 4
    3526:	40 e0       	ldi	r20, 0x00	; 0
    3528:	0e 94 7d 0b 	call	0x16fa	; 0x16fa <DIO_SetPinLevel>
    352c:	11 c0       	rjmp	.+34     	; 0x3550 <Keypad_GetButtonState+0xbc>
        break;
    case 1:
        DIO_SetPinLevel(KEYPAD_PIN_C1, DIO_LOW);
    352e:	83 e0       	ldi	r24, 0x03	; 3
    3530:	65 e0       	ldi	r22, 0x05	; 5
    3532:	40 e0       	ldi	r20, 0x00	; 0
    3534:	0e 94 7d 0b 	call	0x16fa	; 0x16fa <DIO_SetPinLevel>
    3538:	0b c0       	rjmp	.+22     	; 0x3550 <Keypad_GetButtonState+0xbc>
        break;
    case 2:
        DIO_SetPinLevel(KEYPAD_PIN_C2, DIO_LOW);
    353a:	83 e0       	ldi	r24, 0x03	; 3
    353c:	66 e0       	ldi	r22, 0x06	; 6
    353e:	40 e0       	ldi	r20, 0x00	; 0
    3540:	0e 94 7d 0b 	call	0x16fa	; 0x16fa <DIO_SetPinLevel>
    3544:	05 c0       	rjmp	.+10     	; 0x3550 <Keypad_GetButtonState+0xbc>
        break;
    case 3:
        DIO_SetPinLevel(KEYPAD_PIN_C3, DIO_LOW);
    3546:	83 e0       	ldi	r24, 0x03	; 3
    3548:	67 e0       	ldi	r22, 0x07	; 7
    354a:	40 e0       	ldi	r20, 0x00	; 0
    354c:	0e 94 7d 0b 	call	0x16fa	; 0x16fa <DIO_SetPinLevel>
        break;
    default:
        break;
    }
    switch (row)
    3550:	8a 81       	ldd	r24, Y+2	; 0x02
    3552:	28 2f       	mov	r18, r24
    3554:	30 e0       	ldi	r19, 0x00	; 0
    3556:	3e 83       	std	Y+6, r19	; 0x06
    3558:	2d 83       	std	Y+5, r18	; 0x05
    355a:	8d 81       	ldd	r24, Y+5	; 0x05
    355c:	9e 81       	ldd	r25, Y+6	; 0x06
    355e:	81 30       	cpi	r24, 0x01	; 1
    3560:	91 05       	cpc	r25, r1
    3562:	e9 f0       	breq	.+58     	; 0x359e <Keypad_GetButtonState+0x10a>
    3564:	2d 81       	ldd	r18, Y+5	; 0x05
    3566:	3e 81       	ldd	r19, Y+6	; 0x06
    3568:	22 30       	cpi	r18, 0x02	; 2
    356a:	31 05       	cpc	r19, r1
    356c:	2c f4       	brge	.+10     	; 0x3578 <Keypad_GetButtonState+0xe4>
    356e:	8d 81       	ldd	r24, Y+5	; 0x05
    3570:	9e 81       	ldd	r25, Y+6	; 0x06
    3572:	00 97       	sbiw	r24, 0x00	; 0
    3574:	61 f0       	breq	.+24     	; 0x358e <Keypad_GetButtonState+0xfa>
    3576:	2a c0       	rjmp	.+84     	; 0x35cc <Keypad_GetButtonState+0x138>
    3578:	2d 81       	ldd	r18, Y+5	; 0x05
    357a:	3e 81       	ldd	r19, Y+6	; 0x06
    357c:	22 30       	cpi	r18, 0x02	; 2
    357e:	31 05       	cpc	r19, r1
    3580:	b1 f0       	breq	.+44     	; 0x35ae <Keypad_GetButtonState+0x11a>
    3582:	8d 81       	ldd	r24, Y+5	; 0x05
    3584:	9e 81       	ldd	r25, Y+6	; 0x06
    3586:	83 30       	cpi	r24, 0x03	; 3
    3588:	91 05       	cpc	r25, r1
    358a:	c9 f0       	breq	.+50     	; 0x35be <Keypad_GetButtonState+0x12a>
    358c:	1f c0       	rjmp	.+62     	; 0x35cc <Keypad_GetButtonState+0x138>
    {
    case 0:
        if (DIO_ReadPinLevel(KEYPAD_PIN_R0) == DIO_LOW) {
    358e:	83 e0       	ldi	r24, 0x03	; 3
    3590:	60 e0       	ldi	r22, 0x00	; 0
    3592:	0e 94 2c 0d 	call	0x1a58	; 0x1a58 <DIO_ReadPinLevel>
    3596:	88 23       	and	r24, r24
    3598:	c9 f4       	brne	.+50     	; 0x35cc <Keypad_GetButtonState+0x138>
            state = KEYPAD_STATE_PRESSED;
    359a:	1b 82       	std	Y+3, r1	; 0x03
    359c:	17 c0       	rjmp	.+46     	; 0x35cc <Keypad_GetButtonState+0x138>
        }
        break;
    case 1:
        if (DIO_ReadPinLevel(KEYPAD_PIN_R1) == DIO_LOW) {
    359e:	83 e0       	ldi	r24, 0x03	; 3
    35a0:	61 e0       	ldi	r22, 0x01	; 1
    35a2:	0e 94 2c 0d 	call	0x1a58	; 0x1a58 <DIO_ReadPinLevel>
    35a6:	88 23       	and	r24, r24
    35a8:	89 f4       	brne	.+34     	; 0x35cc <Keypad_GetButtonState+0x138>
            state = KEYPAD_STATE_PRESSED;
    35aa:	1b 82       	std	Y+3, r1	; 0x03
    35ac:	0f c0       	rjmp	.+30     	; 0x35cc <Keypad_GetButtonState+0x138>
        }
        break;
    case 2:
        if (DIO_ReadPinLevel(KEYPAD_PIN_R2) == DIO_LOW) {
    35ae:	83 e0       	ldi	r24, 0x03	; 3
    35b0:	62 e0       	ldi	r22, 0x02	; 2
    35b2:	0e 94 2c 0d 	call	0x1a58	; 0x1a58 <DIO_ReadPinLevel>
    35b6:	88 23       	and	r24, r24
    35b8:	49 f4       	brne	.+18     	; 0x35cc <Keypad_GetButtonState+0x138>
            state = KEYPAD_STATE_PRESSED;
    35ba:	1b 82       	std	Y+3, r1	; 0x03
    35bc:	07 c0       	rjmp	.+14     	; 0x35cc <Keypad_GetButtonState+0x138>
        }
        break;
    case 3:
        if (DIO_ReadPinLevel(KEYPAD_PIN_R3) == DIO_LOW) {
    35be:	83 e0       	ldi	r24, 0x03	; 3
    35c0:	63 e0       	ldi	r22, 0x03	; 3
    35c2:	0e 94 2c 0d 	call	0x1a58	; 0x1a58 <DIO_ReadPinLevel>
    35c6:	88 23       	and	r24, r24
    35c8:	09 f4       	brne	.+2      	; 0x35cc <Keypad_GetButtonState+0x138>
            state = KEYPAD_STATE_PRESSED;
    35ca:	1b 82       	std	Y+3, r1	; 0x03
        }
        break;
    default:
        break;
    }
    return state;
    35cc:	8b 81       	ldd	r24, Y+3	; 0x03
}
    35ce:	28 96       	adiw	r28, 0x08	; 8
    35d0:	0f b6       	in	r0, 0x3f	; 63
    35d2:	f8 94       	cli
    35d4:	de bf       	out	0x3e, r29	; 62
    35d6:	0f be       	out	0x3f, r0	; 63
    35d8:	cd bf       	out	0x3d, r28	; 61
    35da:	cf 91       	pop	r28
    35dc:	df 91       	pop	r29
    35de:	08 95       	ret

000035e0 <Keypad_GetButtonStatePooling>:

Keypad_StateType Keypad_GetButtonStatePooling(Keypad_ButtonType button) {
    35e0:	df 93       	push	r29
    35e2:	cf 93       	push	r28
    35e4:	cd b7       	in	r28, 0x3d	; 61
    35e6:	de b7       	in	r29, 0x3e	; 62
    35e8:	28 97       	sbiw	r28, 0x08	; 8
    35ea:	0f b6       	in	r0, 0x3f	; 63
    35ec:	f8 94       	cli
    35ee:	de bf       	out	0x3e, r29	; 62
    35f0:	0f be       	out	0x3f, r0	; 63
    35f2:	cd bf       	out	0x3d, r28	; 61
    35f4:	8c 83       	std	Y+4, r24	; 0x04
    Keypad_StateType state = KEYPAD_STATE_NOT_PRESSED;
    35f6:	81 e0       	ldi	r24, 0x01	; 1
    35f8:	8b 83       	std	Y+3, r24	; 0x03
    u8 row = button / 4;
    35fa:	8c 81       	ldd	r24, Y+4	; 0x04
    35fc:	86 95       	lsr	r24
    35fe:	86 95       	lsr	r24
    3600:	8a 83       	std	Y+2, r24	; 0x02
    u8 column = button % 4;
    3602:	8c 81       	ldd	r24, Y+4	; 0x04
    3604:	83 70       	andi	r24, 0x03	; 3
    3606:	89 83       	std	Y+1, r24	; 0x01
    DIO_SetPinLevel(KEYPAD_PIN_C0, DIO_HIGH);
    3608:	83 e0       	ldi	r24, 0x03	; 3
    360a:	64 e0       	ldi	r22, 0x04	; 4
    360c:	41 e0       	ldi	r20, 0x01	; 1
    360e:	0e 94 7d 0b 	call	0x16fa	; 0x16fa <DIO_SetPinLevel>
    DIO_SetPinLevel(KEYPAD_PIN_C1, DIO_HIGH);
    3612:	83 e0       	ldi	r24, 0x03	; 3
    3614:	65 e0       	ldi	r22, 0x05	; 5
    3616:	41 e0       	ldi	r20, 0x01	; 1
    3618:	0e 94 7d 0b 	call	0x16fa	; 0x16fa <DIO_SetPinLevel>
    DIO_SetPinLevel(KEYPAD_PIN_C2, DIO_HIGH);
    361c:	83 e0       	ldi	r24, 0x03	; 3
    361e:	66 e0       	ldi	r22, 0x06	; 6
    3620:	41 e0       	ldi	r20, 0x01	; 1
    3622:	0e 94 7d 0b 	call	0x16fa	; 0x16fa <DIO_SetPinLevel>
    DIO_SetPinLevel(KEYPAD_PIN_C3, DIO_HIGH);
    3626:	83 e0       	ldi	r24, 0x03	; 3
    3628:	67 e0       	ldi	r22, 0x07	; 7
    362a:	41 e0       	ldi	r20, 0x01	; 1
    362c:	0e 94 7d 0b 	call	0x16fa	; 0x16fa <DIO_SetPinLevel>
    switch (column)
    3630:	89 81       	ldd	r24, Y+1	; 0x01
    3632:	28 2f       	mov	r18, r24
    3634:	30 e0       	ldi	r19, 0x00	; 0
    3636:	38 87       	std	Y+8, r19	; 0x08
    3638:	2f 83       	std	Y+7, r18	; 0x07
    363a:	8f 81       	ldd	r24, Y+7	; 0x07
    363c:	98 85       	ldd	r25, Y+8	; 0x08
    363e:	81 30       	cpi	r24, 0x01	; 1
    3640:	91 05       	cpc	r25, r1
    3642:	d9 f0       	breq	.+54     	; 0x367a <Keypad_GetButtonStatePooling+0x9a>
    3644:	2f 81       	ldd	r18, Y+7	; 0x07
    3646:	38 85       	ldd	r19, Y+8	; 0x08
    3648:	22 30       	cpi	r18, 0x02	; 2
    364a:	31 05       	cpc	r19, r1
    364c:	2c f4       	brge	.+10     	; 0x3658 <Keypad_GetButtonStatePooling+0x78>
    364e:	8f 81       	ldd	r24, Y+7	; 0x07
    3650:	98 85       	ldd	r25, Y+8	; 0x08
    3652:	00 97       	sbiw	r24, 0x00	; 0
    3654:	61 f0       	breq	.+24     	; 0x366e <Keypad_GetButtonStatePooling+0x8e>
    3656:	22 c0       	rjmp	.+68     	; 0x369c <Keypad_GetButtonStatePooling+0xbc>
    3658:	2f 81       	ldd	r18, Y+7	; 0x07
    365a:	38 85       	ldd	r19, Y+8	; 0x08
    365c:	22 30       	cpi	r18, 0x02	; 2
    365e:	31 05       	cpc	r19, r1
    3660:	91 f0       	breq	.+36     	; 0x3686 <Keypad_GetButtonStatePooling+0xa6>
    3662:	8f 81       	ldd	r24, Y+7	; 0x07
    3664:	98 85       	ldd	r25, Y+8	; 0x08
    3666:	83 30       	cpi	r24, 0x03	; 3
    3668:	91 05       	cpc	r25, r1
    366a:	99 f0       	breq	.+38     	; 0x3692 <Keypad_GetButtonStatePooling+0xb2>
    366c:	17 c0       	rjmp	.+46     	; 0x369c <Keypad_GetButtonStatePooling+0xbc>
    {
    case 0:
        DIO_SetPinLevel(KEYPAD_PIN_C0, DIO_LOW);
    366e:	83 e0       	ldi	r24, 0x03	; 3
    3670:	64 e0       	ldi	r22, 0x04	; 4
    3672:	40 e0       	ldi	r20, 0x00	; 0
    3674:	0e 94 7d 0b 	call	0x16fa	; 0x16fa <DIO_SetPinLevel>
    3678:	11 c0       	rjmp	.+34     	; 0x369c <Keypad_GetButtonStatePooling+0xbc>
        break;
    case 1:
        DIO_SetPinLevel(KEYPAD_PIN_C1, DIO_LOW);
    367a:	83 e0       	ldi	r24, 0x03	; 3
    367c:	65 e0       	ldi	r22, 0x05	; 5
    367e:	40 e0       	ldi	r20, 0x00	; 0
    3680:	0e 94 7d 0b 	call	0x16fa	; 0x16fa <DIO_SetPinLevel>
    3684:	0b c0       	rjmp	.+22     	; 0x369c <Keypad_GetButtonStatePooling+0xbc>
        break;
    case 2:
        DIO_SetPinLevel(KEYPAD_PIN_C2, DIO_LOW);
    3686:	83 e0       	ldi	r24, 0x03	; 3
    3688:	66 e0       	ldi	r22, 0x06	; 6
    368a:	40 e0       	ldi	r20, 0x00	; 0
    368c:	0e 94 7d 0b 	call	0x16fa	; 0x16fa <DIO_SetPinLevel>
    3690:	05 c0       	rjmp	.+10     	; 0x369c <Keypad_GetButtonStatePooling+0xbc>
        break;
    case 3:
        DIO_SetPinLevel(KEYPAD_PIN_C3, DIO_LOW);
    3692:	83 e0       	ldi	r24, 0x03	; 3
    3694:	67 e0       	ldi	r22, 0x07	; 7
    3696:	40 e0       	ldi	r20, 0x00	; 0
    3698:	0e 94 7d 0b 	call	0x16fa	; 0x16fa <DIO_SetPinLevel>
        break;
    default:
        break;
    }
    switch (row)
    369c:	8a 81       	ldd	r24, Y+2	; 0x02
    369e:	28 2f       	mov	r18, r24
    36a0:	30 e0       	ldi	r19, 0x00	; 0
    36a2:	3e 83       	std	Y+6, r19	; 0x06
    36a4:	2d 83       	std	Y+5, r18	; 0x05
    36a6:	8d 81       	ldd	r24, Y+5	; 0x05
    36a8:	9e 81       	ldd	r25, Y+6	; 0x06
    36aa:	81 30       	cpi	r24, 0x01	; 1
    36ac:	91 05       	cpc	r25, r1
    36ae:	19 f1       	breq	.+70     	; 0x36f6 <Keypad_GetButtonStatePooling+0x116>
    36b0:	2d 81       	ldd	r18, Y+5	; 0x05
    36b2:	3e 81       	ldd	r19, Y+6	; 0x06
    36b4:	22 30       	cpi	r18, 0x02	; 2
    36b6:	31 05       	cpc	r19, r1
    36b8:	2c f4       	brge	.+10     	; 0x36c4 <Keypad_GetButtonStatePooling+0xe4>
    36ba:	8d 81       	ldd	r24, Y+5	; 0x05
    36bc:	9e 81       	ldd	r25, Y+6	; 0x06
    36be:	00 97       	sbiw	r24, 0x00	; 0
    36c0:	61 f0       	breq	.+24     	; 0x36da <Keypad_GetButtonStatePooling+0xfa>
    36c2:	42 c0       	rjmp	.+132    	; 0x3748 <Keypad_GetButtonStatePooling+0x168>
    36c4:	2d 81       	ldd	r18, Y+5	; 0x05
    36c6:	3e 81       	ldd	r19, Y+6	; 0x06
    36c8:	22 30       	cpi	r18, 0x02	; 2
    36ca:	31 05       	cpc	r19, r1
    36cc:	11 f1       	breq	.+68     	; 0x3712 <Keypad_GetButtonStatePooling+0x132>
    36ce:	8d 81       	ldd	r24, Y+5	; 0x05
    36d0:	9e 81       	ldd	r25, Y+6	; 0x06
    36d2:	83 30       	cpi	r24, 0x03	; 3
    36d4:	91 05       	cpc	r25, r1
    36d6:	59 f1       	breq	.+86     	; 0x372e <Keypad_GetButtonStatePooling+0x14e>
    36d8:	37 c0       	rjmp	.+110    	; 0x3748 <Keypad_GetButtonStatePooling+0x168>
    {
    case 0:
        if (DIO_ReadPinLevel(KEYPAD_PIN_R0) == DIO_LOW) {
    36da:	83 e0       	ldi	r24, 0x03	; 3
    36dc:	60 e0       	ldi	r22, 0x00	; 0
    36de:	0e 94 2c 0d 	call	0x1a58	; 0x1a58 <DIO_ReadPinLevel>
    36e2:	88 23       	and	r24, r24
    36e4:	89 f5       	brne	.+98     	; 0x3748 <Keypad_GetButtonStatePooling+0x168>
            state = KEYPAD_STATE_PRESSED;
    36e6:	1b 82       	std	Y+3, r1	; 0x03
            while (DIO_ReadPinLevel(KEYPAD_PIN_R0) == DIO_LOW);
    36e8:	83 e0       	ldi	r24, 0x03	; 3
    36ea:	60 e0       	ldi	r22, 0x00	; 0
    36ec:	0e 94 2c 0d 	call	0x1a58	; 0x1a58 <DIO_ReadPinLevel>
    36f0:	88 23       	and	r24, r24
    36f2:	d1 f3       	breq	.-12     	; 0x36e8 <Keypad_GetButtonStatePooling+0x108>
    36f4:	29 c0       	rjmp	.+82     	; 0x3748 <Keypad_GetButtonStatePooling+0x168>
        }
        break;
    case 1:
        if (DIO_ReadPinLevel(KEYPAD_PIN_R1) == DIO_LOW) {
    36f6:	83 e0       	ldi	r24, 0x03	; 3
    36f8:	61 e0       	ldi	r22, 0x01	; 1
    36fa:	0e 94 2c 0d 	call	0x1a58	; 0x1a58 <DIO_ReadPinLevel>
    36fe:	88 23       	and	r24, r24
    3700:	19 f5       	brne	.+70     	; 0x3748 <Keypad_GetButtonStatePooling+0x168>
            state = KEYPAD_STATE_PRESSED;
    3702:	1b 82       	std	Y+3, r1	; 0x03
            while (DIO_ReadPinLevel(KEYPAD_PIN_R1) == DIO_LOW);
    3704:	83 e0       	ldi	r24, 0x03	; 3
    3706:	61 e0       	ldi	r22, 0x01	; 1
    3708:	0e 94 2c 0d 	call	0x1a58	; 0x1a58 <DIO_ReadPinLevel>
    370c:	88 23       	and	r24, r24
    370e:	d1 f3       	breq	.-12     	; 0x3704 <Keypad_GetButtonStatePooling+0x124>
    3710:	1b c0       	rjmp	.+54     	; 0x3748 <Keypad_GetButtonStatePooling+0x168>
        }
        break;
    case 2:
        if (DIO_ReadPinLevel(KEYPAD_PIN_R2) == DIO_LOW) {
    3712:	83 e0       	ldi	r24, 0x03	; 3
    3714:	62 e0       	ldi	r22, 0x02	; 2
    3716:	0e 94 2c 0d 	call	0x1a58	; 0x1a58 <DIO_ReadPinLevel>
    371a:	88 23       	and	r24, r24
    371c:	a9 f4       	brne	.+42     	; 0x3748 <Keypad_GetButtonStatePooling+0x168>
            state = KEYPAD_STATE_PRESSED;
    371e:	1b 82       	std	Y+3, r1	; 0x03
            while (DIO_ReadPinLevel(KEYPAD_PIN_R2) == DIO_LOW);
    3720:	83 e0       	ldi	r24, 0x03	; 3
    3722:	62 e0       	ldi	r22, 0x02	; 2
    3724:	0e 94 2c 0d 	call	0x1a58	; 0x1a58 <DIO_ReadPinLevel>
    3728:	88 23       	and	r24, r24
    372a:	d1 f3       	breq	.-12     	; 0x3720 <Keypad_GetButtonStatePooling+0x140>
    372c:	0d c0       	rjmp	.+26     	; 0x3748 <Keypad_GetButtonStatePooling+0x168>
        }
        break;
    case 3:
        if (DIO_ReadPinLevel(KEYPAD_PIN_R3) == DIO_LOW) {
    372e:	83 e0       	ldi	r24, 0x03	; 3
    3730:	63 e0       	ldi	r22, 0x03	; 3
    3732:	0e 94 2c 0d 	call	0x1a58	; 0x1a58 <DIO_ReadPinLevel>
    3736:	88 23       	and	r24, r24
    3738:	39 f4       	brne	.+14     	; 0x3748 <Keypad_GetButtonStatePooling+0x168>
            state = KEYPAD_STATE_PRESSED;
    373a:	1b 82       	std	Y+3, r1	; 0x03
            while (DIO_ReadPinLevel(KEYPAD_PIN_R3) == DIO_LOW);
    373c:	83 e0       	ldi	r24, 0x03	; 3
    373e:	63 e0       	ldi	r22, 0x03	; 3
    3740:	0e 94 2c 0d 	call	0x1a58	; 0x1a58 <DIO_ReadPinLevel>
    3744:	88 23       	and	r24, r24
    3746:	d1 f3       	breq	.-12     	; 0x373c <Keypad_GetButtonStatePooling+0x15c>
        }
        break;
    default:
        break;
    }
    return state;
    3748:	8b 81       	ldd	r24, Y+3	; 0x03
}
    374a:	28 96       	adiw	r28, 0x08	; 8
    374c:	0f b6       	in	r0, 0x3f	; 63
    374e:	f8 94       	cli
    3750:	de bf       	out	0x3e, r29	; 62
    3752:	0f be       	out	0x3f, r0	; 63
    3754:	cd bf       	out	0x3d, r28	; 61
    3756:	cf 91       	pop	r28
    3758:	df 91       	pop	r29
    375a:	08 95       	ret

0000375c <Keypad_GetPressedButton>:


Keypad_ButtonType Keypad_GetPressedButton(void) {
    375c:	df 93       	push	r29
    375e:	cf 93       	push	r28
    3760:	00 d0       	rcall	.+0      	; 0x3762 <Keypad_GetPressedButton+0x6>
    3762:	cd b7       	in	r28, 0x3d	; 61
    3764:	de b7       	in	r29, 0x3e	; 62
    u8 i=0;
    3766:	1a 82       	std	Y+2, r1	; 0x02
    Keypad_ButtonType pressed_button = KEYPAD_BUTTON_INVALID;
    3768:	80 e1       	ldi	r24, 0x10	; 16
    376a:	89 83       	std	Y+1, r24	; 0x01
    for (i=0; i<16; i++) {
    376c:	1a 82       	std	Y+2, r1	; 0x02
    376e:	0b c0       	rjmp	.+22     	; 0x3786 <Keypad_GetPressedButton+0x2a>
        if (Keypad_GetButtonStatePooling(i) == KEYPAD_STATE_PRESSED) {
    3770:	8a 81       	ldd	r24, Y+2	; 0x02
    3772:	0e 94 f0 1a 	call	0x35e0	; 0x35e0 <Keypad_GetButtonStatePooling>
    3776:	88 23       	and	r24, r24
    3778:	19 f4       	brne	.+6      	; 0x3780 <Keypad_GetPressedButton+0x24>
            pressed_button = i;
    377a:	8a 81       	ldd	r24, Y+2	; 0x02
    377c:	89 83       	std	Y+1, r24	; 0x01
    377e:	06 c0       	rjmp	.+12     	; 0x378c <Keypad_GetPressedButton+0x30>


Keypad_ButtonType Keypad_GetPressedButton(void) {
    u8 i=0;
    Keypad_ButtonType pressed_button = KEYPAD_BUTTON_INVALID;
    for (i=0; i<16; i++) {
    3780:	8a 81       	ldd	r24, Y+2	; 0x02
    3782:	8f 5f       	subi	r24, 0xFF	; 255
    3784:	8a 83       	std	Y+2, r24	; 0x02
    3786:	8a 81       	ldd	r24, Y+2	; 0x02
    3788:	80 31       	cpi	r24, 0x10	; 16
    378a:	90 f3       	brcs	.-28     	; 0x3770 <Keypad_GetPressedButton+0x14>
        if (Keypad_GetButtonStatePooling(i) == KEYPAD_STATE_PRESSED) {
            pressed_button = i;
            break;
        }
    }
    return pressed_button;
    378c:	89 81       	ldd	r24, Y+1	; 0x01
}
    378e:	0f 90       	pop	r0
    3790:	0f 90       	pop	r0
    3792:	cf 91       	pop	r28
    3794:	df 91       	pop	r29
    3796:	08 95       	ret

00003798 <LCD_Init>:

static void LCD_SendData(u8 data);
static void LCD_SendCommand(u8 command);
static void LCD_InitPinsMode(void);

void LCD_Init(void) {
    3798:	df 93       	push	r29
    379a:	cf 93       	push	r28
    379c:	cd b7       	in	r28, 0x3d	; 61
    379e:	de b7       	in	r29, 0x3e	; 62
    37a0:	2f 97       	sbiw	r28, 0x0f	; 15
    37a2:	0f b6       	in	r0, 0x3f	; 63
    37a4:	f8 94       	cli
    37a6:	de bf       	out	0x3e, r29	; 62
    37a8:	0f be       	out	0x3f, r0	; 63
    37aa:	cd bf       	out	0x3d, r28	; 61
    u8 command = 0;
    37ac:	1f 86       	std	Y+15, r1	; 0x0f
    LCD_InitPinsMode();
    37ae:	0e 94 a3 1f 	call	0x3f46	; 0x3f46 <LCD_InitPinsMode>
    37b2:	80 e0       	ldi	r24, 0x00	; 0
    37b4:	90 e0       	ldi	r25, 0x00	; 0
    37b6:	a0 ef       	ldi	r26, 0xF0	; 240
    37b8:	b1 e4       	ldi	r27, 0x41	; 65
    37ba:	8b 87       	std	Y+11, r24	; 0x0b
    37bc:	9c 87       	std	Y+12, r25	; 0x0c
    37be:	ad 87       	std	Y+13, r26	; 0x0d
    37c0:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    37c2:	6b 85       	ldd	r22, Y+11	; 0x0b
    37c4:	7c 85       	ldd	r23, Y+12	; 0x0c
    37c6:	8d 85       	ldd	r24, Y+13	; 0x0d
    37c8:	9e 85       	ldd	r25, Y+14	; 0x0e
    37ca:	20 e0       	ldi	r18, 0x00	; 0
    37cc:	30 e0       	ldi	r19, 0x00	; 0
    37ce:	4a ef       	ldi	r20, 0xFA	; 250
    37d0:	54 e4       	ldi	r21, 0x44	; 68
    37d2:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    37d6:	dc 01       	movw	r26, r24
    37d8:	cb 01       	movw	r24, r22
    37da:	8f 83       	std	Y+7, r24	; 0x07
    37dc:	98 87       	std	Y+8, r25	; 0x08
    37de:	a9 87       	std	Y+9, r26	; 0x09
    37e0:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    37e2:	6f 81       	ldd	r22, Y+7	; 0x07
    37e4:	78 85       	ldd	r23, Y+8	; 0x08
    37e6:	89 85       	ldd	r24, Y+9	; 0x09
    37e8:	9a 85       	ldd	r25, Y+10	; 0x0a
    37ea:	20 e0       	ldi	r18, 0x00	; 0
    37ec:	30 e0       	ldi	r19, 0x00	; 0
    37ee:	40 e8       	ldi	r20, 0x80	; 128
    37f0:	5f e3       	ldi	r21, 0x3F	; 63
    37f2:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    37f6:	88 23       	and	r24, r24
    37f8:	2c f4       	brge	.+10     	; 0x3804 <LCD_Init+0x6c>
		__ticks = 1;
    37fa:	81 e0       	ldi	r24, 0x01	; 1
    37fc:	90 e0       	ldi	r25, 0x00	; 0
    37fe:	9e 83       	std	Y+6, r25	; 0x06
    3800:	8d 83       	std	Y+5, r24	; 0x05
    3802:	3f c0       	rjmp	.+126    	; 0x3882 <LCD_Init+0xea>
	else if (__tmp > 65535)
    3804:	6f 81       	ldd	r22, Y+7	; 0x07
    3806:	78 85       	ldd	r23, Y+8	; 0x08
    3808:	89 85       	ldd	r24, Y+9	; 0x09
    380a:	9a 85       	ldd	r25, Y+10	; 0x0a
    380c:	20 e0       	ldi	r18, 0x00	; 0
    380e:	3f ef       	ldi	r19, 0xFF	; 255
    3810:	4f e7       	ldi	r20, 0x7F	; 127
    3812:	57 e4       	ldi	r21, 0x47	; 71
    3814:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    3818:	18 16       	cp	r1, r24
    381a:	4c f5       	brge	.+82     	; 0x386e <LCD_Init+0xd6>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    381c:	6b 85       	ldd	r22, Y+11	; 0x0b
    381e:	7c 85       	ldd	r23, Y+12	; 0x0c
    3820:	8d 85       	ldd	r24, Y+13	; 0x0d
    3822:	9e 85       	ldd	r25, Y+14	; 0x0e
    3824:	20 e0       	ldi	r18, 0x00	; 0
    3826:	30 e0       	ldi	r19, 0x00	; 0
    3828:	40 e2       	ldi	r20, 0x20	; 32
    382a:	51 e4       	ldi	r21, 0x41	; 65
    382c:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    3830:	dc 01       	movw	r26, r24
    3832:	cb 01       	movw	r24, r22
    3834:	bc 01       	movw	r22, r24
    3836:	cd 01       	movw	r24, r26
    3838:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    383c:	dc 01       	movw	r26, r24
    383e:	cb 01       	movw	r24, r22
    3840:	9e 83       	std	Y+6, r25	; 0x06
    3842:	8d 83       	std	Y+5, r24	; 0x05
    3844:	0f c0       	rjmp	.+30     	; 0x3864 <LCD_Init+0xcc>
    3846:	88 ec       	ldi	r24, 0xC8	; 200
    3848:	90 e0       	ldi	r25, 0x00	; 0
    384a:	9c 83       	std	Y+4, r25	; 0x04
    384c:	8b 83       	std	Y+3, r24	; 0x03
    milliseconds can be achieved.
 */
void
_delay_loop_2(uint16_t __count)
{
	__asm__ volatile (
    384e:	8b 81       	ldd	r24, Y+3	; 0x03
    3850:	9c 81       	ldd	r25, Y+4	; 0x04
    3852:	01 97       	sbiw	r24, 0x01	; 1
    3854:	f1 f7       	brne	.-4      	; 0x3852 <LCD_Init+0xba>
    3856:	9c 83       	std	Y+4, r25	; 0x04
    3858:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    385a:	8d 81       	ldd	r24, Y+5	; 0x05
    385c:	9e 81       	ldd	r25, Y+6	; 0x06
    385e:	01 97       	sbiw	r24, 0x01	; 1
    3860:	9e 83       	std	Y+6, r25	; 0x06
    3862:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    3864:	8d 81       	ldd	r24, Y+5	; 0x05
    3866:	9e 81       	ldd	r25, Y+6	; 0x06
    3868:	00 97       	sbiw	r24, 0x00	; 0
    386a:	69 f7       	brne	.-38     	; 0x3846 <LCD_Init+0xae>
    386c:	14 c0       	rjmp	.+40     	; 0x3896 <LCD_Init+0xfe>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    386e:	6f 81       	ldd	r22, Y+7	; 0x07
    3870:	78 85       	ldd	r23, Y+8	; 0x08
    3872:	89 85       	ldd	r24, Y+9	; 0x09
    3874:	9a 85       	ldd	r25, Y+10	; 0x0a
    3876:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    387a:	dc 01       	movw	r26, r24
    387c:	cb 01       	movw	r24, r22
    387e:	9e 83       	std	Y+6, r25	; 0x06
    3880:	8d 83       	std	Y+5, r24	; 0x05
    3882:	8d 81       	ldd	r24, Y+5	; 0x05
    3884:	9e 81       	ldd	r25, Y+6	; 0x06
    3886:	9a 83       	std	Y+2, r25	; 0x02
    3888:	89 83       	std	Y+1, r24	; 0x01
    388a:	89 81       	ldd	r24, Y+1	; 0x01
    388c:	9a 81       	ldd	r25, Y+2	; 0x02
    388e:	01 97       	sbiw	r24, 0x01	; 1
    3890:	f1 f7       	brne	.-4      	; 0x388e <LCD_Init+0xf6>
    3892:	9a 83       	std	Y+2, r25	; 0x02
    3894:	89 83       	std	Y+1, r24	; 0x01

    /* Function Set:
        N: 1 (two lines)
        F: 0 (5x7)
    */
    command = 0b00110000;
    3896:	80 e3       	ldi	r24, 0x30	; 48
    3898:	8f 87       	std	Y+15, r24	; 0x0f
    #if (LCD_MODE_LINES == LCD_TWO_LINES)
        SET_BIT(command, 3);
    389a:	8f 85       	ldd	r24, Y+15	; 0x0f
    389c:	88 60       	ori	r24, 0x08	; 8
    389e:	8f 87       	std	Y+15, r24	; 0x0f
    #endif
    #if (LCD_MODE_DOTS == LCD_DOTS_5X10)
        SET_BIT(command, 2);
    38a0:	8f 85       	ldd	r24, Y+15	; 0x0f
    38a2:	84 60       	ori	r24, 0x04	; 4
    38a4:	8f 87       	std	Y+15, r24	; 0x0f
    #endif
    LCD_SendCommand(command);
    38a6:	8f 85       	ldd	r24, Y+15	; 0x0f
    38a8:	0e 94 cd 1d 	call	0x3b9a	; 0x3b9a <LCD_SendCommand>
    /* Display ON/OFF
        D: 1 (Display ON)
        C: 0 (Cursor off)
        B: 0 (Cursor not blink)
    */
    command = 0b00001000;
    38ac:	88 e0       	ldi	r24, 0x08	; 8
    38ae:	8f 87       	std	Y+15, r24	; 0x0f
    #if (LCD_MODE_DISPLAY == LCD_DISPLAY_ON)
        SET_BIT(command, 2);
    38b0:	8f 85       	ldd	r24, Y+15	; 0x0f
    38b2:	84 60       	ori	r24, 0x04	; 4
    38b4:	8f 87       	std	Y+15, r24	; 0x0f
    #endif
    #if (LCD_MODE_CURSOR == LCD_CURSOR_ON_BLINK)
        SET_BIT(command, 0);
    38b6:	8f 85       	ldd	r24, Y+15	; 0x0f
    38b8:	81 60       	ori	r24, 0x01	; 1
    38ba:	8f 87       	std	Y+15, r24	; 0x0f
        SET_BIT(command, 1);
    38bc:	8f 85       	ldd	r24, Y+15	; 0x0f
    38be:	82 60       	ori	r24, 0x02	; 2
    38c0:	8f 87       	std	Y+15, r24	; 0x0f
    #endif
    #if (LCD_MODE_CURSOR == LCD_CURSOR_ON_NO_BLINK)
        SET_BIT(command, 1);
    38c2:	8f 85       	ldd	r24, Y+15	; 0x0f
    38c4:	82 60       	ori	r24, 0x02	; 2
    38c6:	8f 87       	std	Y+15, r24	; 0x0f
    #endif
    LCD_SendCommand(command);
    38c8:	8f 85       	ldd	r24, Y+15	; 0x0f
    38ca:	0e 94 cd 1d 	call	0x3b9a	; 0x3b9a <LCD_SendCommand>

    /* Display Clear */
    LCD_SendCommand(0b00000001);
    38ce:	81 e0       	ldi	r24, 0x01	; 1
    38d0:	0e 94 cd 1d 	call	0x3b9a	; 0x3b9a <LCD_SendCommand>
}
    38d4:	2f 96       	adiw	r28, 0x0f	; 15
    38d6:	0f b6       	in	r0, 0x3f	; 63
    38d8:	f8 94       	cli
    38da:	de bf       	out	0x3e, r29	; 62
    38dc:	0f be       	out	0x3f, r0	; 63
    38de:	cd bf       	out	0x3d, r28	; 61
    38e0:	cf 91       	pop	r28
    38e2:	df 91       	pop	r29
    38e4:	08 95       	ret

000038e6 <LCD_Clear>:


void LCD_Clear (void) {
    38e6:	df 93       	push	r29
    38e8:	cf 93       	push	r28
    38ea:	cd b7       	in	r28, 0x3d	; 61
    38ec:	de b7       	in	r29, 0x3e	; 62
    LCD_SendCommand(0b00000001);
    38ee:	81 e0       	ldi	r24, 0x01	; 1
    38f0:	0e 94 cd 1d 	call	0x3b9a	; 0x3b9a <LCD_SendCommand>
}
    38f4:	cf 91       	pop	r28
    38f6:	df 91       	pop	r29
    38f8:	08 95       	ret

000038fa <LCD_DisplayCharacter>:

void LCD_DisplayCharacter (u8 data) {
    38fa:	df 93       	push	r29
    38fc:	cf 93       	push	r28
    38fe:	0f 92       	push	r0
    3900:	cd b7       	in	r28, 0x3d	; 61
    3902:	de b7       	in	r29, 0x3e	; 62
    3904:	89 83       	std	Y+1, r24	; 0x01
    LCD_SendData(data);
    3906:	89 81       	ldd	r24, Y+1	; 0x01
    3908:	0e 94 b8 1e 	call	0x3d70	; 0x3d70 <LCD_SendData>
}
    390c:	0f 90       	pop	r0
    390e:	cf 91       	pop	r28
    3910:	df 91       	pop	r29
    3912:	08 95       	ret

00003914 <LCD_DisplayString>:

void LCD_DisplayString (u8 *str) {
    3914:	df 93       	push	r29
    3916:	cf 93       	push	r28
    3918:	00 d0       	rcall	.+0      	; 0x391a <LCD_DisplayString+0x6>
    391a:	0f 92       	push	r0
    391c:	cd b7       	in	r28, 0x3d	; 61
    391e:	de b7       	in	r29, 0x3e	; 62
    3920:	9b 83       	std	Y+3, r25	; 0x03
    3922:	8a 83       	std	Y+2, r24	; 0x02
    u8 i=0;
    3924:	19 82       	std	Y+1, r1	; 0x01
    3926:	0e c0       	rjmp	.+28     	; 0x3944 <LCD_DisplayString+0x30>
    while(str[i] != '\0') {
        LCD_DisplayCharacter(str[i]);
    3928:	89 81       	ldd	r24, Y+1	; 0x01
    392a:	28 2f       	mov	r18, r24
    392c:	30 e0       	ldi	r19, 0x00	; 0
    392e:	8a 81       	ldd	r24, Y+2	; 0x02
    3930:	9b 81       	ldd	r25, Y+3	; 0x03
    3932:	fc 01       	movw	r30, r24
    3934:	e2 0f       	add	r30, r18
    3936:	f3 1f       	adc	r31, r19
    3938:	80 81       	ld	r24, Z
    393a:	0e 94 7d 1c 	call	0x38fa	; 0x38fa <LCD_DisplayCharacter>
        i++;
    393e:	89 81       	ldd	r24, Y+1	; 0x01
    3940:	8f 5f       	subi	r24, 0xFF	; 255
    3942:	89 83       	std	Y+1, r24	; 0x01
    LCD_SendData(data);
}

void LCD_DisplayString (u8 *str) {
    u8 i=0;
    while(str[i] != '\0') {
    3944:	89 81       	ldd	r24, Y+1	; 0x01
    3946:	28 2f       	mov	r18, r24
    3948:	30 e0       	ldi	r19, 0x00	; 0
    394a:	8a 81       	ldd	r24, Y+2	; 0x02
    394c:	9b 81       	ldd	r25, Y+3	; 0x03
    394e:	fc 01       	movw	r30, r24
    3950:	e2 0f       	add	r30, r18
    3952:	f3 1f       	adc	r31, r19
    3954:	80 81       	ld	r24, Z
    3956:	88 23       	and	r24, r24
    3958:	39 f7       	brne	.-50     	; 0x3928 <LCD_DisplayString+0x14>
        LCD_DisplayCharacter(str[i]);
        i++;
    }
}
    395a:	0f 90       	pop	r0
    395c:	0f 90       	pop	r0
    395e:	0f 90       	pop	r0
    3960:	cf 91       	pop	r28
    3962:	df 91       	pop	r29
    3964:	08 95       	ret

00003966 <LCD_SetCursorPosition>:

void LCD_SetCursorPosition(u8 row, u8 column) {
    3966:	df 93       	push	r29
    3968:	cf 93       	push	r28
    396a:	00 d0       	rcall	.+0      	; 0x396c <LCD_SetCursorPosition+0x6>
    396c:	0f 92       	push	r0
    396e:	cd b7       	in	r28, 0x3d	; 61
    3970:	de b7       	in	r29, 0x3e	; 62
    3972:	8a 83       	std	Y+2, r24	; 0x02
    3974:	6b 83       	std	Y+3, r22	; 0x03
    u8 address = column + row*0x40;
    3976:	8a 81       	ldd	r24, Y+2	; 0x02
    3978:	88 2f       	mov	r24, r24
    397a:	90 e0       	ldi	r25, 0x00	; 0
    397c:	00 24       	eor	r0, r0
    397e:	96 95       	lsr	r25
    3980:	87 95       	ror	r24
    3982:	07 94       	ror	r0
    3984:	96 95       	lsr	r25
    3986:	87 95       	ror	r24
    3988:	07 94       	ror	r0
    398a:	98 2f       	mov	r25, r24
    398c:	80 2d       	mov	r24, r0
    398e:	98 2f       	mov	r25, r24
    3990:	8b 81       	ldd	r24, Y+3	; 0x03
    3992:	89 0f       	add	r24, r25
    3994:	89 83       	std	Y+1, r24	; 0x01
    SET_BIT(address, 7);
    3996:	89 81       	ldd	r24, Y+1	; 0x01
    3998:	80 68       	ori	r24, 0x80	; 128
    399a:	89 83       	std	Y+1, r24	; 0x01
    LCD_SendCommand(address);
    399c:	89 81       	ldd	r24, Y+1	; 0x01
    399e:	0e 94 cd 1d 	call	0x3b9a	; 0x3b9a <LCD_SendCommand>
}
    39a2:	0f 90       	pop	r0
    39a4:	0f 90       	pop	r0
    39a6:	0f 90       	pop	r0
    39a8:	cf 91       	pop	r28
    39aa:	df 91       	pop	r29
    39ac:	08 95       	ret

000039ae <LCD_DisplayNumber>:


void LCD_DisplayNumber (s32 number) {
    39ae:	ef 92       	push	r14
    39b0:	ff 92       	push	r15
    39b2:	0f 93       	push	r16
    39b4:	1f 93       	push	r17
    39b6:	df 93       	push	r29
    39b8:	cf 93       	push	r28
    39ba:	cd b7       	in	r28, 0x3d	; 61
    39bc:	de b7       	in	r29, 0x3e	; 62
    39be:	2a 97       	sbiw	r28, 0x0a	; 10
    39c0:	0f b6       	in	r0, 0x3f	; 63
    39c2:	f8 94       	cli
    39c4:	de bf       	out	0x3e, r29	; 62
    39c6:	0f be       	out	0x3f, r0	; 63
    39c8:	cd bf       	out	0x3d, r28	; 61
    39ca:	6f 83       	std	Y+7, r22	; 0x07
    39cc:	78 87       	std	Y+8, r23	; 0x08
    39ce:	89 87       	std	Y+9, r24	; 0x09
    39d0:	9a 87       	std	Y+10, r25	; 0x0a
    u32 reversed_number = 0;
    39d2:	1b 82       	std	Y+3, r1	; 0x03
    39d4:	1c 82       	std	Y+4, r1	; 0x04
    39d6:	1d 82       	std	Y+5, r1	; 0x05
    39d8:	1e 82       	std	Y+6, r1	; 0x06
    u8 digits = 0;
    39da:	1a 82       	std	Y+2, r1	; 0x02
    if (number < 0) {
    39dc:	8f 81       	ldd	r24, Y+7	; 0x07
    39de:	98 85       	ldd	r25, Y+8	; 0x08
    39e0:	a9 85       	ldd	r26, Y+9	; 0x09
    39e2:	ba 85       	ldd	r27, Y+10	; 0x0a
    39e4:	bb 23       	and	r27, r27
    39e6:	9c f4       	brge	.+38     	; 0x3a0e <LCD_DisplayNumber+0x60>
        number = number*-1;
    39e8:	8f 81       	ldd	r24, Y+7	; 0x07
    39ea:	98 85       	ldd	r25, Y+8	; 0x08
    39ec:	a9 85       	ldd	r26, Y+9	; 0x09
    39ee:	ba 85       	ldd	r27, Y+10	; 0x0a
    39f0:	b0 95       	com	r27
    39f2:	a0 95       	com	r26
    39f4:	90 95       	com	r25
    39f6:	81 95       	neg	r24
    39f8:	9f 4f       	sbci	r25, 0xFF	; 255
    39fa:	af 4f       	sbci	r26, 0xFF	; 255
    39fc:	bf 4f       	sbci	r27, 0xFF	; 255
    39fe:	8f 83       	std	Y+7, r24	; 0x07
    3a00:	98 87       	std	Y+8, r25	; 0x08
    3a02:	a9 87       	std	Y+9, r26	; 0x09
    3a04:	ba 87       	std	Y+10, r27	; 0x0a
        LCD_DisplayCharacter('-');
    3a06:	8d e2       	ldi	r24, 0x2D	; 45
    3a08:	0e 94 7d 1c 	call	0x38fa	; 0x38fa <LCD_DisplayCharacter>
    3a0c:	45 c0       	rjmp	.+138    	; 0x3a98 <LCD_DisplayNumber+0xea>
    }
    else if (number == 0) {
    3a0e:	8f 81       	ldd	r24, Y+7	; 0x07
    3a10:	98 85       	ldd	r25, Y+8	; 0x08
    3a12:	a9 85       	ldd	r26, Y+9	; 0x09
    3a14:	ba 85       	ldd	r27, Y+10	; 0x0a
    3a16:	00 97       	sbiw	r24, 0x00	; 0
    3a18:	a1 05       	cpc	r26, r1
    3a1a:	b1 05       	cpc	r27, r1
    3a1c:	e9 f5       	brne	.+122    	; 0x3a98 <LCD_DisplayNumber+0xea>
        LCD_DisplayCharacter('0');
    3a1e:	80 e3       	ldi	r24, 0x30	; 48
    3a20:	0e 94 7d 1c 	call	0x38fa	; 0x38fa <LCD_DisplayCharacter>
    3a24:	39 c0       	rjmp	.+114    	; 0x3a98 <LCD_DisplayNumber+0xea>
    }
    while (number != 0)
    {
        reversed_number = (reversed_number*10) + (number%10);
    3a26:	8b 81       	ldd	r24, Y+3	; 0x03
    3a28:	9c 81       	ldd	r25, Y+4	; 0x04
    3a2a:	ad 81       	ldd	r26, Y+5	; 0x05
    3a2c:	be 81       	ldd	r27, Y+6	; 0x06
    3a2e:	2a e0       	ldi	r18, 0x0A	; 10
    3a30:	30 e0       	ldi	r19, 0x00	; 0
    3a32:	40 e0       	ldi	r20, 0x00	; 0
    3a34:	50 e0       	ldi	r21, 0x00	; 0
    3a36:	bc 01       	movw	r22, r24
    3a38:	cd 01       	movw	r24, r26
    3a3a:	0e 94 a0 23 	call	0x4740	; 0x4740 <__mulsi3>
    3a3e:	7b 01       	movw	r14, r22
    3a40:	8c 01       	movw	r16, r24
    3a42:	8f 81       	ldd	r24, Y+7	; 0x07
    3a44:	98 85       	ldd	r25, Y+8	; 0x08
    3a46:	a9 85       	ldd	r26, Y+9	; 0x09
    3a48:	ba 85       	ldd	r27, Y+10	; 0x0a
    3a4a:	2a e0       	ldi	r18, 0x0A	; 10
    3a4c:	30 e0       	ldi	r19, 0x00	; 0
    3a4e:	40 e0       	ldi	r20, 0x00	; 0
    3a50:	50 e0       	ldi	r21, 0x00	; 0
    3a52:	bc 01       	movw	r22, r24
    3a54:	cd 01       	movw	r24, r26
    3a56:	0e 94 ed 23 	call	0x47da	; 0x47da <__divmodsi4>
    3a5a:	dc 01       	movw	r26, r24
    3a5c:	cb 01       	movw	r24, r22
    3a5e:	8e 0d       	add	r24, r14
    3a60:	9f 1d       	adc	r25, r15
    3a62:	a0 1f       	adc	r26, r16
    3a64:	b1 1f       	adc	r27, r17
    3a66:	8b 83       	std	Y+3, r24	; 0x03
    3a68:	9c 83       	std	Y+4, r25	; 0x04
    3a6a:	ad 83       	std	Y+5, r26	; 0x05
    3a6c:	be 83       	std	Y+6, r27	; 0x06
        number = number / 10;
    3a6e:	8f 81       	ldd	r24, Y+7	; 0x07
    3a70:	98 85       	ldd	r25, Y+8	; 0x08
    3a72:	a9 85       	ldd	r26, Y+9	; 0x09
    3a74:	ba 85       	ldd	r27, Y+10	; 0x0a
    3a76:	2a e0       	ldi	r18, 0x0A	; 10
    3a78:	30 e0       	ldi	r19, 0x00	; 0
    3a7a:	40 e0       	ldi	r20, 0x00	; 0
    3a7c:	50 e0       	ldi	r21, 0x00	; 0
    3a7e:	bc 01       	movw	r22, r24
    3a80:	cd 01       	movw	r24, r26
    3a82:	0e 94 ed 23 	call	0x47da	; 0x47da <__divmodsi4>
    3a86:	da 01       	movw	r26, r20
    3a88:	c9 01       	movw	r24, r18
    3a8a:	8f 83       	std	Y+7, r24	; 0x07
    3a8c:	98 87       	std	Y+8, r25	; 0x08
    3a8e:	a9 87       	std	Y+9, r26	; 0x09
    3a90:	ba 87       	std	Y+10, r27	; 0x0a
        digits++;
    3a92:	8a 81       	ldd	r24, Y+2	; 0x02
    3a94:	8f 5f       	subi	r24, 0xFF	; 255
    3a96:	8a 83       	std	Y+2, r24	; 0x02
        LCD_DisplayCharacter('-');
    }
    else if (number == 0) {
        LCD_DisplayCharacter('0');
    }
    while (number != 0)
    3a98:	8f 81       	ldd	r24, Y+7	; 0x07
    3a9a:	98 85       	ldd	r25, Y+8	; 0x08
    3a9c:	a9 85       	ldd	r26, Y+9	; 0x09
    3a9e:	ba 85       	ldd	r27, Y+10	; 0x0a
    3aa0:	00 97       	sbiw	r24, 0x00	; 0
    3aa2:	a1 05       	cpc	r26, r1
    3aa4:	b1 05       	cpc	r27, r1
    3aa6:	09 f0       	breq	.+2      	; 0x3aaa <LCD_DisplayNumber+0xfc>
    3aa8:	be cf       	rjmp	.-132    	; 0x3a26 <LCD_DisplayNumber+0x78>
    3aaa:	2a c0       	rjmp	.+84     	; 0x3b00 <LCD_DisplayNumber+0x152>
        number = number / 10;
        digits++;
    }
    while (reversed_number != 0)
    {
        u8 data = reversed_number % 10;
    3aac:	8b 81       	ldd	r24, Y+3	; 0x03
    3aae:	9c 81       	ldd	r25, Y+4	; 0x04
    3ab0:	ad 81       	ldd	r26, Y+5	; 0x05
    3ab2:	be 81       	ldd	r27, Y+6	; 0x06
    3ab4:	2a e0       	ldi	r18, 0x0A	; 10
    3ab6:	30 e0       	ldi	r19, 0x00	; 0
    3ab8:	40 e0       	ldi	r20, 0x00	; 0
    3aba:	50 e0       	ldi	r21, 0x00	; 0
    3abc:	bc 01       	movw	r22, r24
    3abe:	cd 01       	movw	r24, r26
    3ac0:	0e 94 cb 23 	call	0x4796	; 0x4796 <__udivmodsi4>
    3ac4:	dc 01       	movw	r26, r24
    3ac6:	cb 01       	movw	r24, r22
    3ac8:	89 83       	std	Y+1, r24	; 0x01
        data = data + '0';
    3aca:	89 81       	ldd	r24, Y+1	; 0x01
    3acc:	80 5d       	subi	r24, 0xD0	; 208
    3ace:	89 83       	std	Y+1, r24	; 0x01
        LCD_DisplayCharacter(data);
    3ad0:	89 81       	ldd	r24, Y+1	; 0x01
    3ad2:	0e 94 7d 1c 	call	0x38fa	; 0x38fa <LCD_DisplayCharacter>
        reversed_number = reversed_number / 10;
    3ad6:	8b 81       	ldd	r24, Y+3	; 0x03
    3ad8:	9c 81       	ldd	r25, Y+4	; 0x04
    3ada:	ad 81       	ldd	r26, Y+5	; 0x05
    3adc:	be 81       	ldd	r27, Y+6	; 0x06
    3ade:	2a e0       	ldi	r18, 0x0A	; 10
    3ae0:	30 e0       	ldi	r19, 0x00	; 0
    3ae2:	40 e0       	ldi	r20, 0x00	; 0
    3ae4:	50 e0       	ldi	r21, 0x00	; 0
    3ae6:	bc 01       	movw	r22, r24
    3ae8:	cd 01       	movw	r24, r26
    3aea:	0e 94 cb 23 	call	0x4796	; 0x4796 <__udivmodsi4>
    3aee:	da 01       	movw	r26, r20
    3af0:	c9 01       	movw	r24, r18
    3af2:	8b 83       	std	Y+3, r24	; 0x03
    3af4:	9c 83       	std	Y+4, r25	; 0x04
    3af6:	ad 83       	std	Y+5, r26	; 0x05
    3af8:	be 83       	std	Y+6, r27	; 0x06
        digits--;
    3afa:	8a 81       	ldd	r24, Y+2	; 0x02
    3afc:	81 50       	subi	r24, 0x01	; 1
    3afe:	8a 83       	std	Y+2, r24	; 0x02
    {
        reversed_number = (reversed_number*10) + (number%10);
        number = number / 10;
        digits++;
    }
    while (reversed_number != 0)
    3b00:	8b 81       	ldd	r24, Y+3	; 0x03
    3b02:	9c 81       	ldd	r25, Y+4	; 0x04
    3b04:	ad 81       	ldd	r26, Y+5	; 0x05
    3b06:	be 81       	ldd	r27, Y+6	; 0x06
    3b08:	00 97       	sbiw	r24, 0x00	; 0
    3b0a:	a1 05       	cpc	r26, r1
    3b0c:	b1 05       	cpc	r27, r1
    3b0e:	71 f6       	brne	.-100    	; 0x3aac <LCD_DisplayNumber+0xfe>
    3b10:	06 c0       	rjmp	.+12     	; 0x3b1e <LCD_DisplayNumber+0x170>
        LCD_DisplayCharacter(data);
        reversed_number = reversed_number / 10;
        digits--;
    }
    while (digits != 0) {
        LCD_DisplayCharacter('0');
    3b12:	80 e3       	ldi	r24, 0x30	; 48
    3b14:	0e 94 7d 1c 	call	0x38fa	; 0x38fa <LCD_DisplayCharacter>
        digits--;
    3b18:	8a 81       	ldd	r24, Y+2	; 0x02
    3b1a:	81 50       	subi	r24, 0x01	; 1
    3b1c:	8a 83       	std	Y+2, r24	; 0x02
        data = data + '0';
        LCD_DisplayCharacter(data);
        reversed_number = reversed_number / 10;
        digits--;
    }
    while (digits != 0) {
    3b1e:	8a 81       	ldd	r24, Y+2	; 0x02
    3b20:	88 23       	and	r24, r24
    3b22:	b9 f7       	brne	.-18     	; 0x3b12 <LCD_DisplayNumber+0x164>
        LCD_DisplayCharacter('0');
        digits--;
    }

}
    3b24:	2a 96       	adiw	r28, 0x0a	; 10
    3b26:	0f b6       	in	r0, 0x3f	; 63
    3b28:	f8 94       	cli
    3b2a:	de bf       	out	0x3e, r29	; 62
    3b2c:	0f be       	out	0x3f, r0	; 63
    3b2e:	cd bf       	out	0x3d, r28	; 61
    3b30:	cf 91       	pop	r28
    3b32:	df 91       	pop	r29
    3b34:	1f 91       	pop	r17
    3b36:	0f 91       	pop	r16
    3b38:	ff 90       	pop	r15
    3b3a:	ef 90       	pop	r14
    3b3c:	08 95       	ret

00003b3e <LCD_ShiftLeft>:

void LCD_ShiftLeft (u8 counter) {
    3b3e:	df 93       	push	r29
    3b40:	cf 93       	push	r28
    3b42:	00 d0       	rcall	.+0      	; 0x3b44 <LCD_ShiftLeft+0x6>
    3b44:	cd b7       	in	r28, 0x3d	; 61
    3b46:	de b7       	in	r29, 0x3e	; 62
    3b48:	8a 83       	std	Y+2, r24	; 0x02
    u8 i;
    for (i=0; i<counter; i++) {
    3b4a:	19 82       	std	Y+1, r1	; 0x01
    3b4c:	06 c0       	rjmp	.+12     	; 0x3b5a <LCD_ShiftLeft+0x1c>
        LCD_SendCommand(0b00011000);
    3b4e:	88 e1       	ldi	r24, 0x18	; 24
    3b50:	0e 94 cd 1d 	call	0x3b9a	; 0x3b9a <LCD_SendCommand>

}

void LCD_ShiftLeft (u8 counter) {
    u8 i;
    for (i=0; i<counter; i++) {
    3b54:	89 81       	ldd	r24, Y+1	; 0x01
    3b56:	8f 5f       	subi	r24, 0xFF	; 255
    3b58:	89 83       	std	Y+1, r24	; 0x01
    3b5a:	99 81       	ldd	r25, Y+1	; 0x01
    3b5c:	8a 81       	ldd	r24, Y+2	; 0x02
    3b5e:	98 17       	cp	r25, r24
    3b60:	b0 f3       	brcs	.-20     	; 0x3b4e <LCD_ShiftLeft+0x10>
        LCD_SendCommand(0b00011000);
    }
}
    3b62:	0f 90       	pop	r0
    3b64:	0f 90       	pop	r0
    3b66:	cf 91       	pop	r28
    3b68:	df 91       	pop	r29
    3b6a:	08 95       	ret

00003b6c <LCD_ShiftRight>:
void LCD_ShiftRight (u8 counter) {
    3b6c:	df 93       	push	r29
    3b6e:	cf 93       	push	r28
    3b70:	00 d0       	rcall	.+0      	; 0x3b72 <LCD_ShiftRight+0x6>
    3b72:	cd b7       	in	r28, 0x3d	; 61
    3b74:	de b7       	in	r29, 0x3e	; 62
    3b76:	8a 83       	std	Y+2, r24	; 0x02
    u8 i;
    for (i=0; i<counter; i++) {
    3b78:	19 82       	std	Y+1, r1	; 0x01
    3b7a:	06 c0       	rjmp	.+12     	; 0x3b88 <LCD_ShiftRight+0x1c>
        LCD_SendCommand(0b00011100);
    3b7c:	8c e1       	ldi	r24, 0x1C	; 28
    3b7e:	0e 94 cd 1d 	call	0x3b9a	; 0x3b9a <LCD_SendCommand>
        LCD_SendCommand(0b00011000);
    }
}
void LCD_ShiftRight (u8 counter) {
    u8 i;
    for (i=0; i<counter; i++) {
    3b82:	89 81       	ldd	r24, Y+1	; 0x01
    3b84:	8f 5f       	subi	r24, 0xFF	; 255
    3b86:	89 83       	std	Y+1, r24	; 0x01
    3b88:	99 81       	ldd	r25, Y+1	; 0x01
    3b8a:	8a 81       	ldd	r24, Y+2	; 0x02
    3b8c:	98 17       	cp	r25, r24
    3b8e:	b0 f3       	brcs	.-20     	; 0x3b7c <LCD_ShiftRight+0x10>
        LCD_SendCommand(0b00011100);
    }
}
    3b90:	0f 90       	pop	r0
    3b92:	0f 90       	pop	r0
    3b94:	cf 91       	pop	r28
    3b96:	df 91       	pop	r29
    3b98:	08 95       	ret

00003b9a <LCD_SendCommand>:

static void LCD_SendCommand(u8 command) {
    3b9a:	df 93       	push	r29
    3b9c:	cf 93       	push	r28
    3b9e:	cd b7       	in	r28, 0x3d	; 61
    3ba0:	de b7       	in	r29, 0x3e	; 62
    3ba2:	2f 97       	sbiw	r28, 0x0f	; 15
    3ba4:	0f b6       	in	r0, 0x3f	; 63
    3ba6:	f8 94       	cli
    3ba8:	de bf       	out	0x3e, r29	; 62
    3baa:	0f be       	out	0x3f, r0	; 63
    3bac:	cd bf       	out	0x3d, r28	; 61
    3bae:	8f 87       	std	Y+15, r24	; 0x0f
    /* Set Control Pins:
        RS : 0 Command
        RW : 0 Write
    */
    DIO_SetPinLevel(LCD_PIN_RS, DIO_LOW);
    3bb0:	81 e0       	ldi	r24, 0x01	; 1
    3bb2:	62 e0       	ldi	r22, 0x02	; 2
    3bb4:	40 e0       	ldi	r20, 0x00	; 0
    3bb6:	0e 94 7d 0b 	call	0x16fa	; 0x16fa <DIO_SetPinLevel>
    DIO_SetPinLevel(LCD_PIN_RW, DIO_LOW);
    3bba:	81 e0       	ldi	r24, 0x01	; 1
    3bbc:	61 e0       	ldi	r22, 0x01	; 1
    3bbe:	40 e0       	ldi	r20, 0x00	; 0
    3bc0:	0e 94 7d 0b 	call	0x16fa	; 0x16fa <DIO_SetPinLevel>

    /* Set Data Pins */
    DIO_SetPinLevel(LCD_PIN_D0, GET_BIT(command, 0));
    3bc4:	8f 85       	ldd	r24, Y+15	; 0x0f
    3bc6:	98 2f       	mov	r25, r24
    3bc8:	91 70       	andi	r25, 0x01	; 1
    3bca:	82 e0       	ldi	r24, 0x02	; 2
    3bcc:	67 e0       	ldi	r22, 0x07	; 7
    3bce:	49 2f       	mov	r20, r25
    3bd0:	0e 94 7d 0b 	call	0x16fa	; 0x16fa <DIO_SetPinLevel>
    DIO_SetPinLevel(LCD_PIN_D1, GET_BIT(command, 1));
    3bd4:	8f 85       	ldd	r24, Y+15	; 0x0f
    3bd6:	86 95       	lsr	r24
    3bd8:	98 2f       	mov	r25, r24
    3bda:	91 70       	andi	r25, 0x01	; 1
    3bdc:	82 e0       	ldi	r24, 0x02	; 2
    3bde:	66 e0       	ldi	r22, 0x06	; 6
    3be0:	49 2f       	mov	r20, r25
    3be2:	0e 94 7d 0b 	call	0x16fa	; 0x16fa <DIO_SetPinLevel>
    DIO_SetPinLevel(LCD_PIN_D2, GET_BIT(command, 2));
    3be6:	8f 85       	ldd	r24, Y+15	; 0x0f
    3be8:	86 95       	lsr	r24
    3bea:	86 95       	lsr	r24
    3bec:	98 2f       	mov	r25, r24
    3bee:	91 70       	andi	r25, 0x01	; 1
    3bf0:	82 e0       	ldi	r24, 0x02	; 2
    3bf2:	65 e0       	ldi	r22, 0x05	; 5
    3bf4:	49 2f       	mov	r20, r25
    3bf6:	0e 94 7d 0b 	call	0x16fa	; 0x16fa <DIO_SetPinLevel>
    DIO_SetPinLevel(LCD_PIN_D3, GET_BIT(command, 3));
    3bfa:	8f 85       	ldd	r24, Y+15	; 0x0f
    3bfc:	86 95       	lsr	r24
    3bfe:	86 95       	lsr	r24
    3c00:	86 95       	lsr	r24
    3c02:	98 2f       	mov	r25, r24
    3c04:	91 70       	andi	r25, 0x01	; 1
    3c06:	82 e0       	ldi	r24, 0x02	; 2
    3c08:	64 e0       	ldi	r22, 0x04	; 4
    3c0a:	49 2f       	mov	r20, r25
    3c0c:	0e 94 7d 0b 	call	0x16fa	; 0x16fa <DIO_SetPinLevel>
    DIO_SetPinLevel(LCD_PIN_D4, GET_BIT(command, 4));
    3c10:	8f 85       	ldd	r24, Y+15	; 0x0f
    3c12:	82 95       	swap	r24
    3c14:	8f 70       	andi	r24, 0x0F	; 15
    3c16:	98 2f       	mov	r25, r24
    3c18:	91 70       	andi	r25, 0x01	; 1
    3c1a:	82 e0       	ldi	r24, 0x02	; 2
    3c1c:	63 e0       	ldi	r22, 0x03	; 3
    3c1e:	49 2f       	mov	r20, r25
    3c20:	0e 94 7d 0b 	call	0x16fa	; 0x16fa <DIO_SetPinLevel>
    DIO_SetPinLevel(LCD_PIN_D5, GET_BIT(command, 5));
    3c24:	8f 85       	ldd	r24, Y+15	; 0x0f
    3c26:	82 95       	swap	r24
    3c28:	86 95       	lsr	r24
    3c2a:	87 70       	andi	r24, 0x07	; 7
    3c2c:	98 2f       	mov	r25, r24
    3c2e:	91 70       	andi	r25, 0x01	; 1
    3c30:	82 e0       	ldi	r24, 0x02	; 2
    3c32:	62 e0       	ldi	r22, 0x02	; 2
    3c34:	49 2f       	mov	r20, r25
    3c36:	0e 94 7d 0b 	call	0x16fa	; 0x16fa <DIO_SetPinLevel>
    DIO_SetPinLevel(LCD_PIN_D6, GET_BIT(command, 6));
    3c3a:	8f 85       	ldd	r24, Y+15	; 0x0f
    3c3c:	82 95       	swap	r24
    3c3e:	86 95       	lsr	r24
    3c40:	86 95       	lsr	r24
    3c42:	83 70       	andi	r24, 0x03	; 3
    3c44:	98 2f       	mov	r25, r24
    3c46:	91 70       	andi	r25, 0x01	; 1
    3c48:	82 e0       	ldi	r24, 0x02	; 2
    3c4a:	61 e0       	ldi	r22, 0x01	; 1
    3c4c:	49 2f       	mov	r20, r25
    3c4e:	0e 94 7d 0b 	call	0x16fa	; 0x16fa <DIO_SetPinLevel>
    DIO_SetPinLevel(LCD_PIN_D7, GET_BIT(command, 7));
    3c52:	8f 85       	ldd	r24, Y+15	; 0x0f
    3c54:	98 2f       	mov	r25, r24
    3c56:	99 1f       	adc	r25, r25
    3c58:	99 27       	eor	r25, r25
    3c5a:	99 1f       	adc	r25, r25
    3c5c:	82 e0       	ldi	r24, 0x02	; 2
    3c5e:	60 e0       	ldi	r22, 0x00	; 0
    3c60:	49 2f       	mov	r20, r25
    3c62:	0e 94 7d 0b 	call	0x16fa	; 0x16fa <DIO_SetPinLevel>

    DIO_SetPinLevel(LCD_PIN_E, DIO_HIGH);
    3c66:	81 e0       	ldi	r24, 0x01	; 1
    3c68:	60 e0       	ldi	r22, 0x00	; 0
    3c6a:	41 e0       	ldi	r20, 0x01	; 1
    3c6c:	0e 94 7d 0b 	call	0x16fa	; 0x16fa <DIO_SetPinLevel>
    3c70:	80 e0       	ldi	r24, 0x00	; 0
    3c72:	90 e0       	ldi	r25, 0x00	; 0
    3c74:	a0 e0       	ldi	r26, 0x00	; 0
    3c76:	b0 e4       	ldi	r27, 0x40	; 64
    3c78:	8b 87       	std	Y+11, r24	; 0x0b
    3c7a:	9c 87       	std	Y+12, r25	; 0x0c
    3c7c:	ad 87       	std	Y+13, r26	; 0x0d
    3c7e:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    3c80:	6b 85       	ldd	r22, Y+11	; 0x0b
    3c82:	7c 85       	ldd	r23, Y+12	; 0x0c
    3c84:	8d 85       	ldd	r24, Y+13	; 0x0d
    3c86:	9e 85       	ldd	r25, Y+14	; 0x0e
    3c88:	20 e0       	ldi	r18, 0x00	; 0
    3c8a:	30 e0       	ldi	r19, 0x00	; 0
    3c8c:	4a ef       	ldi	r20, 0xFA	; 250
    3c8e:	54 e4       	ldi	r21, 0x44	; 68
    3c90:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    3c94:	dc 01       	movw	r26, r24
    3c96:	cb 01       	movw	r24, r22
    3c98:	8f 83       	std	Y+7, r24	; 0x07
    3c9a:	98 87       	std	Y+8, r25	; 0x08
    3c9c:	a9 87       	std	Y+9, r26	; 0x09
    3c9e:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    3ca0:	6f 81       	ldd	r22, Y+7	; 0x07
    3ca2:	78 85       	ldd	r23, Y+8	; 0x08
    3ca4:	89 85       	ldd	r24, Y+9	; 0x09
    3ca6:	9a 85       	ldd	r25, Y+10	; 0x0a
    3ca8:	20 e0       	ldi	r18, 0x00	; 0
    3caa:	30 e0       	ldi	r19, 0x00	; 0
    3cac:	40 e8       	ldi	r20, 0x80	; 128
    3cae:	5f e3       	ldi	r21, 0x3F	; 63
    3cb0:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    3cb4:	88 23       	and	r24, r24
    3cb6:	2c f4       	brge	.+10     	; 0x3cc2 <LCD_SendCommand+0x128>
		__ticks = 1;
    3cb8:	81 e0       	ldi	r24, 0x01	; 1
    3cba:	90 e0       	ldi	r25, 0x00	; 0
    3cbc:	9e 83       	std	Y+6, r25	; 0x06
    3cbe:	8d 83       	std	Y+5, r24	; 0x05
    3cc0:	3f c0       	rjmp	.+126    	; 0x3d40 <LCD_SendCommand+0x1a6>
	else if (__tmp > 65535)
    3cc2:	6f 81       	ldd	r22, Y+7	; 0x07
    3cc4:	78 85       	ldd	r23, Y+8	; 0x08
    3cc6:	89 85       	ldd	r24, Y+9	; 0x09
    3cc8:	9a 85       	ldd	r25, Y+10	; 0x0a
    3cca:	20 e0       	ldi	r18, 0x00	; 0
    3ccc:	3f ef       	ldi	r19, 0xFF	; 255
    3cce:	4f e7       	ldi	r20, 0x7F	; 127
    3cd0:	57 e4       	ldi	r21, 0x47	; 71
    3cd2:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    3cd6:	18 16       	cp	r1, r24
    3cd8:	4c f5       	brge	.+82     	; 0x3d2c <LCD_SendCommand+0x192>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    3cda:	6b 85       	ldd	r22, Y+11	; 0x0b
    3cdc:	7c 85       	ldd	r23, Y+12	; 0x0c
    3cde:	8d 85       	ldd	r24, Y+13	; 0x0d
    3ce0:	9e 85       	ldd	r25, Y+14	; 0x0e
    3ce2:	20 e0       	ldi	r18, 0x00	; 0
    3ce4:	30 e0       	ldi	r19, 0x00	; 0
    3ce6:	40 e2       	ldi	r20, 0x20	; 32
    3ce8:	51 e4       	ldi	r21, 0x41	; 65
    3cea:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    3cee:	dc 01       	movw	r26, r24
    3cf0:	cb 01       	movw	r24, r22
    3cf2:	bc 01       	movw	r22, r24
    3cf4:	cd 01       	movw	r24, r26
    3cf6:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    3cfa:	dc 01       	movw	r26, r24
    3cfc:	cb 01       	movw	r24, r22
    3cfe:	9e 83       	std	Y+6, r25	; 0x06
    3d00:	8d 83       	std	Y+5, r24	; 0x05
    3d02:	0f c0       	rjmp	.+30     	; 0x3d22 <LCD_SendCommand+0x188>
    3d04:	88 ec       	ldi	r24, 0xC8	; 200
    3d06:	90 e0       	ldi	r25, 0x00	; 0
    3d08:	9c 83       	std	Y+4, r25	; 0x04
    3d0a:	8b 83       	std	Y+3, r24	; 0x03
    3d0c:	8b 81       	ldd	r24, Y+3	; 0x03
    3d0e:	9c 81       	ldd	r25, Y+4	; 0x04
    3d10:	01 97       	sbiw	r24, 0x01	; 1
    3d12:	f1 f7       	brne	.-4      	; 0x3d10 <LCD_SendCommand+0x176>
    3d14:	9c 83       	std	Y+4, r25	; 0x04
    3d16:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    3d18:	8d 81       	ldd	r24, Y+5	; 0x05
    3d1a:	9e 81       	ldd	r25, Y+6	; 0x06
    3d1c:	01 97       	sbiw	r24, 0x01	; 1
    3d1e:	9e 83       	std	Y+6, r25	; 0x06
    3d20:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    3d22:	8d 81       	ldd	r24, Y+5	; 0x05
    3d24:	9e 81       	ldd	r25, Y+6	; 0x06
    3d26:	00 97       	sbiw	r24, 0x00	; 0
    3d28:	69 f7       	brne	.-38     	; 0x3d04 <LCD_SendCommand+0x16a>
    3d2a:	14 c0       	rjmp	.+40     	; 0x3d54 <LCD_SendCommand+0x1ba>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    3d2c:	6f 81       	ldd	r22, Y+7	; 0x07
    3d2e:	78 85       	ldd	r23, Y+8	; 0x08
    3d30:	89 85       	ldd	r24, Y+9	; 0x09
    3d32:	9a 85       	ldd	r25, Y+10	; 0x0a
    3d34:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    3d38:	dc 01       	movw	r26, r24
    3d3a:	cb 01       	movw	r24, r22
    3d3c:	9e 83       	std	Y+6, r25	; 0x06
    3d3e:	8d 83       	std	Y+5, r24	; 0x05
    3d40:	8d 81       	ldd	r24, Y+5	; 0x05
    3d42:	9e 81       	ldd	r25, Y+6	; 0x06
    3d44:	9a 83       	std	Y+2, r25	; 0x02
    3d46:	89 83       	std	Y+1, r24	; 0x01
    3d48:	89 81       	ldd	r24, Y+1	; 0x01
    3d4a:	9a 81       	ldd	r25, Y+2	; 0x02
    3d4c:	01 97       	sbiw	r24, 0x01	; 1
    3d4e:	f1 f7       	brne	.-4      	; 0x3d4c <LCD_SendCommand+0x1b2>
    3d50:	9a 83       	std	Y+2, r25	; 0x02
    3d52:	89 83       	std	Y+1, r24	; 0x01
    _delay_ms(2);
    DIO_SetPinLevel(LCD_PIN_E, DIO_LOW);
    3d54:	81 e0       	ldi	r24, 0x01	; 1
    3d56:	60 e0       	ldi	r22, 0x00	; 0
    3d58:	40 e0       	ldi	r20, 0x00	; 0
    3d5a:	0e 94 7d 0b 	call	0x16fa	; 0x16fa <DIO_SetPinLevel>
}
    3d5e:	2f 96       	adiw	r28, 0x0f	; 15
    3d60:	0f b6       	in	r0, 0x3f	; 63
    3d62:	f8 94       	cli
    3d64:	de bf       	out	0x3e, r29	; 62
    3d66:	0f be       	out	0x3f, r0	; 63
    3d68:	cd bf       	out	0x3d, r28	; 61
    3d6a:	cf 91       	pop	r28
    3d6c:	df 91       	pop	r29
    3d6e:	08 95       	ret

00003d70 <LCD_SendData>:

static void LCD_SendData(u8 data) {
    3d70:	df 93       	push	r29
    3d72:	cf 93       	push	r28
    3d74:	cd b7       	in	r28, 0x3d	; 61
    3d76:	de b7       	in	r29, 0x3e	; 62
    3d78:	2f 97       	sbiw	r28, 0x0f	; 15
    3d7a:	0f b6       	in	r0, 0x3f	; 63
    3d7c:	f8 94       	cli
    3d7e:	de bf       	out	0x3e, r29	; 62
    3d80:	0f be       	out	0x3f, r0	; 63
    3d82:	cd bf       	out	0x3d, r28	; 61
    3d84:	8f 87       	std	Y+15, r24	; 0x0f
    /* Set Control Pins:
        RS : 1 Data
        RW : 0 Write
    */
    DIO_SetPinLevel(LCD_PIN_RS, DIO_HIGH);
    3d86:	81 e0       	ldi	r24, 0x01	; 1
    3d88:	62 e0       	ldi	r22, 0x02	; 2
    3d8a:	41 e0       	ldi	r20, 0x01	; 1
    3d8c:	0e 94 7d 0b 	call	0x16fa	; 0x16fa <DIO_SetPinLevel>
    DIO_SetPinLevel(LCD_PIN_RW, DIO_LOW);
    3d90:	81 e0       	ldi	r24, 0x01	; 1
    3d92:	61 e0       	ldi	r22, 0x01	; 1
    3d94:	40 e0       	ldi	r20, 0x00	; 0
    3d96:	0e 94 7d 0b 	call	0x16fa	; 0x16fa <DIO_SetPinLevel>

    /* Set Data Pins */
    DIO_SetPinLevel(LCD_PIN_D0, GET_BIT(data, 0));
    3d9a:	8f 85       	ldd	r24, Y+15	; 0x0f
    3d9c:	98 2f       	mov	r25, r24
    3d9e:	91 70       	andi	r25, 0x01	; 1
    3da0:	82 e0       	ldi	r24, 0x02	; 2
    3da2:	67 e0       	ldi	r22, 0x07	; 7
    3da4:	49 2f       	mov	r20, r25
    3da6:	0e 94 7d 0b 	call	0x16fa	; 0x16fa <DIO_SetPinLevel>
    DIO_SetPinLevel(LCD_PIN_D1, GET_BIT(data, 1));
    3daa:	8f 85       	ldd	r24, Y+15	; 0x0f
    3dac:	86 95       	lsr	r24
    3dae:	98 2f       	mov	r25, r24
    3db0:	91 70       	andi	r25, 0x01	; 1
    3db2:	82 e0       	ldi	r24, 0x02	; 2
    3db4:	66 e0       	ldi	r22, 0x06	; 6
    3db6:	49 2f       	mov	r20, r25
    3db8:	0e 94 7d 0b 	call	0x16fa	; 0x16fa <DIO_SetPinLevel>
    DIO_SetPinLevel(LCD_PIN_D2, GET_BIT(data, 2));
    3dbc:	8f 85       	ldd	r24, Y+15	; 0x0f
    3dbe:	86 95       	lsr	r24
    3dc0:	86 95       	lsr	r24
    3dc2:	98 2f       	mov	r25, r24
    3dc4:	91 70       	andi	r25, 0x01	; 1
    3dc6:	82 e0       	ldi	r24, 0x02	; 2
    3dc8:	65 e0       	ldi	r22, 0x05	; 5
    3dca:	49 2f       	mov	r20, r25
    3dcc:	0e 94 7d 0b 	call	0x16fa	; 0x16fa <DIO_SetPinLevel>
    DIO_SetPinLevel(LCD_PIN_D3, GET_BIT(data, 3));
    3dd0:	8f 85       	ldd	r24, Y+15	; 0x0f
    3dd2:	86 95       	lsr	r24
    3dd4:	86 95       	lsr	r24
    3dd6:	86 95       	lsr	r24
    3dd8:	98 2f       	mov	r25, r24
    3dda:	91 70       	andi	r25, 0x01	; 1
    3ddc:	82 e0       	ldi	r24, 0x02	; 2
    3dde:	64 e0       	ldi	r22, 0x04	; 4
    3de0:	49 2f       	mov	r20, r25
    3de2:	0e 94 7d 0b 	call	0x16fa	; 0x16fa <DIO_SetPinLevel>
    DIO_SetPinLevel(LCD_PIN_D4, GET_BIT(data, 4));
    3de6:	8f 85       	ldd	r24, Y+15	; 0x0f
    3de8:	82 95       	swap	r24
    3dea:	8f 70       	andi	r24, 0x0F	; 15
    3dec:	98 2f       	mov	r25, r24
    3dee:	91 70       	andi	r25, 0x01	; 1
    3df0:	82 e0       	ldi	r24, 0x02	; 2
    3df2:	63 e0       	ldi	r22, 0x03	; 3
    3df4:	49 2f       	mov	r20, r25
    3df6:	0e 94 7d 0b 	call	0x16fa	; 0x16fa <DIO_SetPinLevel>
    DIO_SetPinLevel(LCD_PIN_D5, GET_BIT(data, 5));
    3dfa:	8f 85       	ldd	r24, Y+15	; 0x0f
    3dfc:	82 95       	swap	r24
    3dfe:	86 95       	lsr	r24
    3e00:	87 70       	andi	r24, 0x07	; 7
    3e02:	98 2f       	mov	r25, r24
    3e04:	91 70       	andi	r25, 0x01	; 1
    3e06:	82 e0       	ldi	r24, 0x02	; 2
    3e08:	62 e0       	ldi	r22, 0x02	; 2
    3e0a:	49 2f       	mov	r20, r25
    3e0c:	0e 94 7d 0b 	call	0x16fa	; 0x16fa <DIO_SetPinLevel>
    DIO_SetPinLevel(LCD_PIN_D6, GET_BIT(data, 6));
    3e10:	8f 85       	ldd	r24, Y+15	; 0x0f
    3e12:	82 95       	swap	r24
    3e14:	86 95       	lsr	r24
    3e16:	86 95       	lsr	r24
    3e18:	83 70       	andi	r24, 0x03	; 3
    3e1a:	98 2f       	mov	r25, r24
    3e1c:	91 70       	andi	r25, 0x01	; 1
    3e1e:	82 e0       	ldi	r24, 0x02	; 2
    3e20:	61 e0       	ldi	r22, 0x01	; 1
    3e22:	49 2f       	mov	r20, r25
    3e24:	0e 94 7d 0b 	call	0x16fa	; 0x16fa <DIO_SetPinLevel>
    DIO_SetPinLevel(LCD_PIN_D7, GET_BIT(data, 7));
    3e28:	8f 85       	ldd	r24, Y+15	; 0x0f
    3e2a:	98 2f       	mov	r25, r24
    3e2c:	99 1f       	adc	r25, r25
    3e2e:	99 27       	eor	r25, r25
    3e30:	99 1f       	adc	r25, r25
    3e32:	82 e0       	ldi	r24, 0x02	; 2
    3e34:	60 e0       	ldi	r22, 0x00	; 0
    3e36:	49 2f       	mov	r20, r25
    3e38:	0e 94 7d 0b 	call	0x16fa	; 0x16fa <DIO_SetPinLevel>

    DIO_SetPinLevel(LCD_PIN_E, DIO_HIGH);
    3e3c:	81 e0       	ldi	r24, 0x01	; 1
    3e3e:	60 e0       	ldi	r22, 0x00	; 0
    3e40:	41 e0       	ldi	r20, 0x01	; 1
    3e42:	0e 94 7d 0b 	call	0x16fa	; 0x16fa <DIO_SetPinLevel>
    3e46:	80 e0       	ldi	r24, 0x00	; 0
    3e48:	90 e0       	ldi	r25, 0x00	; 0
    3e4a:	a0 e0       	ldi	r26, 0x00	; 0
    3e4c:	b0 e4       	ldi	r27, 0x40	; 64
    3e4e:	8b 87       	std	Y+11, r24	; 0x0b
    3e50:	9c 87       	std	Y+12, r25	; 0x0c
    3e52:	ad 87       	std	Y+13, r26	; 0x0d
    3e54:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    3e56:	6b 85       	ldd	r22, Y+11	; 0x0b
    3e58:	7c 85       	ldd	r23, Y+12	; 0x0c
    3e5a:	8d 85       	ldd	r24, Y+13	; 0x0d
    3e5c:	9e 85       	ldd	r25, Y+14	; 0x0e
    3e5e:	20 e0       	ldi	r18, 0x00	; 0
    3e60:	30 e0       	ldi	r19, 0x00	; 0
    3e62:	4a ef       	ldi	r20, 0xFA	; 250
    3e64:	54 e4       	ldi	r21, 0x44	; 68
    3e66:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    3e6a:	dc 01       	movw	r26, r24
    3e6c:	cb 01       	movw	r24, r22
    3e6e:	8f 83       	std	Y+7, r24	; 0x07
    3e70:	98 87       	std	Y+8, r25	; 0x08
    3e72:	a9 87       	std	Y+9, r26	; 0x09
    3e74:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    3e76:	6f 81       	ldd	r22, Y+7	; 0x07
    3e78:	78 85       	ldd	r23, Y+8	; 0x08
    3e7a:	89 85       	ldd	r24, Y+9	; 0x09
    3e7c:	9a 85       	ldd	r25, Y+10	; 0x0a
    3e7e:	20 e0       	ldi	r18, 0x00	; 0
    3e80:	30 e0       	ldi	r19, 0x00	; 0
    3e82:	40 e8       	ldi	r20, 0x80	; 128
    3e84:	5f e3       	ldi	r21, 0x3F	; 63
    3e86:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    3e8a:	88 23       	and	r24, r24
    3e8c:	2c f4       	brge	.+10     	; 0x3e98 <LCD_SendData+0x128>
		__ticks = 1;
    3e8e:	81 e0       	ldi	r24, 0x01	; 1
    3e90:	90 e0       	ldi	r25, 0x00	; 0
    3e92:	9e 83       	std	Y+6, r25	; 0x06
    3e94:	8d 83       	std	Y+5, r24	; 0x05
    3e96:	3f c0       	rjmp	.+126    	; 0x3f16 <LCD_SendData+0x1a6>
	else if (__tmp > 65535)
    3e98:	6f 81       	ldd	r22, Y+7	; 0x07
    3e9a:	78 85       	ldd	r23, Y+8	; 0x08
    3e9c:	89 85       	ldd	r24, Y+9	; 0x09
    3e9e:	9a 85       	ldd	r25, Y+10	; 0x0a
    3ea0:	20 e0       	ldi	r18, 0x00	; 0
    3ea2:	3f ef       	ldi	r19, 0xFF	; 255
    3ea4:	4f e7       	ldi	r20, 0x7F	; 127
    3ea6:	57 e4       	ldi	r21, 0x47	; 71
    3ea8:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    3eac:	18 16       	cp	r1, r24
    3eae:	4c f5       	brge	.+82     	; 0x3f02 <LCD_SendData+0x192>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    3eb0:	6b 85       	ldd	r22, Y+11	; 0x0b
    3eb2:	7c 85       	ldd	r23, Y+12	; 0x0c
    3eb4:	8d 85       	ldd	r24, Y+13	; 0x0d
    3eb6:	9e 85       	ldd	r25, Y+14	; 0x0e
    3eb8:	20 e0       	ldi	r18, 0x00	; 0
    3eba:	30 e0       	ldi	r19, 0x00	; 0
    3ebc:	40 e2       	ldi	r20, 0x20	; 32
    3ebe:	51 e4       	ldi	r21, 0x41	; 65
    3ec0:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    3ec4:	dc 01       	movw	r26, r24
    3ec6:	cb 01       	movw	r24, r22
    3ec8:	bc 01       	movw	r22, r24
    3eca:	cd 01       	movw	r24, r26
    3ecc:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    3ed0:	dc 01       	movw	r26, r24
    3ed2:	cb 01       	movw	r24, r22
    3ed4:	9e 83       	std	Y+6, r25	; 0x06
    3ed6:	8d 83       	std	Y+5, r24	; 0x05
    3ed8:	0f c0       	rjmp	.+30     	; 0x3ef8 <LCD_SendData+0x188>
    3eda:	88 ec       	ldi	r24, 0xC8	; 200
    3edc:	90 e0       	ldi	r25, 0x00	; 0
    3ede:	9c 83       	std	Y+4, r25	; 0x04
    3ee0:	8b 83       	std	Y+3, r24	; 0x03
    3ee2:	8b 81       	ldd	r24, Y+3	; 0x03
    3ee4:	9c 81       	ldd	r25, Y+4	; 0x04
    3ee6:	01 97       	sbiw	r24, 0x01	; 1
    3ee8:	f1 f7       	brne	.-4      	; 0x3ee6 <LCD_SendData+0x176>
    3eea:	9c 83       	std	Y+4, r25	; 0x04
    3eec:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    3eee:	8d 81       	ldd	r24, Y+5	; 0x05
    3ef0:	9e 81       	ldd	r25, Y+6	; 0x06
    3ef2:	01 97       	sbiw	r24, 0x01	; 1
    3ef4:	9e 83       	std	Y+6, r25	; 0x06
    3ef6:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    3ef8:	8d 81       	ldd	r24, Y+5	; 0x05
    3efa:	9e 81       	ldd	r25, Y+6	; 0x06
    3efc:	00 97       	sbiw	r24, 0x00	; 0
    3efe:	69 f7       	brne	.-38     	; 0x3eda <LCD_SendData+0x16a>
    3f00:	14 c0       	rjmp	.+40     	; 0x3f2a <LCD_SendData+0x1ba>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    3f02:	6f 81       	ldd	r22, Y+7	; 0x07
    3f04:	78 85       	ldd	r23, Y+8	; 0x08
    3f06:	89 85       	ldd	r24, Y+9	; 0x09
    3f08:	9a 85       	ldd	r25, Y+10	; 0x0a
    3f0a:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    3f0e:	dc 01       	movw	r26, r24
    3f10:	cb 01       	movw	r24, r22
    3f12:	9e 83       	std	Y+6, r25	; 0x06
    3f14:	8d 83       	std	Y+5, r24	; 0x05
    3f16:	8d 81       	ldd	r24, Y+5	; 0x05
    3f18:	9e 81       	ldd	r25, Y+6	; 0x06
    3f1a:	9a 83       	std	Y+2, r25	; 0x02
    3f1c:	89 83       	std	Y+1, r24	; 0x01
    3f1e:	89 81       	ldd	r24, Y+1	; 0x01
    3f20:	9a 81       	ldd	r25, Y+2	; 0x02
    3f22:	01 97       	sbiw	r24, 0x01	; 1
    3f24:	f1 f7       	brne	.-4      	; 0x3f22 <LCD_SendData+0x1b2>
    3f26:	9a 83       	std	Y+2, r25	; 0x02
    3f28:	89 83       	std	Y+1, r24	; 0x01
    _delay_ms(2);
    DIO_SetPinLevel(LCD_PIN_E, DIO_LOW);
    3f2a:	81 e0       	ldi	r24, 0x01	; 1
    3f2c:	60 e0       	ldi	r22, 0x00	; 0
    3f2e:	40 e0       	ldi	r20, 0x00	; 0
    3f30:	0e 94 7d 0b 	call	0x16fa	; 0x16fa <DIO_SetPinLevel>
}
    3f34:	2f 96       	adiw	r28, 0x0f	; 15
    3f36:	0f b6       	in	r0, 0x3f	; 63
    3f38:	f8 94       	cli
    3f3a:	de bf       	out	0x3e, r29	; 62
    3f3c:	0f be       	out	0x3f, r0	; 63
    3f3e:	cd bf       	out	0x3d, r28	; 61
    3f40:	cf 91       	pop	r28
    3f42:	df 91       	pop	r29
    3f44:	08 95       	ret

00003f46 <LCD_InitPinsMode>:


static void LCD_InitPinsMode(void) {
    3f46:	df 93       	push	r29
    3f48:	cf 93       	push	r28
    3f4a:	cd b7       	in	r28, 0x3d	; 61
    3f4c:	de b7       	in	r29, 0x3e	; 62
    DIO_SetPinMode(LCD_PIN_RS, DIO_OUTPUT);
    3f4e:	81 e0       	ldi	r24, 0x01	; 1
    3f50:	62 e0       	ldi	r22, 0x02	; 2
    3f52:	42 e0       	ldi	r20, 0x02	; 2
    3f54:	0e 94 6f 08 	call	0x10de	; 0x10de <DIO_SetPinMode>
    DIO_SetPinMode(LCD_PIN_RW, DIO_OUTPUT);
    3f58:	81 e0       	ldi	r24, 0x01	; 1
    3f5a:	61 e0       	ldi	r22, 0x01	; 1
    3f5c:	42 e0       	ldi	r20, 0x02	; 2
    3f5e:	0e 94 6f 08 	call	0x10de	; 0x10de <DIO_SetPinMode>
    DIO_SetPinMode(LCD_PIN_E , DIO_OUTPUT);
    3f62:	81 e0       	ldi	r24, 0x01	; 1
    3f64:	60 e0       	ldi	r22, 0x00	; 0
    3f66:	42 e0       	ldi	r20, 0x02	; 2
    3f68:	0e 94 6f 08 	call	0x10de	; 0x10de <DIO_SetPinMode>
    DIO_SetPinMode(LCD_PIN_D0, DIO_OUTPUT);
    3f6c:	82 e0       	ldi	r24, 0x02	; 2
    3f6e:	67 e0       	ldi	r22, 0x07	; 7
    3f70:	42 e0       	ldi	r20, 0x02	; 2
    3f72:	0e 94 6f 08 	call	0x10de	; 0x10de <DIO_SetPinMode>
    DIO_SetPinMode(LCD_PIN_D1, DIO_OUTPUT);
    3f76:	82 e0       	ldi	r24, 0x02	; 2
    3f78:	66 e0       	ldi	r22, 0x06	; 6
    3f7a:	42 e0       	ldi	r20, 0x02	; 2
    3f7c:	0e 94 6f 08 	call	0x10de	; 0x10de <DIO_SetPinMode>
    DIO_SetPinMode(LCD_PIN_D2, DIO_OUTPUT);
    3f80:	82 e0       	ldi	r24, 0x02	; 2
    3f82:	65 e0       	ldi	r22, 0x05	; 5
    3f84:	42 e0       	ldi	r20, 0x02	; 2
    3f86:	0e 94 6f 08 	call	0x10de	; 0x10de <DIO_SetPinMode>
    DIO_SetPinMode(LCD_PIN_D3, DIO_OUTPUT);
    3f8a:	82 e0       	ldi	r24, 0x02	; 2
    3f8c:	64 e0       	ldi	r22, 0x04	; 4
    3f8e:	42 e0       	ldi	r20, 0x02	; 2
    3f90:	0e 94 6f 08 	call	0x10de	; 0x10de <DIO_SetPinMode>
    DIO_SetPinMode(LCD_PIN_D4, DIO_OUTPUT);
    3f94:	82 e0       	ldi	r24, 0x02	; 2
    3f96:	63 e0       	ldi	r22, 0x03	; 3
    3f98:	42 e0       	ldi	r20, 0x02	; 2
    3f9a:	0e 94 6f 08 	call	0x10de	; 0x10de <DIO_SetPinMode>
    DIO_SetPinMode(LCD_PIN_D5, DIO_OUTPUT);
    3f9e:	82 e0       	ldi	r24, 0x02	; 2
    3fa0:	62 e0       	ldi	r22, 0x02	; 2
    3fa2:	42 e0       	ldi	r20, 0x02	; 2
    3fa4:	0e 94 6f 08 	call	0x10de	; 0x10de <DIO_SetPinMode>
    DIO_SetPinMode(LCD_PIN_D6, DIO_OUTPUT);
    3fa8:	82 e0       	ldi	r24, 0x02	; 2
    3faa:	61 e0       	ldi	r22, 0x01	; 1
    3fac:	42 e0       	ldi	r20, 0x02	; 2
    3fae:	0e 94 6f 08 	call	0x10de	; 0x10de <DIO_SetPinMode>
    DIO_SetPinMode(LCD_PIN_D7, DIO_OUTPUT);
    3fb2:	82 e0       	ldi	r24, 0x02	; 2
    3fb4:	60 e0       	ldi	r22, 0x00	; 0
    3fb6:	42 e0       	ldi	r20, 0x02	; 2
    3fb8:	0e 94 6f 08 	call	0x10de	; 0x10de <DIO_SetPinMode>
}
    3fbc:	cf 91       	pop	r28
    3fbe:	df 91       	pop	r29
    3fc0:	08 95       	ret

00003fc2 <SSD_Init>:
	_delay_ms(500);
	PORTD = 0b01101111; // Print 9
	_delay_ms(500);
	PORTD = 0b00000000; // off*/

void SSD_Init(void) {
    3fc2:	df 93       	push	r29
    3fc4:	cf 93       	push	r28
    3fc6:	cd b7       	in	r28, 0x3d	; 61
    3fc8:	de b7       	in	r29, 0x3e	; 62
    DIO_SetPinMode(SSD_PIN_A, DIO_OUTPUT);
    3fca:	82 e0       	ldi	r24, 0x02	; 2
    3fcc:	60 e0       	ldi	r22, 0x00	; 0
    3fce:	42 e0       	ldi	r20, 0x02	; 2
    3fd0:	0e 94 6f 08 	call	0x10de	; 0x10de <DIO_SetPinMode>
    DIO_SetPinMode(SSD_PIN_B, DIO_OUTPUT);
    3fd4:	82 e0       	ldi	r24, 0x02	; 2
    3fd6:	61 e0       	ldi	r22, 0x01	; 1
    3fd8:	42 e0       	ldi	r20, 0x02	; 2
    3fda:	0e 94 6f 08 	call	0x10de	; 0x10de <DIO_SetPinMode>
    DIO_SetPinMode(SSD_PIN_C, DIO_OUTPUT);
    3fde:	82 e0       	ldi	r24, 0x02	; 2
    3fe0:	62 e0       	ldi	r22, 0x02	; 2
    3fe2:	42 e0       	ldi	r20, 0x02	; 2
    3fe4:	0e 94 6f 08 	call	0x10de	; 0x10de <DIO_SetPinMode>
    DIO_SetPinMode(SSD_PIN_D, DIO_OUTPUT);
    3fe8:	82 e0       	ldi	r24, 0x02	; 2
    3fea:	63 e0       	ldi	r22, 0x03	; 3
    3fec:	42 e0       	ldi	r20, 0x02	; 2
    3fee:	0e 94 6f 08 	call	0x10de	; 0x10de <DIO_SetPinMode>
    DIO_SetPinMode(SSD_PIN_E, DIO_OUTPUT);
    3ff2:	82 e0       	ldi	r24, 0x02	; 2
    3ff4:	64 e0       	ldi	r22, 0x04	; 4
    3ff6:	42 e0       	ldi	r20, 0x02	; 2
    3ff8:	0e 94 6f 08 	call	0x10de	; 0x10de <DIO_SetPinMode>
    DIO_SetPinMode(SSD_PIN_F, DIO_OUTPUT);
    3ffc:	82 e0       	ldi	r24, 0x02	; 2
    3ffe:	65 e0       	ldi	r22, 0x05	; 5
    4000:	42 e0       	ldi	r20, 0x02	; 2
    4002:	0e 94 6f 08 	call	0x10de	; 0x10de <DIO_SetPinMode>
    DIO_SetPinMode(SSD_PIN_G, DIO_OUTPUT);
    4006:	82 e0       	ldi	r24, 0x02	; 2
    4008:	66 e0       	ldi	r22, 0x06	; 6
    400a:	42 e0       	ldi	r20, 0x02	; 2
    400c:	0e 94 6f 08 	call	0x10de	; 0x10de <DIO_SetPinMode>

}
    4010:	cf 91       	pop	r28
    4012:	df 91       	pop	r29
    4014:	08 95       	ret

00004016 <SSD_Write>:
void SSD_Write (SSD_NumberType number) {
    4016:	df 93       	push	r29
    4018:	cf 93       	push	r28
    401a:	00 d0       	rcall	.+0      	; 0x401c <SSD_Write+0x6>
    401c:	0f 92       	push	r0
    401e:	cd b7       	in	r28, 0x3d	; 61
    4020:	de b7       	in	r29, 0x3e	; 62
    4022:	89 83       	std	Y+1, r24	; 0x01
    switch (number)
    4024:	89 81       	ldd	r24, Y+1	; 0x01
    4026:	28 2f       	mov	r18, r24
    4028:	30 e0       	ldi	r19, 0x00	; 0
    402a:	3b 83       	std	Y+3, r19	; 0x03
    402c:	2a 83       	std	Y+2, r18	; 0x02
    402e:	8a 81       	ldd	r24, Y+2	; 0x02
    4030:	9b 81       	ldd	r25, Y+3	; 0x03
    4032:	84 30       	cpi	r24, 0x04	; 4
    4034:	91 05       	cpc	r25, r1
    4036:	09 f4       	brne	.+2      	; 0x403a <SSD_Write+0x24>
    4038:	d7 c0       	rjmp	.+430    	; 0x41e8 <SSD_Write+0x1d2>
    403a:	2a 81       	ldd	r18, Y+2	; 0x02
    403c:	3b 81       	ldd	r19, Y+3	; 0x03
    403e:	25 30       	cpi	r18, 0x05	; 5
    4040:	31 05       	cpc	r19, r1
    4042:	ec f4       	brge	.+58     	; 0x407e <SSD_Write+0x68>
    4044:	8a 81       	ldd	r24, Y+2	; 0x02
    4046:	9b 81       	ldd	r25, Y+3	; 0x03
    4048:	81 30       	cpi	r24, 0x01	; 1
    404a:	91 05       	cpc	r25, r1
    404c:	09 f4       	brne	.+2      	; 0x4050 <SSD_Write+0x3a>
    404e:	60 c0       	rjmp	.+192    	; 0x4110 <SSD_Write+0xfa>
    4050:	2a 81       	ldd	r18, Y+2	; 0x02
    4052:	3b 81       	ldd	r19, Y+3	; 0x03
    4054:	22 30       	cpi	r18, 0x02	; 2
    4056:	31 05       	cpc	r19, r1
    4058:	2c f4       	brge	.+10     	; 0x4064 <SSD_Write+0x4e>
    405a:	8a 81       	ldd	r24, Y+2	; 0x02
    405c:	9b 81       	ldd	r25, Y+3	; 0x03
    405e:	00 97       	sbiw	r24, 0x00	; 0
    4060:	99 f1       	breq	.+102    	; 0x40c8 <SSD_Write+0xb2>
    4062:	9a c1       	rjmp	.+820    	; 0x4398 <SSD_Write+0x382>
    4064:	2a 81       	ldd	r18, Y+2	; 0x02
    4066:	3b 81       	ldd	r19, Y+3	; 0x03
    4068:	22 30       	cpi	r18, 0x02	; 2
    406a:	31 05       	cpc	r19, r1
    406c:	09 f4       	brne	.+2      	; 0x4070 <SSD_Write+0x5a>
    406e:	74 c0       	rjmp	.+232    	; 0x4158 <SSD_Write+0x142>
    4070:	8a 81       	ldd	r24, Y+2	; 0x02
    4072:	9b 81       	ldd	r25, Y+3	; 0x03
    4074:	83 30       	cpi	r24, 0x03	; 3
    4076:	91 05       	cpc	r25, r1
    4078:	09 f4       	brne	.+2      	; 0x407c <SSD_Write+0x66>
    407a:	92 c0       	rjmp	.+292    	; 0x41a0 <SSD_Write+0x18a>
    407c:	8d c1       	rjmp	.+794    	; 0x4398 <SSD_Write+0x382>
    407e:	2a 81       	ldd	r18, Y+2	; 0x02
    4080:	3b 81       	ldd	r19, Y+3	; 0x03
    4082:	27 30       	cpi	r18, 0x07	; 7
    4084:	31 05       	cpc	r19, r1
    4086:	09 f4       	brne	.+2      	; 0x408a <SSD_Write+0x74>
    4088:	1b c1       	rjmp	.+566    	; 0x42c0 <SSD_Write+0x2aa>
    408a:	8a 81       	ldd	r24, Y+2	; 0x02
    408c:	9b 81       	ldd	r25, Y+3	; 0x03
    408e:	88 30       	cpi	r24, 0x08	; 8
    4090:	91 05       	cpc	r25, r1
    4092:	6c f4       	brge	.+26     	; 0x40ae <SSD_Write+0x98>
    4094:	2a 81       	ldd	r18, Y+2	; 0x02
    4096:	3b 81       	ldd	r19, Y+3	; 0x03
    4098:	25 30       	cpi	r18, 0x05	; 5
    409a:	31 05       	cpc	r19, r1
    409c:	09 f4       	brne	.+2      	; 0x40a0 <SSD_Write+0x8a>
    409e:	c8 c0       	rjmp	.+400    	; 0x4230 <SSD_Write+0x21a>
    40a0:	8a 81       	ldd	r24, Y+2	; 0x02
    40a2:	9b 81       	ldd	r25, Y+3	; 0x03
    40a4:	86 30       	cpi	r24, 0x06	; 6
    40a6:	91 05       	cpc	r25, r1
    40a8:	09 f4       	brne	.+2      	; 0x40ac <SSD_Write+0x96>
    40aa:	e6 c0       	rjmp	.+460    	; 0x4278 <SSD_Write+0x262>
    40ac:	75 c1       	rjmp	.+746    	; 0x4398 <SSD_Write+0x382>
    40ae:	2a 81       	ldd	r18, Y+2	; 0x02
    40b0:	3b 81       	ldd	r19, Y+3	; 0x03
    40b2:	28 30       	cpi	r18, 0x08	; 8
    40b4:	31 05       	cpc	r19, r1
    40b6:	09 f4       	brne	.+2      	; 0x40ba <SSD_Write+0xa4>
    40b8:	27 c1       	rjmp	.+590    	; 0x4308 <SSD_Write+0x2f2>
    40ba:	8a 81       	ldd	r24, Y+2	; 0x02
    40bc:	9b 81       	ldd	r25, Y+3	; 0x03
    40be:	89 30       	cpi	r24, 0x09	; 9
    40c0:	91 05       	cpc	r25, r1
    40c2:	09 f4       	brne	.+2      	; 0x40c6 <SSD_Write+0xb0>
    40c4:	45 c1       	rjmp	.+650    	; 0x4350 <SSD_Write+0x33a>
    40c6:	68 c1       	rjmp	.+720    	; 0x4398 <SSD_Write+0x382>
    {

    case SSD_NUMBER_0: // 0b00111111
    #if SSD_TYPE == COMM_CATHODE
        DIO_SetPinLevel(SSD_PIN_A, DIO_HIGH);
    40c8:	82 e0       	ldi	r24, 0x02	; 2
    40ca:	60 e0       	ldi	r22, 0x00	; 0
    40cc:	41 e0       	ldi	r20, 0x01	; 1
    40ce:	0e 94 7d 0b 	call	0x16fa	; 0x16fa <DIO_SetPinLevel>
        DIO_SetPinLevel(SSD_PIN_B, DIO_HIGH);
    40d2:	82 e0       	ldi	r24, 0x02	; 2
    40d4:	61 e0       	ldi	r22, 0x01	; 1
    40d6:	41 e0       	ldi	r20, 0x01	; 1
    40d8:	0e 94 7d 0b 	call	0x16fa	; 0x16fa <DIO_SetPinLevel>
        DIO_SetPinLevel(SSD_PIN_C, DIO_HIGH);
    40dc:	82 e0       	ldi	r24, 0x02	; 2
    40de:	62 e0       	ldi	r22, 0x02	; 2
    40e0:	41 e0       	ldi	r20, 0x01	; 1
    40e2:	0e 94 7d 0b 	call	0x16fa	; 0x16fa <DIO_SetPinLevel>
        DIO_SetPinLevel(SSD_PIN_D, DIO_HIGH);
    40e6:	82 e0       	ldi	r24, 0x02	; 2
    40e8:	63 e0       	ldi	r22, 0x03	; 3
    40ea:	41 e0       	ldi	r20, 0x01	; 1
    40ec:	0e 94 7d 0b 	call	0x16fa	; 0x16fa <DIO_SetPinLevel>
        DIO_SetPinLevel(SSD_PIN_E, DIO_HIGH);
    40f0:	82 e0       	ldi	r24, 0x02	; 2
    40f2:	64 e0       	ldi	r22, 0x04	; 4
    40f4:	41 e0       	ldi	r20, 0x01	; 1
    40f6:	0e 94 7d 0b 	call	0x16fa	; 0x16fa <DIO_SetPinLevel>
        DIO_SetPinLevel(SSD_PIN_F, DIO_HIGH);
    40fa:	82 e0       	ldi	r24, 0x02	; 2
    40fc:	65 e0       	ldi	r22, 0x05	; 5
    40fe:	41 e0       	ldi	r20, 0x01	; 1
    4100:	0e 94 7d 0b 	call	0x16fa	; 0x16fa <DIO_SetPinLevel>
        DIO_SetPinLevel(SSD_PIN_G, DIO_LOW);
    4104:	82 e0       	ldi	r24, 0x02	; 2
    4106:	66 e0       	ldi	r22, 0x06	; 6
    4108:	40 e0       	ldi	r20, 0x00	; 0
    410a:	0e 94 7d 0b 	call	0x16fa	; 0x16fa <DIO_SetPinLevel>
    410e:	67 c1       	rjmp	.+718    	; 0x43de <SSD_Write+0x3c8>
    #endif
        break;

    case SSD_NUMBER_1: // 0b00000110
    #if SSD_TYPE == COMM_CATHODE
        DIO_SetPinLevel(SSD_PIN_A, DIO_LOW);
    4110:	82 e0       	ldi	r24, 0x02	; 2
    4112:	60 e0       	ldi	r22, 0x00	; 0
    4114:	40 e0       	ldi	r20, 0x00	; 0
    4116:	0e 94 7d 0b 	call	0x16fa	; 0x16fa <DIO_SetPinLevel>
        DIO_SetPinLevel(SSD_PIN_B, DIO_HIGH);
    411a:	82 e0       	ldi	r24, 0x02	; 2
    411c:	61 e0       	ldi	r22, 0x01	; 1
    411e:	41 e0       	ldi	r20, 0x01	; 1
    4120:	0e 94 7d 0b 	call	0x16fa	; 0x16fa <DIO_SetPinLevel>
        DIO_SetPinLevel(SSD_PIN_C, DIO_HIGH);
    4124:	82 e0       	ldi	r24, 0x02	; 2
    4126:	62 e0       	ldi	r22, 0x02	; 2
    4128:	41 e0       	ldi	r20, 0x01	; 1
    412a:	0e 94 7d 0b 	call	0x16fa	; 0x16fa <DIO_SetPinLevel>
        DIO_SetPinLevel(SSD_PIN_D, DIO_LOW);
    412e:	82 e0       	ldi	r24, 0x02	; 2
    4130:	63 e0       	ldi	r22, 0x03	; 3
    4132:	40 e0       	ldi	r20, 0x00	; 0
    4134:	0e 94 7d 0b 	call	0x16fa	; 0x16fa <DIO_SetPinLevel>
        DIO_SetPinLevel(SSD_PIN_E, DIO_LOW);
    4138:	82 e0       	ldi	r24, 0x02	; 2
    413a:	64 e0       	ldi	r22, 0x04	; 4
    413c:	40 e0       	ldi	r20, 0x00	; 0
    413e:	0e 94 7d 0b 	call	0x16fa	; 0x16fa <DIO_SetPinLevel>
        DIO_SetPinLevel(SSD_PIN_F, DIO_LOW);
    4142:	82 e0       	ldi	r24, 0x02	; 2
    4144:	65 e0       	ldi	r22, 0x05	; 5
    4146:	40 e0       	ldi	r20, 0x00	; 0
    4148:	0e 94 7d 0b 	call	0x16fa	; 0x16fa <DIO_SetPinLevel>
        DIO_SetPinLevel(SSD_PIN_G, DIO_LOW);
    414c:	82 e0       	ldi	r24, 0x02	; 2
    414e:	66 e0       	ldi	r22, 0x06	; 6
    4150:	40 e0       	ldi	r20, 0x00	; 0
    4152:	0e 94 7d 0b 	call	0x16fa	; 0x16fa <DIO_SetPinLevel>
    4156:	43 c1       	rjmp	.+646    	; 0x43de <SSD_Write+0x3c8>
    #endif
        break;

    case SSD_NUMBER_2: // 0b01011011
    #if SSD_TYPE == COMM_CATHODE
        DIO_SetPinLevel(SSD_PIN_A, DIO_HIGH);
    4158:	82 e0       	ldi	r24, 0x02	; 2
    415a:	60 e0       	ldi	r22, 0x00	; 0
    415c:	41 e0       	ldi	r20, 0x01	; 1
    415e:	0e 94 7d 0b 	call	0x16fa	; 0x16fa <DIO_SetPinLevel>
        DIO_SetPinLevel(SSD_PIN_B, DIO_HIGH);
    4162:	82 e0       	ldi	r24, 0x02	; 2
    4164:	61 e0       	ldi	r22, 0x01	; 1
    4166:	41 e0       	ldi	r20, 0x01	; 1
    4168:	0e 94 7d 0b 	call	0x16fa	; 0x16fa <DIO_SetPinLevel>
        DIO_SetPinLevel(SSD_PIN_C, DIO_LOW);
    416c:	82 e0       	ldi	r24, 0x02	; 2
    416e:	62 e0       	ldi	r22, 0x02	; 2
    4170:	40 e0       	ldi	r20, 0x00	; 0
    4172:	0e 94 7d 0b 	call	0x16fa	; 0x16fa <DIO_SetPinLevel>
        DIO_SetPinLevel(SSD_PIN_D, DIO_HIGH);
    4176:	82 e0       	ldi	r24, 0x02	; 2
    4178:	63 e0       	ldi	r22, 0x03	; 3
    417a:	41 e0       	ldi	r20, 0x01	; 1
    417c:	0e 94 7d 0b 	call	0x16fa	; 0x16fa <DIO_SetPinLevel>
        DIO_SetPinLevel(SSD_PIN_E, DIO_HIGH);
    4180:	82 e0       	ldi	r24, 0x02	; 2
    4182:	64 e0       	ldi	r22, 0x04	; 4
    4184:	41 e0       	ldi	r20, 0x01	; 1
    4186:	0e 94 7d 0b 	call	0x16fa	; 0x16fa <DIO_SetPinLevel>
        DIO_SetPinLevel(SSD_PIN_F, DIO_LOW);
    418a:	82 e0       	ldi	r24, 0x02	; 2
    418c:	65 e0       	ldi	r22, 0x05	; 5
    418e:	40 e0       	ldi	r20, 0x00	; 0
    4190:	0e 94 7d 0b 	call	0x16fa	; 0x16fa <DIO_SetPinLevel>
        DIO_SetPinLevel(SSD_PIN_G, DIO_HIGH);
    4194:	82 e0       	ldi	r24, 0x02	; 2
    4196:	66 e0       	ldi	r22, 0x06	; 6
    4198:	41 e0       	ldi	r20, 0x01	; 1
    419a:	0e 94 7d 0b 	call	0x16fa	; 0x16fa <DIO_SetPinLevel>
    419e:	1f c1       	rjmp	.+574    	; 0x43de <SSD_Write+0x3c8>

        break;

    case SSD_NUMBER_3: // 0b01001111
    #if SSD_TYPE == COMM_CATHODE
        DIO_SetPinLevel(SSD_PIN_A, DIO_HIGH);
    41a0:	82 e0       	ldi	r24, 0x02	; 2
    41a2:	60 e0       	ldi	r22, 0x00	; 0
    41a4:	41 e0       	ldi	r20, 0x01	; 1
    41a6:	0e 94 7d 0b 	call	0x16fa	; 0x16fa <DIO_SetPinLevel>
        DIO_SetPinLevel(SSD_PIN_B, DIO_HIGH);
    41aa:	82 e0       	ldi	r24, 0x02	; 2
    41ac:	61 e0       	ldi	r22, 0x01	; 1
    41ae:	41 e0       	ldi	r20, 0x01	; 1
    41b0:	0e 94 7d 0b 	call	0x16fa	; 0x16fa <DIO_SetPinLevel>
        DIO_SetPinLevel(SSD_PIN_C, DIO_HIGH);
    41b4:	82 e0       	ldi	r24, 0x02	; 2
    41b6:	62 e0       	ldi	r22, 0x02	; 2
    41b8:	41 e0       	ldi	r20, 0x01	; 1
    41ba:	0e 94 7d 0b 	call	0x16fa	; 0x16fa <DIO_SetPinLevel>
        DIO_SetPinLevel(SSD_PIN_D, DIO_HIGH);
    41be:	82 e0       	ldi	r24, 0x02	; 2
    41c0:	63 e0       	ldi	r22, 0x03	; 3
    41c2:	41 e0       	ldi	r20, 0x01	; 1
    41c4:	0e 94 7d 0b 	call	0x16fa	; 0x16fa <DIO_SetPinLevel>
        DIO_SetPinLevel(SSD_PIN_E, DIO_LOW);
    41c8:	82 e0       	ldi	r24, 0x02	; 2
    41ca:	64 e0       	ldi	r22, 0x04	; 4
    41cc:	40 e0       	ldi	r20, 0x00	; 0
    41ce:	0e 94 7d 0b 	call	0x16fa	; 0x16fa <DIO_SetPinLevel>
        DIO_SetPinLevel(SSD_PIN_F, DIO_LOW);
    41d2:	82 e0       	ldi	r24, 0x02	; 2
    41d4:	65 e0       	ldi	r22, 0x05	; 5
    41d6:	40 e0       	ldi	r20, 0x00	; 0
    41d8:	0e 94 7d 0b 	call	0x16fa	; 0x16fa <DIO_SetPinLevel>
        DIO_SetPinLevel(SSD_PIN_G, DIO_HIGH);
    41dc:	82 e0       	ldi	r24, 0x02	; 2
    41de:	66 e0       	ldi	r22, 0x06	; 6
    41e0:	41 e0       	ldi	r20, 0x01	; 1
    41e2:	0e 94 7d 0b 	call	0x16fa	; 0x16fa <DIO_SetPinLevel>
    41e6:	fb c0       	rjmp	.+502    	; 0x43de <SSD_Write+0x3c8>
    #endif

        break;
    case SSD_NUMBER_4: // 0b01100110
    #if SSD_TYPE == COMM_CATHODE
        DIO_SetPinLevel(SSD_PIN_A, DIO_LOW);
    41e8:	82 e0       	ldi	r24, 0x02	; 2
    41ea:	60 e0       	ldi	r22, 0x00	; 0
    41ec:	40 e0       	ldi	r20, 0x00	; 0
    41ee:	0e 94 7d 0b 	call	0x16fa	; 0x16fa <DIO_SetPinLevel>
        DIO_SetPinLevel(SSD_PIN_B, DIO_HIGH);
    41f2:	82 e0       	ldi	r24, 0x02	; 2
    41f4:	61 e0       	ldi	r22, 0x01	; 1
    41f6:	41 e0       	ldi	r20, 0x01	; 1
    41f8:	0e 94 7d 0b 	call	0x16fa	; 0x16fa <DIO_SetPinLevel>
        DIO_SetPinLevel(SSD_PIN_C, DIO_HIGH);
    41fc:	82 e0       	ldi	r24, 0x02	; 2
    41fe:	62 e0       	ldi	r22, 0x02	; 2
    4200:	41 e0       	ldi	r20, 0x01	; 1
    4202:	0e 94 7d 0b 	call	0x16fa	; 0x16fa <DIO_SetPinLevel>
        DIO_SetPinLevel(SSD_PIN_D, DIO_LOW);
    4206:	82 e0       	ldi	r24, 0x02	; 2
    4208:	63 e0       	ldi	r22, 0x03	; 3
    420a:	40 e0       	ldi	r20, 0x00	; 0
    420c:	0e 94 7d 0b 	call	0x16fa	; 0x16fa <DIO_SetPinLevel>
        DIO_SetPinLevel(SSD_PIN_E, DIO_LOW);
    4210:	82 e0       	ldi	r24, 0x02	; 2
    4212:	64 e0       	ldi	r22, 0x04	; 4
    4214:	40 e0       	ldi	r20, 0x00	; 0
    4216:	0e 94 7d 0b 	call	0x16fa	; 0x16fa <DIO_SetPinLevel>
        DIO_SetPinLevel(SSD_PIN_F, DIO_HIGH);
    421a:	82 e0       	ldi	r24, 0x02	; 2
    421c:	65 e0       	ldi	r22, 0x05	; 5
    421e:	41 e0       	ldi	r20, 0x01	; 1
    4220:	0e 94 7d 0b 	call	0x16fa	; 0x16fa <DIO_SetPinLevel>
        DIO_SetPinLevel(SSD_PIN_G, DIO_HIGH);
    4224:	82 e0       	ldi	r24, 0x02	; 2
    4226:	66 e0       	ldi	r22, 0x06	; 6
    4228:	41 e0       	ldi	r20, 0x01	; 1
    422a:	0e 94 7d 0b 	call	0x16fa	; 0x16fa <DIO_SetPinLevel>
    422e:	d7 c0       	rjmp	.+430    	; 0x43de <SSD_Write+0x3c8>
    #endif

        break;
    case SSD_NUMBER_5: // 0b01101101
    #if SSD_TYPE == COMM_CATHODE
        DIO_SetPinLevel(SSD_PIN_A, DIO_HIGH);
    4230:	82 e0       	ldi	r24, 0x02	; 2
    4232:	60 e0       	ldi	r22, 0x00	; 0
    4234:	41 e0       	ldi	r20, 0x01	; 1
    4236:	0e 94 7d 0b 	call	0x16fa	; 0x16fa <DIO_SetPinLevel>
        DIO_SetPinLevel(SSD_PIN_B, DIO_LOW);
    423a:	82 e0       	ldi	r24, 0x02	; 2
    423c:	61 e0       	ldi	r22, 0x01	; 1
    423e:	40 e0       	ldi	r20, 0x00	; 0
    4240:	0e 94 7d 0b 	call	0x16fa	; 0x16fa <DIO_SetPinLevel>
        DIO_SetPinLevel(SSD_PIN_C, DIO_HIGH);
    4244:	82 e0       	ldi	r24, 0x02	; 2
    4246:	62 e0       	ldi	r22, 0x02	; 2
    4248:	41 e0       	ldi	r20, 0x01	; 1
    424a:	0e 94 7d 0b 	call	0x16fa	; 0x16fa <DIO_SetPinLevel>
        DIO_SetPinLevel(SSD_PIN_D, DIO_HIGH);
    424e:	82 e0       	ldi	r24, 0x02	; 2
    4250:	63 e0       	ldi	r22, 0x03	; 3
    4252:	41 e0       	ldi	r20, 0x01	; 1
    4254:	0e 94 7d 0b 	call	0x16fa	; 0x16fa <DIO_SetPinLevel>
        DIO_SetPinLevel(SSD_PIN_E, DIO_LOW);
    4258:	82 e0       	ldi	r24, 0x02	; 2
    425a:	64 e0       	ldi	r22, 0x04	; 4
    425c:	40 e0       	ldi	r20, 0x00	; 0
    425e:	0e 94 7d 0b 	call	0x16fa	; 0x16fa <DIO_SetPinLevel>
        DIO_SetPinLevel(SSD_PIN_F, DIO_HIGH);
    4262:	82 e0       	ldi	r24, 0x02	; 2
    4264:	65 e0       	ldi	r22, 0x05	; 5
    4266:	41 e0       	ldi	r20, 0x01	; 1
    4268:	0e 94 7d 0b 	call	0x16fa	; 0x16fa <DIO_SetPinLevel>
        DIO_SetPinLevel(SSD_PIN_G, DIO_HIGH);
    426c:	82 e0       	ldi	r24, 0x02	; 2
    426e:	66 e0       	ldi	r22, 0x06	; 6
    4270:	41 e0       	ldi	r20, 0x01	; 1
    4272:	0e 94 7d 0b 	call	0x16fa	; 0x16fa <DIO_SetPinLevel>
    4276:	b3 c0       	rjmp	.+358    	; 0x43de <SSD_Write+0x3c8>
    #endif

        break;
    case SSD_NUMBER_6: // 0b01111101
            #if SSD_TYPE == COMM_CATHODE
        DIO_SetPinLevel(SSD_PIN_A, DIO_HIGH);
    4278:	82 e0       	ldi	r24, 0x02	; 2
    427a:	60 e0       	ldi	r22, 0x00	; 0
    427c:	41 e0       	ldi	r20, 0x01	; 1
    427e:	0e 94 7d 0b 	call	0x16fa	; 0x16fa <DIO_SetPinLevel>
        DIO_SetPinLevel(SSD_PIN_B, DIO_LOW);
    4282:	82 e0       	ldi	r24, 0x02	; 2
    4284:	61 e0       	ldi	r22, 0x01	; 1
    4286:	40 e0       	ldi	r20, 0x00	; 0
    4288:	0e 94 7d 0b 	call	0x16fa	; 0x16fa <DIO_SetPinLevel>
        DIO_SetPinLevel(SSD_PIN_C, DIO_HIGH);
    428c:	82 e0       	ldi	r24, 0x02	; 2
    428e:	62 e0       	ldi	r22, 0x02	; 2
    4290:	41 e0       	ldi	r20, 0x01	; 1
    4292:	0e 94 7d 0b 	call	0x16fa	; 0x16fa <DIO_SetPinLevel>
        DIO_SetPinLevel(SSD_PIN_D, DIO_HIGH);
    4296:	82 e0       	ldi	r24, 0x02	; 2
    4298:	63 e0       	ldi	r22, 0x03	; 3
    429a:	41 e0       	ldi	r20, 0x01	; 1
    429c:	0e 94 7d 0b 	call	0x16fa	; 0x16fa <DIO_SetPinLevel>
        DIO_SetPinLevel(SSD_PIN_E, DIO_HIGH);
    42a0:	82 e0       	ldi	r24, 0x02	; 2
    42a2:	64 e0       	ldi	r22, 0x04	; 4
    42a4:	41 e0       	ldi	r20, 0x01	; 1
    42a6:	0e 94 7d 0b 	call	0x16fa	; 0x16fa <DIO_SetPinLevel>
        DIO_SetPinLevel(SSD_PIN_F, DIO_HIGH);
    42aa:	82 e0       	ldi	r24, 0x02	; 2
    42ac:	65 e0       	ldi	r22, 0x05	; 5
    42ae:	41 e0       	ldi	r20, 0x01	; 1
    42b0:	0e 94 7d 0b 	call	0x16fa	; 0x16fa <DIO_SetPinLevel>
        DIO_SetPinLevel(SSD_PIN_G, DIO_HIGH);
    42b4:	82 e0       	ldi	r24, 0x02	; 2
    42b6:	66 e0       	ldi	r22, 0x06	; 6
    42b8:	41 e0       	ldi	r20, 0x01	; 1
    42ba:	0e 94 7d 0b 	call	0x16fa	; 0x16fa <DIO_SetPinLevel>
    42be:	8f c0       	rjmp	.+286    	; 0x43de <SSD_Write+0x3c8>
        #error "Invalid SSD Type"
    #endif
        break;
    case SSD_NUMBER_7: // 0b00000111
        #if SSD_TYPE == COMM_CATHODE
        DIO_SetPinLevel(SSD_PIN_A, DIO_HIGH);
    42c0:	82 e0       	ldi	r24, 0x02	; 2
    42c2:	60 e0       	ldi	r22, 0x00	; 0
    42c4:	41 e0       	ldi	r20, 0x01	; 1
    42c6:	0e 94 7d 0b 	call	0x16fa	; 0x16fa <DIO_SetPinLevel>
        DIO_SetPinLevel(SSD_PIN_B, DIO_HIGH);
    42ca:	82 e0       	ldi	r24, 0x02	; 2
    42cc:	61 e0       	ldi	r22, 0x01	; 1
    42ce:	41 e0       	ldi	r20, 0x01	; 1
    42d0:	0e 94 7d 0b 	call	0x16fa	; 0x16fa <DIO_SetPinLevel>
        DIO_SetPinLevel(SSD_PIN_C, DIO_HIGH);
    42d4:	82 e0       	ldi	r24, 0x02	; 2
    42d6:	62 e0       	ldi	r22, 0x02	; 2
    42d8:	41 e0       	ldi	r20, 0x01	; 1
    42da:	0e 94 7d 0b 	call	0x16fa	; 0x16fa <DIO_SetPinLevel>
        DIO_SetPinLevel(SSD_PIN_D, DIO_LOW);
    42de:	82 e0       	ldi	r24, 0x02	; 2
    42e0:	63 e0       	ldi	r22, 0x03	; 3
    42e2:	40 e0       	ldi	r20, 0x00	; 0
    42e4:	0e 94 7d 0b 	call	0x16fa	; 0x16fa <DIO_SetPinLevel>
        DIO_SetPinLevel(SSD_PIN_E, DIO_LOW);
    42e8:	82 e0       	ldi	r24, 0x02	; 2
    42ea:	64 e0       	ldi	r22, 0x04	; 4
    42ec:	40 e0       	ldi	r20, 0x00	; 0
    42ee:	0e 94 7d 0b 	call	0x16fa	; 0x16fa <DIO_SetPinLevel>
        DIO_SetPinLevel(SSD_PIN_F, DIO_LOW);
    42f2:	82 e0       	ldi	r24, 0x02	; 2
    42f4:	65 e0       	ldi	r22, 0x05	; 5
    42f6:	40 e0       	ldi	r20, 0x00	; 0
    42f8:	0e 94 7d 0b 	call	0x16fa	; 0x16fa <DIO_SetPinLevel>
        DIO_SetPinLevel(SSD_PIN_G, DIO_LOW);
    42fc:	82 e0       	ldi	r24, 0x02	; 2
    42fe:	66 e0       	ldi	r22, 0x06	; 6
    4300:	40 e0       	ldi	r20, 0x00	; 0
    4302:	0e 94 7d 0b 	call	0x16fa	; 0x16fa <DIO_SetPinLevel>
    4306:	6b c0       	rjmp	.+214    	; 0x43de <SSD_Write+0x3c8>
    #endif

        break;
    case SSD_NUMBER_8: // 0b01111111
    #if SSD_TYPE == COMM_CATHODE
        DIO_SetPinLevel(SSD_PIN_A, DIO_HIGH);
    4308:	82 e0       	ldi	r24, 0x02	; 2
    430a:	60 e0       	ldi	r22, 0x00	; 0
    430c:	41 e0       	ldi	r20, 0x01	; 1
    430e:	0e 94 7d 0b 	call	0x16fa	; 0x16fa <DIO_SetPinLevel>
        DIO_SetPinLevel(SSD_PIN_B, DIO_HIGH);
    4312:	82 e0       	ldi	r24, 0x02	; 2
    4314:	61 e0       	ldi	r22, 0x01	; 1
    4316:	41 e0       	ldi	r20, 0x01	; 1
    4318:	0e 94 7d 0b 	call	0x16fa	; 0x16fa <DIO_SetPinLevel>
        DIO_SetPinLevel(SSD_PIN_C, DIO_HIGH);
    431c:	82 e0       	ldi	r24, 0x02	; 2
    431e:	62 e0       	ldi	r22, 0x02	; 2
    4320:	41 e0       	ldi	r20, 0x01	; 1
    4322:	0e 94 7d 0b 	call	0x16fa	; 0x16fa <DIO_SetPinLevel>
        DIO_SetPinLevel(SSD_PIN_D, DIO_HIGH);
    4326:	82 e0       	ldi	r24, 0x02	; 2
    4328:	63 e0       	ldi	r22, 0x03	; 3
    432a:	41 e0       	ldi	r20, 0x01	; 1
    432c:	0e 94 7d 0b 	call	0x16fa	; 0x16fa <DIO_SetPinLevel>
        DIO_SetPinLevel(SSD_PIN_E, DIO_HIGH);
    4330:	82 e0       	ldi	r24, 0x02	; 2
    4332:	64 e0       	ldi	r22, 0x04	; 4
    4334:	41 e0       	ldi	r20, 0x01	; 1
    4336:	0e 94 7d 0b 	call	0x16fa	; 0x16fa <DIO_SetPinLevel>
        DIO_SetPinLevel(SSD_PIN_F, DIO_HIGH);
    433a:	82 e0       	ldi	r24, 0x02	; 2
    433c:	65 e0       	ldi	r22, 0x05	; 5
    433e:	41 e0       	ldi	r20, 0x01	; 1
    4340:	0e 94 7d 0b 	call	0x16fa	; 0x16fa <DIO_SetPinLevel>
        DIO_SetPinLevel(SSD_PIN_G, DIO_HIGH);
    4344:	82 e0       	ldi	r24, 0x02	; 2
    4346:	66 e0       	ldi	r22, 0x06	; 6
    4348:	41 e0       	ldi	r20, 0x01	; 1
    434a:	0e 94 7d 0b 	call	0x16fa	; 0x16fa <DIO_SetPinLevel>
    434e:	47 c0       	rjmp	.+142    	; 0x43de <SSD_Write+0x3c8>
    #endif

        break;
    case SSD_NUMBER_9: // 0b01101111
    #if SSD_TYPE == COMM_CATHODE
        DIO_SetPinLevel(SSD_PIN_A, DIO_HIGH);
    4350:	82 e0       	ldi	r24, 0x02	; 2
    4352:	60 e0       	ldi	r22, 0x00	; 0
    4354:	41 e0       	ldi	r20, 0x01	; 1
    4356:	0e 94 7d 0b 	call	0x16fa	; 0x16fa <DIO_SetPinLevel>
        DIO_SetPinLevel(SSD_PIN_B, DIO_HIGH);
    435a:	82 e0       	ldi	r24, 0x02	; 2
    435c:	61 e0       	ldi	r22, 0x01	; 1
    435e:	41 e0       	ldi	r20, 0x01	; 1
    4360:	0e 94 7d 0b 	call	0x16fa	; 0x16fa <DIO_SetPinLevel>
        DIO_SetPinLevel(SSD_PIN_C, DIO_HIGH);
    4364:	82 e0       	ldi	r24, 0x02	; 2
    4366:	62 e0       	ldi	r22, 0x02	; 2
    4368:	41 e0       	ldi	r20, 0x01	; 1
    436a:	0e 94 7d 0b 	call	0x16fa	; 0x16fa <DIO_SetPinLevel>
        DIO_SetPinLevel(SSD_PIN_D, DIO_HIGH);
    436e:	82 e0       	ldi	r24, 0x02	; 2
    4370:	63 e0       	ldi	r22, 0x03	; 3
    4372:	41 e0       	ldi	r20, 0x01	; 1
    4374:	0e 94 7d 0b 	call	0x16fa	; 0x16fa <DIO_SetPinLevel>
        DIO_SetPinLevel(SSD_PIN_E, DIO_LOW);
    4378:	82 e0       	ldi	r24, 0x02	; 2
    437a:	64 e0       	ldi	r22, 0x04	; 4
    437c:	40 e0       	ldi	r20, 0x00	; 0
    437e:	0e 94 7d 0b 	call	0x16fa	; 0x16fa <DIO_SetPinLevel>
        DIO_SetPinLevel(SSD_PIN_F, DIO_HIGH);
    4382:	82 e0       	ldi	r24, 0x02	; 2
    4384:	65 e0       	ldi	r22, 0x05	; 5
    4386:	41 e0       	ldi	r20, 0x01	; 1
    4388:	0e 94 7d 0b 	call	0x16fa	; 0x16fa <DIO_SetPinLevel>
        DIO_SetPinLevel(SSD_PIN_G, DIO_HIGH);
    438c:	82 e0       	ldi	r24, 0x02	; 2
    438e:	66 e0       	ldi	r22, 0x06	; 6
    4390:	41 e0       	ldi	r20, 0x01	; 1
    4392:	0e 94 7d 0b 	call	0x16fa	; 0x16fa <DIO_SetPinLevel>
    4396:	23 c0       	rjmp	.+70     	; 0x43de <SSD_Write+0x3c8>
        break;

    case SSD_OFF:
    default:
    #if SSD_TYPE == COMM_CATHODE
        DIO_SetPinLevel(SSD_PIN_A, DIO_LOW);
    4398:	82 e0       	ldi	r24, 0x02	; 2
    439a:	60 e0       	ldi	r22, 0x00	; 0
    439c:	40 e0       	ldi	r20, 0x00	; 0
    439e:	0e 94 7d 0b 	call	0x16fa	; 0x16fa <DIO_SetPinLevel>
        DIO_SetPinLevel(SSD_PIN_B, DIO_LOW);
    43a2:	82 e0       	ldi	r24, 0x02	; 2
    43a4:	61 e0       	ldi	r22, 0x01	; 1
    43a6:	40 e0       	ldi	r20, 0x00	; 0
    43a8:	0e 94 7d 0b 	call	0x16fa	; 0x16fa <DIO_SetPinLevel>
        DIO_SetPinLevel(SSD_PIN_C, DIO_LOW);
    43ac:	82 e0       	ldi	r24, 0x02	; 2
    43ae:	62 e0       	ldi	r22, 0x02	; 2
    43b0:	40 e0       	ldi	r20, 0x00	; 0
    43b2:	0e 94 7d 0b 	call	0x16fa	; 0x16fa <DIO_SetPinLevel>
        DIO_SetPinLevel(SSD_PIN_D, DIO_LOW);
    43b6:	82 e0       	ldi	r24, 0x02	; 2
    43b8:	63 e0       	ldi	r22, 0x03	; 3
    43ba:	40 e0       	ldi	r20, 0x00	; 0
    43bc:	0e 94 7d 0b 	call	0x16fa	; 0x16fa <DIO_SetPinLevel>
        DIO_SetPinLevel(SSD_PIN_E, DIO_LOW);
    43c0:	82 e0       	ldi	r24, 0x02	; 2
    43c2:	64 e0       	ldi	r22, 0x04	; 4
    43c4:	40 e0       	ldi	r20, 0x00	; 0
    43c6:	0e 94 7d 0b 	call	0x16fa	; 0x16fa <DIO_SetPinLevel>
        DIO_SetPinLevel(SSD_PIN_F, DIO_LOW);
    43ca:	82 e0       	ldi	r24, 0x02	; 2
    43cc:	65 e0       	ldi	r22, 0x05	; 5
    43ce:	40 e0       	ldi	r20, 0x00	; 0
    43d0:	0e 94 7d 0b 	call	0x16fa	; 0x16fa <DIO_SetPinLevel>
        DIO_SetPinLevel(SSD_PIN_G, DIO_LOW);
    43d4:	82 e0       	ldi	r24, 0x02	; 2
    43d6:	66 e0       	ldi	r22, 0x06	; 6
    43d8:	40 e0       	ldi	r20, 0x00	; 0
    43da:	0e 94 7d 0b 	call	0x16fa	; 0x16fa <DIO_SetPinLevel>
    #else
        #error "Invalid SSD Type"
    #endif
        break;
    }
}
    43de:	0f 90       	pop	r0
    43e0:	0f 90       	pop	r0
    43e2:	0f 90       	pop	r0
    43e4:	cf 91       	pop	r28
    43e6:	df 91       	pop	r29
    43e8:	08 95       	ret

000043ea <UART_Init>:
#include "UART.h"
#include "Registers.h"
#include "DIO.h"

void UART_Init(USART_Mode_Select mode,Parity_Mode pmode,Stop_Bit_Select sbit,Character_Size csize,Baud_Rate_Setting brate)
{
    43ea:	0f 93       	push	r16
    43ec:	df 93       	push	r29
    43ee:	cf 93       	push	r28
    43f0:	cd b7       	in	r28, 0x3d	; 61
    43f2:	de b7       	in	r29, 0x3e	; 62
    43f4:	2b 97       	sbiw	r28, 0x0b	; 11
    43f6:	0f b6       	in	r0, 0x3f	; 63
    43f8:	f8 94       	cli
    43fa:	de bf       	out	0x3e, r29	; 62
    43fc:	0f be       	out	0x3f, r0	; 63
    43fe:	cd bf       	out	0x3d, r28	; 61
    4400:	89 83       	std	Y+1, r24	; 0x01
    4402:	6a 83       	std	Y+2, r22	; 0x02
    4404:	4b 83       	std	Y+3, r20	; 0x03
    4406:	2c 83       	std	Y+4, r18	; 0x04
    4408:	0d 83       	std	Y+5, r16	; 0x05
    SET_BIT(UCSRC, UCSRC_URSEL);
    440a:	a0 e4       	ldi	r26, 0x40	; 64
    440c:	b0 e0       	ldi	r27, 0x00	; 0
    440e:	e0 e4       	ldi	r30, 0x40	; 64
    4410:	f0 e0       	ldi	r31, 0x00	; 0
    4412:	80 81       	ld	r24, Z
    4414:	80 68       	ori	r24, 0x80	; 128
    4416:	8c 93       	st	X, r24
    DIO_SetPinMode(DIO_PORTD, DIO_PIN0, DIO_INPUT_FLOATING);
    4418:	83 e0       	ldi	r24, 0x03	; 3
    441a:	60 e0       	ldi	r22, 0x00	; 0
    441c:	40 e0       	ldi	r20, 0x00	; 0
    441e:	0e 94 6f 08 	call	0x10de	; 0x10de <DIO_SetPinMode>
	DIO_SetPinMode(DIO_PORTD, DIO_PIN1, DIO_OUTPUT);
    4422:	83 e0       	ldi	r24, 0x03	; 3
    4424:	61 e0       	ldi	r22, 0x01	; 1
    4426:	42 e0       	ldi	r20, 0x02	; 2
    4428:	0e 94 6f 08 	call	0x10de	; 0x10de <DIO_SetPinMode>


    if(mode == Asynchronous)
    442c:	89 81       	ldd	r24, Y+1	; 0x01
    442e:	88 23       	and	r24, r24
    4430:	41 f4       	brne	.+16     	; 0x4442 <UART_Init+0x58>
    {
        CLR_BIT(UCSRC,UCSRC_UMSEL);
    4432:	a0 e4       	ldi	r26, 0x40	; 64
    4434:	b0 e0       	ldi	r27, 0x00	; 0
    4436:	e0 e4       	ldi	r30, 0x40	; 64
    4438:	f0 e0       	ldi	r31, 0x00	; 0
    443a:	80 81       	ld	r24, Z
    443c:	8f 7b       	andi	r24, 0xBF	; 191
    443e:	8c 93       	st	X, r24
    4440:	0a c0       	rjmp	.+20     	; 0x4456 <UART_Init+0x6c>
    }else if(mode == Synchronous)
    4442:	89 81       	ldd	r24, Y+1	; 0x01
    4444:	81 30       	cpi	r24, 0x01	; 1
    4446:	39 f4       	brne	.+14     	; 0x4456 <UART_Init+0x6c>
    {
        SET_BIT(UCSRC,UCSRC_UMSEL);
    4448:	a0 e4       	ldi	r26, 0x40	; 64
    444a:	b0 e0       	ldi	r27, 0x00	; 0
    444c:	e0 e4       	ldi	r30, 0x40	; 64
    444e:	f0 e0       	ldi	r31, 0x00	; 0
    4450:	80 81       	ld	r24, Z
    4452:	80 64       	ori	r24, 0x40	; 64
    4454:	8c 93       	st	X, r24

    }

    switch (pmode)
    4456:	8a 81       	ldd	r24, Y+2	; 0x02
    4458:	28 2f       	mov	r18, r24
    445a:	30 e0       	ldi	r19, 0x00	; 0
    445c:	3b 87       	std	Y+11, r19	; 0x0b
    445e:	2a 87       	std	Y+10, r18	; 0x0a
    4460:	8a 85       	ldd	r24, Y+10	; 0x0a
    4462:	9b 85       	ldd	r25, Y+11	; 0x0b
    4464:	81 30       	cpi	r24, 0x01	; 1
    4466:	91 05       	cpc	r25, r1
    4468:	c1 f0       	breq	.+48     	; 0x449a <UART_Init+0xb0>
    446a:	2a 85       	ldd	r18, Y+10	; 0x0a
    446c:	3b 85       	ldd	r19, Y+11	; 0x0b
    446e:	22 30       	cpi	r18, 0x02	; 2
    4470:	31 05       	cpc	r19, r1
    4472:	11 f1       	breq	.+68     	; 0x44b8 <UART_Init+0xce>
    4474:	8a 85       	ldd	r24, Y+10	; 0x0a
    4476:	9b 85       	ldd	r25, Y+11	; 0x0b
    4478:	00 97       	sbiw	r24, 0x00	; 0
    447a:	61 f5       	brne	.+88     	; 0x44d4 <UART_Init+0xea>
    {
    case Disabled_parity:
        CLR_BIT(UCSRC,UCSRC_UPM0);
    447c:	a0 e4       	ldi	r26, 0x40	; 64
    447e:	b0 e0       	ldi	r27, 0x00	; 0
    4480:	e0 e4       	ldi	r30, 0x40	; 64
    4482:	f0 e0       	ldi	r31, 0x00	; 0
    4484:	80 81       	ld	r24, Z
    4486:	8f 7e       	andi	r24, 0xEF	; 239
    4488:	8c 93       	st	X, r24
        CLR_BIT(UCSRC,UCSRC_UPM1);
    448a:	a0 e4       	ldi	r26, 0x40	; 64
    448c:	b0 e0       	ldi	r27, 0x00	; 0
    448e:	e0 e4       	ldi	r30, 0x40	; 64
    4490:	f0 e0       	ldi	r31, 0x00	; 0
    4492:	80 81       	ld	r24, Z
    4494:	8f 7d       	andi	r24, 0xDF	; 223
    4496:	8c 93       	st	X, r24
    4498:	1d c0       	rjmp	.+58     	; 0x44d4 <UART_Init+0xea>
        /* code */
        break;
    case Even_Parity:
        CLR_BIT(UCSRC,UCSRC_UPM0);
    449a:	a0 e4       	ldi	r26, 0x40	; 64
    449c:	b0 e0       	ldi	r27, 0x00	; 0
    449e:	e0 e4       	ldi	r30, 0x40	; 64
    44a0:	f0 e0       	ldi	r31, 0x00	; 0
    44a2:	80 81       	ld	r24, Z
    44a4:	8f 7e       	andi	r24, 0xEF	; 239
    44a6:	8c 93       	st	X, r24
        SET_BIT(UCSRC,UCSRC_UPM1);
    44a8:	a0 e4       	ldi	r26, 0x40	; 64
    44aa:	b0 e0       	ldi	r27, 0x00	; 0
    44ac:	e0 e4       	ldi	r30, 0x40	; 64
    44ae:	f0 e0       	ldi	r31, 0x00	; 0
    44b0:	80 81       	ld	r24, Z
    44b2:	80 62       	ori	r24, 0x20	; 32
    44b4:	8c 93       	st	X, r24
    44b6:	0e c0       	rjmp	.+28     	; 0x44d4 <UART_Init+0xea>
        /* code */
        break;
    case Odd_Parity:
        SET_BIT(UCSRC,UCSRC_UPM0);
    44b8:	a0 e4       	ldi	r26, 0x40	; 64
    44ba:	b0 e0       	ldi	r27, 0x00	; 0
    44bc:	e0 e4       	ldi	r30, 0x40	; 64
    44be:	f0 e0       	ldi	r31, 0x00	; 0
    44c0:	80 81       	ld	r24, Z
    44c2:	80 61       	ori	r24, 0x10	; 16
    44c4:	8c 93       	st	X, r24
        SET_BIT(UCSRC,UCSRC_UPM1);
    44c6:	a0 e4       	ldi	r26, 0x40	; 64
    44c8:	b0 e0       	ldi	r27, 0x00	; 0
    44ca:	e0 e4       	ldi	r30, 0x40	; 64
    44cc:	f0 e0       	ldi	r31, 0x00	; 0
    44ce:	80 81       	ld	r24, Z
    44d0:	80 62       	ori	r24, 0x20	; 32
    44d2:	8c 93       	st	X, r24
    
    default:
        break;
    }

    if(sbit==one_Stop_bit)
    44d4:	8b 81       	ldd	r24, Y+3	; 0x03
    44d6:	88 23       	and	r24, r24
    44d8:	41 f4       	brne	.+16     	; 0x44ea <UART_Init+0x100>
    {
        CLR_BIT(UCSRC,UCSRC_USBS);
    44da:	a0 e4       	ldi	r26, 0x40	; 64
    44dc:	b0 e0       	ldi	r27, 0x00	; 0
    44de:	e0 e4       	ldi	r30, 0x40	; 64
    44e0:	f0 e0       	ldi	r31, 0x00	; 0
    44e2:	80 81       	ld	r24, Z
    44e4:	87 7f       	andi	r24, 0xF7	; 247
    44e6:	8c 93       	st	X, r24
    44e8:	0a c0       	rjmp	.+20     	; 0x44fe <UART_Init+0x114>

    }else if( sbit==two_Stop_bit)
    44ea:	8b 81       	ldd	r24, Y+3	; 0x03
    44ec:	81 30       	cpi	r24, 0x01	; 1
    44ee:	39 f4       	brne	.+14     	; 0x44fe <UART_Init+0x114>
    {
        SET_BIT(UCSRC,UCSRC_USBS);
    44f0:	a0 e4       	ldi	r26, 0x40	; 64
    44f2:	b0 e0       	ldi	r27, 0x00	; 0
    44f4:	e0 e4       	ldi	r30, 0x40	; 64
    44f6:	f0 e0       	ldi	r31, 0x00	; 0
    44f8:	80 81       	ld	r24, Z
    44fa:	88 60       	ori	r24, 0x08	; 8
    44fc:	8c 93       	st	X, r24
    }

    switch (csize)
    44fe:	8c 81       	ldd	r24, Y+4	; 0x04
    4500:	28 2f       	mov	r18, r24
    4502:	30 e0       	ldi	r19, 0x00	; 0
    4504:	39 87       	std	Y+9, r19	; 0x09
    4506:	28 87       	std	Y+8, r18	; 0x08
    4508:	88 85       	ldd	r24, Y+8	; 0x08
    450a:	99 85       	ldd	r25, Y+9	; 0x09
    450c:	82 30       	cpi	r24, 0x02	; 2
    450e:	91 05       	cpc	r25, r1
    4510:	09 f4       	brne	.+2      	; 0x4514 <UART_Init+0x12a>
    4512:	48 c0       	rjmp	.+144    	; 0x45a4 <UART_Init+0x1ba>
    4514:	28 85       	ldd	r18, Y+8	; 0x08
    4516:	39 85       	ldd	r19, Y+9	; 0x09
    4518:	23 30       	cpi	r18, 0x03	; 3
    451a:	31 05       	cpc	r19, r1
    451c:	54 f4       	brge	.+20     	; 0x4532 <UART_Init+0x148>
    451e:	88 85       	ldd	r24, Y+8	; 0x08
    4520:	99 85       	ldd	r25, Y+9	; 0x09
    4522:	00 97       	sbiw	r24, 0x00	; 0
    4524:	99 f0       	breq	.+38     	; 0x454c <UART_Init+0x162>
    4526:	28 85       	ldd	r18, Y+8	; 0x08
    4528:	39 85       	ldd	r19, Y+9	; 0x09
    452a:	21 30       	cpi	r18, 0x01	; 1
    452c:	31 05       	cpc	r19, r1
    452e:	21 f1       	breq	.+72     	; 0x4578 <UART_Init+0x18e>
    4530:	7a c0       	rjmp	.+244    	; 0x4626 <UART_Init+0x23c>
    4532:	88 85       	ldd	r24, Y+8	; 0x08
    4534:	99 85       	ldd	r25, Y+9	; 0x09
    4536:	83 30       	cpi	r24, 0x03	; 3
    4538:	91 05       	cpc	r25, r1
    453a:	09 f4       	brne	.+2      	; 0x453e <UART_Init+0x154>
    453c:	49 c0       	rjmp	.+146    	; 0x45d0 <UART_Init+0x1e6>
    453e:	28 85       	ldd	r18, Y+8	; 0x08
    4540:	39 85       	ldd	r19, Y+9	; 0x09
    4542:	24 30       	cpi	r18, 0x04	; 4
    4544:	31 05       	cpc	r19, r1
    4546:	09 f4       	brne	.+2      	; 0x454a <UART_Init+0x160>
    4548:	59 c0       	rjmp	.+178    	; 0x45fc <UART_Init+0x212>
    454a:	6d c0       	rjmp	.+218    	; 0x4626 <UART_Init+0x23c>
    {
    case _5_bit:
        CLR_BIT(UCSRC,UCSRC_UCSZ0);
    454c:	a0 e4       	ldi	r26, 0x40	; 64
    454e:	b0 e0       	ldi	r27, 0x00	; 0
    4550:	e0 e4       	ldi	r30, 0x40	; 64
    4552:	f0 e0       	ldi	r31, 0x00	; 0
    4554:	80 81       	ld	r24, Z
    4556:	8d 7f       	andi	r24, 0xFD	; 253
    4558:	8c 93       	st	X, r24
        CLR_BIT(UCSRC,UCSRC_UCSZ1);
    455a:	a0 e4       	ldi	r26, 0x40	; 64
    455c:	b0 e0       	ldi	r27, 0x00	; 0
    455e:	e0 e4       	ldi	r30, 0x40	; 64
    4560:	f0 e0       	ldi	r31, 0x00	; 0
    4562:	80 81       	ld	r24, Z
    4564:	8b 7f       	andi	r24, 0xFB	; 251
    4566:	8c 93       	st	X, r24
        CLR_BIT(UCSRC,UCSRB_UCSZ2);
    4568:	a0 e4       	ldi	r26, 0x40	; 64
    456a:	b0 e0       	ldi	r27, 0x00	; 0
    456c:	e0 e4       	ldi	r30, 0x40	; 64
    456e:	f0 e0       	ldi	r31, 0x00	; 0
    4570:	80 81       	ld	r24, Z
    4572:	8b 7f       	andi	r24, 0xFB	; 251
    4574:	8c 93       	st	X, r24
    4576:	57 c0       	rjmp	.+174    	; 0x4626 <UART_Init+0x23c>
        /* code */
        break;
    case _6_bit:
        CLR_BIT(UCSRC,UCSRC_UCSZ0);
    4578:	a0 e4       	ldi	r26, 0x40	; 64
    457a:	b0 e0       	ldi	r27, 0x00	; 0
    457c:	e0 e4       	ldi	r30, 0x40	; 64
    457e:	f0 e0       	ldi	r31, 0x00	; 0
    4580:	80 81       	ld	r24, Z
    4582:	8d 7f       	andi	r24, 0xFD	; 253
    4584:	8c 93       	st	X, r24
        CLR_BIT(UCSRC,UCSRC_UCSZ1);
    4586:	a0 e4       	ldi	r26, 0x40	; 64
    4588:	b0 e0       	ldi	r27, 0x00	; 0
    458a:	e0 e4       	ldi	r30, 0x40	; 64
    458c:	f0 e0       	ldi	r31, 0x00	; 0
    458e:	80 81       	ld	r24, Z
    4590:	8b 7f       	andi	r24, 0xFB	; 251
    4592:	8c 93       	st	X, r24
        CLR_BIT(UCSRC,UCSRB_UCSZ2);
    4594:	a0 e4       	ldi	r26, 0x40	; 64
    4596:	b0 e0       	ldi	r27, 0x00	; 0
    4598:	e0 e4       	ldi	r30, 0x40	; 64
    459a:	f0 e0       	ldi	r31, 0x00	; 0
    459c:	80 81       	ld	r24, Z
    459e:	8b 7f       	andi	r24, 0xFB	; 251
    45a0:	8c 93       	st	X, r24
    45a2:	41 c0       	rjmp	.+130    	; 0x4626 <UART_Init+0x23c>
        /* code */
        break;
    case _7_bit:
        CLR_BIT(UCSRC,UCSRC_UCSZ0);
    45a4:	a0 e4       	ldi	r26, 0x40	; 64
    45a6:	b0 e0       	ldi	r27, 0x00	; 0
    45a8:	e0 e4       	ldi	r30, 0x40	; 64
    45aa:	f0 e0       	ldi	r31, 0x00	; 0
    45ac:	80 81       	ld	r24, Z
    45ae:	8d 7f       	andi	r24, 0xFD	; 253
    45b0:	8c 93       	st	X, r24
        SET_BIT(UCSRC,UCSRC_UCSZ1);
    45b2:	a0 e4       	ldi	r26, 0x40	; 64
    45b4:	b0 e0       	ldi	r27, 0x00	; 0
    45b6:	e0 e4       	ldi	r30, 0x40	; 64
    45b8:	f0 e0       	ldi	r31, 0x00	; 0
    45ba:	80 81       	ld	r24, Z
    45bc:	84 60       	ori	r24, 0x04	; 4
    45be:	8c 93       	st	X, r24
        CLR_BIT(UCSRC,UCSRB_UCSZ2);
    45c0:	a0 e4       	ldi	r26, 0x40	; 64
    45c2:	b0 e0       	ldi	r27, 0x00	; 0
    45c4:	e0 e4       	ldi	r30, 0x40	; 64
    45c6:	f0 e0       	ldi	r31, 0x00	; 0
    45c8:	80 81       	ld	r24, Z
    45ca:	8b 7f       	andi	r24, 0xFB	; 251
    45cc:	8c 93       	st	X, r24
    45ce:	2b c0       	rjmp	.+86     	; 0x4626 <UART_Init+0x23c>
        /* code */
        break;
    case _8_bit:
        SET_BIT(UCSRC,UCSRC_UCSZ0);
    45d0:	a0 e4       	ldi	r26, 0x40	; 64
    45d2:	b0 e0       	ldi	r27, 0x00	; 0
    45d4:	e0 e4       	ldi	r30, 0x40	; 64
    45d6:	f0 e0       	ldi	r31, 0x00	; 0
    45d8:	80 81       	ld	r24, Z
    45da:	82 60       	ori	r24, 0x02	; 2
    45dc:	8c 93       	st	X, r24
        SET_BIT(UCSRC,UCSRC_UCSZ1);
    45de:	a0 e4       	ldi	r26, 0x40	; 64
    45e0:	b0 e0       	ldi	r27, 0x00	; 0
    45e2:	e0 e4       	ldi	r30, 0x40	; 64
    45e4:	f0 e0       	ldi	r31, 0x00	; 0
    45e6:	80 81       	ld	r24, Z
    45e8:	84 60       	ori	r24, 0x04	; 4
    45ea:	8c 93       	st	X, r24
        CLR_BIT(UCSRC,UCSRB_UCSZ2);
    45ec:	a0 e4       	ldi	r26, 0x40	; 64
    45ee:	b0 e0       	ldi	r27, 0x00	; 0
    45f0:	e0 e4       	ldi	r30, 0x40	; 64
    45f2:	f0 e0       	ldi	r31, 0x00	; 0
    45f4:	80 81       	ld	r24, Z
    45f6:	8b 7f       	andi	r24, 0xFB	; 251
    45f8:	8c 93       	st	X, r24
    45fa:	15 c0       	rjmp	.+42     	; 0x4626 <UART_Init+0x23c>
        /* code */
        break;
    case _9_bit:
        SET_BIT(UCSRC,UCSRC_UCSZ0);
    45fc:	a0 e4       	ldi	r26, 0x40	; 64
    45fe:	b0 e0       	ldi	r27, 0x00	; 0
    4600:	e0 e4       	ldi	r30, 0x40	; 64
    4602:	f0 e0       	ldi	r31, 0x00	; 0
    4604:	80 81       	ld	r24, Z
    4606:	82 60       	ori	r24, 0x02	; 2
    4608:	8c 93       	st	X, r24
        SET_BIT(UCSRC,UCSRC_UCSZ1);
    460a:	a0 e4       	ldi	r26, 0x40	; 64
    460c:	b0 e0       	ldi	r27, 0x00	; 0
    460e:	e0 e4       	ldi	r30, 0x40	; 64
    4610:	f0 e0       	ldi	r31, 0x00	; 0
    4612:	80 81       	ld	r24, Z
    4614:	84 60       	ori	r24, 0x04	; 4
    4616:	8c 93       	st	X, r24
        SET_BIT(UCSRC,UCSRB_UCSZ2);
    4618:	a0 e4       	ldi	r26, 0x40	; 64
    461a:	b0 e0       	ldi	r27, 0x00	; 0
    461c:	e0 e4       	ldi	r30, 0x40	; 64
    461e:	f0 e0       	ldi	r31, 0x00	; 0
    4620:	80 81       	ld	r24, Z
    4622:	84 60       	ori	r24, 0x04	; 4
    4624:	8c 93       	st	X, r24
    
    default:
        break;
    }

    switch (brate)
    4626:	8d 81       	ldd	r24, Y+5	; 0x05
    4628:	28 2f       	mov	r18, r24
    462a:	30 e0       	ldi	r19, 0x00	; 0
    462c:	3f 83       	std	Y+7, r19	; 0x07
    462e:	2e 83       	std	Y+6, r18	; 0x06
    4630:	8e 81       	ldd	r24, Y+6	; 0x06
    4632:	9f 81       	ldd	r25, Y+7	; 0x07
    4634:	81 30       	cpi	r24, 0x01	; 1
    4636:	91 05       	cpc	r25, r1
    4638:	71 f0       	breq	.+28     	; 0x4656 <UART_Init+0x26c>
    463a:	2e 81       	ldd	r18, Y+6	; 0x06
    463c:	3f 81       	ldd	r19, Y+7	; 0x07
    463e:	22 30       	cpi	r18, 0x02	; 2
    4640:	31 05       	cpc	r19, r1
    4642:	71 f0       	breq	.+28     	; 0x4660 <UART_Init+0x276>
    4644:	8e 81       	ldd	r24, Y+6	; 0x06
    4646:	9f 81       	ldd	r25, Y+7	; 0x07
    4648:	00 97       	sbiw	r24, 0x00	; 0
    464a:	71 f4       	brne	.+28     	; 0x4668 <UART_Init+0x27e>
    {
    case _2400:
        UBRRL=416;
    464c:	e9 e2       	ldi	r30, 0x29	; 41
    464e:	f0 e0       	ldi	r31, 0x00	; 0
    4650:	80 ea       	ldi	r24, 0xA0	; 160
    4652:	80 83       	st	Z, r24
    4654:	09 c0       	rjmp	.+18     	; 0x4668 <UART_Init+0x27e>
        /* code */
        break;
    case _4800:
        UBRRL=207;
    4656:	e9 e2       	ldi	r30, 0x29	; 41
    4658:	f0 e0       	ldi	r31, 0x00	; 0
    465a:	8f ec       	ldi	r24, 0xCF	; 207
    465c:	80 83       	st	Z, r24
    465e:	04 c0       	rjmp	.+8      	; 0x4668 <UART_Init+0x27e>
        /* code */
        break;
    case _9600:
        UBRRL=103;
    4660:	e9 e2       	ldi	r30, 0x29	; 41
    4662:	f0 e0       	ldi	r31, 0x00	; 0
    4664:	87 e6       	ldi	r24, 0x67	; 103
    4666:	80 83       	st	Z, r24
        break;
    
    default:
        break;
    }
    SET_BIT(UCSRB,UCSRB_RXEN);
    4668:	aa e2       	ldi	r26, 0x2A	; 42
    466a:	b0 e0       	ldi	r27, 0x00	; 0
    466c:	ea e2       	ldi	r30, 0x2A	; 42
    466e:	f0 e0       	ldi	r31, 0x00	; 0
    4670:	80 81       	ld	r24, Z
    4672:	80 61       	ori	r24, 0x10	; 16
    4674:	8c 93       	st	X, r24
    SET_BIT(UCSRB,UCSRB_TXEN);
    4676:	aa e2       	ldi	r26, 0x2A	; 42
    4678:	b0 e0       	ldi	r27, 0x00	; 0
    467a:	ea e2       	ldi	r30, 0x2A	; 42
    467c:	f0 e0       	ldi	r31, 0x00	; 0
    467e:	80 81       	ld	r24, Z
    4680:	88 60       	ori	r24, 0x08	; 8
    4682:	8c 93       	st	X, r24
}
    4684:	2b 96       	adiw	r28, 0x0b	; 11
    4686:	0f b6       	in	r0, 0x3f	; 63
    4688:	f8 94       	cli
    468a:	de bf       	out	0x3e, r29	; 62
    468c:	0f be       	out	0x3f, r0	; 63
    468e:	cd bf       	out	0x3d, r28	; 61
    4690:	cf 91       	pop	r28
    4692:	df 91       	pop	r29
    4694:	0f 91       	pop	r16
    4696:	08 95       	ret

00004698 <UART_Send_Data>:


void UART_Send_Data(u8 data){
    4698:	df 93       	push	r29
    469a:	cf 93       	push	r28
    469c:	0f 92       	push	r0
    469e:	cd b7       	in	r28, 0x3d	; 61
    46a0:	de b7       	in	r29, 0x3e	; 62
    46a2:	89 83       	std	Y+1, r24	; 0x01
    
    UDR=data;
    46a4:	ec e2       	ldi	r30, 0x2C	; 44
    46a6:	f0 e0       	ldi	r31, 0x00	; 0
    46a8:	89 81       	ldd	r24, Y+1	; 0x01
    46aa:	80 83       	st	Z, r24
    while (GET_BIT(UCSRA,UCSRA_TXC)==0);
    46ac:	eb e2       	ldi	r30, 0x2B	; 43
    46ae:	f0 e0       	ldi	r31, 0x00	; 0
    46b0:	80 81       	ld	r24, Z
    46b2:	82 95       	swap	r24
    46b4:	86 95       	lsr	r24
    46b6:	86 95       	lsr	r24
    46b8:	83 70       	andi	r24, 0x03	; 3
    46ba:	88 2f       	mov	r24, r24
    46bc:	90 e0       	ldi	r25, 0x00	; 0
    46be:	81 70       	andi	r24, 0x01	; 1
    46c0:	90 70       	andi	r25, 0x00	; 0
    46c2:	00 97       	sbiw	r24, 0x00	; 0
    46c4:	99 f3       	breq	.-26     	; 0x46ac <UART_Send_Data+0x14>
}
    46c6:	0f 90       	pop	r0
    46c8:	cf 91       	pop	r28
    46ca:	df 91       	pop	r29
    46cc:	08 95       	ret

000046ce <Recieve_Data>:

u8 Recieve_Data(){
    46ce:	df 93       	push	r29
    46d0:	cf 93       	push	r28
    46d2:	cd b7       	in	r28, 0x3d	; 61
    46d4:	de b7       	in	r29, 0x3e	; 62
    while (GET_BIT(UCSRA,UCSRA_RCX)==0);
    46d6:	eb e2       	ldi	r30, 0x2B	; 43
    46d8:	f0 e0       	ldi	r31, 0x00	; 0
    46da:	80 81       	ld	r24, Z
    46dc:	88 23       	and	r24, r24
    46de:	dc f7       	brge	.-10     	; 0x46d6 <Recieve_Data+0x8>
    return UDR;
    46e0:	ec e2       	ldi	r30, 0x2C	; 44
    46e2:	f0 e0       	ldi	r31, 0x00	; 0
    46e4:	80 81       	ld	r24, Z
}
    46e6:	cf 91       	pop	r28
    46e8:	df 91       	pop	r29
    46ea:	08 95       	ret

000046ec <main>:
//        }
//        /* code */
//    }
// }

int main(){
    46ec:	0f 93       	push	r16
    46ee:	df 93       	push	r29
    46f0:	cf 93       	push	r28
    46f2:	cd b7       	in	r28, 0x3d	; 61
    46f4:	de b7       	in	r29, 0x3e	; 62
   DIO_SetPinMode(DIO_PORTC,DIO_PIN0,DIO_OUTPUT);
    46f6:	82 e0       	ldi	r24, 0x02	; 2
    46f8:	60 e0       	ldi	r22, 0x00	; 0
    46fa:	42 e0       	ldi	r20, 0x02	; 2
    46fc:	0e 94 6f 08 	call	0x10de	; 0x10de <DIO_SetPinMode>
   DIO_SetPinLevel(DIO_PORTC,DIO_PIN0,DIO_HIGH);
    4700:	82 e0       	ldi	r24, 0x02	; 2
    4702:	60 e0       	ldi	r22, 0x00	; 0
    4704:	41 e0       	ldi	r20, 0x01	; 1
    4706:	0e 94 7d 0b 	call	0x16fa	; 0x16fa <DIO_SetPinLevel>
          //   _delay_ms(1000);
   //DIO_SetPinLevel(DIO_PORTD,DIO_PIN0,DIO_INPUT_FLOATING);
   //DIO_SetPinLevel(DIO_PORTD,DIO_PIN1,DIO_OUTPUT);
   UART_Init(Asynchronous,Odd_Parity,one_Stop_bit,_8_bit,_9600);
    470a:	80 e0       	ldi	r24, 0x00	; 0
    470c:	62 e0       	ldi	r22, 0x02	; 2
    470e:	40 e0       	ldi	r20, 0x00	; 0
    4710:	23 e0       	ldi	r18, 0x03	; 3
    4712:	02 e0       	ldi	r16, 0x02	; 2
    4714:	0e 94 f5 21 	call	0x43ea	; 0x43ea <UART_Init>
   while (1)
   {
       if(Recieve_Data()==1)
    4718:	0e 94 67 23 	call	0x46ce	; 0x46ce <Recieve_Data>
    471c:	81 30       	cpi	r24, 0x01	; 1
    471e:	31 f4       	brne	.+12     	; 0x472c <main+0x40>
       {
           DIO_SetPinLevel(DIO_PORTC,DIO_PIN0,DIO_HIGH);
    4720:	82 e0       	ldi	r24, 0x02	; 2
    4722:	60 e0       	ldi	r22, 0x00	; 0
    4724:	41 e0       	ldi	r20, 0x01	; 1
    4726:	0e 94 7d 0b 	call	0x16fa	; 0x16fa <DIO_SetPinLevel>
    472a:	f6 cf       	rjmp	.-20     	; 0x4718 <main+0x2c>
           //_delay_ms(1000);
       }
       else if(Recieve_Data()==0){
    472c:	0e 94 67 23 	call	0x46ce	; 0x46ce <Recieve_Data>
    4730:	88 23       	and	r24, r24
    4732:	91 f7       	brne	.-28     	; 0x4718 <main+0x2c>
           DIO_SetPinLevel(DIO_PORTC,DIO_PIN0,DIO_LOW);
    4734:	82 e0       	ldi	r24, 0x02	; 2
    4736:	60 e0       	ldi	r22, 0x00	; 0
    4738:	40 e0       	ldi	r20, 0x00	; 0
    473a:	0e 94 7d 0b 	call	0x16fa	; 0x16fa <DIO_SetPinLevel>
    473e:	ec cf       	rjmp	.-40     	; 0x4718 <main+0x2c>

00004740 <__mulsi3>:
    4740:	62 9f       	mul	r22, r18
    4742:	d0 01       	movw	r26, r0
    4744:	73 9f       	mul	r23, r19
    4746:	f0 01       	movw	r30, r0
    4748:	82 9f       	mul	r24, r18
    474a:	e0 0d       	add	r30, r0
    474c:	f1 1d       	adc	r31, r1
    474e:	64 9f       	mul	r22, r20
    4750:	e0 0d       	add	r30, r0
    4752:	f1 1d       	adc	r31, r1
    4754:	92 9f       	mul	r25, r18
    4756:	f0 0d       	add	r31, r0
    4758:	83 9f       	mul	r24, r19
    475a:	f0 0d       	add	r31, r0
    475c:	74 9f       	mul	r23, r20
    475e:	f0 0d       	add	r31, r0
    4760:	65 9f       	mul	r22, r21
    4762:	f0 0d       	add	r31, r0
    4764:	99 27       	eor	r25, r25
    4766:	72 9f       	mul	r23, r18
    4768:	b0 0d       	add	r27, r0
    476a:	e1 1d       	adc	r30, r1
    476c:	f9 1f       	adc	r31, r25
    476e:	63 9f       	mul	r22, r19
    4770:	b0 0d       	add	r27, r0
    4772:	e1 1d       	adc	r30, r1
    4774:	f9 1f       	adc	r31, r25
    4776:	bd 01       	movw	r22, r26
    4778:	cf 01       	movw	r24, r30
    477a:	11 24       	eor	r1, r1
    477c:	08 95       	ret

0000477e <__udivmodqi4>:
    477e:	99 1b       	sub	r25, r25
    4780:	79 e0       	ldi	r23, 0x09	; 9
    4782:	04 c0       	rjmp	.+8      	; 0x478c <__udivmodqi4_ep>

00004784 <__udivmodqi4_loop>:
    4784:	99 1f       	adc	r25, r25
    4786:	96 17       	cp	r25, r22
    4788:	08 f0       	brcs	.+2      	; 0x478c <__udivmodqi4_ep>
    478a:	96 1b       	sub	r25, r22

0000478c <__udivmodqi4_ep>:
    478c:	88 1f       	adc	r24, r24
    478e:	7a 95       	dec	r23
    4790:	c9 f7       	brne	.-14     	; 0x4784 <__udivmodqi4_loop>
    4792:	80 95       	com	r24
    4794:	08 95       	ret

00004796 <__udivmodsi4>:
    4796:	a1 e2       	ldi	r26, 0x21	; 33
    4798:	1a 2e       	mov	r1, r26
    479a:	aa 1b       	sub	r26, r26
    479c:	bb 1b       	sub	r27, r27
    479e:	fd 01       	movw	r30, r26
    47a0:	0d c0       	rjmp	.+26     	; 0x47bc <__udivmodsi4_ep>

000047a2 <__udivmodsi4_loop>:
    47a2:	aa 1f       	adc	r26, r26
    47a4:	bb 1f       	adc	r27, r27
    47a6:	ee 1f       	adc	r30, r30
    47a8:	ff 1f       	adc	r31, r31
    47aa:	a2 17       	cp	r26, r18
    47ac:	b3 07       	cpc	r27, r19
    47ae:	e4 07       	cpc	r30, r20
    47b0:	f5 07       	cpc	r31, r21
    47b2:	20 f0       	brcs	.+8      	; 0x47bc <__udivmodsi4_ep>
    47b4:	a2 1b       	sub	r26, r18
    47b6:	b3 0b       	sbc	r27, r19
    47b8:	e4 0b       	sbc	r30, r20
    47ba:	f5 0b       	sbc	r31, r21

000047bc <__udivmodsi4_ep>:
    47bc:	66 1f       	adc	r22, r22
    47be:	77 1f       	adc	r23, r23
    47c0:	88 1f       	adc	r24, r24
    47c2:	99 1f       	adc	r25, r25
    47c4:	1a 94       	dec	r1
    47c6:	69 f7       	brne	.-38     	; 0x47a2 <__udivmodsi4_loop>
    47c8:	60 95       	com	r22
    47ca:	70 95       	com	r23
    47cc:	80 95       	com	r24
    47ce:	90 95       	com	r25
    47d0:	9b 01       	movw	r18, r22
    47d2:	ac 01       	movw	r20, r24
    47d4:	bd 01       	movw	r22, r26
    47d6:	cf 01       	movw	r24, r30
    47d8:	08 95       	ret

000047da <__divmodsi4>:
    47da:	97 fb       	bst	r25, 7
    47dc:	09 2e       	mov	r0, r25
    47de:	05 26       	eor	r0, r21
    47e0:	0e d0       	rcall	.+28     	; 0x47fe <__divmodsi4_neg1>
    47e2:	57 fd       	sbrc	r21, 7
    47e4:	04 d0       	rcall	.+8      	; 0x47ee <__divmodsi4_neg2>
    47e6:	d7 df       	rcall	.-82     	; 0x4796 <__udivmodsi4>
    47e8:	0a d0       	rcall	.+20     	; 0x47fe <__divmodsi4_neg1>
    47ea:	00 1c       	adc	r0, r0
    47ec:	38 f4       	brcc	.+14     	; 0x47fc <__divmodsi4_exit>

000047ee <__divmodsi4_neg2>:
    47ee:	50 95       	com	r21
    47f0:	40 95       	com	r20
    47f2:	30 95       	com	r19
    47f4:	21 95       	neg	r18
    47f6:	3f 4f       	sbci	r19, 0xFF	; 255
    47f8:	4f 4f       	sbci	r20, 0xFF	; 255
    47fa:	5f 4f       	sbci	r21, 0xFF	; 255

000047fc <__divmodsi4_exit>:
    47fc:	08 95       	ret

000047fe <__divmodsi4_neg1>:
    47fe:	f6 f7       	brtc	.-4      	; 0x47fc <__divmodsi4_exit>
    4800:	90 95       	com	r25
    4802:	80 95       	com	r24
    4804:	70 95       	com	r23
    4806:	61 95       	neg	r22
    4808:	7f 4f       	sbci	r23, 0xFF	; 255
    480a:	8f 4f       	sbci	r24, 0xFF	; 255
    480c:	9f 4f       	sbci	r25, 0xFF	; 255
    480e:	08 95       	ret

00004810 <__prologue_saves__>:
    4810:	2f 92       	push	r2
    4812:	3f 92       	push	r3
    4814:	4f 92       	push	r4
    4816:	5f 92       	push	r5
    4818:	6f 92       	push	r6
    481a:	7f 92       	push	r7
    481c:	8f 92       	push	r8
    481e:	9f 92       	push	r9
    4820:	af 92       	push	r10
    4822:	bf 92       	push	r11
    4824:	cf 92       	push	r12
    4826:	df 92       	push	r13
    4828:	ef 92       	push	r14
    482a:	ff 92       	push	r15
    482c:	0f 93       	push	r16
    482e:	1f 93       	push	r17
    4830:	cf 93       	push	r28
    4832:	df 93       	push	r29
    4834:	cd b7       	in	r28, 0x3d	; 61
    4836:	de b7       	in	r29, 0x3e	; 62
    4838:	ca 1b       	sub	r28, r26
    483a:	db 0b       	sbc	r29, r27
    483c:	0f b6       	in	r0, 0x3f	; 63
    483e:	f8 94       	cli
    4840:	de bf       	out	0x3e, r29	; 62
    4842:	0f be       	out	0x3f, r0	; 63
    4844:	cd bf       	out	0x3d, r28	; 61
    4846:	09 94       	ijmp

00004848 <__epilogue_restores__>:
    4848:	2a 88       	ldd	r2, Y+18	; 0x12
    484a:	39 88       	ldd	r3, Y+17	; 0x11
    484c:	48 88       	ldd	r4, Y+16	; 0x10
    484e:	5f 84       	ldd	r5, Y+15	; 0x0f
    4850:	6e 84       	ldd	r6, Y+14	; 0x0e
    4852:	7d 84       	ldd	r7, Y+13	; 0x0d
    4854:	8c 84       	ldd	r8, Y+12	; 0x0c
    4856:	9b 84       	ldd	r9, Y+11	; 0x0b
    4858:	aa 84       	ldd	r10, Y+10	; 0x0a
    485a:	b9 84       	ldd	r11, Y+9	; 0x09
    485c:	c8 84       	ldd	r12, Y+8	; 0x08
    485e:	df 80       	ldd	r13, Y+7	; 0x07
    4860:	ee 80       	ldd	r14, Y+6	; 0x06
    4862:	fd 80       	ldd	r15, Y+5	; 0x05
    4864:	0c 81       	ldd	r16, Y+4	; 0x04
    4866:	1b 81       	ldd	r17, Y+3	; 0x03
    4868:	aa 81       	ldd	r26, Y+2	; 0x02
    486a:	b9 81       	ldd	r27, Y+1	; 0x01
    486c:	ce 0f       	add	r28, r30
    486e:	d1 1d       	adc	r29, r1
    4870:	0f b6       	in	r0, 0x3f	; 63
    4872:	f8 94       	cli
    4874:	de bf       	out	0x3e, r29	; 62
    4876:	0f be       	out	0x3f, r0	; 63
    4878:	cd bf       	out	0x3d, r28	; 61
    487a:	ed 01       	movw	r28, r26
    487c:	08 95       	ret

0000487e <_exit>:
    487e:	f8 94       	cli

00004880 <__stop_program>:
    4880:	ff cf       	rjmp	.-2      	; 0x4880 <__stop_program>
