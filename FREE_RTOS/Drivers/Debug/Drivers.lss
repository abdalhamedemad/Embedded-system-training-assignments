
Drivers.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         00005db0  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .data         0000001a  00800060  00005db0  00005e44  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  2 .bss          000004b0  0080007a  0080007a  00005e5e  2**0
                  ALLOC
  3 .stab         000081a8  00000000  00000000  00005e60  2**2
                  CONTENTS, READONLY, DEBUGGING
  4 .stabstr      0000515e  00000000  00000000  0000e008  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_aranges 00000140  00000000  00000000  00013166  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_pubnames 00000170  00000000  00000000  000132a6  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_info   00001c49  00000000  00000000  00013416  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_abbrev 00000eeb  00000000  00000000  0001505f  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_line   00000dad  00000000  00000000  00015f4a  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_frame  00000160  00000000  00000000  00016cf8  2**2
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_str    0000028d  00000000  00000000  00016e58  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_loc    000007ce  00000000  00000000  000170e5  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_ranges 00000050  00000000  00000000  000178b3  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
       0:	0c 94 2a 00 	jmp	0x54	; 0x54 <__ctors_end>
       4:	0c 94 67 0e 	jmp	0x1cce	; 0x1cce <__vector_1>
       8:	0c 94 94 0e 	jmp	0x1d28	; 0x1d28 <__vector_2>
       c:	0c 94 c1 0e 	jmp	0x1d82	; 0x1d82 <__vector_3>
      10:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      14:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      18:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      1c:	0c 94 0a 22 	jmp	0x4414	; 0x4414 <__vector_7>
      20:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      24:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      28:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      2c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      30:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      34:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      38:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      3c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      40:	0c 94 a3 05 	jmp	0xb46	; 0xb46 <__vector_16>
      44:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      48:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      4c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      50:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>

00000054 <__ctors_end>:
      54:	11 24       	eor	r1, r1
      56:	1f be       	out	0x3f, r1	; 63
      58:	cf e5       	ldi	r28, 0x5F	; 95
      5a:	d8 e0       	ldi	r29, 0x08	; 8
      5c:	de bf       	out	0x3e, r29	; 62
      5e:	cd bf       	out	0x3d, r28	; 61

00000060 <__do_copy_data>:
      60:	10 e0       	ldi	r17, 0x00	; 0
      62:	a0 e6       	ldi	r26, 0x60	; 96
      64:	b0 e0       	ldi	r27, 0x00	; 0
      66:	e0 eb       	ldi	r30, 0xB0	; 176
      68:	fd e5       	ldi	r31, 0x5D	; 93
      6a:	02 c0       	rjmp	.+4      	; 0x70 <.do_copy_data_start>

0000006c <.do_copy_data_loop>:
      6c:	05 90       	lpm	r0, Z+
      6e:	0d 92       	st	X+, r0

00000070 <.do_copy_data_start>:
      70:	aa 37       	cpi	r26, 0x7A	; 122
      72:	b1 07       	cpc	r27, r17
      74:	d9 f7       	brne	.-10     	; 0x6c <.do_copy_data_loop>

00000076 <__do_clear_bss>:
      76:	15 e0       	ldi	r17, 0x05	; 5
      78:	aa e7       	ldi	r26, 0x7A	; 122
      7a:	b0 e0       	ldi	r27, 0x00	; 0
      7c:	01 c0       	rjmp	.+2      	; 0x80 <.do_clear_bss_start>

0000007e <.do_clear_bss_loop>:
      7e:	1d 92       	st	X+, r1

00000080 <.do_clear_bss_start>:
      80:	aa 32       	cpi	r26, 0x2A	; 42
      82:	b1 07       	cpc	r27, r17
      84:	e1 f7       	brne	.-8      	; 0x7e <.do_clear_bss_loop>
      86:	0e 94 c8 2d 	call	0x5b90	; 0x5b90 <main>
      8a:	0c 94 d6 2e 	jmp	0x5dac	; 0x5dac <_exit>

0000008e <__bad_interrupt>:
      8e:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

00000092 <__fixunssfsi>:
      92:	ef 92       	push	r14
      94:	ff 92       	push	r15
      96:	0f 93       	push	r16
      98:	1f 93       	push	r17
      9a:	7b 01       	movw	r14, r22
      9c:	8c 01       	movw	r16, r24
      9e:	20 e0       	ldi	r18, 0x00	; 0
      a0:	30 e0       	ldi	r19, 0x00	; 0
      a2:	40 e0       	ldi	r20, 0x00	; 0
      a4:	5f e4       	ldi	r21, 0x4F	; 79
      a6:	0e 94 49 03 	call	0x692	; 0x692 <__gesf2>
      aa:	88 23       	and	r24, r24
      ac:	8c f0       	brlt	.+34     	; 0xd0 <__fixunssfsi+0x3e>
      ae:	c8 01       	movw	r24, r16
      b0:	b7 01       	movw	r22, r14
      b2:	20 e0       	ldi	r18, 0x00	; 0
      b4:	30 e0       	ldi	r19, 0x00	; 0
      b6:	40 e0       	ldi	r20, 0x00	; 0
      b8:	5f e4       	ldi	r21, 0x4F	; 79
      ba:	0e 94 c1 01 	call	0x382	; 0x382 <__subsf3>
      be:	0e 94 a9 03 	call	0x752	; 0x752 <__fixsfsi>
      c2:	9b 01       	movw	r18, r22
      c4:	ac 01       	movw	r20, r24
      c6:	20 50       	subi	r18, 0x00	; 0
      c8:	30 40       	sbci	r19, 0x00	; 0
      ca:	40 40       	sbci	r20, 0x00	; 0
      cc:	50 48       	sbci	r21, 0x80	; 128
      ce:	06 c0       	rjmp	.+12     	; 0xdc <__fixunssfsi+0x4a>
      d0:	c8 01       	movw	r24, r16
      d2:	b7 01       	movw	r22, r14
      d4:	0e 94 a9 03 	call	0x752	; 0x752 <__fixsfsi>
      d8:	9b 01       	movw	r18, r22
      da:	ac 01       	movw	r20, r24
      dc:	b9 01       	movw	r22, r18
      de:	ca 01       	movw	r24, r20
      e0:	1f 91       	pop	r17
      e2:	0f 91       	pop	r16
      e4:	ff 90       	pop	r15
      e6:	ef 90       	pop	r14
      e8:	08 95       	ret

000000ea <_fpadd_parts>:
      ea:	a0 e0       	ldi	r26, 0x00	; 0
      ec:	b0 e0       	ldi	r27, 0x00	; 0
      ee:	eb e7       	ldi	r30, 0x7B	; 123
      f0:	f0 e0       	ldi	r31, 0x00	; 0
      f2:	0c 94 80 2e 	jmp	0x5d00	; 0x5d00 <__prologue_saves__>
      f6:	dc 01       	movw	r26, r24
      f8:	2b 01       	movw	r4, r22
      fa:	fa 01       	movw	r30, r20
      fc:	9c 91       	ld	r25, X
      fe:	92 30       	cpi	r25, 0x02	; 2
     100:	08 f4       	brcc	.+2      	; 0x104 <_fpadd_parts+0x1a>
     102:	39 c1       	rjmp	.+626    	; 0x376 <_fpadd_parts+0x28c>
     104:	eb 01       	movw	r28, r22
     106:	88 81       	ld	r24, Y
     108:	82 30       	cpi	r24, 0x02	; 2
     10a:	08 f4       	brcc	.+2      	; 0x10e <_fpadd_parts+0x24>
     10c:	33 c1       	rjmp	.+614    	; 0x374 <_fpadd_parts+0x28a>
     10e:	94 30       	cpi	r25, 0x04	; 4
     110:	69 f4       	brne	.+26     	; 0x12c <_fpadd_parts+0x42>
     112:	84 30       	cpi	r24, 0x04	; 4
     114:	09 f0       	breq	.+2      	; 0x118 <_fpadd_parts+0x2e>
     116:	2f c1       	rjmp	.+606    	; 0x376 <_fpadd_parts+0x28c>
     118:	11 96       	adiw	r26, 0x01	; 1
     11a:	9c 91       	ld	r25, X
     11c:	11 97       	sbiw	r26, 0x01	; 1
     11e:	89 81       	ldd	r24, Y+1	; 0x01
     120:	98 17       	cp	r25, r24
     122:	09 f4       	brne	.+2      	; 0x126 <_fpadd_parts+0x3c>
     124:	28 c1       	rjmp	.+592    	; 0x376 <_fpadd_parts+0x28c>
     126:	af e6       	ldi	r26, 0x6F	; 111
     128:	b0 e0       	ldi	r27, 0x00	; 0
     12a:	25 c1       	rjmp	.+586    	; 0x376 <_fpadd_parts+0x28c>
     12c:	84 30       	cpi	r24, 0x04	; 4
     12e:	09 f4       	brne	.+2      	; 0x132 <_fpadd_parts+0x48>
     130:	21 c1       	rjmp	.+578    	; 0x374 <_fpadd_parts+0x28a>
     132:	82 30       	cpi	r24, 0x02	; 2
     134:	a9 f4       	brne	.+42     	; 0x160 <_fpadd_parts+0x76>
     136:	92 30       	cpi	r25, 0x02	; 2
     138:	09 f0       	breq	.+2      	; 0x13c <_fpadd_parts+0x52>
     13a:	1d c1       	rjmp	.+570    	; 0x376 <_fpadd_parts+0x28c>
     13c:	9a 01       	movw	r18, r20
     13e:	ad 01       	movw	r20, r26
     140:	88 e0       	ldi	r24, 0x08	; 8
     142:	ea 01       	movw	r28, r20
     144:	09 90       	ld	r0, Y+
     146:	ae 01       	movw	r20, r28
     148:	e9 01       	movw	r28, r18
     14a:	09 92       	st	Y+, r0
     14c:	9e 01       	movw	r18, r28
     14e:	81 50       	subi	r24, 0x01	; 1
     150:	c1 f7       	brne	.-16     	; 0x142 <_fpadd_parts+0x58>
     152:	e2 01       	movw	r28, r4
     154:	89 81       	ldd	r24, Y+1	; 0x01
     156:	11 96       	adiw	r26, 0x01	; 1
     158:	9c 91       	ld	r25, X
     15a:	89 23       	and	r24, r25
     15c:	81 83       	std	Z+1, r24	; 0x01
     15e:	08 c1       	rjmp	.+528    	; 0x370 <_fpadd_parts+0x286>
     160:	92 30       	cpi	r25, 0x02	; 2
     162:	09 f4       	brne	.+2      	; 0x166 <_fpadd_parts+0x7c>
     164:	07 c1       	rjmp	.+526    	; 0x374 <_fpadd_parts+0x28a>
     166:	12 96       	adiw	r26, 0x02	; 2
     168:	2d 90       	ld	r2, X+
     16a:	3c 90       	ld	r3, X
     16c:	13 97       	sbiw	r26, 0x03	; 3
     16e:	eb 01       	movw	r28, r22
     170:	8a 81       	ldd	r24, Y+2	; 0x02
     172:	9b 81       	ldd	r25, Y+3	; 0x03
     174:	14 96       	adiw	r26, 0x04	; 4
     176:	ad 90       	ld	r10, X+
     178:	bd 90       	ld	r11, X+
     17a:	cd 90       	ld	r12, X+
     17c:	dc 90       	ld	r13, X
     17e:	17 97       	sbiw	r26, 0x07	; 7
     180:	ec 80       	ldd	r14, Y+4	; 0x04
     182:	fd 80       	ldd	r15, Y+5	; 0x05
     184:	0e 81       	ldd	r16, Y+6	; 0x06
     186:	1f 81       	ldd	r17, Y+7	; 0x07
     188:	91 01       	movw	r18, r2
     18a:	28 1b       	sub	r18, r24
     18c:	39 0b       	sbc	r19, r25
     18e:	b9 01       	movw	r22, r18
     190:	37 ff       	sbrs	r19, 7
     192:	04 c0       	rjmp	.+8      	; 0x19c <_fpadd_parts+0xb2>
     194:	66 27       	eor	r22, r22
     196:	77 27       	eor	r23, r23
     198:	62 1b       	sub	r22, r18
     19a:	73 0b       	sbc	r23, r19
     19c:	60 32       	cpi	r22, 0x20	; 32
     19e:	71 05       	cpc	r23, r1
     1a0:	0c f0       	brlt	.+2      	; 0x1a4 <_fpadd_parts+0xba>
     1a2:	61 c0       	rjmp	.+194    	; 0x266 <_fpadd_parts+0x17c>
     1a4:	12 16       	cp	r1, r18
     1a6:	13 06       	cpc	r1, r19
     1a8:	6c f5       	brge	.+90     	; 0x204 <_fpadd_parts+0x11a>
     1aa:	37 01       	movw	r6, r14
     1ac:	48 01       	movw	r8, r16
     1ae:	06 2e       	mov	r0, r22
     1b0:	04 c0       	rjmp	.+8      	; 0x1ba <_fpadd_parts+0xd0>
     1b2:	96 94       	lsr	r9
     1b4:	87 94       	ror	r8
     1b6:	77 94       	ror	r7
     1b8:	67 94       	ror	r6
     1ba:	0a 94       	dec	r0
     1bc:	d2 f7       	brpl	.-12     	; 0x1b2 <_fpadd_parts+0xc8>
     1be:	21 e0       	ldi	r18, 0x01	; 1
     1c0:	30 e0       	ldi	r19, 0x00	; 0
     1c2:	40 e0       	ldi	r20, 0x00	; 0
     1c4:	50 e0       	ldi	r21, 0x00	; 0
     1c6:	04 c0       	rjmp	.+8      	; 0x1d0 <_fpadd_parts+0xe6>
     1c8:	22 0f       	add	r18, r18
     1ca:	33 1f       	adc	r19, r19
     1cc:	44 1f       	adc	r20, r20
     1ce:	55 1f       	adc	r21, r21
     1d0:	6a 95       	dec	r22
     1d2:	d2 f7       	brpl	.-12     	; 0x1c8 <_fpadd_parts+0xde>
     1d4:	21 50       	subi	r18, 0x01	; 1
     1d6:	30 40       	sbci	r19, 0x00	; 0
     1d8:	40 40       	sbci	r20, 0x00	; 0
     1da:	50 40       	sbci	r21, 0x00	; 0
     1dc:	2e 21       	and	r18, r14
     1de:	3f 21       	and	r19, r15
     1e0:	40 23       	and	r20, r16
     1e2:	51 23       	and	r21, r17
     1e4:	21 15       	cp	r18, r1
     1e6:	31 05       	cpc	r19, r1
     1e8:	41 05       	cpc	r20, r1
     1ea:	51 05       	cpc	r21, r1
     1ec:	21 f0       	breq	.+8      	; 0x1f6 <_fpadd_parts+0x10c>
     1ee:	21 e0       	ldi	r18, 0x01	; 1
     1f0:	30 e0       	ldi	r19, 0x00	; 0
     1f2:	40 e0       	ldi	r20, 0x00	; 0
     1f4:	50 e0       	ldi	r21, 0x00	; 0
     1f6:	79 01       	movw	r14, r18
     1f8:	8a 01       	movw	r16, r20
     1fa:	e6 28       	or	r14, r6
     1fc:	f7 28       	or	r15, r7
     1fe:	08 29       	or	r16, r8
     200:	19 29       	or	r17, r9
     202:	3c c0       	rjmp	.+120    	; 0x27c <_fpadd_parts+0x192>
     204:	23 2b       	or	r18, r19
     206:	d1 f1       	breq	.+116    	; 0x27c <_fpadd_parts+0x192>
     208:	26 0e       	add	r2, r22
     20a:	37 1e       	adc	r3, r23
     20c:	35 01       	movw	r6, r10
     20e:	46 01       	movw	r8, r12
     210:	06 2e       	mov	r0, r22
     212:	04 c0       	rjmp	.+8      	; 0x21c <_fpadd_parts+0x132>
     214:	96 94       	lsr	r9
     216:	87 94       	ror	r8
     218:	77 94       	ror	r7
     21a:	67 94       	ror	r6
     21c:	0a 94       	dec	r0
     21e:	d2 f7       	brpl	.-12     	; 0x214 <_fpadd_parts+0x12a>
     220:	21 e0       	ldi	r18, 0x01	; 1
     222:	30 e0       	ldi	r19, 0x00	; 0
     224:	40 e0       	ldi	r20, 0x00	; 0
     226:	50 e0       	ldi	r21, 0x00	; 0
     228:	04 c0       	rjmp	.+8      	; 0x232 <_fpadd_parts+0x148>
     22a:	22 0f       	add	r18, r18
     22c:	33 1f       	adc	r19, r19
     22e:	44 1f       	adc	r20, r20
     230:	55 1f       	adc	r21, r21
     232:	6a 95       	dec	r22
     234:	d2 f7       	brpl	.-12     	; 0x22a <_fpadd_parts+0x140>
     236:	21 50       	subi	r18, 0x01	; 1
     238:	30 40       	sbci	r19, 0x00	; 0
     23a:	40 40       	sbci	r20, 0x00	; 0
     23c:	50 40       	sbci	r21, 0x00	; 0
     23e:	2a 21       	and	r18, r10
     240:	3b 21       	and	r19, r11
     242:	4c 21       	and	r20, r12
     244:	5d 21       	and	r21, r13
     246:	21 15       	cp	r18, r1
     248:	31 05       	cpc	r19, r1
     24a:	41 05       	cpc	r20, r1
     24c:	51 05       	cpc	r21, r1
     24e:	21 f0       	breq	.+8      	; 0x258 <_fpadd_parts+0x16e>
     250:	21 e0       	ldi	r18, 0x01	; 1
     252:	30 e0       	ldi	r19, 0x00	; 0
     254:	40 e0       	ldi	r20, 0x00	; 0
     256:	50 e0       	ldi	r21, 0x00	; 0
     258:	59 01       	movw	r10, r18
     25a:	6a 01       	movw	r12, r20
     25c:	a6 28       	or	r10, r6
     25e:	b7 28       	or	r11, r7
     260:	c8 28       	or	r12, r8
     262:	d9 28       	or	r13, r9
     264:	0b c0       	rjmp	.+22     	; 0x27c <_fpadd_parts+0x192>
     266:	82 15       	cp	r24, r2
     268:	93 05       	cpc	r25, r3
     26a:	2c f0       	brlt	.+10     	; 0x276 <_fpadd_parts+0x18c>
     26c:	1c 01       	movw	r2, r24
     26e:	aa 24       	eor	r10, r10
     270:	bb 24       	eor	r11, r11
     272:	65 01       	movw	r12, r10
     274:	03 c0       	rjmp	.+6      	; 0x27c <_fpadd_parts+0x192>
     276:	ee 24       	eor	r14, r14
     278:	ff 24       	eor	r15, r15
     27a:	87 01       	movw	r16, r14
     27c:	11 96       	adiw	r26, 0x01	; 1
     27e:	9c 91       	ld	r25, X
     280:	d2 01       	movw	r26, r4
     282:	11 96       	adiw	r26, 0x01	; 1
     284:	8c 91       	ld	r24, X
     286:	98 17       	cp	r25, r24
     288:	09 f4       	brne	.+2      	; 0x28c <_fpadd_parts+0x1a2>
     28a:	45 c0       	rjmp	.+138    	; 0x316 <_fpadd_parts+0x22c>
     28c:	99 23       	and	r25, r25
     28e:	39 f0       	breq	.+14     	; 0x29e <_fpadd_parts+0x1b4>
     290:	a8 01       	movw	r20, r16
     292:	97 01       	movw	r18, r14
     294:	2a 19       	sub	r18, r10
     296:	3b 09       	sbc	r19, r11
     298:	4c 09       	sbc	r20, r12
     29a:	5d 09       	sbc	r21, r13
     29c:	06 c0       	rjmp	.+12     	; 0x2aa <_fpadd_parts+0x1c0>
     29e:	a6 01       	movw	r20, r12
     2a0:	95 01       	movw	r18, r10
     2a2:	2e 19       	sub	r18, r14
     2a4:	3f 09       	sbc	r19, r15
     2a6:	40 0b       	sbc	r20, r16
     2a8:	51 0b       	sbc	r21, r17
     2aa:	57 fd       	sbrc	r21, 7
     2ac:	08 c0       	rjmp	.+16     	; 0x2be <_fpadd_parts+0x1d4>
     2ae:	11 82       	std	Z+1, r1	; 0x01
     2b0:	33 82       	std	Z+3, r3	; 0x03
     2b2:	22 82       	std	Z+2, r2	; 0x02
     2b4:	24 83       	std	Z+4, r18	; 0x04
     2b6:	35 83       	std	Z+5, r19	; 0x05
     2b8:	46 83       	std	Z+6, r20	; 0x06
     2ba:	57 83       	std	Z+7, r21	; 0x07
     2bc:	1d c0       	rjmp	.+58     	; 0x2f8 <_fpadd_parts+0x20e>
     2be:	81 e0       	ldi	r24, 0x01	; 1
     2c0:	81 83       	std	Z+1, r24	; 0x01
     2c2:	33 82       	std	Z+3, r3	; 0x03
     2c4:	22 82       	std	Z+2, r2	; 0x02
     2c6:	88 27       	eor	r24, r24
     2c8:	99 27       	eor	r25, r25
     2ca:	dc 01       	movw	r26, r24
     2cc:	82 1b       	sub	r24, r18
     2ce:	93 0b       	sbc	r25, r19
     2d0:	a4 0b       	sbc	r26, r20
     2d2:	b5 0b       	sbc	r27, r21
     2d4:	84 83       	std	Z+4, r24	; 0x04
     2d6:	95 83       	std	Z+5, r25	; 0x05
     2d8:	a6 83       	std	Z+6, r26	; 0x06
     2da:	b7 83       	std	Z+7, r27	; 0x07
     2dc:	0d c0       	rjmp	.+26     	; 0x2f8 <_fpadd_parts+0x20e>
     2de:	22 0f       	add	r18, r18
     2e0:	33 1f       	adc	r19, r19
     2e2:	44 1f       	adc	r20, r20
     2e4:	55 1f       	adc	r21, r21
     2e6:	24 83       	std	Z+4, r18	; 0x04
     2e8:	35 83       	std	Z+5, r19	; 0x05
     2ea:	46 83       	std	Z+6, r20	; 0x06
     2ec:	57 83       	std	Z+7, r21	; 0x07
     2ee:	82 81       	ldd	r24, Z+2	; 0x02
     2f0:	93 81       	ldd	r25, Z+3	; 0x03
     2f2:	01 97       	sbiw	r24, 0x01	; 1
     2f4:	93 83       	std	Z+3, r25	; 0x03
     2f6:	82 83       	std	Z+2, r24	; 0x02
     2f8:	24 81       	ldd	r18, Z+4	; 0x04
     2fa:	35 81       	ldd	r19, Z+5	; 0x05
     2fc:	46 81       	ldd	r20, Z+6	; 0x06
     2fe:	57 81       	ldd	r21, Z+7	; 0x07
     300:	da 01       	movw	r26, r20
     302:	c9 01       	movw	r24, r18
     304:	01 97       	sbiw	r24, 0x01	; 1
     306:	a1 09       	sbc	r26, r1
     308:	b1 09       	sbc	r27, r1
     30a:	8f 5f       	subi	r24, 0xFF	; 255
     30c:	9f 4f       	sbci	r25, 0xFF	; 255
     30e:	af 4f       	sbci	r26, 0xFF	; 255
     310:	bf 43       	sbci	r27, 0x3F	; 63
     312:	28 f3       	brcs	.-54     	; 0x2de <_fpadd_parts+0x1f4>
     314:	0b c0       	rjmp	.+22     	; 0x32c <_fpadd_parts+0x242>
     316:	91 83       	std	Z+1, r25	; 0x01
     318:	33 82       	std	Z+3, r3	; 0x03
     31a:	22 82       	std	Z+2, r2	; 0x02
     31c:	ea 0c       	add	r14, r10
     31e:	fb 1c       	adc	r15, r11
     320:	0c 1d       	adc	r16, r12
     322:	1d 1d       	adc	r17, r13
     324:	e4 82       	std	Z+4, r14	; 0x04
     326:	f5 82       	std	Z+5, r15	; 0x05
     328:	06 83       	std	Z+6, r16	; 0x06
     32a:	17 83       	std	Z+7, r17	; 0x07
     32c:	83 e0       	ldi	r24, 0x03	; 3
     32e:	80 83       	st	Z, r24
     330:	24 81       	ldd	r18, Z+4	; 0x04
     332:	35 81       	ldd	r19, Z+5	; 0x05
     334:	46 81       	ldd	r20, Z+6	; 0x06
     336:	57 81       	ldd	r21, Z+7	; 0x07
     338:	57 ff       	sbrs	r21, 7
     33a:	1a c0       	rjmp	.+52     	; 0x370 <_fpadd_parts+0x286>
     33c:	c9 01       	movw	r24, r18
     33e:	aa 27       	eor	r26, r26
     340:	97 fd       	sbrc	r25, 7
     342:	a0 95       	com	r26
     344:	ba 2f       	mov	r27, r26
     346:	81 70       	andi	r24, 0x01	; 1
     348:	90 70       	andi	r25, 0x00	; 0
     34a:	a0 70       	andi	r26, 0x00	; 0
     34c:	b0 70       	andi	r27, 0x00	; 0
     34e:	56 95       	lsr	r21
     350:	47 95       	ror	r20
     352:	37 95       	ror	r19
     354:	27 95       	ror	r18
     356:	82 2b       	or	r24, r18
     358:	93 2b       	or	r25, r19
     35a:	a4 2b       	or	r26, r20
     35c:	b5 2b       	or	r27, r21
     35e:	84 83       	std	Z+4, r24	; 0x04
     360:	95 83       	std	Z+5, r25	; 0x05
     362:	a6 83       	std	Z+6, r26	; 0x06
     364:	b7 83       	std	Z+7, r27	; 0x07
     366:	82 81       	ldd	r24, Z+2	; 0x02
     368:	93 81       	ldd	r25, Z+3	; 0x03
     36a:	01 96       	adiw	r24, 0x01	; 1
     36c:	93 83       	std	Z+3, r25	; 0x03
     36e:	82 83       	std	Z+2, r24	; 0x02
     370:	df 01       	movw	r26, r30
     372:	01 c0       	rjmp	.+2      	; 0x376 <_fpadd_parts+0x28c>
     374:	d2 01       	movw	r26, r4
     376:	cd 01       	movw	r24, r26
     378:	cd b7       	in	r28, 0x3d	; 61
     37a:	de b7       	in	r29, 0x3e	; 62
     37c:	e2 e1       	ldi	r30, 0x12	; 18
     37e:	0c 94 9c 2e 	jmp	0x5d38	; 0x5d38 <__epilogue_restores__>

00000382 <__subsf3>:
     382:	a0 e2       	ldi	r26, 0x20	; 32
     384:	b0 e0       	ldi	r27, 0x00	; 0
     386:	e7 ec       	ldi	r30, 0xC7	; 199
     388:	f1 e0       	ldi	r31, 0x01	; 1
     38a:	0c 94 8c 2e 	jmp	0x5d18	; 0x5d18 <__prologue_saves__+0x18>
     38e:	69 83       	std	Y+1, r22	; 0x01
     390:	7a 83       	std	Y+2, r23	; 0x02
     392:	8b 83       	std	Y+3, r24	; 0x03
     394:	9c 83       	std	Y+4, r25	; 0x04
     396:	2d 83       	std	Y+5, r18	; 0x05
     398:	3e 83       	std	Y+6, r19	; 0x06
     39a:	4f 83       	std	Y+7, r20	; 0x07
     39c:	58 87       	std	Y+8, r21	; 0x08
     39e:	e9 e0       	ldi	r30, 0x09	; 9
     3a0:	ee 2e       	mov	r14, r30
     3a2:	f1 2c       	mov	r15, r1
     3a4:	ec 0e       	add	r14, r28
     3a6:	fd 1e       	adc	r15, r29
     3a8:	ce 01       	movw	r24, r28
     3aa:	01 96       	adiw	r24, 0x01	; 1
     3ac:	b7 01       	movw	r22, r14
     3ae:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     3b2:	8e 01       	movw	r16, r28
     3b4:	0f 5e       	subi	r16, 0xEF	; 239
     3b6:	1f 4f       	sbci	r17, 0xFF	; 255
     3b8:	ce 01       	movw	r24, r28
     3ba:	05 96       	adiw	r24, 0x05	; 5
     3bc:	b8 01       	movw	r22, r16
     3be:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     3c2:	8a 89       	ldd	r24, Y+18	; 0x12
     3c4:	91 e0       	ldi	r25, 0x01	; 1
     3c6:	89 27       	eor	r24, r25
     3c8:	8a 8b       	std	Y+18, r24	; 0x12
     3ca:	c7 01       	movw	r24, r14
     3cc:	b8 01       	movw	r22, r16
     3ce:	ae 01       	movw	r20, r28
     3d0:	47 5e       	subi	r20, 0xE7	; 231
     3d2:	5f 4f       	sbci	r21, 0xFF	; 255
     3d4:	0e 94 75 00 	call	0xea	; 0xea <_fpadd_parts>
     3d8:	0e 94 fd 03 	call	0x7fa	; 0x7fa <__pack_f>
     3dc:	a0 96       	adiw	r28, 0x20	; 32
     3de:	e6 e0       	ldi	r30, 0x06	; 6
     3e0:	0c 94 a8 2e 	jmp	0x5d50	; 0x5d50 <__epilogue_restores__+0x18>

000003e4 <__addsf3>:
     3e4:	a0 e2       	ldi	r26, 0x20	; 32
     3e6:	b0 e0       	ldi	r27, 0x00	; 0
     3e8:	e8 ef       	ldi	r30, 0xF8	; 248
     3ea:	f1 e0       	ldi	r31, 0x01	; 1
     3ec:	0c 94 8c 2e 	jmp	0x5d18	; 0x5d18 <__prologue_saves__+0x18>
     3f0:	69 83       	std	Y+1, r22	; 0x01
     3f2:	7a 83       	std	Y+2, r23	; 0x02
     3f4:	8b 83       	std	Y+3, r24	; 0x03
     3f6:	9c 83       	std	Y+4, r25	; 0x04
     3f8:	2d 83       	std	Y+5, r18	; 0x05
     3fa:	3e 83       	std	Y+6, r19	; 0x06
     3fc:	4f 83       	std	Y+7, r20	; 0x07
     3fe:	58 87       	std	Y+8, r21	; 0x08
     400:	f9 e0       	ldi	r31, 0x09	; 9
     402:	ef 2e       	mov	r14, r31
     404:	f1 2c       	mov	r15, r1
     406:	ec 0e       	add	r14, r28
     408:	fd 1e       	adc	r15, r29
     40a:	ce 01       	movw	r24, r28
     40c:	01 96       	adiw	r24, 0x01	; 1
     40e:	b7 01       	movw	r22, r14
     410:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     414:	8e 01       	movw	r16, r28
     416:	0f 5e       	subi	r16, 0xEF	; 239
     418:	1f 4f       	sbci	r17, 0xFF	; 255
     41a:	ce 01       	movw	r24, r28
     41c:	05 96       	adiw	r24, 0x05	; 5
     41e:	b8 01       	movw	r22, r16
     420:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     424:	c7 01       	movw	r24, r14
     426:	b8 01       	movw	r22, r16
     428:	ae 01       	movw	r20, r28
     42a:	47 5e       	subi	r20, 0xE7	; 231
     42c:	5f 4f       	sbci	r21, 0xFF	; 255
     42e:	0e 94 75 00 	call	0xea	; 0xea <_fpadd_parts>
     432:	0e 94 fd 03 	call	0x7fa	; 0x7fa <__pack_f>
     436:	a0 96       	adiw	r28, 0x20	; 32
     438:	e6 e0       	ldi	r30, 0x06	; 6
     43a:	0c 94 a8 2e 	jmp	0x5d50	; 0x5d50 <__epilogue_restores__+0x18>

0000043e <__mulsf3>:
     43e:	a0 e2       	ldi	r26, 0x20	; 32
     440:	b0 e0       	ldi	r27, 0x00	; 0
     442:	e5 e2       	ldi	r30, 0x25	; 37
     444:	f2 e0       	ldi	r31, 0x02	; 2
     446:	0c 94 80 2e 	jmp	0x5d00	; 0x5d00 <__prologue_saves__>
     44a:	69 83       	std	Y+1, r22	; 0x01
     44c:	7a 83       	std	Y+2, r23	; 0x02
     44e:	8b 83       	std	Y+3, r24	; 0x03
     450:	9c 83       	std	Y+4, r25	; 0x04
     452:	2d 83       	std	Y+5, r18	; 0x05
     454:	3e 83       	std	Y+6, r19	; 0x06
     456:	4f 83       	std	Y+7, r20	; 0x07
     458:	58 87       	std	Y+8, r21	; 0x08
     45a:	ce 01       	movw	r24, r28
     45c:	01 96       	adiw	r24, 0x01	; 1
     45e:	be 01       	movw	r22, r28
     460:	67 5f       	subi	r22, 0xF7	; 247
     462:	7f 4f       	sbci	r23, 0xFF	; 255
     464:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     468:	ce 01       	movw	r24, r28
     46a:	05 96       	adiw	r24, 0x05	; 5
     46c:	be 01       	movw	r22, r28
     46e:	6f 5e       	subi	r22, 0xEF	; 239
     470:	7f 4f       	sbci	r23, 0xFF	; 255
     472:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     476:	99 85       	ldd	r25, Y+9	; 0x09
     478:	92 30       	cpi	r25, 0x02	; 2
     47a:	88 f0       	brcs	.+34     	; 0x49e <__mulsf3+0x60>
     47c:	89 89       	ldd	r24, Y+17	; 0x11
     47e:	82 30       	cpi	r24, 0x02	; 2
     480:	c8 f0       	brcs	.+50     	; 0x4b4 <__mulsf3+0x76>
     482:	94 30       	cpi	r25, 0x04	; 4
     484:	19 f4       	brne	.+6      	; 0x48c <__mulsf3+0x4e>
     486:	82 30       	cpi	r24, 0x02	; 2
     488:	51 f4       	brne	.+20     	; 0x49e <__mulsf3+0x60>
     48a:	04 c0       	rjmp	.+8      	; 0x494 <__mulsf3+0x56>
     48c:	84 30       	cpi	r24, 0x04	; 4
     48e:	29 f4       	brne	.+10     	; 0x49a <__mulsf3+0x5c>
     490:	92 30       	cpi	r25, 0x02	; 2
     492:	81 f4       	brne	.+32     	; 0x4b4 <__mulsf3+0x76>
     494:	8f e6       	ldi	r24, 0x6F	; 111
     496:	90 e0       	ldi	r25, 0x00	; 0
     498:	c6 c0       	rjmp	.+396    	; 0x626 <__mulsf3+0x1e8>
     49a:	92 30       	cpi	r25, 0x02	; 2
     49c:	49 f4       	brne	.+18     	; 0x4b0 <__mulsf3+0x72>
     49e:	20 e0       	ldi	r18, 0x00	; 0
     4a0:	9a 85       	ldd	r25, Y+10	; 0x0a
     4a2:	8a 89       	ldd	r24, Y+18	; 0x12
     4a4:	98 13       	cpse	r25, r24
     4a6:	21 e0       	ldi	r18, 0x01	; 1
     4a8:	2a 87       	std	Y+10, r18	; 0x0a
     4aa:	ce 01       	movw	r24, r28
     4ac:	09 96       	adiw	r24, 0x09	; 9
     4ae:	bb c0       	rjmp	.+374    	; 0x626 <__mulsf3+0x1e8>
     4b0:	82 30       	cpi	r24, 0x02	; 2
     4b2:	49 f4       	brne	.+18     	; 0x4c6 <__mulsf3+0x88>
     4b4:	20 e0       	ldi	r18, 0x00	; 0
     4b6:	9a 85       	ldd	r25, Y+10	; 0x0a
     4b8:	8a 89       	ldd	r24, Y+18	; 0x12
     4ba:	98 13       	cpse	r25, r24
     4bc:	21 e0       	ldi	r18, 0x01	; 1
     4be:	2a 8b       	std	Y+18, r18	; 0x12
     4c0:	ce 01       	movw	r24, r28
     4c2:	41 96       	adiw	r24, 0x11	; 17
     4c4:	b0 c0       	rjmp	.+352    	; 0x626 <__mulsf3+0x1e8>
     4c6:	2d 84       	ldd	r2, Y+13	; 0x0d
     4c8:	3e 84       	ldd	r3, Y+14	; 0x0e
     4ca:	4f 84       	ldd	r4, Y+15	; 0x0f
     4cc:	58 88       	ldd	r5, Y+16	; 0x10
     4ce:	6d 88       	ldd	r6, Y+21	; 0x15
     4d0:	7e 88       	ldd	r7, Y+22	; 0x16
     4d2:	8f 88       	ldd	r8, Y+23	; 0x17
     4d4:	98 8c       	ldd	r9, Y+24	; 0x18
     4d6:	ee 24       	eor	r14, r14
     4d8:	ff 24       	eor	r15, r15
     4da:	87 01       	movw	r16, r14
     4dc:	aa 24       	eor	r10, r10
     4de:	bb 24       	eor	r11, r11
     4e0:	65 01       	movw	r12, r10
     4e2:	40 e0       	ldi	r20, 0x00	; 0
     4e4:	50 e0       	ldi	r21, 0x00	; 0
     4e6:	60 e0       	ldi	r22, 0x00	; 0
     4e8:	70 e0       	ldi	r23, 0x00	; 0
     4ea:	e0 e0       	ldi	r30, 0x00	; 0
     4ec:	f0 e0       	ldi	r31, 0x00	; 0
     4ee:	c1 01       	movw	r24, r2
     4f0:	81 70       	andi	r24, 0x01	; 1
     4f2:	90 70       	andi	r25, 0x00	; 0
     4f4:	89 2b       	or	r24, r25
     4f6:	e9 f0       	breq	.+58     	; 0x532 <__mulsf3+0xf4>
     4f8:	e6 0c       	add	r14, r6
     4fa:	f7 1c       	adc	r15, r7
     4fc:	08 1d       	adc	r16, r8
     4fe:	19 1d       	adc	r17, r9
     500:	9a 01       	movw	r18, r20
     502:	ab 01       	movw	r20, r22
     504:	2a 0d       	add	r18, r10
     506:	3b 1d       	adc	r19, r11
     508:	4c 1d       	adc	r20, r12
     50a:	5d 1d       	adc	r21, r13
     50c:	80 e0       	ldi	r24, 0x00	; 0
     50e:	90 e0       	ldi	r25, 0x00	; 0
     510:	a0 e0       	ldi	r26, 0x00	; 0
     512:	b0 e0       	ldi	r27, 0x00	; 0
     514:	e6 14       	cp	r14, r6
     516:	f7 04       	cpc	r15, r7
     518:	08 05       	cpc	r16, r8
     51a:	19 05       	cpc	r17, r9
     51c:	20 f4       	brcc	.+8      	; 0x526 <__mulsf3+0xe8>
     51e:	81 e0       	ldi	r24, 0x01	; 1
     520:	90 e0       	ldi	r25, 0x00	; 0
     522:	a0 e0       	ldi	r26, 0x00	; 0
     524:	b0 e0       	ldi	r27, 0x00	; 0
     526:	ba 01       	movw	r22, r20
     528:	a9 01       	movw	r20, r18
     52a:	48 0f       	add	r20, r24
     52c:	59 1f       	adc	r21, r25
     52e:	6a 1f       	adc	r22, r26
     530:	7b 1f       	adc	r23, r27
     532:	aa 0c       	add	r10, r10
     534:	bb 1c       	adc	r11, r11
     536:	cc 1c       	adc	r12, r12
     538:	dd 1c       	adc	r13, r13
     53a:	97 fe       	sbrs	r9, 7
     53c:	08 c0       	rjmp	.+16     	; 0x54e <__mulsf3+0x110>
     53e:	81 e0       	ldi	r24, 0x01	; 1
     540:	90 e0       	ldi	r25, 0x00	; 0
     542:	a0 e0       	ldi	r26, 0x00	; 0
     544:	b0 e0       	ldi	r27, 0x00	; 0
     546:	a8 2a       	or	r10, r24
     548:	b9 2a       	or	r11, r25
     54a:	ca 2a       	or	r12, r26
     54c:	db 2a       	or	r13, r27
     54e:	31 96       	adiw	r30, 0x01	; 1
     550:	e0 32       	cpi	r30, 0x20	; 32
     552:	f1 05       	cpc	r31, r1
     554:	49 f0       	breq	.+18     	; 0x568 <__mulsf3+0x12a>
     556:	66 0c       	add	r6, r6
     558:	77 1c       	adc	r7, r7
     55a:	88 1c       	adc	r8, r8
     55c:	99 1c       	adc	r9, r9
     55e:	56 94       	lsr	r5
     560:	47 94       	ror	r4
     562:	37 94       	ror	r3
     564:	27 94       	ror	r2
     566:	c3 cf       	rjmp	.-122    	; 0x4ee <__mulsf3+0xb0>
     568:	fa 85       	ldd	r31, Y+10	; 0x0a
     56a:	ea 89       	ldd	r30, Y+18	; 0x12
     56c:	2b 89       	ldd	r18, Y+19	; 0x13
     56e:	3c 89       	ldd	r19, Y+20	; 0x14
     570:	8b 85       	ldd	r24, Y+11	; 0x0b
     572:	9c 85       	ldd	r25, Y+12	; 0x0c
     574:	28 0f       	add	r18, r24
     576:	39 1f       	adc	r19, r25
     578:	2e 5f       	subi	r18, 0xFE	; 254
     57a:	3f 4f       	sbci	r19, 0xFF	; 255
     57c:	17 c0       	rjmp	.+46     	; 0x5ac <__mulsf3+0x16e>
     57e:	ca 01       	movw	r24, r20
     580:	81 70       	andi	r24, 0x01	; 1
     582:	90 70       	andi	r25, 0x00	; 0
     584:	89 2b       	or	r24, r25
     586:	61 f0       	breq	.+24     	; 0x5a0 <__mulsf3+0x162>
     588:	16 95       	lsr	r17
     58a:	07 95       	ror	r16
     58c:	f7 94       	ror	r15
     58e:	e7 94       	ror	r14
     590:	80 e0       	ldi	r24, 0x00	; 0
     592:	90 e0       	ldi	r25, 0x00	; 0
     594:	a0 e0       	ldi	r26, 0x00	; 0
     596:	b0 e8       	ldi	r27, 0x80	; 128
     598:	e8 2a       	or	r14, r24
     59a:	f9 2a       	or	r15, r25
     59c:	0a 2b       	or	r16, r26
     59e:	1b 2b       	or	r17, r27
     5a0:	76 95       	lsr	r23
     5a2:	67 95       	ror	r22
     5a4:	57 95       	ror	r21
     5a6:	47 95       	ror	r20
     5a8:	2f 5f       	subi	r18, 0xFF	; 255
     5aa:	3f 4f       	sbci	r19, 0xFF	; 255
     5ac:	77 fd       	sbrc	r23, 7
     5ae:	e7 cf       	rjmp	.-50     	; 0x57e <__mulsf3+0x140>
     5b0:	0c c0       	rjmp	.+24     	; 0x5ca <__mulsf3+0x18c>
     5b2:	44 0f       	add	r20, r20
     5b4:	55 1f       	adc	r21, r21
     5b6:	66 1f       	adc	r22, r22
     5b8:	77 1f       	adc	r23, r23
     5ba:	17 fd       	sbrc	r17, 7
     5bc:	41 60       	ori	r20, 0x01	; 1
     5be:	ee 0c       	add	r14, r14
     5c0:	ff 1c       	adc	r15, r15
     5c2:	00 1f       	adc	r16, r16
     5c4:	11 1f       	adc	r17, r17
     5c6:	21 50       	subi	r18, 0x01	; 1
     5c8:	30 40       	sbci	r19, 0x00	; 0
     5ca:	40 30       	cpi	r20, 0x00	; 0
     5cc:	90 e0       	ldi	r25, 0x00	; 0
     5ce:	59 07       	cpc	r21, r25
     5d0:	90 e0       	ldi	r25, 0x00	; 0
     5d2:	69 07       	cpc	r22, r25
     5d4:	90 e4       	ldi	r25, 0x40	; 64
     5d6:	79 07       	cpc	r23, r25
     5d8:	60 f3       	brcs	.-40     	; 0x5b2 <__mulsf3+0x174>
     5da:	2b 8f       	std	Y+27, r18	; 0x1b
     5dc:	3c 8f       	std	Y+28, r19	; 0x1c
     5de:	db 01       	movw	r26, r22
     5e0:	ca 01       	movw	r24, r20
     5e2:	8f 77       	andi	r24, 0x7F	; 127
     5e4:	90 70       	andi	r25, 0x00	; 0
     5e6:	a0 70       	andi	r26, 0x00	; 0
     5e8:	b0 70       	andi	r27, 0x00	; 0
     5ea:	80 34       	cpi	r24, 0x40	; 64
     5ec:	91 05       	cpc	r25, r1
     5ee:	a1 05       	cpc	r26, r1
     5f0:	b1 05       	cpc	r27, r1
     5f2:	61 f4       	brne	.+24     	; 0x60c <__mulsf3+0x1ce>
     5f4:	47 fd       	sbrc	r20, 7
     5f6:	0a c0       	rjmp	.+20     	; 0x60c <__mulsf3+0x1ce>
     5f8:	e1 14       	cp	r14, r1
     5fa:	f1 04       	cpc	r15, r1
     5fc:	01 05       	cpc	r16, r1
     5fe:	11 05       	cpc	r17, r1
     600:	29 f0       	breq	.+10     	; 0x60c <__mulsf3+0x1ce>
     602:	40 5c       	subi	r20, 0xC0	; 192
     604:	5f 4f       	sbci	r21, 0xFF	; 255
     606:	6f 4f       	sbci	r22, 0xFF	; 255
     608:	7f 4f       	sbci	r23, 0xFF	; 255
     60a:	40 78       	andi	r20, 0x80	; 128
     60c:	1a 8e       	std	Y+26, r1	; 0x1a
     60e:	fe 17       	cp	r31, r30
     610:	11 f0       	breq	.+4      	; 0x616 <__mulsf3+0x1d8>
     612:	81 e0       	ldi	r24, 0x01	; 1
     614:	8a 8f       	std	Y+26, r24	; 0x1a
     616:	4d 8f       	std	Y+29, r20	; 0x1d
     618:	5e 8f       	std	Y+30, r21	; 0x1e
     61a:	6f 8f       	std	Y+31, r22	; 0x1f
     61c:	78 a3       	std	Y+32, r23	; 0x20
     61e:	83 e0       	ldi	r24, 0x03	; 3
     620:	89 8f       	std	Y+25, r24	; 0x19
     622:	ce 01       	movw	r24, r28
     624:	49 96       	adiw	r24, 0x19	; 25
     626:	0e 94 fd 03 	call	0x7fa	; 0x7fa <__pack_f>
     62a:	a0 96       	adiw	r28, 0x20	; 32
     62c:	e2 e1       	ldi	r30, 0x12	; 18
     62e:	0c 94 9c 2e 	jmp	0x5d38	; 0x5d38 <__epilogue_restores__>

00000632 <__gtsf2>:
     632:	a8 e1       	ldi	r26, 0x18	; 24
     634:	b0 e0       	ldi	r27, 0x00	; 0
     636:	ef e1       	ldi	r30, 0x1F	; 31
     638:	f3 e0       	ldi	r31, 0x03	; 3
     63a:	0c 94 8c 2e 	jmp	0x5d18	; 0x5d18 <__prologue_saves__+0x18>
     63e:	69 83       	std	Y+1, r22	; 0x01
     640:	7a 83       	std	Y+2, r23	; 0x02
     642:	8b 83       	std	Y+3, r24	; 0x03
     644:	9c 83       	std	Y+4, r25	; 0x04
     646:	2d 83       	std	Y+5, r18	; 0x05
     648:	3e 83       	std	Y+6, r19	; 0x06
     64a:	4f 83       	std	Y+7, r20	; 0x07
     64c:	58 87       	std	Y+8, r21	; 0x08
     64e:	89 e0       	ldi	r24, 0x09	; 9
     650:	e8 2e       	mov	r14, r24
     652:	f1 2c       	mov	r15, r1
     654:	ec 0e       	add	r14, r28
     656:	fd 1e       	adc	r15, r29
     658:	ce 01       	movw	r24, r28
     65a:	01 96       	adiw	r24, 0x01	; 1
     65c:	b7 01       	movw	r22, r14
     65e:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     662:	8e 01       	movw	r16, r28
     664:	0f 5e       	subi	r16, 0xEF	; 239
     666:	1f 4f       	sbci	r17, 0xFF	; 255
     668:	ce 01       	movw	r24, r28
     66a:	05 96       	adiw	r24, 0x05	; 5
     66c:	b8 01       	movw	r22, r16
     66e:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     672:	89 85       	ldd	r24, Y+9	; 0x09
     674:	82 30       	cpi	r24, 0x02	; 2
     676:	40 f0       	brcs	.+16     	; 0x688 <__gtsf2+0x56>
     678:	89 89       	ldd	r24, Y+17	; 0x11
     67a:	82 30       	cpi	r24, 0x02	; 2
     67c:	28 f0       	brcs	.+10     	; 0x688 <__gtsf2+0x56>
     67e:	c7 01       	movw	r24, r14
     680:	b8 01       	movw	r22, r16
     682:	0e 94 4a 05 	call	0xa94	; 0xa94 <__fpcmp_parts_f>
     686:	01 c0       	rjmp	.+2      	; 0x68a <__gtsf2+0x58>
     688:	8f ef       	ldi	r24, 0xFF	; 255
     68a:	68 96       	adiw	r28, 0x18	; 24
     68c:	e6 e0       	ldi	r30, 0x06	; 6
     68e:	0c 94 a8 2e 	jmp	0x5d50	; 0x5d50 <__epilogue_restores__+0x18>

00000692 <__gesf2>:
     692:	a8 e1       	ldi	r26, 0x18	; 24
     694:	b0 e0       	ldi	r27, 0x00	; 0
     696:	ef e4       	ldi	r30, 0x4F	; 79
     698:	f3 e0       	ldi	r31, 0x03	; 3
     69a:	0c 94 8c 2e 	jmp	0x5d18	; 0x5d18 <__prologue_saves__+0x18>
     69e:	69 83       	std	Y+1, r22	; 0x01
     6a0:	7a 83       	std	Y+2, r23	; 0x02
     6a2:	8b 83       	std	Y+3, r24	; 0x03
     6a4:	9c 83       	std	Y+4, r25	; 0x04
     6a6:	2d 83       	std	Y+5, r18	; 0x05
     6a8:	3e 83       	std	Y+6, r19	; 0x06
     6aa:	4f 83       	std	Y+7, r20	; 0x07
     6ac:	58 87       	std	Y+8, r21	; 0x08
     6ae:	89 e0       	ldi	r24, 0x09	; 9
     6b0:	e8 2e       	mov	r14, r24
     6b2:	f1 2c       	mov	r15, r1
     6b4:	ec 0e       	add	r14, r28
     6b6:	fd 1e       	adc	r15, r29
     6b8:	ce 01       	movw	r24, r28
     6ba:	01 96       	adiw	r24, 0x01	; 1
     6bc:	b7 01       	movw	r22, r14
     6be:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     6c2:	8e 01       	movw	r16, r28
     6c4:	0f 5e       	subi	r16, 0xEF	; 239
     6c6:	1f 4f       	sbci	r17, 0xFF	; 255
     6c8:	ce 01       	movw	r24, r28
     6ca:	05 96       	adiw	r24, 0x05	; 5
     6cc:	b8 01       	movw	r22, r16
     6ce:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     6d2:	89 85       	ldd	r24, Y+9	; 0x09
     6d4:	82 30       	cpi	r24, 0x02	; 2
     6d6:	40 f0       	brcs	.+16     	; 0x6e8 <__gesf2+0x56>
     6d8:	89 89       	ldd	r24, Y+17	; 0x11
     6da:	82 30       	cpi	r24, 0x02	; 2
     6dc:	28 f0       	brcs	.+10     	; 0x6e8 <__gesf2+0x56>
     6de:	c7 01       	movw	r24, r14
     6e0:	b8 01       	movw	r22, r16
     6e2:	0e 94 4a 05 	call	0xa94	; 0xa94 <__fpcmp_parts_f>
     6e6:	01 c0       	rjmp	.+2      	; 0x6ea <__gesf2+0x58>
     6e8:	8f ef       	ldi	r24, 0xFF	; 255
     6ea:	68 96       	adiw	r28, 0x18	; 24
     6ec:	e6 e0       	ldi	r30, 0x06	; 6
     6ee:	0c 94 a8 2e 	jmp	0x5d50	; 0x5d50 <__epilogue_restores__+0x18>

000006f2 <__ltsf2>:
     6f2:	a8 e1       	ldi	r26, 0x18	; 24
     6f4:	b0 e0       	ldi	r27, 0x00	; 0
     6f6:	ef e7       	ldi	r30, 0x7F	; 127
     6f8:	f3 e0       	ldi	r31, 0x03	; 3
     6fa:	0c 94 8c 2e 	jmp	0x5d18	; 0x5d18 <__prologue_saves__+0x18>
     6fe:	69 83       	std	Y+1, r22	; 0x01
     700:	7a 83       	std	Y+2, r23	; 0x02
     702:	8b 83       	std	Y+3, r24	; 0x03
     704:	9c 83       	std	Y+4, r25	; 0x04
     706:	2d 83       	std	Y+5, r18	; 0x05
     708:	3e 83       	std	Y+6, r19	; 0x06
     70a:	4f 83       	std	Y+7, r20	; 0x07
     70c:	58 87       	std	Y+8, r21	; 0x08
     70e:	89 e0       	ldi	r24, 0x09	; 9
     710:	e8 2e       	mov	r14, r24
     712:	f1 2c       	mov	r15, r1
     714:	ec 0e       	add	r14, r28
     716:	fd 1e       	adc	r15, r29
     718:	ce 01       	movw	r24, r28
     71a:	01 96       	adiw	r24, 0x01	; 1
     71c:	b7 01       	movw	r22, r14
     71e:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     722:	8e 01       	movw	r16, r28
     724:	0f 5e       	subi	r16, 0xEF	; 239
     726:	1f 4f       	sbci	r17, 0xFF	; 255
     728:	ce 01       	movw	r24, r28
     72a:	05 96       	adiw	r24, 0x05	; 5
     72c:	b8 01       	movw	r22, r16
     72e:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     732:	89 85       	ldd	r24, Y+9	; 0x09
     734:	82 30       	cpi	r24, 0x02	; 2
     736:	40 f0       	brcs	.+16     	; 0x748 <__ltsf2+0x56>
     738:	89 89       	ldd	r24, Y+17	; 0x11
     73a:	82 30       	cpi	r24, 0x02	; 2
     73c:	28 f0       	brcs	.+10     	; 0x748 <__ltsf2+0x56>
     73e:	c7 01       	movw	r24, r14
     740:	b8 01       	movw	r22, r16
     742:	0e 94 4a 05 	call	0xa94	; 0xa94 <__fpcmp_parts_f>
     746:	01 c0       	rjmp	.+2      	; 0x74a <__ltsf2+0x58>
     748:	81 e0       	ldi	r24, 0x01	; 1
     74a:	68 96       	adiw	r28, 0x18	; 24
     74c:	e6 e0       	ldi	r30, 0x06	; 6
     74e:	0c 94 a8 2e 	jmp	0x5d50	; 0x5d50 <__epilogue_restores__+0x18>

00000752 <__fixsfsi>:
     752:	ac e0       	ldi	r26, 0x0C	; 12
     754:	b0 e0       	ldi	r27, 0x00	; 0
     756:	ef ea       	ldi	r30, 0xAF	; 175
     758:	f3 e0       	ldi	r31, 0x03	; 3
     75a:	0c 94 90 2e 	jmp	0x5d20	; 0x5d20 <__prologue_saves__+0x20>
     75e:	69 83       	std	Y+1, r22	; 0x01
     760:	7a 83       	std	Y+2, r23	; 0x02
     762:	8b 83       	std	Y+3, r24	; 0x03
     764:	9c 83       	std	Y+4, r25	; 0x04
     766:	ce 01       	movw	r24, r28
     768:	01 96       	adiw	r24, 0x01	; 1
     76a:	be 01       	movw	r22, r28
     76c:	6b 5f       	subi	r22, 0xFB	; 251
     76e:	7f 4f       	sbci	r23, 0xFF	; 255
     770:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     774:	8d 81       	ldd	r24, Y+5	; 0x05
     776:	82 30       	cpi	r24, 0x02	; 2
     778:	61 f1       	breq	.+88     	; 0x7d2 <__fixsfsi+0x80>
     77a:	82 30       	cpi	r24, 0x02	; 2
     77c:	50 f1       	brcs	.+84     	; 0x7d2 <__fixsfsi+0x80>
     77e:	84 30       	cpi	r24, 0x04	; 4
     780:	21 f4       	brne	.+8      	; 0x78a <__fixsfsi+0x38>
     782:	8e 81       	ldd	r24, Y+6	; 0x06
     784:	88 23       	and	r24, r24
     786:	51 f1       	breq	.+84     	; 0x7dc <__fixsfsi+0x8a>
     788:	2e c0       	rjmp	.+92     	; 0x7e6 <__fixsfsi+0x94>
     78a:	2f 81       	ldd	r18, Y+7	; 0x07
     78c:	38 85       	ldd	r19, Y+8	; 0x08
     78e:	37 fd       	sbrc	r19, 7
     790:	20 c0       	rjmp	.+64     	; 0x7d2 <__fixsfsi+0x80>
     792:	6e 81       	ldd	r22, Y+6	; 0x06
     794:	2f 31       	cpi	r18, 0x1F	; 31
     796:	31 05       	cpc	r19, r1
     798:	1c f0       	brlt	.+6      	; 0x7a0 <__fixsfsi+0x4e>
     79a:	66 23       	and	r22, r22
     79c:	f9 f0       	breq	.+62     	; 0x7dc <__fixsfsi+0x8a>
     79e:	23 c0       	rjmp	.+70     	; 0x7e6 <__fixsfsi+0x94>
     7a0:	8e e1       	ldi	r24, 0x1E	; 30
     7a2:	90 e0       	ldi	r25, 0x00	; 0
     7a4:	82 1b       	sub	r24, r18
     7a6:	93 0b       	sbc	r25, r19
     7a8:	29 85       	ldd	r18, Y+9	; 0x09
     7aa:	3a 85       	ldd	r19, Y+10	; 0x0a
     7ac:	4b 85       	ldd	r20, Y+11	; 0x0b
     7ae:	5c 85       	ldd	r21, Y+12	; 0x0c
     7b0:	04 c0       	rjmp	.+8      	; 0x7ba <__fixsfsi+0x68>
     7b2:	56 95       	lsr	r21
     7b4:	47 95       	ror	r20
     7b6:	37 95       	ror	r19
     7b8:	27 95       	ror	r18
     7ba:	8a 95       	dec	r24
     7bc:	d2 f7       	brpl	.-12     	; 0x7b2 <__fixsfsi+0x60>
     7be:	66 23       	and	r22, r22
     7c0:	b1 f0       	breq	.+44     	; 0x7ee <__fixsfsi+0x9c>
     7c2:	50 95       	com	r21
     7c4:	40 95       	com	r20
     7c6:	30 95       	com	r19
     7c8:	21 95       	neg	r18
     7ca:	3f 4f       	sbci	r19, 0xFF	; 255
     7cc:	4f 4f       	sbci	r20, 0xFF	; 255
     7ce:	5f 4f       	sbci	r21, 0xFF	; 255
     7d0:	0e c0       	rjmp	.+28     	; 0x7ee <__fixsfsi+0x9c>
     7d2:	20 e0       	ldi	r18, 0x00	; 0
     7d4:	30 e0       	ldi	r19, 0x00	; 0
     7d6:	40 e0       	ldi	r20, 0x00	; 0
     7d8:	50 e0       	ldi	r21, 0x00	; 0
     7da:	09 c0       	rjmp	.+18     	; 0x7ee <__fixsfsi+0x9c>
     7dc:	2f ef       	ldi	r18, 0xFF	; 255
     7de:	3f ef       	ldi	r19, 0xFF	; 255
     7e0:	4f ef       	ldi	r20, 0xFF	; 255
     7e2:	5f e7       	ldi	r21, 0x7F	; 127
     7e4:	04 c0       	rjmp	.+8      	; 0x7ee <__fixsfsi+0x9c>
     7e6:	20 e0       	ldi	r18, 0x00	; 0
     7e8:	30 e0       	ldi	r19, 0x00	; 0
     7ea:	40 e0       	ldi	r20, 0x00	; 0
     7ec:	50 e8       	ldi	r21, 0x80	; 128
     7ee:	b9 01       	movw	r22, r18
     7f0:	ca 01       	movw	r24, r20
     7f2:	2c 96       	adiw	r28, 0x0c	; 12
     7f4:	e2 e0       	ldi	r30, 0x02	; 2
     7f6:	0c 94 ac 2e 	jmp	0x5d58	; 0x5d58 <__epilogue_restores__+0x20>

000007fa <__pack_f>:
     7fa:	df 92       	push	r13
     7fc:	ef 92       	push	r14
     7fe:	ff 92       	push	r15
     800:	0f 93       	push	r16
     802:	1f 93       	push	r17
     804:	fc 01       	movw	r30, r24
     806:	e4 80       	ldd	r14, Z+4	; 0x04
     808:	f5 80       	ldd	r15, Z+5	; 0x05
     80a:	06 81       	ldd	r16, Z+6	; 0x06
     80c:	17 81       	ldd	r17, Z+7	; 0x07
     80e:	d1 80       	ldd	r13, Z+1	; 0x01
     810:	80 81       	ld	r24, Z
     812:	82 30       	cpi	r24, 0x02	; 2
     814:	48 f4       	brcc	.+18     	; 0x828 <__pack_f+0x2e>
     816:	80 e0       	ldi	r24, 0x00	; 0
     818:	90 e0       	ldi	r25, 0x00	; 0
     81a:	a0 e1       	ldi	r26, 0x10	; 16
     81c:	b0 e0       	ldi	r27, 0x00	; 0
     81e:	e8 2a       	or	r14, r24
     820:	f9 2a       	or	r15, r25
     822:	0a 2b       	or	r16, r26
     824:	1b 2b       	or	r17, r27
     826:	a5 c0       	rjmp	.+330    	; 0x972 <__stack+0x113>
     828:	84 30       	cpi	r24, 0x04	; 4
     82a:	09 f4       	brne	.+2      	; 0x82e <__pack_f+0x34>
     82c:	9f c0       	rjmp	.+318    	; 0x96c <__stack+0x10d>
     82e:	82 30       	cpi	r24, 0x02	; 2
     830:	21 f4       	brne	.+8      	; 0x83a <__pack_f+0x40>
     832:	ee 24       	eor	r14, r14
     834:	ff 24       	eor	r15, r15
     836:	87 01       	movw	r16, r14
     838:	05 c0       	rjmp	.+10     	; 0x844 <__pack_f+0x4a>
     83a:	e1 14       	cp	r14, r1
     83c:	f1 04       	cpc	r15, r1
     83e:	01 05       	cpc	r16, r1
     840:	11 05       	cpc	r17, r1
     842:	19 f4       	brne	.+6      	; 0x84a <__pack_f+0x50>
     844:	e0 e0       	ldi	r30, 0x00	; 0
     846:	f0 e0       	ldi	r31, 0x00	; 0
     848:	96 c0       	rjmp	.+300    	; 0x976 <__stack+0x117>
     84a:	62 81       	ldd	r22, Z+2	; 0x02
     84c:	73 81       	ldd	r23, Z+3	; 0x03
     84e:	9f ef       	ldi	r25, 0xFF	; 255
     850:	62 38       	cpi	r22, 0x82	; 130
     852:	79 07       	cpc	r23, r25
     854:	0c f0       	brlt	.+2      	; 0x858 <__pack_f+0x5e>
     856:	5b c0       	rjmp	.+182    	; 0x90e <__stack+0xaf>
     858:	22 e8       	ldi	r18, 0x82	; 130
     85a:	3f ef       	ldi	r19, 0xFF	; 255
     85c:	26 1b       	sub	r18, r22
     85e:	37 0b       	sbc	r19, r23
     860:	2a 31       	cpi	r18, 0x1A	; 26
     862:	31 05       	cpc	r19, r1
     864:	2c f0       	brlt	.+10     	; 0x870 <__stack+0x11>
     866:	20 e0       	ldi	r18, 0x00	; 0
     868:	30 e0       	ldi	r19, 0x00	; 0
     86a:	40 e0       	ldi	r20, 0x00	; 0
     86c:	50 e0       	ldi	r21, 0x00	; 0
     86e:	2a c0       	rjmp	.+84     	; 0x8c4 <__stack+0x65>
     870:	b8 01       	movw	r22, r16
     872:	a7 01       	movw	r20, r14
     874:	02 2e       	mov	r0, r18
     876:	04 c0       	rjmp	.+8      	; 0x880 <__stack+0x21>
     878:	76 95       	lsr	r23
     87a:	67 95       	ror	r22
     87c:	57 95       	ror	r21
     87e:	47 95       	ror	r20
     880:	0a 94       	dec	r0
     882:	d2 f7       	brpl	.-12     	; 0x878 <__stack+0x19>
     884:	81 e0       	ldi	r24, 0x01	; 1
     886:	90 e0       	ldi	r25, 0x00	; 0
     888:	a0 e0       	ldi	r26, 0x00	; 0
     88a:	b0 e0       	ldi	r27, 0x00	; 0
     88c:	04 c0       	rjmp	.+8      	; 0x896 <__stack+0x37>
     88e:	88 0f       	add	r24, r24
     890:	99 1f       	adc	r25, r25
     892:	aa 1f       	adc	r26, r26
     894:	bb 1f       	adc	r27, r27
     896:	2a 95       	dec	r18
     898:	d2 f7       	brpl	.-12     	; 0x88e <__stack+0x2f>
     89a:	01 97       	sbiw	r24, 0x01	; 1
     89c:	a1 09       	sbc	r26, r1
     89e:	b1 09       	sbc	r27, r1
     8a0:	8e 21       	and	r24, r14
     8a2:	9f 21       	and	r25, r15
     8a4:	a0 23       	and	r26, r16
     8a6:	b1 23       	and	r27, r17
     8a8:	00 97       	sbiw	r24, 0x00	; 0
     8aa:	a1 05       	cpc	r26, r1
     8ac:	b1 05       	cpc	r27, r1
     8ae:	21 f0       	breq	.+8      	; 0x8b8 <__stack+0x59>
     8b0:	81 e0       	ldi	r24, 0x01	; 1
     8b2:	90 e0       	ldi	r25, 0x00	; 0
     8b4:	a0 e0       	ldi	r26, 0x00	; 0
     8b6:	b0 e0       	ldi	r27, 0x00	; 0
     8b8:	9a 01       	movw	r18, r20
     8ba:	ab 01       	movw	r20, r22
     8bc:	28 2b       	or	r18, r24
     8be:	39 2b       	or	r19, r25
     8c0:	4a 2b       	or	r20, r26
     8c2:	5b 2b       	or	r21, r27
     8c4:	da 01       	movw	r26, r20
     8c6:	c9 01       	movw	r24, r18
     8c8:	8f 77       	andi	r24, 0x7F	; 127
     8ca:	90 70       	andi	r25, 0x00	; 0
     8cc:	a0 70       	andi	r26, 0x00	; 0
     8ce:	b0 70       	andi	r27, 0x00	; 0
     8d0:	80 34       	cpi	r24, 0x40	; 64
     8d2:	91 05       	cpc	r25, r1
     8d4:	a1 05       	cpc	r26, r1
     8d6:	b1 05       	cpc	r27, r1
     8d8:	39 f4       	brne	.+14     	; 0x8e8 <__stack+0x89>
     8da:	27 ff       	sbrs	r18, 7
     8dc:	09 c0       	rjmp	.+18     	; 0x8f0 <__stack+0x91>
     8de:	20 5c       	subi	r18, 0xC0	; 192
     8e0:	3f 4f       	sbci	r19, 0xFF	; 255
     8e2:	4f 4f       	sbci	r20, 0xFF	; 255
     8e4:	5f 4f       	sbci	r21, 0xFF	; 255
     8e6:	04 c0       	rjmp	.+8      	; 0x8f0 <__stack+0x91>
     8e8:	21 5c       	subi	r18, 0xC1	; 193
     8ea:	3f 4f       	sbci	r19, 0xFF	; 255
     8ec:	4f 4f       	sbci	r20, 0xFF	; 255
     8ee:	5f 4f       	sbci	r21, 0xFF	; 255
     8f0:	e0 e0       	ldi	r30, 0x00	; 0
     8f2:	f0 e0       	ldi	r31, 0x00	; 0
     8f4:	20 30       	cpi	r18, 0x00	; 0
     8f6:	a0 e0       	ldi	r26, 0x00	; 0
     8f8:	3a 07       	cpc	r19, r26
     8fa:	a0 e0       	ldi	r26, 0x00	; 0
     8fc:	4a 07       	cpc	r20, r26
     8fe:	a0 e4       	ldi	r26, 0x40	; 64
     900:	5a 07       	cpc	r21, r26
     902:	10 f0       	brcs	.+4      	; 0x908 <__stack+0xa9>
     904:	e1 e0       	ldi	r30, 0x01	; 1
     906:	f0 e0       	ldi	r31, 0x00	; 0
     908:	79 01       	movw	r14, r18
     90a:	8a 01       	movw	r16, r20
     90c:	27 c0       	rjmp	.+78     	; 0x95c <__stack+0xfd>
     90e:	60 38       	cpi	r22, 0x80	; 128
     910:	71 05       	cpc	r23, r1
     912:	64 f5       	brge	.+88     	; 0x96c <__stack+0x10d>
     914:	fb 01       	movw	r30, r22
     916:	e1 58       	subi	r30, 0x81	; 129
     918:	ff 4f       	sbci	r31, 0xFF	; 255
     91a:	d8 01       	movw	r26, r16
     91c:	c7 01       	movw	r24, r14
     91e:	8f 77       	andi	r24, 0x7F	; 127
     920:	90 70       	andi	r25, 0x00	; 0
     922:	a0 70       	andi	r26, 0x00	; 0
     924:	b0 70       	andi	r27, 0x00	; 0
     926:	80 34       	cpi	r24, 0x40	; 64
     928:	91 05       	cpc	r25, r1
     92a:	a1 05       	cpc	r26, r1
     92c:	b1 05       	cpc	r27, r1
     92e:	39 f4       	brne	.+14     	; 0x93e <__stack+0xdf>
     930:	e7 fe       	sbrs	r14, 7
     932:	0d c0       	rjmp	.+26     	; 0x94e <__stack+0xef>
     934:	80 e4       	ldi	r24, 0x40	; 64
     936:	90 e0       	ldi	r25, 0x00	; 0
     938:	a0 e0       	ldi	r26, 0x00	; 0
     93a:	b0 e0       	ldi	r27, 0x00	; 0
     93c:	04 c0       	rjmp	.+8      	; 0x946 <__stack+0xe7>
     93e:	8f e3       	ldi	r24, 0x3F	; 63
     940:	90 e0       	ldi	r25, 0x00	; 0
     942:	a0 e0       	ldi	r26, 0x00	; 0
     944:	b0 e0       	ldi	r27, 0x00	; 0
     946:	e8 0e       	add	r14, r24
     948:	f9 1e       	adc	r15, r25
     94a:	0a 1f       	adc	r16, r26
     94c:	1b 1f       	adc	r17, r27
     94e:	17 ff       	sbrs	r17, 7
     950:	05 c0       	rjmp	.+10     	; 0x95c <__stack+0xfd>
     952:	16 95       	lsr	r17
     954:	07 95       	ror	r16
     956:	f7 94       	ror	r15
     958:	e7 94       	ror	r14
     95a:	31 96       	adiw	r30, 0x01	; 1
     95c:	87 e0       	ldi	r24, 0x07	; 7
     95e:	16 95       	lsr	r17
     960:	07 95       	ror	r16
     962:	f7 94       	ror	r15
     964:	e7 94       	ror	r14
     966:	8a 95       	dec	r24
     968:	d1 f7       	brne	.-12     	; 0x95e <__stack+0xff>
     96a:	05 c0       	rjmp	.+10     	; 0x976 <__stack+0x117>
     96c:	ee 24       	eor	r14, r14
     96e:	ff 24       	eor	r15, r15
     970:	87 01       	movw	r16, r14
     972:	ef ef       	ldi	r30, 0xFF	; 255
     974:	f0 e0       	ldi	r31, 0x00	; 0
     976:	6e 2f       	mov	r22, r30
     978:	67 95       	ror	r22
     97a:	66 27       	eor	r22, r22
     97c:	67 95       	ror	r22
     97e:	90 2f       	mov	r25, r16
     980:	9f 77       	andi	r25, 0x7F	; 127
     982:	d7 94       	ror	r13
     984:	dd 24       	eor	r13, r13
     986:	d7 94       	ror	r13
     988:	8e 2f       	mov	r24, r30
     98a:	86 95       	lsr	r24
     98c:	49 2f       	mov	r20, r25
     98e:	46 2b       	or	r20, r22
     990:	58 2f       	mov	r21, r24
     992:	5d 29       	or	r21, r13
     994:	b7 01       	movw	r22, r14
     996:	ca 01       	movw	r24, r20
     998:	1f 91       	pop	r17
     99a:	0f 91       	pop	r16
     99c:	ff 90       	pop	r15
     99e:	ef 90       	pop	r14
     9a0:	df 90       	pop	r13
     9a2:	08 95       	ret

000009a4 <__unpack_f>:
     9a4:	fc 01       	movw	r30, r24
     9a6:	db 01       	movw	r26, r22
     9a8:	40 81       	ld	r20, Z
     9aa:	51 81       	ldd	r21, Z+1	; 0x01
     9ac:	22 81       	ldd	r18, Z+2	; 0x02
     9ae:	62 2f       	mov	r22, r18
     9b0:	6f 77       	andi	r22, 0x7F	; 127
     9b2:	70 e0       	ldi	r23, 0x00	; 0
     9b4:	22 1f       	adc	r18, r18
     9b6:	22 27       	eor	r18, r18
     9b8:	22 1f       	adc	r18, r18
     9ba:	93 81       	ldd	r25, Z+3	; 0x03
     9bc:	89 2f       	mov	r24, r25
     9be:	88 0f       	add	r24, r24
     9c0:	82 2b       	or	r24, r18
     9c2:	28 2f       	mov	r18, r24
     9c4:	30 e0       	ldi	r19, 0x00	; 0
     9c6:	99 1f       	adc	r25, r25
     9c8:	99 27       	eor	r25, r25
     9ca:	99 1f       	adc	r25, r25
     9cc:	11 96       	adiw	r26, 0x01	; 1
     9ce:	9c 93       	st	X, r25
     9d0:	11 97       	sbiw	r26, 0x01	; 1
     9d2:	21 15       	cp	r18, r1
     9d4:	31 05       	cpc	r19, r1
     9d6:	a9 f5       	brne	.+106    	; 0xa42 <__unpack_f+0x9e>
     9d8:	41 15       	cp	r20, r1
     9da:	51 05       	cpc	r21, r1
     9dc:	61 05       	cpc	r22, r1
     9de:	71 05       	cpc	r23, r1
     9e0:	11 f4       	brne	.+4      	; 0x9e6 <__unpack_f+0x42>
     9e2:	82 e0       	ldi	r24, 0x02	; 2
     9e4:	37 c0       	rjmp	.+110    	; 0xa54 <__unpack_f+0xb0>
     9e6:	82 e8       	ldi	r24, 0x82	; 130
     9e8:	9f ef       	ldi	r25, 0xFF	; 255
     9ea:	13 96       	adiw	r26, 0x03	; 3
     9ec:	9c 93       	st	X, r25
     9ee:	8e 93       	st	-X, r24
     9f0:	12 97       	sbiw	r26, 0x02	; 2
     9f2:	9a 01       	movw	r18, r20
     9f4:	ab 01       	movw	r20, r22
     9f6:	67 e0       	ldi	r22, 0x07	; 7
     9f8:	22 0f       	add	r18, r18
     9fa:	33 1f       	adc	r19, r19
     9fc:	44 1f       	adc	r20, r20
     9fe:	55 1f       	adc	r21, r21
     a00:	6a 95       	dec	r22
     a02:	d1 f7       	brne	.-12     	; 0x9f8 <__unpack_f+0x54>
     a04:	83 e0       	ldi	r24, 0x03	; 3
     a06:	8c 93       	st	X, r24
     a08:	0d c0       	rjmp	.+26     	; 0xa24 <__unpack_f+0x80>
     a0a:	22 0f       	add	r18, r18
     a0c:	33 1f       	adc	r19, r19
     a0e:	44 1f       	adc	r20, r20
     a10:	55 1f       	adc	r21, r21
     a12:	12 96       	adiw	r26, 0x02	; 2
     a14:	8d 91       	ld	r24, X+
     a16:	9c 91       	ld	r25, X
     a18:	13 97       	sbiw	r26, 0x03	; 3
     a1a:	01 97       	sbiw	r24, 0x01	; 1
     a1c:	13 96       	adiw	r26, 0x03	; 3
     a1e:	9c 93       	st	X, r25
     a20:	8e 93       	st	-X, r24
     a22:	12 97       	sbiw	r26, 0x02	; 2
     a24:	20 30       	cpi	r18, 0x00	; 0
     a26:	80 e0       	ldi	r24, 0x00	; 0
     a28:	38 07       	cpc	r19, r24
     a2a:	80 e0       	ldi	r24, 0x00	; 0
     a2c:	48 07       	cpc	r20, r24
     a2e:	80 e4       	ldi	r24, 0x40	; 64
     a30:	58 07       	cpc	r21, r24
     a32:	58 f3       	brcs	.-42     	; 0xa0a <__unpack_f+0x66>
     a34:	14 96       	adiw	r26, 0x04	; 4
     a36:	2d 93       	st	X+, r18
     a38:	3d 93       	st	X+, r19
     a3a:	4d 93       	st	X+, r20
     a3c:	5c 93       	st	X, r21
     a3e:	17 97       	sbiw	r26, 0x07	; 7
     a40:	08 95       	ret
     a42:	2f 3f       	cpi	r18, 0xFF	; 255
     a44:	31 05       	cpc	r19, r1
     a46:	79 f4       	brne	.+30     	; 0xa66 <__unpack_f+0xc2>
     a48:	41 15       	cp	r20, r1
     a4a:	51 05       	cpc	r21, r1
     a4c:	61 05       	cpc	r22, r1
     a4e:	71 05       	cpc	r23, r1
     a50:	19 f4       	brne	.+6      	; 0xa58 <__unpack_f+0xb4>
     a52:	84 e0       	ldi	r24, 0x04	; 4
     a54:	8c 93       	st	X, r24
     a56:	08 95       	ret
     a58:	64 ff       	sbrs	r22, 4
     a5a:	03 c0       	rjmp	.+6      	; 0xa62 <__unpack_f+0xbe>
     a5c:	81 e0       	ldi	r24, 0x01	; 1
     a5e:	8c 93       	st	X, r24
     a60:	12 c0       	rjmp	.+36     	; 0xa86 <__unpack_f+0xe2>
     a62:	1c 92       	st	X, r1
     a64:	10 c0       	rjmp	.+32     	; 0xa86 <__unpack_f+0xe2>
     a66:	2f 57       	subi	r18, 0x7F	; 127
     a68:	30 40       	sbci	r19, 0x00	; 0
     a6a:	13 96       	adiw	r26, 0x03	; 3
     a6c:	3c 93       	st	X, r19
     a6e:	2e 93       	st	-X, r18
     a70:	12 97       	sbiw	r26, 0x02	; 2
     a72:	83 e0       	ldi	r24, 0x03	; 3
     a74:	8c 93       	st	X, r24
     a76:	87 e0       	ldi	r24, 0x07	; 7
     a78:	44 0f       	add	r20, r20
     a7a:	55 1f       	adc	r21, r21
     a7c:	66 1f       	adc	r22, r22
     a7e:	77 1f       	adc	r23, r23
     a80:	8a 95       	dec	r24
     a82:	d1 f7       	brne	.-12     	; 0xa78 <__unpack_f+0xd4>
     a84:	70 64       	ori	r23, 0x40	; 64
     a86:	14 96       	adiw	r26, 0x04	; 4
     a88:	4d 93       	st	X+, r20
     a8a:	5d 93       	st	X+, r21
     a8c:	6d 93       	st	X+, r22
     a8e:	7c 93       	st	X, r23
     a90:	17 97       	sbiw	r26, 0x07	; 7
     a92:	08 95       	ret

00000a94 <__fpcmp_parts_f>:
     a94:	1f 93       	push	r17
     a96:	dc 01       	movw	r26, r24
     a98:	fb 01       	movw	r30, r22
     a9a:	9c 91       	ld	r25, X
     a9c:	92 30       	cpi	r25, 0x02	; 2
     a9e:	08 f4       	brcc	.+2      	; 0xaa2 <__fpcmp_parts_f+0xe>
     aa0:	47 c0       	rjmp	.+142    	; 0xb30 <__fpcmp_parts_f+0x9c>
     aa2:	80 81       	ld	r24, Z
     aa4:	82 30       	cpi	r24, 0x02	; 2
     aa6:	08 f4       	brcc	.+2      	; 0xaaa <__fpcmp_parts_f+0x16>
     aa8:	43 c0       	rjmp	.+134    	; 0xb30 <__fpcmp_parts_f+0x9c>
     aaa:	94 30       	cpi	r25, 0x04	; 4
     aac:	51 f4       	brne	.+20     	; 0xac2 <__fpcmp_parts_f+0x2e>
     aae:	11 96       	adiw	r26, 0x01	; 1
     ab0:	1c 91       	ld	r17, X
     ab2:	84 30       	cpi	r24, 0x04	; 4
     ab4:	99 f5       	brne	.+102    	; 0xb1c <__fpcmp_parts_f+0x88>
     ab6:	81 81       	ldd	r24, Z+1	; 0x01
     ab8:	68 2f       	mov	r22, r24
     aba:	70 e0       	ldi	r23, 0x00	; 0
     abc:	61 1b       	sub	r22, r17
     abe:	71 09       	sbc	r23, r1
     ac0:	3f c0       	rjmp	.+126    	; 0xb40 <__fpcmp_parts_f+0xac>
     ac2:	84 30       	cpi	r24, 0x04	; 4
     ac4:	21 f0       	breq	.+8      	; 0xace <__fpcmp_parts_f+0x3a>
     ac6:	92 30       	cpi	r25, 0x02	; 2
     ac8:	31 f4       	brne	.+12     	; 0xad6 <__fpcmp_parts_f+0x42>
     aca:	82 30       	cpi	r24, 0x02	; 2
     acc:	b9 f1       	breq	.+110    	; 0xb3c <__fpcmp_parts_f+0xa8>
     ace:	81 81       	ldd	r24, Z+1	; 0x01
     ad0:	88 23       	and	r24, r24
     ad2:	89 f1       	breq	.+98     	; 0xb36 <__fpcmp_parts_f+0xa2>
     ad4:	2d c0       	rjmp	.+90     	; 0xb30 <__fpcmp_parts_f+0x9c>
     ad6:	11 96       	adiw	r26, 0x01	; 1
     ad8:	1c 91       	ld	r17, X
     ada:	11 97       	sbiw	r26, 0x01	; 1
     adc:	82 30       	cpi	r24, 0x02	; 2
     ade:	f1 f0       	breq	.+60     	; 0xb1c <__fpcmp_parts_f+0x88>
     ae0:	81 81       	ldd	r24, Z+1	; 0x01
     ae2:	18 17       	cp	r17, r24
     ae4:	d9 f4       	brne	.+54     	; 0xb1c <__fpcmp_parts_f+0x88>
     ae6:	12 96       	adiw	r26, 0x02	; 2
     ae8:	2d 91       	ld	r18, X+
     aea:	3c 91       	ld	r19, X
     aec:	13 97       	sbiw	r26, 0x03	; 3
     aee:	82 81       	ldd	r24, Z+2	; 0x02
     af0:	93 81       	ldd	r25, Z+3	; 0x03
     af2:	82 17       	cp	r24, r18
     af4:	93 07       	cpc	r25, r19
     af6:	94 f0       	brlt	.+36     	; 0xb1c <__fpcmp_parts_f+0x88>
     af8:	28 17       	cp	r18, r24
     afa:	39 07       	cpc	r19, r25
     afc:	bc f0       	brlt	.+46     	; 0xb2c <__fpcmp_parts_f+0x98>
     afe:	14 96       	adiw	r26, 0x04	; 4
     b00:	8d 91       	ld	r24, X+
     b02:	9d 91       	ld	r25, X+
     b04:	0d 90       	ld	r0, X+
     b06:	bc 91       	ld	r27, X
     b08:	a0 2d       	mov	r26, r0
     b0a:	24 81       	ldd	r18, Z+4	; 0x04
     b0c:	35 81       	ldd	r19, Z+5	; 0x05
     b0e:	46 81       	ldd	r20, Z+6	; 0x06
     b10:	57 81       	ldd	r21, Z+7	; 0x07
     b12:	28 17       	cp	r18, r24
     b14:	39 07       	cpc	r19, r25
     b16:	4a 07       	cpc	r20, r26
     b18:	5b 07       	cpc	r21, r27
     b1a:	18 f4       	brcc	.+6      	; 0xb22 <__fpcmp_parts_f+0x8e>
     b1c:	11 23       	and	r17, r17
     b1e:	41 f0       	breq	.+16     	; 0xb30 <__fpcmp_parts_f+0x9c>
     b20:	0a c0       	rjmp	.+20     	; 0xb36 <__fpcmp_parts_f+0xa2>
     b22:	82 17       	cp	r24, r18
     b24:	93 07       	cpc	r25, r19
     b26:	a4 07       	cpc	r26, r20
     b28:	b5 07       	cpc	r27, r21
     b2a:	40 f4       	brcc	.+16     	; 0xb3c <__fpcmp_parts_f+0xa8>
     b2c:	11 23       	and	r17, r17
     b2e:	19 f0       	breq	.+6      	; 0xb36 <__fpcmp_parts_f+0xa2>
     b30:	61 e0       	ldi	r22, 0x01	; 1
     b32:	70 e0       	ldi	r23, 0x00	; 0
     b34:	05 c0       	rjmp	.+10     	; 0xb40 <__fpcmp_parts_f+0xac>
     b36:	6f ef       	ldi	r22, 0xFF	; 255
     b38:	7f ef       	ldi	r23, 0xFF	; 255
     b3a:	02 c0       	rjmp	.+4      	; 0xb40 <__fpcmp_parts_f+0xac>
     b3c:	60 e0       	ldi	r22, 0x00	; 0
     b3e:	70 e0       	ldi	r23, 0x00	; 0
     b40:	cb 01       	movw	r24, r22
     b42:	1f 91       	pop	r17
     b44:	08 95       	ret

00000b46 <__vector_16>:
#include "Adc_cfg.h"
#include "GlobalInterrupt.h"

void (*Adc_Callback) (u16 res);

ISR(VECTOR_ADC) {
     b46:	1f 92       	push	r1
     b48:	0f 92       	push	r0
     b4a:	0f b6       	in	r0, 0x3f	; 63
     b4c:	0f 92       	push	r0
     b4e:	11 24       	eor	r1, r1
     b50:	2f 93       	push	r18
     b52:	3f 93       	push	r19
     b54:	4f 93       	push	r20
     b56:	5f 93       	push	r21
     b58:	6f 93       	push	r22
     b5a:	7f 93       	push	r23
     b5c:	8f 93       	push	r24
     b5e:	9f 93       	push	r25
     b60:	af 93       	push	r26
     b62:	bf 93       	push	r27
     b64:	ef 93       	push	r30
     b66:	ff 93       	push	r31
     b68:	df 93       	push	r29
     b6a:	cf 93       	push	r28
     b6c:	cd b7       	in	r28, 0x3d	; 61
     b6e:	de b7       	in	r29, 0x3e	; 62
    Adc_Callback((ADC_DATA_REGISTER & 0b0000001111111111));
     b70:	20 91 13 05 	lds	r18, 0x0513
     b74:	30 91 14 05 	lds	r19, 0x0514
     b78:	e4 e2       	ldi	r30, 0x24	; 36
     b7a:	f0 e0       	ldi	r31, 0x00	; 0
     b7c:	80 81       	ld	r24, Z
     b7e:	91 81       	ldd	r25, Z+1	; 0x01
     b80:	93 70       	andi	r25, 0x03	; 3
     b82:	f9 01       	movw	r30, r18
     b84:	09 95       	icall
}
     b86:	cf 91       	pop	r28
     b88:	df 91       	pop	r29
     b8a:	ff 91       	pop	r31
     b8c:	ef 91       	pop	r30
     b8e:	bf 91       	pop	r27
     b90:	af 91       	pop	r26
     b92:	9f 91       	pop	r25
     b94:	8f 91       	pop	r24
     b96:	7f 91       	pop	r23
     b98:	6f 91       	pop	r22
     b9a:	5f 91       	pop	r21
     b9c:	4f 91       	pop	r20
     b9e:	3f 91       	pop	r19
     ba0:	2f 91       	pop	r18
     ba2:	0f 90       	pop	r0
     ba4:	0f be       	out	0x3f, r0	; 63
     ba6:	0f 90       	pop	r0
     ba8:	1f 90       	pop	r1
     baa:	18 95       	reti

00000bac <Adc_Init>:

void Adc_Init(void) {
     bac:	df 93       	push	r29
     bae:	cf 93       	push	r28
     bb0:	cd b7       	in	r28, 0x3d	; 61
     bb2:	de b7       	in	r29, 0x3e	; 62
    /*Reference Selection Bits*/
#if (ADC_REF_SELECTION == ADC_REF_AREF)
    CLR_BIT(ADMUX, ADMUX_REFS1);
     bb4:	a7 e2       	ldi	r26, 0x27	; 39
     bb6:	b0 e0       	ldi	r27, 0x00	; 0
     bb8:	e7 e2       	ldi	r30, 0x27	; 39
     bba:	f0 e0       	ldi	r31, 0x00	; 0
     bbc:	80 81       	ld	r24, Z
     bbe:	8f 77       	andi	r24, 0x7F	; 127
     bc0:	8c 93       	st	X, r24
    CLR_BIT(ADMUX, ADMUX_REFS0);
     bc2:	a7 e2       	ldi	r26, 0x27	; 39
     bc4:	b0 e0       	ldi	r27, 0x00	; 0
     bc6:	e7 e2       	ldi	r30, 0x27	; 39
     bc8:	f0 e0       	ldi	r31, 0x00	; 0
     bca:	80 81       	ld	r24, Z
     bcc:	8f 7b       	andi	r24, 0xBF	; 191
     bce:	8c 93       	st	X, r24
#else
    #error "Error Ref Selection Choise"
#endif

    /* No Left Adjust */
    CLR_BIT(ADMUX, ADMUX_ADLAR);
     bd0:	a7 e2       	ldi	r26, 0x27	; 39
     bd2:	b0 e0       	ldi	r27, 0x00	; 0
     bd4:	e7 e2       	ldi	r30, 0x27	; 39
     bd6:	f0 e0       	ldi	r31, 0x00	; 0
     bd8:	80 81       	ld	r24, Z
     bda:	8f 7d       	andi	r24, 0xDF	; 223
     bdc:	8c 93       	st	X, r24

    /* ADC Enable */
    SET_BIT(ADCSRA, ADCSRA_ADEN);
     bde:	a6 e2       	ldi	r26, 0x26	; 38
     be0:	b0 e0       	ldi	r27, 0x00	; 0
     be2:	e6 e2       	ldi	r30, 0x26	; 38
     be4:	f0 e0       	ldi	r31, 0x00	; 0
     be6:	80 81       	ld	r24, Z
     be8:	80 68       	ori	r24, 0x80	; 128
     bea:	8c 93       	st	X, r24

    /* ADC Interrupt Enable */
#if (ADC_INT_STATE == ADC_INT_DISABLE)
    CLR_BIT(ADCSRA, ADCSRA_ADIE);
#elif (ADC_INT_STATE == ADC_INT_ENABLE)
    SET_BIT(ADCSRA, ADCSRA_ADIE);
     bec:	a6 e2       	ldi	r26, 0x26	; 38
     bee:	b0 e0       	ldi	r27, 0x00	; 0
     bf0:	e6 e2       	ldi	r30, 0x26	; 38
     bf2:	f0 e0       	ldi	r31, 0x00	; 0
     bf4:	80 81       	ld	r24, Z
     bf6:	88 60       	ori	r24, 0x08	; 8
     bf8:	8c 93       	st	X, r24
    GlobalInterrupt_Enable();
     bfa:	0e 94 65 0f 	call	0x1eca	; 0x1eca <GlobalInterrupt_Enable>
#endif

    /* ADC Prescaler Select */

#if (ADC_PRESCALER == 128)
    SET_BIT(ADCSRA, ADCSRA_ADPS0);
     bfe:	a6 e2       	ldi	r26, 0x26	; 38
     c00:	b0 e0       	ldi	r27, 0x00	; 0
     c02:	e6 e2       	ldi	r30, 0x26	; 38
     c04:	f0 e0       	ldi	r31, 0x00	; 0
     c06:	80 81       	ld	r24, Z
     c08:	81 60       	ori	r24, 0x01	; 1
     c0a:	8c 93       	st	X, r24
    SET_BIT(ADCSRA, ADCSRA_ADPS1);
     c0c:	a6 e2       	ldi	r26, 0x26	; 38
     c0e:	b0 e0       	ldi	r27, 0x00	; 0
     c10:	e6 e2       	ldi	r30, 0x26	; 38
     c12:	f0 e0       	ldi	r31, 0x00	; 0
     c14:	80 81       	ld	r24, Z
     c16:	82 60       	ori	r24, 0x02	; 2
     c18:	8c 93       	st	X, r24
    SET_BIT(ADCSRA, ADCSRA_ADPS2);
     c1a:	a6 e2       	ldi	r26, 0x26	; 38
     c1c:	b0 e0       	ldi	r27, 0x00	; 0
     c1e:	e6 e2       	ldi	r30, 0x26	; 38
     c20:	f0 e0       	ldi	r31, 0x00	; 0
     c22:	80 81       	ld	r24, Z
     c24:	84 60       	ori	r24, 0x04	; 4
     c26:	8c 93       	st	X, r24
    CLR_BIT(ADCSRA, ADCSRA_ADPS2);
    // TODO
#else
    #error "Error Prescaler Choise"
#endif
}
     c28:	cf 91       	pop	r28
     c2a:	df 91       	pop	r29
     c2c:	08 95       	ret

00000c2e <Adc_StartConversion>:

void Adc_StartConversion(Adc_ChannelType channel) {
     c2e:	df 93       	push	r29
     c30:	cf 93       	push	r28
     c32:	0f 92       	push	r0
     c34:	cd b7       	in	r28, 0x3d	; 61
     c36:	de b7       	in	r29, 0x3e	; 62
     c38:	89 83       	std	Y+1, r24	; 0x01
    ADMUX &= 0b11100000;
     c3a:	a7 e2       	ldi	r26, 0x27	; 39
     c3c:	b0 e0       	ldi	r27, 0x00	; 0
     c3e:	e7 e2       	ldi	r30, 0x27	; 39
     c40:	f0 e0       	ldi	r31, 0x00	; 0
     c42:	80 81       	ld	r24, Z
     c44:	80 7e       	andi	r24, 0xE0	; 224
     c46:	8c 93       	st	X, r24
    ADMUX |= channel;
     c48:	a7 e2       	ldi	r26, 0x27	; 39
     c4a:	b0 e0       	ldi	r27, 0x00	; 0
     c4c:	e7 e2       	ldi	r30, 0x27	; 39
     c4e:	f0 e0       	ldi	r31, 0x00	; 0
     c50:	90 81       	ld	r25, Z
     c52:	89 81       	ldd	r24, Y+1	; 0x01
     c54:	89 2b       	or	r24, r25
     c56:	8c 93       	st	X, r24
    SET_BIT(ADCSRA, ADCSRA_ADSC);
     c58:	a6 e2       	ldi	r26, 0x26	; 38
     c5a:	b0 e0       	ldi	r27, 0x00	; 0
     c5c:	e6 e2       	ldi	r30, 0x26	; 38
     c5e:	f0 e0       	ldi	r31, 0x00	; 0
     c60:	80 81       	ld	r24, Z
     c62:	80 64       	ori	r24, 0x40	; 64
     c64:	8c 93       	st	X, r24
}
     c66:	0f 90       	pop	r0
     c68:	cf 91       	pop	r28
     c6a:	df 91       	pop	r29
     c6c:	08 95       	ret

00000c6e <Adc_Enable>:

void Adc_Enable(void) {
     c6e:	df 93       	push	r29
     c70:	cf 93       	push	r28
     c72:	cd b7       	in	r28, 0x3d	; 61
     c74:	de b7       	in	r29, 0x3e	; 62
    SET_BIT(ADCSRA, ADCSRA_ADEN);
     c76:	a6 e2       	ldi	r26, 0x26	; 38
     c78:	b0 e0       	ldi	r27, 0x00	; 0
     c7a:	e6 e2       	ldi	r30, 0x26	; 38
     c7c:	f0 e0       	ldi	r31, 0x00	; 0
     c7e:	80 81       	ld	r24, Z
     c80:	80 68       	ori	r24, 0x80	; 128
     c82:	8c 93       	st	X, r24
    // TODO
}
     c84:	cf 91       	pop	r28
     c86:	df 91       	pop	r29
     c88:	08 95       	ret

00000c8a <Adc_Disable>:

void Adc_Disable(void) {
     c8a:	df 93       	push	r29
     c8c:	cf 93       	push	r28
     c8e:	cd b7       	in	r28, 0x3d	; 61
     c90:	de b7       	in	r29, 0x3e	; 62
    CLR_BIT(ADCSRA, ADCSRA_ADEN);
     c92:	a6 e2       	ldi	r26, 0x26	; 38
     c94:	b0 e0       	ldi	r27, 0x00	; 0
     c96:	e6 e2       	ldi	r30, 0x26	; 38
     c98:	f0 e0       	ldi	r31, 0x00	; 0
     c9a:	80 81       	ld	r24, Z
     c9c:	8f 77       	andi	r24, 0x7F	; 127
     c9e:	8c 93       	st	X, r24
    // TODO
}
     ca0:	cf 91       	pop	r28
     ca2:	df 91       	pop	r29
     ca4:	08 95       	ret

00000ca6 <Adc_GetResult>:


Adc_ConversionStateType Adc_GetResult(u16* result) {
     ca6:	df 93       	push	r29
     ca8:	cf 93       	push	r28
     caa:	00 d0       	rcall	.+0      	; 0xcac <Adc_GetResult+0x6>
     cac:	0f 92       	push	r0
     cae:	cd b7       	in	r28, 0x3d	; 61
     cb0:	de b7       	in	r29, 0x3e	; 62
     cb2:	9b 83       	std	Y+3, r25	; 0x03
     cb4:	8a 83       	std	Y+2, r24	; 0x02
    Adc_ConversionStateType flag = ADC_CONVERSION_NOT_COMPLETE;
     cb6:	19 82       	std	Y+1, r1	; 0x01
    if (GET_BIT(ADCSRA, ADCSRA_ADIF) == 1) {
     cb8:	e6 e2       	ldi	r30, 0x26	; 38
     cba:	f0 e0       	ldi	r31, 0x00	; 0
     cbc:	80 81       	ld	r24, Z
     cbe:	82 95       	swap	r24
     cc0:	8f 70       	andi	r24, 0x0F	; 15
     cc2:	88 2f       	mov	r24, r24
     cc4:	90 e0       	ldi	r25, 0x00	; 0
     cc6:	81 70       	andi	r24, 0x01	; 1
     cc8:	90 70       	andi	r25, 0x00	; 0
     cca:	88 23       	and	r24, r24
     ccc:	91 f0       	breq	.+36     	; 0xcf2 <Adc_GetResult+0x4c>
        SET_BIT(ADCSRA, ADCSRA_ADIF);
     cce:	a6 e2       	ldi	r26, 0x26	; 38
     cd0:	b0 e0       	ldi	r27, 0x00	; 0
     cd2:	e6 e2       	ldi	r30, 0x26	; 38
     cd4:	f0 e0       	ldi	r31, 0x00	; 0
     cd6:	80 81       	ld	r24, Z
     cd8:	80 61       	ori	r24, 0x10	; 16
     cda:	8c 93       	st	X, r24
        *result = ADC_DATA_REGISTER & 0b0000001111111111;
     cdc:	e4 e2       	ldi	r30, 0x24	; 36
     cde:	f0 e0       	ldi	r31, 0x00	; 0
     ce0:	80 81       	ld	r24, Z
     ce2:	91 81       	ldd	r25, Z+1	; 0x01
     ce4:	93 70       	andi	r25, 0x03	; 3
     ce6:	ea 81       	ldd	r30, Y+2	; 0x02
     ce8:	fb 81       	ldd	r31, Y+3	; 0x03
     cea:	91 83       	std	Z+1, r25	; 0x01
     cec:	80 83       	st	Z, r24
        flag = ADC_CONVERSION_COMPLETE;
     cee:	81 e0       	ldi	r24, 0x01	; 1
     cf0:	89 83       	std	Y+1, r24	; 0x01
    }
    return flag;
     cf2:	89 81       	ldd	r24, Y+1	; 0x01
}
     cf4:	0f 90       	pop	r0
     cf6:	0f 90       	pop	r0
     cf8:	0f 90       	pop	r0
     cfa:	cf 91       	pop	r28
     cfc:	df 91       	pop	r29
     cfe:	08 95       	ret

00000d00 <Adc_GetResultPolling>:

u16 Adc_GetResultPolling(void) {
     d00:	df 93       	push	r29
     d02:	cf 93       	push	r28
     d04:	cd b7       	in	r28, 0x3d	; 61
     d06:	de b7       	in	r29, 0x3e	; 62
    while (GET_BIT(ADCSRA, ADCSRA_ADIF) == 0);
     d08:	e6 e2       	ldi	r30, 0x26	; 38
     d0a:	f0 e0       	ldi	r31, 0x00	; 0
     d0c:	80 81       	ld	r24, Z
     d0e:	82 95       	swap	r24
     d10:	8f 70       	andi	r24, 0x0F	; 15
     d12:	88 2f       	mov	r24, r24
     d14:	90 e0       	ldi	r25, 0x00	; 0
     d16:	81 70       	andi	r24, 0x01	; 1
     d18:	90 70       	andi	r25, 0x00	; 0
     d1a:	00 97       	sbiw	r24, 0x00	; 0
     d1c:	a9 f3       	breq	.-22     	; 0xd08 <Adc_GetResultPolling+0x8>
    return (ADC_DATA_REGISTER & 0b0000001111111111);
     d1e:	e4 e2       	ldi	r30, 0x24	; 36
     d20:	f0 e0       	ldi	r31, 0x00	; 0
     d22:	80 81       	ld	r24, Z
     d24:	91 81       	ldd	r25, Z+1	; 0x01
     d26:	93 70       	andi	r25, 0x03	; 3
}
     d28:	cf 91       	pop	r28
     d2a:	df 91       	pop	r29
     d2c:	08 95       	ret

00000d2e <Adc_SetCallback>:


void Adc_SetCallback (void (*callback) (u16 res)) {
     d2e:	df 93       	push	r29
     d30:	cf 93       	push	r28
     d32:	00 d0       	rcall	.+0      	; 0xd34 <Adc_SetCallback+0x6>
     d34:	cd b7       	in	r28, 0x3d	; 61
     d36:	de b7       	in	r29, 0x3e	; 62
     d38:	9a 83       	std	Y+2, r25	; 0x02
     d3a:	89 83       	std	Y+1, r24	; 0x01
    Adc_Callback = callback;
     d3c:	89 81       	ldd	r24, Y+1	; 0x01
     d3e:	9a 81       	ldd	r25, Y+2	; 0x02
     d40:	90 93 14 05 	sts	0x0514, r25
     d44:	80 93 13 05 	sts	0x0513, r24
}
     d48:	0f 90       	pop	r0
     d4a:	0f 90       	pop	r0
     d4c:	cf 91       	pop	r28
     d4e:	df 91       	pop	r29
     d50:	08 95       	ret

00000d52 <Calculator_Run>:
#include "LCD.h"
#include "Calculator.h"

//u8 Calculator_GetRealNumber (Keypad_ButtonType button);

void Calculator_Run(void) {
     d52:	df 93       	push	r29
     d54:	cf 93       	push	r28
     d56:	cd b7       	in	r28, 0x3d	; 61
     d58:	de b7       	in	r29, 0x3e	; 62
     d5a:	2d 97       	sbiw	r28, 0x0d	; 13
     d5c:	0f b6       	in	r0, 0x3f	; 63
     d5e:	f8 94       	cli
     d60:	de bf       	out	0x3e, r29	; 62
     d62:	0f be       	out	0x3f, r0	; 63
     d64:	cd bf       	out	0x3d, r28	; 61
    s8 num1=0, num2=0, operation=0, result=0;
     d66:	19 86       	std	Y+9, r1	; 0x09
     d68:	18 86       	std	Y+8, r1	; 0x08
     d6a:	1f 82       	std	Y+7, r1	; 0x07
     d6c:	1e 82       	std	Y+6, r1	; 0x06
    u8 num1_flag=0, num2_flag=0, operation_flag=0, result_flag=0;
     d6e:	1d 82       	std	Y+5, r1	; 0x05
     d70:	1c 82       	std	Y+4, r1	; 0x04
     d72:	1b 82       	std	Y+3, r1	; 0x03
     d74:	1a 82       	std	Y+2, r1	; 0x02
    Keypad_ButtonType pressed_button;
    while (1)
    {
        /* Wait for user input */
        do {
            pressed_button = Keypad_GetPressedButton();
     d76:	0e 94 7e 11 	call	0x22fc	; 0x22fc <Keypad_GetPressedButton>
     d7a:	89 83       	std	Y+1, r24	; 0x01
        }
        while (pressed_button == KEYPAD_BUTTON_INVALID);
     d7c:	89 81       	ldd	r24, Y+1	; 0x01
     d7e:	80 31       	cpi	r24, 0x10	; 16
     d80:	d1 f3       	breq	.-12     	; 0xd76 <Calculator_Run+0x24>

        if (pressed_button == CALCULATOR_BUTTON_CLR) {
     d82:	89 81       	ldd	r24, Y+1	; 0x01
     d84:	88 23       	and	r24, r24
     d86:	39 f4       	brne	.+14     	; 0xd96 <Calculator_Run+0x44>
            num1_flag = 0;
     d88:	1d 82       	std	Y+5, r1	; 0x05
            num2_flag = 0;
     d8a:	1c 82       	std	Y+4, r1	; 0x04
            operation_flag = 0;
     d8c:	1b 82       	std	Y+3, r1	; 0x03
            result_flag = 0;
     d8e:	1a 82       	std	Y+2, r1	; 0x02
            LCD_Clear();
     d90:	0e 94 43 12 	call	0x2486	; 0x2486 <LCD_Clear>
     d94:	f0 cf       	rjmp	.-32     	; 0xd76 <Calculator_Run+0x24>
            continue;
        }
        if (num1_flag == 0) {
     d96:	8d 81       	ldd	r24, Y+5	; 0x05
     d98:	88 23       	and	r24, r24
     d9a:	81 f4       	brne	.+32     	; 0xdbc <Calculator_Run+0x6a>
            num1_flag = 1;
     d9c:	81 e0       	ldi	r24, 0x01	; 1
     d9e:	8d 83       	std	Y+5, r24	; 0x05
            num1 = Calculator_GetRealNumber(pressed_button);
     da0:	89 81       	ldd	r24, Y+1	; 0x01
     da2:	0e 94 7b 07 	call	0xef6	; 0xef6 <Calculator_GetRealNumber>
     da6:	89 87       	std	Y+9, r24	; 0x09
            LCD_DisplayNumber(num1);
     da8:	89 85       	ldd	r24, Y+9	; 0x09
     daa:	88 2f       	mov	r24, r24
     dac:	90 e0       	ldi	r25, 0x00	; 0
     dae:	a0 e0       	ldi	r26, 0x00	; 0
     db0:	b0 e0       	ldi	r27, 0x00	; 0
     db2:	bc 01       	movw	r22, r24
     db4:	cd 01       	movw	r24, r26
     db6:	0e 94 a7 12 	call	0x254e	; 0x254e <LCD_DisplayNumber>
     dba:	dd cf       	rjmp	.-70     	; 0xd76 <Calculator_Run+0x24>
        }
        else if (operation_flag == 0) {
     dbc:	8b 81       	ldd	r24, Y+3	; 0x03
     dbe:	88 23       	and	r24, r24
     dc0:	89 f5       	brne	.+98     	; 0xe24 <Calculator_Run+0xd2>
            operation_flag = 1;
     dc2:	81 e0       	ldi	r24, 0x01	; 1
     dc4:	8b 83       	std	Y+3, r24	; 0x03
            switch (pressed_button)
     dc6:	89 81       	ldd	r24, Y+1	; 0x01
     dc8:	28 2f       	mov	r18, r24
     dca:	30 e0       	ldi	r19, 0x00	; 0
     dcc:	3d 87       	std	Y+13, r19	; 0x0d
     dce:	2c 87       	std	Y+12, r18	; 0x0c
     dd0:	8c 85       	ldd	r24, Y+12	; 0x0c
     dd2:	9d 85       	ldd	r25, Y+13	; 0x0d
     dd4:	87 30       	cpi	r24, 0x07	; 7
     dd6:	91 05       	cpc	r25, r1
     dd8:	c9 f0       	breq	.+50     	; 0xe0c <Calculator_Run+0xba>
     dda:	2c 85       	ldd	r18, Y+12	; 0x0c
     ddc:	3d 85       	ldd	r19, Y+13	; 0x0d
     dde:	28 30       	cpi	r18, 0x08	; 8
     de0:	31 05       	cpc	r19, r1
     de2:	34 f4       	brge	.+12     	; 0xdf0 <Calculator_Run+0x9e>
     de4:	8c 85       	ldd	r24, Y+12	; 0x0c
     de6:	9d 85       	ldd	r25, Y+13	; 0x0d
     de8:	83 30       	cpi	r24, 0x03	; 3
     dea:	91 05       	cpc	r25, r1
     dec:	61 f0       	breq	.+24     	; 0xe06 <Calculator_Run+0xb4>
     dee:	16 c0       	rjmp	.+44     	; 0xe1c <Calculator_Run+0xca>
     df0:	2c 85       	ldd	r18, Y+12	; 0x0c
     df2:	3d 85       	ldd	r19, Y+13	; 0x0d
     df4:	2b 30       	cpi	r18, 0x0B	; 11
     df6:	31 05       	cpc	r19, r1
     df8:	61 f0       	breq	.+24     	; 0xe12 <Calculator_Run+0xc0>
     dfa:	8c 85       	ldd	r24, Y+12	; 0x0c
     dfc:	9d 85       	ldd	r25, Y+13	; 0x0d
     dfe:	8f 30       	cpi	r24, 0x0F	; 15
     e00:	91 05       	cpc	r25, r1
     e02:	51 f0       	breq	.+20     	; 0xe18 <Calculator_Run+0xc6>
     e04:	0b c0       	rjmp	.+22     	; 0xe1c <Calculator_Run+0xca>
            {
            case CALCULATOR_BUTTON_PLUS:
                operation = '+';
     e06:	8b e2       	ldi	r24, 0x2B	; 43
     e08:	8f 83       	std	Y+7, r24	; 0x07
     e0a:	08 c0       	rjmp	.+16     	; 0xe1c <Calculator_Run+0xca>
                break;
            case CALCULATOR_BUTTON_MINUS:
                operation = '-';
     e0c:	8d e2       	ldi	r24, 0x2D	; 45
     e0e:	8f 83       	std	Y+7, r24	; 0x07
     e10:	05 c0       	rjmp	.+10     	; 0xe1c <Calculator_Run+0xca>
                break;
            case CALCULATOR_BUTTON_MUL:
                operation = '*';
     e12:	8a e2       	ldi	r24, 0x2A	; 42
     e14:	8f 83       	std	Y+7, r24	; 0x07
     e16:	02 c0       	rjmp	.+4      	; 0xe1c <Calculator_Run+0xca>
                break;
            case CALCULATOR_BUTTON_DIV:
                operation = '/';
     e18:	8f e2       	ldi	r24, 0x2F	; 47
     e1a:	8f 83       	std	Y+7, r24	; 0x07
                break;
            default:
                break;
            }
            LCD_DisplayCharacter(operation);
     e1c:	8f 81       	ldd	r24, Y+7	; 0x07
     e1e:	0e 94 4d 12 	call	0x249a	; 0x249a <LCD_DisplayCharacter>
     e22:	a9 cf       	rjmp	.-174    	; 0xd76 <Calculator_Run+0x24>
        }
        else if (num2_flag == 0) {
     e24:	8c 81       	ldd	r24, Y+4	; 0x04
     e26:	88 23       	and	r24, r24
     e28:	81 f4       	brne	.+32     	; 0xe4a <Calculator_Run+0xf8>
            num2_flag = 1;
     e2a:	81 e0       	ldi	r24, 0x01	; 1
     e2c:	8c 83       	std	Y+4, r24	; 0x04
            num2 = Calculator_GetRealNumber(pressed_button);
     e2e:	89 81       	ldd	r24, Y+1	; 0x01
     e30:	0e 94 7b 07 	call	0xef6	; 0xef6 <Calculator_GetRealNumber>
     e34:	88 87       	std	Y+8, r24	; 0x08
            LCD_DisplayNumber(num2);
     e36:	88 85       	ldd	r24, Y+8	; 0x08
     e38:	88 2f       	mov	r24, r24
     e3a:	90 e0       	ldi	r25, 0x00	; 0
     e3c:	a0 e0       	ldi	r26, 0x00	; 0
     e3e:	b0 e0       	ldi	r27, 0x00	; 0
     e40:	bc 01       	movw	r22, r24
     e42:	cd 01       	movw	r24, r26
     e44:	0e 94 a7 12 	call	0x254e	; 0x254e <LCD_DisplayNumber>
     e48:	96 cf       	rjmp	.-212    	; 0xd76 <Calculator_Run+0x24>
        }
        else if (result_flag == 0) {
     e4a:	8a 81       	ldd	r24, Y+2	; 0x02
     e4c:	88 23       	and	r24, r24
     e4e:	09 f0       	breq	.+2      	; 0xe52 <Calculator_Run+0x100>
     e50:	92 cf       	rjmp	.-220    	; 0xd76 <Calculator_Run+0x24>
            if (pressed_button == CALCULATOR_BUTTON_EQUAL) {
     e52:	89 81       	ldd	r24, Y+1	; 0x01
     e54:	82 30       	cpi	r24, 0x02	; 2
     e56:	09 f0       	breq	.+2      	; 0xe5a <Calculator_Run+0x108>
     e58:	8e cf       	rjmp	.-228    	; 0xd76 <Calculator_Run+0x24>
                result_flag = 1;
     e5a:	81 e0       	ldi	r24, 0x01	; 1
     e5c:	8a 83       	std	Y+2, r24	; 0x02
                switch (operation)
     e5e:	8f 81       	ldd	r24, Y+7	; 0x07
     e60:	28 2f       	mov	r18, r24
     e62:	30 e0       	ldi	r19, 0x00	; 0
     e64:	3b 87       	std	Y+11, r19	; 0x0b
     e66:	2a 87       	std	Y+10, r18	; 0x0a
     e68:	8a 85       	ldd	r24, Y+10	; 0x0a
     e6a:	9b 85       	ldd	r25, Y+11	; 0x0b
     e6c:	8b 32       	cpi	r24, 0x2B	; 43
     e6e:	91 05       	cpc	r25, r1
     e70:	b1 f0       	breq	.+44     	; 0xe9e <Calculator_Run+0x14c>
     e72:	2a 85       	ldd	r18, Y+10	; 0x0a
     e74:	3b 85       	ldd	r19, Y+11	; 0x0b
     e76:	2c 32       	cpi	r18, 0x2C	; 44
     e78:	31 05       	cpc	r19, r1
     e7a:	34 f4       	brge	.+12     	; 0xe88 <Calculator_Run+0x136>
     e7c:	8a 85       	ldd	r24, Y+10	; 0x0a
     e7e:	9b 85       	ldd	r25, Y+11	; 0x0b
     e80:	8a 32       	cpi	r24, 0x2A	; 42
     e82:	91 05       	cpc	r25, r1
     e84:	b1 f0       	breq	.+44     	; 0xeb2 <Calculator_Run+0x160>
     e86:	22 c0       	rjmp	.+68     	; 0xecc <Calculator_Run+0x17a>
     e88:	2a 85       	ldd	r18, Y+10	; 0x0a
     e8a:	3b 85       	ldd	r19, Y+11	; 0x0b
     e8c:	2d 32       	cpi	r18, 0x2D	; 45
     e8e:	31 05       	cpc	r19, r1
     e90:	59 f0       	breq	.+22     	; 0xea8 <Calculator_Run+0x156>
     e92:	8a 85       	ldd	r24, Y+10	; 0x0a
     e94:	9b 85       	ldd	r25, Y+11	; 0x0b
     e96:	8f 32       	cpi	r24, 0x2F	; 47
     e98:	91 05       	cpc	r25, r1
     e9a:	91 f0       	breq	.+36     	; 0xec0 <Calculator_Run+0x16e>
     e9c:	17 c0       	rjmp	.+46     	; 0xecc <Calculator_Run+0x17a>
                {
                case '+':
                    result = num1 + num2;
     e9e:	89 85       	ldd	r24, Y+9	; 0x09
     ea0:	98 85       	ldd	r25, Y+8	; 0x08
     ea2:	89 0f       	add	r24, r25
     ea4:	8e 83       	std	Y+6, r24	; 0x06
     ea6:	12 c0       	rjmp	.+36     	; 0xecc <Calculator_Run+0x17a>
                    break;
                case '-':
                    result = num1 - num2;
     ea8:	89 85       	ldd	r24, Y+9	; 0x09
     eaa:	98 85       	ldd	r25, Y+8	; 0x08
     eac:	89 1b       	sub	r24, r25
     eae:	8e 83       	std	Y+6, r24	; 0x06
     eb0:	0d c0       	rjmp	.+26     	; 0xecc <Calculator_Run+0x17a>
                    break;
                case '*':
                    result = num1 * num2;
     eb2:	89 85       	ldd	r24, Y+9	; 0x09
     eb4:	98 85       	ldd	r25, Y+8	; 0x08
     eb6:	89 9f       	mul	r24, r25
     eb8:	80 2d       	mov	r24, r0
     eba:	11 24       	eor	r1, r1
     ebc:	8e 83       	std	Y+6, r24	; 0x06
     ebe:	06 c0       	rjmp	.+12     	; 0xecc <Calculator_Run+0x17a>
                    break;
                case '/':
                    result = num1 / num2;
     ec0:	89 85       	ldd	r24, Y+9	; 0x09
     ec2:	98 85       	ldd	r25, Y+8	; 0x08
     ec4:	69 2f       	mov	r22, r25
     ec6:	0e 94 37 2e 	call	0x5c6e	; 0x5c6e <__udivmodqi4>
     eca:	8e 83       	std	Y+6, r24	; 0x06
                    break;
                default:
                    break;
                }
                LCD_DisplayCharacter('=');
     ecc:	8d e3       	ldi	r24, 0x3D	; 61
     ece:	0e 94 4d 12 	call	0x249a	; 0x249a <LCD_DisplayCharacter>
                LCD_SetCursorPosition(1,0);
     ed2:	81 e0       	ldi	r24, 0x01	; 1
     ed4:	60 e0       	ldi	r22, 0x00	; 0
     ed6:	0e 94 83 12 	call	0x2506	; 0x2506 <LCD_SetCursorPosition>
                LCD_DisplayString((u8*)"Result = ");
     eda:	80 e6       	ldi	r24, 0x60	; 96
     edc:	90 e0       	ldi	r25, 0x00	; 0
     ede:	0e 94 5a 12 	call	0x24b4	; 0x24b4 <LCD_DisplayString>
                LCD_DisplayNumber(result);
     ee2:	8e 81       	ldd	r24, Y+6	; 0x06
     ee4:	88 2f       	mov	r24, r24
     ee6:	90 e0       	ldi	r25, 0x00	; 0
     ee8:	a0 e0       	ldi	r26, 0x00	; 0
     eea:	b0 e0       	ldi	r27, 0x00	; 0
     eec:	bc 01       	movw	r22, r24
     eee:	cd 01       	movw	r24, r26
     ef0:	0e 94 a7 12 	call	0x254e	; 0x254e <LCD_DisplayNumber>
     ef4:	40 cf       	rjmp	.-384    	; 0xd76 <Calculator_Run+0x24>

00000ef6 <Calculator_GetRealNumber>:
            }
        }
    }
}

 u8 Calculator_GetRealNumber (Keypad_ButtonType button) {
     ef6:	df 93       	push	r29
     ef8:	cf 93       	push	r28
     efa:	00 d0       	rcall	.+0      	; 0xefc <Calculator_GetRealNumber+0x6>
     efc:	00 d0       	rcall	.+0      	; 0xefe <Calculator_GetRealNumber+0x8>
     efe:	cd b7       	in	r28, 0x3d	; 61
     f00:	de b7       	in	r29, 0x3e	; 62
     f02:	8a 83       	std	Y+2, r24	; 0x02
    u8 num = 0;
     f04:	19 82       	std	Y+1, r1	; 0x01
    switch (button)
     f06:	8a 81       	ldd	r24, Y+2	; 0x02
     f08:	28 2f       	mov	r18, r24
     f0a:	30 e0       	ldi	r19, 0x00	; 0
     f0c:	3c 83       	std	Y+4, r19	; 0x04
     f0e:	2b 83       	std	Y+3, r18	; 0x03
     f10:	8b 81       	ldd	r24, Y+3	; 0x03
     f12:	9c 81       	ldd	r25, Y+4	; 0x04
     f14:	88 30       	cpi	r24, 0x08	; 8
     f16:	91 05       	cpc	r25, r1
     f18:	09 f4       	brne	.+2      	; 0xf1c <Calculator_GetRealNumber+0x26>
     f1a:	4b c0       	rjmp	.+150    	; 0xfb2 <Calculator_GetRealNumber+0xbc>
     f1c:	2b 81       	ldd	r18, Y+3	; 0x03
     f1e:	3c 81       	ldd	r19, Y+4	; 0x04
     f20:	29 30       	cpi	r18, 0x09	; 9
     f22:	31 05       	cpc	r19, r1
     f24:	dc f4       	brge	.+54     	; 0xf5c <Calculator_GetRealNumber+0x66>
     f26:	8b 81       	ldd	r24, Y+3	; 0x03
     f28:	9c 81       	ldd	r25, Y+4	; 0x04
     f2a:	84 30       	cpi	r24, 0x04	; 4
     f2c:	91 05       	cpc	r25, r1
     f2e:	c1 f1       	breq	.+112    	; 0xfa0 <Calculator_GetRealNumber+0xaa>
     f30:	2b 81       	ldd	r18, Y+3	; 0x03
     f32:	3c 81       	ldd	r19, Y+4	; 0x04
     f34:	25 30       	cpi	r18, 0x05	; 5
     f36:	31 05       	cpc	r19, r1
     f38:	34 f4       	brge	.+12     	; 0xf46 <Calculator_GetRealNumber+0x50>
     f3a:	8b 81       	ldd	r24, Y+3	; 0x03
     f3c:	9c 81       	ldd	r25, Y+4	; 0x04
     f3e:	81 30       	cpi	r24, 0x01	; 1
     f40:	91 05       	cpc	r25, r1
     f42:	61 f1       	breq	.+88     	; 0xf9c <Calculator_GetRealNumber+0xa6>
     f44:	47 c0       	rjmp	.+142    	; 0xfd4 <Calculator_GetRealNumber+0xde>
     f46:	2b 81       	ldd	r18, Y+3	; 0x03
     f48:	3c 81       	ldd	r19, Y+4	; 0x04
     f4a:	25 30       	cpi	r18, 0x05	; 5
     f4c:	31 05       	cpc	r19, r1
     f4e:	59 f1       	breq	.+86     	; 0xfa6 <Calculator_GetRealNumber+0xb0>
     f50:	8b 81       	ldd	r24, Y+3	; 0x03
     f52:	9c 81       	ldd	r25, Y+4	; 0x04
     f54:	86 30       	cpi	r24, 0x06	; 6
     f56:	91 05       	cpc	r25, r1
     f58:	49 f1       	breq	.+82     	; 0xfac <Calculator_GetRealNumber+0xb6>
     f5a:	3c c0       	rjmp	.+120    	; 0xfd4 <Calculator_GetRealNumber+0xde>
     f5c:	2b 81       	ldd	r18, Y+3	; 0x03
     f5e:	3c 81       	ldd	r19, Y+4	; 0x04
     f60:	2c 30       	cpi	r18, 0x0C	; 12
     f62:	31 05       	cpc	r19, r1
     f64:	79 f1       	breq	.+94     	; 0xfc4 <Calculator_GetRealNumber+0xce>
     f66:	8b 81       	ldd	r24, Y+3	; 0x03
     f68:	9c 81       	ldd	r25, Y+4	; 0x04
     f6a:	8d 30       	cpi	r24, 0x0D	; 13
     f6c:	91 05       	cpc	r25, r1
     f6e:	5c f4       	brge	.+22     	; 0xf86 <Calculator_GetRealNumber+0x90>
     f70:	2b 81       	ldd	r18, Y+3	; 0x03
     f72:	3c 81       	ldd	r19, Y+4	; 0x04
     f74:	29 30       	cpi	r18, 0x09	; 9
     f76:	31 05       	cpc	r19, r1
     f78:	f9 f0       	breq	.+62     	; 0xfb8 <Calculator_GetRealNumber+0xc2>
     f7a:	8b 81       	ldd	r24, Y+3	; 0x03
     f7c:	9c 81       	ldd	r25, Y+4	; 0x04
     f7e:	8a 30       	cpi	r24, 0x0A	; 10
     f80:	91 05       	cpc	r25, r1
     f82:	e9 f0       	breq	.+58     	; 0xfbe <Calculator_GetRealNumber+0xc8>
     f84:	27 c0       	rjmp	.+78     	; 0xfd4 <Calculator_GetRealNumber+0xde>
     f86:	2b 81       	ldd	r18, Y+3	; 0x03
     f88:	3c 81       	ldd	r19, Y+4	; 0x04
     f8a:	2d 30       	cpi	r18, 0x0D	; 13
     f8c:	31 05       	cpc	r19, r1
     f8e:	e9 f0       	breq	.+58     	; 0xfca <Calculator_GetRealNumber+0xd4>
     f90:	8b 81       	ldd	r24, Y+3	; 0x03
     f92:	9c 81       	ldd	r25, Y+4	; 0x04
     f94:	8e 30       	cpi	r24, 0x0E	; 14
     f96:	91 05       	cpc	r25, r1
     f98:	d9 f0       	breq	.+54     	; 0xfd0 <Calculator_GetRealNumber+0xda>
     f9a:	1c c0       	rjmp	.+56     	; 0xfd4 <Calculator_GetRealNumber+0xde>
    {
    case CALCULATOR_BUTTON_NUM0:
        num = 0;
     f9c:	19 82       	std	Y+1, r1	; 0x01
     f9e:	1a c0       	rjmp	.+52     	; 0xfd4 <Calculator_GetRealNumber+0xde>
        break;
    case CALCULATOR_BUTTON_NUM1:
        num = 1;
     fa0:	81 e0       	ldi	r24, 0x01	; 1
     fa2:	89 83       	std	Y+1, r24	; 0x01
     fa4:	17 c0       	rjmp	.+46     	; 0xfd4 <Calculator_GetRealNumber+0xde>
        break;
    case CALCULATOR_BUTTON_NUM2:
        num = 2;
     fa6:	82 e0       	ldi	r24, 0x02	; 2
     fa8:	89 83       	std	Y+1, r24	; 0x01
     faa:	14 c0       	rjmp	.+40     	; 0xfd4 <Calculator_GetRealNumber+0xde>
        break;
    case CALCULATOR_BUTTON_NUM3:
        num = 3;
     fac:	83 e0       	ldi	r24, 0x03	; 3
     fae:	89 83       	std	Y+1, r24	; 0x01
     fb0:	11 c0       	rjmp	.+34     	; 0xfd4 <Calculator_GetRealNumber+0xde>
        break;
    case CALCULATOR_BUTTON_NUM4:
        num = 4;
     fb2:	84 e0       	ldi	r24, 0x04	; 4
     fb4:	89 83       	std	Y+1, r24	; 0x01
     fb6:	0e c0       	rjmp	.+28     	; 0xfd4 <Calculator_GetRealNumber+0xde>
        break;
    case CALCULATOR_BUTTON_NUM5:
        num = 5;
     fb8:	85 e0       	ldi	r24, 0x05	; 5
     fba:	89 83       	std	Y+1, r24	; 0x01
     fbc:	0b c0       	rjmp	.+22     	; 0xfd4 <Calculator_GetRealNumber+0xde>
        break;
    case CALCULATOR_BUTTON_NUM6:
        num = 6;
     fbe:	86 e0       	ldi	r24, 0x06	; 6
     fc0:	89 83       	std	Y+1, r24	; 0x01
     fc2:	08 c0       	rjmp	.+16     	; 0xfd4 <Calculator_GetRealNumber+0xde>
        break;
    case CALCULATOR_BUTTON_NUM7:
        num = 7;
     fc4:	87 e0       	ldi	r24, 0x07	; 7
     fc6:	89 83       	std	Y+1, r24	; 0x01
     fc8:	05 c0       	rjmp	.+10     	; 0xfd4 <Calculator_GetRealNumber+0xde>
        break;
    case CALCULATOR_BUTTON_NUM8:
        num = 8;
     fca:	88 e0       	ldi	r24, 0x08	; 8
     fcc:	89 83       	std	Y+1, r24	; 0x01
     fce:	02 c0       	rjmp	.+4      	; 0xfd4 <Calculator_GetRealNumber+0xde>
        break;
    case CALCULATOR_BUTTON_NUM9:
        num = 9;
     fd0:	89 e0       	ldi	r24, 0x09	; 9
     fd2:	89 83       	std	Y+1, r24	; 0x01
        break;
    default:
        break;
    }
    return num;
     fd4:	89 81       	ldd	r24, Y+1	; 0x01
}
     fd6:	0f 90       	pop	r0
     fd8:	0f 90       	pop	r0
     fda:	0f 90       	pop	r0
     fdc:	0f 90       	pop	r0
     fde:	cf 91       	pop	r28
     fe0:	df 91       	pop	r29
     fe2:	08 95       	ret

00000fe4 <DIO_FlipPinLevel>:
#include "std_types.h"
#include "macros.h"
#include "DIO.h"

void DIO_FlipPinLevel(DIO_PortType port, DIO_PinType pin) {
     fe4:	df 93       	push	r29
     fe6:	cf 93       	push	r28
     fe8:	00 d0       	rcall	.+0      	; 0xfea <DIO_FlipPinLevel+0x6>
     fea:	00 d0       	rcall	.+0      	; 0xfec <DIO_FlipPinLevel+0x8>
     fec:	cd b7       	in	r28, 0x3d	; 61
     fee:	de b7       	in	r29, 0x3e	; 62
     ff0:	89 83       	std	Y+1, r24	; 0x01
     ff2:	6a 83       	std	Y+2, r22	; 0x02
    switch (port)
     ff4:	89 81       	ldd	r24, Y+1	; 0x01
     ff6:	28 2f       	mov	r18, r24
     ff8:	30 e0       	ldi	r19, 0x00	; 0
     ffa:	3c 83       	std	Y+4, r19	; 0x04
     ffc:	2b 83       	std	Y+3, r18	; 0x03
     ffe:	8b 81       	ldd	r24, Y+3	; 0x03
    1000:	9c 81       	ldd	r25, Y+4	; 0x04
    1002:	81 30       	cpi	r24, 0x01	; 1
    1004:	91 05       	cpc	r25, r1
    1006:	49 f1       	breq	.+82     	; 0x105a <DIO_FlipPinLevel+0x76>
    1008:	2b 81       	ldd	r18, Y+3	; 0x03
    100a:	3c 81       	ldd	r19, Y+4	; 0x04
    100c:	22 30       	cpi	r18, 0x02	; 2
    100e:	31 05       	cpc	r19, r1
    1010:	2c f4       	brge	.+10     	; 0x101c <DIO_FlipPinLevel+0x38>
    1012:	8b 81       	ldd	r24, Y+3	; 0x03
    1014:	9c 81       	ldd	r25, Y+4	; 0x04
    1016:	00 97       	sbiw	r24, 0x00	; 0
    1018:	61 f0       	breq	.+24     	; 0x1032 <DIO_FlipPinLevel+0x4e>
    101a:	5a c0       	rjmp	.+180    	; 0x10d0 <DIO_FlipPinLevel+0xec>
    101c:	2b 81       	ldd	r18, Y+3	; 0x03
    101e:	3c 81       	ldd	r19, Y+4	; 0x04
    1020:	22 30       	cpi	r18, 0x02	; 2
    1022:	31 05       	cpc	r19, r1
    1024:	71 f1       	breq	.+92     	; 0x1082 <DIO_FlipPinLevel+0x9e>
    1026:	8b 81       	ldd	r24, Y+3	; 0x03
    1028:	9c 81       	ldd	r25, Y+4	; 0x04
    102a:	83 30       	cpi	r24, 0x03	; 3
    102c:	91 05       	cpc	r25, r1
    102e:	e9 f1       	breq	.+122    	; 0x10aa <DIO_FlipPinLevel+0xc6>
    1030:	4f c0       	rjmp	.+158    	; 0x10d0 <DIO_FlipPinLevel+0xec>
    {
    case DIO_PORTA:
        TOG_BIT(PORTA, pin);
    1032:	ab e3       	ldi	r26, 0x3B	; 59
    1034:	b0 e0       	ldi	r27, 0x00	; 0
    1036:	eb e3       	ldi	r30, 0x3B	; 59
    1038:	f0 e0       	ldi	r31, 0x00	; 0
    103a:	80 81       	ld	r24, Z
    103c:	48 2f       	mov	r20, r24
    103e:	8a 81       	ldd	r24, Y+2	; 0x02
    1040:	28 2f       	mov	r18, r24
    1042:	30 e0       	ldi	r19, 0x00	; 0
    1044:	81 e0       	ldi	r24, 0x01	; 1
    1046:	90 e0       	ldi	r25, 0x00	; 0
    1048:	02 2e       	mov	r0, r18
    104a:	02 c0       	rjmp	.+4      	; 0x1050 <DIO_FlipPinLevel+0x6c>
    104c:	88 0f       	add	r24, r24
    104e:	99 1f       	adc	r25, r25
    1050:	0a 94       	dec	r0
    1052:	e2 f7       	brpl	.-8      	; 0x104c <DIO_FlipPinLevel+0x68>
    1054:	84 27       	eor	r24, r20
    1056:	8c 93       	st	X, r24
    1058:	3b c0       	rjmp	.+118    	; 0x10d0 <DIO_FlipPinLevel+0xec>
        break;
    case DIO_PORTB:
        TOG_BIT(PORTB, pin);
    105a:	a8 e3       	ldi	r26, 0x38	; 56
    105c:	b0 e0       	ldi	r27, 0x00	; 0
    105e:	e8 e3       	ldi	r30, 0x38	; 56
    1060:	f0 e0       	ldi	r31, 0x00	; 0
    1062:	80 81       	ld	r24, Z
    1064:	48 2f       	mov	r20, r24
    1066:	8a 81       	ldd	r24, Y+2	; 0x02
    1068:	28 2f       	mov	r18, r24
    106a:	30 e0       	ldi	r19, 0x00	; 0
    106c:	81 e0       	ldi	r24, 0x01	; 1
    106e:	90 e0       	ldi	r25, 0x00	; 0
    1070:	02 2e       	mov	r0, r18
    1072:	02 c0       	rjmp	.+4      	; 0x1078 <DIO_FlipPinLevel+0x94>
    1074:	88 0f       	add	r24, r24
    1076:	99 1f       	adc	r25, r25
    1078:	0a 94       	dec	r0
    107a:	e2 f7       	brpl	.-8      	; 0x1074 <DIO_FlipPinLevel+0x90>
    107c:	84 27       	eor	r24, r20
    107e:	8c 93       	st	X, r24
    1080:	27 c0       	rjmp	.+78     	; 0x10d0 <DIO_FlipPinLevel+0xec>
        break;
    case DIO_PORTC:
        TOG_BIT(PORTC, pin);
    1082:	a5 e3       	ldi	r26, 0x35	; 53
    1084:	b0 e0       	ldi	r27, 0x00	; 0
    1086:	e5 e3       	ldi	r30, 0x35	; 53
    1088:	f0 e0       	ldi	r31, 0x00	; 0
    108a:	80 81       	ld	r24, Z
    108c:	48 2f       	mov	r20, r24
    108e:	8a 81       	ldd	r24, Y+2	; 0x02
    1090:	28 2f       	mov	r18, r24
    1092:	30 e0       	ldi	r19, 0x00	; 0
    1094:	81 e0       	ldi	r24, 0x01	; 1
    1096:	90 e0       	ldi	r25, 0x00	; 0
    1098:	02 2e       	mov	r0, r18
    109a:	02 c0       	rjmp	.+4      	; 0x10a0 <DIO_FlipPinLevel+0xbc>
    109c:	88 0f       	add	r24, r24
    109e:	99 1f       	adc	r25, r25
    10a0:	0a 94       	dec	r0
    10a2:	e2 f7       	brpl	.-8      	; 0x109c <DIO_FlipPinLevel+0xb8>
    10a4:	84 27       	eor	r24, r20
    10a6:	8c 93       	st	X, r24
    10a8:	13 c0       	rjmp	.+38     	; 0x10d0 <DIO_FlipPinLevel+0xec>
        break;
    case DIO_PORTD:
        TOG_BIT(PORTD, pin);
    10aa:	a2 e3       	ldi	r26, 0x32	; 50
    10ac:	b0 e0       	ldi	r27, 0x00	; 0
    10ae:	e2 e3       	ldi	r30, 0x32	; 50
    10b0:	f0 e0       	ldi	r31, 0x00	; 0
    10b2:	80 81       	ld	r24, Z
    10b4:	48 2f       	mov	r20, r24
    10b6:	8a 81       	ldd	r24, Y+2	; 0x02
    10b8:	28 2f       	mov	r18, r24
    10ba:	30 e0       	ldi	r19, 0x00	; 0
    10bc:	81 e0       	ldi	r24, 0x01	; 1
    10be:	90 e0       	ldi	r25, 0x00	; 0
    10c0:	02 2e       	mov	r0, r18
    10c2:	02 c0       	rjmp	.+4      	; 0x10c8 <DIO_FlipPinLevel+0xe4>
    10c4:	88 0f       	add	r24, r24
    10c6:	99 1f       	adc	r25, r25
    10c8:	0a 94       	dec	r0
    10ca:	e2 f7       	brpl	.-8      	; 0x10c4 <DIO_FlipPinLevel+0xe0>
    10cc:	84 27       	eor	r24, r20
    10ce:	8c 93       	st	X, r24
        break;
    default:
        break;
    }
}
    10d0:	0f 90       	pop	r0
    10d2:	0f 90       	pop	r0
    10d4:	0f 90       	pop	r0
    10d6:	0f 90       	pop	r0
    10d8:	cf 91       	pop	r28
    10da:	df 91       	pop	r29
    10dc:	08 95       	ret

000010de <DIO_SetPinMode>:
void DIO_SetPinMode(DIO_PortType port, DIO_PinType pin, DIO_ModeType mode) {
    10de:	df 93       	push	r29
    10e0:	cf 93       	push	r28
    10e2:	cd b7       	in	r28, 0x3d	; 61
    10e4:	de b7       	in	r29, 0x3e	; 62
    10e6:	29 97       	sbiw	r28, 0x09	; 9
    10e8:	0f b6       	in	r0, 0x3f	; 63
    10ea:	f8 94       	cli
    10ec:	de bf       	out	0x3e, r29	; 62
    10ee:	0f be       	out	0x3f, r0	; 63
    10f0:	cd bf       	out	0x3d, r28	; 61
    10f2:	89 83       	std	Y+1, r24	; 0x01
    10f4:	6a 83       	std	Y+2, r22	; 0x02
    10f6:	4b 83       	std	Y+3, r20	; 0x03
    if (mode == DIO_INPUT_FLOATING)
    10f8:	8b 81       	ldd	r24, Y+3	; 0x03
    10fa:	88 23       	and	r24, r24
    10fc:	09 f0       	breq	.+2      	; 0x1100 <DIO_SetPinMode+0x22>
    10fe:	c2 c0       	rjmp	.+388    	; 0x1284 <DIO_SetPinMode+0x1a6>
    {
        switch (port)
    1100:	89 81       	ldd	r24, Y+1	; 0x01
    1102:	28 2f       	mov	r18, r24
    1104:	30 e0       	ldi	r19, 0x00	; 0
    1106:	39 87       	std	Y+9, r19	; 0x09
    1108:	28 87       	std	Y+8, r18	; 0x08
    110a:	88 85       	ldd	r24, Y+8	; 0x08
    110c:	99 85       	ldd	r25, Y+9	; 0x09
    110e:	81 30       	cpi	r24, 0x01	; 1
    1110:	91 05       	cpc	r25, r1
    1112:	09 f4       	brne	.+2      	; 0x1116 <DIO_SetPinMode+0x38>
    1114:	3f c0       	rjmp	.+126    	; 0x1194 <DIO_SetPinMode+0xb6>
    1116:	28 85       	ldd	r18, Y+8	; 0x08
    1118:	39 85       	ldd	r19, Y+9	; 0x09
    111a:	22 30       	cpi	r18, 0x02	; 2
    111c:	31 05       	cpc	r19, r1
    111e:	2c f4       	brge	.+10     	; 0x112a <DIO_SetPinMode+0x4c>
    1120:	88 85       	ldd	r24, Y+8	; 0x08
    1122:	99 85       	ldd	r25, Y+9	; 0x09
    1124:	00 97       	sbiw	r24, 0x00	; 0
    1126:	71 f0       	breq	.+28     	; 0x1144 <DIO_SetPinMode+0x66>
    1128:	e1 c1       	rjmp	.+962    	; 0x14ec <DIO_SetPinMode+0x40e>
    112a:	28 85       	ldd	r18, Y+8	; 0x08
    112c:	39 85       	ldd	r19, Y+9	; 0x09
    112e:	22 30       	cpi	r18, 0x02	; 2
    1130:	31 05       	cpc	r19, r1
    1132:	09 f4       	brne	.+2      	; 0x1136 <DIO_SetPinMode+0x58>
    1134:	57 c0       	rjmp	.+174    	; 0x11e4 <DIO_SetPinMode+0x106>
    1136:	88 85       	ldd	r24, Y+8	; 0x08
    1138:	99 85       	ldd	r25, Y+9	; 0x09
    113a:	83 30       	cpi	r24, 0x03	; 3
    113c:	91 05       	cpc	r25, r1
    113e:	09 f4       	brne	.+2      	; 0x1142 <DIO_SetPinMode+0x64>
    1140:	79 c0       	rjmp	.+242    	; 0x1234 <DIO_SetPinMode+0x156>
    1142:	d4 c1       	rjmp	.+936    	; 0x14ec <DIO_SetPinMode+0x40e>
        {
        case DIO_PORTA:
            CLR_BIT(DDRA, pin);
    1144:	aa e3       	ldi	r26, 0x3A	; 58
    1146:	b0 e0       	ldi	r27, 0x00	; 0
    1148:	ea e3       	ldi	r30, 0x3A	; 58
    114a:	f0 e0       	ldi	r31, 0x00	; 0
    114c:	80 81       	ld	r24, Z
    114e:	48 2f       	mov	r20, r24
    1150:	8a 81       	ldd	r24, Y+2	; 0x02
    1152:	28 2f       	mov	r18, r24
    1154:	30 e0       	ldi	r19, 0x00	; 0
    1156:	81 e0       	ldi	r24, 0x01	; 1
    1158:	90 e0       	ldi	r25, 0x00	; 0
    115a:	02 c0       	rjmp	.+4      	; 0x1160 <DIO_SetPinMode+0x82>
    115c:	88 0f       	add	r24, r24
    115e:	99 1f       	adc	r25, r25
    1160:	2a 95       	dec	r18
    1162:	e2 f7       	brpl	.-8      	; 0x115c <DIO_SetPinMode+0x7e>
    1164:	80 95       	com	r24
    1166:	84 23       	and	r24, r20
    1168:	8c 93       	st	X, r24
            CLR_BIT(PORTA, pin);
    116a:	ab e3       	ldi	r26, 0x3B	; 59
    116c:	b0 e0       	ldi	r27, 0x00	; 0
    116e:	eb e3       	ldi	r30, 0x3B	; 59
    1170:	f0 e0       	ldi	r31, 0x00	; 0
    1172:	80 81       	ld	r24, Z
    1174:	48 2f       	mov	r20, r24
    1176:	8a 81       	ldd	r24, Y+2	; 0x02
    1178:	28 2f       	mov	r18, r24
    117a:	30 e0       	ldi	r19, 0x00	; 0
    117c:	81 e0       	ldi	r24, 0x01	; 1
    117e:	90 e0       	ldi	r25, 0x00	; 0
    1180:	02 2e       	mov	r0, r18
    1182:	02 c0       	rjmp	.+4      	; 0x1188 <DIO_SetPinMode+0xaa>
    1184:	88 0f       	add	r24, r24
    1186:	99 1f       	adc	r25, r25
    1188:	0a 94       	dec	r0
    118a:	e2 f7       	brpl	.-8      	; 0x1184 <DIO_SetPinMode+0xa6>
    118c:	80 95       	com	r24
    118e:	84 23       	and	r24, r20
    1190:	8c 93       	st	X, r24
    1192:	ac c1       	rjmp	.+856    	; 0x14ec <DIO_SetPinMode+0x40e>
            break;
        case DIO_PORTB:
            CLR_BIT(DDRB, pin);
    1194:	a7 e3       	ldi	r26, 0x37	; 55
    1196:	b0 e0       	ldi	r27, 0x00	; 0
    1198:	e7 e3       	ldi	r30, 0x37	; 55
    119a:	f0 e0       	ldi	r31, 0x00	; 0
    119c:	80 81       	ld	r24, Z
    119e:	48 2f       	mov	r20, r24
    11a0:	8a 81       	ldd	r24, Y+2	; 0x02
    11a2:	28 2f       	mov	r18, r24
    11a4:	30 e0       	ldi	r19, 0x00	; 0
    11a6:	81 e0       	ldi	r24, 0x01	; 1
    11a8:	90 e0       	ldi	r25, 0x00	; 0
    11aa:	02 c0       	rjmp	.+4      	; 0x11b0 <DIO_SetPinMode+0xd2>
    11ac:	88 0f       	add	r24, r24
    11ae:	99 1f       	adc	r25, r25
    11b0:	2a 95       	dec	r18
    11b2:	e2 f7       	brpl	.-8      	; 0x11ac <DIO_SetPinMode+0xce>
    11b4:	80 95       	com	r24
    11b6:	84 23       	and	r24, r20
    11b8:	8c 93       	st	X, r24
            CLR_BIT(PORTB, pin);
    11ba:	a8 e3       	ldi	r26, 0x38	; 56
    11bc:	b0 e0       	ldi	r27, 0x00	; 0
    11be:	e8 e3       	ldi	r30, 0x38	; 56
    11c0:	f0 e0       	ldi	r31, 0x00	; 0
    11c2:	80 81       	ld	r24, Z
    11c4:	48 2f       	mov	r20, r24
    11c6:	8a 81       	ldd	r24, Y+2	; 0x02
    11c8:	28 2f       	mov	r18, r24
    11ca:	30 e0       	ldi	r19, 0x00	; 0
    11cc:	81 e0       	ldi	r24, 0x01	; 1
    11ce:	90 e0       	ldi	r25, 0x00	; 0
    11d0:	02 2e       	mov	r0, r18
    11d2:	02 c0       	rjmp	.+4      	; 0x11d8 <DIO_SetPinMode+0xfa>
    11d4:	88 0f       	add	r24, r24
    11d6:	99 1f       	adc	r25, r25
    11d8:	0a 94       	dec	r0
    11da:	e2 f7       	brpl	.-8      	; 0x11d4 <DIO_SetPinMode+0xf6>
    11dc:	80 95       	com	r24
    11de:	84 23       	and	r24, r20
    11e0:	8c 93       	st	X, r24
    11e2:	84 c1       	rjmp	.+776    	; 0x14ec <DIO_SetPinMode+0x40e>
            break;
        case DIO_PORTC:
            CLR_BIT(DDRC, pin);
    11e4:	a4 e3       	ldi	r26, 0x34	; 52
    11e6:	b0 e0       	ldi	r27, 0x00	; 0
    11e8:	e4 e3       	ldi	r30, 0x34	; 52
    11ea:	f0 e0       	ldi	r31, 0x00	; 0
    11ec:	80 81       	ld	r24, Z
    11ee:	48 2f       	mov	r20, r24
    11f0:	8a 81       	ldd	r24, Y+2	; 0x02
    11f2:	28 2f       	mov	r18, r24
    11f4:	30 e0       	ldi	r19, 0x00	; 0
    11f6:	81 e0       	ldi	r24, 0x01	; 1
    11f8:	90 e0       	ldi	r25, 0x00	; 0
    11fa:	02 c0       	rjmp	.+4      	; 0x1200 <DIO_SetPinMode+0x122>
    11fc:	88 0f       	add	r24, r24
    11fe:	99 1f       	adc	r25, r25
    1200:	2a 95       	dec	r18
    1202:	e2 f7       	brpl	.-8      	; 0x11fc <DIO_SetPinMode+0x11e>
    1204:	80 95       	com	r24
    1206:	84 23       	and	r24, r20
    1208:	8c 93       	st	X, r24
            CLR_BIT(PORTC, pin);
    120a:	a5 e3       	ldi	r26, 0x35	; 53
    120c:	b0 e0       	ldi	r27, 0x00	; 0
    120e:	e5 e3       	ldi	r30, 0x35	; 53
    1210:	f0 e0       	ldi	r31, 0x00	; 0
    1212:	80 81       	ld	r24, Z
    1214:	48 2f       	mov	r20, r24
    1216:	8a 81       	ldd	r24, Y+2	; 0x02
    1218:	28 2f       	mov	r18, r24
    121a:	30 e0       	ldi	r19, 0x00	; 0
    121c:	81 e0       	ldi	r24, 0x01	; 1
    121e:	90 e0       	ldi	r25, 0x00	; 0
    1220:	02 2e       	mov	r0, r18
    1222:	02 c0       	rjmp	.+4      	; 0x1228 <DIO_SetPinMode+0x14a>
    1224:	88 0f       	add	r24, r24
    1226:	99 1f       	adc	r25, r25
    1228:	0a 94       	dec	r0
    122a:	e2 f7       	brpl	.-8      	; 0x1224 <DIO_SetPinMode+0x146>
    122c:	80 95       	com	r24
    122e:	84 23       	and	r24, r20
    1230:	8c 93       	st	X, r24
    1232:	5c c1       	rjmp	.+696    	; 0x14ec <DIO_SetPinMode+0x40e>
            break;
        case DIO_PORTD:
            CLR_BIT(DDRD, pin);
    1234:	a1 e3       	ldi	r26, 0x31	; 49
    1236:	b0 e0       	ldi	r27, 0x00	; 0
    1238:	e1 e3       	ldi	r30, 0x31	; 49
    123a:	f0 e0       	ldi	r31, 0x00	; 0
    123c:	80 81       	ld	r24, Z
    123e:	48 2f       	mov	r20, r24
    1240:	8a 81       	ldd	r24, Y+2	; 0x02
    1242:	28 2f       	mov	r18, r24
    1244:	30 e0       	ldi	r19, 0x00	; 0
    1246:	81 e0       	ldi	r24, 0x01	; 1
    1248:	90 e0       	ldi	r25, 0x00	; 0
    124a:	02 c0       	rjmp	.+4      	; 0x1250 <DIO_SetPinMode+0x172>
    124c:	88 0f       	add	r24, r24
    124e:	99 1f       	adc	r25, r25
    1250:	2a 95       	dec	r18
    1252:	e2 f7       	brpl	.-8      	; 0x124c <DIO_SetPinMode+0x16e>
    1254:	80 95       	com	r24
    1256:	84 23       	and	r24, r20
    1258:	8c 93       	st	X, r24
            CLR_BIT(PORTD, pin);
    125a:	a2 e3       	ldi	r26, 0x32	; 50
    125c:	b0 e0       	ldi	r27, 0x00	; 0
    125e:	e2 e3       	ldi	r30, 0x32	; 50
    1260:	f0 e0       	ldi	r31, 0x00	; 0
    1262:	80 81       	ld	r24, Z
    1264:	48 2f       	mov	r20, r24
    1266:	8a 81       	ldd	r24, Y+2	; 0x02
    1268:	28 2f       	mov	r18, r24
    126a:	30 e0       	ldi	r19, 0x00	; 0
    126c:	81 e0       	ldi	r24, 0x01	; 1
    126e:	90 e0       	ldi	r25, 0x00	; 0
    1270:	02 2e       	mov	r0, r18
    1272:	02 c0       	rjmp	.+4      	; 0x1278 <DIO_SetPinMode+0x19a>
    1274:	88 0f       	add	r24, r24
    1276:	99 1f       	adc	r25, r25
    1278:	0a 94       	dec	r0
    127a:	e2 f7       	brpl	.-8      	; 0x1274 <DIO_SetPinMode+0x196>
    127c:	80 95       	com	r24
    127e:	84 23       	and	r24, r20
    1280:	8c 93       	st	X, r24
    1282:	34 c1       	rjmp	.+616    	; 0x14ec <DIO_SetPinMode+0x40e>
            break;
        default:
            break;
        }
    }
    else if (mode == DIO_INPUT_PULLUP)
    1284:	8b 81       	ldd	r24, Y+3	; 0x03
    1286:	81 30       	cpi	r24, 0x01	; 1
    1288:	09 f0       	breq	.+2      	; 0x128c <DIO_SetPinMode+0x1ae>
    128a:	be c0       	rjmp	.+380    	; 0x1408 <DIO_SetPinMode+0x32a>
    {
        switch (port)
    128c:	89 81       	ldd	r24, Y+1	; 0x01
    128e:	28 2f       	mov	r18, r24
    1290:	30 e0       	ldi	r19, 0x00	; 0
    1292:	3f 83       	std	Y+7, r19	; 0x07
    1294:	2e 83       	std	Y+6, r18	; 0x06
    1296:	8e 81       	ldd	r24, Y+6	; 0x06
    1298:	9f 81       	ldd	r25, Y+7	; 0x07
    129a:	81 30       	cpi	r24, 0x01	; 1
    129c:	91 05       	cpc	r25, r1
    129e:	09 f4       	brne	.+2      	; 0x12a2 <DIO_SetPinMode+0x1c4>
    12a0:	3e c0       	rjmp	.+124    	; 0x131e <DIO_SetPinMode+0x240>
    12a2:	2e 81       	ldd	r18, Y+6	; 0x06
    12a4:	3f 81       	ldd	r19, Y+7	; 0x07
    12a6:	22 30       	cpi	r18, 0x02	; 2
    12a8:	31 05       	cpc	r19, r1
    12aa:	2c f4       	brge	.+10     	; 0x12b6 <DIO_SetPinMode+0x1d8>
    12ac:	8e 81       	ldd	r24, Y+6	; 0x06
    12ae:	9f 81       	ldd	r25, Y+7	; 0x07
    12b0:	00 97       	sbiw	r24, 0x00	; 0
    12b2:	71 f0       	breq	.+28     	; 0x12d0 <DIO_SetPinMode+0x1f2>
    12b4:	1b c1       	rjmp	.+566    	; 0x14ec <DIO_SetPinMode+0x40e>
    12b6:	2e 81       	ldd	r18, Y+6	; 0x06
    12b8:	3f 81       	ldd	r19, Y+7	; 0x07
    12ba:	22 30       	cpi	r18, 0x02	; 2
    12bc:	31 05       	cpc	r19, r1
    12be:	09 f4       	brne	.+2      	; 0x12c2 <DIO_SetPinMode+0x1e4>
    12c0:	55 c0       	rjmp	.+170    	; 0x136c <DIO_SetPinMode+0x28e>
    12c2:	8e 81       	ldd	r24, Y+6	; 0x06
    12c4:	9f 81       	ldd	r25, Y+7	; 0x07
    12c6:	83 30       	cpi	r24, 0x03	; 3
    12c8:	91 05       	cpc	r25, r1
    12ca:	09 f4       	brne	.+2      	; 0x12ce <DIO_SetPinMode+0x1f0>
    12cc:	76 c0       	rjmp	.+236    	; 0x13ba <DIO_SetPinMode+0x2dc>
    12ce:	0e c1       	rjmp	.+540    	; 0x14ec <DIO_SetPinMode+0x40e>
        {
        case DIO_PORTA:
            CLR_BIT(DDRA, pin);
    12d0:	aa e3       	ldi	r26, 0x3A	; 58
    12d2:	b0 e0       	ldi	r27, 0x00	; 0
    12d4:	ea e3       	ldi	r30, 0x3A	; 58
    12d6:	f0 e0       	ldi	r31, 0x00	; 0
    12d8:	80 81       	ld	r24, Z
    12da:	48 2f       	mov	r20, r24
    12dc:	8a 81       	ldd	r24, Y+2	; 0x02
    12de:	28 2f       	mov	r18, r24
    12e0:	30 e0       	ldi	r19, 0x00	; 0
    12e2:	81 e0       	ldi	r24, 0x01	; 1
    12e4:	90 e0       	ldi	r25, 0x00	; 0
    12e6:	02 c0       	rjmp	.+4      	; 0x12ec <DIO_SetPinMode+0x20e>
    12e8:	88 0f       	add	r24, r24
    12ea:	99 1f       	adc	r25, r25
    12ec:	2a 95       	dec	r18
    12ee:	e2 f7       	brpl	.-8      	; 0x12e8 <DIO_SetPinMode+0x20a>
    12f0:	80 95       	com	r24
    12f2:	84 23       	and	r24, r20
    12f4:	8c 93       	st	X, r24
            SET_BIT(PORTA, pin);
    12f6:	ab e3       	ldi	r26, 0x3B	; 59
    12f8:	b0 e0       	ldi	r27, 0x00	; 0
    12fa:	eb e3       	ldi	r30, 0x3B	; 59
    12fc:	f0 e0       	ldi	r31, 0x00	; 0
    12fe:	80 81       	ld	r24, Z
    1300:	48 2f       	mov	r20, r24
    1302:	8a 81       	ldd	r24, Y+2	; 0x02
    1304:	28 2f       	mov	r18, r24
    1306:	30 e0       	ldi	r19, 0x00	; 0
    1308:	81 e0       	ldi	r24, 0x01	; 1
    130a:	90 e0       	ldi	r25, 0x00	; 0
    130c:	02 2e       	mov	r0, r18
    130e:	02 c0       	rjmp	.+4      	; 0x1314 <DIO_SetPinMode+0x236>
    1310:	88 0f       	add	r24, r24
    1312:	99 1f       	adc	r25, r25
    1314:	0a 94       	dec	r0
    1316:	e2 f7       	brpl	.-8      	; 0x1310 <DIO_SetPinMode+0x232>
    1318:	84 2b       	or	r24, r20
    131a:	8c 93       	st	X, r24
    131c:	e7 c0       	rjmp	.+462    	; 0x14ec <DIO_SetPinMode+0x40e>
            break;
        case DIO_PORTB:
            CLR_BIT(DDRB, pin);
    131e:	a7 e3       	ldi	r26, 0x37	; 55
    1320:	b0 e0       	ldi	r27, 0x00	; 0
    1322:	e7 e3       	ldi	r30, 0x37	; 55
    1324:	f0 e0       	ldi	r31, 0x00	; 0
    1326:	80 81       	ld	r24, Z
    1328:	48 2f       	mov	r20, r24
    132a:	8a 81       	ldd	r24, Y+2	; 0x02
    132c:	28 2f       	mov	r18, r24
    132e:	30 e0       	ldi	r19, 0x00	; 0
    1330:	81 e0       	ldi	r24, 0x01	; 1
    1332:	90 e0       	ldi	r25, 0x00	; 0
    1334:	02 c0       	rjmp	.+4      	; 0x133a <DIO_SetPinMode+0x25c>
    1336:	88 0f       	add	r24, r24
    1338:	99 1f       	adc	r25, r25
    133a:	2a 95       	dec	r18
    133c:	e2 f7       	brpl	.-8      	; 0x1336 <DIO_SetPinMode+0x258>
    133e:	80 95       	com	r24
    1340:	84 23       	and	r24, r20
    1342:	8c 93       	st	X, r24
            SET_BIT(PORTB, pin);
    1344:	a8 e3       	ldi	r26, 0x38	; 56
    1346:	b0 e0       	ldi	r27, 0x00	; 0
    1348:	e8 e3       	ldi	r30, 0x38	; 56
    134a:	f0 e0       	ldi	r31, 0x00	; 0
    134c:	80 81       	ld	r24, Z
    134e:	48 2f       	mov	r20, r24
    1350:	8a 81       	ldd	r24, Y+2	; 0x02
    1352:	28 2f       	mov	r18, r24
    1354:	30 e0       	ldi	r19, 0x00	; 0
    1356:	81 e0       	ldi	r24, 0x01	; 1
    1358:	90 e0       	ldi	r25, 0x00	; 0
    135a:	02 2e       	mov	r0, r18
    135c:	02 c0       	rjmp	.+4      	; 0x1362 <DIO_SetPinMode+0x284>
    135e:	88 0f       	add	r24, r24
    1360:	99 1f       	adc	r25, r25
    1362:	0a 94       	dec	r0
    1364:	e2 f7       	brpl	.-8      	; 0x135e <DIO_SetPinMode+0x280>
    1366:	84 2b       	or	r24, r20
    1368:	8c 93       	st	X, r24
    136a:	c0 c0       	rjmp	.+384    	; 0x14ec <DIO_SetPinMode+0x40e>
            break;
        case DIO_PORTC:
            CLR_BIT(DDRC, pin);
    136c:	a4 e3       	ldi	r26, 0x34	; 52
    136e:	b0 e0       	ldi	r27, 0x00	; 0
    1370:	e4 e3       	ldi	r30, 0x34	; 52
    1372:	f0 e0       	ldi	r31, 0x00	; 0
    1374:	80 81       	ld	r24, Z
    1376:	48 2f       	mov	r20, r24
    1378:	8a 81       	ldd	r24, Y+2	; 0x02
    137a:	28 2f       	mov	r18, r24
    137c:	30 e0       	ldi	r19, 0x00	; 0
    137e:	81 e0       	ldi	r24, 0x01	; 1
    1380:	90 e0       	ldi	r25, 0x00	; 0
    1382:	02 c0       	rjmp	.+4      	; 0x1388 <DIO_SetPinMode+0x2aa>
    1384:	88 0f       	add	r24, r24
    1386:	99 1f       	adc	r25, r25
    1388:	2a 95       	dec	r18
    138a:	e2 f7       	brpl	.-8      	; 0x1384 <DIO_SetPinMode+0x2a6>
    138c:	80 95       	com	r24
    138e:	84 23       	and	r24, r20
    1390:	8c 93       	st	X, r24
            SET_BIT(PORTC, pin);
    1392:	a5 e3       	ldi	r26, 0x35	; 53
    1394:	b0 e0       	ldi	r27, 0x00	; 0
    1396:	e5 e3       	ldi	r30, 0x35	; 53
    1398:	f0 e0       	ldi	r31, 0x00	; 0
    139a:	80 81       	ld	r24, Z
    139c:	48 2f       	mov	r20, r24
    139e:	8a 81       	ldd	r24, Y+2	; 0x02
    13a0:	28 2f       	mov	r18, r24
    13a2:	30 e0       	ldi	r19, 0x00	; 0
    13a4:	81 e0       	ldi	r24, 0x01	; 1
    13a6:	90 e0       	ldi	r25, 0x00	; 0
    13a8:	02 2e       	mov	r0, r18
    13aa:	02 c0       	rjmp	.+4      	; 0x13b0 <DIO_SetPinMode+0x2d2>
    13ac:	88 0f       	add	r24, r24
    13ae:	99 1f       	adc	r25, r25
    13b0:	0a 94       	dec	r0
    13b2:	e2 f7       	brpl	.-8      	; 0x13ac <DIO_SetPinMode+0x2ce>
    13b4:	84 2b       	or	r24, r20
    13b6:	8c 93       	st	X, r24
    13b8:	99 c0       	rjmp	.+306    	; 0x14ec <DIO_SetPinMode+0x40e>
            break;
        case DIO_PORTD:
            CLR_BIT(DDRD, pin);
    13ba:	a1 e3       	ldi	r26, 0x31	; 49
    13bc:	b0 e0       	ldi	r27, 0x00	; 0
    13be:	e1 e3       	ldi	r30, 0x31	; 49
    13c0:	f0 e0       	ldi	r31, 0x00	; 0
    13c2:	80 81       	ld	r24, Z
    13c4:	48 2f       	mov	r20, r24
    13c6:	8a 81       	ldd	r24, Y+2	; 0x02
    13c8:	28 2f       	mov	r18, r24
    13ca:	30 e0       	ldi	r19, 0x00	; 0
    13cc:	81 e0       	ldi	r24, 0x01	; 1
    13ce:	90 e0       	ldi	r25, 0x00	; 0
    13d0:	02 c0       	rjmp	.+4      	; 0x13d6 <DIO_SetPinMode+0x2f8>
    13d2:	88 0f       	add	r24, r24
    13d4:	99 1f       	adc	r25, r25
    13d6:	2a 95       	dec	r18
    13d8:	e2 f7       	brpl	.-8      	; 0x13d2 <DIO_SetPinMode+0x2f4>
    13da:	80 95       	com	r24
    13dc:	84 23       	and	r24, r20
    13de:	8c 93       	st	X, r24
            SET_BIT(PORTD, pin);
    13e0:	a2 e3       	ldi	r26, 0x32	; 50
    13e2:	b0 e0       	ldi	r27, 0x00	; 0
    13e4:	e2 e3       	ldi	r30, 0x32	; 50
    13e6:	f0 e0       	ldi	r31, 0x00	; 0
    13e8:	80 81       	ld	r24, Z
    13ea:	48 2f       	mov	r20, r24
    13ec:	8a 81       	ldd	r24, Y+2	; 0x02
    13ee:	28 2f       	mov	r18, r24
    13f0:	30 e0       	ldi	r19, 0x00	; 0
    13f2:	81 e0       	ldi	r24, 0x01	; 1
    13f4:	90 e0       	ldi	r25, 0x00	; 0
    13f6:	02 2e       	mov	r0, r18
    13f8:	02 c0       	rjmp	.+4      	; 0x13fe <DIO_SetPinMode+0x320>
    13fa:	88 0f       	add	r24, r24
    13fc:	99 1f       	adc	r25, r25
    13fe:	0a 94       	dec	r0
    1400:	e2 f7       	brpl	.-8      	; 0x13fa <DIO_SetPinMode+0x31c>
    1402:	84 2b       	or	r24, r20
    1404:	8c 93       	st	X, r24
    1406:	72 c0       	rjmp	.+228    	; 0x14ec <DIO_SetPinMode+0x40e>
            break;
        default:
            break;
        }
    }
    else if (mode == DIO_OUTPUT)
    1408:	8b 81       	ldd	r24, Y+3	; 0x03
    140a:	82 30       	cpi	r24, 0x02	; 2
    140c:	09 f0       	breq	.+2      	; 0x1410 <DIO_SetPinMode+0x332>
    140e:	6e c0       	rjmp	.+220    	; 0x14ec <DIO_SetPinMode+0x40e>
    {
        switch (port)
    1410:	89 81       	ldd	r24, Y+1	; 0x01
    1412:	28 2f       	mov	r18, r24
    1414:	30 e0       	ldi	r19, 0x00	; 0
    1416:	3d 83       	std	Y+5, r19	; 0x05
    1418:	2c 83       	std	Y+4, r18	; 0x04
    141a:	8c 81       	ldd	r24, Y+4	; 0x04
    141c:	9d 81       	ldd	r25, Y+5	; 0x05
    141e:	81 30       	cpi	r24, 0x01	; 1
    1420:	91 05       	cpc	r25, r1
    1422:	49 f1       	breq	.+82     	; 0x1476 <DIO_SetPinMode+0x398>
    1424:	2c 81       	ldd	r18, Y+4	; 0x04
    1426:	3d 81       	ldd	r19, Y+5	; 0x05
    1428:	22 30       	cpi	r18, 0x02	; 2
    142a:	31 05       	cpc	r19, r1
    142c:	2c f4       	brge	.+10     	; 0x1438 <DIO_SetPinMode+0x35a>
    142e:	8c 81       	ldd	r24, Y+4	; 0x04
    1430:	9d 81       	ldd	r25, Y+5	; 0x05
    1432:	00 97       	sbiw	r24, 0x00	; 0
    1434:	61 f0       	breq	.+24     	; 0x144e <DIO_SetPinMode+0x370>
    1436:	5a c0       	rjmp	.+180    	; 0x14ec <DIO_SetPinMode+0x40e>
    1438:	2c 81       	ldd	r18, Y+4	; 0x04
    143a:	3d 81       	ldd	r19, Y+5	; 0x05
    143c:	22 30       	cpi	r18, 0x02	; 2
    143e:	31 05       	cpc	r19, r1
    1440:	71 f1       	breq	.+92     	; 0x149e <DIO_SetPinMode+0x3c0>
    1442:	8c 81       	ldd	r24, Y+4	; 0x04
    1444:	9d 81       	ldd	r25, Y+5	; 0x05
    1446:	83 30       	cpi	r24, 0x03	; 3
    1448:	91 05       	cpc	r25, r1
    144a:	e9 f1       	breq	.+122    	; 0x14c6 <DIO_SetPinMode+0x3e8>
    144c:	4f c0       	rjmp	.+158    	; 0x14ec <DIO_SetPinMode+0x40e>
        {
        case DIO_PORTA:
            SET_BIT(DDRA, pin);
    144e:	aa e3       	ldi	r26, 0x3A	; 58
    1450:	b0 e0       	ldi	r27, 0x00	; 0
    1452:	ea e3       	ldi	r30, 0x3A	; 58
    1454:	f0 e0       	ldi	r31, 0x00	; 0
    1456:	80 81       	ld	r24, Z
    1458:	48 2f       	mov	r20, r24
    145a:	8a 81       	ldd	r24, Y+2	; 0x02
    145c:	28 2f       	mov	r18, r24
    145e:	30 e0       	ldi	r19, 0x00	; 0
    1460:	81 e0       	ldi	r24, 0x01	; 1
    1462:	90 e0       	ldi	r25, 0x00	; 0
    1464:	02 2e       	mov	r0, r18
    1466:	02 c0       	rjmp	.+4      	; 0x146c <DIO_SetPinMode+0x38e>
    1468:	88 0f       	add	r24, r24
    146a:	99 1f       	adc	r25, r25
    146c:	0a 94       	dec	r0
    146e:	e2 f7       	brpl	.-8      	; 0x1468 <DIO_SetPinMode+0x38a>
    1470:	84 2b       	or	r24, r20
    1472:	8c 93       	st	X, r24
    1474:	3b c0       	rjmp	.+118    	; 0x14ec <DIO_SetPinMode+0x40e>
            break;
        case DIO_PORTB:
            SET_BIT(DDRB, pin);
    1476:	a7 e3       	ldi	r26, 0x37	; 55
    1478:	b0 e0       	ldi	r27, 0x00	; 0
    147a:	e7 e3       	ldi	r30, 0x37	; 55
    147c:	f0 e0       	ldi	r31, 0x00	; 0
    147e:	80 81       	ld	r24, Z
    1480:	48 2f       	mov	r20, r24
    1482:	8a 81       	ldd	r24, Y+2	; 0x02
    1484:	28 2f       	mov	r18, r24
    1486:	30 e0       	ldi	r19, 0x00	; 0
    1488:	81 e0       	ldi	r24, 0x01	; 1
    148a:	90 e0       	ldi	r25, 0x00	; 0
    148c:	02 2e       	mov	r0, r18
    148e:	02 c0       	rjmp	.+4      	; 0x1494 <DIO_SetPinMode+0x3b6>
    1490:	88 0f       	add	r24, r24
    1492:	99 1f       	adc	r25, r25
    1494:	0a 94       	dec	r0
    1496:	e2 f7       	brpl	.-8      	; 0x1490 <DIO_SetPinMode+0x3b2>
    1498:	84 2b       	or	r24, r20
    149a:	8c 93       	st	X, r24
    149c:	27 c0       	rjmp	.+78     	; 0x14ec <DIO_SetPinMode+0x40e>
            break;
        case DIO_PORTC:
            SET_BIT(DDRC, pin);
    149e:	a4 e3       	ldi	r26, 0x34	; 52
    14a0:	b0 e0       	ldi	r27, 0x00	; 0
    14a2:	e4 e3       	ldi	r30, 0x34	; 52
    14a4:	f0 e0       	ldi	r31, 0x00	; 0
    14a6:	80 81       	ld	r24, Z
    14a8:	48 2f       	mov	r20, r24
    14aa:	8a 81       	ldd	r24, Y+2	; 0x02
    14ac:	28 2f       	mov	r18, r24
    14ae:	30 e0       	ldi	r19, 0x00	; 0
    14b0:	81 e0       	ldi	r24, 0x01	; 1
    14b2:	90 e0       	ldi	r25, 0x00	; 0
    14b4:	02 2e       	mov	r0, r18
    14b6:	02 c0       	rjmp	.+4      	; 0x14bc <DIO_SetPinMode+0x3de>
    14b8:	88 0f       	add	r24, r24
    14ba:	99 1f       	adc	r25, r25
    14bc:	0a 94       	dec	r0
    14be:	e2 f7       	brpl	.-8      	; 0x14b8 <DIO_SetPinMode+0x3da>
    14c0:	84 2b       	or	r24, r20
    14c2:	8c 93       	st	X, r24
    14c4:	13 c0       	rjmp	.+38     	; 0x14ec <DIO_SetPinMode+0x40e>
            break;
        case DIO_PORTD:
            SET_BIT(DDRD, pin);
    14c6:	a1 e3       	ldi	r26, 0x31	; 49
    14c8:	b0 e0       	ldi	r27, 0x00	; 0
    14ca:	e1 e3       	ldi	r30, 0x31	; 49
    14cc:	f0 e0       	ldi	r31, 0x00	; 0
    14ce:	80 81       	ld	r24, Z
    14d0:	48 2f       	mov	r20, r24
    14d2:	8a 81       	ldd	r24, Y+2	; 0x02
    14d4:	28 2f       	mov	r18, r24
    14d6:	30 e0       	ldi	r19, 0x00	; 0
    14d8:	81 e0       	ldi	r24, 0x01	; 1
    14da:	90 e0       	ldi	r25, 0x00	; 0
    14dc:	02 2e       	mov	r0, r18
    14de:	02 c0       	rjmp	.+4      	; 0x14e4 <DIO_SetPinMode+0x406>
    14e0:	88 0f       	add	r24, r24
    14e2:	99 1f       	adc	r25, r25
    14e4:	0a 94       	dec	r0
    14e6:	e2 f7       	brpl	.-8      	; 0x14e0 <DIO_SetPinMode+0x402>
    14e8:	84 2b       	or	r24, r20
    14ea:	8c 93       	st	X, r24
        default:
            break;
        }

    }
}
    14ec:	29 96       	adiw	r28, 0x09	; 9
    14ee:	0f b6       	in	r0, 0x3f	; 63
    14f0:	f8 94       	cli
    14f2:	de bf       	out	0x3e, r29	; 62
    14f4:	0f be       	out	0x3f, r0	; 63
    14f6:	cd bf       	out	0x3d, r28	; 61
    14f8:	cf 91       	pop	r28
    14fa:	df 91       	pop	r29
    14fc:	08 95       	ret

000014fe <DIO_SetPortMode>:

void DIO_SetPortMode(DIO_PortType port, DIO_ModeType mode) {
    14fe:	df 93       	push	r29
    1500:	cf 93       	push	r28
    1502:	cd b7       	in	r28, 0x3d	; 61
    1504:	de b7       	in	r29, 0x3e	; 62
    1506:	2a 97       	sbiw	r28, 0x0a	; 10
    1508:	0f b6       	in	r0, 0x3f	; 63
    150a:	f8 94       	cli
    150c:	de bf       	out	0x3e, r29	; 62
    150e:	0f be       	out	0x3f, r0	; 63
    1510:	cd bf       	out	0x3d, r28	; 61
    1512:	89 83       	std	Y+1, r24	; 0x01
    1514:	6a 83       	std	Y+2, r22	; 0x02
    if (mode == DIO_INPUT_FLOATING)
    1516:	8a 81       	ldd	r24, Y+2	; 0x02
    1518:	88 23       	and	r24, r24
    151a:	d9 f5       	brne	.+118    	; 0x1592 <DIO_SetPortMode+0x94>
    {
        switch (port)
    151c:	89 81       	ldd	r24, Y+1	; 0x01
    151e:	28 2f       	mov	r18, r24
    1520:	30 e0       	ldi	r19, 0x00	; 0
    1522:	3a 87       	std	Y+10, r19	; 0x0a
    1524:	29 87       	std	Y+9, r18	; 0x09
    1526:	89 85       	ldd	r24, Y+9	; 0x09
    1528:	9a 85       	ldd	r25, Y+10	; 0x0a
    152a:	81 30       	cpi	r24, 0x01	; 1
    152c:	91 05       	cpc	r25, r1
    152e:	e1 f0       	breq	.+56     	; 0x1568 <DIO_SetPortMode+0x6a>
    1530:	29 85       	ldd	r18, Y+9	; 0x09
    1532:	3a 85       	ldd	r19, Y+10	; 0x0a
    1534:	22 30       	cpi	r18, 0x02	; 2
    1536:	31 05       	cpc	r19, r1
    1538:	2c f4       	brge	.+10     	; 0x1544 <DIO_SetPortMode+0x46>
    153a:	89 85       	ldd	r24, Y+9	; 0x09
    153c:	9a 85       	ldd	r25, Y+10	; 0x0a
    153e:	00 97       	sbiw	r24, 0x00	; 0
    1540:	61 f0       	breq	.+24     	; 0x155a <DIO_SetPortMode+0x5c>
    1542:	d2 c0       	rjmp	.+420    	; 0x16e8 <DIO_SetPortMode+0x1ea>
    1544:	29 85       	ldd	r18, Y+9	; 0x09
    1546:	3a 85       	ldd	r19, Y+10	; 0x0a
    1548:	22 30       	cpi	r18, 0x02	; 2
    154a:	31 05       	cpc	r19, r1
    154c:	a1 f0       	breq	.+40     	; 0x1576 <DIO_SetPortMode+0x78>
    154e:	89 85       	ldd	r24, Y+9	; 0x09
    1550:	9a 85       	ldd	r25, Y+10	; 0x0a
    1552:	83 30       	cpi	r24, 0x03	; 3
    1554:	91 05       	cpc	r25, r1
    1556:	b1 f0       	breq	.+44     	; 0x1584 <DIO_SetPortMode+0x86>
    1558:	c7 c0       	rjmp	.+398    	; 0x16e8 <DIO_SetPortMode+0x1ea>
        {
        case DIO_PORTA:
            DDRA = 0x00;
    155a:	ea e3       	ldi	r30, 0x3A	; 58
    155c:	f0 e0       	ldi	r31, 0x00	; 0
    155e:	10 82       	st	Z, r1
            PORTA = 0x00;
    1560:	eb e3       	ldi	r30, 0x3B	; 59
    1562:	f0 e0       	ldi	r31, 0x00	; 0
    1564:	10 82       	st	Z, r1
    1566:	c0 c0       	rjmp	.+384    	; 0x16e8 <DIO_SetPortMode+0x1ea>
            break;
        case DIO_PORTB:
            DDRB = 0x00;
    1568:	e7 e3       	ldi	r30, 0x37	; 55
    156a:	f0 e0       	ldi	r31, 0x00	; 0
    156c:	10 82       	st	Z, r1
            PORTB = 0x00;
    156e:	e8 e3       	ldi	r30, 0x38	; 56
    1570:	f0 e0       	ldi	r31, 0x00	; 0
    1572:	10 82       	st	Z, r1
    1574:	b9 c0       	rjmp	.+370    	; 0x16e8 <DIO_SetPortMode+0x1ea>
            break;
        case DIO_PORTC:
            DDRC = 0x00;
    1576:	e4 e3       	ldi	r30, 0x34	; 52
    1578:	f0 e0       	ldi	r31, 0x00	; 0
    157a:	10 82       	st	Z, r1
            PORTC = 0x00;
    157c:	e5 e3       	ldi	r30, 0x35	; 53
    157e:	f0 e0       	ldi	r31, 0x00	; 0
    1580:	10 82       	st	Z, r1
    1582:	b2 c0       	rjmp	.+356    	; 0x16e8 <DIO_SetPortMode+0x1ea>
            break;
        case DIO_PORTD:
            DDRD = 0x00;
    1584:	e1 e3       	ldi	r30, 0x31	; 49
    1586:	f0 e0       	ldi	r31, 0x00	; 0
    1588:	10 82       	st	Z, r1
            PORTD = 0x00;
    158a:	e2 e3       	ldi	r30, 0x32	; 50
    158c:	f0 e0       	ldi	r31, 0x00	; 0
    158e:	10 82       	st	Z, r1
    1590:	ab c0       	rjmp	.+342    	; 0x16e8 <DIO_SetPortMode+0x1ea>
            break;
        default:
            break;
        }
    }
    else if (mode == DIO_INPUT_PULLUP)
    1592:	8a 81       	ldd	r24, Y+2	; 0x02
    1594:	81 30       	cpi	r24, 0x01	; 1
    1596:	09 f0       	breq	.+2      	; 0x159a <DIO_SetPortMode+0x9c>
    1598:	3f c0       	rjmp	.+126    	; 0x1618 <DIO_SetPortMode+0x11a>
    {
        switch (port)
    159a:	89 81       	ldd	r24, Y+1	; 0x01
    159c:	28 2f       	mov	r18, r24
    159e:	30 e0       	ldi	r19, 0x00	; 0
    15a0:	38 87       	std	Y+8, r19	; 0x08
    15a2:	2f 83       	std	Y+7, r18	; 0x07
    15a4:	8f 81       	ldd	r24, Y+7	; 0x07
    15a6:	98 85       	ldd	r25, Y+8	; 0x08
    15a8:	81 30       	cpi	r24, 0x01	; 1
    15aa:	91 05       	cpc	r25, r1
    15ac:	e9 f0       	breq	.+58     	; 0x15e8 <DIO_SetPortMode+0xea>
    15ae:	2f 81       	ldd	r18, Y+7	; 0x07
    15b0:	38 85       	ldd	r19, Y+8	; 0x08
    15b2:	22 30       	cpi	r18, 0x02	; 2
    15b4:	31 05       	cpc	r19, r1
    15b6:	2c f4       	brge	.+10     	; 0x15c2 <DIO_SetPortMode+0xc4>
    15b8:	8f 81       	ldd	r24, Y+7	; 0x07
    15ba:	98 85       	ldd	r25, Y+8	; 0x08
    15bc:	00 97       	sbiw	r24, 0x00	; 0
    15be:	61 f0       	breq	.+24     	; 0x15d8 <DIO_SetPortMode+0xda>
    15c0:	93 c0       	rjmp	.+294    	; 0x16e8 <DIO_SetPortMode+0x1ea>
    15c2:	2f 81       	ldd	r18, Y+7	; 0x07
    15c4:	38 85       	ldd	r19, Y+8	; 0x08
    15c6:	22 30       	cpi	r18, 0x02	; 2
    15c8:	31 05       	cpc	r19, r1
    15ca:	b1 f0       	breq	.+44     	; 0x15f8 <DIO_SetPortMode+0xfa>
    15cc:	8f 81       	ldd	r24, Y+7	; 0x07
    15ce:	98 85       	ldd	r25, Y+8	; 0x08
    15d0:	83 30       	cpi	r24, 0x03	; 3
    15d2:	91 05       	cpc	r25, r1
    15d4:	c9 f0       	breq	.+50     	; 0x1608 <DIO_SetPortMode+0x10a>
    15d6:	88 c0       	rjmp	.+272    	; 0x16e8 <DIO_SetPortMode+0x1ea>
        {
        case DIO_PORTA:
            DDRA = 0x00;
    15d8:	ea e3       	ldi	r30, 0x3A	; 58
    15da:	f0 e0       	ldi	r31, 0x00	; 0
    15dc:	10 82       	st	Z, r1
            PORTA = 0xFF;
    15de:	eb e3       	ldi	r30, 0x3B	; 59
    15e0:	f0 e0       	ldi	r31, 0x00	; 0
    15e2:	8f ef       	ldi	r24, 0xFF	; 255
    15e4:	80 83       	st	Z, r24
    15e6:	80 c0       	rjmp	.+256    	; 0x16e8 <DIO_SetPortMode+0x1ea>
            break;
        case DIO_PORTB:
            DDRB = 0x00;
    15e8:	e7 e3       	ldi	r30, 0x37	; 55
    15ea:	f0 e0       	ldi	r31, 0x00	; 0
    15ec:	10 82       	st	Z, r1
            PORTB = 0xFF;
    15ee:	e8 e3       	ldi	r30, 0x38	; 56
    15f0:	f0 e0       	ldi	r31, 0x00	; 0
    15f2:	8f ef       	ldi	r24, 0xFF	; 255
    15f4:	80 83       	st	Z, r24
    15f6:	78 c0       	rjmp	.+240    	; 0x16e8 <DIO_SetPortMode+0x1ea>
            break;
        case DIO_PORTC:
            DDRC = 0x00;
    15f8:	e4 e3       	ldi	r30, 0x34	; 52
    15fa:	f0 e0       	ldi	r31, 0x00	; 0
    15fc:	10 82       	st	Z, r1
            PORTC = 0xFF;
    15fe:	e5 e3       	ldi	r30, 0x35	; 53
    1600:	f0 e0       	ldi	r31, 0x00	; 0
    1602:	8f ef       	ldi	r24, 0xFF	; 255
    1604:	80 83       	st	Z, r24
    1606:	70 c0       	rjmp	.+224    	; 0x16e8 <DIO_SetPortMode+0x1ea>
            break;
        case DIO_PORTD:
            DDRD = 0x00;
    1608:	e1 e3       	ldi	r30, 0x31	; 49
    160a:	f0 e0       	ldi	r31, 0x00	; 0
    160c:	10 82       	st	Z, r1
            PORTD = 0xFF;
    160e:	e2 e3       	ldi	r30, 0x32	; 50
    1610:	f0 e0       	ldi	r31, 0x00	; 0
    1612:	8f ef       	ldi	r24, 0xFF	; 255
    1614:	80 83       	st	Z, r24
    1616:	68 c0       	rjmp	.+208    	; 0x16e8 <DIO_SetPortMode+0x1ea>
            break;
        default:
            break;
        }
    }
    else if (mode == DIO_OUTPUT)
    1618:	8a 81       	ldd	r24, Y+2	; 0x02
    161a:	82 30       	cpi	r24, 0x02	; 2
    161c:	99 f5       	brne	.+102    	; 0x1684 <DIO_SetPortMode+0x186>
    {
        switch (port)
    161e:	89 81       	ldd	r24, Y+1	; 0x01
    1620:	28 2f       	mov	r18, r24
    1622:	30 e0       	ldi	r19, 0x00	; 0
    1624:	3e 83       	std	Y+6, r19	; 0x06
    1626:	2d 83       	std	Y+5, r18	; 0x05
    1628:	8d 81       	ldd	r24, Y+5	; 0x05
    162a:	9e 81       	ldd	r25, Y+6	; 0x06
    162c:	81 30       	cpi	r24, 0x01	; 1
    162e:	91 05       	cpc	r25, r1
    1630:	d1 f0       	breq	.+52     	; 0x1666 <DIO_SetPortMode+0x168>
    1632:	2d 81       	ldd	r18, Y+5	; 0x05
    1634:	3e 81       	ldd	r19, Y+6	; 0x06
    1636:	22 30       	cpi	r18, 0x02	; 2
    1638:	31 05       	cpc	r19, r1
    163a:	2c f4       	brge	.+10     	; 0x1646 <DIO_SetPortMode+0x148>
    163c:	8d 81       	ldd	r24, Y+5	; 0x05
    163e:	9e 81       	ldd	r25, Y+6	; 0x06
    1640:	00 97       	sbiw	r24, 0x00	; 0
    1642:	61 f0       	breq	.+24     	; 0x165c <DIO_SetPortMode+0x15e>
    1644:	51 c0       	rjmp	.+162    	; 0x16e8 <DIO_SetPortMode+0x1ea>
    1646:	2d 81       	ldd	r18, Y+5	; 0x05
    1648:	3e 81       	ldd	r19, Y+6	; 0x06
    164a:	22 30       	cpi	r18, 0x02	; 2
    164c:	31 05       	cpc	r19, r1
    164e:	81 f0       	breq	.+32     	; 0x1670 <DIO_SetPortMode+0x172>
    1650:	8d 81       	ldd	r24, Y+5	; 0x05
    1652:	9e 81       	ldd	r25, Y+6	; 0x06
    1654:	83 30       	cpi	r24, 0x03	; 3
    1656:	91 05       	cpc	r25, r1
    1658:	81 f0       	breq	.+32     	; 0x167a <DIO_SetPortMode+0x17c>
    165a:	46 c0       	rjmp	.+140    	; 0x16e8 <DIO_SetPortMode+0x1ea>
        {
        case DIO_PORTA:
            DDRA = 0xFF;
    165c:	ea e3       	ldi	r30, 0x3A	; 58
    165e:	f0 e0       	ldi	r31, 0x00	; 0
    1660:	8f ef       	ldi	r24, 0xFF	; 255
    1662:	80 83       	st	Z, r24
    1664:	41 c0       	rjmp	.+130    	; 0x16e8 <DIO_SetPortMode+0x1ea>
            break;
        case DIO_PORTB:
            DDRB = 0xFF;
    1666:	e7 e3       	ldi	r30, 0x37	; 55
    1668:	f0 e0       	ldi	r31, 0x00	; 0
    166a:	8f ef       	ldi	r24, 0xFF	; 255
    166c:	80 83       	st	Z, r24
    166e:	3c c0       	rjmp	.+120    	; 0x16e8 <DIO_SetPortMode+0x1ea>
            break;
        case DIO_PORTC:
            DDRC = 0xFF;
    1670:	e4 e3       	ldi	r30, 0x34	; 52
    1672:	f0 e0       	ldi	r31, 0x00	; 0
    1674:	8f ef       	ldi	r24, 0xFF	; 255
    1676:	80 83       	st	Z, r24
    1678:	37 c0       	rjmp	.+110    	; 0x16e8 <DIO_SetPortMode+0x1ea>
            break;
        case DIO_PORTD:
            DDRD = 0xFF;
    167a:	e1 e3       	ldi	r30, 0x31	; 49
    167c:	f0 e0       	ldi	r31, 0x00	; 0
    167e:	8f ef       	ldi	r24, 0xFF	; 255
    1680:	80 83       	st	Z, r24
    1682:	32 c0       	rjmp	.+100    	; 0x16e8 <DIO_SetPortMode+0x1ea>
        }

    }
    else
    {
        switch (port)
    1684:	89 81       	ldd	r24, Y+1	; 0x01
    1686:	28 2f       	mov	r18, r24
    1688:	30 e0       	ldi	r19, 0x00	; 0
    168a:	3c 83       	std	Y+4, r19	; 0x04
    168c:	2b 83       	std	Y+3, r18	; 0x03
    168e:	8b 81       	ldd	r24, Y+3	; 0x03
    1690:	9c 81       	ldd	r25, Y+4	; 0x04
    1692:	81 30       	cpi	r24, 0x01	; 1
    1694:	91 05       	cpc	r25, r1
    1696:	d1 f0       	breq	.+52     	; 0x16cc <DIO_SetPortMode+0x1ce>
    1698:	2b 81       	ldd	r18, Y+3	; 0x03
    169a:	3c 81       	ldd	r19, Y+4	; 0x04
    169c:	22 30       	cpi	r18, 0x02	; 2
    169e:	31 05       	cpc	r19, r1
    16a0:	2c f4       	brge	.+10     	; 0x16ac <DIO_SetPortMode+0x1ae>
    16a2:	8b 81       	ldd	r24, Y+3	; 0x03
    16a4:	9c 81       	ldd	r25, Y+4	; 0x04
    16a6:	00 97       	sbiw	r24, 0x00	; 0
    16a8:	61 f0       	breq	.+24     	; 0x16c2 <DIO_SetPortMode+0x1c4>
    16aa:	1e c0       	rjmp	.+60     	; 0x16e8 <DIO_SetPortMode+0x1ea>
    16ac:	2b 81       	ldd	r18, Y+3	; 0x03
    16ae:	3c 81       	ldd	r19, Y+4	; 0x04
    16b0:	22 30       	cpi	r18, 0x02	; 2
    16b2:	31 05       	cpc	r19, r1
    16b4:	81 f0       	breq	.+32     	; 0x16d6 <DIO_SetPortMode+0x1d8>
    16b6:	8b 81       	ldd	r24, Y+3	; 0x03
    16b8:	9c 81       	ldd	r25, Y+4	; 0x04
    16ba:	83 30       	cpi	r24, 0x03	; 3
    16bc:	91 05       	cpc	r25, r1
    16be:	81 f0       	breq	.+32     	; 0x16e0 <DIO_SetPortMode+0x1e2>
    16c0:	13 c0       	rjmp	.+38     	; 0x16e8 <DIO_SetPortMode+0x1ea>
        {
        case DIO_PORTA:
            DDRA = mode;
    16c2:	ea e3       	ldi	r30, 0x3A	; 58
    16c4:	f0 e0       	ldi	r31, 0x00	; 0
    16c6:	8a 81       	ldd	r24, Y+2	; 0x02
    16c8:	80 83       	st	Z, r24
    16ca:	0e c0       	rjmp	.+28     	; 0x16e8 <DIO_SetPortMode+0x1ea>
            break;
        case DIO_PORTB:
            DDRB = mode;
    16cc:	e7 e3       	ldi	r30, 0x37	; 55
    16ce:	f0 e0       	ldi	r31, 0x00	; 0
    16d0:	8a 81       	ldd	r24, Y+2	; 0x02
    16d2:	80 83       	st	Z, r24
    16d4:	09 c0       	rjmp	.+18     	; 0x16e8 <DIO_SetPortMode+0x1ea>
            break;
        case DIO_PORTC:
            DDRC = mode;
    16d6:	e4 e3       	ldi	r30, 0x34	; 52
    16d8:	f0 e0       	ldi	r31, 0x00	; 0
    16da:	8a 81       	ldd	r24, Y+2	; 0x02
    16dc:	80 83       	st	Z, r24
    16de:	04 c0       	rjmp	.+8      	; 0x16e8 <DIO_SetPortMode+0x1ea>
            break;
        case DIO_PORTD:
            DDRD = mode;
    16e0:	e1 e3       	ldi	r30, 0x31	; 49
    16e2:	f0 e0       	ldi	r31, 0x00	; 0
    16e4:	8a 81       	ldd	r24, Y+2	; 0x02
    16e6:	80 83       	st	Z, r24
        default:
            break;
        }

    }
}
    16e8:	2a 96       	adiw	r28, 0x0a	; 10
    16ea:	0f b6       	in	r0, 0x3f	; 63
    16ec:	f8 94       	cli
    16ee:	de bf       	out	0x3e, r29	; 62
    16f0:	0f be       	out	0x3f, r0	; 63
    16f2:	cd bf       	out	0x3d, r28	; 61
    16f4:	cf 91       	pop	r28
    16f6:	df 91       	pop	r29
    16f8:	08 95       	ret

000016fa <DIO_SetPinLevel>:


void DIO_SetPinLevel(DIO_PortType port, DIO_PinType pin, DIO_LevelType level) {
    16fa:	df 93       	push	r29
    16fc:	cf 93       	push	r28
    16fe:	cd b7       	in	r28, 0x3d	; 61
    1700:	de b7       	in	r29, 0x3e	; 62
    1702:	27 97       	sbiw	r28, 0x07	; 7
    1704:	0f b6       	in	r0, 0x3f	; 63
    1706:	f8 94       	cli
    1708:	de bf       	out	0x3e, r29	; 62
    170a:	0f be       	out	0x3f, r0	; 63
    170c:	cd bf       	out	0x3d, r28	; 61
    170e:	89 83       	std	Y+1, r24	; 0x01
    1710:	6a 83       	std	Y+2, r22	; 0x02
    1712:	4b 83       	std	Y+3, r20	; 0x03
    if (level == DIO_HIGH)
    1714:	8b 81       	ldd	r24, Y+3	; 0x03
    1716:	81 30       	cpi	r24, 0x01	; 1
    1718:	09 f0       	breq	.+2      	; 0x171c <DIO_SetPinLevel+0x22>
    171a:	6f c0       	rjmp	.+222    	; 0x17fa <DIO_SetPinLevel+0x100>
    {
        switch (port)
    171c:	89 81       	ldd	r24, Y+1	; 0x01
    171e:	28 2f       	mov	r18, r24
    1720:	30 e0       	ldi	r19, 0x00	; 0
    1722:	3f 83       	std	Y+7, r19	; 0x07
    1724:	2e 83       	std	Y+6, r18	; 0x06
    1726:	8e 81       	ldd	r24, Y+6	; 0x06
    1728:	9f 81       	ldd	r25, Y+7	; 0x07
    172a:	81 30       	cpi	r24, 0x01	; 1
    172c:	91 05       	cpc	r25, r1
    172e:	49 f1       	breq	.+82     	; 0x1782 <DIO_SetPinLevel+0x88>
    1730:	2e 81       	ldd	r18, Y+6	; 0x06
    1732:	3f 81       	ldd	r19, Y+7	; 0x07
    1734:	22 30       	cpi	r18, 0x02	; 2
    1736:	31 05       	cpc	r19, r1
    1738:	2c f4       	brge	.+10     	; 0x1744 <DIO_SetPinLevel+0x4a>
    173a:	8e 81       	ldd	r24, Y+6	; 0x06
    173c:	9f 81       	ldd	r25, Y+7	; 0x07
    173e:	00 97       	sbiw	r24, 0x00	; 0
    1740:	61 f0       	breq	.+24     	; 0x175a <DIO_SetPinLevel+0x60>
    1742:	d2 c0       	rjmp	.+420    	; 0x18e8 <DIO_SetPinLevel+0x1ee>
    1744:	2e 81       	ldd	r18, Y+6	; 0x06
    1746:	3f 81       	ldd	r19, Y+7	; 0x07
    1748:	22 30       	cpi	r18, 0x02	; 2
    174a:	31 05       	cpc	r19, r1
    174c:	71 f1       	breq	.+92     	; 0x17aa <DIO_SetPinLevel+0xb0>
    174e:	8e 81       	ldd	r24, Y+6	; 0x06
    1750:	9f 81       	ldd	r25, Y+7	; 0x07
    1752:	83 30       	cpi	r24, 0x03	; 3
    1754:	91 05       	cpc	r25, r1
    1756:	e9 f1       	breq	.+122    	; 0x17d2 <DIO_SetPinLevel+0xd8>
    1758:	c7 c0       	rjmp	.+398    	; 0x18e8 <DIO_SetPinLevel+0x1ee>
        {
        case DIO_PORTA:
            SET_BIT(PORTA, pin);
    175a:	ab e3       	ldi	r26, 0x3B	; 59
    175c:	b0 e0       	ldi	r27, 0x00	; 0
    175e:	eb e3       	ldi	r30, 0x3B	; 59
    1760:	f0 e0       	ldi	r31, 0x00	; 0
    1762:	80 81       	ld	r24, Z
    1764:	48 2f       	mov	r20, r24
    1766:	8a 81       	ldd	r24, Y+2	; 0x02
    1768:	28 2f       	mov	r18, r24
    176a:	30 e0       	ldi	r19, 0x00	; 0
    176c:	81 e0       	ldi	r24, 0x01	; 1
    176e:	90 e0       	ldi	r25, 0x00	; 0
    1770:	02 2e       	mov	r0, r18
    1772:	02 c0       	rjmp	.+4      	; 0x1778 <DIO_SetPinLevel+0x7e>
    1774:	88 0f       	add	r24, r24
    1776:	99 1f       	adc	r25, r25
    1778:	0a 94       	dec	r0
    177a:	e2 f7       	brpl	.-8      	; 0x1774 <DIO_SetPinLevel+0x7a>
    177c:	84 2b       	or	r24, r20
    177e:	8c 93       	st	X, r24
    1780:	b3 c0       	rjmp	.+358    	; 0x18e8 <DIO_SetPinLevel+0x1ee>
            break;
        case DIO_PORTB:
            SET_BIT(PORTB, pin);
    1782:	a8 e3       	ldi	r26, 0x38	; 56
    1784:	b0 e0       	ldi	r27, 0x00	; 0
    1786:	e8 e3       	ldi	r30, 0x38	; 56
    1788:	f0 e0       	ldi	r31, 0x00	; 0
    178a:	80 81       	ld	r24, Z
    178c:	48 2f       	mov	r20, r24
    178e:	8a 81       	ldd	r24, Y+2	; 0x02
    1790:	28 2f       	mov	r18, r24
    1792:	30 e0       	ldi	r19, 0x00	; 0
    1794:	81 e0       	ldi	r24, 0x01	; 1
    1796:	90 e0       	ldi	r25, 0x00	; 0
    1798:	02 2e       	mov	r0, r18
    179a:	02 c0       	rjmp	.+4      	; 0x17a0 <DIO_SetPinLevel+0xa6>
    179c:	88 0f       	add	r24, r24
    179e:	99 1f       	adc	r25, r25
    17a0:	0a 94       	dec	r0
    17a2:	e2 f7       	brpl	.-8      	; 0x179c <DIO_SetPinLevel+0xa2>
    17a4:	84 2b       	or	r24, r20
    17a6:	8c 93       	st	X, r24
    17a8:	9f c0       	rjmp	.+318    	; 0x18e8 <DIO_SetPinLevel+0x1ee>
            break;
        case DIO_PORTC:
            SET_BIT(PORTC, pin);
    17aa:	a5 e3       	ldi	r26, 0x35	; 53
    17ac:	b0 e0       	ldi	r27, 0x00	; 0
    17ae:	e5 e3       	ldi	r30, 0x35	; 53
    17b0:	f0 e0       	ldi	r31, 0x00	; 0
    17b2:	80 81       	ld	r24, Z
    17b4:	48 2f       	mov	r20, r24
    17b6:	8a 81       	ldd	r24, Y+2	; 0x02
    17b8:	28 2f       	mov	r18, r24
    17ba:	30 e0       	ldi	r19, 0x00	; 0
    17bc:	81 e0       	ldi	r24, 0x01	; 1
    17be:	90 e0       	ldi	r25, 0x00	; 0
    17c0:	02 2e       	mov	r0, r18
    17c2:	02 c0       	rjmp	.+4      	; 0x17c8 <DIO_SetPinLevel+0xce>
    17c4:	88 0f       	add	r24, r24
    17c6:	99 1f       	adc	r25, r25
    17c8:	0a 94       	dec	r0
    17ca:	e2 f7       	brpl	.-8      	; 0x17c4 <DIO_SetPinLevel+0xca>
    17cc:	84 2b       	or	r24, r20
    17ce:	8c 93       	st	X, r24
    17d0:	8b c0       	rjmp	.+278    	; 0x18e8 <DIO_SetPinLevel+0x1ee>
            break;
        case DIO_PORTD:
            SET_BIT(PORTD, pin);
    17d2:	a2 e3       	ldi	r26, 0x32	; 50
    17d4:	b0 e0       	ldi	r27, 0x00	; 0
    17d6:	e2 e3       	ldi	r30, 0x32	; 50
    17d8:	f0 e0       	ldi	r31, 0x00	; 0
    17da:	80 81       	ld	r24, Z
    17dc:	48 2f       	mov	r20, r24
    17de:	8a 81       	ldd	r24, Y+2	; 0x02
    17e0:	28 2f       	mov	r18, r24
    17e2:	30 e0       	ldi	r19, 0x00	; 0
    17e4:	81 e0       	ldi	r24, 0x01	; 1
    17e6:	90 e0       	ldi	r25, 0x00	; 0
    17e8:	02 2e       	mov	r0, r18
    17ea:	02 c0       	rjmp	.+4      	; 0x17f0 <DIO_SetPinLevel+0xf6>
    17ec:	88 0f       	add	r24, r24
    17ee:	99 1f       	adc	r25, r25
    17f0:	0a 94       	dec	r0
    17f2:	e2 f7       	brpl	.-8      	; 0x17ec <DIO_SetPinLevel+0xf2>
    17f4:	84 2b       	or	r24, r20
    17f6:	8c 93       	st	X, r24
    17f8:	77 c0       	rjmp	.+238    	; 0x18e8 <DIO_SetPinLevel+0x1ee>
            break;
        default:
            break;
        }
    }
    else if (level == DIO_LOW)
    17fa:	8b 81       	ldd	r24, Y+3	; 0x03
    17fc:	88 23       	and	r24, r24
    17fe:	09 f0       	breq	.+2      	; 0x1802 <DIO_SetPinLevel+0x108>
    1800:	73 c0       	rjmp	.+230    	; 0x18e8 <DIO_SetPinLevel+0x1ee>
    {
        switch (port)
    1802:	89 81       	ldd	r24, Y+1	; 0x01
    1804:	28 2f       	mov	r18, r24
    1806:	30 e0       	ldi	r19, 0x00	; 0
    1808:	3d 83       	std	Y+5, r19	; 0x05
    180a:	2c 83       	std	Y+4, r18	; 0x04
    180c:	8c 81       	ldd	r24, Y+4	; 0x04
    180e:	9d 81       	ldd	r25, Y+5	; 0x05
    1810:	81 30       	cpi	r24, 0x01	; 1
    1812:	91 05       	cpc	r25, r1
    1814:	59 f1       	breq	.+86     	; 0x186c <DIO_SetPinLevel+0x172>
    1816:	2c 81       	ldd	r18, Y+4	; 0x04
    1818:	3d 81       	ldd	r19, Y+5	; 0x05
    181a:	22 30       	cpi	r18, 0x02	; 2
    181c:	31 05       	cpc	r19, r1
    181e:	2c f4       	brge	.+10     	; 0x182a <DIO_SetPinLevel+0x130>
    1820:	8c 81       	ldd	r24, Y+4	; 0x04
    1822:	9d 81       	ldd	r25, Y+5	; 0x05
    1824:	00 97       	sbiw	r24, 0x00	; 0
    1826:	69 f0       	breq	.+26     	; 0x1842 <DIO_SetPinLevel+0x148>
    1828:	5f c0       	rjmp	.+190    	; 0x18e8 <DIO_SetPinLevel+0x1ee>
    182a:	2c 81       	ldd	r18, Y+4	; 0x04
    182c:	3d 81       	ldd	r19, Y+5	; 0x05
    182e:	22 30       	cpi	r18, 0x02	; 2
    1830:	31 05       	cpc	r19, r1
    1832:	89 f1       	breq	.+98     	; 0x1896 <DIO_SetPinLevel+0x19c>
    1834:	8c 81       	ldd	r24, Y+4	; 0x04
    1836:	9d 81       	ldd	r25, Y+5	; 0x05
    1838:	83 30       	cpi	r24, 0x03	; 3
    183a:	91 05       	cpc	r25, r1
    183c:	09 f4       	brne	.+2      	; 0x1840 <DIO_SetPinLevel+0x146>
    183e:	40 c0       	rjmp	.+128    	; 0x18c0 <DIO_SetPinLevel+0x1c6>
    1840:	53 c0       	rjmp	.+166    	; 0x18e8 <DIO_SetPinLevel+0x1ee>
        {
        case DIO_PORTA:
            CLR_BIT(PORTA, pin);
    1842:	ab e3       	ldi	r26, 0x3B	; 59
    1844:	b0 e0       	ldi	r27, 0x00	; 0
    1846:	eb e3       	ldi	r30, 0x3B	; 59
    1848:	f0 e0       	ldi	r31, 0x00	; 0
    184a:	80 81       	ld	r24, Z
    184c:	48 2f       	mov	r20, r24
    184e:	8a 81       	ldd	r24, Y+2	; 0x02
    1850:	28 2f       	mov	r18, r24
    1852:	30 e0       	ldi	r19, 0x00	; 0
    1854:	81 e0       	ldi	r24, 0x01	; 1
    1856:	90 e0       	ldi	r25, 0x00	; 0
    1858:	02 2e       	mov	r0, r18
    185a:	02 c0       	rjmp	.+4      	; 0x1860 <DIO_SetPinLevel+0x166>
    185c:	88 0f       	add	r24, r24
    185e:	99 1f       	adc	r25, r25
    1860:	0a 94       	dec	r0
    1862:	e2 f7       	brpl	.-8      	; 0x185c <DIO_SetPinLevel+0x162>
    1864:	80 95       	com	r24
    1866:	84 23       	and	r24, r20
    1868:	8c 93       	st	X, r24
    186a:	3e c0       	rjmp	.+124    	; 0x18e8 <DIO_SetPinLevel+0x1ee>
            break;
        case DIO_PORTB:
            CLR_BIT(PORTB, pin);
    186c:	a8 e3       	ldi	r26, 0x38	; 56
    186e:	b0 e0       	ldi	r27, 0x00	; 0
    1870:	e8 e3       	ldi	r30, 0x38	; 56
    1872:	f0 e0       	ldi	r31, 0x00	; 0
    1874:	80 81       	ld	r24, Z
    1876:	48 2f       	mov	r20, r24
    1878:	8a 81       	ldd	r24, Y+2	; 0x02
    187a:	28 2f       	mov	r18, r24
    187c:	30 e0       	ldi	r19, 0x00	; 0
    187e:	81 e0       	ldi	r24, 0x01	; 1
    1880:	90 e0       	ldi	r25, 0x00	; 0
    1882:	02 2e       	mov	r0, r18
    1884:	02 c0       	rjmp	.+4      	; 0x188a <DIO_SetPinLevel+0x190>
    1886:	88 0f       	add	r24, r24
    1888:	99 1f       	adc	r25, r25
    188a:	0a 94       	dec	r0
    188c:	e2 f7       	brpl	.-8      	; 0x1886 <DIO_SetPinLevel+0x18c>
    188e:	80 95       	com	r24
    1890:	84 23       	and	r24, r20
    1892:	8c 93       	st	X, r24
    1894:	29 c0       	rjmp	.+82     	; 0x18e8 <DIO_SetPinLevel+0x1ee>
            break;
        case DIO_PORTC:
            CLR_BIT(PORTC, pin);
    1896:	a5 e3       	ldi	r26, 0x35	; 53
    1898:	b0 e0       	ldi	r27, 0x00	; 0
    189a:	e5 e3       	ldi	r30, 0x35	; 53
    189c:	f0 e0       	ldi	r31, 0x00	; 0
    189e:	80 81       	ld	r24, Z
    18a0:	48 2f       	mov	r20, r24
    18a2:	8a 81       	ldd	r24, Y+2	; 0x02
    18a4:	28 2f       	mov	r18, r24
    18a6:	30 e0       	ldi	r19, 0x00	; 0
    18a8:	81 e0       	ldi	r24, 0x01	; 1
    18aa:	90 e0       	ldi	r25, 0x00	; 0
    18ac:	02 2e       	mov	r0, r18
    18ae:	02 c0       	rjmp	.+4      	; 0x18b4 <DIO_SetPinLevel+0x1ba>
    18b0:	88 0f       	add	r24, r24
    18b2:	99 1f       	adc	r25, r25
    18b4:	0a 94       	dec	r0
    18b6:	e2 f7       	brpl	.-8      	; 0x18b0 <DIO_SetPinLevel+0x1b6>
    18b8:	80 95       	com	r24
    18ba:	84 23       	and	r24, r20
    18bc:	8c 93       	st	X, r24
    18be:	14 c0       	rjmp	.+40     	; 0x18e8 <DIO_SetPinLevel+0x1ee>
            break;
        case DIO_PORTD:
            CLR_BIT(PORTD, pin);
    18c0:	a2 e3       	ldi	r26, 0x32	; 50
    18c2:	b0 e0       	ldi	r27, 0x00	; 0
    18c4:	e2 e3       	ldi	r30, 0x32	; 50
    18c6:	f0 e0       	ldi	r31, 0x00	; 0
    18c8:	80 81       	ld	r24, Z
    18ca:	48 2f       	mov	r20, r24
    18cc:	8a 81       	ldd	r24, Y+2	; 0x02
    18ce:	28 2f       	mov	r18, r24
    18d0:	30 e0       	ldi	r19, 0x00	; 0
    18d2:	81 e0       	ldi	r24, 0x01	; 1
    18d4:	90 e0       	ldi	r25, 0x00	; 0
    18d6:	02 2e       	mov	r0, r18
    18d8:	02 c0       	rjmp	.+4      	; 0x18de <DIO_SetPinLevel+0x1e4>
    18da:	88 0f       	add	r24, r24
    18dc:	99 1f       	adc	r25, r25
    18de:	0a 94       	dec	r0
    18e0:	e2 f7       	brpl	.-8      	; 0x18da <DIO_SetPinLevel+0x1e0>
    18e2:	80 95       	com	r24
    18e4:	84 23       	and	r24, r20
    18e6:	8c 93       	st	X, r24
            break;
        default:
            break;
        }
    }
}
    18e8:	27 96       	adiw	r28, 0x07	; 7
    18ea:	0f b6       	in	r0, 0x3f	; 63
    18ec:	f8 94       	cli
    18ee:	de bf       	out	0x3e, r29	; 62
    18f0:	0f be       	out	0x3f, r0	; 63
    18f2:	cd bf       	out	0x3d, r28	; 61
    18f4:	cf 91       	pop	r28
    18f6:	df 91       	pop	r29
    18f8:	08 95       	ret

000018fa <DIO_SetPortLevel>:

void DIO_SetPortLevel (DIO_PortType port, DIO_LevelType level) {
    18fa:	df 93       	push	r29
    18fc:	cf 93       	push	r28
    18fe:	cd b7       	in	r28, 0x3d	; 61
    1900:	de b7       	in	r29, 0x3e	; 62
    1902:	28 97       	sbiw	r28, 0x08	; 8
    1904:	0f b6       	in	r0, 0x3f	; 63
    1906:	f8 94       	cli
    1908:	de bf       	out	0x3e, r29	; 62
    190a:	0f be       	out	0x3f, r0	; 63
    190c:	cd bf       	out	0x3d, r28	; 61
    190e:	89 83       	std	Y+1, r24	; 0x01
    1910:	6a 83       	std	Y+2, r22	; 0x02
    if (level == DIO_HIGH) {
    1912:	8a 81       	ldd	r24, Y+2	; 0x02
    1914:	81 30       	cpi	r24, 0x01	; 1
    1916:	99 f5       	brne	.+102    	; 0x197e <DIO_SetPortLevel+0x84>
        switch (port)
    1918:	89 81       	ldd	r24, Y+1	; 0x01
    191a:	28 2f       	mov	r18, r24
    191c:	30 e0       	ldi	r19, 0x00	; 0
    191e:	38 87       	std	Y+8, r19	; 0x08
    1920:	2f 83       	std	Y+7, r18	; 0x07
    1922:	8f 81       	ldd	r24, Y+7	; 0x07
    1924:	98 85       	ldd	r25, Y+8	; 0x08
    1926:	81 30       	cpi	r24, 0x01	; 1
    1928:	91 05       	cpc	r25, r1
    192a:	d1 f0       	breq	.+52     	; 0x1960 <DIO_SetPortLevel+0x66>
    192c:	2f 81       	ldd	r18, Y+7	; 0x07
    192e:	38 85       	ldd	r19, Y+8	; 0x08
    1930:	22 30       	cpi	r18, 0x02	; 2
    1932:	31 05       	cpc	r19, r1
    1934:	2c f4       	brge	.+10     	; 0x1940 <DIO_SetPortLevel+0x46>
    1936:	8f 81       	ldd	r24, Y+7	; 0x07
    1938:	98 85       	ldd	r25, Y+8	; 0x08
    193a:	00 97       	sbiw	r24, 0x00	; 0
    193c:	61 f0       	breq	.+24     	; 0x1956 <DIO_SetPortLevel+0x5c>
    193e:	83 c0       	rjmp	.+262    	; 0x1a46 <DIO_SetPortLevel+0x14c>
    1940:	2f 81       	ldd	r18, Y+7	; 0x07
    1942:	38 85       	ldd	r19, Y+8	; 0x08
    1944:	22 30       	cpi	r18, 0x02	; 2
    1946:	31 05       	cpc	r19, r1
    1948:	81 f0       	breq	.+32     	; 0x196a <DIO_SetPortLevel+0x70>
    194a:	8f 81       	ldd	r24, Y+7	; 0x07
    194c:	98 85       	ldd	r25, Y+8	; 0x08
    194e:	83 30       	cpi	r24, 0x03	; 3
    1950:	91 05       	cpc	r25, r1
    1952:	81 f0       	breq	.+32     	; 0x1974 <DIO_SetPortLevel+0x7a>
    1954:	78 c0       	rjmp	.+240    	; 0x1a46 <DIO_SetPortLevel+0x14c>
        {
        case DIO_PORTA:
            PORTA = 0xFF;
    1956:	eb e3       	ldi	r30, 0x3B	; 59
    1958:	f0 e0       	ldi	r31, 0x00	; 0
    195a:	8f ef       	ldi	r24, 0xFF	; 255
    195c:	80 83       	st	Z, r24
    195e:	73 c0       	rjmp	.+230    	; 0x1a46 <DIO_SetPortLevel+0x14c>
            break;
        case DIO_PORTB:
            PORTB = 0xFF;
    1960:	e8 e3       	ldi	r30, 0x38	; 56
    1962:	f0 e0       	ldi	r31, 0x00	; 0
    1964:	8f ef       	ldi	r24, 0xFF	; 255
    1966:	80 83       	st	Z, r24
    1968:	6e c0       	rjmp	.+220    	; 0x1a46 <DIO_SetPortLevel+0x14c>
            break;
        case DIO_PORTC:
            PORTC = 0xFF;
    196a:	e5 e3       	ldi	r30, 0x35	; 53
    196c:	f0 e0       	ldi	r31, 0x00	; 0
    196e:	8f ef       	ldi	r24, 0xFF	; 255
    1970:	80 83       	st	Z, r24
    1972:	69 c0       	rjmp	.+210    	; 0x1a46 <DIO_SetPortLevel+0x14c>
            break;
        case DIO_PORTD:
            PORTD = 0xFF;
    1974:	e2 e3       	ldi	r30, 0x32	; 50
    1976:	f0 e0       	ldi	r31, 0x00	; 0
    1978:	8f ef       	ldi	r24, 0xFF	; 255
    197a:	80 83       	st	Z, r24
    197c:	64 c0       	rjmp	.+200    	; 0x1a46 <DIO_SetPortLevel+0x14c>
            break;
        default:
            break;
        }
    }
    else if (level == DIO_LOW) {
    197e:	8a 81       	ldd	r24, Y+2	; 0x02
    1980:	88 23       	and	r24, r24
    1982:	79 f5       	brne	.+94     	; 0x19e2 <DIO_SetPortLevel+0xe8>
        switch (port)
    1984:	89 81       	ldd	r24, Y+1	; 0x01
    1986:	28 2f       	mov	r18, r24
    1988:	30 e0       	ldi	r19, 0x00	; 0
    198a:	3e 83       	std	Y+6, r19	; 0x06
    198c:	2d 83       	std	Y+5, r18	; 0x05
    198e:	8d 81       	ldd	r24, Y+5	; 0x05
    1990:	9e 81       	ldd	r25, Y+6	; 0x06
    1992:	81 30       	cpi	r24, 0x01	; 1
    1994:	91 05       	cpc	r25, r1
    1996:	c9 f0       	breq	.+50     	; 0x19ca <DIO_SetPortLevel+0xd0>
    1998:	2d 81       	ldd	r18, Y+5	; 0x05
    199a:	3e 81       	ldd	r19, Y+6	; 0x06
    199c:	22 30       	cpi	r18, 0x02	; 2
    199e:	31 05       	cpc	r19, r1
    19a0:	2c f4       	brge	.+10     	; 0x19ac <DIO_SetPortLevel+0xb2>
    19a2:	8d 81       	ldd	r24, Y+5	; 0x05
    19a4:	9e 81       	ldd	r25, Y+6	; 0x06
    19a6:	00 97       	sbiw	r24, 0x00	; 0
    19a8:	61 f0       	breq	.+24     	; 0x19c2 <DIO_SetPortLevel+0xc8>
    19aa:	4d c0       	rjmp	.+154    	; 0x1a46 <DIO_SetPortLevel+0x14c>
    19ac:	2d 81       	ldd	r18, Y+5	; 0x05
    19ae:	3e 81       	ldd	r19, Y+6	; 0x06
    19b0:	22 30       	cpi	r18, 0x02	; 2
    19b2:	31 05       	cpc	r19, r1
    19b4:	71 f0       	breq	.+28     	; 0x19d2 <DIO_SetPortLevel+0xd8>
    19b6:	8d 81       	ldd	r24, Y+5	; 0x05
    19b8:	9e 81       	ldd	r25, Y+6	; 0x06
    19ba:	83 30       	cpi	r24, 0x03	; 3
    19bc:	91 05       	cpc	r25, r1
    19be:	69 f0       	breq	.+26     	; 0x19da <DIO_SetPortLevel+0xe0>
    19c0:	42 c0       	rjmp	.+132    	; 0x1a46 <DIO_SetPortLevel+0x14c>
        {
        case DIO_PORTA:
            PORTA = 0x00;
    19c2:	eb e3       	ldi	r30, 0x3B	; 59
    19c4:	f0 e0       	ldi	r31, 0x00	; 0
    19c6:	10 82       	st	Z, r1
    19c8:	3e c0       	rjmp	.+124    	; 0x1a46 <DIO_SetPortLevel+0x14c>
            break;
        case DIO_PORTB:
            PORTB = 0x00;
    19ca:	e8 e3       	ldi	r30, 0x38	; 56
    19cc:	f0 e0       	ldi	r31, 0x00	; 0
    19ce:	10 82       	st	Z, r1
    19d0:	3a c0       	rjmp	.+116    	; 0x1a46 <DIO_SetPortLevel+0x14c>
            break;
        case DIO_PORTC:
            PORTC = 0x00;
    19d2:	e5 e3       	ldi	r30, 0x35	; 53
    19d4:	f0 e0       	ldi	r31, 0x00	; 0
    19d6:	10 82       	st	Z, r1
    19d8:	36 c0       	rjmp	.+108    	; 0x1a46 <DIO_SetPortLevel+0x14c>
            break;
        case DIO_PORTD:
            PORTD = 0x00;
    19da:	e2 e3       	ldi	r30, 0x32	; 50
    19dc:	f0 e0       	ldi	r31, 0x00	; 0
    19de:	10 82       	st	Z, r1
    19e0:	32 c0       	rjmp	.+100    	; 0x1a46 <DIO_SetPortLevel+0x14c>
        default:
            break;
        }
    }
    else {
        switch (port)
    19e2:	89 81       	ldd	r24, Y+1	; 0x01
    19e4:	28 2f       	mov	r18, r24
    19e6:	30 e0       	ldi	r19, 0x00	; 0
    19e8:	3c 83       	std	Y+4, r19	; 0x04
    19ea:	2b 83       	std	Y+3, r18	; 0x03
    19ec:	8b 81       	ldd	r24, Y+3	; 0x03
    19ee:	9c 81       	ldd	r25, Y+4	; 0x04
    19f0:	81 30       	cpi	r24, 0x01	; 1
    19f2:	91 05       	cpc	r25, r1
    19f4:	d1 f0       	breq	.+52     	; 0x1a2a <DIO_SetPortLevel+0x130>
    19f6:	2b 81       	ldd	r18, Y+3	; 0x03
    19f8:	3c 81       	ldd	r19, Y+4	; 0x04
    19fa:	22 30       	cpi	r18, 0x02	; 2
    19fc:	31 05       	cpc	r19, r1
    19fe:	2c f4       	brge	.+10     	; 0x1a0a <DIO_SetPortLevel+0x110>
    1a00:	8b 81       	ldd	r24, Y+3	; 0x03
    1a02:	9c 81       	ldd	r25, Y+4	; 0x04
    1a04:	00 97       	sbiw	r24, 0x00	; 0
    1a06:	61 f0       	breq	.+24     	; 0x1a20 <DIO_SetPortLevel+0x126>
    1a08:	1e c0       	rjmp	.+60     	; 0x1a46 <DIO_SetPortLevel+0x14c>
    1a0a:	2b 81       	ldd	r18, Y+3	; 0x03
    1a0c:	3c 81       	ldd	r19, Y+4	; 0x04
    1a0e:	22 30       	cpi	r18, 0x02	; 2
    1a10:	31 05       	cpc	r19, r1
    1a12:	81 f0       	breq	.+32     	; 0x1a34 <DIO_SetPortLevel+0x13a>
    1a14:	8b 81       	ldd	r24, Y+3	; 0x03
    1a16:	9c 81       	ldd	r25, Y+4	; 0x04
    1a18:	83 30       	cpi	r24, 0x03	; 3
    1a1a:	91 05       	cpc	r25, r1
    1a1c:	81 f0       	breq	.+32     	; 0x1a3e <DIO_SetPortLevel+0x144>
    1a1e:	13 c0       	rjmp	.+38     	; 0x1a46 <DIO_SetPortLevel+0x14c>
        {
        case DIO_PORTA:
            PORTA = level;
    1a20:	eb e3       	ldi	r30, 0x3B	; 59
    1a22:	f0 e0       	ldi	r31, 0x00	; 0
    1a24:	8a 81       	ldd	r24, Y+2	; 0x02
    1a26:	80 83       	st	Z, r24
    1a28:	0e c0       	rjmp	.+28     	; 0x1a46 <DIO_SetPortLevel+0x14c>
            break;
        case DIO_PORTB:
            PORTB = level;
    1a2a:	e8 e3       	ldi	r30, 0x38	; 56
    1a2c:	f0 e0       	ldi	r31, 0x00	; 0
    1a2e:	8a 81       	ldd	r24, Y+2	; 0x02
    1a30:	80 83       	st	Z, r24
    1a32:	09 c0       	rjmp	.+18     	; 0x1a46 <DIO_SetPortLevel+0x14c>
            break;
        case DIO_PORTC:
            PORTC = level;
    1a34:	e5 e3       	ldi	r30, 0x35	; 53
    1a36:	f0 e0       	ldi	r31, 0x00	; 0
    1a38:	8a 81       	ldd	r24, Y+2	; 0x02
    1a3a:	80 83       	st	Z, r24
    1a3c:	04 c0       	rjmp	.+8      	; 0x1a46 <DIO_SetPortLevel+0x14c>
            break;
        case DIO_PORTD:
            PORTD = level;
    1a3e:	e2 e3       	ldi	r30, 0x32	; 50
    1a40:	f0 e0       	ldi	r31, 0x00	; 0
    1a42:	8a 81       	ldd	r24, Y+2	; 0x02
    1a44:	80 83       	st	Z, r24
        default:
            break;
        }

    }
}
    1a46:	28 96       	adiw	r28, 0x08	; 8
    1a48:	0f b6       	in	r0, 0x3f	; 63
    1a4a:	f8 94       	cli
    1a4c:	de bf       	out	0x3e, r29	; 62
    1a4e:	0f be       	out	0x3f, r0	; 63
    1a50:	cd bf       	out	0x3d, r28	; 61
    1a52:	cf 91       	pop	r28
    1a54:	df 91       	pop	r29
    1a56:	08 95       	ret

00001a58 <DIO_ReadPinLevel>:



DIO_LevelType DIO_ReadPinLevel(DIO_PortType port, DIO_PinType pin) {
    1a58:	df 93       	push	r29
    1a5a:	cf 93       	push	r28
    1a5c:	00 d0       	rcall	.+0      	; 0x1a5e <DIO_ReadPinLevel+0x6>
    1a5e:	00 d0       	rcall	.+0      	; 0x1a60 <DIO_ReadPinLevel+0x8>
    1a60:	0f 92       	push	r0
    1a62:	cd b7       	in	r28, 0x3d	; 61
    1a64:	de b7       	in	r29, 0x3e	; 62
    1a66:	8a 83       	std	Y+2, r24	; 0x02
    1a68:	6b 83       	std	Y+3, r22	; 0x03
    DIO_LevelType result = DIO_LOW;
    1a6a:	19 82       	std	Y+1, r1	; 0x01
    switch (port)
    1a6c:	8a 81       	ldd	r24, Y+2	; 0x02
    1a6e:	28 2f       	mov	r18, r24
    1a70:	30 e0       	ldi	r19, 0x00	; 0
    1a72:	3d 83       	std	Y+5, r19	; 0x05
    1a74:	2c 83       	std	Y+4, r18	; 0x04
    1a76:	4c 81       	ldd	r20, Y+4	; 0x04
    1a78:	5d 81       	ldd	r21, Y+5	; 0x05
    1a7a:	41 30       	cpi	r20, 0x01	; 1
    1a7c:	51 05       	cpc	r21, r1
    1a7e:	41 f1       	breq	.+80     	; 0x1ad0 <DIO_ReadPinLevel+0x78>
    1a80:	8c 81       	ldd	r24, Y+4	; 0x04
    1a82:	9d 81       	ldd	r25, Y+5	; 0x05
    1a84:	82 30       	cpi	r24, 0x02	; 2
    1a86:	91 05       	cpc	r25, r1
    1a88:	34 f4       	brge	.+12     	; 0x1a96 <DIO_ReadPinLevel+0x3e>
    1a8a:	2c 81       	ldd	r18, Y+4	; 0x04
    1a8c:	3d 81       	ldd	r19, Y+5	; 0x05
    1a8e:	21 15       	cp	r18, r1
    1a90:	31 05       	cpc	r19, r1
    1a92:	61 f0       	breq	.+24     	; 0x1aac <DIO_ReadPinLevel+0x54>
    1a94:	52 c0       	rjmp	.+164    	; 0x1b3a <DIO_ReadPinLevel+0xe2>
    1a96:	4c 81       	ldd	r20, Y+4	; 0x04
    1a98:	5d 81       	ldd	r21, Y+5	; 0x05
    1a9a:	42 30       	cpi	r20, 0x02	; 2
    1a9c:	51 05       	cpc	r21, r1
    1a9e:	51 f1       	breq	.+84     	; 0x1af4 <DIO_ReadPinLevel+0x9c>
    1aa0:	8c 81       	ldd	r24, Y+4	; 0x04
    1aa2:	9d 81       	ldd	r25, Y+5	; 0x05
    1aa4:	83 30       	cpi	r24, 0x03	; 3
    1aa6:	91 05       	cpc	r25, r1
    1aa8:	b9 f1       	breq	.+110    	; 0x1b18 <DIO_ReadPinLevel+0xc0>
    1aaa:	47 c0       	rjmp	.+142    	; 0x1b3a <DIO_ReadPinLevel+0xe2>
    {
    case DIO_PORTA:
        result = GET_BIT(PINA, pin);
    1aac:	e9 e3       	ldi	r30, 0x39	; 57
    1aae:	f0 e0       	ldi	r31, 0x00	; 0
    1ab0:	80 81       	ld	r24, Z
    1ab2:	28 2f       	mov	r18, r24
    1ab4:	30 e0       	ldi	r19, 0x00	; 0
    1ab6:	8b 81       	ldd	r24, Y+3	; 0x03
    1ab8:	88 2f       	mov	r24, r24
    1aba:	90 e0       	ldi	r25, 0x00	; 0
    1abc:	a9 01       	movw	r20, r18
    1abe:	02 c0       	rjmp	.+4      	; 0x1ac4 <DIO_ReadPinLevel+0x6c>
    1ac0:	55 95       	asr	r21
    1ac2:	47 95       	ror	r20
    1ac4:	8a 95       	dec	r24
    1ac6:	e2 f7       	brpl	.-8      	; 0x1ac0 <DIO_ReadPinLevel+0x68>
    1ac8:	ca 01       	movw	r24, r20
    1aca:	81 70       	andi	r24, 0x01	; 1
    1acc:	89 83       	std	Y+1, r24	; 0x01
    1ace:	35 c0       	rjmp	.+106    	; 0x1b3a <DIO_ReadPinLevel+0xe2>
        break;
    case DIO_PORTB:
        result = GET_BIT(PINB, pin);
    1ad0:	e6 e3       	ldi	r30, 0x36	; 54
    1ad2:	f0 e0       	ldi	r31, 0x00	; 0
    1ad4:	80 81       	ld	r24, Z
    1ad6:	28 2f       	mov	r18, r24
    1ad8:	30 e0       	ldi	r19, 0x00	; 0
    1ada:	8b 81       	ldd	r24, Y+3	; 0x03
    1adc:	88 2f       	mov	r24, r24
    1ade:	90 e0       	ldi	r25, 0x00	; 0
    1ae0:	a9 01       	movw	r20, r18
    1ae2:	02 c0       	rjmp	.+4      	; 0x1ae8 <DIO_ReadPinLevel+0x90>
    1ae4:	55 95       	asr	r21
    1ae6:	47 95       	ror	r20
    1ae8:	8a 95       	dec	r24
    1aea:	e2 f7       	brpl	.-8      	; 0x1ae4 <DIO_ReadPinLevel+0x8c>
    1aec:	ca 01       	movw	r24, r20
    1aee:	81 70       	andi	r24, 0x01	; 1
    1af0:	89 83       	std	Y+1, r24	; 0x01
    1af2:	23 c0       	rjmp	.+70     	; 0x1b3a <DIO_ReadPinLevel+0xe2>
        break;
    case DIO_PORTC:
        result = GET_BIT(PINC, pin);
    1af4:	e3 e3       	ldi	r30, 0x33	; 51
    1af6:	f0 e0       	ldi	r31, 0x00	; 0
    1af8:	80 81       	ld	r24, Z
    1afa:	28 2f       	mov	r18, r24
    1afc:	30 e0       	ldi	r19, 0x00	; 0
    1afe:	8b 81       	ldd	r24, Y+3	; 0x03
    1b00:	88 2f       	mov	r24, r24
    1b02:	90 e0       	ldi	r25, 0x00	; 0
    1b04:	a9 01       	movw	r20, r18
    1b06:	02 c0       	rjmp	.+4      	; 0x1b0c <DIO_ReadPinLevel+0xb4>
    1b08:	55 95       	asr	r21
    1b0a:	47 95       	ror	r20
    1b0c:	8a 95       	dec	r24
    1b0e:	e2 f7       	brpl	.-8      	; 0x1b08 <DIO_ReadPinLevel+0xb0>
    1b10:	ca 01       	movw	r24, r20
    1b12:	81 70       	andi	r24, 0x01	; 1
    1b14:	89 83       	std	Y+1, r24	; 0x01
    1b16:	11 c0       	rjmp	.+34     	; 0x1b3a <DIO_ReadPinLevel+0xe2>
        break;
    case DIO_PORTD:
        result = GET_BIT(PIND, pin);
    1b18:	e0 e3       	ldi	r30, 0x30	; 48
    1b1a:	f0 e0       	ldi	r31, 0x00	; 0
    1b1c:	80 81       	ld	r24, Z
    1b1e:	28 2f       	mov	r18, r24
    1b20:	30 e0       	ldi	r19, 0x00	; 0
    1b22:	8b 81       	ldd	r24, Y+3	; 0x03
    1b24:	88 2f       	mov	r24, r24
    1b26:	90 e0       	ldi	r25, 0x00	; 0
    1b28:	a9 01       	movw	r20, r18
    1b2a:	02 c0       	rjmp	.+4      	; 0x1b30 <DIO_ReadPinLevel+0xd8>
    1b2c:	55 95       	asr	r21
    1b2e:	47 95       	ror	r20
    1b30:	8a 95       	dec	r24
    1b32:	e2 f7       	brpl	.-8      	; 0x1b2c <DIO_ReadPinLevel+0xd4>
    1b34:	ca 01       	movw	r24, r20
    1b36:	81 70       	andi	r24, 0x01	; 1
    1b38:	89 83       	std	Y+1, r24	; 0x01
        break;
    default:
        break;
    }
    return result;
    1b3a:	89 81       	ldd	r24, Y+1	; 0x01
}
    1b3c:	0f 90       	pop	r0
    1b3e:	0f 90       	pop	r0
    1b40:	0f 90       	pop	r0
    1b42:	0f 90       	pop	r0
    1b44:	0f 90       	pop	r0
    1b46:	cf 91       	pop	r28
    1b48:	df 91       	pop	r29
    1b4a:	08 95       	ret

00001b4c <DIO_ReadPortLevel>:

DIO_LevelType DIO_ReadPortLevel (DIO_PortType port) {
    1b4c:	df 93       	push	r29
    1b4e:	cf 93       	push	r28
    1b50:	00 d0       	rcall	.+0      	; 0x1b52 <DIO_ReadPortLevel+0x6>
    1b52:	00 d0       	rcall	.+0      	; 0x1b54 <DIO_ReadPortLevel+0x8>
    1b54:	cd b7       	in	r28, 0x3d	; 61
    1b56:	de b7       	in	r29, 0x3e	; 62
    1b58:	8a 83       	std	Y+2, r24	; 0x02
    u8 result = 0x00;
    1b5a:	19 82       	std	Y+1, r1	; 0x01
    switch (port)
    1b5c:	8a 81       	ldd	r24, Y+2	; 0x02
    1b5e:	28 2f       	mov	r18, r24
    1b60:	30 e0       	ldi	r19, 0x00	; 0
    1b62:	3c 83       	std	Y+4, r19	; 0x04
    1b64:	2b 83       	std	Y+3, r18	; 0x03
    1b66:	8b 81       	ldd	r24, Y+3	; 0x03
    1b68:	9c 81       	ldd	r25, Y+4	; 0x04
    1b6a:	81 30       	cpi	r24, 0x01	; 1
    1b6c:	91 05       	cpc	r25, r1
    1b6e:	49 f1       	breq	.+82     	; 0x1bc2 <DIO_ReadPortLevel+0x76>
    1b70:	2b 81       	ldd	r18, Y+3	; 0x03
    1b72:	3c 81       	ldd	r19, Y+4	; 0x04
    1b74:	22 30       	cpi	r18, 0x02	; 2
    1b76:	31 05       	cpc	r19, r1
    1b78:	2c f4       	brge	.+10     	; 0x1b84 <DIO_ReadPortLevel+0x38>
    1b7a:	8b 81       	ldd	r24, Y+3	; 0x03
    1b7c:	9c 81       	ldd	r25, Y+4	; 0x04
    1b7e:	00 97       	sbiw	r24, 0x00	; 0
    1b80:	61 f0       	breq	.+24     	; 0x1b9a <DIO_ReadPortLevel+0x4e>
    1b82:	5a c0       	rjmp	.+180    	; 0x1c38 <DIO_ReadPortLevel+0xec>
    1b84:	2b 81       	ldd	r18, Y+3	; 0x03
    1b86:	3c 81       	ldd	r19, Y+4	; 0x04
    1b88:	22 30       	cpi	r18, 0x02	; 2
    1b8a:	31 05       	cpc	r19, r1
    1b8c:	71 f1       	breq	.+92     	; 0x1bea <DIO_ReadPortLevel+0x9e>
    1b8e:	8b 81       	ldd	r24, Y+3	; 0x03
    1b90:	9c 81       	ldd	r25, Y+4	; 0x04
    1b92:	83 30       	cpi	r24, 0x03	; 3
    1b94:	91 05       	cpc	r25, r1
    1b96:	e9 f1       	breq	.+122    	; 0x1c12 <DIO_ReadPortLevel+0xc6>
    1b98:	4f c0       	rjmp	.+158    	; 0x1c38 <DIO_ReadPortLevel+0xec>
    {
    case DIO_PORTA:
        if (PINA == 0xFF) {
    1b9a:	e9 e3       	ldi	r30, 0x39	; 57
    1b9c:	f0 e0       	ldi	r31, 0x00	; 0
    1b9e:	80 81       	ld	r24, Z
    1ba0:	8f 3f       	cpi	r24, 0xFF	; 255
    1ba2:	19 f4       	brne	.+6      	; 0x1baa <DIO_ReadPortLevel+0x5e>
            result = DIO_HIGH;
    1ba4:	81 e0       	ldi	r24, 0x01	; 1
    1ba6:	89 83       	std	Y+1, r24	; 0x01
    1ba8:	47 c0       	rjmp	.+142    	; 0x1c38 <DIO_ReadPortLevel+0xec>
        }
        else if (PINA == 0x00) {
    1baa:	e9 e3       	ldi	r30, 0x39	; 57
    1bac:	f0 e0       	ldi	r31, 0x00	; 0
    1bae:	80 81       	ld	r24, Z
    1bb0:	88 23       	and	r24, r24
    1bb2:	11 f4       	brne	.+4      	; 0x1bb8 <DIO_ReadPortLevel+0x6c>
            result = DIO_LOW;
    1bb4:	19 82       	std	Y+1, r1	; 0x01
    1bb6:	40 c0       	rjmp	.+128    	; 0x1c38 <DIO_ReadPortLevel+0xec>
        }
        else {
            result = PINA;
    1bb8:	e9 e3       	ldi	r30, 0x39	; 57
    1bba:	f0 e0       	ldi	r31, 0x00	; 0
    1bbc:	80 81       	ld	r24, Z
    1bbe:	89 83       	std	Y+1, r24	; 0x01
    1bc0:	3b c0       	rjmp	.+118    	; 0x1c38 <DIO_ReadPortLevel+0xec>
        }
        break;
    case DIO_PORTB:
        if (PINB == 0xFF) {
    1bc2:	e6 e3       	ldi	r30, 0x36	; 54
    1bc4:	f0 e0       	ldi	r31, 0x00	; 0
    1bc6:	80 81       	ld	r24, Z
    1bc8:	8f 3f       	cpi	r24, 0xFF	; 255
    1bca:	19 f4       	brne	.+6      	; 0x1bd2 <DIO_ReadPortLevel+0x86>
            result = DIO_HIGH;
    1bcc:	81 e0       	ldi	r24, 0x01	; 1
    1bce:	89 83       	std	Y+1, r24	; 0x01
    1bd0:	33 c0       	rjmp	.+102    	; 0x1c38 <DIO_ReadPortLevel+0xec>
        }
        else if (PINB == 0x00) {
    1bd2:	e6 e3       	ldi	r30, 0x36	; 54
    1bd4:	f0 e0       	ldi	r31, 0x00	; 0
    1bd6:	80 81       	ld	r24, Z
    1bd8:	88 23       	and	r24, r24
    1bda:	11 f4       	brne	.+4      	; 0x1be0 <DIO_ReadPortLevel+0x94>
            result = DIO_LOW;
    1bdc:	19 82       	std	Y+1, r1	; 0x01
    1bde:	2c c0       	rjmp	.+88     	; 0x1c38 <DIO_ReadPortLevel+0xec>
        }
        else {
            result = PINB;
    1be0:	e6 e3       	ldi	r30, 0x36	; 54
    1be2:	f0 e0       	ldi	r31, 0x00	; 0
    1be4:	80 81       	ld	r24, Z
    1be6:	89 83       	std	Y+1, r24	; 0x01
    1be8:	27 c0       	rjmp	.+78     	; 0x1c38 <DIO_ReadPortLevel+0xec>
        }
        break;
    case DIO_PORTC:
        if (PINC == 0xFF) {
    1bea:	e3 e3       	ldi	r30, 0x33	; 51
    1bec:	f0 e0       	ldi	r31, 0x00	; 0
    1bee:	80 81       	ld	r24, Z
    1bf0:	8f 3f       	cpi	r24, 0xFF	; 255
    1bf2:	19 f4       	brne	.+6      	; 0x1bfa <DIO_ReadPortLevel+0xae>
            result = DIO_HIGH;
    1bf4:	81 e0       	ldi	r24, 0x01	; 1
    1bf6:	89 83       	std	Y+1, r24	; 0x01
    1bf8:	1f c0       	rjmp	.+62     	; 0x1c38 <DIO_ReadPortLevel+0xec>
        }
        else if (PINC == 0x00) {
    1bfa:	e3 e3       	ldi	r30, 0x33	; 51
    1bfc:	f0 e0       	ldi	r31, 0x00	; 0
    1bfe:	80 81       	ld	r24, Z
    1c00:	88 23       	and	r24, r24
    1c02:	11 f4       	brne	.+4      	; 0x1c08 <DIO_ReadPortLevel+0xbc>
            result = DIO_LOW;
    1c04:	19 82       	std	Y+1, r1	; 0x01
    1c06:	18 c0       	rjmp	.+48     	; 0x1c38 <DIO_ReadPortLevel+0xec>
        }
        else {
            result = PINC;
    1c08:	e3 e3       	ldi	r30, 0x33	; 51
    1c0a:	f0 e0       	ldi	r31, 0x00	; 0
    1c0c:	80 81       	ld	r24, Z
    1c0e:	89 83       	std	Y+1, r24	; 0x01
    1c10:	13 c0       	rjmp	.+38     	; 0x1c38 <DIO_ReadPortLevel+0xec>
        }
        break;
    case DIO_PORTD:
        if (PIND == 0xFF) {
    1c12:	e0 e3       	ldi	r30, 0x30	; 48
    1c14:	f0 e0       	ldi	r31, 0x00	; 0
    1c16:	80 81       	ld	r24, Z
    1c18:	8f 3f       	cpi	r24, 0xFF	; 255
    1c1a:	19 f4       	brne	.+6      	; 0x1c22 <DIO_ReadPortLevel+0xd6>
            result = DIO_HIGH;
    1c1c:	81 e0       	ldi	r24, 0x01	; 1
    1c1e:	89 83       	std	Y+1, r24	; 0x01
    1c20:	0b c0       	rjmp	.+22     	; 0x1c38 <DIO_ReadPortLevel+0xec>
        }
        else if (PIND == 0x00) {
    1c22:	e0 e3       	ldi	r30, 0x30	; 48
    1c24:	f0 e0       	ldi	r31, 0x00	; 0
    1c26:	80 81       	ld	r24, Z
    1c28:	88 23       	and	r24, r24
    1c2a:	11 f4       	brne	.+4      	; 0x1c30 <DIO_ReadPortLevel+0xe4>
            result = DIO_LOW;
    1c2c:	19 82       	std	Y+1, r1	; 0x01
    1c2e:	04 c0       	rjmp	.+8      	; 0x1c38 <DIO_ReadPortLevel+0xec>
        }
        else {
            result = PIND;
    1c30:	e0 e3       	ldi	r30, 0x30	; 48
    1c32:	f0 e0       	ldi	r31, 0x00	; 0
    1c34:	80 81       	ld	r24, Z
    1c36:	89 83       	std	Y+1, r24	; 0x01
        }
        break;
    default:
        break;
    }
    return result;
    1c38:	89 81       	ldd	r24, Y+1	; 0x01
}
    1c3a:	0f 90       	pop	r0
    1c3c:	0f 90       	pop	r0
    1c3e:	0f 90       	pop	r0
    1c40:	0f 90       	pop	r0
    1c42:	cf 91       	pop	r28
    1c44:	df 91       	pop	r29
    1c46:	08 95       	ret

00001c48 <EEPROM_Init>:
#include "I2C.h"
#include "EEPROM.h"
//#include "EEPROM_cfg.h"

void EEPROM_Init(void)
{
    1c48:	df 93       	push	r29
    1c4a:	cf 93       	push	r28
    1c4c:	cd b7       	in	r28, 0x3d	; 61
    1c4e:	de b7       	in	r29, 0x3e	; 62
	I2C_InitMaster();
    1c50:	0e 94 81 0f 	call	0x1f02	; 0x1f02 <I2C_InitMaster>
}
    1c54:	cf 91       	pop	r28
    1c56:	df 91       	pop	r29
    1c58:	08 95       	ret

00001c5a <EEPROM_Write_Byte>:

/*Send byte to EEPROM*/
void EEPROM_Write_Byte(u8 AddressSlave ,u8 AddressLocation,u8 Data)
{
    1c5a:	df 93       	push	r29
    1c5c:	cf 93       	push	r28
    1c5e:	00 d0       	rcall	.+0      	; 0x1c60 <EEPROM_Write_Byte+0x6>
    1c60:	0f 92       	push	r0
    1c62:	cd b7       	in	r28, 0x3d	; 61
    1c64:	de b7       	in	r29, 0x3e	; 62
    1c66:	89 83       	std	Y+1, r24	; 0x01
    1c68:	6a 83       	std	Y+2, r22	; 0x02
    1c6a:	4b 83       	std	Y+3, r20	; 0x03
	I2C_SendStartCondition();
    1c6c:	0e 94 93 0f 	call	0x1f26	; 0x1f26 <I2C_SendStartCondition>
	//write the device address and so we need to get A2 A1 A0 address bits and R/W=0 (write)
	I2C_MasterWriteDataByte(AddressSlave);
    1c70:	89 81       	ldd	r24, Y+1	; 0x01
    1c72:	0e 94 ae 0f 	call	0x1f5c	; 0x1f5c <I2C_MasterWriteDataByte>

	//send the required location address
	I2C_MasterWriteDataByte(AddressLocation);
    1c76:	8a 81       	ldd	r24, Y+2	; 0x02
    1c78:	0e 94 ae 0f 	call	0x1f5c	; 0x1f5c <I2C_MasterWriteDataByte>

	//write byte to eeprom
	I2C_MasterWriteDataByte(Data);
    1c7c:	8b 81       	ldd	r24, Y+3	; 0x03
    1c7e:	0e 94 ae 0f 	call	0x1f5c	; 0x1f5c <I2C_MasterWriteDataByte>

	I2C_SendStopCondition();
    1c82:	0e 94 a3 0f 	call	0x1f46	; 0x1f46 <I2C_SendStopCondition>
}
    1c86:	0f 90       	pop	r0
    1c88:	0f 90       	pop	r0
    1c8a:	0f 90       	pop	r0
    1c8c:	cf 91       	pop	r28
    1c8e:	df 91       	pop	r29
    1c90:	08 95       	ret

00001c92 <EEPROM_Read_Byte>:

u8 EEPROM_Read_Byte(u8 AddressSlave ,u8 AddressLocation)
{
    1c92:	df 93       	push	r29
    1c94:	cf 93       	push	r28
    1c96:	00 d0       	rcall	.+0      	; 0x1c98 <EEPROM_Read_Byte+0x6>
    1c98:	cd b7       	in	r28, 0x3d	; 61
    1c9a:	de b7       	in	r29, 0x3e	; 62
    1c9c:	89 83       	std	Y+1, r24	; 0x01
    1c9e:	6a 83       	std	Y+2, r22	; 0x02

	I2C_SendStartCondition();
    1ca0:	0e 94 93 0f 	call	0x1f26	; 0x1f26 <I2C_SendStartCondition>

	//write the device address and so we need to get A2 A1 A0 address bits and R/W=0 (write)
	I2C_MasterWriteDataByte(AddressSlave);
    1ca4:	89 81       	ldd	r24, Y+1	; 0x01
    1ca6:	0e 94 ae 0f 	call	0x1f5c	; 0x1f5c <I2C_MasterWriteDataByte>

	//send the required location address
	I2C_MasterWriteDataByte(AddressLocation);
    1caa:	8a 81       	ldd	r24, Y+2	; 0x02
    1cac:	0e 94 ae 0f 	call	0x1f5c	; 0x1f5c <I2C_MasterWriteDataByte>

	//send a repeated start
	I2C_SendStartCondition();
    1cb0:	0e 94 93 0f 	call	0x1f26	; 0x1f26 <I2C_SendStartCondition>

	//write the device address and so we need to get A2 A1 A0 address bits and R/W=1 (Read)
	SET_BIT(AddressSlave,0);
    1cb4:	89 81       	ldd	r24, Y+1	; 0x01
    1cb6:	81 60       	ori	r24, 0x01	; 1
    1cb8:	89 83       	std	Y+1, r24	; 0x01
	I2C_MasterWriteDataByte(AddressSlave);
    1cba:	89 81       	ldd	r24, Y+1	; 0x01
    1cbc:	0e 94 ae 0f 	call	0x1f5c	; 0x1f5c <I2C_MasterWriteDataByte>

	return I2C_MasterReadDataByteWith_NACK();
    1cc0:	0e 94 d8 0f 	call	0x1fb0	; 0x1fb0 <I2C_MasterReadDataByteWith_NACK>

	I2C_SendStopCondition();
}
    1cc4:	0f 90       	pop	r0
    1cc6:	0f 90       	pop	r0
    1cc8:	cf 91       	pop	r28
    1cca:	df 91       	pop	r29
    1ccc:	08 95       	ret

00001cce <__vector_1>:
void (*ExtInterrupt_INT0Callback) (void);
void (*ExtInterrupt_INT1Callback) (void);
void (*ExtInterrupt_INT2Callback) (void);

void __vector_1 (void) __attribute__ ((signal));
void __vector_1 (void) {
    1cce:	1f 92       	push	r1
    1cd0:	0f 92       	push	r0
    1cd2:	0f b6       	in	r0, 0x3f	; 63
    1cd4:	0f 92       	push	r0
    1cd6:	11 24       	eor	r1, r1
    1cd8:	2f 93       	push	r18
    1cda:	3f 93       	push	r19
    1cdc:	4f 93       	push	r20
    1cde:	5f 93       	push	r21
    1ce0:	6f 93       	push	r22
    1ce2:	7f 93       	push	r23
    1ce4:	8f 93       	push	r24
    1ce6:	9f 93       	push	r25
    1ce8:	af 93       	push	r26
    1cea:	bf 93       	push	r27
    1cec:	ef 93       	push	r30
    1cee:	ff 93       	push	r31
    1cf0:	df 93       	push	r29
    1cf2:	cf 93       	push	r28
    1cf4:	cd b7       	in	r28, 0x3d	; 61
    1cf6:	de b7       	in	r29, 0x3e	; 62
	ExtInterrupt_INT0Callback();
    1cf8:	e0 91 17 05 	lds	r30, 0x0517
    1cfc:	f0 91 18 05 	lds	r31, 0x0518
    1d00:	09 95       	icall
}
    1d02:	cf 91       	pop	r28
    1d04:	df 91       	pop	r29
    1d06:	ff 91       	pop	r31
    1d08:	ef 91       	pop	r30
    1d0a:	bf 91       	pop	r27
    1d0c:	af 91       	pop	r26
    1d0e:	9f 91       	pop	r25
    1d10:	8f 91       	pop	r24
    1d12:	7f 91       	pop	r23
    1d14:	6f 91       	pop	r22
    1d16:	5f 91       	pop	r21
    1d18:	4f 91       	pop	r20
    1d1a:	3f 91       	pop	r19
    1d1c:	2f 91       	pop	r18
    1d1e:	0f 90       	pop	r0
    1d20:	0f be       	out	0x3f, r0	; 63
    1d22:	0f 90       	pop	r0
    1d24:	1f 90       	pop	r1
    1d26:	18 95       	reti

00001d28 <__vector_2>:
void __vector_2 (void) __attribute__ ((signal));
void __vector_2 (void) {
    1d28:	1f 92       	push	r1
    1d2a:	0f 92       	push	r0
    1d2c:	0f b6       	in	r0, 0x3f	; 63
    1d2e:	0f 92       	push	r0
    1d30:	11 24       	eor	r1, r1
    1d32:	2f 93       	push	r18
    1d34:	3f 93       	push	r19
    1d36:	4f 93       	push	r20
    1d38:	5f 93       	push	r21
    1d3a:	6f 93       	push	r22
    1d3c:	7f 93       	push	r23
    1d3e:	8f 93       	push	r24
    1d40:	9f 93       	push	r25
    1d42:	af 93       	push	r26
    1d44:	bf 93       	push	r27
    1d46:	ef 93       	push	r30
    1d48:	ff 93       	push	r31
    1d4a:	df 93       	push	r29
    1d4c:	cf 93       	push	r28
    1d4e:	cd b7       	in	r28, 0x3d	; 61
    1d50:	de b7       	in	r29, 0x3e	; 62
	ExtInterrupt_INT1Callback();
    1d52:	e0 91 15 05 	lds	r30, 0x0515
    1d56:	f0 91 16 05 	lds	r31, 0x0516
    1d5a:	09 95       	icall
}
    1d5c:	cf 91       	pop	r28
    1d5e:	df 91       	pop	r29
    1d60:	ff 91       	pop	r31
    1d62:	ef 91       	pop	r30
    1d64:	bf 91       	pop	r27
    1d66:	af 91       	pop	r26
    1d68:	9f 91       	pop	r25
    1d6a:	8f 91       	pop	r24
    1d6c:	7f 91       	pop	r23
    1d6e:	6f 91       	pop	r22
    1d70:	5f 91       	pop	r21
    1d72:	4f 91       	pop	r20
    1d74:	3f 91       	pop	r19
    1d76:	2f 91       	pop	r18
    1d78:	0f 90       	pop	r0
    1d7a:	0f be       	out	0x3f, r0	; 63
    1d7c:	0f 90       	pop	r0
    1d7e:	1f 90       	pop	r1
    1d80:	18 95       	reti

00001d82 <__vector_3>:
void __vector_3 (void) __attribute__ ((signal));
void __vector_3 (void) {
    1d82:	1f 92       	push	r1
    1d84:	0f 92       	push	r0
    1d86:	0f b6       	in	r0, 0x3f	; 63
    1d88:	0f 92       	push	r0
    1d8a:	11 24       	eor	r1, r1
    1d8c:	2f 93       	push	r18
    1d8e:	3f 93       	push	r19
    1d90:	4f 93       	push	r20
    1d92:	5f 93       	push	r21
    1d94:	6f 93       	push	r22
    1d96:	7f 93       	push	r23
    1d98:	8f 93       	push	r24
    1d9a:	9f 93       	push	r25
    1d9c:	af 93       	push	r26
    1d9e:	bf 93       	push	r27
    1da0:	ef 93       	push	r30
    1da2:	ff 93       	push	r31
    1da4:	df 93       	push	r29
    1da6:	cf 93       	push	r28
    1da8:	cd b7       	in	r28, 0x3d	; 61
    1daa:	de b7       	in	r29, 0x3e	; 62
	ExtInterrupt_INT2Callback();
    1dac:	e0 91 19 05 	lds	r30, 0x0519
    1db0:	f0 91 1a 05 	lds	r31, 0x051A
    1db4:	09 95       	icall
}
    1db6:	cf 91       	pop	r28
    1db8:	df 91       	pop	r29
    1dba:	ff 91       	pop	r31
    1dbc:	ef 91       	pop	r30
    1dbe:	bf 91       	pop	r27
    1dc0:	af 91       	pop	r26
    1dc2:	9f 91       	pop	r25
    1dc4:	8f 91       	pop	r24
    1dc6:	7f 91       	pop	r23
    1dc8:	6f 91       	pop	r22
    1dca:	5f 91       	pop	r21
    1dcc:	4f 91       	pop	r20
    1dce:	3f 91       	pop	r19
    1dd0:	2f 91       	pop	r18
    1dd2:	0f 90       	pop	r0
    1dd4:	0f be       	out	0x3f, r0	; 63
    1dd6:	0f 90       	pop	r0
    1dd8:	1f 90       	pop	r1
    1dda:	18 95       	reti

00001ddc <ExtInterrupt_Init>:
//void __vector_1 (void) __attribute__ ((signal));
//void __vector_1 (void) {
//	// TODO
//}

void ExtInterrupt_Init(void) {
    1ddc:	df 93       	push	r29
    1dde:	cf 93       	push	r28
    1de0:	cd b7       	in	r28, 0x3d	; 61
    1de2:	de b7       	in	r29, 0x3e	; 62

    /*************************** Interrupt 0 Init ***************************/
#ifdef EXT_INTERRUPT_INT0
    /* Interrupt Enable */
#if EXT_INTERRUPT_INT0_INT_ENABLE == EXT_INTERRUPT_ENABLE
    SET_BIT(GICR, GICR_INT0); // External Interrupt Request 0 Enable
    1de4:	ab e5       	ldi	r26, 0x5B	; 91
    1de6:	b0 e0       	ldi	r27, 0x00	; 0
    1de8:	eb e5       	ldi	r30, 0x5B	; 91
    1dea:	f0 e0       	ldi	r31, 0x00	; 0
    1dec:	80 81       	ld	r24, Z
    1dee:	80 64       	ori	r24, 0x40	; 64
    1df0:	8c 93       	st	X, r24
    GlobalInterrupt_Enable(); // Global Interrupt Enable
    1df2:	0e 94 65 0f 	call	0x1eca	; 0x1eca <GlobalInterrupt_Enable>
    SET_BIT(MCUCR, MCUCR_ISC00);
    SET_BIT(MCUCR, MCUCR_ISC01);
    // TODO
#elif EXT_INTERRUPT_INT0_SENSE == EXT_INTERRUPT_ON_CHANGE
    /* Any logical change on INT0 generates an interrupt request. */
    SET_BIT(MCUCR, MCUCR_ISC00);
    1df6:	a5 e5       	ldi	r26, 0x55	; 85
    1df8:	b0 e0       	ldi	r27, 0x00	; 0
    1dfa:	e5 e5       	ldi	r30, 0x55	; 85
    1dfc:	f0 e0       	ldi	r31, 0x00	; 0
    1dfe:	80 81       	ld	r24, Z
    1e00:	81 60       	ori	r24, 0x01	; 1
    1e02:	8c 93       	st	X, r24
    CLR_BIT(MCUCR, MCUCR_ISC01);
    1e04:	a5 e5       	ldi	r26, 0x55	; 85
    1e06:	b0 e0       	ldi	r27, 0x00	; 0
    1e08:	e5 e5       	ldi	r30, 0x55	; 85
    1e0a:	f0 e0       	ldi	r31, 0x00	; 0
    1e0c:	80 81       	ld	r24, Z
    1e0e:	8d 7f       	andi	r24, 0xFD	; 253
    1e10:	8c 93       	st	X, r24
    /*************************** Interrupt 1 Init ***************************/

#ifdef EXT_INTERRUPT_INT1
    /* Interrupt Enable */
#if EXT_INTERRUPT_INT1_INT_ENABLE == EXT_INTERRUPT_ENABLE
    SET_BIT(GICR, GICR_INT1); // External Interrupt Request 1 Enable
    1e12:	ab e5       	ldi	r26, 0x5B	; 91
    1e14:	b0 e0       	ldi	r27, 0x00	; 0
    1e16:	eb e5       	ldi	r30, 0x5B	; 91
    1e18:	f0 e0       	ldi	r31, 0x00	; 0
    1e1a:	80 81       	ld	r24, Z
    1e1c:	80 68       	ori	r24, 0x80	; 128
    1e1e:	8c 93       	st	X, r24
#elif EXT_INTERRUPT_INT1_SENSE == EXT_INTERRUPT_RISING_EDGE
    SET_BIT(MCUCR, MCUCR_ISC10);
    SET_BIT(MCUCR, MCUCR_ISC11);
    // TODO
#elif EXT_INTERRUPT_INT1_SENSE == EXT_INTERRUPT_ON_CHANGE
    SET_BIT(MCUCR, MCUCR_ISC10);
    1e20:	a5 e5       	ldi	r26, 0x55	; 85
    1e22:	b0 e0       	ldi	r27, 0x00	; 0
    1e24:	e5 e5       	ldi	r30, 0x55	; 85
    1e26:	f0 e0       	ldi	r31, 0x00	; 0
    1e28:	80 81       	ld	r24, Z
    1e2a:	84 60       	ori	r24, 0x04	; 4
    1e2c:	8c 93       	st	X, r24
    CLR_BIT(MCUCR, MCUCR_ISC11);
    1e2e:	a5 e5       	ldi	r26, 0x55	; 85
    1e30:	b0 e0       	ldi	r27, 0x00	; 0
    1e32:	e5 e5       	ldi	r30, 0x55	; 85
    1e34:	f0 e0       	ldi	r31, 0x00	; 0
    1e36:	80 81       	ld	r24, Z
    1e38:	87 7f       	andi	r24, 0xF7	; 247
    1e3a:	8c 93       	st	X, r24

    /*************************** Interrupt 2 Init ***************************/
#ifdef EXT_INTERRUPT_INT2
    /* Interrupt Enable */
#if EXT_INTERRUPT_INT2_INT_ENABLE == EXT_INTERRUPT_ENABLE
    SET_BIT(GICR, GICR_INT2); // External Interrupt Request 1 Enable
    1e3c:	ab e5       	ldi	r26, 0x5B	; 91
    1e3e:	b0 e0       	ldi	r27, 0x00	; 0
    1e40:	eb e5       	ldi	r30, 0x5B	; 91
    1e42:	f0 e0       	ldi	r31, 0x00	; 0
    1e44:	80 81       	ld	r24, Z
    1e46:	80 62       	ori	r24, 0x20	; 32
    1e48:	8c 93       	st	X, r24
    // TODO
#endif

    /* Sense Control */
#if EXT_INTERRUPT_INT2_SENSE == EXT_INTERRUPT_FALLING_EDGE
    CLR_BIT(MCUCR, MCUCSR_ISC2);
    1e4a:	a5 e5       	ldi	r26, 0x55	; 85
    1e4c:	b0 e0       	ldi	r27, 0x00	; 0
    1e4e:	e5 e5       	ldi	r30, 0x55	; 85
    1e50:	f0 e0       	ldi	r31, 0x00	; 0
    1e52:	80 81       	ld	r24, Z
    1e54:	8f 7b       	andi	r24, 0xBF	; 191
    1e56:	8c 93       	st	X, r24
#endif
#endif



}
    1e58:	cf 91       	pop	r28
    1e5a:	df 91       	pop	r29
    1e5c:	08 95       	ret

00001e5e <ExtInterrupt_SetINT0Callback>:

void ExtInterrupt_SetINT0Callback (void (*callback) (void)) {
    1e5e:	df 93       	push	r29
    1e60:	cf 93       	push	r28
    1e62:	00 d0       	rcall	.+0      	; 0x1e64 <ExtInterrupt_SetINT0Callback+0x6>
    1e64:	cd b7       	in	r28, 0x3d	; 61
    1e66:	de b7       	in	r29, 0x3e	; 62
    1e68:	9a 83       	std	Y+2, r25	; 0x02
    1e6a:	89 83       	std	Y+1, r24	; 0x01
    ExtInterrupt_INT0Callback = callback;
    1e6c:	89 81       	ldd	r24, Y+1	; 0x01
    1e6e:	9a 81       	ldd	r25, Y+2	; 0x02
    1e70:	90 93 18 05 	sts	0x0518, r25
    1e74:	80 93 17 05 	sts	0x0517, r24
}
    1e78:	0f 90       	pop	r0
    1e7a:	0f 90       	pop	r0
    1e7c:	cf 91       	pop	r28
    1e7e:	df 91       	pop	r29
    1e80:	08 95       	ret

00001e82 <ExtInterrupt_SetINT1Callback>:

void ExtInterrupt_SetINT1Callback (void (*callback) (void)) {
    1e82:	df 93       	push	r29
    1e84:	cf 93       	push	r28
    1e86:	00 d0       	rcall	.+0      	; 0x1e88 <ExtInterrupt_SetINT1Callback+0x6>
    1e88:	cd b7       	in	r28, 0x3d	; 61
    1e8a:	de b7       	in	r29, 0x3e	; 62
    1e8c:	9a 83       	std	Y+2, r25	; 0x02
    1e8e:	89 83       	std	Y+1, r24	; 0x01
    ExtInterrupt_INT1Callback = callback;
    1e90:	89 81       	ldd	r24, Y+1	; 0x01
    1e92:	9a 81       	ldd	r25, Y+2	; 0x02
    1e94:	90 93 16 05 	sts	0x0516, r25
    1e98:	80 93 15 05 	sts	0x0515, r24
   // TODO
}
    1e9c:	0f 90       	pop	r0
    1e9e:	0f 90       	pop	r0
    1ea0:	cf 91       	pop	r28
    1ea2:	df 91       	pop	r29
    1ea4:	08 95       	ret

00001ea6 <ExtInterrupt_SetINT2Callback>:

void ExtInterrupt_SetINT2Callback (void (*callback) (void)) {
    1ea6:	df 93       	push	r29
    1ea8:	cf 93       	push	r28
    1eaa:	00 d0       	rcall	.+0      	; 0x1eac <ExtInterrupt_SetINT2Callback+0x6>
    1eac:	cd b7       	in	r28, 0x3d	; 61
    1eae:	de b7       	in	r29, 0x3e	; 62
    1eb0:	9a 83       	std	Y+2, r25	; 0x02
    1eb2:	89 83       	std	Y+1, r24	; 0x01
    ExtInterrupt_INT2Callback = callback;
    1eb4:	89 81       	ldd	r24, Y+1	; 0x01
    1eb6:	9a 81       	ldd	r25, Y+2	; 0x02
    1eb8:	90 93 1a 05 	sts	0x051A, r25
    1ebc:	80 93 19 05 	sts	0x0519, r24
   // TODO
}
    1ec0:	0f 90       	pop	r0
    1ec2:	0f 90       	pop	r0
    1ec4:	cf 91       	pop	r28
    1ec6:	df 91       	pop	r29
    1ec8:	08 95       	ret

00001eca <GlobalInterrupt_Enable>:
#include "std_types.h"
#include "macros.h"
#include "Registers.h"
#include "GlobalInterrupt.h"

void GlobalInterrupt_Enable(void) {
    1eca:	df 93       	push	r29
    1ecc:	cf 93       	push	r28
    1ece:	cd b7       	in	r28, 0x3d	; 61
    1ed0:	de b7       	in	r29, 0x3e	; 62
	SET_BIT(SREG, SREG_I);
    1ed2:	af e5       	ldi	r26, 0x5F	; 95
    1ed4:	b0 e0       	ldi	r27, 0x00	; 0
    1ed6:	ef e5       	ldi	r30, 0x5F	; 95
    1ed8:	f0 e0       	ldi	r31, 0x00	; 0
    1eda:	80 81       	ld	r24, Z
    1edc:	80 68       	ori	r24, 0x80	; 128
    1ede:	8c 93       	st	X, r24
}
    1ee0:	cf 91       	pop	r28
    1ee2:	df 91       	pop	r29
    1ee4:	08 95       	ret

00001ee6 <GlobalInterrupt_Disable>:

void GlobalInterrupt_Disable(void) {
    1ee6:	df 93       	push	r29
    1ee8:	cf 93       	push	r28
    1eea:	cd b7       	in	r28, 0x3d	; 61
    1eec:	de b7       	in	r29, 0x3e	; 62
	CLR_BIT(SREG, SREG_I);
    1eee:	af e5       	ldi	r26, 0x5F	; 95
    1ef0:	b0 e0       	ldi	r27, 0x00	; 0
    1ef2:	ef e5       	ldi	r30, 0x5F	; 95
    1ef4:	f0 e0       	ldi	r31, 0x00	; 0
    1ef6:	80 81       	ld	r24, Z
    1ef8:	8f 77       	andi	r24, 0x7F	; 127
    1efa:	8c 93       	st	X, r24
}
    1efc:	cf 91       	pop	r28
    1efe:	df 91       	pop	r29
    1f00:	08 95       	ret

00001f02 <I2C_InitMaster>:
#include "Registers.h"
#include "I2C.h"
//#include "I2C_cfg.h"

void I2C_InitMaster(void)
{
    1f02:	df 93       	push	r29
    1f04:	cf 93       	push	r28
    1f06:	cd b7       	in	r28, 0x3d	; 61
    1f08:	de b7       	in	r29, 0x3e	; 62
	/* Bit Rate: 400.000 kbps using zero pre-scaler TWPS=00 and F_CPU=8Mhz */
	TWBR = 0x02;
    1f0a:	e0 e2       	ldi	r30, 0x20	; 32
    1f0c:	f0 e0       	ldi	r31, 0x00	; 0
    1f0e:	82 e0       	ldi	r24, 0x02	; 2
    1f10:	80 83       	st	Z, r24
	TWSR = 0x00;
    1f12:	e1 e2       	ldi	r30, 0x21	; 33
    1f14:	f0 e0       	ldi	r31, 0x00	; 0
    1f16:	10 82       	st	Z, r1

	TWCR = (1<<2); /* enable TWI */
    1f18:	e6 e5       	ldi	r30, 0x56	; 86
    1f1a:	f0 e0       	ldi	r31, 0x00	; 0
    1f1c:	84 e0       	ldi	r24, 0x04	; 4
    1f1e:	80 83       	st	Z, r24
}
    1f20:	cf 91       	pop	r28
    1f22:	df 91       	pop	r29
    1f24:	08 95       	ret

00001f26 <I2C_SendStartCondition>:
void I2C_SendStartCondition(void)
{
    1f26:	df 93       	push	r29
    1f28:	cf 93       	push	r28
    1f2a:	cd b7       	in	r28, 0x3d	; 61
    1f2c:	de b7       	in	r29, 0x3e	; 62
	/*
	 * Clear the TWINT flag before sending the start bit TWINT=1
	 * send the start bit by TWSTA=1
	 * Enable TWI Module TWEN=1
	 */
	TWCR = (1 << 7) | (1 << 5) | (1 << 2);
    1f2e:	e6 e5       	ldi	r30, 0x56	; 86
    1f30:	f0 e0       	ldi	r31, 0x00	; 0
    1f32:	84 ea       	ldi	r24, 0xA4	; 164
    1f34:	80 83       	st	Z, r24
	/* Wait for TWINT flag set in TWCR Register (start bit is send successfully) */
	while(GET_BIT(TWCR,7)==0);
    1f36:	e6 e5       	ldi	r30, 0x56	; 86
    1f38:	f0 e0       	ldi	r31, 0x00	; 0
    1f3a:	80 81       	ld	r24, Z
    1f3c:	88 23       	and	r24, r24
    1f3e:	dc f7       	brge	.-10     	; 0x1f36 <I2C_SendStartCondition+0x10>
}
    1f40:	cf 91       	pop	r28
    1f42:	df 91       	pop	r29
    1f44:	08 95       	ret

00001f46 <I2C_SendStopCondition>:
void I2C_SendStopCondition(void)
{
    1f46:	df 93       	push	r29
    1f48:	cf 93       	push	r28
    1f4a:	cd b7       	in	r28, 0x3d	; 61
    1f4c:	de b7       	in	r29, 0x3e	; 62
	 *  Enable TWI Module TWEN=1 ---> //SET_BIT(TWCR,2);
		        Sent stop condition on the bus ---> //SET_BIT(TWCR,4);
		        Clear the interrupt flag To start the previous operation
		         //SET_BIT(TWCR,7);
	 */
	TWCR = (1 << 7) | (1 << 4) | (1 << 2);
    1f4e:	e6 e5       	ldi	r30, 0x56	; 86
    1f50:	f0 e0       	ldi	r31, 0x00	; 0
    1f52:	84 e9       	ldi	r24, 0x94	; 148
    1f54:	80 83       	st	Z, r24
}
    1f56:	cf 91       	pop	r28
    1f58:	df 91       	pop	r29
    1f5a:	08 95       	ret

00001f5c <I2C_MasterWriteDataByte>:
void I2C_MasterWriteDataByte(u8 Data)
{
    1f5c:	df 93       	push	r29
    1f5e:	cf 93       	push	r28
    1f60:	0f 92       	push	r0
    1f62:	cd b7       	in	r28, 0x3d	; 61
    1f64:	de b7       	in	r29, 0x3e	; 62
    1f66:	89 83       	std	Y+1, r24	; 0x01
	/* Put data On TWI data Register */
	TWDR = Data;
    1f68:	e3 e2       	ldi	r30, 0x23	; 35
    1f6a:	f0 e0       	ldi	r31, 0x00	; 0
    1f6c:	89 81       	ldd	r24, Y+1	; 0x01
    1f6e:	80 83       	st	Z, r24
	/*
	 * Clear the TWINT flag before sending the data TWINT=1
	 * Enable TWI Module TWEN=1
	 */
	TWCR = (1 << 7) | (1 << 2);
    1f70:	e6 e5       	ldi	r30, 0x56	; 86
    1f72:	f0 e0       	ldi	r31, 0x00	; 0
    1f74:	84 e8       	ldi	r24, 0x84	; 132
    1f76:	80 83       	st	Z, r24
	/* Wait for TWINT flag set in TWCR Register(data is send successfully) */
	while(GET_BIT(TWCR,7)==0);
    1f78:	e6 e5       	ldi	r30, 0x56	; 86
    1f7a:	f0 e0       	ldi	r31, 0x00	; 0
    1f7c:	80 81       	ld	r24, Z
    1f7e:	88 23       	and	r24, r24
    1f80:	dc f7       	brge	.-10     	; 0x1f78 <I2C_MasterWriteDataByte+0x1c>
}
    1f82:	0f 90       	pop	r0
    1f84:	cf 91       	pop	r28
    1f86:	df 91       	pop	r29
    1f88:	08 95       	ret

00001f8a <I2C_MasterReadDataByteWith_ACK>:
u8   I2C_MasterReadDataByteWith_ACK(void)
{
    1f8a:	df 93       	push	r29
    1f8c:	cf 93       	push	r28
    1f8e:	cd b7       	in	r28, 0x3d	; 61
    1f90:	de b7       	in	r29, 0x3e	; 62
	 * --------------------------------------------
	 *     Enable Acknowledge bit --> //SET_BIT(TWCR,6);
	 *     Clear the interrupt flag To start the previous operation --> //SET_BIT(TWCR,7);
	 *     Enable TWI Module TWEN=1 -->//SET_BIT(TWCR,2);
	 */
	TWCR = (1 << 7) | (1 << 2) | (1 << 6);
    1f92:	e6 e5       	ldi	r30, 0x56	; 86
    1f94:	f0 e0       	ldi	r31, 0x00	; 0
    1f96:	84 ec       	ldi	r24, 0xC4	; 196
    1f98:	80 83       	st	Z, r24

	/* Wait for TWINT flag set in TWCR Register (data received successfully) */
	while(GET_BIT(TWCR,7)==0);
    1f9a:	e6 e5       	ldi	r30, 0x56	; 86
    1f9c:	f0 e0       	ldi	r31, 0x00	; 0
    1f9e:	80 81       	ld	r24, Z
    1fa0:	88 23       	and	r24, r24
    1fa2:	dc f7       	brge	.-10     	; 0x1f9a <I2C_MasterReadDataByteWith_ACK+0x10>
	/* Read Data */
	return TWDR;
    1fa4:	e3 e2       	ldi	r30, 0x23	; 35
    1fa6:	f0 e0       	ldi	r31, 0x00	; 0
    1fa8:	80 81       	ld	r24, Z
}
    1faa:	cf 91       	pop	r28
    1fac:	df 91       	pop	r29
    1fae:	08 95       	ret

00001fb0 <I2C_MasterReadDataByteWith_NACK>:
u8   I2C_MasterReadDataByteWith_NACK(void)
{
    1fb0:	df 93       	push	r29
    1fb2:	cf 93       	push	r28
    1fb4:	cd b7       	in	r28, 0x3d	; 61
    1fb6:	de b7       	in	r29, 0x3e	; 62
	 * -------------------------------------------
	 * 	 * Disable Acknowledge bit --> //CLR_BIT(TWCR,6);
	 *     Clear the interrupt flag To start the previous operation --> //SET_BIT(TWCR,7);
	 *     Enable TWI Module TWEN=1 -->//SET_BIT(TWCR,2);
	 */
	TWCR = (1 << 7) | (1 << 2);
    1fb8:	e6 e5       	ldi	r30, 0x56	; 86
    1fba:	f0 e0       	ldi	r31, 0x00	; 0
    1fbc:	84 e8       	ldi	r24, 0x84	; 132
    1fbe:	80 83       	st	Z, r24
	/* Wait for TWINT flag set in TWCR Register (data received successfully) */
	while(GET_BIT(TWCR,7)==0);
    1fc0:	e6 e5       	ldi	r30, 0x56	; 86
    1fc2:	f0 e0       	ldi	r31, 0x00	; 0
    1fc4:	80 81       	ld	r24, Z
    1fc6:	88 23       	and	r24, r24
    1fc8:	dc f7       	brge	.-10     	; 0x1fc0 <I2C_MasterReadDataByteWith_NACK+0x10>
	/* Read Data */
	return TWDR;
    1fca:	e3 e2       	ldi	r30, 0x23	; 35
    1fcc:	f0 e0       	ldi	r31, 0x00	; 0
    1fce:	80 81       	ld	r24, Z
}
    1fd0:	cf 91       	pop	r28
    1fd2:	df 91       	pop	r29
    1fd4:	08 95       	ret

00001fd6 <Keypad_Init>:
#include "std_types.h"
#include "macros.h"
#include "DIO.h"
#include "Keypad.h"

void Keypad_Init(void) {
    1fd6:	df 93       	push	r29
    1fd8:	cf 93       	push	r28
    1fda:	cd b7       	in	r28, 0x3d	; 61
    1fdc:	de b7       	in	r29, 0x3e	; 62
    /* Set all rows to input pullup */
    DIO_SetPinMode(KEYPAD_PIN_R0, DIO_INPUT_PULLUP);
    1fde:	83 e0       	ldi	r24, 0x03	; 3
    1fe0:	60 e0       	ldi	r22, 0x00	; 0
    1fe2:	41 e0       	ldi	r20, 0x01	; 1
    1fe4:	0e 94 6f 08 	call	0x10de	; 0x10de <DIO_SetPinMode>
    DIO_SetPinMode(KEYPAD_PIN_R1, DIO_INPUT_PULLUP);
    1fe8:	83 e0       	ldi	r24, 0x03	; 3
    1fea:	61 e0       	ldi	r22, 0x01	; 1
    1fec:	41 e0       	ldi	r20, 0x01	; 1
    1fee:	0e 94 6f 08 	call	0x10de	; 0x10de <DIO_SetPinMode>
    DIO_SetPinMode(KEYPAD_PIN_R2, DIO_INPUT_PULLUP);
    1ff2:	83 e0       	ldi	r24, 0x03	; 3
    1ff4:	62 e0       	ldi	r22, 0x02	; 2
    1ff6:	41 e0       	ldi	r20, 0x01	; 1
    1ff8:	0e 94 6f 08 	call	0x10de	; 0x10de <DIO_SetPinMode>
    DIO_SetPinMode(KEYPAD_PIN_R3, DIO_INPUT_PULLUP);
    1ffc:	83 e0       	ldi	r24, 0x03	; 3
    1ffe:	63 e0       	ldi	r22, 0x03	; 3
    2000:	41 e0       	ldi	r20, 0x01	; 1
    2002:	0e 94 6f 08 	call	0x10de	; 0x10de <DIO_SetPinMode>
    /* Set all columns to output */
    DIO_SetPinMode(KEYPAD_PIN_C0, DIO_OUTPUT);
    2006:	83 e0       	ldi	r24, 0x03	; 3
    2008:	64 e0       	ldi	r22, 0x04	; 4
    200a:	42 e0       	ldi	r20, 0x02	; 2
    200c:	0e 94 6f 08 	call	0x10de	; 0x10de <DIO_SetPinMode>
    DIO_SetPinMode(KEYPAD_PIN_C1, DIO_OUTPUT);
    2010:	83 e0       	ldi	r24, 0x03	; 3
    2012:	65 e0       	ldi	r22, 0x05	; 5
    2014:	42 e0       	ldi	r20, 0x02	; 2
    2016:	0e 94 6f 08 	call	0x10de	; 0x10de <DIO_SetPinMode>
    DIO_SetPinMode(KEYPAD_PIN_C2, DIO_OUTPUT);
    201a:	83 e0       	ldi	r24, 0x03	; 3
    201c:	66 e0       	ldi	r22, 0x06	; 6
    201e:	42 e0       	ldi	r20, 0x02	; 2
    2020:	0e 94 6f 08 	call	0x10de	; 0x10de <DIO_SetPinMode>
    DIO_SetPinMode(KEYPAD_PIN_C3, DIO_OUTPUT);
    2024:	83 e0       	ldi	r24, 0x03	; 3
    2026:	67 e0       	ldi	r22, 0x07	; 7
    2028:	42 e0       	ldi	r20, 0x02	; 2
    202a:	0e 94 6f 08 	call	0x10de	; 0x10de <DIO_SetPinMode>
}
    202e:	cf 91       	pop	r28
    2030:	df 91       	pop	r29
    2032:	08 95       	ret

00002034 <Keypad_GetButtonState>:
	low  -> Pressed

*/


Keypad_StateType Keypad_GetButtonState(Keypad_ButtonType button) {
    2034:	df 93       	push	r29
    2036:	cf 93       	push	r28
    2038:	cd b7       	in	r28, 0x3d	; 61
    203a:	de b7       	in	r29, 0x3e	; 62
    203c:	28 97       	sbiw	r28, 0x08	; 8
    203e:	0f b6       	in	r0, 0x3f	; 63
    2040:	f8 94       	cli
    2042:	de bf       	out	0x3e, r29	; 62
    2044:	0f be       	out	0x3f, r0	; 63
    2046:	cd bf       	out	0x3d, r28	; 61
    2048:	8c 83       	std	Y+4, r24	; 0x04
    Keypad_StateType state = KEYPAD_STATE_NOT_PRESSED;
    204a:	81 e0       	ldi	r24, 0x01	; 1
    204c:	8b 83       	std	Y+3, r24	; 0x03
    u8 row = button / 4;
    204e:	8c 81       	ldd	r24, Y+4	; 0x04
    2050:	86 95       	lsr	r24
    2052:	86 95       	lsr	r24
    2054:	8a 83       	std	Y+2, r24	; 0x02
    u8 column = button % 4;
    2056:	8c 81       	ldd	r24, Y+4	; 0x04
    2058:	83 70       	andi	r24, 0x03	; 3
    205a:	89 83       	std	Y+1, r24	; 0x01
    DIO_SetPinLevel(KEYPAD_PIN_C0, DIO_HIGH);
    205c:	83 e0       	ldi	r24, 0x03	; 3
    205e:	64 e0       	ldi	r22, 0x04	; 4
    2060:	41 e0       	ldi	r20, 0x01	; 1
    2062:	0e 94 7d 0b 	call	0x16fa	; 0x16fa <DIO_SetPinLevel>
    DIO_SetPinLevel(KEYPAD_PIN_C1, DIO_HIGH);
    2066:	83 e0       	ldi	r24, 0x03	; 3
    2068:	65 e0       	ldi	r22, 0x05	; 5
    206a:	41 e0       	ldi	r20, 0x01	; 1
    206c:	0e 94 7d 0b 	call	0x16fa	; 0x16fa <DIO_SetPinLevel>
    DIO_SetPinLevel(KEYPAD_PIN_C2, DIO_HIGH);
    2070:	83 e0       	ldi	r24, 0x03	; 3
    2072:	66 e0       	ldi	r22, 0x06	; 6
    2074:	41 e0       	ldi	r20, 0x01	; 1
    2076:	0e 94 7d 0b 	call	0x16fa	; 0x16fa <DIO_SetPinLevel>
    DIO_SetPinLevel(KEYPAD_PIN_C3, DIO_HIGH);
    207a:	83 e0       	ldi	r24, 0x03	; 3
    207c:	67 e0       	ldi	r22, 0x07	; 7
    207e:	41 e0       	ldi	r20, 0x01	; 1
    2080:	0e 94 7d 0b 	call	0x16fa	; 0x16fa <DIO_SetPinLevel>
    switch (column)
    2084:	89 81       	ldd	r24, Y+1	; 0x01
    2086:	28 2f       	mov	r18, r24
    2088:	30 e0       	ldi	r19, 0x00	; 0
    208a:	38 87       	std	Y+8, r19	; 0x08
    208c:	2f 83       	std	Y+7, r18	; 0x07
    208e:	8f 81       	ldd	r24, Y+7	; 0x07
    2090:	98 85       	ldd	r25, Y+8	; 0x08
    2092:	81 30       	cpi	r24, 0x01	; 1
    2094:	91 05       	cpc	r25, r1
    2096:	d9 f0       	breq	.+54     	; 0x20ce <Keypad_GetButtonState+0x9a>
    2098:	2f 81       	ldd	r18, Y+7	; 0x07
    209a:	38 85       	ldd	r19, Y+8	; 0x08
    209c:	22 30       	cpi	r18, 0x02	; 2
    209e:	31 05       	cpc	r19, r1
    20a0:	2c f4       	brge	.+10     	; 0x20ac <Keypad_GetButtonState+0x78>
    20a2:	8f 81       	ldd	r24, Y+7	; 0x07
    20a4:	98 85       	ldd	r25, Y+8	; 0x08
    20a6:	00 97       	sbiw	r24, 0x00	; 0
    20a8:	61 f0       	breq	.+24     	; 0x20c2 <Keypad_GetButtonState+0x8e>
    20aa:	22 c0       	rjmp	.+68     	; 0x20f0 <Keypad_GetButtonState+0xbc>
    20ac:	2f 81       	ldd	r18, Y+7	; 0x07
    20ae:	38 85       	ldd	r19, Y+8	; 0x08
    20b0:	22 30       	cpi	r18, 0x02	; 2
    20b2:	31 05       	cpc	r19, r1
    20b4:	91 f0       	breq	.+36     	; 0x20da <Keypad_GetButtonState+0xa6>
    20b6:	8f 81       	ldd	r24, Y+7	; 0x07
    20b8:	98 85       	ldd	r25, Y+8	; 0x08
    20ba:	83 30       	cpi	r24, 0x03	; 3
    20bc:	91 05       	cpc	r25, r1
    20be:	99 f0       	breq	.+38     	; 0x20e6 <Keypad_GetButtonState+0xb2>
    20c0:	17 c0       	rjmp	.+46     	; 0x20f0 <Keypad_GetButtonState+0xbc>
    {
    case 0:
        DIO_SetPinLevel(KEYPAD_PIN_C0, DIO_LOW);
    20c2:	83 e0       	ldi	r24, 0x03	; 3
    20c4:	64 e0       	ldi	r22, 0x04	; 4
    20c6:	40 e0       	ldi	r20, 0x00	; 0
    20c8:	0e 94 7d 0b 	call	0x16fa	; 0x16fa <DIO_SetPinLevel>
    20cc:	11 c0       	rjmp	.+34     	; 0x20f0 <Keypad_GetButtonState+0xbc>
        break;
    case 1:
        DIO_SetPinLevel(KEYPAD_PIN_C1, DIO_LOW);
    20ce:	83 e0       	ldi	r24, 0x03	; 3
    20d0:	65 e0       	ldi	r22, 0x05	; 5
    20d2:	40 e0       	ldi	r20, 0x00	; 0
    20d4:	0e 94 7d 0b 	call	0x16fa	; 0x16fa <DIO_SetPinLevel>
    20d8:	0b c0       	rjmp	.+22     	; 0x20f0 <Keypad_GetButtonState+0xbc>
        break;
    case 2:
        DIO_SetPinLevel(KEYPAD_PIN_C2, DIO_LOW);
    20da:	83 e0       	ldi	r24, 0x03	; 3
    20dc:	66 e0       	ldi	r22, 0x06	; 6
    20de:	40 e0       	ldi	r20, 0x00	; 0
    20e0:	0e 94 7d 0b 	call	0x16fa	; 0x16fa <DIO_SetPinLevel>
    20e4:	05 c0       	rjmp	.+10     	; 0x20f0 <Keypad_GetButtonState+0xbc>
        break;
    case 3:
        DIO_SetPinLevel(KEYPAD_PIN_C3, DIO_LOW);
    20e6:	83 e0       	ldi	r24, 0x03	; 3
    20e8:	67 e0       	ldi	r22, 0x07	; 7
    20ea:	40 e0       	ldi	r20, 0x00	; 0
    20ec:	0e 94 7d 0b 	call	0x16fa	; 0x16fa <DIO_SetPinLevel>
        break;
    default:
        break;
    }
    switch (row)
    20f0:	8a 81       	ldd	r24, Y+2	; 0x02
    20f2:	28 2f       	mov	r18, r24
    20f4:	30 e0       	ldi	r19, 0x00	; 0
    20f6:	3e 83       	std	Y+6, r19	; 0x06
    20f8:	2d 83       	std	Y+5, r18	; 0x05
    20fa:	8d 81       	ldd	r24, Y+5	; 0x05
    20fc:	9e 81       	ldd	r25, Y+6	; 0x06
    20fe:	81 30       	cpi	r24, 0x01	; 1
    2100:	91 05       	cpc	r25, r1
    2102:	e9 f0       	breq	.+58     	; 0x213e <Keypad_GetButtonState+0x10a>
    2104:	2d 81       	ldd	r18, Y+5	; 0x05
    2106:	3e 81       	ldd	r19, Y+6	; 0x06
    2108:	22 30       	cpi	r18, 0x02	; 2
    210a:	31 05       	cpc	r19, r1
    210c:	2c f4       	brge	.+10     	; 0x2118 <Keypad_GetButtonState+0xe4>
    210e:	8d 81       	ldd	r24, Y+5	; 0x05
    2110:	9e 81       	ldd	r25, Y+6	; 0x06
    2112:	00 97       	sbiw	r24, 0x00	; 0
    2114:	61 f0       	breq	.+24     	; 0x212e <Keypad_GetButtonState+0xfa>
    2116:	2a c0       	rjmp	.+84     	; 0x216c <Keypad_GetButtonState+0x138>
    2118:	2d 81       	ldd	r18, Y+5	; 0x05
    211a:	3e 81       	ldd	r19, Y+6	; 0x06
    211c:	22 30       	cpi	r18, 0x02	; 2
    211e:	31 05       	cpc	r19, r1
    2120:	b1 f0       	breq	.+44     	; 0x214e <Keypad_GetButtonState+0x11a>
    2122:	8d 81       	ldd	r24, Y+5	; 0x05
    2124:	9e 81       	ldd	r25, Y+6	; 0x06
    2126:	83 30       	cpi	r24, 0x03	; 3
    2128:	91 05       	cpc	r25, r1
    212a:	c9 f0       	breq	.+50     	; 0x215e <Keypad_GetButtonState+0x12a>
    212c:	1f c0       	rjmp	.+62     	; 0x216c <Keypad_GetButtonState+0x138>
    {
    case 0:
        if (DIO_ReadPinLevel(KEYPAD_PIN_R0) == DIO_LOW) {
    212e:	83 e0       	ldi	r24, 0x03	; 3
    2130:	60 e0       	ldi	r22, 0x00	; 0
    2132:	0e 94 2c 0d 	call	0x1a58	; 0x1a58 <DIO_ReadPinLevel>
    2136:	88 23       	and	r24, r24
    2138:	c9 f4       	brne	.+50     	; 0x216c <Keypad_GetButtonState+0x138>
            state = KEYPAD_STATE_PRESSED;
    213a:	1b 82       	std	Y+3, r1	; 0x03
    213c:	17 c0       	rjmp	.+46     	; 0x216c <Keypad_GetButtonState+0x138>
        }
        break;
    case 1:
        if (DIO_ReadPinLevel(KEYPAD_PIN_R1) == DIO_LOW) {
    213e:	83 e0       	ldi	r24, 0x03	; 3
    2140:	61 e0       	ldi	r22, 0x01	; 1
    2142:	0e 94 2c 0d 	call	0x1a58	; 0x1a58 <DIO_ReadPinLevel>
    2146:	88 23       	and	r24, r24
    2148:	89 f4       	brne	.+34     	; 0x216c <Keypad_GetButtonState+0x138>
            state = KEYPAD_STATE_PRESSED;
    214a:	1b 82       	std	Y+3, r1	; 0x03
    214c:	0f c0       	rjmp	.+30     	; 0x216c <Keypad_GetButtonState+0x138>
        }
        break;
    case 2:
        if (DIO_ReadPinLevel(KEYPAD_PIN_R2) == DIO_LOW) {
    214e:	83 e0       	ldi	r24, 0x03	; 3
    2150:	62 e0       	ldi	r22, 0x02	; 2
    2152:	0e 94 2c 0d 	call	0x1a58	; 0x1a58 <DIO_ReadPinLevel>
    2156:	88 23       	and	r24, r24
    2158:	49 f4       	brne	.+18     	; 0x216c <Keypad_GetButtonState+0x138>
            state = KEYPAD_STATE_PRESSED;
    215a:	1b 82       	std	Y+3, r1	; 0x03
    215c:	07 c0       	rjmp	.+14     	; 0x216c <Keypad_GetButtonState+0x138>
        }
        break;
    case 3:
        if (DIO_ReadPinLevel(KEYPAD_PIN_R3) == DIO_LOW) {
    215e:	83 e0       	ldi	r24, 0x03	; 3
    2160:	63 e0       	ldi	r22, 0x03	; 3
    2162:	0e 94 2c 0d 	call	0x1a58	; 0x1a58 <DIO_ReadPinLevel>
    2166:	88 23       	and	r24, r24
    2168:	09 f4       	brne	.+2      	; 0x216c <Keypad_GetButtonState+0x138>
            state = KEYPAD_STATE_PRESSED;
    216a:	1b 82       	std	Y+3, r1	; 0x03
        }
        break;
    default:
        break;
    }
    return state;
    216c:	8b 81       	ldd	r24, Y+3	; 0x03
}
    216e:	28 96       	adiw	r28, 0x08	; 8
    2170:	0f b6       	in	r0, 0x3f	; 63
    2172:	f8 94       	cli
    2174:	de bf       	out	0x3e, r29	; 62
    2176:	0f be       	out	0x3f, r0	; 63
    2178:	cd bf       	out	0x3d, r28	; 61
    217a:	cf 91       	pop	r28
    217c:	df 91       	pop	r29
    217e:	08 95       	ret

00002180 <Keypad_GetButtonStatePooling>:

Keypad_StateType Keypad_GetButtonStatePooling(Keypad_ButtonType button) {
    2180:	df 93       	push	r29
    2182:	cf 93       	push	r28
    2184:	cd b7       	in	r28, 0x3d	; 61
    2186:	de b7       	in	r29, 0x3e	; 62
    2188:	28 97       	sbiw	r28, 0x08	; 8
    218a:	0f b6       	in	r0, 0x3f	; 63
    218c:	f8 94       	cli
    218e:	de bf       	out	0x3e, r29	; 62
    2190:	0f be       	out	0x3f, r0	; 63
    2192:	cd bf       	out	0x3d, r28	; 61
    2194:	8c 83       	std	Y+4, r24	; 0x04
    Keypad_StateType state = KEYPAD_STATE_NOT_PRESSED;
    2196:	81 e0       	ldi	r24, 0x01	; 1
    2198:	8b 83       	std	Y+3, r24	; 0x03
    u8 row = button / 4;
    219a:	8c 81       	ldd	r24, Y+4	; 0x04
    219c:	86 95       	lsr	r24
    219e:	86 95       	lsr	r24
    21a0:	8a 83       	std	Y+2, r24	; 0x02
    u8 column = button % 4;
    21a2:	8c 81       	ldd	r24, Y+4	; 0x04
    21a4:	83 70       	andi	r24, 0x03	; 3
    21a6:	89 83       	std	Y+1, r24	; 0x01
    DIO_SetPinLevel(KEYPAD_PIN_C0, DIO_HIGH);
    21a8:	83 e0       	ldi	r24, 0x03	; 3
    21aa:	64 e0       	ldi	r22, 0x04	; 4
    21ac:	41 e0       	ldi	r20, 0x01	; 1
    21ae:	0e 94 7d 0b 	call	0x16fa	; 0x16fa <DIO_SetPinLevel>
    DIO_SetPinLevel(KEYPAD_PIN_C1, DIO_HIGH);
    21b2:	83 e0       	ldi	r24, 0x03	; 3
    21b4:	65 e0       	ldi	r22, 0x05	; 5
    21b6:	41 e0       	ldi	r20, 0x01	; 1
    21b8:	0e 94 7d 0b 	call	0x16fa	; 0x16fa <DIO_SetPinLevel>
    DIO_SetPinLevel(KEYPAD_PIN_C2, DIO_HIGH);
    21bc:	83 e0       	ldi	r24, 0x03	; 3
    21be:	66 e0       	ldi	r22, 0x06	; 6
    21c0:	41 e0       	ldi	r20, 0x01	; 1
    21c2:	0e 94 7d 0b 	call	0x16fa	; 0x16fa <DIO_SetPinLevel>
    DIO_SetPinLevel(KEYPAD_PIN_C3, DIO_HIGH);
    21c6:	83 e0       	ldi	r24, 0x03	; 3
    21c8:	67 e0       	ldi	r22, 0x07	; 7
    21ca:	41 e0       	ldi	r20, 0x01	; 1
    21cc:	0e 94 7d 0b 	call	0x16fa	; 0x16fa <DIO_SetPinLevel>
    switch (column)
    21d0:	89 81       	ldd	r24, Y+1	; 0x01
    21d2:	28 2f       	mov	r18, r24
    21d4:	30 e0       	ldi	r19, 0x00	; 0
    21d6:	38 87       	std	Y+8, r19	; 0x08
    21d8:	2f 83       	std	Y+7, r18	; 0x07
    21da:	8f 81       	ldd	r24, Y+7	; 0x07
    21dc:	98 85       	ldd	r25, Y+8	; 0x08
    21de:	81 30       	cpi	r24, 0x01	; 1
    21e0:	91 05       	cpc	r25, r1
    21e2:	d9 f0       	breq	.+54     	; 0x221a <Keypad_GetButtonStatePooling+0x9a>
    21e4:	2f 81       	ldd	r18, Y+7	; 0x07
    21e6:	38 85       	ldd	r19, Y+8	; 0x08
    21e8:	22 30       	cpi	r18, 0x02	; 2
    21ea:	31 05       	cpc	r19, r1
    21ec:	2c f4       	brge	.+10     	; 0x21f8 <Keypad_GetButtonStatePooling+0x78>
    21ee:	8f 81       	ldd	r24, Y+7	; 0x07
    21f0:	98 85       	ldd	r25, Y+8	; 0x08
    21f2:	00 97       	sbiw	r24, 0x00	; 0
    21f4:	61 f0       	breq	.+24     	; 0x220e <Keypad_GetButtonStatePooling+0x8e>
    21f6:	22 c0       	rjmp	.+68     	; 0x223c <Keypad_GetButtonStatePooling+0xbc>
    21f8:	2f 81       	ldd	r18, Y+7	; 0x07
    21fa:	38 85       	ldd	r19, Y+8	; 0x08
    21fc:	22 30       	cpi	r18, 0x02	; 2
    21fe:	31 05       	cpc	r19, r1
    2200:	91 f0       	breq	.+36     	; 0x2226 <Keypad_GetButtonStatePooling+0xa6>
    2202:	8f 81       	ldd	r24, Y+7	; 0x07
    2204:	98 85       	ldd	r25, Y+8	; 0x08
    2206:	83 30       	cpi	r24, 0x03	; 3
    2208:	91 05       	cpc	r25, r1
    220a:	99 f0       	breq	.+38     	; 0x2232 <Keypad_GetButtonStatePooling+0xb2>
    220c:	17 c0       	rjmp	.+46     	; 0x223c <Keypad_GetButtonStatePooling+0xbc>
    {
    case 0:
        DIO_SetPinLevel(KEYPAD_PIN_C0, DIO_LOW);
    220e:	83 e0       	ldi	r24, 0x03	; 3
    2210:	64 e0       	ldi	r22, 0x04	; 4
    2212:	40 e0       	ldi	r20, 0x00	; 0
    2214:	0e 94 7d 0b 	call	0x16fa	; 0x16fa <DIO_SetPinLevel>
    2218:	11 c0       	rjmp	.+34     	; 0x223c <Keypad_GetButtonStatePooling+0xbc>
        break;
    case 1:
        DIO_SetPinLevel(KEYPAD_PIN_C1, DIO_LOW);
    221a:	83 e0       	ldi	r24, 0x03	; 3
    221c:	65 e0       	ldi	r22, 0x05	; 5
    221e:	40 e0       	ldi	r20, 0x00	; 0
    2220:	0e 94 7d 0b 	call	0x16fa	; 0x16fa <DIO_SetPinLevel>
    2224:	0b c0       	rjmp	.+22     	; 0x223c <Keypad_GetButtonStatePooling+0xbc>
        break;
    case 2:
        DIO_SetPinLevel(KEYPAD_PIN_C2, DIO_LOW);
    2226:	83 e0       	ldi	r24, 0x03	; 3
    2228:	66 e0       	ldi	r22, 0x06	; 6
    222a:	40 e0       	ldi	r20, 0x00	; 0
    222c:	0e 94 7d 0b 	call	0x16fa	; 0x16fa <DIO_SetPinLevel>
    2230:	05 c0       	rjmp	.+10     	; 0x223c <Keypad_GetButtonStatePooling+0xbc>
        break;
    case 3:
        DIO_SetPinLevel(KEYPAD_PIN_C3, DIO_LOW);
    2232:	83 e0       	ldi	r24, 0x03	; 3
    2234:	67 e0       	ldi	r22, 0x07	; 7
    2236:	40 e0       	ldi	r20, 0x00	; 0
    2238:	0e 94 7d 0b 	call	0x16fa	; 0x16fa <DIO_SetPinLevel>
        break;
    default:
        break;
    }
    switch (row)
    223c:	8a 81       	ldd	r24, Y+2	; 0x02
    223e:	28 2f       	mov	r18, r24
    2240:	30 e0       	ldi	r19, 0x00	; 0
    2242:	3e 83       	std	Y+6, r19	; 0x06
    2244:	2d 83       	std	Y+5, r18	; 0x05
    2246:	8d 81       	ldd	r24, Y+5	; 0x05
    2248:	9e 81       	ldd	r25, Y+6	; 0x06
    224a:	81 30       	cpi	r24, 0x01	; 1
    224c:	91 05       	cpc	r25, r1
    224e:	19 f1       	breq	.+70     	; 0x2296 <Keypad_GetButtonStatePooling+0x116>
    2250:	2d 81       	ldd	r18, Y+5	; 0x05
    2252:	3e 81       	ldd	r19, Y+6	; 0x06
    2254:	22 30       	cpi	r18, 0x02	; 2
    2256:	31 05       	cpc	r19, r1
    2258:	2c f4       	brge	.+10     	; 0x2264 <Keypad_GetButtonStatePooling+0xe4>
    225a:	8d 81       	ldd	r24, Y+5	; 0x05
    225c:	9e 81       	ldd	r25, Y+6	; 0x06
    225e:	00 97       	sbiw	r24, 0x00	; 0
    2260:	61 f0       	breq	.+24     	; 0x227a <Keypad_GetButtonStatePooling+0xfa>
    2262:	42 c0       	rjmp	.+132    	; 0x22e8 <Keypad_GetButtonStatePooling+0x168>
    2264:	2d 81       	ldd	r18, Y+5	; 0x05
    2266:	3e 81       	ldd	r19, Y+6	; 0x06
    2268:	22 30       	cpi	r18, 0x02	; 2
    226a:	31 05       	cpc	r19, r1
    226c:	11 f1       	breq	.+68     	; 0x22b2 <Keypad_GetButtonStatePooling+0x132>
    226e:	8d 81       	ldd	r24, Y+5	; 0x05
    2270:	9e 81       	ldd	r25, Y+6	; 0x06
    2272:	83 30       	cpi	r24, 0x03	; 3
    2274:	91 05       	cpc	r25, r1
    2276:	59 f1       	breq	.+86     	; 0x22ce <Keypad_GetButtonStatePooling+0x14e>
    2278:	37 c0       	rjmp	.+110    	; 0x22e8 <Keypad_GetButtonStatePooling+0x168>
    {
    case 0:
        if (DIO_ReadPinLevel(KEYPAD_PIN_R0) == DIO_LOW) {
    227a:	83 e0       	ldi	r24, 0x03	; 3
    227c:	60 e0       	ldi	r22, 0x00	; 0
    227e:	0e 94 2c 0d 	call	0x1a58	; 0x1a58 <DIO_ReadPinLevel>
    2282:	88 23       	and	r24, r24
    2284:	89 f5       	brne	.+98     	; 0x22e8 <Keypad_GetButtonStatePooling+0x168>
            state = KEYPAD_STATE_PRESSED;
    2286:	1b 82       	std	Y+3, r1	; 0x03
            while (DIO_ReadPinLevel(KEYPAD_PIN_R0) == DIO_LOW);
    2288:	83 e0       	ldi	r24, 0x03	; 3
    228a:	60 e0       	ldi	r22, 0x00	; 0
    228c:	0e 94 2c 0d 	call	0x1a58	; 0x1a58 <DIO_ReadPinLevel>
    2290:	88 23       	and	r24, r24
    2292:	d1 f3       	breq	.-12     	; 0x2288 <Keypad_GetButtonStatePooling+0x108>
    2294:	29 c0       	rjmp	.+82     	; 0x22e8 <Keypad_GetButtonStatePooling+0x168>
        }
        break;
    case 1:
        if (DIO_ReadPinLevel(KEYPAD_PIN_R1) == DIO_LOW) {
    2296:	83 e0       	ldi	r24, 0x03	; 3
    2298:	61 e0       	ldi	r22, 0x01	; 1
    229a:	0e 94 2c 0d 	call	0x1a58	; 0x1a58 <DIO_ReadPinLevel>
    229e:	88 23       	and	r24, r24
    22a0:	19 f5       	brne	.+70     	; 0x22e8 <Keypad_GetButtonStatePooling+0x168>
            state = KEYPAD_STATE_PRESSED;
    22a2:	1b 82       	std	Y+3, r1	; 0x03
            while (DIO_ReadPinLevel(KEYPAD_PIN_R1) == DIO_LOW);
    22a4:	83 e0       	ldi	r24, 0x03	; 3
    22a6:	61 e0       	ldi	r22, 0x01	; 1
    22a8:	0e 94 2c 0d 	call	0x1a58	; 0x1a58 <DIO_ReadPinLevel>
    22ac:	88 23       	and	r24, r24
    22ae:	d1 f3       	breq	.-12     	; 0x22a4 <Keypad_GetButtonStatePooling+0x124>
    22b0:	1b c0       	rjmp	.+54     	; 0x22e8 <Keypad_GetButtonStatePooling+0x168>
        }
        break;
    case 2:
        if (DIO_ReadPinLevel(KEYPAD_PIN_R2) == DIO_LOW) {
    22b2:	83 e0       	ldi	r24, 0x03	; 3
    22b4:	62 e0       	ldi	r22, 0x02	; 2
    22b6:	0e 94 2c 0d 	call	0x1a58	; 0x1a58 <DIO_ReadPinLevel>
    22ba:	88 23       	and	r24, r24
    22bc:	a9 f4       	brne	.+42     	; 0x22e8 <Keypad_GetButtonStatePooling+0x168>
            state = KEYPAD_STATE_PRESSED;
    22be:	1b 82       	std	Y+3, r1	; 0x03
            while (DIO_ReadPinLevel(KEYPAD_PIN_R2) == DIO_LOW);
    22c0:	83 e0       	ldi	r24, 0x03	; 3
    22c2:	62 e0       	ldi	r22, 0x02	; 2
    22c4:	0e 94 2c 0d 	call	0x1a58	; 0x1a58 <DIO_ReadPinLevel>
    22c8:	88 23       	and	r24, r24
    22ca:	d1 f3       	breq	.-12     	; 0x22c0 <Keypad_GetButtonStatePooling+0x140>
    22cc:	0d c0       	rjmp	.+26     	; 0x22e8 <Keypad_GetButtonStatePooling+0x168>
        }
        break;
    case 3:
        if (DIO_ReadPinLevel(KEYPAD_PIN_R3) == DIO_LOW) {
    22ce:	83 e0       	ldi	r24, 0x03	; 3
    22d0:	63 e0       	ldi	r22, 0x03	; 3
    22d2:	0e 94 2c 0d 	call	0x1a58	; 0x1a58 <DIO_ReadPinLevel>
    22d6:	88 23       	and	r24, r24
    22d8:	39 f4       	brne	.+14     	; 0x22e8 <Keypad_GetButtonStatePooling+0x168>
            state = KEYPAD_STATE_PRESSED;
    22da:	1b 82       	std	Y+3, r1	; 0x03
            while (DIO_ReadPinLevel(KEYPAD_PIN_R3) == DIO_LOW);
    22dc:	83 e0       	ldi	r24, 0x03	; 3
    22de:	63 e0       	ldi	r22, 0x03	; 3
    22e0:	0e 94 2c 0d 	call	0x1a58	; 0x1a58 <DIO_ReadPinLevel>
    22e4:	88 23       	and	r24, r24
    22e6:	d1 f3       	breq	.-12     	; 0x22dc <Keypad_GetButtonStatePooling+0x15c>
        }
        break;
    default:
        break;
    }
    return state;
    22e8:	8b 81       	ldd	r24, Y+3	; 0x03
}
    22ea:	28 96       	adiw	r28, 0x08	; 8
    22ec:	0f b6       	in	r0, 0x3f	; 63
    22ee:	f8 94       	cli
    22f0:	de bf       	out	0x3e, r29	; 62
    22f2:	0f be       	out	0x3f, r0	; 63
    22f4:	cd bf       	out	0x3d, r28	; 61
    22f6:	cf 91       	pop	r28
    22f8:	df 91       	pop	r29
    22fa:	08 95       	ret

000022fc <Keypad_GetPressedButton>:


Keypad_ButtonType Keypad_GetPressedButton(void) {
    22fc:	df 93       	push	r29
    22fe:	cf 93       	push	r28
    2300:	00 d0       	rcall	.+0      	; 0x2302 <Keypad_GetPressedButton+0x6>
    2302:	cd b7       	in	r28, 0x3d	; 61
    2304:	de b7       	in	r29, 0x3e	; 62
    u8 i=0;
    2306:	1a 82       	std	Y+2, r1	; 0x02
    Keypad_ButtonType pressed_button = KEYPAD_BUTTON_INVALID;
    2308:	80 e1       	ldi	r24, 0x10	; 16
    230a:	89 83       	std	Y+1, r24	; 0x01
    for (i=0; i<16; i++) {
    230c:	1a 82       	std	Y+2, r1	; 0x02
    230e:	0b c0       	rjmp	.+22     	; 0x2326 <Keypad_GetPressedButton+0x2a>
        if (Keypad_GetButtonStatePooling(i) == KEYPAD_STATE_PRESSED) {
    2310:	8a 81       	ldd	r24, Y+2	; 0x02
    2312:	0e 94 c0 10 	call	0x2180	; 0x2180 <Keypad_GetButtonStatePooling>
    2316:	88 23       	and	r24, r24
    2318:	19 f4       	brne	.+6      	; 0x2320 <Keypad_GetPressedButton+0x24>
            pressed_button = i;
    231a:	8a 81       	ldd	r24, Y+2	; 0x02
    231c:	89 83       	std	Y+1, r24	; 0x01
    231e:	06 c0       	rjmp	.+12     	; 0x232c <Keypad_GetPressedButton+0x30>


Keypad_ButtonType Keypad_GetPressedButton(void) {
    u8 i=0;
    Keypad_ButtonType pressed_button = KEYPAD_BUTTON_INVALID;
    for (i=0; i<16; i++) {
    2320:	8a 81       	ldd	r24, Y+2	; 0x02
    2322:	8f 5f       	subi	r24, 0xFF	; 255
    2324:	8a 83       	std	Y+2, r24	; 0x02
    2326:	8a 81       	ldd	r24, Y+2	; 0x02
    2328:	80 31       	cpi	r24, 0x10	; 16
    232a:	90 f3       	brcs	.-28     	; 0x2310 <Keypad_GetPressedButton+0x14>
        if (Keypad_GetButtonStatePooling(i) == KEYPAD_STATE_PRESSED) {
            pressed_button = i;
            break;
        }
    }
    return pressed_button;
    232c:	89 81       	ldd	r24, Y+1	; 0x01
}
    232e:	0f 90       	pop	r0
    2330:	0f 90       	pop	r0
    2332:	cf 91       	pop	r28
    2334:	df 91       	pop	r29
    2336:	08 95       	ret

00002338 <LCD_Init>:

static void LCD_SendData(u8 data);
static void LCD_SendCommand(u8 command);
static void LCD_InitPinsMode(void);

void LCD_Init(void) {
    2338:	df 93       	push	r29
    233a:	cf 93       	push	r28
    233c:	cd b7       	in	r28, 0x3d	; 61
    233e:	de b7       	in	r29, 0x3e	; 62
    2340:	2f 97       	sbiw	r28, 0x0f	; 15
    2342:	0f b6       	in	r0, 0x3f	; 63
    2344:	f8 94       	cli
    2346:	de bf       	out	0x3e, r29	; 62
    2348:	0f be       	out	0x3f, r0	; 63
    234a:	cd bf       	out	0x3d, r28	; 61
    u8 command = 0;
    234c:	1f 86       	std	Y+15, r1	; 0x0f
    LCD_InitPinsMode();
    234e:	0e 94 73 15 	call	0x2ae6	; 0x2ae6 <LCD_InitPinsMode>
    2352:	80 e0       	ldi	r24, 0x00	; 0
    2354:	90 e0       	ldi	r25, 0x00	; 0
    2356:	a0 ef       	ldi	r26, 0xF0	; 240
    2358:	b1 e4       	ldi	r27, 0x41	; 65
    235a:	8b 87       	std	Y+11, r24	; 0x0b
    235c:	9c 87       	std	Y+12, r25	; 0x0c
    235e:	ad 87       	std	Y+13, r26	; 0x0d
    2360:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    2362:	6b 85       	ldd	r22, Y+11	; 0x0b
    2364:	7c 85       	ldd	r23, Y+12	; 0x0c
    2366:	8d 85       	ldd	r24, Y+13	; 0x0d
    2368:	9e 85       	ldd	r25, Y+14	; 0x0e
    236a:	20 e0       	ldi	r18, 0x00	; 0
    236c:	30 e0       	ldi	r19, 0x00	; 0
    236e:	4a ef       	ldi	r20, 0xFA	; 250
    2370:	54 e4       	ldi	r21, 0x44	; 68
    2372:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2376:	dc 01       	movw	r26, r24
    2378:	cb 01       	movw	r24, r22
    237a:	8f 83       	std	Y+7, r24	; 0x07
    237c:	98 87       	std	Y+8, r25	; 0x08
    237e:	a9 87       	std	Y+9, r26	; 0x09
    2380:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    2382:	6f 81       	ldd	r22, Y+7	; 0x07
    2384:	78 85       	ldd	r23, Y+8	; 0x08
    2386:	89 85       	ldd	r24, Y+9	; 0x09
    2388:	9a 85       	ldd	r25, Y+10	; 0x0a
    238a:	20 e0       	ldi	r18, 0x00	; 0
    238c:	30 e0       	ldi	r19, 0x00	; 0
    238e:	40 e8       	ldi	r20, 0x80	; 128
    2390:	5f e3       	ldi	r21, 0x3F	; 63
    2392:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    2396:	88 23       	and	r24, r24
    2398:	2c f4       	brge	.+10     	; 0x23a4 <LCD_Init+0x6c>
		__ticks = 1;
    239a:	81 e0       	ldi	r24, 0x01	; 1
    239c:	90 e0       	ldi	r25, 0x00	; 0
    239e:	9e 83       	std	Y+6, r25	; 0x06
    23a0:	8d 83       	std	Y+5, r24	; 0x05
    23a2:	3f c0       	rjmp	.+126    	; 0x2422 <LCD_Init+0xea>
	else if (__tmp > 65535)
    23a4:	6f 81       	ldd	r22, Y+7	; 0x07
    23a6:	78 85       	ldd	r23, Y+8	; 0x08
    23a8:	89 85       	ldd	r24, Y+9	; 0x09
    23aa:	9a 85       	ldd	r25, Y+10	; 0x0a
    23ac:	20 e0       	ldi	r18, 0x00	; 0
    23ae:	3f ef       	ldi	r19, 0xFF	; 255
    23b0:	4f e7       	ldi	r20, 0x7F	; 127
    23b2:	57 e4       	ldi	r21, 0x47	; 71
    23b4:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    23b8:	18 16       	cp	r1, r24
    23ba:	4c f5       	brge	.+82     	; 0x240e <LCD_Init+0xd6>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    23bc:	6b 85       	ldd	r22, Y+11	; 0x0b
    23be:	7c 85       	ldd	r23, Y+12	; 0x0c
    23c0:	8d 85       	ldd	r24, Y+13	; 0x0d
    23c2:	9e 85       	ldd	r25, Y+14	; 0x0e
    23c4:	20 e0       	ldi	r18, 0x00	; 0
    23c6:	30 e0       	ldi	r19, 0x00	; 0
    23c8:	40 e2       	ldi	r20, 0x20	; 32
    23ca:	51 e4       	ldi	r21, 0x41	; 65
    23cc:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    23d0:	dc 01       	movw	r26, r24
    23d2:	cb 01       	movw	r24, r22
    23d4:	bc 01       	movw	r22, r24
    23d6:	cd 01       	movw	r24, r26
    23d8:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    23dc:	dc 01       	movw	r26, r24
    23de:	cb 01       	movw	r24, r22
    23e0:	9e 83       	std	Y+6, r25	; 0x06
    23e2:	8d 83       	std	Y+5, r24	; 0x05
    23e4:	0f c0       	rjmp	.+30     	; 0x2404 <LCD_Init+0xcc>
    23e6:	88 ec       	ldi	r24, 0xC8	; 200
    23e8:	90 e0       	ldi	r25, 0x00	; 0
    23ea:	9c 83       	std	Y+4, r25	; 0x04
    23ec:	8b 83       	std	Y+3, r24	; 0x03
    milliseconds can be achieved.
 */
void
_delay_loop_2(uint16_t __count)
{
	__asm__ volatile (
    23ee:	8b 81       	ldd	r24, Y+3	; 0x03
    23f0:	9c 81       	ldd	r25, Y+4	; 0x04
    23f2:	01 97       	sbiw	r24, 0x01	; 1
    23f4:	f1 f7       	brne	.-4      	; 0x23f2 <LCD_Init+0xba>
    23f6:	9c 83       	std	Y+4, r25	; 0x04
    23f8:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    23fa:	8d 81       	ldd	r24, Y+5	; 0x05
    23fc:	9e 81       	ldd	r25, Y+6	; 0x06
    23fe:	01 97       	sbiw	r24, 0x01	; 1
    2400:	9e 83       	std	Y+6, r25	; 0x06
    2402:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    2404:	8d 81       	ldd	r24, Y+5	; 0x05
    2406:	9e 81       	ldd	r25, Y+6	; 0x06
    2408:	00 97       	sbiw	r24, 0x00	; 0
    240a:	69 f7       	brne	.-38     	; 0x23e6 <LCD_Init+0xae>
    240c:	14 c0       	rjmp	.+40     	; 0x2436 <LCD_Init+0xfe>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    240e:	6f 81       	ldd	r22, Y+7	; 0x07
    2410:	78 85       	ldd	r23, Y+8	; 0x08
    2412:	89 85       	ldd	r24, Y+9	; 0x09
    2414:	9a 85       	ldd	r25, Y+10	; 0x0a
    2416:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    241a:	dc 01       	movw	r26, r24
    241c:	cb 01       	movw	r24, r22
    241e:	9e 83       	std	Y+6, r25	; 0x06
    2420:	8d 83       	std	Y+5, r24	; 0x05
    2422:	8d 81       	ldd	r24, Y+5	; 0x05
    2424:	9e 81       	ldd	r25, Y+6	; 0x06
    2426:	9a 83       	std	Y+2, r25	; 0x02
    2428:	89 83       	std	Y+1, r24	; 0x01
    242a:	89 81       	ldd	r24, Y+1	; 0x01
    242c:	9a 81       	ldd	r25, Y+2	; 0x02
    242e:	01 97       	sbiw	r24, 0x01	; 1
    2430:	f1 f7       	brne	.-4      	; 0x242e <LCD_Init+0xf6>
    2432:	9a 83       	std	Y+2, r25	; 0x02
    2434:	89 83       	std	Y+1, r24	; 0x01

    /* Function Set:
        N: 1 (two lines)
        F: 0 (5x7)
    */
    command = 0b00110000;
    2436:	80 e3       	ldi	r24, 0x30	; 48
    2438:	8f 87       	std	Y+15, r24	; 0x0f
    #if (LCD_MODE_LINES == LCD_TWO_LINES)
        SET_BIT(command, 3);
    243a:	8f 85       	ldd	r24, Y+15	; 0x0f
    243c:	88 60       	ori	r24, 0x08	; 8
    243e:	8f 87       	std	Y+15, r24	; 0x0f
    #endif
    #if (LCD_MODE_DOTS == LCD_DOTS_5X10)
        SET_BIT(command, 2);
    2440:	8f 85       	ldd	r24, Y+15	; 0x0f
    2442:	84 60       	ori	r24, 0x04	; 4
    2444:	8f 87       	std	Y+15, r24	; 0x0f
    #endif
    LCD_SendCommand(command);
    2446:	8f 85       	ldd	r24, Y+15	; 0x0f
    2448:	0e 94 9d 13 	call	0x273a	; 0x273a <LCD_SendCommand>
    /* Display ON/OFF
        D: 1 (Display ON)
        C: 0 (Cursor off)
        B: 0 (Cursor not blink)
    */
    command = 0b00001000;
    244c:	88 e0       	ldi	r24, 0x08	; 8
    244e:	8f 87       	std	Y+15, r24	; 0x0f
    #if (LCD_MODE_DISPLAY == LCD_DISPLAY_ON)
        SET_BIT(command, 2);
    2450:	8f 85       	ldd	r24, Y+15	; 0x0f
    2452:	84 60       	ori	r24, 0x04	; 4
    2454:	8f 87       	std	Y+15, r24	; 0x0f
    #endif
    #if (LCD_MODE_CURSOR == LCD_CURSOR_ON_BLINK)
        SET_BIT(command, 0);
    2456:	8f 85       	ldd	r24, Y+15	; 0x0f
    2458:	81 60       	ori	r24, 0x01	; 1
    245a:	8f 87       	std	Y+15, r24	; 0x0f
        SET_BIT(command, 1);
    245c:	8f 85       	ldd	r24, Y+15	; 0x0f
    245e:	82 60       	ori	r24, 0x02	; 2
    2460:	8f 87       	std	Y+15, r24	; 0x0f
    #endif
    #if (LCD_MODE_CURSOR == LCD_CURSOR_ON_NO_BLINK)
        SET_BIT(command, 1);
    2462:	8f 85       	ldd	r24, Y+15	; 0x0f
    2464:	82 60       	ori	r24, 0x02	; 2
    2466:	8f 87       	std	Y+15, r24	; 0x0f
    #endif
    LCD_SendCommand(command);
    2468:	8f 85       	ldd	r24, Y+15	; 0x0f
    246a:	0e 94 9d 13 	call	0x273a	; 0x273a <LCD_SendCommand>

    /* Display Clear */
    LCD_SendCommand(0b00000001);
    246e:	81 e0       	ldi	r24, 0x01	; 1
    2470:	0e 94 9d 13 	call	0x273a	; 0x273a <LCD_SendCommand>
}
    2474:	2f 96       	adiw	r28, 0x0f	; 15
    2476:	0f b6       	in	r0, 0x3f	; 63
    2478:	f8 94       	cli
    247a:	de bf       	out	0x3e, r29	; 62
    247c:	0f be       	out	0x3f, r0	; 63
    247e:	cd bf       	out	0x3d, r28	; 61
    2480:	cf 91       	pop	r28
    2482:	df 91       	pop	r29
    2484:	08 95       	ret

00002486 <LCD_Clear>:


void LCD_Clear (void) {
    2486:	df 93       	push	r29
    2488:	cf 93       	push	r28
    248a:	cd b7       	in	r28, 0x3d	; 61
    248c:	de b7       	in	r29, 0x3e	; 62
    LCD_SendCommand(0b00000001);
    248e:	81 e0       	ldi	r24, 0x01	; 1
    2490:	0e 94 9d 13 	call	0x273a	; 0x273a <LCD_SendCommand>
}
    2494:	cf 91       	pop	r28
    2496:	df 91       	pop	r29
    2498:	08 95       	ret

0000249a <LCD_DisplayCharacter>:

void LCD_DisplayCharacter (u8 data) {
    249a:	df 93       	push	r29
    249c:	cf 93       	push	r28
    249e:	0f 92       	push	r0
    24a0:	cd b7       	in	r28, 0x3d	; 61
    24a2:	de b7       	in	r29, 0x3e	; 62
    24a4:	89 83       	std	Y+1, r24	; 0x01
    LCD_SendData(data);
    24a6:	89 81       	ldd	r24, Y+1	; 0x01
    24a8:	0e 94 88 14 	call	0x2910	; 0x2910 <LCD_SendData>
}
    24ac:	0f 90       	pop	r0
    24ae:	cf 91       	pop	r28
    24b0:	df 91       	pop	r29
    24b2:	08 95       	ret

000024b4 <LCD_DisplayString>:

void LCD_DisplayString (u8 *str) {
    24b4:	df 93       	push	r29
    24b6:	cf 93       	push	r28
    24b8:	00 d0       	rcall	.+0      	; 0x24ba <LCD_DisplayString+0x6>
    24ba:	0f 92       	push	r0
    24bc:	cd b7       	in	r28, 0x3d	; 61
    24be:	de b7       	in	r29, 0x3e	; 62
    24c0:	9b 83       	std	Y+3, r25	; 0x03
    24c2:	8a 83       	std	Y+2, r24	; 0x02
    u8 i=0;
    24c4:	19 82       	std	Y+1, r1	; 0x01
    24c6:	0e c0       	rjmp	.+28     	; 0x24e4 <LCD_DisplayString+0x30>
    while(str[i] != '\0') {
        LCD_DisplayCharacter(str[i]);
    24c8:	89 81       	ldd	r24, Y+1	; 0x01
    24ca:	28 2f       	mov	r18, r24
    24cc:	30 e0       	ldi	r19, 0x00	; 0
    24ce:	8a 81       	ldd	r24, Y+2	; 0x02
    24d0:	9b 81       	ldd	r25, Y+3	; 0x03
    24d2:	fc 01       	movw	r30, r24
    24d4:	e2 0f       	add	r30, r18
    24d6:	f3 1f       	adc	r31, r19
    24d8:	80 81       	ld	r24, Z
    24da:	0e 94 4d 12 	call	0x249a	; 0x249a <LCD_DisplayCharacter>
        i++;
    24de:	89 81       	ldd	r24, Y+1	; 0x01
    24e0:	8f 5f       	subi	r24, 0xFF	; 255
    24e2:	89 83       	std	Y+1, r24	; 0x01
    LCD_SendData(data);
}

void LCD_DisplayString (u8 *str) {
    u8 i=0;
    while(str[i] != '\0') {
    24e4:	89 81       	ldd	r24, Y+1	; 0x01
    24e6:	28 2f       	mov	r18, r24
    24e8:	30 e0       	ldi	r19, 0x00	; 0
    24ea:	8a 81       	ldd	r24, Y+2	; 0x02
    24ec:	9b 81       	ldd	r25, Y+3	; 0x03
    24ee:	fc 01       	movw	r30, r24
    24f0:	e2 0f       	add	r30, r18
    24f2:	f3 1f       	adc	r31, r19
    24f4:	80 81       	ld	r24, Z
    24f6:	88 23       	and	r24, r24
    24f8:	39 f7       	brne	.-50     	; 0x24c8 <LCD_DisplayString+0x14>
        LCD_DisplayCharacter(str[i]);
        i++;
    }
}
    24fa:	0f 90       	pop	r0
    24fc:	0f 90       	pop	r0
    24fe:	0f 90       	pop	r0
    2500:	cf 91       	pop	r28
    2502:	df 91       	pop	r29
    2504:	08 95       	ret

00002506 <LCD_SetCursorPosition>:

void LCD_SetCursorPosition(u8 row, u8 column) {
    2506:	df 93       	push	r29
    2508:	cf 93       	push	r28
    250a:	00 d0       	rcall	.+0      	; 0x250c <LCD_SetCursorPosition+0x6>
    250c:	0f 92       	push	r0
    250e:	cd b7       	in	r28, 0x3d	; 61
    2510:	de b7       	in	r29, 0x3e	; 62
    2512:	8a 83       	std	Y+2, r24	; 0x02
    2514:	6b 83       	std	Y+3, r22	; 0x03
    u8 address = column + row*0x40;
    2516:	8a 81       	ldd	r24, Y+2	; 0x02
    2518:	88 2f       	mov	r24, r24
    251a:	90 e0       	ldi	r25, 0x00	; 0
    251c:	00 24       	eor	r0, r0
    251e:	96 95       	lsr	r25
    2520:	87 95       	ror	r24
    2522:	07 94       	ror	r0
    2524:	96 95       	lsr	r25
    2526:	87 95       	ror	r24
    2528:	07 94       	ror	r0
    252a:	98 2f       	mov	r25, r24
    252c:	80 2d       	mov	r24, r0
    252e:	98 2f       	mov	r25, r24
    2530:	8b 81       	ldd	r24, Y+3	; 0x03
    2532:	89 0f       	add	r24, r25
    2534:	89 83       	std	Y+1, r24	; 0x01
    SET_BIT(address, 7);
    2536:	89 81       	ldd	r24, Y+1	; 0x01
    2538:	80 68       	ori	r24, 0x80	; 128
    253a:	89 83       	std	Y+1, r24	; 0x01
    LCD_SendCommand(address);
    253c:	89 81       	ldd	r24, Y+1	; 0x01
    253e:	0e 94 9d 13 	call	0x273a	; 0x273a <LCD_SendCommand>
}
    2542:	0f 90       	pop	r0
    2544:	0f 90       	pop	r0
    2546:	0f 90       	pop	r0
    2548:	cf 91       	pop	r28
    254a:	df 91       	pop	r29
    254c:	08 95       	ret

0000254e <LCD_DisplayNumber>:


void LCD_DisplayNumber (s32 number) {
    254e:	ef 92       	push	r14
    2550:	ff 92       	push	r15
    2552:	0f 93       	push	r16
    2554:	1f 93       	push	r17
    2556:	df 93       	push	r29
    2558:	cf 93       	push	r28
    255a:	cd b7       	in	r28, 0x3d	; 61
    255c:	de b7       	in	r29, 0x3e	; 62
    255e:	2a 97       	sbiw	r28, 0x0a	; 10
    2560:	0f b6       	in	r0, 0x3f	; 63
    2562:	f8 94       	cli
    2564:	de bf       	out	0x3e, r29	; 62
    2566:	0f be       	out	0x3f, r0	; 63
    2568:	cd bf       	out	0x3d, r28	; 61
    256a:	6f 83       	std	Y+7, r22	; 0x07
    256c:	78 87       	std	Y+8, r23	; 0x08
    256e:	89 87       	std	Y+9, r24	; 0x09
    2570:	9a 87       	std	Y+10, r25	; 0x0a
    u32 reversed_number = 0;
    2572:	1b 82       	std	Y+3, r1	; 0x03
    2574:	1c 82       	std	Y+4, r1	; 0x04
    2576:	1d 82       	std	Y+5, r1	; 0x05
    2578:	1e 82       	std	Y+6, r1	; 0x06
    u8 digits = 0;
    257a:	1a 82       	std	Y+2, r1	; 0x02
    if (number < 0) {
    257c:	8f 81       	ldd	r24, Y+7	; 0x07
    257e:	98 85       	ldd	r25, Y+8	; 0x08
    2580:	a9 85       	ldd	r26, Y+9	; 0x09
    2582:	ba 85       	ldd	r27, Y+10	; 0x0a
    2584:	bb 23       	and	r27, r27
    2586:	9c f4       	brge	.+38     	; 0x25ae <LCD_DisplayNumber+0x60>
        number = number*-1;
    2588:	8f 81       	ldd	r24, Y+7	; 0x07
    258a:	98 85       	ldd	r25, Y+8	; 0x08
    258c:	a9 85       	ldd	r26, Y+9	; 0x09
    258e:	ba 85       	ldd	r27, Y+10	; 0x0a
    2590:	b0 95       	com	r27
    2592:	a0 95       	com	r26
    2594:	90 95       	com	r25
    2596:	81 95       	neg	r24
    2598:	9f 4f       	sbci	r25, 0xFF	; 255
    259a:	af 4f       	sbci	r26, 0xFF	; 255
    259c:	bf 4f       	sbci	r27, 0xFF	; 255
    259e:	8f 83       	std	Y+7, r24	; 0x07
    25a0:	98 87       	std	Y+8, r25	; 0x08
    25a2:	a9 87       	std	Y+9, r26	; 0x09
    25a4:	ba 87       	std	Y+10, r27	; 0x0a
        LCD_DisplayCharacter('-');
    25a6:	8d e2       	ldi	r24, 0x2D	; 45
    25a8:	0e 94 4d 12 	call	0x249a	; 0x249a <LCD_DisplayCharacter>
    25ac:	45 c0       	rjmp	.+138    	; 0x2638 <LCD_DisplayNumber+0xea>
    }
    else if (number == 0) {
    25ae:	8f 81       	ldd	r24, Y+7	; 0x07
    25b0:	98 85       	ldd	r25, Y+8	; 0x08
    25b2:	a9 85       	ldd	r26, Y+9	; 0x09
    25b4:	ba 85       	ldd	r27, Y+10	; 0x0a
    25b6:	00 97       	sbiw	r24, 0x00	; 0
    25b8:	a1 05       	cpc	r26, r1
    25ba:	b1 05       	cpc	r27, r1
    25bc:	e9 f5       	brne	.+122    	; 0x2638 <LCD_DisplayNumber+0xea>
        LCD_DisplayCharacter('0');
    25be:	80 e3       	ldi	r24, 0x30	; 48
    25c0:	0e 94 4d 12 	call	0x249a	; 0x249a <LCD_DisplayCharacter>
    25c4:	39 c0       	rjmp	.+114    	; 0x2638 <LCD_DisplayNumber+0xea>
    }
    while (number != 0)
    {
        reversed_number = (reversed_number*10) + (number%10);
    25c6:	8b 81       	ldd	r24, Y+3	; 0x03
    25c8:	9c 81       	ldd	r25, Y+4	; 0x04
    25ca:	ad 81       	ldd	r26, Y+5	; 0x05
    25cc:	be 81       	ldd	r27, Y+6	; 0x06
    25ce:	2a e0       	ldi	r18, 0x0A	; 10
    25d0:	30 e0       	ldi	r19, 0x00	; 0
    25d2:	40 e0       	ldi	r20, 0x00	; 0
    25d4:	50 e0       	ldi	r21, 0x00	; 0
    25d6:	bc 01       	movw	r22, r24
    25d8:	cd 01       	movw	r24, r26
    25da:	0e 94 18 2e 	call	0x5c30	; 0x5c30 <__mulsi3>
    25de:	7b 01       	movw	r14, r22
    25e0:	8c 01       	movw	r16, r24
    25e2:	8f 81       	ldd	r24, Y+7	; 0x07
    25e4:	98 85       	ldd	r25, Y+8	; 0x08
    25e6:	a9 85       	ldd	r26, Y+9	; 0x09
    25e8:	ba 85       	ldd	r27, Y+10	; 0x0a
    25ea:	2a e0       	ldi	r18, 0x0A	; 10
    25ec:	30 e0       	ldi	r19, 0x00	; 0
    25ee:	40 e0       	ldi	r20, 0x00	; 0
    25f0:	50 e0       	ldi	r21, 0x00	; 0
    25f2:	bc 01       	movw	r22, r24
    25f4:	cd 01       	movw	r24, r26
    25f6:	0e 94 65 2e 	call	0x5cca	; 0x5cca <__divmodsi4>
    25fa:	dc 01       	movw	r26, r24
    25fc:	cb 01       	movw	r24, r22
    25fe:	8e 0d       	add	r24, r14
    2600:	9f 1d       	adc	r25, r15
    2602:	a0 1f       	adc	r26, r16
    2604:	b1 1f       	adc	r27, r17
    2606:	8b 83       	std	Y+3, r24	; 0x03
    2608:	9c 83       	std	Y+4, r25	; 0x04
    260a:	ad 83       	std	Y+5, r26	; 0x05
    260c:	be 83       	std	Y+6, r27	; 0x06
        number = number / 10;
    260e:	8f 81       	ldd	r24, Y+7	; 0x07
    2610:	98 85       	ldd	r25, Y+8	; 0x08
    2612:	a9 85       	ldd	r26, Y+9	; 0x09
    2614:	ba 85       	ldd	r27, Y+10	; 0x0a
    2616:	2a e0       	ldi	r18, 0x0A	; 10
    2618:	30 e0       	ldi	r19, 0x00	; 0
    261a:	40 e0       	ldi	r20, 0x00	; 0
    261c:	50 e0       	ldi	r21, 0x00	; 0
    261e:	bc 01       	movw	r22, r24
    2620:	cd 01       	movw	r24, r26
    2622:	0e 94 65 2e 	call	0x5cca	; 0x5cca <__divmodsi4>
    2626:	da 01       	movw	r26, r20
    2628:	c9 01       	movw	r24, r18
    262a:	8f 83       	std	Y+7, r24	; 0x07
    262c:	98 87       	std	Y+8, r25	; 0x08
    262e:	a9 87       	std	Y+9, r26	; 0x09
    2630:	ba 87       	std	Y+10, r27	; 0x0a
        digits++;
    2632:	8a 81       	ldd	r24, Y+2	; 0x02
    2634:	8f 5f       	subi	r24, 0xFF	; 255
    2636:	8a 83       	std	Y+2, r24	; 0x02
        LCD_DisplayCharacter('-');
    }
    else if (number == 0) {
        LCD_DisplayCharacter('0');
    }
    while (number != 0)
    2638:	8f 81       	ldd	r24, Y+7	; 0x07
    263a:	98 85       	ldd	r25, Y+8	; 0x08
    263c:	a9 85       	ldd	r26, Y+9	; 0x09
    263e:	ba 85       	ldd	r27, Y+10	; 0x0a
    2640:	00 97       	sbiw	r24, 0x00	; 0
    2642:	a1 05       	cpc	r26, r1
    2644:	b1 05       	cpc	r27, r1
    2646:	09 f0       	breq	.+2      	; 0x264a <LCD_DisplayNumber+0xfc>
    2648:	be cf       	rjmp	.-132    	; 0x25c6 <LCD_DisplayNumber+0x78>
    264a:	2a c0       	rjmp	.+84     	; 0x26a0 <LCD_DisplayNumber+0x152>
        number = number / 10;
        digits++;
    }
    while (reversed_number != 0)
    {
        u8 data = reversed_number % 10;
    264c:	8b 81       	ldd	r24, Y+3	; 0x03
    264e:	9c 81       	ldd	r25, Y+4	; 0x04
    2650:	ad 81       	ldd	r26, Y+5	; 0x05
    2652:	be 81       	ldd	r27, Y+6	; 0x06
    2654:	2a e0       	ldi	r18, 0x0A	; 10
    2656:	30 e0       	ldi	r19, 0x00	; 0
    2658:	40 e0       	ldi	r20, 0x00	; 0
    265a:	50 e0       	ldi	r21, 0x00	; 0
    265c:	bc 01       	movw	r22, r24
    265e:	cd 01       	movw	r24, r26
    2660:	0e 94 43 2e 	call	0x5c86	; 0x5c86 <__udivmodsi4>
    2664:	dc 01       	movw	r26, r24
    2666:	cb 01       	movw	r24, r22
    2668:	89 83       	std	Y+1, r24	; 0x01
        data = data + '0';
    266a:	89 81       	ldd	r24, Y+1	; 0x01
    266c:	80 5d       	subi	r24, 0xD0	; 208
    266e:	89 83       	std	Y+1, r24	; 0x01
        LCD_DisplayCharacter(data);
    2670:	89 81       	ldd	r24, Y+1	; 0x01
    2672:	0e 94 4d 12 	call	0x249a	; 0x249a <LCD_DisplayCharacter>
        reversed_number = reversed_number / 10;
    2676:	8b 81       	ldd	r24, Y+3	; 0x03
    2678:	9c 81       	ldd	r25, Y+4	; 0x04
    267a:	ad 81       	ldd	r26, Y+5	; 0x05
    267c:	be 81       	ldd	r27, Y+6	; 0x06
    267e:	2a e0       	ldi	r18, 0x0A	; 10
    2680:	30 e0       	ldi	r19, 0x00	; 0
    2682:	40 e0       	ldi	r20, 0x00	; 0
    2684:	50 e0       	ldi	r21, 0x00	; 0
    2686:	bc 01       	movw	r22, r24
    2688:	cd 01       	movw	r24, r26
    268a:	0e 94 43 2e 	call	0x5c86	; 0x5c86 <__udivmodsi4>
    268e:	da 01       	movw	r26, r20
    2690:	c9 01       	movw	r24, r18
    2692:	8b 83       	std	Y+3, r24	; 0x03
    2694:	9c 83       	std	Y+4, r25	; 0x04
    2696:	ad 83       	std	Y+5, r26	; 0x05
    2698:	be 83       	std	Y+6, r27	; 0x06
        digits--;
    269a:	8a 81       	ldd	r24, Y+2	; 0x02
    269c:	81 50       	subi	r24, 0x01	; 1
    269e:	8a 83       	std	Y+2, r24	; 0x02
    {
        reversed_number = (reversed_number*10) + (number%10);
        number = number / 10;
        digits++;
    }
    while (reversed_number != 0)
    26a0:	8b 81       	ldd	r24, Y+3	; 0x03
    26a2:	9c 81       	ldd	r25, Y+4	; 0x04
    26a4:	ad 81       	ldd	r26, Y+5	; 0x05
    26a6:	be 81       	ldd	r27, Y+6	; 0x06
    26a8:	00 97       	sbiw	r24, 0x00	; 0
    26aa:	a1 05       	cpc	r26, r1
    26ac:	b1 05       	cpc	r27, r1
    26ae:	71 f6       	brne	.-100    	; 0x264c <LCD_DisplayNumber+0xfe>
    26b0:	06 c0       	rjmp	.+12     	; 0x26be <LCD_DisplayNumber+0x170>
        LCD_DisplayCharacter(data);
        reversed_number = reversed_number / 10;
        digits--;
    }
    while (digits != 0) {
        LCD_DisplayCharacter('0');
    26b2:	80 e3       	ldi	r24, 0x30	; 48
    26b4:	0e 94 4d 12 	call	0x249a	; 0x249a <LCD_DisplayCharacter>
        digits--;
    26b8:	8a 81       	ldd	r24, Y+2	; 0x02
    26ba:	81 50       	subi	r24, 0x01	; 1
    26bc:	8a 83       	std	Y+2, r24	; 0x02
        data = data + '0';
        LCD_DisplayCharacter(data);
        reversed_number = reversed_number / 10;
        digits--;
    }
    while (digits != 0) {
    26be:	8a 81       	ldd	r24, Y+2	; 0x02
    26c0:	88 23       	and	r24, r24
    26c2:	b9 f7       	brne	.-18     	; 0x26b2 <LCD_DisplayNumber+0x164>
        LCD_DisplayCharacter('0');
        digits--;
    }

}
    26c4:	2a 96       	adiw	r28, 0x0a	; 10
    26c6:	0f b6       	in	r0, 0x3f	; 63
    26c8:	f8 94       	cli
    26ca:	de bf       	out	0x3e, r29	; 62
    26cc:	0f be       	out	0x3f, r0	; 63
    26ce:	cd bf       	out	0x3d, r28	; 61
    26d0:	cf 91       	pop	r28
    26d2:	df 91       	pop	r29
    26d4:	1f 91       	pop	r17
    26d6:	0f 91       	pop	r16
    26d8:	ff 90       	pop	r15
    26da:	ef 90       	pop	r14
    26dc:	08 95       	ret

000026de <LCD_ShiftLeft>:

void LCD_ShiftLeft (u8 counter) {
    26de:	df 93       	push	r29
    26e0:	cf 93       	push	r28
    26e2:	00 d0       	rcall	.+0      	; 0x26e4 <LCD_ShiftLeft+0x6>
    26e4:	cd b7       	in	r28, 0x3d	; 61
    26e6:	de b7       	in	r29, 0x3e	; 62
    26e8:	8a 83       	std	Y+2, r24	; 0x02
    u8 i;
    for (i=0; i<counter; i++) {
    26ea:	19 82       	std	Y+1, r1	; 0x01
    26ec:	06 c0       	rjmp	.+12     	; 0x26fa <LCD_ShiftLeft+0x1c>
        LCD_SendCommand(0b00011000);
    26ee:	88 e1       	ldi	r24, 0x18	; 24
    26f0:	0e 94 9d 13 	call	0x273a	; 0x273a <LCD_SendCommand>

}

void LCD_ShiftLeft (u8 counter) {
    u8 i;
    for (i=0; i<counter; i++) {
    26f4:	89 81       	ldd	r24, Y+1	; 0x01
    26f6:	8f 5f       	subi	r24, 0xFF	; 255
    26f8:	89 83       	std	Y+1, r24	; 0x01
    26fa:	99 81       	ldd	r25, Y+1	; 0x01
    26fc:	8a 81       	ldd	r24, Y+2	; 0x02
    26fe:	98 17       	cp	r25, r24
    2700:	b0 f3       	brcs	.-20     	; 0x26ee <LCD_ShiftLeft+0x10>
        LCD_SendCommand(0b00011000);
    }
}
    2702:	0f 90       	pop	r0
    2704:	0f 90       	pop	r0
    2706:	cf 91       	pop	r28
    2708:	df 91       	pop	r29
    270a:	08 95       	ret

0000270c <LCD_ShiftRight>:
void LCD_ShiftRight (u8 counter) {
    270c:	df 93       	push	r29
    270e:	cf 93       	push	r28
    2710:	00 d0       	rcall	.+0      	; 0x2712 <LCD_ShiftRight+0x6>
    2712:	cd b7       	in	r28, 0x3d	; 61
    2714:	de b7       	in	r29, 0x3e	; 62
    2716:	8a 83       	std	Y+2, r24	; 0x02
    u8 i;
    for (i=0; i<counter; i++) {
    2718:	19 82       	std	Y+1, r1	; 0x01
    271a:	06 c0       	rjmp	.+12     	; 0x2728 <LCD_ShiftRight+0x1c>
        LCD_SendCommand(0b00011100);
    271c:	8c e1       	ldi	r24, 0x1C	; 28
    271e:	0e 94 9d 13 	call	0x273a	; 0x273a <LCD_SendCommand>
        LCD_SendCommand(0b00011000);
    }
}
void LCD_ShiftRight (u8 counter) {
    u8 i;
    for (i=0; i<counter; i++) {
    2722:	89 81       	ldd	r24, Y+1	; 0x01
    2724:	8f 5f       	subi	r24, 0xFF	; 255
    2726:	89 83       	std	Y+1, r24	; 0x01
    2728:	99 81       	ldd	r25, Y+1	; 0x01
    272a:	8a 81       	ldd	r24, Y+2	; 0x02
    272c:	98 17       	cp	r25, r24
    272e:	b0 f3       	brcs	.-20     	; 0x271c <LCD_ShiftRight+0x10>
        LCD_SendCommand(0b00011100);
    }
}
    2730:	0f 90       	pop	r0
    2732:	0f 90       	pop	r0
    2734:	cf 91       	pop	r28
    2736:	df 91       	pop	r29
    2738:	08 95       	ret

0000273a <LCD_SendCommand>:

static void LCD_SendCommand(u8 command) {
    273a:	df 93       	push	r29
    273c:	cf 93       	push	r28
    273e:	cd b7       	in	r28, 0x3d	; 61
    2740:	de b7       	in	r29, 0x3e	; 62
    2742:	2f 97       	sbiw	r28, 0x0f	; 15
    2744:	0f b6       	in	r0, 0x3f	; 63
    2746:	f8 94       	cli
    2748:	de bf       	out	0x3e, r29	; 62
    274a:	0f be       	out	0x3f, r0	; 63
    274c:	cd bf       	out	0x3d, r28	; 61
    274e:	8f 87       	std	Y+15, r24	; 0x0f
    /* Set Control Pins:
        RS : 0 Command
        RW : 0 Write
    */
    DIO_SetPinLevel(LCD_PIN_RS, DIO_LOW);
    2750:	81 e0       	ldi	r24, 0x01	; 1
    2752:	62 e0       	ldi	r22, 0x02	; 2
    2754:	40 e0       	ldi	r20, 0x00	; 0
    2756:	0e 94 7d 0b 	call	0x16fa	; 0x16fa <DIO_SetPinLevel>
    DIO_SetPinLevel(LCD_PIN_RW, DIO_LOW);
    275a:	81 e0       	ldi	r24, 0x01	; 1
    275c:	61 e0       	ldi	r22, 0x01	; 1
    275e:	40 e0       	ldi	r20, 0x00	; 0
    2760:	0e 94 7d 0b 	call	0x16fa	; 0x16fa <DIO_SetPinLevel>

    /* Set Data Pins */
    DIO_SetPinLevel(LCD_PIN_D0, GET_BIT(command, 0));
    2764:	8f 85       	ldd	r24, Y+15	; 0x0f
    2766:	98 2f       	mov	r25, r24
    2768:	91 70       	andi	r25, 0x01	; 1
    276a:	82 e0       	ldi	r24, 0x02	; 2
    276c:	67 e0       	ldi	r22, 0x07	; 7
    276e:	49 2f       	mov	r20, r25
    2770:	0e 94 7d 0b 	call	0x16fa	; 0x16fa <DIO_SetPinLevel>
    DIO_SetPinLevel(LCD_PIN_D1, GET_BIT(command, 1));
    2774:	8f 85       	ldd	r24, Y+15	; 0x0f
    2776:	86 95       	lsr	r24
    2778:	98 2f       	mov	r25, r24
    277a:	91 70       	andi	r25, 0x01	; 1
    277c:	82 e0       	ldi	r24, 0x02	; 2
    277e:	66 e0       	ldi	r22, 0x06	; 6
    2780:	49 2f       	mov	r20, r25
    2782:	0e 94 7d 0b 	call	0x16fa	; 0x16fa <DIO_SetPinLevel>
    DIO_SetPinLevel(LCD_PIN_D2, GET_BIT(command, 2));
    2786:	8f 85       	ldd	r24, Y+15	; 0x0f
    2788:	86 95       	lsr	r24
    278a:	86 95       	lsr	r24
    278c:	98 2f       	mov	r25, r24
    278e:	91 70       	andi	r25, 0x01	; 1
    2790:	82 e0       	ldi	r24, 0x02	; 2
    2792:	65 e0       	ldi	r22, 0x05	; 5
    2794:	49 2f       	mov	r20, r25
    2796:	0e 94 7d 0b 	call	0x16fa	; 0x16fa <DIO_SetPinLevel>
    DIO_SetPinLevel(LCD_PIN_D3, GET_BIT(command, 3));
    279a:	8f 85       	ldd	r24, Y+15	; 0x0f
    279c:	86 95       	lsr	r24
    279e:	86 95       	lsr	r24
    27a0:	86 95       	lsr	r24
    27a2:	98 2f       	mov	r25, r24
    27a4:	91 70       	andi	r25, 0x01	; 1
    27a6:	82 e0       	ldi	r24, 0x02	; 2
    27a8:	64 e0       	ldi	r22, 0x04	; 4
    27aa:	49 2f       	mov	r20, r25
    27ac:	0e 94 7d 0b 	call	0x16fa	; 0x16fa <DIO_SetPinLevel>
    DIO_SetPinLevel(LCD_PIN_D4, GET_BIT(command, 4));
    27b0:	8f 85       	ldd	r24, Y+15	; 0x0f
    27b2:	82 95       	swap	r24
    27b4:	8f 70       	andi	r24, 0x0F	; 15
    27b6:	98 2f       	mov	r25, r24
    27b8:	91 70       	andi	r25, 0x01	; 1
    27ba:	82 e0       	ldi	r24, 0x02	; 2
    27bc:	63 e0       	ldi	r22, 0x03	; 3
    27be:	49 2f       	mov	r20, r25
    27c0:	0e 94 7d 0b 	call	0x16fa	; 0x16fa <DIO_SetPinLevel>
    DIO_SetPinLevel(LCD_PIN_D5, GET_BIT(command, 5));
    27c4:	8f 85       	ldd	r24, Y+15	; 0x0f
    27c6:	82 95       	swap	r24
    27c8:	86 95       	lsr	r24
    27ca:	87 70       	andi	r24, 0x07	; 7
    27cc:	98 2f       	mov	r25, r24
    27ce:	91 70       	andi	r25, 0x01	; 1
    27d0:	82 e0       	ldi	r24, 0x02	; 2
    27d2:	62 e0       	ldi	r22, 0x02	; 2
    27d4:	49 2f       	mov	r20, r25
    27d6:	0e 94 7d 0b 	call	0x16fa	; 0x16fa <DIO_SetPinLevel>
    DIO_SetPinLevel(LCD_PIN_D6, GET_BIT(command, 6));
    27da:	8f 85       	ldd	r24, Y+15	; 0x0f
    27dc:	82 95       	swap	r24
    27de:	86 95       	lsr	r24
    27e0:	86 95       	lsr	r24
    27e2:	83 70       	andi	r24, 0x03	; 3
    27e4:	98 2f       	mov	r25, r24
    27e6:	91 70       	andi	r25, 0x01	; 1
    27e8:	82 e0       	ldi	r24, 0x02	; 2
    27ea:	61 e0       	ldi	r22, 0x01	; 1
    27ec:	49 2f       	mov	r20, r25
    27ee:	0e 94 7d 0b 	call	0x16fa	; 0x16fa <DIO_SetPinLevel>
    DIO_SetPinLevel(LCD_PIN_D7, GET_BIT(command, 7));
    27f2:	8f 85       	ldd	r24, Y+15	; 0x0f
    27f4:	98 2f       	mov	r25, r24
    27f6:	99 1f       	adc	r25, r25
    27f8:	99 27       	eor	r25, r25
    27fa:	99 1f       	adc	r25, r25
    27fc:	82 e0       	ldi	r24, 0x02	; 2
    27fe:	60 e0       	ldi	r22, 0x00	; 0
    2800:	49 2f       	mov	r20, r25
    2802:	0e 94 7d 0b 	call	0x16fa	; 0x16fa <DIO_SetPinLevel>

    DIO_SetPinLevel(LCD_PIN_E, DIO_HIGH);
    2806:	81 e0       	ldi	r24, 0x01	; 1
    2808:	60 e0       	ldi	r22, 0x00	; 0
    280a:	41 e0       	ldi	r20, 0x01	; 1
    280c:	0e 94 7d 0b 	call	0x16fa	; 0x16fa <DIO_SetPinLevel>
    2810:	80 e0       	ldi	r24, 0x00	; 0
    2812:	90 e0       	ldi	r25, 0x00	; 0
    2814:	a0 e0       	ldi	r26, 0x00	; 0
    2816:	b0 e4       	ldi	r27, 0x40	; 64
    2818:	8b 87       	std	Y+11, r24	; 0x0b
    281a:	9c 87       	std	Y+12, r25	; 0x0c
    281c:	ad 87       	std	Y+13, r26	; 0x0d
    281e:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    2820:	6b 85       	ldd	r22, Y+11	; 0x0b
    2822:	7c 85       	ldd	r23, Y+12	; 0x0c
    2824:	8d 85       	ldd	r24, Y+13	; 0x0d
    2826:	9e 85       	ldd	r25, Y+14	; 0x0e
    2828:	20 e0       	ldi	r18, 0x00	; 0
    282a:	30 e0       	ldi	r19, 0x00	; 0
    282c:	4a ef       	ldi	r20, 0xFA	; 250
    282e:	54 e4       	ldi	r21, 0x44	; 68
    2830:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2834:	dc 01       	movw	r26, r24
    2836:	cb 01       	movw	r24, r22
    2838:	8f 83       	std	Y+7, r24	; 0x07
    283a:	98 87       	std	Y+8, r25	; 0x08
    283c:	a9 87       	std	Y+9, r26	; 0x09
    283e:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    2840:	6f 81       	ldd	r22, Y+7	; 0x07
    2842:	78 85       	ldd	r23, Y+8	; 0x08
    2844:	89 85       	ldd	r24, Y+9	; 0x09
    2846:	9a 85       	ldd	r25, Y+10	; 0x0a
    2848:	20 e0       	ldi	r18, 0x00	; 0
    284a:	30 e0       	ldi	r19, 0x00	; 0
    284c:	40 e8       	ldi	r20, 0x80	; 128
    284e:	5f e3       	ldi	r21, 0x3F	; 63
    2850:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    2854:	88 23       	and	r24, r24
    2856:	2c f4       	brge	.+10     	; 0x2862 <LCD_SendCommand+0x128>
		__ticks = 1;
    2858:	81 e0       	ldi	r24, 0x01	; 1
    285a:	90 e0       	ldi	r25, 0x00	; 0
    285c:	9e 83       	std	Y+6, r25	; 0x06
    285e:	8d 83       	std	Y+5, r24	; 0x05
    2860:	3f c0       	rjmp	.+126    	; 0x28e0 <LCD_SendCommand+0x1a6>
	else if (__tmp > 65535)
    2862:	6f 81       	ldd	r22, Y+7	; 0x07
    2864:	78 85       	ldd	r23, Y+8	; 0x08
    2866:	89 85       	ldd	r24, Y+9	; 0x09
    2868:	9a 85       	ldd	r25, Y+10	; 0x0a
    286a:	20 e0       	ldi	r18, 0x00	; 0
    286c:	3f ef       	ldi	r19, 0xFF	; 255
    286e:	4f e7       	ldi	r20, 0x7F	; 127
    2870:	57 e4       	ldi	r21, 0x47	; 71
    2872:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    2876:	18 16       	cp	r1, r24
    2878:	4c f5       	brge	.+82     	; 0x28cc <LCD_SendCommand+0x192>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    287a:	6b 85       	ldd	r22, Y+11	; 0x0b
    287c:	7c 85       	ldd	r23, Y+12	; 0x0c
    287e:	8d 85       	ldd	r24, Y+13	; 0x0d
    2880:	9e 85       	ldd	r25, Y+14	; 0x0e
    2882:	20 e0       	ldi	r18, 0x00	; 0
    2884:	30 e0       	ldi	r19, 0x00	; 0
    2886:	40 e2       	ldi	r20, 0x20	; 32
    2888:	51 e4       	ldi	r21, 0x41	; 65
    288a:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    288e:	dc 01       	movw	r26, r24
    2890:	cb 01       	movw	r24, r22
    2892:	bc 01       	movw	r22, r24
    2894:	cd 01       	movw	r24, r26
    2896:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    289a:	dc 01       	movw	r26, r24
    289c:	cb 01       	movw	r24, r22
    289e:	9e 83       	std	Y+6, r25	; 0x06
    28a0:	8d 83       	std	Y+5, r24	; 0x05
    28a2:	0f c0       	rjmp	.+30     	; 0x28c2 <LCD_SendCommand+0x188>
    28a4:	88 ec       	ldi	r24, 0xC8	; 200
    28a6:	90 e0       	ldi	r25, 0x00	; 0
    28a8:	9c 83       	std	Y+4, r25	; 0x04
    28aa:	8b 83       	std	Y+3, r24	; 0x03
    28ac:	8b 81       	ldd	r24, Y+3	; 0x03
    28ae:	9c 81       	ldd	r25, Y+4	; 0x04
    28b0:	01 97       	sbiw	r24, 0x01	; 1
    28b2:	f1 f7       	brne	.-4      	; 0x28b0 <LCD_SendCommand+0x176>
    28b4:	9c 83       	std	Y+4, r25	; 0x04
    28b6:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    28b8:	8d 81       	ldd	r24, Y+5	; 0x05
    28ba:	9e 81       	ldd	r25, Y+6	; 0x06
    28bc:	01 97       	sbiw	r24, 0x01	; 1
    28be:	9e 83       	std	Y+6, r25	; 0x06
    28c0:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    28c2:	8d 81       	ldd	r24, Y+5	; 0x05
    28c4:	9e 81       	ldd	r25, Y+6	; 0x06
    28c6:	00 97       	sbiw	r24, 0x00	; 0
    28c8:	69 f7       	brne	.-38     	; 0x28a4 <LCD_SendCommand+0x16a>
    28ca:	14 c0       	rjmp	.+40     	; 0x28f4 <LCD_SendCommand+0x1ba>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    28cc:	6f 81       	ldd	r22, Y+7	; 0x07
    28ce:	78 85       	ldd	r23, Y+8	; 0x08
    28d0:	89 85       	ldd	r24, Y+9	; 0x09
    28d2:	9a 85       	ldd	r25, Y+10	; 0x0a
    28d4:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    28d8:	dc 01       	movw	r26, r24
    28da:	cb 01       	movw	r24, r22
    28dc:	9e 83       	std	Y+6, r25	; 0x06
    28de:	8d 83       	std	Y+5, r24	; 0x05
    28e0:	8d 81       	ldd	r24, Y+5	; 0x05
    28e2:	9e 81       	ldd	r25, Y+6	; 0x06
    28e4:	9a 83       	std	Y+2, r25	; 0x02
    28e6:	89 83       	std	Y+1, r24	; 0x01
    28e8:	89 81       	ldd	r24, Y+1	; 0x01
    28ea:	9a 81       	ldd	r25, Y+2	; 0x02
    28ec:	01 97       	sbiw	r24, 0x01	; 1
    28ee:	f1 f7       	brne	.-4      	; 0x28ec <LCD_SendCommand+0x1b2>
    28f0:	9a 83       	std	Y+2, r25	; 0x02
    28f2:	89 83       	std	Y+1, r24	; 0x01
    _delay_ms(2);
    DIO_SetPinLevel(LCD_PIN_E, DIO_LOW);
    28f4:	81 e0       	ldi	r24, 0x01	; 1
    28f6:	60 e0       	ldi	r22, 0x00	; 0
    28f8:	40 e0       	ldi	r20, 0x00	; 0
    28fa:	0e 94 7d 0b 	call	0x16fa	; 0x16fa <DIO_SetPinLevel>
}
    28fe:	2f 96       	adiw	r28, 0x0f	; 15
    2900:	0f b6       	in	r0, 0x3f	; 63
    2902:	f8 94       	cli
    2904:	de bf       	out	0x3e, r29	; 62
    2906:	0f be       	out	0x3f, r0	; 63
    2908:	cd bf       	out	0x3d, r28	; 61
    290a:	cf 91       	pop	r28
    290c:	df 91       	pop	r29
    290e:	08 95       	ret

00002910 <LCD_SendData>:

static void LCD_SendData(u8 data) {
    2910:	df 93       	push	r29
    2912:	cf 93       	push	r28
    2914:	cd b7       	in	r28, 0x3d	; 61
    2916:	de b7       	in	r29, 0x3e	; 62
    2918:	2f 97       	sbiw	r28, 0x0f	; 15
    291a:	0f b6       	in	r0, 0x3f	; 63
    291c:	f8 94       	cli
    291e:	de bf       	out	0x3e, r29	; 62
    2920:	0f be       	out	0x3f, r0	; 63
    2922:	cd bf       	out	0x3d, r28	; 61
    2924:	8f 87       	std	Y+15, r24	; 0x0f
    /* Set Control Pins:
        RS : 1 Data
        RW : 0 Write
    */
    DIO_SetPinLevel(LCD_PIN_RS, DIO_HIGH);
    2926:	81 e0       	ldi	r24, 0x01	; 1
    2928:	62 e0       	ldi	r22, 0x02	; 2
    292a:	41 e0       	ldi	r20, 0x01	; 1
    292c:	0e 94 7d 0b 	call	0x16fa	; 0x16fa <DIO_SetPinLevel>
    DIO_SetPinLevel(LCD_PIN_RW, DIO_LOW);
    2930:	81 e0       	ldi	r24, 0x01	; 1
    2932:	61 e0       	ldi	r22, 0x01	; 1
    2934:	40 e0       	ldi	r20, 0x00	; 0
    2936:	0e 94 7d 0b 	call	0x16fa	; 0x16fa <DIO_SetPinLevel>

    /* Set Data Pins */
    DIO_SetPinLevel(LCD_PIN_D0, GET_BIT(data, 0));
    293a:	8f 85       	ldd	r24, Y+15	; 0x0f
    293c:	98 2f       	mov	r25, r24
    293e:	91 70       	andi	r25, 0x01	; 1
    2940:	82 e0       	ldi	r24, 0x02	; 2
    2942:	67 e0       	ldi	r22, 0x07	; 7
    2944:	49 2f       	mov	r20, r25
    2946:	0e 94 7d 0b 	call	0x16fa	; 0x16fa <DIO_SetPinLevel>
    DIO_SetPinLevel(LCD_PIN_D1, GET_BIT(data, 1));
    294a:	8f 85       	ldd	r24, Y+15	; 0x0f
    294c:	86 95       	lsr	r24
    294e:	98 2f       	mov	r25, r24
    2950:	91 70       	andi	r25, 0x01	; 1
    2952:	82 e0       	ldi	r24, 0x02	; 2
    2954:	66 e0       	ldi	r22, 0x06	; 6
    2956:	49 2f       	mov	r20, r25
    2958:	0e 94 7d 0b 	call	0x16fa	; 0x16fa <DIO_SetPinLevel>
    DIO_SetPinLevel(LCD_PIN_D2, GET_BIT(data, 2));
    295c:	8f 85       	ldd	r24, Y+15	; 0x0f
    295e:	86 95       	lsr	r24
    2960:	86 95       	lsr	r24
    2962:	98 2f       	mov	r25, r24
    2964:	91 70       	andi	r25, 0x01	; 1
    2966:	82 e0       	ldi	r24, 0x02	; 2
    2968:	65 e0       	ldi	r22, 0x05	; 5
    296a:	49 2f       	mov	r20, r25
    296c:	0e 94 7d 0b 	call	0x16fa	; 0x16fa <DIO_SetPinLevel>
    DIO_SetPinLevel(LCD_PIN_D3, GET_BIT(data, 3));
    2970:	8f 85       	ldd	r24, Y+15	; 0x0f
    2972:	86 95       	lsr	r24
    2974:	86 95       	lsr	r24
    2976:	86 95       	lsr	r24
    2978:	98 2f       	mov	r25, r24
    297a:	91 70       	andi	r25, 0x01	; 1
    297c:	82 e0       	ldi	r24, 0x02	; 2
    297e:	64 e0       	ldi	r22, 0x04	; 4
    2980:	49 2f       	mov	r20, r25
    2982:	0e 94 7d 0b 	call	0x16fa	; 0x16fa <DIO_SetPinLevel>
    DIO_SetPinLevel(LCD_PIN_D4, GET_BIT(data, 4));
    2986:	8f 85       	ldd	r24, Y+15	; 0x0f
    2988:	82 95       	swap	r24
    298a:	8f 70       	andi	r24, 0x0F	; 15
    298c:	98 2f       	mov	r25, r24
    298e:	91 70       	andi	r25, 0x01	; 1
    2990:	82 e0       	ldi	r24, 0x02	; 2
    2992:	63 e0       	ldi	r22, 0x03	; 3
    2994:	49 2f       	mov	r20, r25
    2996:	0e 94 7d 0b 	call	0x16fa	; 0x16fa <DIO_SetPinLevel>
    DIO_SetPinLevel(LCD_PIN_D5, GET_BIT(data, 5));
    299a:	8f 85       	ldd	r24, Y+15	; 0x0f
    299c:	82 95       	swap	r24
    299e:	86 95       	lsr	r24
    29a0:	87 70       	andi	r24, 0x07	; 7
    29a2:	98 2f       	mov	r25, r24
    29a4:	91 70       	andi	r25, 0x01	; 1
    29a6:	82 e0       	ldi	r24, 0x02	; 2
    29a8:	62 e0       	ldi	r22, 0x02	; 2
    29aa:	49 2f       	mov	r20, r25
    29ac:	0e 94 7d 0b 	call	0x16fa	; 0x16fa <DIO_SetPinLevel>
    DIO_SetPinLevel(LCD_PIN_D6, GET_BIT(data, 6));
    29b0:	8f 85       	ldd	r24, Y+15	; 0x0f
    29b2:	82 95       	swap	r24
    29b4:	86 95       	lsr	r24
    29b6:	86 95       	lsr	r24
    29b8:	83 70       	andi	r24, 0x03	; 3
    29ba:	98 2f       	mov	r25, r24
    29bc:	91 70       	andi	r25, 0x01	; 1
    29be:	82 e0       	ldi	r24, 0x02	; 2
    29c0:	61 e0       	ldi	r22, 0x01	; 1
    29c2:	49 2f       	mov	r20, r25
    29c4:	0e 94 7d 0b 	call	0x16fa	; 0x16fa <DIO_SetPinLevel>
    DIO_SetPinLevel(LCD_PIN_D7, GET_BIT(data, 7));
    29c8:	8f 85       	ldd	r24, Y+15	; 0x0f
    29ca:	98 2f       	mov	r25, r24
    29cc:	99 1f       	adc	r25, r25
    29ce:	99 27       	eor	r25, r25
    29d0:	99 1f       	adc	r25, r25
    29d2:	82 e0       	ldi	r24, 0x02	; 2
    29d4:	60 e0       	ldi	r22, 0x00	; 0
    29d6:	49 2f       	mov	r20, r25
    29d8:	0e 94 7d 0b 	call	0x16fa	; 0x16fa <DIO_SetPinLevel>

    DIO_SetPinLevel(LCD_PIN_E, DIO_HIGH);
    29dc:	81 e0       	ldi	r24, 0x01	; 1
    29de:	60 e0       	ldi	r22, 0x00	; 0
    29e0:	41 e0       	ldi	r20, 0x01	; 1
    29e2:	0e 94 7d 0b 	call	0x16fa	; 0x16fa <DIO_SetPinLevel>
    29e6:	80 e0       	ldi	r24, 0x00	; 0
    29e8:	90 e0       	ldi	r25, 0x00	; 0
    29ea:	a0 e0       	ldi	r26, 0x00	; 0
    29ec:	b0 e4       	ldi	r27, 0x40	; 64
    29ee:	8b 87       	std	Y+11, r24	; 0x0b
    29f0:	9c 87       	std	Y+12, r25	; 0x0c
    29f2:	ad 87       	std	Y+13, r26	; 0x0d
    29f4:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    29f6:	6b 85       	ldd	r22, Y+11	; 0x0b
    29f8:	7c 85       	ldd	r23, Y+12	; 0x0c
    29fa:	8d 85       	ldd	r24, Y+13	; 0x0d
    29fc:	9e 85       	ldd	r25, Y+14	; 0x0e
    29fe:	20 e0       	ldi	r18, 0x00	; 0
    2a00:	30 e0       	ldi	r19, 0x00	; 0
    2a02:	4a ef       	ldi	r20, 0xFA	; 250
    2a04:	54 e4       	ldi	r21, 0x44	; 68
    2a06:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2a0a:	dc 01       	movw	r26, r24
    2a0c:	cb 01       	movw	r24, r22
    2a0e:	8f 83       	std	Y+7, r24	; 0x07
    2a10:	98 87       	std	Y+8, r25	; 0x08
    2a12:	a9 87       	std	Y+9, r26	; 0x09
    2a14:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    2a16:	6f 81       	ldd	r22, Y+7	; 0x07
    2a18:	78 85       	ldd	r23, Y+8	; 0x08
    2a1a:	89 85       	ldd	r24, Y+9	; 0x09
    2a1c:	9a 85       	ldd	r25, Y+10	; 0x0a
    2a1e:	20 e0       	ldi	r18, 0x00	; 0
    2a20:	30 e0       	ldi	r19, 0x00	; 0
    2a22:	40 e8       	ldi	r20, 0x80	; 128
    2a24:	5f e3       	ldi	r21, 0x3F	; 63
    2a26:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    2a2a:	88 23       	and	r24, r24
    2a2c:	2c f4       	brge	.+10     	; 0x2a38 <LCD_SendData+0x128>
		__ticks = 1;
    2a2e:	81 e0       	ldi	r24, 0x01	; 1
    2a30:	90 e0       	ldi	r25, 0x00	; 0
    2a32:	9e 83       	std	Y+6, r25	; 0x06
    2a34:	8d 83       	std	Y+5, r24	; 0x05
    2a36:	3f c0       	rjmp	.+126    	; 0x2ab6 <LCD_SendData+0x1a6>
	else if (__tmp > 65535)
    2a38:	6f 81       	ldd	r22, Y+7	; 0x07
    2a3a:	78 85       	ldd	r23, Y+8	; 0x08
    2a3c:	89 85       	ldd	r24, Y+9	; 0x09
    2a3e:	9a 85       	ldd	r25, Y+10	; 0x0a
    2a40:	20 e0       	ldi	r18, 0x00	; 0
    2a42:	3f ef       	ldi	r19, 0xFF	; 255
    2a44:	4f e7       	ldi	r20, 0x7F	; 127
    2a46:	57 e4       	ldi	r21, 0x47	; 71
    2a48:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    2a4c:	18 16       	cp	r1, r24
    2a4e:	4c f5       	brge	.+82     	; 0x2aa2 <LCD_SendData+0x192>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    2a50:	6b 85       	ldd	r22, Y+11	; 0x0b
    2a52:	7c 85       	ldd	r23, Y+12	; 0x0c
    2a54:	8d 85       	ldd	r24, Y+13	; 0x0d
    2a56:	9e 85       	ldd	r25, Y+14	; 0x0e
    2a58:	20 e0       	ldi	r18, 0x00	; 0
    2a5a:	30 e0       	ldi	r19, 0x00	; 0
    2a5c:	40 e2       	ldi	r20, 0x20	; 32
    2a5e:	51 e4       	ldi	r21, 0x41	; 65
    2a60:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2a64:	dc 01       	movw	r26, r24
    2a66:	cb 01       	movw	r24, r22
    2a68:	bc 01       	movw	r22, r24
    2a6a:	cd 01       	movw	r24, r26
    2a6c:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2a70:	dc 01       	movw	r26, r24
    2a72:	cb 01       	movw	r24, r22
    2a74:	9e 83       	std	Y+6, r25	; 0x06
    2a76:	8d 83       	std	Y+5, r24	; 0x05
    2a78:	0f c0       	rjmp	.+30     	; 0x2a98 <LCD_SendData+0x188>
    2a7a:	88 ec       	ldi	r24, 0xC8	; 200
    2a7c:	90 e0       	ldi	r25, 0x00	; 0
    2a7e:	9c 83       	std	Y+4, r25	; 0x04
    2a80:	8b 83       	std	Y+3, r24	; 0x03
    2a82:	8b 81       	ldd	r24, Y+3	; 0x03
    2a84:	9c 81       	ldd	r25, Y+4	; 0x04
    2a86:	01 97       	sbiw	r24, 0x01	; 1
    2a88:	f1 f7       	brne	.-4      	; 0x2a86 <LCD_SendData+0x176>
    2a8a:	9c 83       	std	Y+4, r25	; 0x04
    2a8c:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    2a8e:	8d 81       	ldd	r24, Y+5	; 0x05
    2a90:	9e 81       	ldd	r25, Y+6	; 0x06
    2a92:	01 97       	sbiw	r24, 0x01	; 1
    2a94:	9e 83       	std	Y+6, r25	; 0x06
    2a96:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    2a98:	8d 81       	ldd	r24, Y+5	; 0x05
    2a9a:	9e 81       	ldd	r25, Y+6	; 0x06
    2a9c:	00 97       	sbiw	r24, 0x00	; 0
    2a9e:	69 f7       	brne	.-38     	; 0x2a7a <LCD_SendData+0x16a>
    2aa0:	14 c0       	rjmp	.+40     	; 0x2aca <LCD_SendData+0x1ba>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    2aa2:	6f 81       	ldd	r22, Y+7	; 0x07
    2aa4:	78 85       	ldd	r23, Y+8	; 0x08
    2aa6:	89 85       	ldd	r24, Y+9	; 0x09
    2aa8:	9a 85       	ldd	r25, Y+10	; 0x0a
    2aaa:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2aae:	dc 01       	movw	r26, r24
    2ab0:	cb 01       	movw	r24, r22
    2ab2:	9e 83       	std	Y+6, r25	; 0x06
    2ab4:	8d 83       	std	Y+5, r24	; 0x05
    2ab6:	8d 81       	ldd	r24, Y+5	; 0x05
    2ab8:	9e 81       	ldd	r25, Y+6	; 0x06
    2aba:	9a 83       	std	Y+2, r25	; 0x02
    2abc:	89 83       	std	Y+1, r24	; 0x01
    2abe:	89 81       	ldd	r24, Y+1	; 0x01
    2ac0:	9a 81       	ldd	r25, Y+2	; 0x02
    2ac2:	01 97       	sbiw	r24, 0x01	; 1
    2ac4:	f1 f7       	brne	.-4      	; 0x2ac2 <LCD_SendData+0x1b2>
    2ac6:	9a 83       	std	Y+2, r25	; 0x02
    2ac8:	89 83       	std	Y+1, r24	; 0x01
    _delay_ms(2);
    DIO_SetPinLevel(LCD_PIN_E, DIO_LOW);
    2aca:	81 e0       	ldi	r24, 0x01	; 1
    2acc:	60 e0       	ldi	r22, 0x00	; 0
    2ace:	40 e0       	ldi	r20, 0x00	; 0
    2ad0:	0e 94 7d 0b 	call	0x16fa	; 0x16fa <DIO_SetPinLevel>
}
    2ad4:	2f 96       	adiw	r28, 0x0f	; 15
    2ad6:	0f b6       	in	r0, 0x3f	; 63
    2ad8:	f8 94       	cli
    2ada:	de bf       	out	0x3e, r29	; 62
    2adc:	0f be       	out	0x3f, r0	; 63
    2ade:	cd bf       	out	0x3d, r28	; 61
    2ae0:	cf 91       	pop	r28
    2ae2:	df 91       	pop	r29
    2ae4:	08 95       	ret

00002ae6 <LCD_InitPinsMode>:


static void LCD_InitPinsMode(void) {
    2ae6:	df 93       	push	r29
    2ae8:	cf 93       	push	r28
    2aea:	cd b7       	in	r28, 0x3d	; 61
    2aec:	de b7       	in	r29, 0x3e	; 62
    DIO_SetPinMode(LCD_PIN_RS, DIO_OUTPUT);
    2aee:	81 e0       	ldi	r24, 0x01	; 1
    2af0:	62 e0       	ldi	r22, 0x02	; 2
    2af2:	42 e0       	ldi	r20, 0x02	; 2
    2af4:	0e 94 6f 08 	call	0x10de	; 0x10de <DIO_SetPinMode>
    DIO_SetPinMode(LCD_PIN_RW, DIO_OUTPUT);
    2af8:	81 e0       	ldi	r24, 0x01	; 1
    2afa:	61 e0       	ldi	r22, 0x01	; 1
    2afc:	42 e0       	ldi	r20, 0x02	; 2
    2afe:	0e 94 6f 08 	call	0x10de	; 0x10de <DIO_SetPinMode>
    DIO_SetPinMode(LCD_PIN_E , DIO_OUTPUT);
    2b02:	81 e0       	ldi	r24, 0x01	; 1
    2b04:	60 e0       	ldi	r22, 0x00	; 0
    2b06:	42 e0       	ldi	r20, 0x02	; 2
    2b08:	0e 94 6f 08 	call	0x10de	; 0x10de <DIO_SetPinMode>
    DIO_SetPinMode(LCD_PIN_D0, DIO_OUTPUT);
    2b0c:	82 e0       	ldi	r24, 0x02	; 2
    2b0e:	67 e0       	ldi	r22, 0x07	; 7
    2b10:	42 e0       	ldi	r20, 0x02	; 2
    2b12:	0e 94 6f 08 	call	0x10de	; 0x10de <DIO_SetPinMode>
    DIO_SetPinMode(LCD_PIN_D1, DIO_OUTPUT);
    2b16:	82 e0       	ldi	r24, 0x02	; 2
    2b18:	66 e0       	ldi	r22, 0x06	; 6
    2b1a:	42 e0       	ldi	r20, 0x02	; 2
    2b1c:	0e 94 6f 08 	call	0x10de	; 0x10de <DIO_SetPinMode>
    DIO_SetPinMode(LCD_PIN_D2, DIO_OUTPUT);
    2b20:	82 e0       	ldi	r24, 0x02	; 2
    2b22:	65 e0       	ldi	r22, 0x05	; 5
    2b24:	42 e0       	ldi	r20, 0x02	; 2
    2b26:	0e 94 6f 08 	call	0x10de	; 0x10de <DIO_SetPinMode>
    DIO_SetPinMode(LCD_PIN_D3, DIO_OUTPUT);
    2b2a:	82 e0       	ldi	r24, 0x02	; 2
    2b2c:	64 e0       	ldi	r22, 0x04	; 4
    2b2e:	42 e0       	ldi	r20, 0x02	; 2
    2b30:	0e 94 6f 08 	call	0x10de	; 0x10de <DIO_SetPinMode>
    DIO_SetPinMode(LCD_PIN_D4, DIO_OUTPUT);
    2b34:	82 e0       	ldi	r24, 0x02	; 2
    2b36:	63 e0       	ldi	r22, 0x03	; 3
    2b38:	42 e0       	ldi	r20, 0x02	; 2
    2b3a:	0e 94 6f 08 	call	0x10de	; 0x10de <DIO_SetPinMode>
    DIO_SetPinMode(LCD_PIN_D5, DIO_OUTPUT);
    2b3e:	82 e0       	ldi	r24, 0x02	; 2
    2b40:	62 e0       	ldi	r22, 0x02	; 2
    2b42:	42 e0       	ldi	r20, 0x02	; 2
    2b44:	0e 94 6f 08 	call	0x10de	; 0x10de <DIO_SetPinMode>
    DIO_SetPinMode(LCD_PIN_D6, DIO_OUTPUT);
    2b48:	82 e0       	ldi	r24, 0x02	; 2
    2b4a:	61 e0       	ldi	r22, 0x01	; 1
    2b4c:	42 e0       	ldi	r20, 0x02	; 2
    2b4e:	0e 94 6f 08 	call	0x10de	; 0x10de <DIO_SetPinMode>
    DIO_SetPinMode(LCD_PIN_D7, DIO_OUTPUT);
    2b52:	82 e0       	ldi	r24, 0x02	; 2
    2b54:	60 e0       	ldi	r22, 0x00	; 0
    2b56:	42 e0       	ldi	r20, 0x02	; 2
    2b58:	0e 94 6f 08 	call	0x10de	; 0x10de <DIO_SetPinMode>
}
    2b5c:	cf 91       	pop	r28
    2b5e:	df 91       	pop	r29
    2b60:	08 95       	ret

00002b62 <SPI_Init>:
#include"SPI.h"
#include"SPI_confg.h"
#include "DIO.h"


void SPI_Init(){
    2b62:	df 93       	push	r29
    2b64:	cf 93       	push	r28
    2b66:	cd b7       	in	r28, 0x3d	; 61
    2b68:	de b7       	in	r29, 0x3e	; 62


    SET_BIT(SPCR,SPCR_SPE);
    2b6a:	ad e2       	ldi	r26, 0x2D	; 45
    2b6c:	b0 e0       	ldi	r27, 0x00	; 0
    2b6e:	ed e2       	ldi	r30, 0x2D	; 45
    2b70:	f0 e0       	ldi	r31, 0x00	; 0
    2b72:	80 81       	ld	r24, Z
    2b74:	80 64       	ori	r24, 0x40	; 64
    2b76:	8c 93       	st	X, r24
        DIO_SetPinMode(DIO_PORTB,DIO_PIN5,DIO_OUTPUT);
        DIO_SetPinMode(DIO_PORTB,DIO_PIN6,DIO_INPUT_FLOATING);
        DIO_SetPinMode(DIO_PORTB,DIO_PIN7,DIO_OUTPUT);
        DIO_SetPinMode(DIO_PORTB,DIO_PIN4,DIO_OUTPUT);
    #elif (1 || SPI_Mode == SPI_Slave)
        CLR_BIT(SPCR,SPCR_MSTR);
    2b78:	ad e2       	ldi	r26, 0x2D	; 45
    2b7a:	b0 e0       	ldi	r27, 0x00	; 0
    2b7c:	ed e2       	ldi	r30, 0x2D	; 45
    2b7e:	f0 e0       	ldi	r31, 0x00	; 0
    2b80:	80 81       	ld	r24, Z
    2b82:	8f 7e       	andi	r24, 0xEF	; 239
    2b84:	8c 93       	st	X, r24
        DIO_SetPinMode(DIO_PORTB,DIO_PIN5,DIO_INPUT_FLOATING);
    2b86:	81 e0       	ldi	r24, 0x01	; 1
    2b88:	65 e0       	ldi	r22, 0x05	; 5
    2b8a:	40 e0       	ldi	r20, 0x00	; 0
    2b8c:	0e 94 6f 08 	call	0x10de	; 0x10de <DIO_SetPinMode>
        DIO_SetPinMode(DIO_PORTB,DIO_PIN6,DIO_OUTPUT);
    2b90:	81 e0       	ldi	r24, 0x01	; 1
    2b92:	66 e0       	ldi	r22, 0x06	; 6
    2b94:	42 e0       	ldi	r20, 0x02	; 2
    2b96:	0e 94 6f 08 	call	0x10de	; 0x10de <DIO_SetPinMode>
        DIO_SetPinMode(DIO_PORTB,DIO_PIN7,DIO_INPUT_FLOATING);
    2b9a:	81 e0       	ldi	r24, 0x01	; 1
    2b9c:	67 e0       	ldi	r22, 0x07	; 7
    2b9e:	40 e0       	ldi	r20, 0x00	; 0
    2ba0:	0e 94 6f 08 	call	0x10de	; 0x10de <DIO_SetPinMode>
        DIO_SetPinMode(DIO_PORTB,DIO_PIN4,DIO_INPUT_FLOATING);
    2ba4:	81 e0       	ldi	r24, 0x01	; 1
    2ba6:	64 e0       	ldi	r22, 0x04	; 4
    2ba8:	40 e0       	ldi	r20, 0x00	; 0
    2baa:	0e 94 6f 08 	call	0x10de	; 0x10de <DIO_SetPinMode>
    #endif
    #if (SPI_Direction == LSB)
        SET_BIT(SPCR,SPCR_DORD);
    2bae:	ad e2       	ldi	r26, 0x2D	; 45
    2bb0:	b0 e0       	ldi	r27, 0x00	; 0
    2bb2:	ed e2       	ldi	r30, 0x2D	; 45
    2bb4:	f0 e0       	ldi	r31, 0x00	; 0
    2bb6:	80 81       	ld	r24, Z
    2bb8:	80 62       	ori	r24, 0x20	; 32
    2bba:	8c 93       	st	X, r24
    #elif (SPI_Direction == MSB)
        CLR_BIT(SPCR,SPCR_DORD);
    #endif

    
}
    2bbc:	cf 91       	pop	r28
    2bbe:	df 91       	pop	r29
    2bc0:	08 95       	ret

00002bc2 <SPI_Send_Data>:

void SPI_Send_Data(u8 data){
    2bc2:	df 93       	push	r29
    2bc4:	cf 93       	push	r28
    2bc6:	0f 92       	push	r0
    2bc8:	cd b7       	in	r28, 0x3d	; 61
    2bca:	de b7       	in	r29, 0x3e	; 62
    2bcc:	89 83       	std	Y+1, r24	; 0x01
    SPDR=data;
    2bce:	ef e2       	ldi	r30, 0x2F	; 47
    2bd0:	f0 e0       	ldi	r31, 0x00	; 0
    2bd2:	89 81       	ldd	r24, Y+1	; 0x01
    2bd4:	80 83       	st	Z, r24
    while (GET_BIT(SPSR,7)==0);
    2bd6:	ee e2       	ldi	r30, 0x2E	; 46
    2bd8:	f0 e0       	ldi	r31, 0x00	; 0
    2bda:	80 81       	ld	r24, Z
    2bdc:	88 23       	and	r24, r24
    2bde:	dc f7       	brge	.-10     	; 0x2bd6 <SPI_Send_Data+0x14>
}
    2be0:	0f 90       	pop	r0
    2be2:	cf 91       	pop	r28
    2be4:	df 91       	pop	r29
    2be6:	08 95       	ret

00002be8 <SPI_Recieve_Data>:

u8 SPI_Recieve_Data()
{
    2be8:	df 93       	push	r29
    2bea:	cf 93       	push	r28
    2bec:	cd b7       	in	r28, 0x3d	; 61
    2bee:	de b7       	in	r29, 0x3e	; 62
    while (GET_BIT(SPSR,7)==0);
    2bf0:	ee e2       	ldi	r30, 0x2E	; 46
    2bf2:	f0 e0       	ldi	r31, 0x00	; 0
    2bf4:	80 81       	ld	r24, Z
    2bf6:	88 23       	and	r24, r24
    2bf8:	dc f7       	brge	.-10     	; 0x2bf0 <SPI_Recieve_Data+0x8>
    return SPDR;
    2bfa:	ef e2       	ldi	r30, 0x2F	; 47
    2bfc:	f0 e0       	ldi	r31, 0x00	; 0
    2bfe:	80 81       	ld	r24, Z
}
    2c00:	cf 91       	pop	r28
    2c02:	df 91       	pop	r29
    2c04:	08 95       	ret

00002c06 <SSD_Init>:
	_delay_ms(500);
	PORTD = 0b01101111; // Print 9
	_delay_ms(500);
	PORTD = 0b00000000; // off*/

void SSD_Init(void) {
    2c06:	df 93       	push	r29
    2c08:	cf 93       	push	r28
    2c0a:	cd b7       	in	r28, 0x3d	; 61
    2c0c:	de b7       	in	r29, 0x3e	; 62
    DIO_SetPinMode(SSD_PIN_A, DIO_OUTPUT);
    2c0e:	82 e0       	ldi	r24, 0x02	; 2
    2c10:	60 e0       	ldi	r22, 0x00	; 0
    2c12:	42 e0       	ldi	r20, 0x02	; 2
    2c14:	0e 94 6f 08 	call	0x10de	; 0x10de <DIO_SetPinMode>
    DIO_SetPinMode(SSD_PIN_B, DIO_OUTPUT);
    2c18:	82 e0       	ldi	r24, 0x02	; 2
    2c1a:	61 e0       	ldi	r22, 0x01	; 1
    2c1c:	42 e0       	ldi	r20, 0x02	; 2
    2c1e:	0e 94 6f 08 	call	0x10de	; 0x10de <DIO_SetPinMode>
    DIO_SetPinMode(SSD_PIN_C, DIO_OUTPUT);
    2c22:	82 e0       	ldi	r24, 0x02	; 2
    2c24:	62 e0       	ldi	r22, 0x02	; 2
    2c26:	42 e0       	ldi	r20, 0x02	; 2
    2c28:	0e 94 6f 08 	call	0x10de	; 0x10de <DIO_SetPinMode>
    DIO_SetPinMode(SSD_PIN_D, DIO_OUTPUT);
    2c2c:	82 e0       	ldi	r24, 0x02	; 2
    2c2e:	63 e0       	ldi	r22, 0x03	; 3
    2c30:	42 e0       	ldi	r20, 0x02	; 2
    2c32:	0e 94 6f 08 	call	0x10de	; 0x10de <DIO_SetPinMode>
    DIO_SetPinMode(SSD_PIN_E, DIO_OUTPUT);
    2c36:	82 e0       	ldi	r24, 0x02	; 2
    2c38:	64 e0       	ldi	r22, 0x04	; 4
    2c3a:	42 e0       	ldi	r20, 0x02	; 2
    2c3c:	0e 94 6f 08 	call	0x10de	; 0x10de <DIO_SetPinMode>
    DIO_SetPinMode(SSD_PIN_F, DIO_OUTPUT);
    2c40:	82 e0       	ldi	r24, 0x02	; 2
    2c42:	65 e0       	ldi	r22, 0x05	; 5
    2c44:	42 e0       	ldi	r20, 0x02	; 2
    2c46:	0e 94 6f 08 	call	0x10de	; 0x10de <DIO_SetPinMode>
    DIO_SetPinMode(SSD_PIN_G, DIO_OUTPUT);
    2c4a:	82 e0       	ldi	r24, 0x02	; 2
    2c4c:	66 e0       	ldi	r22, 0x06	; 6
    2c4e:	42 e0       	ldi	r20, 0x02	; 2
    2c50:	0e 94 6f 08 	call	0x10de	; 0x10de <DIO_SetPinMode>

}
    2c54:	cf 91       	pop	r28
    2c56:	df 91       	pop	r29
    2c58:	08 95       	ret

00002c5a <SSD_Write>:
void SSD_Write (SSD_NumberType number) {
    2c5a:	df 93       	push	r29
    2c5c:	cf 93       	push	r28
    2c5e:	00 d0       	rcall	.+0      	; 0x2c60 <SSD_Write+0x6>
    2c60:	0f 92       	push	r0
    2c62:	cd b7       	in	r28, 0x3d	; 61
    2c64:	de b7       	in	r29, 0x3e	; 62
    2c66:	89 83       	std	Y+1, r24	; 0x01
    switch (number)
    2c68:	89 81       	ldd	r24, Y+1	; 0x01
    2c6a:	28 2f       	mov	r18, r24
    2c6c:	30 e0       	ldi	r19, 0x00	; 0
    2c6e:	3b 83       	std	Y+3, r19	; 0x03
    2c70:	2a 83       	std	Y+2, r18	; 0x02
    2c72:	8a 81       	ldd	r24, Y+2	; 0x02
    2c74:	9b 81       	ldd	r25, Y+3	; 0x03
    2c76:	84 30       	cpi	r24, 0x04	; 4
    2c78:	91 05       	cpc	r25, r1
    2c7a:	09 f4       	brne	.+2      	; 0x2c7e <SSD_Write+0x24>
    2c7c:	d7 c0       	rjmp	.+430    	; 0x2e2c <SSD_Write+0x1d2>
    2c7e:	2a 81       	ldd	r18, Y+2	; 0x02
    2c80:	3b 81       	ldd	r19, Y+3	; 0x03
    2c82:	25 30       	cpi	r18, 0x05	; 5
    2c84:	31 05       	cpc	r19, r1
    2c86:	ec f4       	brge	.+58     	; 0x2cc2 <SSD_Write+0x68>
    2c88:	8a 81       	ldd	r24, Y+2	; 0x02
    2c8a:	9b 81       	ldd	r25, Y+3	; 0x03
    2c8c:	81 30       	cpi	r24, 0x01	; 1
    2c8e:	91 05       	cpc	r25, r1
    2c90:	09 f4       	brne	.+2      	; 0x2c94 <SSD_Write+0x3a>
    2c92:	60 c0       	rjmp	.+192    	; 0x2d54 <SSD_Write+0xfa>
    2c94:	2a 81       	ldd	r18, Y+2	; 0x02
    2c96:	3b 81       	ldd	r19, Y+3	; 0x03
    2c98:	22 30       	cpi	r18, 0x02	; 2
    2c9a:	31 05       	cpc	r19, r1
    2c9c:	2c f4       	brge	.+10     	; 0x2ca8 <SSD_Write+0x4e>
    2c9e:	8a 81       	ldd	r24, Y+2	; 0x02
    2ca0:	9b 81       	ldd	r25, Y+3	; 0x03
    2ca2:	00 97       	sbiw	r24, 0x00	; 0
    2ca4:	99 f1       	breq	.+102    	; 0x2d0c <SSD_Write+0xb2>
    2ca6:	9a c1       	rjmp	.+820    	; 0x2fdc <SSD_Write+0x382>
    2ca8:	2a 81       	ldd	r18, Y+2	; 0x02
    2caa:	3b 81       	ldd	r19, Y+3	; 0x03
    2cac:	22 30       	cpi	r18, 0x02	; 2
    2cae:	31 05       	cpc	r19, r1
    2cb0:	09 f4       	brne	.+2      	; 0x2cb4 <SSD_Write+0x5a>
    2cb2:	74 c0       	rjmp	.+232    	; 0x2d9c <SSD_Write+0x142>
    2cb4:	8a 81       	ldd	r24, Y+2	; 0x02
    2cb6:	9b 81       	ldd	r25, Y+3	; 0x03
    2cb8:	83 30       	cpi	r24, 0x03	; 3
    2cba:	91 05       	cpc	r25, r1
    2cbc:	09 f4       	brne	.+2      	; 0x2cc0 <SSD_Write+0x66>
    2cbe:	92 c0       	rjmp	.+292    	; 0x2de4 <SSD_Write+0x18a>
    2cc0:	8d c1       	rjmp	.+794    	; 0x2fdc <SSD_Write+0x382>
    2cc2:	2a 81       	ldd	r18, Y+2	; 0x02
    2cc4:	3b 81       	ldd	r19, Y+3	; 0x03
    2cc6:	27 30       	cpi	r18, 0x07	; 7
    2cc8:	31 05       	cpc	r19, r1
    2cca:	09 f4       	brne	.+2      	; 0x2cce <SSD_Write+0x74>
    2ccc:	1b c1       	rjmp	.+566    	; 0x2f04 <SSD_Write+0x2aa>
    2cce:	8a 81       	ldd	r24, Y+2	; 0x02
    2cd0:	9b 81       	ldd	r25, Y+3	; 0x03
    2cd2:	88 30       	cpi	r24, 0x08	; 8
    2cd4:	91 05       	cpc	r25, r1
    2cd6:	6c f4       	brge	.+26     	; 0x2cf2 <SSD_Write+0x98>
    2cd8:	2a 81       	ldd	r18, Y+2	; 0x02
    2cda:	3b 81       	ldd	r19, Y+3	; 0x03
    2cdc:	25 30       	cpi	r18, 0x05	; 5
    2cde:	31 05       	cpc	r19, r1
    2ce0:	09 f4       	brne	.+2      	; 0x2ce4 <SSD_Write+0x8a>
    2ce2:	c8 c0       	rjmp	.+400    	; 0x2e74 <SSD_Write+0x21a>
    2ce4:	8a 81       	ldd	r24, Y+2	; 0x02
    2ce6:	9b 81       	ldd	r25, Y+3	; 0x03
    2ce8:	86 30       	cpi	r24, 0x06	; 6
    2cea:	91 05       	cpc	r25, r1
    2cec:	09 f4       	brne	.+2      	; 0x2cf0 <SSD_Write+0x96>
    2cee:	e6 c0       	rjmp	.+460    	; 0x2ebc <SSD_Write+0x262>
    2cf0:	75 c1       	rjmp	.+746    	; 0x2fdc <SSD_Write+0x382>
    2cf2:	2a 81       	ldd	r18, Y+2	; 0x02
    2cf4:	3b 81       	ldd	r19, Y+3	; 0x03
    2cf6:	28 30       	cpi	r18, 0x08	; 8
    2cf8:	31 05       	cpc	r19, r1
    2cfa:	09 f4       	brne	.+2      	; 0x2cfe <SSD_Write+0xa4>
    2cfc:	27 c1       	rjmp	.+590    	; 0x2f4c <SSD_Write+0x2f2>
    2cfe:	8a 81       	ldd	r24, Y+2	; 0x02
    2d00:	9b 81       	ldd	r25, Y+3	; 0x03
    2d02:	89 30       	cpi	r24, 0x09	; 9
    2d04:	91 05       	cpc	r25, r1
    2d06:	09 f4       	brne	.+2      	; 0x2d0a <SSD_Write+0xb0>
    2d08:	45 c1       	rjmp	.+650    	; 0x2f94 <SSD_Write+0x33a>
    2d0a:	68 c1       	rjmp	.+720    	; 0x2fdc <SSD_Write+0x382>
    {

    case SSD_NUMBER_0: // 0b00111111
    #if SSD_TYPE == COMM_CATHODE
        DIO_SetPinLevel(SSD_PIN_A, DIO_HIGH);
    2d0c:	82 e0       	ldi	r24, 0x02	; 2
    2d0e:	60 e0       	ldi	r22, 0x00	; 0
    2d10:	41 e0       	ldi	r20, 0x01	; 1
    2d12:	0e 94 7d 0b 	call	0x16fa	; 0x16fa <DIO_SetPinLevel>
        DIO_SetPinLevel(SSD_PIN_B, DIO_HIGH);
    2d16:	82 e0       	ldi	r24, 0x02	; 2
    2d18:	61 e0       	ldi	r22, 0x01	; 1
    2d1a:	41 e0       	ldi	r20, 0x01	; 1
    2d1c:	0e 94 7d 0b 	call	0x16fa	; 0x16fa <DIO_SetPinLevel>
        DIO_SetPinLevel(SSD_PIN_C, DIO_HIGH);
    2d20:	82 e0       	ldi	r24, 0x02	; 2
    2d22:	62 e0       	ldi	r22, 0x02	; 2
    2d24:	41 e0       	ldi	r20, 0x01	; 1
    2d26:	0e 94 7d 0b 	call	0x16fa	; 0x16fa <DIO_SetPinLevel>
        DIO_SetPinLevel(SSD_PIN_D, DIO_HIGH);
    2d2a:	82 e0       	ldi	r24, 0x02	; 2
    2d2c:	63 e0       	ldi	r22, 0x03	; 3
    2d2e:	41 e0       	ldi	r20, 0x01	; 1
    2d30:	0e 94 7d 0b 	call	0x16fa	; 0x16fa <DIO_SetPinLevel>
        DIO_SetPinLevel(SSD_PIN_E, DIO_HIGH);
    2d34:	82 e0       	ldi	r24, 0x02	; 2
    2d36:	64 e0       	ldi	r22, 0x04	; 4
    2d38:	41 e0       	ldi	r20, 0x01	; 1
    2d3a:	0e 94 7d 0b 	call	0x16fa	; 0x16fa <DIO_SetPinLevel>
        DIO_SetPinLevel(SSD_PIN_F, DIO_HIGH);
    2d3e:	82 e0       	ldi	r24, 0x02	; 2
    2d40:	65 e0       	ldi	r22, 0x05	; 5
    2d42:	41 e0       	ldi	r20, 0x01	; 1
    2d44:	0e 94 7d 0b 	call	0x16fa	; 0x16fa <DIO_SetPinLevel>
        DIO_SetPinLevel(SSD_PIN_G, DIO_LOW);
    2d48:	82 e0       	ldi	r24, 0x02	; 2
    2d4a:	66 e0       	ldi	r22, 0x06	; 6
    2d4c:	40 e0       	ldi	r20, 0x00	; 0
    2d4e:	0e 94 7d 0b 	call	0x16fa	; 0x16fa <DIO_SetPinLevel>
    2d52:	67 c1       	rjmp	.+718    	; 0x3022 <SSD_Write+0x3c8>
    #endif
        break;

    case SSD_NUMBER_1: // 0b00000110
    #if SSD_TYPE == COMM_CATHODE
        DIO_SetPinLevel(SSD_PIN_A, DIO_LOW);
    2d54:	82 e0       	ldi	r24, 0x02	; 2
    2d56:	60 e0       	ldi	r22, 0x00	; 0
    2d58:	40 e0       	ldi	r20, 0x00	; 0
    2d5a:	0e 94 7d 0b 	call	0x16fa	; 0x16fa <DIO_SetPinLevel>
        DIO_SetPinLevel(SSD_PIN_B, DIO_HIGH);
    2d5e:	82 e0       	ldi	r24, 0x02	; 2
    2d60:	61 e0       	ldi	r22, 0x01	; 1
    2d62:	41 e0       	ldi	r20, 0x01	; 1
    2d64:	0e 94 7d 0b 	call	0x16fa	; 0x16fa <DIO_SetPinLevel>
        DIO_SetPinLevel(SSD_PIN_C, DIO_HIGH);
    2d68:	82 e0       	ldi	r24, 0x02	; 2
    2d6a:	62 e0       	ldi	r22, 0x02	; 2
    2d6c:	41 e0       	ldi	r20, 0x01	; 1
    2d6e:	0e 94 7d 0b 	call	0x16fa	; 0x16fa <DIO_SetPinLevel>
        DIO_SetPinLevel(SSD_PIN_D, DIO_LOW);
    2d72:	82 e0       	ldi	r24, 0x02	; 2
    2d74:	63 e0       	ldi	r22, 0x03	; 3
    2d76:	40 e0       	ldi	r20, 0x00	; 0
    2d78:	0e 94 7d 0b 	call	0x16fa	; 0x16fa <DIO_SetPinLevel>
        DIO_SetPinLevel(SSD_PIN_E, DIO_LOW);
    2d7c:	82 e0       	ldi	r24, 0x02	; 2
    2d7e:	64 e0       	ldi	r22, 0x04	; 4
    2d80:	40 e0       	ldi	r20, 0x00	; 0
    2d82:	0e 94 7d 0b 	call	0x16fa	; 0x16fa <DIO_SetPinLevel>
        DIO_SetPinLevel(SSD_PIN_F, DIO_LOW);
    2d86:	82 e0       	ldi	r24, 0x02	; 2
    2d88:	65 e0       	ldi	r22, 0x05	; 5
    2d8a:	40 e0       	ldi	r20, 0x00	; 0
    2d8c:	0e 94 7d 0b 	call	0x16fa	; 0x16fa <DIO_SetPinLevel>
        DIO_SetPinLevel(SSD_PIN_G, DIO_LOW);
    2d90:	82 e0       	ldi	r24, 0x02	; 2
    2d92:	66 e0       	ldi	r22, 0x06	; 6
    2d94:	40 e0       	ldi	r20, 0x00	; 0
    2d96:	0e 94 7d 0b 	call	0x16fa	; 0x16fa <DIO_SetPinLevel>
    2d9a:	43 c1       	rjmp	.+646    	; 0x3022 <SSD_Write+0x3c8>
    #endif
        break;

    case SSD_NUMBER_2: // 0b01011011
    #if SSD_TYPE == COMM_CATHODE
        DIO_SetPinLevel(SSD_PIN_A, DIO_HIGH);
    2d9c:	82 e0       	ldi	r24, 0x02	; 2
    2d9e:	60 e0       	ldi	r22, 0x00	; 0
    2da0:	41 e0       	ldi	r20, 0x01	; 1
    2da2:	0e 94 7d 0b 	call	0x16fa	; 0x16fa <DIO_SetPinLevel>
        DIO_SetPinLevel(SSD_PIN_B, DIO_HIGH);
    2da6:	82 e0       	ldi	r24, 0x02	; 2
    2da8:	61 e0       	ldi	r22, 0x01	; 1
    2daa:	41 e0       	ldi	r20, 0x01	; 1
    2dac:	0e 94 7d 0b 	call	0x16fa	; 0x16fa <DIO_SetPinLevel>
        DIO_SetPinLevel(SSD_PIN_C, DIO_LOW);
    2db0:	82 e0       	ldi	r24, 0x02	; 2
    2db2:	62 e0       	ldi	r22, 0x02	; 2
    2db4:	40 e0       	ldi	r20, 0x00	; 0
    2db6:	0e 94 7d 0b 	call	0x16fa	; 0x16fa <DIO_SetPinLevel>
        DIO_SetPinLevel(SSD_PIN_D, DIO_HIGH);
    2dba:	82 e0       	ldi	r24, 0x02	; 2
    2dbc:	63 e0       	ldi	r22, 0x03	; 3
    2dbe:	41 e0       	ldi	r20, 0x01	; 1
    2dc0:	0e 94 7d 0b 	call	0x16fa	; 0x16fa <DIO_SetPinLevel>
        DIO_SetPinLevel(SSD_PIN_E, DIO_HIGH);
    2dc4:	82 e0       	ldi	r24, 0x02	; 2
    2dc6:	64 e0       	ldi	r22, 0x04	; 4
    2dc8:	41 e0       	ldi	r20, 0x01	; 1
    2dca:	0e 94 7d 0b 	call	0x16fa	; 0x16fa <DIO_SetPinLevel>
        DIO_SetPinLevel(SSD_PIN_F, DIO_LOW);
    2dce:	82 e0       	ldi	r24, 0x02	; 2
    2dd0:	65 e0       	ldi	r22, 0x05	; 5
    2dd2:	40 e0       	ldi	r20, 0x00	; 0
    2dd4:	0e 94 7d 0b 	call	0x16fa	; 0x16fa <DIO_SetPinLevel>
        DIO_SetPinLevel(SSD_PIN_G, DIO_HIGH);
    2dd8:	82 e0       	ldi	r24, 0x02	; 2
    2dda:	66 e0       	ldi	r22, 0x06	; 6
    2ddc:	41 e0       	ldi	r20, 0x01	; 1
    2dde:	0e 94 7d 0b 	call	0x16fa	; 0x16fa <DIO_SetPinLevel>
    2de2:	1f c1       	rjmp	.+574    	; 0x3022 <SSD_Write+0x3c8>

        break;

    case SSD_NUMBER_3: // 0b01001111
    #if SSD_TYPE == COMM_CATHODE
        DIO_SetPinLevel(SSD_PIN_A, DIO_HIGH);
    2de4:	82 e0       	ldi	r24, 0x02	; 2
    2de6:	60 e0       	ldi	r22, 0x00	; 0
    2de8:	41 e0       	ldi	r20, 0x01	; 1
    2dea:	0e 94 7d 0b 	call	0x16fa	; 0x16fa <DIO_SetPinLevel>
        DIO_SetPinLevel(SSD_PIN_B, DIO_HIGH);
    2dee:	82 e0       	ldi	r24, 0x02	; 2
    2df0:	61 e0       	ldi	r22, 0x01	; 1
    2df2:	41 e0       	ldi	r20, 0x01	; 1
    2df4:	0e 94 7d 0b 	call	0x16fa	; 0x16fa <DIO_SetPinLevel>
        DIO_SetPinLevel(SSD_PIN_C, DIO_HIGH);
    2df8:	82 e0       	ldi	r24, 0x02	; 2
    2dfa:	62 e0       	ldi	r22, 0x02	; 2
    2dfc:	41 e0       	ldi	r20, 0x01	; 1
    2dfe:	0e 94 7d 0b 	call	0x16fa	; 0x16fa <DIO_SetPinLevel>
        DIO_SetPinLevel(SSD_PIN_D, DIO_HIGH);
    2e02:	82 e0       	ldi	r24, 0x02	; 2
    2e04:	63 e0       	ldi	r22, 0x03	; 3
    2e06:	41 e0       	ldi	r20, 0x01	; 1
    2e08:	0e 94 7d 0b 	call	0x16fa	; 0x16fa <DIO_SetPinLevel>
        DIO_SetPinLevel(SSD_PIN_E, DIO_LOW);
    2e0c:	82 e0       	ldi	r24, 0x02	; 2
    2e0e:	64 e0       	ldi	r22, 0x04	; 4
    2e10:	40 e0       	ldi	r20, 0x00	; 0
    2e12:	0e 94 7d 0b 	call	0x16fa	; 0x16fa <DIO_SetPinLevel>
        DIO_SetPinLevel(SSD_PIN_F, DIO_LOW);
    2e16:	82 e0       	ldi	r24, 0x02	; 2
    2e18:	65 e0       	ldi	r22, 0x05	; 5
    2e1a:	40 e0       	ldi	r20, 0x00	; 0
    2e1c:	0e 94 7d 0b 	call	0x16fa	; 0x16fa <DIO_SetPinLevel>
        DIO_SetPinLevel(SSD_PIN_G, DIO_HIGH);
    2e20:	82 e0       	ldi	r24, 0x02	; 2
    2e22:	66 e0       	ldi	r22, 0x06	; 6
    2e24:	41 e0       	ldi	r20, 0x01	; 1
    2e26:	0e 94 7d 0b 	call	0x16fa	; 0x16fa <DIO_SetPinLevel>
    2e2a:	fb c0       	rjmp	.+502    	; 0x3022 <SSD_Write+0x3c8>
    #endif

        break;
    case SSD_NUMBER_4: // 0b01100110
    #if SSD_TYPE == COMM_CATHODE
        DIO_SetPinLevel(SSD_PIN_A, DIO_LOW);
    2e2c:	82 e0       	ldi	r24, 0x02	; 2
    2e2e:	60 e0       	ldi	r22, 0x00	; 0
    2e30:	40 e0       	ldi	r20, 0x00	; 0
    2e32:	0e 94 7d 0b 	call	0x16fa	; 0x16fa <DIO_SetPinLevel>
        DIO_SetPinLevel(SSD_PIN_B, DIO_HIGH);
    2e36:	82 e0       	ldi	r24, 0x02	; 2
    2e38:	61 e0       	ldi	r22, 0x01	; 1
    2e3a:	41 e0       	ldi	r20, 0x01	; 1
    2e3c:	0e 94 7d 0b 	call	0x16fa	; 0x16fa <DIO_SetPinLevel>
        DIO_SetPinLevel(SSD_PIN_C, DIO_HIGH);
    2e40:	82 e0       	ldi	r24, 0x02	; 2
    2e42:	62 e0       	ldi	r22, 0x02	; 2
    2e44:	41 e0       	ldi	r20, 0x01	; 1
    2e46:	0e 94 7d 0b 	call	0x16fa	; 0x16fa <DIO_SetPinLevel>
        DIO_SetPinLevel(SSD_PIN_D, DIO_LOW);
    2e4a:	82 e0       	ldi	r24, 0x02	; 2
    2e4c:	63 e0       	ldi	r22, 0x03	; 3
    2e4e:	40 e0       	ldi	r20, 0x00	; 0
    2e50:	0e 94 7d 0b 	call	0x16fa	; 0x16fa <DIO_SetPinLevel>
        DIO_SetPinLevel(SSD_PIN_E, DIO_LOW);
    2e54:	82 e0       	ldi	r24, 0x02	; 2
    2e56:	64 e0       	ldi	r22, 0x04	; 4
    2e58:	40 e0       	ldi	r20, 0x00	; 0
    2e5a:	0e 94 7d 0b 	call	0x16fa	; 0x16fa <DIO_SetPinLevel>
        DIO_SetPinLevel(SSD_PIN_F, DIO_HIGH);
    2e5e:	82 e0       	ldi	r24, 0x02	; 2
    2e60:	65 e0       	ldi	r22, 0x05	; 5
    2e62:	41 e0       	ldi	r20, 0x01	; 1
    2e64:	0e 94 7d 0b 	call	0x16fa	; 0x16fa <DIO_SetPinLevel>
        DIO_SetPinLevel(SSD_PIN_G, DIO_HIGH);
    2e68:	82 e0       	ldi	r24, 0x02	; 2
    2e6a:	66 e0       	ldi	r22, 0x06	; 6
    2e6c:	41 e0       	ldi	r20, 0x01	; 1
    2e6e:	0e 94 7d 0b 	call	0x16fa	; 0x16fa <DIO_SetPinLevel>
    2e72:	d7 c0       	rjmp	.+430    	; 0x3022 <SSD_Write+0x3c8>
    #endif

        break;
    case SSD_NUMBER_5: // 0b01101101
    #if SSD_TYPE == COMM_CATHODE
        DIO_SetPinLevel(SSD_PIN_A, DIO_HIGH);
    2e74:	82 e0       	ldi	r24, 0x02	; 2
    2e76:	60 e0       	ldi	r22, 0x00	; 0
    2e78:	41 e0       	ldi	r20, 0x01	; 1
    2e7a:	0e 94 7d 0b 	call	0x16fa	; 0x16fa <DIO_SetPinLevel>
        DIO_SetPinLevel(SSD_PIN_B, DIO_LOW);
    2e7e:	82 e0       	ldi	r24, 0x02	; 2
    2e80:	61 e0       	ldi	r22, 0x01	; 1
    2e82:	40 e0       	ldi	r20, 0x00	; 0
    2e84:	0e 94 7d 0b 	call	0x16fa	; 0x16fa <DIO_SetPinLevel>
        DIO_SetPinLevel(SSD_PIN_C, DIO_HIGH);
    2e88:	82 e0       	ldi	r24, 0x02	; 2
    2e8a:	62 e0       	ldi	r22, 0x02	; 2
    2e8c:	41 e0       	ldi	r20, 0x01	; 1
    2e8e:	0e 94 7d 0b 	call	0x16fa	; 0x16fa <DIO_SetPinLevel>
        DIO_SetPinLevel(SSD_PIN_D, DIO_HIGH);
    2e92:	82 e0       	ldi	r24, 0x02	; 2
    2e94:	63 e0       	ldi	r22, 0x03	; 3
    2e96:	41 e0       	ldi	r20, 0x01	; 1
    2e98:	0e 94 7d 0b 	call	0x16fa	; 0x16fa <DIO_SetPinLevel>
        DIO_SetPinLevel(SSD_PIN_E, DIO_LOW);
    2e9c:	82 e0       	ldi	r24, 0x02	; 2
    2e9e:	64 e0       	ldi	r22, 0x04	; 4
    2ea0:	40 e0       	ldi	r20, 0x00	; 0
    2ea2:	0e 94 7d 0b 	call	0x16fa	; 0x16fa <DIO_SetPinLevel>
        DIO_SetPinLevel(SSD_PIN_F, DIO_HIGH);
    2ea6:	82 e0       	ldi	r24, 0x02	; 2
    2ea8:	65 e0       	ldi	r22, 0x05	; 5
    2eaa:	41 e0       	ldi	r20, 0x01	; 1
    2eac:	0e 94 7d 0b 	call	0x16fa	; 0x16fa <DIO_SetPinLevel>
        DIO_SetPinLevel(SSD_PIN_G, DIO_HIGH);
    2eb0:	82 e0       	ldi	r24, 0x02	; 2
    2eb2:	66 e0       	ldi	r22, 0x06	; 6
    2eb4:	41 e0       	ldi	r20, 0x01	; 1
    2eb6:	0e 94 7d 0b 	call	0x16fa	; 0x16fa <DIO_SetPinLevel>
    2eba:	b3 c0       	rjmp	.+358    	; 0x3022 <SSD_Write+0x3c8>
    #endif

        break;
    case SSD_NUMBER_6: // 0b01111101
            #if SSD_TYPE == COMM_CATHODE
        DIO_SetPinLevel(SSD_PIN_A, DIO_HIGH);
    2ebc:	82 e0       	ldi	r24, 0x02	; 2
    2ebe:	60 e0       	ldi	r22, 0x00	; 0
    2ec0:	41 e0       	ldi	r20, 0x01	; 1
    2ec2:	0e 94 7d 0b 	call	0x16fa	; 0x16fa <DIO_SetPinLevel>
        DIO_SetPinLevel(SSD_PIN_B, DIO_LOW);
    2ec6:	82 e0       	ldi	r24, 0x02	; 2
    2ec8:	61 e0       	ldi	r22, 0x01	; 1
    2eca:	40 e0       	ldi	r20, 0x00	; 0
    2ecc:	0e 94 7d 0b 	call	0x16fa	; 0x16fa <DIO_SetPinLevel>
        DIO_SetPinLevel(SSD_PIN_C, DIO_HIGH);
    2ed0:	82 e0       	ldi	r24, 0x02	; 2
    2ed2:	62 e0       	ldi	r22, 0x02	; 2
    2ed4:	41 e0       	ldi	r20, 0x01	; 1
    2ed6:	0e 94 7d 0b 	call	0x16fa	; 0x16fa <DIO_SetPinLevel>
        DIO_SetPinLevel(SSD_PIN_D, DIO_HIGH);
    2eda:	82 e0       	ldi	r24, 0x02	; 2
    2edc:	63 e0       	ldi	r22, 0x03	; 3
    2ede:	41 e0       	ldi	r20, 0x01	; 1
    2ee0:	0e 94 7d 0b 	call	0x16fa	; 0x16fa <DIO_SetPinLevel>
        DIO_SetPinLevel(SSD_PIN_E, DIO_HIGH);
    2ee4:	82 e0       	ldi	r24, 0x02	; 2
    2ee6:	64 e0       	ldi	r22, 0x04	; 4
    2ee8:	41 e0       	ldi	r20, 0x01	; 1
    2eea:	0e 94 7d 0b 	call	0x16fa	; 0x16fa <DIO_SetPinLevel>
        DIO_SetPinLevel(SSD_PIN_F, DIO_HIGH);
    2eee:	82 e0       	ldi	r24, 0x02	; 2
    2ef0:	65 e0       	ldi	r22, 0x05	; 5
    2ef2:	41 e0       	ldi	r20, 0x01	; 1
    2ef4:	0e 94 7d 0b 	call	0x16fa	; 0x16fa <DIO_SetPinLevel>
        DIO_SetPinLevel(SSD_PIN_G, DIO_HIGH);
    2ef8:	82 e0       	ldi	r24, 0x02	; 2
    2efa:	66 e0       	ldi	r22, 0x06	; 6
    2efc:	41 e0       	ldi	r20, 0x01	; 1
    2efe:	0e 94 7d 0b 	call	0x16fa	; 0x16fa <DIO_SetPinLevel>
    2f02:	8f c0       	rjmp	.+286    	; 0x3022 <SSD_Write+0x3c8>
        #error "Invalid SSD Type"
    #endif
        break;
    case SSD_NUMBER_7: // 0b00000111
        #if SSD_TYPE == COMM_CATHODE
        DIO_SetPinLevel(SSD_PIN_A, DIO_HIGH);
    2f04:	82 e0       	ldi	r24, 0x02	; 2
    2f06:	60 e0       	ldi	r22, 0x00	; 0
    2f08:	41 e0       	ldi	r20, 0x01	; 1
    2f0a:	0e 94 7d 0b 	call	0x16fa	; 0x16fa <DIO_SetPinLevel>
        DIO_SetPinLevel(SSD_PIN_B, DIO_HIGH);
    2f0e:	82 e0       	ldi	r24, 0x02	; 2
    2f10:	61 e0       	ldi	r22, 0x01	; 1
    2f12:	41 e0       	ldi	r20, 0x01	; 1
    2f14:	0e 94 7d 0b 	call	0x16fa	; 0x16fa <DIO_SetPinLevel>
        DIO_SetPinLevel(SSD_PIN_C, DIO_HIGH);
    2f18:	82 e0       	ldi	r24, 0x02	; 2
    2f1a:	62 e0       	ldi	r22, 0x02	; 2
    2f1c:	41 e0       	ldi	r20, 0x01	; 1
    2f1e:	0e 94 7d 0b 	call	0x16fa	; 0x16fa <DIO_SetPinLevel>
        DIO_SetPinLevel(SSD_PIN_D, DIO_LOW);
    2f22:	82 e0       	ldi	r24, 0x02	; 2
    2f24:	63 e0       	ldi	r22, 0x03	; 3
    2f26:	40 e0       	ldi	r20, 0x00	; 0
    2f28:	0e 94 7d 0b 	call	0x16fa	; 0x16fa <DIO_SetPinLevel>
        DIO_SetPinLevel(SSD_PIN_E, DIO_LOW);
    2f2c:	82 e0       	ldi	r24, 0x02	; 2
    2f2e:	64 e0       	ldi	r22, 0x04	; 4
    2f30:	40 e0       	ldi	r20, 0x00	; 0
    2f32:	0e 94 7d 0b 	call	0x16fa	; 0x16fa <DIO_SetPinLevel>
        DIO_SetPinLevel(SSD_PIN_F, DIO_LOW);
    2f36:	82 e0       	ldi	r24, 0x02	; 2
    2f38:	65 e0       	ldi	r22, 0x05	; 5
    2f3a:	40 e0       	ldi	r20, 0x00	; 0
    2f3c:	0e 94 7d 0b 	call	0x16fa	; 0x16fa <DIO_SetPinLevel>
        DIO_SetPinLevel(SSD_PIN_G, DIO_LOW);
    2f40:	82 e0       	ldi	r24, 0x02	; 2
    2f42:	66 e0       	ldi	r22, 0x06	; 6
    2f44:	40 e0       	ldi	r20, 0x00	; 0
    2f46:	0e 94 7d 0b 	call	0x16fa	; 0x16fa <DIO_SetPinLevel>
    2f4a:	6b c0       	rjmp	.+214    	; 0x3022 <SSD_Write+0x3c8>
    #endif

        break;
    case SSD_NUMBER_8: // 0b01111111
    #if SSD_TYPE == COMM_CATHODE
        DIO_SetPinLevel(SSD_PIN_A, DIO_HIGH);
    2f4c:	82 e0       	ldi	r24, 0x02	; 2
    2f4e:	60 e0       	ldi	r22, 0x00	; 0
    2f50:	41 e0       	ldi	r20, 0x01	; 1
    2f52:	0e 94 7d 0b 	call	0x16fa	; 0x16fa <DIO_SetPinLevel>
        DIO_SetPinLevel(SSD_PIN_B, DIO_HIGH);
    2f56:	82 e0       	ldi	r24, 0x02	; 2
    2f58:	61 e0       	ldi	r22, 0x01	; 1
    2f5a:	41 e0       	ldi	r20, 0x01	; 1
    2f5c:	0e 94 7d 0b 	call	0x16fa	; 0x16fa <DIO_SetPinLevel>
        DIO_SetPinLevel(SSD_PIN_C, DIO_HIGH);
    2f60:	82 e0       	ldi	r24, 0x02	; 2
    2f62:	62 e0       	ldi	r22, 0x02	; 2
    2f64:	41 e0       	ldi	r20, 0x01	; 1
    2f66:	0e 94 7d 0b 	call	0x16fa	; 0x16fa <DIO_SetPinLevel>
        DIO_SetPinLevel(SSD_PIN_D, DIO_HIGH);
    2f6a:	82 e0       	ldi	r24, 0x02	; 2
    2f6c:	63 e0       	ldi	r22, 0x03	; 3
    2f6e:	41 e0       	ldi	r20, 0x01	; 1
    2f70:	0e 94 7d 0b 	call	0x16fa	; 0x16fa <DIO_SetPinLevel>
        DIO_SetPinLevel(SSD_PIN_E, DIO_HIGH);
    2f74:	82 e0       	ldi	r24, 0x02	; 2
    2f76:	64 e0       	ldi	r22, 0x04	; 4
    2f78:	41 e0       	ldi	r20, 0x01	; 1
    2f7a:	0e 94 7d 0b 	call	0x16fa	; 0x16fa <DIO_SetPinLevel>
        DIO_SetPinLevel(SSD_PIN_F, DIO_HIGH);
    2f7e:	82 e0       	ldi	r24, 0x02	; 2
    2f80:	65 e0       	ldi	r22, 0x05	; 5
    2f82:	41 e0       	ldi	r20, 0x01	; 1
    2f84:	0e 94 7d 0b 	call	0x16fa	; 0x16fa <DIO_SetPinLevel>
        DIO_SetPinLevel(SSD_PIN_G, DIO_HIGH);
    2f88:	82 e0       	ldi	r24, 0x02	; 2
    2f8a:	66 e0       	ldi	r22, 0x06	; 6
    2f8c:	41 e0       	ldi	r20, 0x01	; 1
    2f8e:	0e 94 7d 0b 	call	0x16fa	; 0x16fa <DIO_SetPinLevel>
    2f92:	47 c0       	rjmp	.+142    	; 0x3022 <SSD_Write+0x3c8>
    #endif

        break;
    case SSD_NUMBER_9: // 0b01101111
    #if SSD_TYPE == COMM_CATHODE
        DIO_SetPinLevel(SSD_PIN_A, DIO_HIGH);
    2f94:	82 e0       	ldi	r24, 0x02	; 2
    2f96:	60 e0       	ldi	r22, 0x00	; 0
    2f98:	41 e0       	ldi	r20, 0x01	; 1
    2f9a:	0e 94 7d 0b 	call	0x16fa	; 0x16fa <DIO_SetPinLevel>
        DIO_SetPinLevel(SSD_PIN_B, DIO_HIGH);
    2f9e:	82 e0       	ldi	r24, 0x02	; 2
    2fa0:	61 e0       	ldi	r22, 0x01	; 1
    2fa2:	41 e0       	ldi	r20, 0x01	; 1
    2fa4:	0e 94 7d 0b 	call	0x16fa	; 0x16fa <DIO_SetPinLevel>
        DIO_SetPinLevel(SSD_PIN_C, DIO_HIGH);
    2fa8:	82 e0       	ldi	r24, 0x02	; 2
    2faa:	62 e0       	ldi	r22, 0x02	; 2
    2fac:	41 e0       	ldi	r20, 0x01	; 1
    2fae:	0e 94 7d 0b 	call	0x16fa	; 0x16fa <DIO_SetPinLevel>
        DIO_SetPinLevel(SSD_PIN_D, DIO_HIGH);
    2fb2:	82 e0       	ldi	r24, 0x02	; 2
    2fb4:	63 e0       	ldi	r22, 0x03	; 3
    2fb6:	41 e0       	ldi	r20, 0x01	; 1
    2fb8:	0e 94 7d 0b 	call	0x16fa	; 0x16fa <DIO_SetPinLevel>
        DIO_SetPinLevel(SSD_PIN_E, DIO_LOW);
    2fbc:	82 e0       	ldi	r24, 0x02	; 2
    2fbe:	64 e0       	ldi	r22, 0x04	; 4
    2fc0:	40 e0       	ldi	r20, 0x00	; 0
    2fc2:	0e 94 7d 0b 	call	0x16fa	; 0x16fa <DIO_SetPinLevel>
        DIO_SetPinLevel(SSD_PIN_F, DIO_HIGH);
    2fc6:	82 e0       	ldi	r24, 0x02	; 2
    2fc8:	65 e0       	ldi	r22, 0x05	; 5
    2fca:	41 e0       	ldi	r20, 0x01	; 1
    2fcc:	0e 94 7d 0b 	call	0x16fa	; 0x16fa <DIO_SetPinLevel>
        DIO_SetPinLevel(SSD_PIN_G, DIO_HIGH);
    2fd0:	82 e0       	ldi	r24, 0x02	; 2
    2fd2:	66 e0       	ldi	r22, 0x06	; 6
    2fd4:	41 e0       	ldi	r20, 0x01	; 1
    2fd6:	0e 94 7d 0b 	call	0x16fa	; 0x16fa <DIO_SetPinLevel>
    2fda:	23 c0       	rjmp	.+70     	; 0x3022 <SSD_Write+0x3c8>
        break;

    case SSD_OFF:
    default:
    #if SSD_TYPE == COMM_CATHODE
        DIO_SetPinLevel(SSD_PIN_A, DIO_LOW);
    2fdc:	82 e0       	ldi	r24, 0x02	; 2
    2fde:	60 e0       	ldi	r22, 0x00	; 0
    2fe0:	40 e0       	ldi	r20, 0x00	; 0
    2fe2:	0e 94 7d 0b 	call	0x16fa	; 0x16fa <DIO_SetPinLevel>
        DIO_SetPinLevel(SSD_PIN_B, DIO_LOW);
    2fe6:	82 e0       	ldi	r24, 0x02	; 2
    2fe8:	61 e0       	ldi	r22, 0x01	; 1
    2fea:	40 e0       	ldi	r20, 0x00	; 0
    2fec:	0e 94 7d 0b 	call	0x16fa	; 0x16fa <DIO_SetPinLevel>
        DIO_SetPinLevel(SSD_PIN_C, DIO_LOW);
    2ff0:	82 e0       	ldi	r24, 0x02	; 2
    2ff2:	62 e0       	ldi	r22, 0x02	; 2
    2ff4:	40 e0       	ldi	r20, 0x00	; 0
    2ff6:	0e 94 7d 0b 	call	0x16fa	; 0x16fa <DIO_SetPinLevel>
        DIO_SetPinLevel(SSD_PIN_D, DIO_LOW);
    2ffa:	82 e0       	ldi	r24, 0x02	; 2
    2ffc:	63 e0       	ldi	r22, 0x03	; 3
    2ffe:	40 e0       	ldi	r20, 0x00	; 0
    3000:	0e 94 7d 0b 	call	0x16fa	; 0x16fa <DIO_SetPinLevel>
        DIO_SetPinLevel(SSD_PIN_E, DIO_LOW);
    3004:	82 e0       	ldi	r24, 0x02	; 2
    3006:	64 e0       	ldi	r22, 0x04	; 4
    3008:	40 e0       	ldi	r20, 0x00	; 0
    300a:	0e 94 7d 0b 	call	0x16fa	; 0x16fa <DIO_SetPinLevel>
        DIO_SetPinLevel(SSD_PIN_F, DIO_LOW);
    300e:	82 e0       	ldi	r24, 0x02	; 2
    3010:	65 e0       	ldi	r22, 0x05	; 5
    3012:	40 e0       	ldi	r20, 0x00	; 0
    3014:	0e 94 7d 0b 	call	0x16fa	; 0x16fa <DIO_SetPinLevel>
        DIO_SetPinLevel(SSD_PIN_G, DIO_LOW);
    3018:	82 e0       	ldi	r24, 0x02	; 2
    301a:	66 e0       	ldi	r22, 0x06	; 6
    301c:	40 e0       	ldi	r20, 0x00	; 0
    301e:	0e 94 7d 0b 	call	0x16fa	; 0x16fa <DIO_SetPinLevel>
    #else
        #error "Invalid SSD Type"
    #endif
        break;
    }
}
    3022:	0f 90       	pop	r0
    3024:	0f 90       	pop	r0
    3026:	0f 90       	pop	r0
    3028:	cf 91       	pop	r28
    302a:	df 91       	pop	r29
    302c:	08 95       	ret

0000302e <UART_Init>:
#include "UART.h"
#include "Registers.h"
#include "DIO.h"

void UART_Init(USART_Mode_Select mode,Parity_Mode pmode,Stop_Bit_Select sbit,Character_Size csize,Baud_Rate_Setting brate)
{
    302e:	0f 93       	push	r16
    3030:	df 93       	push	r29
    3032:	cf 93       	push	r28
    3034:	cd b7       	in	r28, 0x3d	; 61
    3036:	de b7       	in	r29, 0x3e	; 62
    3038:	2b 97       	sbiw	r28, 0x0b	; 11
    303a:	0f b6       	in	r0, 0x3f	; 63
    303c:	f8 94       	cli
    303e:	de bf       	out	0x3e, r29	; 62
    3040:	0f be       	out	0x3f, r0	; 63
    3042:	cd bf       	out	0x3d, r28	; 61
    3044:	89 83       	std	Y+1, r24	; 0x01
    3046:	6a 83       	std	Y+2, r22	; 0x02
    3048:	4b 83       	std	Y+3, r20	; 0x03
    304a:	2c 83       	std	Y+4, r18	; 0x04
    304c:	0d 83       	std	Y+5, r16	; 0x05
    SET_BIT(UCSRC, UCSRC_URSEL); // 3shan tekhali uart to play
    304e:	a0 e4       	ldi	r26, 0x40	; 64
    3050:	b0 e0       	ldi	r27, 0x00	; 0
    3052:	e0 e4       	ldi	r30, 0x40	; 64
    3054:	f0 e0       	ldi	r31, 0x00	; 0
    3056:	80 81       	ld	r24, Z
    3058:	80 68       	ori	r24, 0x80	; 128
    305a:	8c 93       	st	X, r24
    DIO_SetPinMode(DIO_PORTD, DIO_PIN0, DIO_INPUT_FLOATING);
    305c:	83 e0       	ldi	r24, 0x03	; 3
    305e:	60 e0       	ldi	r22, 0x00	; 0
    3060:	40 e0       	ldi	r20, 0x00	; 0
    3062:	0e 94 6f 08 	call	0x10de	; 0x10de <DIO_SetPinMode>
	DIO_SetPinMode(DIO_PORTD, DIO_PIN1, DIO_OUTPUT);
    3066:	83 e0       	ldi	r24, 0x03	; 3
    3068:	61 e0       	ldi	r22, 0x01	; 1
    306a:	42 e0       	ldi	r20, 0x02	; 2
    306c:	0e 94 6f 08 	call	0x10de	; 0x10de <DIO_SetPinMode>


    if(mode == Asynchronous)
    3070:	89 81       	ldd	r24, Y+1	; 0x01
    3072:	88 23       	and	r24, r24
    3074:	41 f4       	brne	.+16     	; 0x3086 <UART_Init+0x58>
    {
        CLR_BIT(UCSRC,UCSRC_UMSEL);
    3076:	a0 e4       	ldi	r26, 0x40	; 64
    3078:	b0 e0       	ldi	r27, 0x00	; 0
    307a:	e0 e4       	ldi	r30, 0x40	; 64
    307c:	f0 e0       	ldi	r31, 0x00	; 0
    307e:	80 81       	ld	r24, Z
    3080:	8f 7b       	andi	r24, 0xBF	; 191
    3082:	8c 93       	st	X, r24
    3084:	0a c0       	rjmp	.+20     	; 0x309a <UART_Init+0x6c>
    }else if(mode == Synchronous)
    3086:	89 81       	ldd	r24, Y+1	; 0x01
    3088:	81 30       	cpi	r24, 0x01	; 1
    308a:	39 f4       	brne	.+14     	; 0x309a <UART_Init+0x6c>
    {
        SET_BIT(UCSRC,UCSRC_UMSEL);
    308c:	a0 e4       	ldi	r26, 0x40	; 64
    308e:	b0 e0       	ldi	r27, 0x00	; 0
    3090:	e0 e4       	ldi	r30, 0x40	; 64
    3092:	f0 e0       	ldi	r31, 0x00	; 0
    3094:	80 81       	ld	r24, Z
    3096:	80 64       	ori	r24, 0x40	; 64
    3098:	8c 93       	st	X, r24

    }

    switch (pmode)
    309a:	8a 81       	ldd	r24, Y+2	; 0x02
    309c:	28 2f       	mov	r18, r24
    309e:	30 e0       	ldi	r19, 0x00	; 0
    30a0:	3b 87       	std	Y+11, r19	; 0x0b
    30a2:	2a 87       	std	Y+10, r18	; 0x0a
    30a4:	8a 85       	ldd	r24, Y+10	; 0x0a
    30a6:	9b 85       	ldd	r25, Y+11	; 0x0b
    30a8:	81 30       	cpi	r24, 0x01	; 1
    30aa:	91 05       	cpc	r25, r1
    30ac:	c1 f0       	breq	.+48     	; 0x30de <UART_Init+0xb0>
    30ae:	2a 85       	ldd	r18, Y+10	; 0x0a
    30b0:	3b 85       	ldd	r19, Y+11	; 0x0b
    30b2:	22 30       	cpi	r18, 0x02	; 2
    30b4:	31 05       	cpc	r19, r1
    30b6:	11 f1       	breq	.+68     	; 0x30fc <UART_Init+0xce>
    30b8:	8a 85       	ldd	r24, Y+10	; 0x0a
    30ba:	9b 85       	ldd	r25, Y+11	; 0x0b
    30bc:	00 97       	sbiw	r24, 0x00	; 0
    30be:	61 f5       	brne	.+88     	; 0x3118 <UART_Init+0xea>
    {
    case Disabled_parity:
        CLR_BIT(UCSRC,UCSRC_UPM0);
    30c0:	a0 e4       	ldi	r26, 0x40	; 64
    30c2:	b0 e0       	ldi	r27, 0x00	; 0
    30c4:	e0 e4       	ldi	r30, 0x40	; 64
    30c6:	f0 e0       	ldi	r31, 0x00	; 0
    30c8:	80 81       	ld	r24, Z
    30ca:	8f 7e       	andi	r24, 0xEF	; 239
    30cc:	8c 93       	st	X, r24
        CLR_BIT(UCSRC,UCSRC_UPM1);
    30ce:	a0 e4       	ldi	r26, 0x40	; 64
    30d0:	b0 e0       	ldi	r27, 0x00	; 0
    30d2:	e0 e4       	ldi	r30, 0x40	; 64
    30d4:	f0 e0       	ldi	r31, 0x00	; 0
    30d6:	80 81       	ld	r24, Z
    30d8:	8f 7d       	andi	r24, 0xDF	; 223
    30da:	8c 93       	st	X, r24
    30dc:	1d c0       	rjmp	.+58     	; 0x3118 <UART_Init+0xea>
        /* code */
        break;
    case Even_Parity:
        CLR_BIT(UCSRC,UCSRC_UPM0);
    30de:	a0 e4       	ldi	r26, 0x40	; 64
    30e0:	b0 e0       	ldi	r27, 0x00	; 0
    30e2:	e0 e4       	ldi	r30, 0x40	; 64
    30e4:	f0 e0       	ldi	r31, 0x00	; 0
    30e6:	80 81       	ld	r24, Z
    30e8:	8f 7e       	andi	r24, 0xEF	; 239
    30ea:	8c 93       	st	X, r24
        SET_BIT(UCSRC,UCSRC_UPM1);
    30ec:	a0 e4       	ldi	r26, 0x40	; 64
    30ee:	b0 e0       	ldi	r27, 0x00	; 0
    30f0:	e0 e4       	ldi	r30, 0x40	; 64
    30f2:	f0 e0       	ldi	r31, 0x00	; 0
    30f4:	80 81       	ld	r24, Z
    30f6:	80 62       	ori	r24, 0x20	; 32
    30f8:	8c 93       	st	X, r24
    30fa:	0e c0       	rjmp	.+28     	; 0x3118 <UART_Init+0xea>
        /* code */
        break;
    case Odd_Parity:
        SET_BIT(UCSRC,UCSRC_UPM0);
    30fc:	a0 e4       	ldi	r26, 0x40	; 64
    30fe:	b0 e0       	ldi	r27, 0x00	; 0
    3100:	e0 e4       	ldi	r30, 0x40	; 64
    3102:	f0 e0       	ldi	r31, 0x00	; 0
    3104:	80 81       	ld	r24, Z
    3106:	80 61       	ori	r24, 0x10	; 16
    3108:	8c 93       	st	X, r24
        SET_BIT(UCSRC,UCSRC_UPM1);
    310a:	a0 e4       	ldi	r26, 0x40	; 64
    310c:	b0 e0       	ldi	r27, 0x00	; 0
    310e:	e0 e4       	ldi	r30, 0x40	; 64
    3110:	f0 e0       	ldi	r31, 0x00	; 0
    3112:	80 81       	ld	r24, Z
    3114:	80 62       	ori	r24, 0x20	; 32
    3116:	8c 93       	st	X, r24
        break;
    
    default:
        break;
    }
    if(sbit==one_Stop_bit)
    3118:	8b 81       	ldd	r24, Y+3	; 0x03
    311a:	88 23       	and	r24, r24
    311c:	41 f4       	brne	.+16     	; 0x312e <UART_Init+0x100>
    {
        CLR_BIT(UCSRC,UCSRC_USBS);
    311e:	a0 e4       	ldi	r26, 0x40	; 64
    3120:	b0 e0       	ldi	r27, 0x00	; 0
    3122:	e0 e4       	ldi	r30, 0x40	; 64
    3124:	f0 e0       	ldi	r31, 0x00	; 0
    3126:	80 81       	ld	r24, Z
    3128:	87 7f       	andi	r24, 0xF7	; 247
    312a:	8c 93       	st	X, r24
    312c:	0a c0       	rjmp	.+20     	; 0x3142 <UART_Init+0x114>
    }else if( sbit==two_Stop_bit)
    312e:	8b 81       	ldd	r24, Y+3	; 0x03
    3130:	81 30       	cpi	r24, 0x01	; 1
    3132:	39 f4       	brne	.+14     	; 0x3142 <UART_Init+0x114>
    {
        SET_BIT(UCSRC,UCSRC_USBS);
    3134:	a0 e4       	ldi	r26, 0x40	; 64
    3136:	b0 e0       	ldi	r27, 0x00	; 0
    3138:	e0 e4       	ldi	r30, 0x40	; 64
    313a:	f0 e0       	ldi	r31, 0x00	; 0
    313c:	80 81       	ld	r24, Z
    313e:	88 60       	ori	r24, 0x08	; 8
    3140:	8c 93       	st	X, r24
    }
    switch (csize)
    3142:	8c 81       	ldd	r24, Y+4	; 0x04
    3144:	28 2f       	mov	r18, r24
    3146:	30 e0       	ldi	r19, 0x00	; 0
    3148:	39 87       	std	Y+9, r19	; 0x09
    314a:	28 87       	std	Y+8, r18	; 0x08
    314c:	88 85       	ldd	r24, Y+8	; 0x08
    314e:	99 85       	ldd	r25, Y+9	; 0x09
    3150:	82 30       	cpi	r24, 0x02	; 2
    3152:	91 05       	cpc	r25, r1
    3154:	09 f4       	brne	.+2      	; 0x3158 <UART_Init+0x12a>
    3156:	48 c0       	rjmp	.+144    	; 0x31e8 <UART_Init+0x1ba>
    3158:	28 85       	ldd	r18, Y+8	; 0x08
    315a:	39 85       	ldd	r19, Y+9	; 0x09
    315c:	23 30       	cpi	r18, 0x03	; 3
    315e:	31 05       	cpc	r19, r1
    3160:	54 f4       	brge	.+20     	; 0x3176 <UART_Init+0x148>
    3162:	88 85       	ldd	r24, Y+8	; 0x08
    3164:	99 85       	ldd	r25, Y+9	; 0x09
    3166:	00 97       	sbiw	r24, 0x00	; 0
    3168:	99 f0       	breq	.+38     	; 0x3190 <UART_Init+0x162>
    316a:	28 85       	ldd	r18, Y+8	; 0x08
    316c:	39 85       	ldd	r19, Y+9	; 0x09
    316e:	21 30       	cpi	r18, 0x01	; 1
    3170:	31 05       	cpc	r19, r1
    3172:	21 f1       	breq	.+72     	; 0x31bc <UART_Init+0x18e>
    3174:	7a c0       	rjmp	.+244    	; 0x326a <UART_Init+0x23c>
    3176:	88 85       	ldd	r24, Y+8	; 0x08
    3178:	99 85       	ldd	r25, Y+9	; 0x09
    317a:	83 30       	cpi	r24, 0x03	; 3
    317c:	91 05       	cpc	r25, r1
    317e:	09 f4       	brne	.+2      	; 0x3182 <UART_Init+0x154>
    3180:	49 c0       	rjmp	.+146    	; 0x3214 <UART_Init+0x1e6>
    3182:	28 85       	ldd	r18, Y+8	; 0x08
    3184:	39 85       	ldd	r19, Y+9	; 0x09
    3186:	24 30       	cpi	r18, 0x04	; 4
    3188:	31 05       	cpc	r19, r1
    318a:	09 f4       	brne	.+2      	; 0x318e <UART_Init+0x160>
    318c:	59 c0       	rjmp	.+178    	; 0x3240 <UART_Init+0x212>
    318e:	6d c0       	rjmp	.+218    	; 0x326a <UART_Init+0x23c>
    {
    case _5_bit:
        CLR_BIT(UCSRC,UCSRC_UCSZ0);
    3190:	a0 e4       	ldi	r26, 0x40	; 64
    3192:	b0 e0       	ldi	r27, 0x00	; 0
    3194:	e0 e4       	ldi	r30, 0x40	; 64
    3196:	f0 e0       	ldi	r31, 0x00	; 0
    3198:	80 81       	ld	r24, Z
    319a:	8d 7f       	andi	r24, 0xFD	; 253
    319c:	8c 93       	st	X, r24
        CLR_BIT(UCSRC,UCSRC_UCSZ1);
    319e:	a0 e4       	ldi	r26, 0x40	; 64
    31a0:	b0 e0       	ldi	r27, 0x00	; 0
    31a2:	e0 e4       	ldi	r30, 0x40	; 64
    31a4:	f0 e0       	ldi	r31, 0x00	; 0
    31a6:	80 81       	ld	r24, Z
    31a8:	8b 7f       	andi	r24, 0xFB	; 251
    31aa:	8c 93       	st	X, r24
        CLR_BIT(UCSRC,UCSRB_UCSZ2);
    31ac:	a0 e4       	ldi	r26, 0x40	; 64
    31ae:	b0 e0       	ldi	r27, 0x00	; 0
    31b0:	e0 e4       	ldi	r30, 0x40	; 64
    31b2:	f0 e0       	ldi	r31, 0x00	; 0
    31b4:	80 81       	ld	r24, Z
    31b6:	8b 7f       	andi	r24, 0xFB	; 251
    31b8:	8c 93       	st	X, r24
    31ba:	57 c0       	rjmp	.+174    	; 0x326a <UART_Init+0x23c>
        /* code */
        break;
    case _6_bit:
        CLR_BIT(UCSRC,UCSRC_UCSZ0);
    31bc:	a0 e4       	ldi	r26, 0x40	; 64
    31be:	b0 e0       	ldi	r27, 0x00	; 0
    31c0:	e0 e4       	ldi	r30, 0x40	; 64
    31c2:	f0 e0       	ldi	r31, 0x00	; 0
    31c4:	80 81       	ld	r24, Z
    31c6:	8d 7f       	andi	r24, 0xFD	; 253
    31c8:	8c 93       	st	X, r24
        CLR_BIT(UCSRC,UCSRC_UCSZ1);
    31ca:	a0 e4       	ldi	r26, 0x40	; 64
    31cc:	b0 e0       	ldi	r27, 0x00	; 0
    31ce:	e0 e4       	ldi	r30, 0x40	; 64
    31d0:	f0 e0       	ldi	r31, 0x00	; 0
    31d2:	80 81       	ld	r24, Z
    31d4:	8b 7f       	andi	r24, 0xFB	; 251
    31d6:	8c 93       	st	X, r24
        CLR_BIT(UCSRC,UCSRB_UCSZ2);
    31d8:	a0 e4       	ldi	r26, 0x40	; 64
    31da:	b0 e0       	ldi	r27, 0x00	; 0
    31dc:	e0 e4       	ldi	r30, 0x40	; 64
    31de:	f0 e0       	ldi	r31, 0x00	; 0
    31e0:	80 81       	ld	r24, Z
    31e2:	8b 7f       	andi	r24, 0xFB	; 251
    31e4:	8c 93       	st	X, r24
    31e6:	41 c0       	rjmp	.+130    	; 0x326a <UART_Init+0x23c>
        /* code */
        break;
    case _7_bit:
        CLR_BIT(UCSRC,UCSRC_UCSZ0);
    31e8:	a0 e4       	ldi	r26, 0x40	; 64
    31ea:	b0 e0       	ldi	r27, 0x00	; 0
    31ec:	e0 e4       	ldi	r30, 0x40	; 64
    31ee:	f0 e0       	ldi	r31, 0x00	; 0
    31f0:	80 81       	ld	r24, Z
    31f2:	8d 7f       	andi	r24, 0xFD	; 253
    31f4:	8c 93       	st	X, r24
        SET_BIT(UCSRC,UCSRC_UCSZ1);
    31f6:	a0 e4       	ldi	r26, 0x40	; 64
    31f8:	b0 e0       	ldi	r27, 0x00	; 0
    31fa:	e0 e4       	ldi	r30, 0x40	; 64
    31fc:	f0 e0       	ldi	r31, 0x00	; 0
    31fe:	80 81       	ld	r24, Z
    3200:	84 60       	ori	r24, 0x04	; 4
    3202:	8c 93       	st	X, r24
        CLR_BIT(UCSRC,UCSRB_UCSZ2);
    3204:	a0 e4       	ldi	r26, 0x40	; 64
    3206:	b0 e0       	ldi	r27, 0x00	; 0
    3208:	e0 e4       	ldi	r30, 0x40	; 64
    320a:	f0 e0       	ldi	r31, 0x00	; 0
    320c:	80 81       	ld	r24, Z
    320e:	8b 7f       	andi	r24, 0xFB	; 251
    3210:	8c 93       	st	X, r24
    3212:	2b c0       	rjmp	.+86     	; 0x326a <UART_Init+0x23c>
        /* code */
        break;
    case _8_bit:
        SET_BIT(UCSRC,UCSRC_UCSZ0);
    3214:	a0 e4       	ldi	r26, 0x40	; 64
    3216:	b0 e0       	ldi	r27, 0x00	; 0
    3218:	e0 e4       	ldi	r30, 0x40	; 64
    321a:	f0 e0       	ldi	r31, 0x00	; 0
    321c:	80 81       	ld	r24, Z
    321e:	82 60       	ori	r24, 0x02	; 2
    3220:	8c 93       	st	X, r24
        SET_BIT(UCSRC,UCSRC_UCSZ1);
    3222:	a0 e4       	ldi	r26, 0x40	; 64
    3224:	b0 e0       	ldi	r27, 0x00	; 0
    3226:	e0 e4       	ldi	r30, 0x40	; 64
    3228:	f0 e0       	ldi	r31, 0x00	; 0
    322a:	80 81       	ld	r24, Z
    322c:	84 60       	ori	r24, 0x04	; 4
    322e:	8c 93       	st	X, r24
        CLR_BIT(UCSRC,UCSRB_UCSZ2);
    3230:	a0 e4       	ldi	r26, 0x40	; 64
    3232:	b0 e0       	ldi	r27, 0x00	; 0
    3234:	e0 e4       	ldi	r30, 0x40	; 64
    3236:	f0 e0       	ldi	r31, 0x00	; 0
    3238:	80 81       	ld	r24, Z
    323a:	8b 7f       	andi	r24, 0xFB	; 251
    323c:	8c 93       	st	X, r24
    323e:	15 c0       	rjmp	.+42     	; 0x326a <UART_Init+0x23c>
        /* code */
        break;
    case _9_bit:
        SET_BIT(UCSRC,UCSRC_UCSZ0);
    3240:	a0 e4       	ldi	r26, 0x40	; 64
    3242:	b0 e0       	ldi	r27, 0x00	; 0
    3244:	e0 e4       	ldi	r30, 0x40	; 64
    3246:	f0 e0       	ldi	r31, 0x00	; 0
    3248:	80 81       	ld	r24, Z
    324a:	82 60       	ori	r24, 0x02	; 2
    324c:	8c 93       	st	X, r24
        SET_BIT(UCSRC,UCSRC_UCSZ1);
    324e:	a0 e4       	ldi	r26, 0x40	; 64
    3250:	b0 e0       	ldi	r27, 0x00	; 0
    3252:	e0 e4       	ldi	r30, 0x40	; 64
    3254:	f0 e0       	ldi	r31, 0x00	; 0
    3256:	80 81       	ld	r24, Z
    3258:	84 60       	ori	r24, 0x04	; 4
    325a:	8c 93       	st	X, r24
        SET_BIT(UCSRC,UCSRB_UCSZ2);
    325c:	a0 e4       	ldi	r26, 0x40	; 64
    325e:	b0 e0       	ldi	r27, 0x00	; 0
    3260:	e0 e4       	ldi	r30, 0x40	; 64
    3262:	f0 e0       	ldi	r31, 0x00	; 0
    3264:	80 81       	ld	r24, Z
    3266:	84 60       	ori	r24, 0x04	; 4
    3268:	8c 93       	st	X, r24
        break;
    
    default:
        break;
    }
    switch (brate)
    326a:	8d 81       	ldd	r24, Y+5	; 0x05
    326c:	28 2f       	mov	r18, r24
    326e:	30 e0       	ldi	r19, 0x00	; 0
    3270:	3f 83       	std	Y+7, r19	; 0x07
    3272:	2e 83       	std	Y+6, r18	; 0x06
    3274:	8e 81       	ldd	r24, Y+6	; 0x06
    3276:	9f 81       	ldd	r25, Y+7	; 0x07
    3278:	81 30       	cpi	r24, 0x01	; 1
    327a:	91 05       	cpc	r25, r1
    327c:	71 f0       	breq	.+28     	; 0x329a <UART_Init+0x26c>
    327e:	2e 81       	ldd	r18, Y+6	; 0x06
    3280:	3f 81       	ldd	r19, Y+7	; 0x07
    3282:	22 30       	cpi	r18, 0x02	; 2
    3284:	31 05       	cpc	r19, r1
    3286:	71 f0       	breq	.+28     	; 0x32a4 <UART_Init+0x276>
    3288:	8e 81       	ldd	r24, Y+6	; 0x06
    328a:	9f 81       	ldd	r25, Y+7	; 0x07
    328c:	00 97       	sbiw	r24, 0x00	; 0
    328e:	71 f4       	brne	.+28     	; 0x32ac <UART_Init+0x27e>
    {
    case _2400:
        UBRRL=416;
    3290:	e9 e2       	ldi	r30, 0x29	; 41
    3292:	f0 e0       	ldi	r31, 0x00	; 0
    3294:	80 ea       	ldi	r24, 0xA0	; 160
    3296:	80 83       	st	Z, r24
    3298:	09 c0       	rjmp	.+18     	; 0x32ac <UART_Init+0x27e>
        /* code */
        break;
    case _4800:
        UBRRL=207;
    329a:	e9 e2       	ldi	r30, 0x29	; 41
    329c:	f0 e0       	ldi	r31, 0x00	; 0
    329e:	8f ec       	ldi	r24, 0xCF	; 207
    32a0:	80 83       	st	Z, r24
    32a2:	04 c0       	rjmp	.+8      	; 0x32ac <UART_Init+0x27e>
        /* code */
        break;
    case _9600:
        UBRRL=103;
    32a4:	e9 e2       	ldi	r30, 0x29	; 41
    32a6:	f0 e0       	ldi	r31, 0x00	; 0
    32a8:	87 e6       	ldi	r24, 0x67	; 103
    32aa:	80 83       	st	Z, r24
        break;
    
    default:
        break;
    }
    SET_BIT(UCSRB,UCSRB_RXEN);
    32ac:	aa e2       	ldi	r26, 0x2A	; 42
    32ae:	b0 e0       	ldi	r27, 0x00	; 0
    32b0:	ea e2       	ldi	r30, 0x2A	; 42
    32b2:	f0 e0       	ldi	r31, 0x00	; 0
    32b4:	80 81       	ld	r24, Z
    32b6:	80 61       	ori	r24, 0x10	; 16
    32b8:	8c 93       	st	X, r24
    SET_BIT(UCSRB,UCSRB_TXEN);
    32ba:	aa e2       	ldi	r26, 0x2A	; 42
    32bc:	b0 e0       	ldi	r27, 0x00	; 0
    32be:	ea e2       	ldi	r30, 0x2A	; 42
    32c0:	f0 e0       	ldi	r31, 0x00	; 0
    32c2:	80 81       	ld	r24, Z
    32c4:	88 60       	ori	r24, 0x08	; 8
    32c6:	8c 93       	st	X, r24
}
    32c8:	2b 96       	adiw	r28, 0x0b	; 11
    32ca:	0f b6       	in	r0, 0x3f	; 63
    32cc:	f8 94       	cli
    32ce:	de bf       	out	0x3e, r29	; 62
    32d0:	0f be       	out	0x3f, r0	; 63
    32d2:	cd bf       	out	0x3d, r28	; 61
    32d4:	cf 91       	pop	r28
    32d6:	df 91       	pop	r29
    32d8:	0f 91       	pop	r16
    32da:	08 95       	ret

000032dc <UART_Send_Data>:


void UART_Send_Data(u8 data){
    32dc:	df 93       	push	r29
    32de:	cf 93       	push	r28
    32e0:	0f 92       	push	r0
    32e2:	cd b7       	in	r28, 0x3d	; 61
    32e4:	de b7       	in	r29, 0x3e	; 62
    32e6:	89 83       	std	Y+1, r24	; 0x01
    
    UDR=data;
    32e8:	ec e2       	ldi	r30, 0x2C	; 44
    32ea:	f0 e0       	ldi	r31, 0x00	; 0
    32ec:	89 81       	ldd	r24, Y+1	; 0x01
    32ee:	80 83       	st	Z, r24
    while (GET_BIT(UCSRA,UCSRA_TXC)==0);
    32f0:	eb e2       	ldi	r30, 0x2B	; 43
    32f2:	f0 e0       	ldi	r31, 0x00	; 0
    32f4:	80 81       	ld	r24, Z
    32f6:	82 95       	swap	r24
    32f8:	86 95       	lsr	r24
    32fa:	86 95       	lsr	r24
    32fc:	83 70       	andi	r24, 0x03	; 3
    32fe:	88 2f       	mov	r24, r24
    3300:	90 e0       	ldi	r25, 0x00	; 0
    3302:	81 70       	andi	r24, 0x01	; 1
    3304:	90 70       	andi	r25, 0x00	; 0
    3306:	00 97       	sbiw	r24, 0x00	; 0
    3308:	99 f3       	breq	.-26     	; 0x32f0 <UART_Send_Data+0x14>
}
    330a:	0f 90       	pop	r0
    330c:	cf 91       	pop	r28
    330e:	df 91       	pop	r29
    3310:	08 95       	ret

00003312 <Recieve_Data>:

u8 Recieve_Data(){
    3312:	df 93       	push	r29
    3314:	cf 93       	push	r28
    3316:	cd b7       	in	r28, 0x3d	; 61
    3318:	de b7       	in	r29, 0x3e	; 62
    while (GET_BIT(UCSRA,UCSRA_RCX)==0);
    331a:	eb e2       	ldi	r30, 0x2B	; 43
    331c:	f0 e0       	ldi	r31, 0x00	; 0
    331e:	80 81       	ld	r24, Z
    3320:	88 23       	and	r24, r24
    3322:	dc f7       	brge	.-10     	; 0x331a <Recieve_Data+0x8>
    return UDR;
    3324:	ec e2       	ldi	r30, 0x2C	; 44
    3326:	f0 e0       	ldi	r31, 0x00	; 0
    3328:	80 81       	ld	r24, Z
}
    332a:	cf 91       	pop	r28
    332c:	df 91       	pop	r29
    332e:	08 95       	ret

00003330 <WDT_enable>:
 */
#include "WDT.h"
#include "macros.h"
#include "std_types.h"

void WDT_enable(){
    3330:	df 93       	push	r29
    3332:	cf 93       	push	r28
    3334:	cd b7       	in	r28, 0x3d	; 61
    3336:	de b7       	in	r29, 0x3e	; 62
    SET_BIT(WDTCR,WDTCR_WDE);
    3338:	a1 e4       	ldi	r26, 0x41	; 65
    333a:	b0 e0       	ldi	r27, 0x00	; 0
    333c:	e1 e4       	ldi	r30, 0x41	; 65
    333e:	f0 e0       	ldi	r31, 0x00	; 0
    3340:	80 81       	ld	r24, Z
    3342:	88 60       	ori	r24, 0x08	; 8
    3344:	8c 93       	st	X, r24
}
    3346:	cf 91       	pop	r28
    3348:	df 91       	pop	r29
    334a:	08 95       	ret

0000334c <WDT_disable>:
    t_0_26s,
    t_0_52s,
    t_1s,
    t_2_1s
*/
void WDT_disable(){
    334c:	df 93       	push	r29
    334e:	cf 93       	push	r28
    3350:	cd b7       	in	r28, 0x3d	; 61
    3352:	de b7       	in	r29, 0x3e	; 62
    WDTCR=0b00001100;
    3354:	e1 e4       	ldi	r30, 0x41	; 65
    3356:	f0 e0       	ldi	r31, 0x00	; 0
    3358:	8c e0       	ldi	r24, 0x0C	; 12
    335a:	80 83       	st	Z, r24
    // WDTCR=0;
}
    335c:	cf 91       	pop	r28
    335e:	df 91       	pop	r29
    3360:	08 95       	ret

00003362 <WDT_SleepTime>:
void WDT_SleepTime(Prescale_Select ps){
    3362:	df 93       	push	r29
    3364:	cf 93       	push	r28
    3366:	00 d0       	rcall	.+0      	; 0x3368 <WDT_SleepTime+0x6>
    3368:	0f 92       	push	r0
    336a:	cd b7       	in	r28, 0x3d	; 61
    336c:	de b7       	in	r29, 0x3e	; 62
    336e:	89 83       	std	Y+1, r24	; 0x01
    switch (ps)
    3370:	89 81       	ldd	r24, Y+1	; 0x01
    3372:	28 2f       	mov	r18, r24
    3374:	30 e0       	ldi	r19, 0x00	; 0
    3376:	3b 83       	std	Y+3, r19	; 0x03
    3378:	2a 83       	std	Y+2, r18	; 0x02
    337a:	8a 81       	ldd	r24, Y+2	; 0x02
    337c:	9b 81       	ldd	r25, Y+3	; 0x03
    337e:	83 30       	cpi	r24, 0x03	; 3
    3380:	91 05       	cpc	r25, r1
    3382:	09 f4       	brne	.+2      	; 0x3386 <WDT_SleepTime+0x24>
    3384:	70 c0       	rjmp	.+224    	; 0x3466 <WDT_SleepTime+0x104>
    3386:	2a 81       	ldd	r18, Y+2	; 0x02
    3388:	3b 81       	ldd	r19, Y+3	; 0x03
    338a:	24 30       	cpi	r18, 0x04	; 4
    338c:	31 05       	cpc	r19, r1
    338e:	84 f4       	brge	.+32     	; 0x33b0 <WDT_SleepTime+0x4e>
    3390:	8a 81       	ldd	r24, Y+2	; 0x02
    3392:	9b 81       	ldd	r25, Y+3	; 0x03
    3394:	81 30       	cpi	r24, 0x01	; 1
    3396:	91 05       	cpc	r25, r1
    3398:	d1 f1       	breq	.+116    	; 0x340e <WDT_SleepTime+0xac>
    339a:	2a 81       	ldd	r18, Y+2	; 0x02
    339c:	3b 81       	ldd	r19, Y+3	; 0x03
    339e:	22 30       	cpi	r18, 0x02	; 2
    33a0:	31 05       	cpc	r19, r1
    33a2:	0c f0       	brlt	.+2      	; 0x33a6 <WDT_SleepTime+0x44>
    33a4:	4a c0       	rjmp	.+148    	; 0x343a <WDT_SleepTime+0xd8>
    33a6:	8a 81       	ldd	r24, Y+2	; 0x02
    33a8:	9b 81       	ldd	r25, Y+3	; 0x03
    33aa:	00 97       	sbiw	r24, 0x00	; 0
    33ac:	d1 f0       	breq	.+52     	; 0x33e2 <WDT_SleepTime+0x80>
    33ae:	c9 c0       	rjmp	.+402    	; 0x3542 <WDT_SleepTime+0x1e0>
    33b0:	2a 81       	ldd	r18, Y+2	; 0x02
    33b2:	3b 81       	ldd	r19, Y+3	; 0x03
    33b4:	25 30       	cpi	r18, 0x05	; 5
    33b6:	31 05       	cpc	r19, r1
    33b8:	09 f4       	brne	.+2      	; 0x33bc <WDT_SleepTime+0x5a>
    33ba:	81 c0       	rjmp	.+258    	; 0x34be <WDT_SleepTime+0x15c>
    33bc:	8a 81       	ldd	r24, Y+2	; 0x02
    33be:	9b 81       	ldd	r25, Y+3	; 0x03
    33c0:	85 30       	cpi	r24, 0x05	; 5
    33c2:	91 05       	cpc	r25, r1
    33c4:	0c f4       	brge	.+2      	; 0x33c8 <WDT_SleepTime+0x66>
    33c6:	65 c0       	rjmp	.+202    	; 0x3492 <WDT_SleepTime+0x130>
    33c8:	2a 81       	ldd	r18, Y+2	; 0x02
    33ca:	3b 81       	ldd	r19, Y+3	; 0x03
    33cc:	26 30       	cpi	r18, 0x06	; 6
    33ce:	31 05       	cpc	r19, r1
    33d0:	09 f4       	brne	.+2      	; 0x33d4 <WDT_SleepTime+0x72>
    33d2:	8b c0       	rjmp	.+278    	; 0x34ea <WDT_SleepTime+0x188>
    33d4:	8a 81       	ldd	r24, Y+2	; 0x02
    33d6:	9b 81       	ldd	r25, Y+3	; 0x03
    33d8:	87 30       	cpi	r24, 0x07	; 7
    33da:	91 05       	cpc	r25, r1
    33dc:	09 f4       	brne	.+2      	; 0x33e0 <WDT_SleepTime+0x7e>
    33de:	9b c0       	rjmp	.+310    	; 0x3516 <WDT_SleepTime+0x1b4>
    33e0:	b0 c0       	rjmp	.+352    	; 0x3542 <WDT_SleepTime+0x1e0>
    {
    case WDT_t_16ms :
        CLR_BIT(WDTCR,WDTCR_WDP0);
    33e2:	a1 e4       	ldi	r26, 0x41	; 65
    33e4:	b0 e0       	ldi	r27, 0x00	; 0
    33e6:	e1 e4       	ldi	r30, 0x41	; 65
    33e8:	f0 e0       	ldi	r31, 0x00	; 0
    33ea:	80 81       	ld	r24, Z
    33ec:	8e 7f       	andi	r24, 0xFE	; 254
    33ee:	8c 93       	st	X, r24
        CLR_BIT(WDTCR,WDTCR_WDP1);
    33f0:	a1 e4       	ldi	r26, 0x41	; 65
    33f2:	b0 e0       	ldi	r27, 0x00	; 0
    33f4:	e1 e4       	ldi	r30, 0x41	; 65
    33f6:	f0 e0       	ldi	r31, 0x00	; 0
    33f8:	80 81       	ld	r24, Z
    33fa:	8d 7f       	andi	r24, 0xFD	; 253
    33fc:	8c 93       	st	X, r24
        CLR_BIT(WDTCR,WDTCR_WDP2);
    33fe:	a1 e4       	ldi	r26, 0x41	; 65
    3400:	b0 e0       	ldi	r27, 0x00	; 0
    3402:	e1 e4       	ldi	r30, 0x41	; 65
    3404:	f0 e0       	ldi	r31, 0x00	; 0
    3406:	80 81       	ld	r24, Z
    3408:	8b 7f       	andi	r24, 0xFB	; 251
    340a:	8c 93       	st	X, r24
    340c:	af c0       	rjmp	.+350    	; 0x356c <WDT_SleepTime+0x20a>
        /* code */
        break;
    case WDT_t_32_5ms :
        SET_BIT(WDTCR,WDTCR_WDP0);
    340e:	a1 e4       	ldi	r26, 0x41	; 65
    3410:	b0 e0       	ldi	r27, 0x00	; 0
    3412:	e1 e4       	ldi	r30, 0x41	; 65
    3414:	f0 e0       	ldi	r31, 0x00	; 0
    3416:	80 81       	ld	r24, Z
    3418:	81 60       	ori	r24, 0x01	; 1
    341a:	8c 93       	st	X, r24
        CLR_BIT(WDTCR,WDTCR_WDP1);
    341c:	a1 e4       	ldi	r26, 0x41	; 65
    341e:	b0 e0       	ldi	r27, 0x00	; 0
    3420:	e1 e4       	ldi	r30, 0x41	; 65
    3422:	f0 e0       	ldi	r31, 0x00	; 0
    3424:	80 81       	ld	r24, Z
    3426:	8d 7f       	andi	r24, 0xFD	; 253
    3428:	8c 93       	st	X, r24
        CLR_BIT(WDTCR,WDTCR_WDP2);
    342a:	a1 e4       	ldi	r26, 0x41	; 65
    342c:	b0 e0       	ldi	r27, 0x00	; 0
    342e:	e1 e4       	ldi	r30, 0x41	; 65
    3430:	f0 e0       	ldi	r31, 0x00	; 0
    3432:	80 81       	ld	r24, Z
    3434:	8b 7f       	andi	r24, 0xFB	; 251
    3436:	8c 93       	st	X, r24
    3438:	99 c0       	rjmp	.+306    	; 0x356c <WDT_SleepTime+0x20a>
        /* code */
        break;
    case WDT_t_65_ms :
        CLR_BIT(WDTCR,WDTCR_WDP0);
    343a:	a1 e4       	ldi	r26, 0x41	; 65
    343c:	b0 e0       	ldi	r27, 0x00	; 0
    343e:	e1 e4       	ldi	r30, 0x41	; 65
    3440:	f0 e0       	ldi	r31, 0x00	; 0
    3442:	80 81       	ld	r24, Z
    3444:	8e 7f       	andi	r24, 0xFE	; 254
    3446:	8c 93       	st	X, r24
        SET_BIT(WDTCR,WDTCR_WDP1);
    3448:	a1 e4       	ldi	r26, 0x41	; 65
    344a:	b0 e0       	ldi	r27, 0x00	; 0
    344c:	e1 e4       	ldi	r30, 0x41	; 65
    344e:	f0 e0       	ldi	r31, 0x00	; 0
    3450:	80 81       	ld	r24, Z
    3452:	82 60       	ori	r24, 0x02	; 2
    3454:	8c 93       	st	X, r24
        CLR_BIT(WDTCR,WDTCR_WDP2);
    3456:	a1 e4       	ldi	r26, 0x41	; 65
    3458:	b0 e0       	ldi	r27, 0x00	; 0
    345a:	e1 e4       	ldi	r30, 0x41	; 65
    345c:	f0 e0       	ldi	r31, 0x00	; 0
    345e:	80 81       	ld	r24, Z
    3460:	8b 7f       	andi	r24, 0xFB	; 251
    3462:	8c 93       	st	X, r24
    3464:	83 c0       	rjmp	.+262    	; 0x356c <WDT_SleepTime+0x20a>
        /* code */
        break;
    case WDT_t_0_13s :
        SET_BIT(WDTCR,WDTCR_WDP0);
    3466:	a1 e4       	ldi	r26, 0x41	; 65
    3468:	b0 e0       	ldi	r27, 0x00	; 0
    346a:	e1 e4       	ldi	r30, 0x41	; 65
    346c:	f0 e0       	ldi	r31, 0x00	; 0
    346e:	80 81       	ld	r24, Z
    3470:	81 60       	ori	r24, 0x01	; 1
    3472:	8c 93       	st	X, r24
        SET_BIT(WDTCR,WDTCR_WDP1);
    3474:	a1 e4       	ldi	r26, 0x41	; 65
    3476:	b0 e0       	ldi	r27, 0x00	; 0
    3478:	e1 e4       	ldi	r30, 0x41	; 65
    347a:	f0 e0       	ldi	r31, 0x00	; 0
    347c:	80 81       	ld	r24, Z
    347e:	82 60       	ori	r24, 0x02	; 2
    3480:	8c 93       	st	X, r24
        CLR_BIT(WDTCR,WDTCR_WDP2);
    3482:	a1 e4       	ldi	r26, 0x41	; 65
    3484:	b0 e0       	ldi	r27, 0x00	; 0
    3486:	e1 e4       	ldi	r30, 0x41	; 65
    3488:	f0 e0       	ldi	r31, 0x00	; 0
    348a:	80 81       	ld	r24, Z
    348c:	8b 7f       	andi	r24, 0xFB	; 251
    348e:	8c 93       	st	X, r24
    3490:	6d c0       	rjmp	.+218    	; 0x356c <WDT_SleepTime+0x20a>
        /* code */
        break;
    case WDT_t_0_26s :
        CLR_BIT(WDTCR,WDTCR_WDP0);
    3492:	a1 e4       	ldi	r26, 0x41	; 65
    3494:	b0 e0       	ldi	r27, 0x00	; 0
    3496:	e1 e4       	ldi	r30, 0x41	; 65
    3498:	f0 e0       	ldi	r31, 0x00	; 0
    349a:	80 81       	ld	r24, Z
    349c:	8e 7f       	andi	r24, 0xFE	; 254
    349e:	8c 93       	st	X, r24
        CLR_BIT(WDTCR,WDTCR_WDP1);
    34a0:	a1 e4       	ldi	r26, 0x41	; 65
    34a2:	b0 e0       	ldi	r27, 0x00	; 0
    34a4:	e1 e4       	ldi	r30, 0x41	; 65
    34a6:	f0 e0       	ldi	r31, 0x00	; 0
    34a8:	80 81       	ld	r24, Z
    34aa:	8d 7f       	andi	r24, 0xFD	; 253
    34ac:	8c 93       	st	X, r24
        SET_BIT(WDTCR,WDTCR_WDP2);
    34ae:	a1 e4       	ldi	r26, 0x41	; 65
    34b0:	b0 e0       	ldi	r27, 0x00	; 0
    34b2:	e1 e4       	ldi	r30, 0x41	; 65
    34b4:	f0 e0       	ldi	r31, 0x00	; 0
    34b6:	80 81       	ld	r24, Z
    34b8:	84 60       	ori	r24, 0x04	; 4
    34ba:	8c 93       	st	X, r24
    34bc:	57 c0       	rjmp	.+174    	; 0x356c <WDT_SleepTime+0x20a>
        /* code */
        break;
    case WDT_t_0_52s :
        SET_BIT(WDTCR,WDTCR_WDP0);
    34be:	a1 e4       	ldi	r26, 0x41	; 65
    34c0:	b0 e0       	ldi	r27, 0x00	; 0
    34c2:	e1 e4       	ldi	r30, 0x41	; 65
    34c4:	f0 e0       	ldi	r31, 0x00	; 0
    34c6:	80 81       	ld	r24, Z
    34c8:	81 60       	ori	r24, 0x01	; 1
    34ca:	8c 93       	st	X, r24
        CLR_BIT(WDTCR,WDTCR_WDP1);
    34cc:	a1 e4       	ldi	r26, 0x41	; 65
    34ce:	b0 e0       	ldi	r27, 0x00	; 0
    34d0:	e1 e4       	ldi	r30, 0x41	; 65
    34d2:	f0 e0       	ldi	r31, 0x00	; 0
    34d4:	80 81       	ld	r24, Z
    34d6:	8d 7f       	andi	r24, 0xFD	; 253
    34d8:	8c 93       	st	X, r24
        SET_BIT(WDTCR,WDTCR_WDP2);
    34da:	a1 e4       	ldi	r26, 0x41	; 65
    34dc:	b0 e0       	ldi	r27, 0x00	; 0
    34de:	e1 e4       	ldi	r30, 0x41	; 65
    34e0:	f0 e0       	ldi	r31, 0x00	; 0
    34e2:	80 81       	ld	r24, Z
    34e4:	84 60       	ori	r24, 0x04	; 4
    34e6:	8c 93       	st	X, r24
    34e8:	41 c0       	rjmp	.+130    	; 0x356c <WDT_SleepTime+0x20a>
        /* code */
        break;
    case WDT_t_1s :
        CLR_BIT(WDTCR,WDTCR_WDP0);
    34ea:	a1 e4       	ldi	r26, 0x41	; 65
    34ec:	b0 e0       	ldi	r27, 0x00	; 0
    34ee:	e1 e4       	ldi	r30, 0x41	; 65
    34f0:	f0 e0       	ldi	r31, 0x00	; 0
    34f2:	80 81       	ld	r24, Z
    34f4:	8e 7f       	andi	r24, 0xFE	; 254
    34f6:	8c 93       	st	X, r24
        SET_BIT(WDTCR,WDTCR_WDP1);
    34f8:	a1 e4       	ldi	r26, 0x41	; 65
    34fa:	b0 e0       	ldi	r27, 0x00	; 0
    34fc:	e1 e4       	ldi	r30, 0x41	; 65
    34fe:	f0 e0       	ldi	r31, 0x00	; 0
    3500:	80 81       	ld	r24, Z
    3502:	82 60       	ori	r24, 0x02	; 2
    3504:	8c 93       	st	X, r24
        SET_BIT(WDTCR,WDTCR_WDP2);
    3506:	a1 e4       	ldi	r26, 0x41	; 65
    3508:	b0 e0       	ldi	r27, 0x00	; 0
    350a:	e1 e4       	ldi	r30, 0x41	; 65
    350c:	f0 e0       	ldi	r31, 0x00	; 0
    350e:	80 81       	ld	r24, Z
    3510:	84 60       	ori	r24, 0x04	; 4
    3512:	8c 93       	st	X, r24
    3514:	2b c0       	rjmp	.+86     	; 0x356c <WDT_SleepTime+0x20a>
        /* code */
        break;
    case WDT_t_2_1s :
        SET_BIT(WDTCR,WDTCR_WDP0);
    3516:	a1 e4       	ldi	r26, 0x41	; 65
    3518:	b0 e0       	ldi	r27, 0x00	; 0
    351a:	e1 e4       	ldi	r30, 0x41	; 65
    351c:	f0 e0       	ldi	r31, 0x00	; 0
    351e:	80 81       	ld	r24, Z
    3520:	81 60       	ori	r24, 0x01	; 1
    3522:	8c 93       	st	X, r24
        SET_BIT(WDTCR,WDTCR_WDP1);
    3524:	a1 e4       	ldi	r26, 0x41	; 65
    3526:	b0 e0       	ldi	r27, 0x00	; 0
    3528:	e1 e4       	ldi	r30, 0x41	; 65
    352a:	f0 e0       	ldi	r31, 0x00	; 0
    352c:	80 81       	ld	r24, Z
    352e:	82 60       	ori	r24, 0x02	; 2
    3530:	8c 93       	st	X, r24
        SET_BIT(WDTCR,WDTCR_WDP2);
    3532:	a1 e4       	ldi	r26, 0x41	; 65
    3534:	b0 e0       	ldi	r27, 0x00	; 0
    3536:	e1 e4       	ldi	r30, 0x41	; 65
    3538:	f0 e0       	ldi	r31, 0x00	; 0
    353a:	80 81       	ld	r24, Z
    353c:	84 60       	ori	r24, 0x04	; 4
    353e:	8c 93       	st	X, r24
    3540:	15 c0       	rjmp	.+42     	; 0x356c <WDT_SleepTime+0x20a>
        /* code */
        break;
    
    
    default:
        CLR_BIT(WDTCR,WDTCR_WDP0);
    3542:	a1 e4       	ldi	r26, 0x41	; 65
    3544:	b0 e0       	ldi	r27, 0x00	; 0
    3546:	e1 e4       	ldi	r30, 0x41	; 65
    3548:	f0 e0       	ldi	r31, 0x00	; 0
    354a:	80 81       	ld	r24, Z
    354c:	8e 7f       	andi	r24, 0xFE	; 254
    354e:	8c 93       	st	X, r24
        CLR_BIT(WDTCR,WDTCR_WDP1);
    3550:	a1 e4       	ldi	r26, 0x41	; 65
    3552:	b0 e0       	ldi	r27, 0x00	; 0
    3554:	e1 e4       	ldi	r30, 0x41	; 65
    3556:	f0 e0       	ldi	r31, 0x00	; 0
    3558:	80 81       	ld	r24, Z
    355a:	8d 7f       	andi	r24, 0xFD	; 253
    355c:	8c 93       	st	X, r24
        CLR_BIT(WDTCR,WDTCR_WDP2);
    355e:	a1 e4       	ldi	r26, 0x41	; 65
    3560:	b0 e0       	ldi	r27, 0x00	; 0
    3562:	e1 e4       	ldi	r30, 0x41	; 65
    3564:	f0 e0       	ldi	r31, 0x00	; 0
    3566:	80 81       	ld	r24, Z
    3568:	8b 7f       	andi	r24, 0xFB	; 251
    356a:	8c 93       	st	X, r24
        break;
    }
}
    356c:	0f 90       	pop	r0
    356e:	0f 90       	pop	r0
    3570:	0f 90       	pop	r0
    3572:	cf 91       	pop	r28
    3574:	df 91       	pop	r29
    3576:	08 95       	ret

00003578 <xCoRoutineCreate>:
static void prvCheckDelayedList( void );

/*-----------------------------------------------------------*/

signed portBASE_TYPE xCoRoutineCreate( crCOROUTINE_CODE pxCoRoutineCode, unsigned portBASE_TYPE uxPriority, unsigned portBASE_TYPE uxIndex )
{
    3578:	df 93       	push	r29
    357a:	cf 93       	push	r28
    357c:	cd b7       	in	r28, 0x3d	; 61
    357e:	de b7       	in	r29, 0x3e	; 62
    3580:	27 97       	sbiw	r28, 0x07	; 7
    3582:	0f b6       	in	r0, 0x3f	; 63
    3584:	f8 94       	cli
    3586:	de bf       	out	0x3e, r29	; 62
    3588:	0f be       	out	0x3f, r0	; 63
    358a:	cd bf       	out	0x3d, r28	; 61
    358c:	9d 83       	std	Y+5, r25	; 0x05
    358e:	8c 83       	std	Y+4, r24	; 0x04
    3590:	6e 83       	std	Y+6, r22	; 0x06
    3592:	4f 83       	std	Y+7, r20	; 0x07
signed portBASE_TYPE xReturn;
corCRCB *pxCoRoutine;

	/* Allocate the memory that will store the co-routine control block. */
	pxCoRoutine = ( corCRCB * ) pvPortMalloc( sizeof( corCRCB ) );
    3594:	8a e1       	ldi	r24, 0x1A	; 26
    3596:	90 e0       	ldi	r25, 0x00	; 0
    3598:	0e 94 94 1d 	call	0x3b28	; 0x3b28 <pvPortMalloc>
    359c:	9a 83       	std	Y+2, r25	; 0x02
    359e:	89 83       	std	Y+1, r24	; 0x01
	if( pxCoRoutine )
    35a0:	89 81       	ldd	r24, Y+1	; 0x01
    35a2:	9a 81       	ldd	r25, Y+2	; 0x02
    35a4:	00 97       	sbiw	r24, 0x00	; 0
    35a6:	09 f4       	brne	.+2      	; 0x35aa <xCoRoutineCreate+0x32>
    35a8:	6f c0       	rjmp	.+222    	; 0x3688 <xCoRoutineCreate+0x110>
	{
		/* If pxCurrentCoRoutine is NULL then this is the first co-routine to
		be created and the co-routine data structures need initialising. */
		if( pxCurrentCoRoutine == NULL )
    35aa:	80 91 7a 00 	lds	r24, 0x007A
    35ae:	90 91 7b 00 	lds	r25, 0x007B
    35b2:	00 97       	sbiw	r24, 0x00	; 0
    35b4:	41 f4       	brne	.+16     	; 0x35c6 <xCoRoutineCreate+0x4e>
		{
			pxCurrentCoRoutine = pxCoRoutine;
    35b6:	89 81       	ldd	r24, Y+1	; 0x01
    35b8:	9a 81       	ldd	r25, Y+2	; 0x02
    35ba:	90 93 7b 00 	sts	0x007B, r25
    35be:	80 93 7a 00 	sts	0x007A, r24
			prvInitialiseCoRoutineLists();
    35c2:	0e 94 23 1d 	call	0x3a46	; 0x3a46 <prvInitialiseCoRoutineLists>
		}

		/* Check the priority is within limits. */
		if( uxPriority >= configMAX_CO_ROUTINE_PRIORITIES )
    35c6:	8e 81       	ldd	r24, Y+6	; 0x06
    35c8:	82 30       	cpi	r24, 0x02	; 2
    35ca:	10 f0       	brcs	.+4      	; 0x35d0 <xCoRoutineCreate+0x58>
		{
			uxPriority = configMAX_CO_ROUTINE_PRIORITIES - 1;
    35cc:	81 e0       	ldi	r24, 0x01	; 1
    35ce:	8e 83       	std	Y+6, r24	; 0x06
		}

		/* Fill out the co-routine control block from the function parameters. */
		pxCoRoutine->uxState = corINITIAL_STATE;
    35d0:	e9 81       	ldd	r30, Y+1	; 0x01
    35d2:	fa 81       	ldd	r31, Y+2	; 0x02
    35d4:	11 8e       	std	Z+25, r1	; 0x19
    35d6:	10 8e       	std	Z+24, r1	; 0x18
		pxCoRoutine->uxPriority = uxPriority;
    35d8:	e9 81       	ldd	r30, Y+1	; 0x01
    35da:	fa 81       	ldd	r31, Y+2	; 0x02
    35dc:	8e 81       	ldd	r24, Y+6	; 0x06
    35de:	86 8b       	std	Z+22, r24	; 0x16
		pxCoRoutine->uxIndex = uxIndex;
    35e0:	e9 81       	ldd	r30, Y+1	; 0x01
    35e2:	fa 81       	ldd	r31, Y+2	; 0x02
    35e4:	8f 81       	ldd	r24, Y+7	; 0x07
    35e6:	87 8b       	std	Z+23, r24	; 0x17
		pxCoRoutine->pxCoRoutineFunction = pxCoRoutineCode;
    35e8:	e9 81       	ldd	r30, Y+1	; 0x01
    35ea:	fa 81       	ldd	r31, Y+2	; 0x02
    35ec:	8c 81       	ldd	r24, Y+4	; 0x04
    35ee:	9d 81       	ldd	r25, Y+5	; 0x05
    35f0:	91 83       	std	Z+1, r25	; 0x01
    35f2:	80 83       	st	Z, r24

		/* Initialise all the other co-routine control block parameters. */
		vListInitialiseItem( &( pxCoRoutine->xGenericListItem ) );
    35f4:	89 81       	ldd	r24, Y+1	; 0x01
    35f6:	9a 81       	ldd	r25, Y+2	; 0x02
    35f8:	02 96       	adiw	r24, 0x02	; 2
    35fa:	0e 94 2a 1e 	call	0x3c54	; 0x3c54 <vListInitialiseItem>
		vListInitialiseItem( &( pxCoRoutine->xEventListItem ) );
    35fe:	89 81       	ldd	r24, Y+1	; 0x01
    3600:	9a 81       	ldd	r25, Y+2	; 0x02
    3602:	0c 96       	adiw	r24, 0x0c	; 12
    3604:	0e 94 2a 1e 	call	0x3c54	; 0x3c54 <vListInitialiseItem>

		/* Set the co-routine control block as a link back from the xListItem.
		This is so we can get back to the containing CRCB from a generic item
		in a list. */
		listSET_LIST_ITEM_OWNER( &( pxCoRoutine->xGenericListItem ), pxCoRoutine );
    3608:	e9 81       	ldd	r30, Y+1	; 0x01
    360a:	fa 81       	ldd	r31, Y+2	; 0x02
    360c:	89 81       	ldd	r24, Y+1	; 0x01
    360e:	9a 81       	ldd	r25, Y+2	; 0x02
    3610:	91 87       	std	Z+9, r25	; 0x09
    3612:	80 87       	std	Z+8, r24	; 0x08
		listSET_LIST_ITEM_OWNER( &( pxCoRoutine->xEventListItem ), pxCoRoutine );
    3614:	e9 81       	ldd	r30, Y+1	; 0x01
    3616:	fa 81       	ldd	r31, Y+2	; 0x02
    3618:	89 81       	ldd	r24, Y+1	; 0x01
    361a:	9a 81       	ldd	r25, Y+2	; 0x02
    361c:	93 8b       	std	Z+19, r25	; 0x13
    361e:	82 8b       	std	Z+18, r24	; 0x12
	
		/* Event lists are always in priority order. */
		listSET_LIST_ITEM_VALUE( &( pxCoRoutine->xEventListItem ), configMAX_PRIORITIES - ( portTickType ) uxPriority );
    3620:	8e 81       	ldd	r24, Y+6	; 0x06
    3622:	28 2f       	mov	r18, r24
    3624:	30 e0       	ldi	r19, 0x00	; 0
    3626:	87 e0       	ldi	r24, 0x07	; 7
    3628:	90 e0       	ldi	r25, 0x00	; 0
    362a:	82 1b       	sub	r24, r18
    362c:	93 0b       	sbc	r25, r19
    362e:	e9 81       	ldd	r30, Y+1	; 0x01
    3630:	fa 81       	ldd	r31, Y+2	; 0x02
    3632:	95 87       	std	Z+13, r25	; 0x0d
    3634:	84 87       	std	Z+12, r24	; 0x0c
		
		/* Now the co-routine has been initialised it can be added to the ready
		list at the correct priority. */
		prvAddCoRoutineToReadyQueue( pxCoRoutine );
    3636:	e9 81       	ldd	r30, Y+1	; 0x01
    3638:	fa 81       	ldd	r31, Y+2	; 0x02
    363a:	96 89       	ldd	r25, Z+22	; 0x16
    363c:	80 91 7c 00 	lds	r24, 0x007C
    3640:	89 17       	cp	r24, r25
    3642:	28 f4       	brcc	.+10     	; 0x364e <xCoRoutineCreate+0xd6>
    3644:	e9 81       	ldd	r30, Y+1	; 0x01
    3646:	fa 81       	ldd	r31, Y+2	; 0x02
    3648:	86 89       	ldd	r24, Z+22	; 0x16
    364a:	80 93 7c 00 	sts	0x007C, r24
    364e:	e9 81       	ldd	r30, Y+1	; 0x01
    3650:	fa 81       	ldd	r31, Y+2	; 0x02
    3652:	86 89       	ldd	r24, Z+22	; 0x16
    3654:	28 2f       	mov	r18, r24
    3656:	30 e0       	ldi	r19, 0x00	; 0
    3658:	c9 01       	movw	r24, r18
    365a:	88 0f       	add	r24, r24
    365c:	99 1f       	adc	r25, r25
    365e:	88 0f       	add	r24, r24
    3660:	99 1f       	adc	r25, r25
    3662:	88 0f       	add	r24, r24
    3664:	99 1f       	adc	r25, r25
    3666:	82 0f       	add	r24, r18
    3668:	93 1f       	adc	r25, r19
    366a:	ac 01       	movw	r20, r24
    366c:	4d 57       	subi	r20, 0x7D	; 125
    366e:	5f 4f       	sbci	r21, 0xFF	; 255
    3670:	89 81       	ldd	r24, Y+1	; 0x01
    3672:	9a 81       	ldd	r25, Y+2	; 0x02
    3674:	9c 01       	movw	r18, r24
    3676:	2e 5f       	subi	r18, 0xFE	; 254
    3678:	3f 4f       	sbci	r19, 0xFF	; 255
    367a:	ca 01       	movw	r24, r20
    367c:	b9 01       	movw	r22, r18
    367e:	0e 94 3a 1e 	call	0x3c74	; 0x3c74 <vListInsertEnd>

		xReturn = pdPASS;
    3682:	81 e0       	ldi	r24, 0x01	; 1
    3684:	8b 83       	std	Y+3, r24	; 0x03
    3686:	02 c0       	rjmp	.+4      	; 0x368c <xCoRoutineCreate+0x114>
	}
	else
	{		
		xReturn = errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY;
    3688:	8f ef       	ldi	r24, 0xFF	; 255
    368a:	8b 83       	std	Y+3, r24	; 0x03
	}
	
	return xReturn;	
    368c:	8b 81       	ldd	r24, Y+3	; 0x03
}
    368e:	27 96       	adiw	r28, 0x07	; 7
    3690:	0f b6       	in	r0, 0x3f	; 63
    3692:	f8 94       	cli
    3694:	de bf       	out	0x3e, r29	; 62
    3696:	0f be       	out	0x3f, r0	; 63
    3698:	cd bf       	out	0x3d, r28	; 61
    369a:	cf 91       	pop	r28
    369c:	df 91       	pop	r29
    369e:	08 95       	ret

000036a0 <vCoRoutineAddToDelayedList>:
/*-----------------------------------------------------------*/

void vCoRoutineAddToDelayedList( portTickType xTicksToDelay, xList *pxEventList )
{
    36a0:	df 93       	push	r29
    36a2:	cf 93       	push	r28
    36a4:	00 d0       	rcall	.+0      	; 0x36a6 <vCoRoutineAddToDelayedList+0x6>
    36a6:	00 d0       	rcall	.+0      	; 0x36a8 <vCoRoutineAddToDelayedList+0x8>
    36a8:	00 d0       	rcall	.+0      	; 0x36aa <vCoRoutineAddToDelayedList+0xa>
    36aa:	cd b7       	in	r28, 0x3d	; 61
    36ac:	de b7       	in	r29, 0x3e	; 62
    36ae:	9c 83       	std	Y+4, r25	; 0x04
    36b0:	8b 83       	std	Y+3, r24	; 0x03
    36b2:	7e 83       	std	Y+6, r23	; 0x06
    36b4:	6d 83       	std	Y+5, r22	; 0x05
portTickType xTimeToWake;

	/* Calculate the time to wake - this may overflow but this is
	not a problem. */
	xTimeToWake = xCoRoutineTickCount + xTicksToDelay;
    36b6:	20 91 7d 00 	lds	r18, 0x007D
    36ba:	30 91 7e 00 	lds	r19, 0x007E
    36be:	8b 81       	ldd	r24, Y+3	; 0x03
    36c0:	9c 81       	ldd	r25, Y+4	; 0x04
    36c2:	82 0f       	add	r24, r18
    36c4:	93 1f       	adc	r25, r19
    36c6:	9a 83       	std	Y+2, r25	; 0x02
    36c8:	89 83       	std	Y+1, r24	; 0x01

	/* We must remove ourselves from the ready list before adding
	ourselves to the blocked list as the same list item is used for
	both lists. */
	vListRemove( ( xListItem * ) &( pxCurrentCoRoutine->xGenericListItem ) );
    36ca:	80 91 7a 00 	lds	r24, 0x007A
    36ce:	90 91 7b 00 	lds	r25, 0x007B
    36d2:	02 96       	adiw	r24, 0x02	; 2
    36d4:	0e 94 f2 1e 	call	0x3de4	; 0x3de4 <vListRemove>

	/* The list item will be inserted in wake time order. */
	listSET_LIST_ITEM_VALUE( &( pxCurrentCoRoutine->xGenericListItem ), xTimeToWake );
    36d8:	e0 91 7a 00 	lds	r30, 0x007A
    36dc:	f0 91 7b 00 	lds	r31, 0x007B
    36e0:	89 81       	ldd	r24, Y+1	; 0x01
    36e2:	9a 81       	ldd	r25, Y+2	; 0x02
    36e4:	93 83       	std	Z+3, r25	; 0x03
    36e6:	82 83       	std	Z+2, r24	; 0x02

	if( xTimeToWake < xCoRoutineTickCount )
    36e8:	20 91 7d 00 	lds	r18, 0x007D
    36ec:	30 91 7e 00 	lds	r19, 0x007E
    36f0:	89 81       	ldd	r24, Y+1	; 0x01
    36f2:	9a 81       	ldd	r25, Y+2	; 0x02
    36f4:	82 17       	cp	r24, r18
    36f6:	93 07       	cpc	r25, r19
    36f8:	70 f4       	brcc	.+28     	; 0x3716 <vCoRoutineAddToDelayedList+0x76>
	{
		/* Wake time has overflowed.  Place this item in the
		overflow list. */
		vListInsert( ( xList * ) pxOverflowDelayedCoRoutineList, ( xListItem * ) &( pxCurrentCoRoutine->xGenericListItem ) );
    36fa:	80 91 a9 00 	lds	r24, 0x00A9
    36fe:	90 91 aa 00 	lds	r25, 0x00AA
    3702:	20 91 7a 00 	lds	r18, 0x007A
    3706:	30 91 7b 00 	lds	r19, 0x007B
    370a:	2e 5f       	subi	r18, 0xFE	; 254
    370c:	3f 4f       	sbci	r19, 0xFF	; 255
    370e:	b9 01       	movw	r22, r18
    3710:	0e 94 86 1e 	call	0x3d0c	; 0x3d0c <vListInsert>
    3714:	0d c0       	rjmp	.+26     	; 0x3730 <vCoRoutineAddToDelayedList+0x90>
	}
	else
	{
		/* The wake time has not overflowed, so we can use the
		current block list. */
		vListInsert( ( xList * ) pxDelayedCoRoutineList, ( xListItem * ) &( pxCurrentCoRoutine->xGenericListItem ) );
    3716:	80 91 a7 00 	lds	r24, 0x00A7
    371a:	90 91 a8 00 	lds	r25, 0x00A8
    371e:	20 91 7a 00 	lds	r18, 0x007A
    3722:	30 91 7b 00 	lds	r19, 0x007B
    3726:	2e 5f       	subi	r18, 0xFE	; 254
    3728:	3f 4f       	sbci	r19, 0xFF	; 255
    372a:	b9 01       	movw	r22, r18
    372c:	0e 94 86 1e 	call	0x3d0c	; 0x3d0c <vListInsert>
	}

	if( pxEventList )
    3730:	8d 81       	ldd	r24, Y+5	; 0x05
    3732:	9e 81       	ldd	r25, Y+6	; 0x06
    3734:	00 97       	sbiw	r24, 0x00	; 0
    3736:	61 f0       	breq	.+24     	; 0x3750 <vCoRoutineAddToDelayedList+0xb0>
	{
		/* Also add the co-routine to an event list.  If this is done then the
		function must be called with interrupts disabled. */
		vListInsert( pxEventList, &( pxCurrentCoRoutine->xEventListItem ) );
    3738:	80 91 7a 00 	lds	r24, 0x007A
    373c:	90 91 7b 00 	lds	r25, 0x007B
    3740:	9c 01       	movw	r18, r24
    3742:	24 5f       	subi	r18, 0xF4	; 244
    3744:	3f 4f       	sbci	r19, 0xFF	; 255
    3746:	8d 81       	ldd	r24, Y+5	; 0x05
    3748:	9e 81       	ldd	r25, Y+6	; 0x06
    374a:	b9 01       	movw	r22, r18
    374c:	0e 94 86 1e 	call	0x3d0c	; 0x3d0c <vListInsert>
	}
}
    3750:	26 96       	adiw	r28, 0x06	; 6
    3752:	0f b6       	in	r0, 0x3f	; 63
    3754:	f8 94       	cli
    3756:	de bf       	out	0x3e, r29	; 62
    3758:	0f be       	out	0x3f, r0	; 63
    375a:	cd bf       	out	0x3d, r28	; 61
    375c:	cf 91       	pop	r28
    375e:	df 91       	pop	r29
    3760:	08 95       	ret

00003762 <prvCheckPendingReadyList>:
/*-----------------------------------------------------------*/

static void prvCheckPendingReadyList( void )
{
    3762:	df 93       	push	r29
    3764:	cf 93       	push	r28
    3766:	00 d0       	rcall	.+0      	; 0x3768 <prvCheckPendingReadyList+0x6>
    3768:	cd b7       	in	r28, 0x3d	; 61
    376a:	de b7       	in	r29, 0x3e	; 62
    376c:	3a c0       	rjmp	.+116    	; 0x37e2 <prvCheckPendingReadyList+0x80>
	while( listLIST_IS_EMPTY( &xPendingReadyCoRoutineList ) == pdFALSE )
	{
		corCRCB *pxUnblockedCRCB;

		/* The pending ready list can be accessed by an ISR. */
		portDISABLE_INTERRUPTS();
    376e:	f8 94       	cli
		{	
			pxUnblockedCRCB = ( corCRCB * ) listGET_OWNER_OF_HEAD_ENTRY( (&xPendingReadyCoRoutineList) );			
    3770:	e0 91 b0 00 	lds	r30, 0x00B0
    3774:	f0 91 b1 00 	lds	r31, 0x00B1
    3778:	86 81       	ldd	r24, Z+6	; 0x06
    377a:	97 81       	ldd	r25, Z+7	; 0x07
    377c:	9a 83       	std	Y+2, r25	; 0x02
    377e:	89 83       	std	Y+1, r24	; 0x01
			vListRemove( &( pxUnblockedCRCB->xEventListItem ) );
    3780:	89 81       	ldd	r24, Y+1	; 0x01
    3782:	9a 81       	ldd	r25, Y+2	; 0x02
    3784:	0c 96       	adiw	r24, 0x0c	; 12
    3786:	0e 94 f2 1e 	call	0x3de4	; 0x3de4 <vListRemove>
		}
		portENABLE_INTERRUPTS();
    378a:	78 94       	sei

		vListRemove( &( pxUnblockedCRCB->xGenericListItem ) );
    378c:	89 81       	ldd	r24, Y+1	; 0x01
    378e:	9a 81       	ldd	r25, Y+2	; 0x02
    3790:	02 96       	adiw	r24, 0x02	; 2
    3792:	0e 94 f2 1e 	call	0x3de4	; 0x3de4 <vListRemove>
		prvAddCoRoutineToReadyQueue( pxUnblockedCRCB );	
    3796:	e9 81       	ldd	r30, Y+1	; 0x01
    3798:	fa 81       	ldd	r31, Y+2	; 0x02
    379a:	96 89       	ldd	r25, Z+22	; 0x16
    379c:	80 91 7c 00 	lds	r24, 0x007C
    37a0:	89 17       	cp	r24, r25
    37a2:	28 f4       	brcc	.+10     	; 0x37ae <prvCheckPendingReadyList+0x4c>
    37a4:	e9 81       	ldd	r30, Y+1	; 0x01
    37a6:	fa 81       	ldd	r31, Y+2	; 0x02
    37a8:	86 89       	ldd	r24, Z+22	; 0x16
    37aa:	80 93 7c 00 	sts	0x007C, r24
    37ae:	e9 81       	ldd	r30, Y+1	; 0x01
    37b0:	fa 81       	ldd	r31, Y+2	; 0x02
    37b2:	86 89       	ldd	r24, Z+22	; 0x16
    37b4:	28 2f       	mov	r18, r24
    37b6:	30 e0       	ldi	r19, 0x00	; 0
    37b8:	c9 01       	movw	r24, r18
    37ba:	88 0f       	add	r24, r24
    37bc:	99 1f       	adc	r25, r25
    37be:	88 0f       	add	r24, r24
    37c0:	99 1f       	adc	r25, r25
    37c2:	88 0f       	add	r24, r24
    37c4:	99 1f       	adc	r25, r25
    37c6:	82 0f       	add	r24, r18
    37c8:	93 1f       	adc	r25, r19
    37ca:	ac 01       	movw	r20, r24
    37cc:	4d 57       	subi	r20, 0x7D	; 125
    37ce:	5f 4f       	sbci	r21, 0xFF	; 255
    37d0:	89 81       	ldd	r24, Y+1	; 0x01
    37d2:	9a 81       	ldd	r25, Y+2	; 0x02
    37d4:	9c 01       	movw	r18, r24
    37d6:	2e 5f       	subi	r18, 0xFE	; 254
    37d8:	3f 4f       	sbci	r19, 0xFF	; 255
    37da:	ca 01       	movw	r24, r20
    37dc:	b9 01       	movw	r22, r18
    37de:	0e 94 3a 1e 	call	0x3c74	; 0x3c74 <vListInsertEnd>
static void prvCheckPendingReadyList( void )
{
	/* Are there any co-routines waiting to get moved to the ready list?  These
	are co-routines that have been readied by an ISR.  The ISR cannot access
	the	ready lists itself. */
	while( listLIST_IS_EMPTY( &xPendingReadyCoRoutineList ) == pdFALSE )
    37e2:	80 91 ab 00 	lds	r24, 0x00AB
    37e6:	88 23       	and	r24, r24
    37e8:	09 f0       	breq	.+2      	; 0x37ec <prvCheckPendingReadyList+0x8a>
    37ea:	c1 cf       	rjmp	.-126    	; 0x376e <prvCheckPendingReadyList+0xc>
		portENABLE_INTERRUPTS();

		vListRemove( &( pxUnblockedCRCB->xGenericListItem ) );
		prvAddCoRoutineToReadyQueue( pxUnblockedCRCB );	
	}
}
    37ec:	0f 90       	pop	r0
    37ee:	0f 90       	pop	r0
    37f0:	cf 91       	pop	r28
    37f2:	df 91       	pop	r29
    37f4:	08 95       	ret

000037f6 <prvCheckDelayedList>:
/*-----------------------------------------------------------*/

static void prvCheckDelayedList( void )
{
    37f6:	df 93       	push	r29
    37f8:	cf 93       	push	r28
    37fa:	00 d0       	rcall	.+0      	; 0x37fc <prvCheckDelayedList+0x6>
    37fc:	00 d0       	rcall	.+0      	; 0x37fe <prvCheckDelayedList+0x8>
    37fe:	cd b7       	in	r28, 0x3d	; 61
    3800:	de b7       	in	r29, 0x3e	; 62
corCRCB *pxCRCB;

	xPassedTicks = xTaskGetTickCount() - xLastTickCount;
    3802:	0e 94 7f 29 	call	0x52fe	; 0x52fe <xTaskGetTickCount>
    3806:	20 91 7f 00 	lds	r18, 0x007F
    380a:	30 91 80 00 	lds	r19, 0x0080
    380e:	82 1b       	sub	r24, r18
    3810:	93 0b       	sbc	r25, r19
    3812:	90 93 82 00 	sts	0x0082, r25
    3816:	80 93 81 00 	sts	0x0081, r24
    381a:	85 c0       	rjmp	.+266    	; 0x3926 <prvCheckDelayedList+0x130>
	while( xPassedTicks )
	{
		xCoRoutineTickCount++;
    381c:	80 91 7d 00 	lds	r24, 0x007D
    3820:	90 91 7e 00 	lds	r25, 0x007E
    3824:	01 96       	adiw	r24, 0x01	; 1
    3826:	90 93 7e 00 	sts	0x007E, r25
    382a:	80 93 7d 00 	sts	0x007D, r24
		xPassedTicks--;
    382e:	80 91 81 00 	lds	r24, 0x0081
    3832:	90 91 82 00 	lds	r25, 0x0082
    3836:	01 97       	sbiw	r24, 0x01	; 1
    3838:	90 93 82 00 	sts	0x0082, r25
    383c:	80 93 81 00 	sts	0x0081, r24

		/* If the tick count has overflowed we need to swap the ready lists. */
		if( xCoRoutineTickCount == 0 )
    3840:	80 91 7d 00 	lds	r24, 0x007D
    3844:	90 91 7e 00 	lds	r25, 0x007E
    3848:	00 97       	sbiw	r24, 0x00	; 0
    384a:	09 f0       	breq	.+2      	; 0x384e <prvCheckDelayedList+0x58>
    384c:	64 c0       	rjmp	.+200    	; 0x3916 <prvCheckDelayedList+0x120>
		{
			xList * pxTemp;

			/* Tick count has overflowed so we need to swap the delay lists.  If there are
			any items in pxDelayedCoRoutineList here then there is an error! */
			pxTemp = pxDelayedCoRoutineList;
    384e:	80 91 a7 00 	lds	r24, 0x00A7
    3852:	90 91 a8 00 	lds	r25, 0x00A8
    3856:	9a 83       	std	Y+2, r25	; 0x02
    3858:	89 83       	std	Y+1, r24	; 0x01
			pxDelayedCoRoutineList = pxOverflowDelayedCoRoutineList;
    385a:	80 91 a9 00 	lds	r24, 0x00A9
    385e:	90 91 aa 00 	lds	r25, 0x00AA
    3862:	90 93 a8 00 	sts	0x00A8, r25
    3866:	80 93 a7 00 	sts	0x00A7, r24
			pxOverflowDelayedCoRoutineList = pxTemp;
    386a:	89 81       	ldd	r24, Y+1	; 0x01
    386c:	9a 81       	ldd	r25, Y+2	; 0x02
    386e:	90 93 aa 00 	sts	0x00AA, r25
    3872:	80 93 a9 00 	sts	0x00A9, r24
    3876:	4f c0       	rjmp	.+158    	; 0x3916 <prvCheckDelayedList+0x120>
		}

		/* See if this tick has made a timeout expire. */
		while( listLIST_IS_EMPTY( pxDelayedCoRoutineList ) == pdFALSE )
		{
			pxCRCB = ( corCRCB * ) listGET_OWNER_OF_HEAD_ENTRY( pxDelayedCoRoutineList );
    3878:	e0 91 a7 00 	lds	r30, 0x00A7
    387c:	f0 91 a8 00 	lds	r31, 0x00A8
    3880:	05 80       	ldd	r0, Z+5	; 0x05
    3882:	f6 81       	ldd	r31, Z+6	; 0x06
    3884:	e0 2d       	mov	r30, r0
    3886:	86 81       	ldd	r24, Z+6	; 0x06
    3888:	97 81       	ldd	r25, Z+7	; 0x07
    388a:	9c 83       	std	Y+4, r25	; 0x04
    388c:	8b 83       	std	Y+3, r24	; 0x03

			if( xCoRoutineTickCount < listGET_LIST_ITEM_VALUE( &( pxCRCB->xGenericListItem ) ) )				
    388e:	eb 81       	ldd	r30, Y+3	; 0x03
    3890:	fc 81       	ldd	r31, Y+4	; 0x04
    3892:	22 81       	ldd	r18, Z+2	; 0x02
    3894:	33 81       	ldd	r19, Z+3	; 0x03
    3896:	80 91 7d 00 	lds	r24, 0x007D
    389a:	90 91 7e 00 	lds	r25, 0x007E
    389e:	82 17       	cp	r24, r18
    38a0:	93 07       	cpc	r25, r19
    38a2:	08 f4       	brcc	.+2      	; 0x38a6 <prvCheckDelayedList+0xb0>
    38a4:	40 c0       	rjmp	.+128    	; 0x3926 <prvCheckDelayedList+0x130>
			{			
				/* Timeout not yet expired. */																			
				break;																				
			}																						

			portDISABLE_INTERRUPTS();
    38a6:	f8 94       	cli
				/* The event could have occurred just before this critical
				section.  If this is the case then the generic list item will
				have been moved to the pending ready list and the following
				line is still valid.  Also the pvContainer parameter will have
				been set to NULL so the following lines are also valid. */
				vListRemove( &( pxCRCB->xGenericListItem ) );											
    38a8:	8b 81       	ldd	r24, Y+3	; 0x03
    38aa:	9c 81       	ldd	r25, Y+4	; 0x04
    38ac:	02 96       	adiw	r24, 0x02	; 2
    38ae:	0e 94 f2 1e 	call	0x3de4	; 0x3de4 <vListRemove>

				/* Is the co-routine waiting on an event also? */												
				if( pxCRCB->xEventListItem.pvContainer )													
    38b2:	eb 81       	ldd	r30, Y+3	; 0x03
    38b4:	fc 81       	ldd	r31, Y+4	; 0x04
    38b6:	84 89       	ldd	r24, Z+20	; 0x14
    38b8:	95 89       	ldd	r25, Z+21	; 0x15
    38ba:	00 97       	sbiw	r24, 0x00	; 0
    38bc:	29 f0       	breq	.+10     	; 0x38c8 <prvCheckDelayedList+0xd2>
				{															
					vListRemove( &( pxCRCB->xEventListItem ) );											
    38be:	8b 81       	ldd	r24, Y+3	; 0x03
    38c0:	9c 81       	ldd	r25, Y+4	; 0x04
    38c2:	0c 96       	adiw	r24, 0x0c	; 12
    38c4:	0e 94 f2 1e 	call	0x3de4	; 0x3de4 <vListRemove>
				}
			}
			portENABLE_INTERRUPTS();
    38c8:	78 94       	sei

			prvAddCoRoutineToReadyQueue( pxCRCB );													
    38ca:	eb 81       	ldd	r30, Y+3	; 0x03
    38cc:	fc 81       	ldd	r31, Y+4	; 0x04
    38ce:	96 89       	ldd	r25, Z+22	; 0x16
    38d0:	80 91 7c 00 	lds	r24, 0x007C
    38d4:	89 17       	cp	r24, r25
    38d6:	28 f4       	brcc	.+10     	; 0x38e2 <prvCheckDelayedList+0xec>
    38d8:	eb 81       	ldd	r30, Y+3	; 0x03
    38da:	fc 81       	ldd	r31, Y+4	; 0x04
    38dc:	86 89       	ldd	r24, Z+22	; 0x16
    38de:	80 93 7c 00 	sts	0x007C, r24
    38e2:	eb 81       	ldd	r30, Y+3	; 0x03
    38e4:	fc 81       	ldd	r31, Y+4	; 0x04
    38e6:	86 89       	ldd	r24, Z+22	; 0x16
    38e8:	28 2f       	mov	r18, r24
    38ea:	30 e0       	ldi	r19, 0x00	; 0
    38ec:	c9 01       	movw	r24, r18
    38ee:	88 0f       	add	r24, r24
    38f0:	99 1f       	adc	r25, r25
    38f2:	88 0f       	add	r24, r24
    38f4:	99 1f       	adc	r25, r25
    38f6:	88 0f       	add	r24, r24
    38f8:	99 1f       	adc	r25, r25
    38fa:	82 0f       	add	r24, r18
    38fc:	93 1f       	adc	r25, r19
    38fe:	ac 01       	movw	r20, r24
    3900:	4d 57       	subi	r20, 0x7D	; 125
    3902:	5f 4f       	sbci	r21, 0xFF	; 255
    3904:	8b 81       	ldd	r24, Y+3	; 0x03
    3906:	9c 81       	ldd	r25, Y+4	; 0x04
    3908:	9c 01       	movw	r18, r24
    390a:	2e 5f       	subi	r18, 0xFE	; 254
    390c:	3f 4f       	sbci	r19, 0xFF	; 255
    390e:	ca 01       	movw	r24, r20
    3910:	b9 01       	movw	r22, r18
    3912:	0e 94 3a 1e 	call	0x3c74	; 0x3c74 <vListInsertEnd>
			pxDelayedCoRoutineList = pxOverflowDelayedCoRoutineList;
			pxOverflowDelayedCoRoutineList = pxTemp;
		}

		/* See if this tick has made a timeout expire. */
		while( listLIST_IS_EMPTY( pxDelayedCoRoutineList ) == pdFALSE )
    3916:	e0 91 a7 00 	lds	r30, 0x00A7
    391a:	f0 91 a8 00 	lds	r31, 0x00A8
    391e:	80 81       	ld	r24, Z
    3920:	88 23       	and	r24, r24
    3922:	09 f0       	breq	.+2      	; 0x3926 <prvCheckDelayedList+0x130>
    3924:	a9 cf       	rjmp	.-174    	; 0x3878 <prvCheckDelayedList+0x82>
static void prvCheckDelayedList( void )
{
corCRCB *pxCRCB;

	xPassedTicks = xTaskGetTickCount() - xLastTickCount;
	while( xPassedTicks )
    3926:	80 91 81 00 	lds	r24, 0x0081
    392a:	90 91 82 00 	lds	r25, 0x0082
    392e:	00 97       	sbiw	r24, 0x00	; 0
    3930:	09 f0       	breq	.+2      	; 0x3934 <prvCheckDelayedList+0x13e>
    3932:	74 cf       	rjmp	.-280    	; 0x381c <prvCheckDelayedList+0x26>

			prvAddCoRoutineToReadyQueue( pxCRCB );													
		}																									
	}

	xLastTickCount = xCoRoutineTickCount;
    3934:	80 91 7d 00 	lds	r24, 0x007D
    3938:	90 91 7e 00 	lds	r25, 0x007E
    393c:	90 93 80 00 	sts	0x0080, r25
    3940:	80 93 7f 00 	sts	0x007F, r24
}
    3944:	0f 90       	pop	r0
    3946:	0f 90       	pop	r0
    3948:	0f 90       	pop	r0
    394a:	0f 90       	pop	r0
    394c:	cf 91       	pop	r28
    394e:	df 91       	pop	r29
    3950:	08 95       	ret

00003952 <vCoRoutineSchedule>:
/*-----------------------------------------------------------*/

void vCoRoutineSchedule( void )
{
    3952:	df 93       	push	r29
    3954:	cf 93       	push	r28
    3956:	00 d0       	rcall	.+0      	; 0x3958 <vCoRoutineSchedule+0x6>
    3958:	cd b7       	in	r28, 0x3d	; 61
    395a:	de b7       	in	r29, 0x3e	; 62
	/* See if any co-routines readied by events need moving to the ready lists. */
	prvCheckPendingReadyList();
    395c:	0e 94 b1 1b 	call	0x3762	; 0x3762 <prvCheckPendingReadyList>

	/* See if any delayed co-routines have timed out. */
	prvCheckDelayedList();
    3960:	0e 94 fb 1b 	call	0x37f6	; 0x37f6 <prvCheckDelayedList>
    3964:	0a c0       	rjmp	.+20     	; 0x397a <vCoRoutineSchedule+0x28>

	/* Find the highest priority queue that contains ready co-routines. */
	while( listLIST_IS_EMPTY( &( pxReadyCoRoutineLists[ uxTopCoRoutineReadyPriority ] ) ) )
	{
		if( uxTopCoRoutineReadyPriority == 0 )
    3966:	80 91 7c 00 	lds	r24, 0x007C
    396a:	88 23       	and	r24, r24
    396c:	09 f4       	brne	.+2      	; 0x3970 <vCoRoutineSchedule+0x1e>
    396e:	66 c0       	rjmp	.+204    	; 0x3a3c <vCoRoutineSchedule+0xea>
		{
			/* No more co-routines to check. */
			return;
		}
		--uxTopCoRoutineReadyPriority;
    3970:	80 91 7c 00 	lds	r24, 0x007C
    3974:	81 50       	subi	r24, 0x01	; 1
    3976:	80 93 7c 00 	sts	0x007C, r24

	/* See if any delayed co-routines have timed out. */
	prvCheckDelayedList();

	/* Find the highest priority queue that contains ready co-routines. */
	while( listLIST_IS_EMPTY( &( pxReadyCoRoutineLists[ uxTopCoRoutineReadyPriority ] ) ) )
    397a:	80 91 7c 00 	lds	r24, 0x007C
    397e:	28 2f       	mov	r18, r24
    3980:	30 e0       	ldi	r19, 0x00	; 0
    3982:	c9 01       	movw	r24, r18
    3984:	88 0f       	add	r24, r24
    3986:	99 1f       	adc	r25, r25
    3988:	88 0f       	add	r24, r24
    398a:	99 1f       	adc	r25, r25
    398c:	88 0f       	add	r24, r24
    398e:	99 1f       	adc	r25, r25
    3990:	82 0f       	add	r24, r18
    3992:	93 1f       	adc	r25, r19
    3994:	fc 01       	movw	r30, r24
    3996:	ed 57       	subi	r30, 0x7D	; 125
    3998:	ff 4f       	sbci	r31, 0xFF	; 255
    399a:	80 81       	ld	r24, Z
    399c:	88 23       	and	r24, r24
    399e:	19 f3       	breq	.-58     	; 0x3966 <vCoRoutineSchedule+0x14>
		--uxTopCoRoutineReadyPriority;
	}

	/* listGET_OWNER_OF_NEXT_ENTRY walks through the list, so the co-routines
	 of the	same priority get an equal share of the processor time. */
	listGET_OWNER_OF_NEXT_ENTRY( pxCurrentCoRoutine, &( pxReadyCoRoutineLists[ uxTopCoRoutineReadyPriority ] ) );
    39a0:	80 91 7c 00 	lds	r24, 0x007C
    39a4:	28 2f       	mov	r18, r24
    39a6:	30 e0       	ldi	r19, 0x00	; 0
    39a8:	c9 01       	movw	r24, r18
    39aa:	88 0f       	add	r24, r24
    39ac:	99 1f       	adc	r25, r25
    39ae:	88 0f       	add	r24, r24
    39b0:	99 1f       	adc	r25, r25
    39b2:	88 0f       	add	r24, r24
    39b4:	99 1f       	adc	r25, r25
    39b6:	82 0f       	add	r24, r18
    39b8:	93 1f       	adc	r25, r19
    39ba:	8d 57       	subi	r24, 0x7D	; 125
    39bc:	9f 4f       	sbci	r25, 0xFF	; 255
    39be:	9a 83       	std	Y+2, r25	; 0x02
    39c0:	89 83       	std	Y+1, r24	; 0x01
    39c2:	e9 81       	ldd	r30, Y+1	; 0x01
    39c4:	fa 81       	ldd	r31, Y+2	; 0x02
    39c6:	01 80       	ldd	r0, Z+1	; 0x01
    39c8:	f2 81       	ldd	r31, Z+2	; 0x02
    39ca:	e0 2d       	mov	r30, r0
    39cc:	82 81       	ldd	r24, Z+2	; 0x02
    39ce:	93 81       	ldd	r25, Z+3	; 0x03
    39d0:	e9 81       	ldd	r30, Y+1	; 0x01
    39d2:	fa 81       	ldd	r31, Y+2	; 0x02
    39d4:	92 83       	std	Z+2, r25	; 0x02
    39d6:	81 83       	std	Z+1, r24	; 0x01
    39d8:	e9 81       	ldd	r30, Y+1	; 0x01
    39da:	fa 81       	ldd	r31, Y+2	; 0x02
    39dc:	21 81       	ldd	r18, Z+1	; 0x01
    39de:	32 81       	ldd	r19, Z+2	; 0x02
    39e0:	89 81       	ldd	r24, Y+1	; 0x01
    39e2:	9a 81       	ldd	r25, Y+2	; 0x02
    39e4:	03 96       	adiw	r24, 0x03	; 3
    39e6:	28 17       	cp	r18, r24
    39e8:	39 07       	cpc	r19, r25
    39ea:	59 f4       	brne	.+22     	; 0x3a02 <vCoRoutineSchedule+0xb0>
    39ec:	e9 81       	ldd	r30, Y+1	; 0x01
    39ee:	fa 81       	ldd	r31, Y+2	; 0x02
    39f0:	01 80       	ldd	r0, Z+1	; 0x01
    39f2:	f2 81       	ldd	r31, Z+2	; 0x02
    39f4:	e0 2d       	mov	r30, r0
    39f6:	82 81       	ldd	r24, Z+2	; 0x02
    39f8:	93 81       	ldd	r25, Z+3	; 0x03
    39fa:	e9 81       	ldd	r30, Y+1	; 0x01
    39fc:	fa 81       	ldd	r31, Y+2	; 0x02
    39fe:	92 83       	std	Z+2, r25	; 0x02
    3a00:	81 83       	std	Z+1, r24	; 0x01
    3a02:	e9 81       	ldd	r30, Y+1	; 0x01
    3a04:	fa 81       	ldd	r31, Y+2	; 0x02
    3a06:	01 80       	ldd	r0, Z+1	; 0x01
    3a08:	f2 81       	ldd	r31, Z+2	; 0x02
    3a0a:	e0 2d       	mov	r30, r0
    3a0c:	86 81       	ldd	r24, Z+6	; 0x06
    3a0e:	97 81       	ldd	r25, Z+7	; 0x07
    3a10:	90 93 7b 00 	sts	0x007B, r25
    3a14:	80 93 7a 00 	sts	0x007A, r24

	/* Call the co-routine. */
	( pxCurrentCoRoutine->pxCoRoutineFunction )( pxCurrentCoRoutine, pxCurrentCoRoutine->uxIndex );
    3a18:	e0 91 7a 00 	lds	r30, 0x007A
    3a1c:	f0 91 7b 00 	lds	r31, 0x007B
    3a20:	40 81       	ld	r20, Z
    3a22:	51 81       	ldd	r21, Z+1	; 0x01
    3a24:	80 91 7a 00 	lds	r24, 0x007A
    3a28:	90 91 7b 00 	lds	r25, 0x007B
    3a2c:	e0 91 7a 00 	lds	r30, 0x007A
    3a30:	f0 91 7b 00 	lds	r31, 0x007B
    3a34:	27 89       	ldd	r18, Z+23	; 0x17
    3a36:	62 2f       	mov	r22, r18
    3a38:	fa 01       	movw	r30, r20
    3a3a:	09 95       	icall

	return;
}
    3a3c:	0f 90       	pop	r0
    3a3e:	0f 90       	pop	r0
    3a40:	cf 91       	pop	r28
    3a42:	df 91       	pop	r29
    3a44:	08 95       	ret

00003a46 <prvInitialiseCoRoutineLists>:
/*-----------------------------------------------------------*/

static void prvInitialiseCoRoutineLists( void )
{
    3a46:	df 93       	push	r29
    3a48:	cf 93       	push	r28
    3a4a:	0f 92       	push	r0
    3a4c:	cd b7       	in	r28, 0x3d	; 61
    3a4e:	de b7       	in	r29, 0x3e	; 62
unsigned portBASE_TYPE uxPriority;

	for( uxPriority = 0; uxPriority < configMAX_CO_ROUTINE_PRIORITIES; uxPriority++ )
    3a50:	19 82       	std	Y+1, r1	; 0x01
    3a52:	13 c0       	rjmp	.+38     	; 0x3a7a <prvInitialiseCoRoutineLists+0x34>
	{
		vListInitialise( ( xList * ) &( pxReadyCoRoutineLists[ uxPriority ] ) );
    3a54:	89 81       	ldd	r24, Y+1	; 0x01
    3a56:	28 2f       	mov	r18, r24
    3a58:	30 e0       	ldi	r19, 0x00	; 0
    3a5a:	c9 01       	movw	r24, r18
    3a5c:	88 0f       	add	r24, r24
    3a5e:	99 1f       	adc	r25, r25
    3a60:	88 0f       	add	r24, r24
    3a62:	99 1f       	adc	r25, r25
    3a64:	88 0f       	add	r24, r24
    3a66:	99 1f       	adc	r25, r25
    3a68:	82 0f       	add	r24, r18
    3a6a:	93 1f       	adc	r25, r19
    3a6c:	8d 57       	subi	r24, 0x7D	; 125
    3a6e:	9f 4f       	sbci	r25, 0xFF	; 255
    3a70:	0e 94 00 1e 	call	0x3c00	; 0x3c00 <vListInitialise>

static void prvInitialiseCoRoutineLists( void )
{
unsigned portBASE_TYPE uxPriority;

	for( uxPriority = 0; uxPriority < configMAX_CO_ROUTINE_PRIORITIES; uxPriority++ )
    3a74:	89 81       	ldd	r24, Y+1	; 0x01
    3a76:	8f 5f       	subi	r24, 0xFF	; 255
    3a78:	89 83       	std	Y+1, r24	; 0x01
    3a7a:	89 81       	ldd	r24, Y+1	; 0x01
    3a7c:	82 30       	cpi	r24, 0x02	; 2
    3a7e:	50 f3       	brcs	.-44     	; 0x3a54 <prvInitialiseCoRoutineLists+0xe>
	{
		vListInitialise( ( xList * ) &( pxReadyCoRoutineLists[ uxPriority ] ) );
	}

	vListInitialise( ( xList * ) &xDelayedCoRoutineList1 );
    3a80:	85 e9       	ldi	r24, 0x95	; 149
    3a82:	90 e0       	ldi	r25, 0x00	; 0
    3a84:	0e 94 00 1e 	call	0x3c00	; 0x3c00 <vListInitialise>
	vListInitialise( ( xList * ) &xDelayedCoRoutineList2 );
    3a88:	8e e9       	ldi	r24, 0x9E	; 158
    3a8a:	90 e0       	ldi	r25, 0x00	; 0
    3a8c:	0e 94 00 1e 	call	0x3c00	; 0x3c00 <vListInitialise>
	vListInitialise( ( xList * ) &xPendingReadyCoRoutineList );
    3a90:	8b ea       	ldi	r24, 0xAB	; 171
    3a92:	90 e0       	ldi	r25, 0x00	; 0
    3a94:	0e 94 00 1e 	call	0x3c00	; 0x3c00 <vListInitialise>

	/* Start with pxDelayedCoRoutineList using list1 and the
	pxOverflowDelayedCoRoutineList using list2. */
	pxDelayedCoRoutineList = &xDelayedCoRoutineList1;
    3a98:	85 e9       	ldi	r24, 0x95	; 149
    3a9a:	90 e0       	ldi	r25, 0x00	; 0
    3a9c:	90 93 a8 00 	sts	0x00A8, r25
    3aa0:	80 93 a7 00 	sts	0x00A7, r24
	pxOverflowDelayedCoRoutineList = &xDelayedCoRoutineList2;
    3aa4:	8e e9       	ldi	r24, 0x9E	; 158
    3aa6:	90 e0       	ldi	r25, 0x00	; 0
    3aa8:	90 93 aa 00 	sts	0x00AA, r25
    3aac:	80 93 a9 00 	sts	0x00A9, r24
}
    3ab0:	0f 90       	pop	r0
    3ab2:	cf 91       	pop	r28
    3ab4:	df 91       	pop	r29
    3ab6:	08 95       	ret

00003ab8 <xCoRoutineRemoveFromEventList>:
/*-----------------------------------------------------------*/

signed portBASE_TYPE xCoRoutineRemoveFromEventList( const xList *pxEventList )
{
    3ab8:	df 93       	push	r29
    3aba:	cf 93       	push	r28
    3abc:	00 d0       	rcall	.+0      	; 0x3abe <xCoRoutineRemoveFromEventList+0x6>
    3abe:	00 d0       	rcall	.+0      	; 0x3ac0 <xCoRoutineRemoveFromEventList+0x8>
    3ac0:	0f 92       	push	r0
    3ac2:	cd b7       	in	r28, 0x3d	; 61
    3ac4:	de b7       	in	r29, 0x3e	; 62
    3ac6:	9d 83       	std	Y+5, r25	; 0x05
    3ac8:	8c 83       	std	Y+4, r24	; 0x04
signed portBASE_TYPE xReturn;

	/* This function is called from within an interrupt.  It can only access
	event lists and the pending ready list.  This function assumes that a
	check has already been made to ensure pxEventList is not empty. */
	pxUnblockedCRCB = ( corCRCB * ) listGET_OWNER_OF_HEAD_ENTRY( pxEventList );
    3aca:	ec 81       	ldd	r30, Y+4	; 0x04
    3acc:	fd 81       	ldd	r31, Y+5	; 0x05
    3ace:	05 80       	ldd	r0, Z+5	; 0x05
    3ad0:	f6 81       	ldd	r31, Z+6	; 0x06
    3ad2:	e0 2d       	mov	r30, r0
    3ad4:	86 81       	ldd	r24, Z+6	; 0x06
    3ad6:	97 81       	ldd	r25, Z+7	; 0x07
    3ad8:	9b 83       	std	Y+3, r25	; 0x03
    3ada:	8a 83       	std	Y+2, r24	; 0x02
	vListRemove( &( pxUnblockedCRCB->xEventListItem ) );
    3adc:	8a 81       	ldd	r24, Y+2	; 0x02
    3ade:	9b 81       	ldd	r25, Y+3	; 0x03
    3ae0:	0c 96       	adiw	r24, 0x0c	; 12
    3ae2:	0e 94 f2 1e 	call	0x3de4	; 0x3de4 <vListRemove>
	vListInsertEnd( ( xList * ) &( xPendingReadyCoRoutineList ), &( pxUnblockedCRCB->xEventListItem ) );
    3ae6:	8a 81       	ldd	r24, Y+2	; 0x02
    3ae8:	9b 81       	ldd	r25, Y+3	; 0x03
    3aea:	9c 01       	movw	r18, r24
    3aec:	24 5f       	subi	r18, 0xF4	; 244
    3aee:	3f 4f       	sbci	r19, 0xFF	; 255
    3af0:	8b ea       	ldi	r24, 0xAB	; 171
    3af2:	90 e0       	ldi	r25, 0x00	; 0
    3af4:	b9 01       	movw	r22, r18
    3af6:	0e 94 3a 1e 	call	0x3c74	; 0x3c74 <vListInsertEnd>

	if( pxUnblockedCRCB->uxPriority >= pxCurrentCoRoutine->uxPriority )
    3afa:	ea 81       	ldd	r30, Y+2	; 0x02
    3afc:	fb 81       	ldd	r31, Y+3	; 0x03
    3afe:	96 89       	ldd	r25, Z+22	; 0x16
    3b00:	e0 91 7a 00 	lds	r30, 0x007A
    3b04:	f0 91 7b 00 	lds	r31, 0x007B
    3b08:	86 89       	ldd	r24, Z+22	; 0x16
    3b0a:	98 17       	cp	r25, r24
    3b0c:	18 f0       	brcs	.+6      	; 0x3b14 <xCoRoutineRemoveFromEventList+0x5c>
	{
		xReturn = pdTRUE;
    3b0e:	81 e0       	ldi	r24, 0x01	; 1
    3b10:	89 83       	std	Y+1, r24	; 0x01
    3b12:	01 c0       	rjmp	.+2      	; 0x3b16 <xCoRoutineRemoveFromEventList+0x5e>
	}
	else
	{
		xReturn = pdFALSE;
    3b14:	19 82       	std	Y+1, r1	; 0x01
	}

	return xReturn;
    3b16:	89 81       	ldd	r24, Y+1	; 0x01
}
    3b18:	0f 90       	pop	r0
    3b1a:	0f 90       	pop	r0
    3b1c:	0f 90       	pop	r0
    3b1e:	0f 90       	pop	r0
    3b20:	0f 90       	pop	r0
    3b22:	cf 91       	pop	r28
    3b24:	df 91       	pop	r29
    3b26:	08 95       	ret

00003b28 <pvPortMalloc>:

static size_t xNextFreeByte = ( size_t ) 0;
/*-----------------------------------------------------------*/

void *pvPortMalloc( size_t xWantedSize )
{
    3b28:	df 93       	push	r29
    3b2a:	cf 93       	push	r28
    3b2c:	00 d0       	rcall	.+0      	; 0x3b2e <pvPortMalloc+0x6>
    3b2e:	00 d0       	rcall	.+0      	; 0x3b30 <pvPortMalloc+0x8>
    3b30:	cd b7       	in	r28, 0x3d	; 61
    3b32:	de b7       	in	r29, 0x3e	; 62
    3b34:	9c 83       	std	Y+4, r25	; 0x04
    3b36:	8b 83       	std	Y+3, r24	; 0x03
void *pvReturn = NULL; 
    3b38:	1a 82       	std	Y+2, r1	; 0x02
    3b3a:	19 82       	std	Y+1, r1	; 0x01
			/* Byte alignment required. */
			xWantedSize += ( portBYTE_ALIGNMENT - ( xWantedSize & portBYTE_ALIGNMENT_MASK ) );
		}
	#endif

	vTaskSuspendAll();
    3b3c:	0e 94 e9 28 	call	0x51d2	; 0x51d2 <vTaskSuspendAll>
	{
		/* Check there is enough room left for the allocation. */
		if( ( ( xNextFreeByte + xWantedSize ) < configTOTAL_HEAP_SIZE ) &&
    3b40:	80 91 b4 00 	lds	r24, 0x00B4
    3b44:	90 91 b5 00 	lds	r25, 0x00B5
    3b48:	2b 81       	ldd	r18, Y+3	; 0x03
    3b4a:	3c 81       	ldd	r19, Y+4	; 0x04
    3b4c:	82 0f       	add	r24, r18
    3b4e:	93 1f       	adc	r25, r19
    3b50:	23 e0       	ldi	r18, 0x03	; 3
    3b52:	88 3e       	cpi	r24, 0xE8	; 232
    3b54:	92 07       	cpc	r25, r18
    3b56:	18 f5       	brcc	.+70     	; 0x3b9e <pvPortMalloc+0x76>
    3b58:	20 91 b4 00 	lds	r18, 0x00B4
    3b5c:	30 91 b5 00 	lds	r19, 0x00B5
    3b60:	8b 81       	ldd	r24, Y+3	; 0x03
    3b62:	9c 81       	ldd	r25, Y+4	; 0x04
    3b64:	28 0f       	add	r18, r24
    3b66:	39 1f       	adc	r19, r25
    3b68:	80 91 b4 00 	lds	r24, 0x00B4
    3b6c:	90 91 b5 00 	lds	r25, 0x00B5
    3b70:	82 17       	cp	r24, r18
    3b72:	93 07       	cpc	r25, r19
    3b74:	a0 f4       	brcc	.+40     	; 0x3b9e <pvPortMalloc+0x76>
			( ( xNextFreeByte + xWantedSize ) > xNextFreeByte )	)/* Check for overflow. */
		{
			/* Return the next free byte then increment the index past this
			block. */
			pvReturn = &( xHeap.ucHeap[ xNextFreeByte ] );
    3b76:	80 91 b4 00 	lds	r24, 0x00B4
    3b7a:	90 91 b5 00 	lds	r25, 0x00B5
    3b7e:	8a 54       	subi	r24, 0x4A	; 74
    3b80:	9f 4f       	sbci	r25, 0xFF	; 255
    3b82:	9a 83       	std	Y+2, r25	; 0x02
    3b84:	89 83       	std	Y+1, r24	; 0x01
			xNextFreeByte += xWantedSize;			
    3b86:	20 91 b4 00 	lds	r18, 0x00B4
    3b8a:	30 91 b5 00 	lds	r19, 0x00B5
    3b8e:	8b 81       	ldd	r24, Y+3	; 0x03
    3b90:	9c 81       	ldd	r25, Y+4	; 0x04
    3b92:	82 0f       	add	r24, r18
    3b94:	93 1f       	adc	r25, r19
    3b96:	90 93 b5 00 	sts	0x00B5, r25
    3b9a:	80 93 b4 00 	sts	0x00B4, r24
		}	
	}
	xTaskResumeAll();
    3b9e:	0e 94 f5 28 	call	0x51ea	; 0x51ea <xTaskResumeAll>
			vApplicationMallocFailedHook();
		}
	}
	#endif	

	return pvReturn;
    3ba2:	89 81       	ldd	r24, Y+1	; 0x01
    3ba4:	9a 81       	ldd	r25, Y+2	; 0x02
}
    3ba6:	0f 90       	pop	r0
    3ba8:	0f 90       	pop	r0
    3baa:	0f 90       	pop	r0
    3bac:	0f 90       	pop	r0
    3bae:	cf 91       	pop	r28
    3bb0:	df 91       	pop	r29
    3bb2:	08 95       	ret

00003bb4 <vPortFree>:
/*-----------------------------------------------------------*/

void vPortFree( void *pv )
{
    3bb4:	df 93       	push	r29
    3bb6:	cf 93       	push	r28
    3bb8:	00 d0       	rcall	.+0      	; 0x3bba <vPortFree+0x6>
    3bba:	cd b7       	in	r28, 0x3d	; 61
    3bbc:	de b7       	in	r29, 0x3e	; 62
    3bbe:	9a 83       	std	Y+2, r25	; 0x02
    3bc0:	89 83       	std	Y+1, r24	; 0x01
	/* Memory cannot be freed using this scheme.  See heap_2.c and heap_3.c 
	for alternative implementations, and the memory management pages of 
	http://www.FreeRTOS.org for more information. */
	( void ) pv;
}
    3bc2:	0f 90       	pop	r0
    3bc4:	0f 90       	pop	r0
    3bc6:	cf 91       	pop	r28
    3bc8:	df 91       	pop	r29
    3bca:	08 95       	ret

00003bcc <vPortInitialiseBlocks>:
/*-----------------------------------------------------------*/

void vPortInitialiseBlocks( void )
{
    3bcc:	df 93       	push	r29
    3bce:	cf 93       	push	r28
    3bd0:	cd b7       	in	r28, 0x3d	; 61
    3bd2:	de b7       	in	r29, 0x3e	; 62
	/* Only required when static memory is not cleared. */
	xNextFreeByte = ( size_t ) 0;
    3bd4:	10 92 b5 00 	sts	0x00B5, r1
    3bd8:	10 92 b4 00 	sts	0x00B4, r1
}
    3bdc:	cf 91       	pop	r28
    3bde:	df 91       	pop	r29
    3be0:	08 95       	ret

00003be2 <xPortGetFreeHeapSize>:
/*-----------------------------------------------------------*/

size_t xPortGetFreeHeapSize( void )
{
    3be2:	df 93       	push	r29
    3be4:	cf 93       	push	r28
    3be6:	cd b7       	in	r28, 0x3d	; 61
    3be8:	de b7       	in	r29, 0x3e	; 62
	return ( configTOTAL_HEAP_SIZE - xNextFreeByte );
    3bea:	20 91 b4 00 	lds	r18, 0x00B4
    3bee:	30 91 b5 00 	lds	r19, 0x00B5
    3bf2:	88 ee       	ldi	r24, 0xE8	; 232
    3bf4:	93 e0       	ldi	r25, 0x03	; 3
    3bf6:	82 1b       	sub	r24, r18
    3bf8:	93 0b       	sbc	r25, r19
}
    3bfa:	cf 91       	pop	r28
    3bfc:	df 91       	pop	r29
    3bfe:	08 95       	ret

00003c00 <vListInitialise>:
/*-----------------------------------------------------------
 * PUBLIC LIST API documented in list.h
 *----------------------------------------------------------*/

void vListInitialise( xList *pxList )
{
    3c00:	df 93       	push	r29
    3c02:	cf 93       	push	r28
    3c04:	00 d0       	rcall	.+0      	; 0x3c06 <vListInitialise+0x6>
    3c06:	cd b7       	in	r28, 0x3d	; 61
    3c08:	de b7       	in	r29, 0x3e	; 62
    3c0a:	9a 83       	std	Y+2, r25	; 0x02
    3c0c:	89 83       	std	Y+1, r24	; 0x01
	/* The list structure contains a list item which is used to mark the
	end of the list.  To initialise the list the list end is inserted
	as the only list entry. */
	pxList->pxIndex = ( xListItem * ) &( pxList->xListEnd );
    3c0e:	89 81       	ldd	r24, Y+1	; 0x01
    3c10:	9a 81       	ldd	r25, Y+2	; 0x02
    3c12:	03 96       	adiw	r24, 0x03	; 3
    3c14:	e9 81       	ldd	r30, Y+1	; 0x01
    3c16:	fa 81       	ldd	r31, Y+2	; 0x02
    3c18:	92 83       	std	Z+2, r25	; 0x02
    3c1a:	81 83       	std	Z+1, r24	; 0x01

	/* The list end value is the highest possible value in the list to
	ensure it remains at the end of the list. */
	pxList->xListEnd.xItemValue = portMAX_DELAY;
    3c1c:	e9 81       	ldd	r30, Y+1	; 0x01
    3c1e:	fa 81       	ldd	r31, Y+2	; 0x02
    3c20:	8f ef       	ldi	r24, 0xFF	; 255
    3c22:	9f ef       	ldi	r25, 0xFF	; 255
    3c24:	94 83       	std	Z+4, r25	; 0x04
    3c26:	83 83       	std	Z+3, r24	; 0x03

	/* The list end next and previous pointers point to itself so we know
	when the list is empty. */
	pxList->xListEnd.pxNext = ( xListItem * ) &( pxList->xListEnd );
    3c28:	89 81       	ldd	r24, Y+1	; 0x01
    3c2a:	9a 81       	ldd	r25, Y+2	; 0x02
    3c2c:	03 96       	adiw	r24, 0x03	; 3
    3c2e:	e9 81       	ldd	r30, Y+1	; 0x01
    3c30:	fa 81       	ldd	r31, Y+2	; 0x02
    3c32:	96 83       	std	Z+6, r25	; 0x06
    3c34:	85 83       	std	Z+5, r24	; 0x05
	pxList->xListEnd.pxPrevious = ( xListItem * ) &( pxList->xListEnd );
    3c36:	89 81       	ldd	r24, Y+1	; 0x01
    3c38:	9a 81       	ldd	r25, Y+2	; 0x02
    3c3a:	03 96       	adiw	r24, 0x03	; 3
    3c3c:	e9 81       	ldd	r30, Y+1	; 0x01
    3c3e:	fa 81       	ldd	r31, Y+2	; 0x02
    3c40:	90 87       	std	Z+8, r25	; 0x08
    3c42:	87 83       	std	Z+7, r24	; 0x07

	pxList->uxNumberOfItems = ( unsigned portBASE_TYPE ) 0U;
    3c44:	e9 81       	ldd	r30, Y+1	; 0x01
    3c46:	fa 81       	ldd	r31, Y+2	; 0x02
    3c48:	10 82       	st	Z, r1
}
    3c4a:	0f 90       	pop	r0
    3c4c:	0f 90       	pop	r0
    3c4e:	cf 91       	pop	r28
    3c50:	df 91       	pop	r29
    3c52:	08 95       	ret

00003c54 <vListInitialiseItem>:
/*-----------------------------------------------------------*/

void vListInitialiseItem( xListItem *pxItem )
{
    3c54:	df 93       	push	r29
    3c56:	cf 93       	push	r28
    3c58:	00 d0       	rcall	.+0      	; 0x3c5a <vListInitialiseItem+0x6>
    3c5a:	cd b7       	in	r28, 0x3d	; 61
    3c5c:	de b7       	in	r29, 0x3e	; 62
    3c5e:	9a 83       	std	Y+2, r25	; 0x02
    3c60:	89 83       	std	Y+1, r24	; 0x01
	/* Make sure the list item is not recorded as being on a list. */
	pxItem->pvContainer = NULL;
    3c62:	e9 81       	ldd	r30, Y+1	; 0x01
    3c64:	fa 81       	ldd	r31, Y+2	; 0x02
    3c66:	11 86       	std	Z+9, r1	; 0x09
    3c68:	10 86       	std	Z+8, r1	; 0x08
}
    3c6a:	0f 90       	pop	r0
    3c6c:	0f 90       	pop	r0
    3c6e:	cf 91       	pop	r28
    3c70:	df 91       	pop	r29
    3c72:	08 95       	ret

00003c74 <vListInsertEnd>:
/*-----------------------------------------------------------*/

void vListInsertEnd( xList *pxList, xListItem *pxNewListItem )
{
    3c74:	df 93       	push	r29
    3c76:	cf 93       	push	r28
    3c78:	00 d0       	rcall	.+0      	; 0x3c7a <vListInsertEnd+0x6>
    3c7a:	00 d0       	rcall	.+0      	; 0x3c7c <vListInsertEnd+0x8>
    3c7c:	00 d0       	rcall	.+0      	; 0x3c7e <vListInsertEnd+0xa>
    3c7e:	cd b7       	in	r28, 0x3d	; 61
    3c80:	de b7       	in	r29, 0x3e	; 62
    3c82:	9c 83       	std	Y+4, r25	; 0x04
    3c84:	8b 83       	std	Y+3, r24	; 0x03
    3c86:	7e 83       	std	Y+6, r23	; 0x06
    3c88:	6d 83       	std	Y+5, r22	; 0x05

	/* Insert a new list item into pxList, but rather than sort the list,
	makes the new list item the last item to be removed by a call to
	pvListGetOwnerOfNextEntry.  This means it has to be the item pointed to by
	the pxIndex member. */
	pxIndex = pxList->pxIndex;
    3c8a:	eb 81       	ldd	r30, Y+3	; 0x03
    3c8c:	fc 81       	ldd	r31, Y+4	; 0x04
    3c8e:	81 81       	ldd	r24, Z+1	; 0x01
    3c90:	92 81       	ldd	r25, Z+2	; 0x02
    3c92:	9a 83       	std	Y+2, r25	; 0x02
    3c94:	89 83       	std	Y+1, r24	; 0x01

	pxNewListItem->pxNext = pxIndex->pxNext;
    3c96:	e9 81       	ldd	r30, Y+1	; 0x01
    3c98:	fa 81       	ldd	r31, Y+2	; 0x02
    3c9a:	82 81       	ldd	r24, Z+2	; 0x02
    3c9c:	93 81       	ldd	r25, Z+3	; 0x03
    3c9e:	ed 81       	ldd	r30, Y+5	; 0x05
    3ca0:	fe 81       	ldd	r31, Y+6	; 0x06
    3ca2:	93 83       	std	Z+3, r25	; 0x03
    3ca4:	82 83       	std	Z+2, r24	; 0x02
	pxNewListItem->pxPrevious = pxList->pxIndex;
    3ca6:	eb 81       	ldd	r30, Y+3	; 0x03
    3ca8:	fc 81       	ldd	r31, Y+4	; 0x04
    3caa:	81 81       	ldd	r24, Z+1	; 0x01
    3cac:	92 81       	ldd	r25, Z+2	; 0x02
    3cae:	ed 81       	ldd	r30, Y+5	; 0x05
    3cb0:	fe 81       	ldd	r31, Y+6	; 0x06
    3cb2:	95 83       	std	Z+5, r25	; 0x05
    3cb4:	84 83       	std	Z+4, r24	; 0x04
	pxIndex->pxNext->pxPrevious = ( volatile xListItem * ) pxNewListItem;
    3cb6:	e9 81       	ldd	r30, Y+1	; 0x01
    3cb8:	fa 81       	ldd	r31, Y+2	; 0x02
    3cba:	02 80       	ldd	r0, Z+2	; 0x02
    3cbc:	f3 81       	ldd	r31, Z+3	; 0x03
    3cbe:	e0 2d       	mov	r30, r0
    3cc0:	8d 81       	ldd	r24, Y+5	; 0x05
    3cc2:	9e 81       	ldd	r25, Y+6	; 0x06
    3cc4:	95 83       	std	Z+5, r25	; 0x05
    3cc6:	84 83       	std	Z+4, r24	; 0x04
	pxIndex->pxNext = ( volatile xListItem * ) pxNewListItem;
    3cc8:	8d 81       	ldd	r24, Y+5	; 0x05
    3cca:	9e 81       	ldd	r25, Y+6	; 0x06
    3ccc:	e9 81       	ldd	r30, Y+1	; 0x01
    3cce:	fa 81       	ldd	r31, Y+2	; 0x02
    3cd0:	93 83       	std	Z+3, r25	; 0x03
    3cd2:	82 83       	std	Z+2, r24	; 0x02
	pxList->pxIndex = ( volatile xListItem * ) pxNewListItem;
    3cd4:	8d 81       	ldd	r24, Y+5	; 0x05
    3cd6:	9e 81       	ldd	r25, Y+6	; 0x06
    3cd8:	eb 81       	ldd	r30, Y+3	; 0x03
    3cda:	fc 81       	ldd	r31, Y+4	; 0x04
    3cdc:	92 83       	std	Z+2, r25	; 0x02
    3cde:	81 83       	std	Z+1, r24	; 0x01

	/* Remember which list the item is in. */
	pxNewListItem->pvContainer = ( void * ) pxList;
    3ce0:	ed 81       	ldd	r30, Y+5	; 0x05
    3ce2:	fe 81       	ldd	r31, Y+6	; 0x06
    3ce4:	8b 81       	ldd	r24, Y+3	; 0x03
    3ce6:	9c 81       	ldd	r25, Y+4	; 0x04
    3ce8:	91 87       	std	Z+9, r25	; 0x09
    3cea:	80 87       	std	Z+8, r24	; 0x08

	( pxList->uxNumberOfItems )++;
    3cec:	eb 81       	ldd	r30, Y+3	; 0x03
    3cee:	fc 81       	ldd	r31, Y+4	; 0x04
    3cf0:	80 81       	ld	r24, Z
    3cf2:	8f 5f       	subi	r24, 0xFF	; 255
    3cf4:	eb 81       	ldd	r30, Y+3	; 0x03
    3cf6:	fc 81       	ldd	r31, Y+4	; 0x04
    3cf8:	80 83       	st	Z, r24
}
    3cfa:	26 96       	adiw	r28, 0x06	; 6
    3cfc:	0f b6       	in	r0, 0x3f	; 63
    3cfe:	f8 94       	cli
    3d00:	de bf       	out	0x3e, r29	; 62
    3d02:	0f be       	out	0x3f, r0	; 63
    3d04:	cd bf       	out	0x3d, r28	; 61
    3d06:	cf 91       	pop	r28
    3d08:	df 91       	pop	r29
    3d0a:	08 95       	ret

00003d0c <vListInsert>:
/*-----------------------------------------------------------*/

void vListInsert( xList *pxList, xListItem *pxNewListItem )
{
    3d0c:	df 93       	push	r29
    3d0e:	cf 93       	push	r28
    3d10:	cd b7       	in	r28, 0x3d	; 61
    3d12:	de b7       	in	r29, 0x3e	; 62
    3d14:	28 97       	sbiw	r28, 0x08	; 8
    3d16:	0f b6       	in	r0, 0x3f	; 63
    3d18:	f8 94       	cli
    3d1a:	de bf       	out	0x3e, r29	; 62
    3d1c:	0f be       	out	0x3f, r0	; 63
    3d1e:	cd bf       	out	0x3d, r28	; 61
    3d20:	9e 83       	std	Y+6, r25	; 0x06
    3d22:	8d 83       	std	Y+5, r24	; 0x05
    3d24:	78 87       	std	Y+8, r23	; 0x08
    3d26:	6f 83       	std	Y+7, r22	; 0x07
volatile xListItem *pxIterator;
portTickType xValueOfInsertion;

	/* Insert the new list item into the list, sorted in ulListItem order. */
	xValueOfInsertion = pxNewListItem->xItemValue;
    3d28:	ef 81       	ldd	r30, Y+7	; 0x07
    3d2a:	f8 85       	ldd	r31, Y+8	; 0x08
    3d2c:	80 81       	ld	r24, Z
    3d2e:	91 81       	ldd	r25, Z+1	; 0x01
    3d30:	9a 83       	std	Y+2, r25	; 0x02
    3d32:	89 83       	std	Y+1, r24	; 0x01
	are stored in ready lists (all of which have the same ulListItem value)
	get an equal share of the CPU.  However, if the xItemValue is the same as
	the back marker the iteration loop below will not end.  This means we need
	to guard against this by checking the value first and modifying the
	algorithm slightly if necessary. */
	if( xValueOfInsertion == portMAX_DELAY )
    3d34:	89 81       	ldd	r24, Y+1	; 0x01
    3d36:	9a 81       	ldd	r25, Y+2	; 0x02
    3d38:	2f ef       	ldi	r18, 0xFF	; 255
    3d3a:	8f 3f       	cpi	r24, 0xFF	; 255
    3d3c:	92 07       	cpc	r25, r18
    3d3e:	39 f4       	brne	.+14     	; 0x3d4e <vListInsert+0x42>
	{
		pxIterator = pxList->xListEnd.pxPrevious;
    3d40:	ed 81       	ldd	r30, Y+5	; 0x05
    3d42:	fe 81       	ldd	r31, Y+6	; 0x06
    3d44:	87 81       	ldd	r24, Z+7	; 0x07
    3d46:	90 85       	ldd	r25, Z+8	; 0x08
    3d48:	9c 83       	std	Y+4, r25	; 0x04
    3d4a:	8b 83       	std	Y+3, r24	; 0x03
    3d4c:	18 c0       	rjmp	.+48     	; 0x3d7e <vListInsert+0x72>
			   before the scheduler has been started (are interrupts firing
			   before vTaskStartScheduler() has been called?).
		See http://www.freertos.org/FAQHelp.html for more tips.
		**********************************************************************/
		
		for( pxIterator = ( xListItem * ) &( pxList->xListEnd ); pxIterator->pxNext->xItemValue <= xValueOfInsertion; pxIterator = pxIterator->pxNext )
    3d4e:	8d 81       	ldd	r24, Y+5	; 0x05
    3d50:	9e 81       	ldd	r25, Y+6	; 0x06
    3d52:	03 96       	adiw	r24, 0x03	; 3
    3d54:	9c 83       	std	Y+4, r25	; 0x04
    3d56:	8b 83       	std	Y+3, r24	; 0x03
    3d58:	06 c0       	rjmp	.+12     	; 0x3d66 <vListInsert+0x5a>
    3d5a:	eb 81       	ldd	r30, Y+3	; 0x03
    3d5c:	fc 81       	ldd	r31, Y+4	; 0x04
    3d5e:	82 81       	ldd	r24, Z+2	; 0x02
    3d60:	93 81       	ldd	r25, Z+3	; 0x03
    3d62:	9c 83       	std	Y+4, r25	; 0x04
    3d64:	8b 83       	std	Y+3, r24	; 0x03
    3d66:	eb 81       	ldd	r30, Y+3	; 0x03
    3d68:	fc 81       	ldd	r31, Y+4	; 0x04
    3d6a:	02 80       	ldd	r0, Z+2	; 0x02
    3d6c:	f3 81       	ldd	r31, Z+3	; 0x03
    3d6e:	e0 2d       	mov	r30, r0
    3d70:	20 81       	ld	r18, Z
    3d72:	31 81       	ldd	r19, Z+1	; 0x01
    3d74:	89 81       	ldd	r24, Y+1	; 0x01
    3d76:	9a 81       	ldd	r25, Y+2	; 0x02
    3d78:	82 17       	cp	r24, r18
    3d7a:	93 07       	cpc	r25, r19
    3d7c:	70 f7       	brcc	.-36     	; 0x3d5a <vListInsert+0x4e>
			/* There is nothing to do here, we are just iterating to the
			wanted insertion position. */
		}
	}

	pxNewListItem->pxNext = pxIterator->pxNext;
    3d7e:	eb 81       	ldd	r30, Y+3	; 0x03
    3d80:	fc 81       	ldd	r31, Y+4	; 0x04
    3d82:	82 81       	ldd	r24, Z+2	; 0x02
    3d84:	93 81       	ldd	r25, Z+3	; 0x03
    3d86:	ef 81       	ldd	r30, Y+7	; 0x07
    3d88:	f8 85       	ldd	r31, Y+8	; 0x08
    3d8a:	93 83       	std	Z+3, r25	; 0x03
    3d8c:	82 83       	std	Z+2, r24	; 0x02
	pxNewListItem->pxNext->pxPrevious = ( volatile xListItem * ) pxNewListItem;
    3d8e:	ef 81       	ldd	r30, Y+7	; 0x07
    3d90:	f8 85       	ldd	r31, Y+8	; 0x08
    3d92:	02 80       	ldd	r0, Z+2	; 0x02
    3d94:	f3 81       	ldd	r31, Z+3	; 0x03
    3d96:	e0 2d       	mov	r30, r0
    3d98:	8f 81       	ldd	r24, Y+7	; 0x07
    3d9a:	98 85       	ldd	r25, Y+8	; 0x08
    3d9c:	95 83       	std	Z+5, r25	; 0x05
    3d9e:	84 83       	std	Z+4, r24	; 0x04
	pxNewListItem->pxPrevious = pxIterator;
    3da0:	ef 81       	ldd	r30, Y+7	; 0x07
    3da2:	f8 85       	ldd	r31, Y+8	; 0x08
    3da4:	8b 81       	ldd	r24, Y+3	; 0x03
    3da6:	9c 81       	ldd	r25, Y+4	; 0x04
    3da8:	95 83       	std	Z+5, r25	; 0x05
    3daa:	84 83       	std	Z+4, r24	; 0x04
	pxIterator->pxNext = ( volatile xListItem * ) pxNewListItem;
    3dac:	8f 81       	ldd	r24, Y+7	; 0x07
    3dae:	98 85       	ldd	r25, Y+8	; 0x08
    3db0:	eb 81       	ldd	r30, Y+3	; 0x03
    3db2:	fc 81       	ldd	r31, Y+4	; 0x04
    3db4:	93 83       	std	Z+3, r25	; 0x03
    3db6:	82 83       	std	Z+2, r24	; 0x02

	/* Remember which list the item is in.  This allows fast removal of the
	item later. */
	pxNewListItem->pvContainer = ( void * ) pxList;
    3db8:	ef 81       	ldd	r30, Y+7	; 0x07
    3dba:	f8 85       	ldd	r31, Y+8	; 0x08
    3dbc:	8d 81       	ldd	r24, Y+5	; 0x05
    3dbe:	9e 81       	ldd	r25, Y+6	; 0x06
    3dc0:	91 87       	std	Z+9, r25	; 0x09
    3dc2:	80 87       	std	Z+8, r24	; 0x08

	( pxList->uxNumberOfItems )++;
    3dc4:	ed 81       	ldd	r30, Y+5	; 0x05
    3dc6:	fe 81       	ldd	r31, Y+6	; 0x06
    3dc8:	80 81       	ld	r24, Z
    3dca:	8f 5f       	subi	r24, 0xFF	; 255
    3dcc:	ed 81       	ldd	r30, Y+5	; 0x05
    3dce:	fe 81       	ldd	r31, Y+6	; 0x06
    3dd0:	80 83       	st	Z, r24
}
    3dd2:	28 96       	adiw	r28, 0x08	; 8
    3dd4:	0f b6       	in	r0, 0x3f	; 63
    3dd6:	f8 94       	cli
    3dd8:	de bf       	out	0x3e, r29	; 62
    3dda:	0f be       	out	0x3f, r0	; 63
    3ddc:	cd bf       	out	0x3d, r28	; 61
    3dde:	cf 91       	pop	r28
    3de0:	df 91       	pop	r29
    3de2:	08 95       	ret

00003de4 <vListRemove>:
/*-----------------------------------------------------------*/

void vListRemove( xListItem *pxItemToRemove )
{
    3de4:	df 93       	push	r29
    3de6:	cf 93       	push	r28
    3de8:	00 d0       	rcall	.+0      	; 0x3dea <vListRemove+0x6>
    3dea:	00 d0       	rcall	.+0      	; 0x3dec <vListRemove+0x8>
    3dec:	cd b7       	in	r28, 0x3d	; 61
    3dee:	de b7       	in	r29, 0x3e	; 62
    3df0:	9c 83       	std	Y+4, r25	; 0x04
    3df2:	8b 83       	std	Y+3, r24	; 0x03
xList * pxList;

	pxItemToRemove->pxNext->pxPrevious = pxItemToRemove->pxPrevious;
    3df4:	eb 81       	ldd	r30, Y+3	; 0x03
    3df6:	fc 81       	ldd	r31, Y+4	; 0x04
    3df8:	a2 81       	ldd	r26, Z+2	; 0x02
    3dfa:	b3 81       	ldd	r27, Z+3	; 0x03
    3dfc:	eb 81       	ldd	r30, Y+3	; 0x03
    3dfe:	fc 81       	ldd	r31, Y+4	; 0x04
    3e00:	84 81       	ldd	r24, Z+4	; 0x04
    3e02:	95 81       	ldd	r25, Z+5	; 0x05
    3e04:	15 96       	adiw	r26, 0x05	; 5
    3e06:	9c 93       	st	X, r25
    3e08:	8e 93       	st	-X, r24
    3e0a:	14 97       	sbiw	r26, 0x04	; 4
	pxItemToRemove->pxPrevious->pxNext = pxItemToRemove->pxNext;
    3e0c:	eb 81       	ldd	r30, Y+3	; 0x03
    3e0e:	fc 81       	ldd	r31, Y+4	; 0x04
    3e10:	a4 81       	ldd	r26, Z+4	; 0x04
    3e12:	b5 81       	ldd	r27, Z+5	; 0x05
    3e14:	eb 81       	ldd	r30, Y+3	; 0x03
    3e16:	fc 81       	ldd	r31, Y+4	; 0x04
    3e18:	82 81       	ldd	r24, Z+2	; 0x02
    3e1a:	93 81       	ldd	r25, Z+3	; 0x03
    3e1c:	13 96       	adiw	r26, 0x03	; 3
    3e1e:	9c 93       	st	X, r25
    3e20:	8e 93       	st	-X, r24
    3e22:	12 97       	sbiw	r26, 0x02	; 2
	
	/* The list item knows which list it is in.  Obtain the list from the list
	item. */
	pxList = ( xList * ) pxItemToRemove->pvContainer;
    3e24:	eb 81       	ldd	r30, Y+3	; 0x03
    3e26:	fc 81       	ldd	r31, Y+4	; 0x04
    3e28:	80 85       	ldd	r24, Z+8	; 0x08
    3e2a:	91 85       	ldd	r25, Z+9	; 0x09
    3e2c:	9a 83       	std	Y+2, r25	; 0x02
    3e2e:	89 83       	std	Y+1, r24	; 0x01

	/* Make sure the index is left pointing to a valid item. */
	if( pxList->pxIndex == pxItemToRemove )
    3e30:	e9 81       	ldd	r30, Y+1	; 0x01
    3e32:	fa 81       	ldd	r31, Y+2	; 0x02
    3e34:	21 81       	ldd	r18, Z+1	; 0x01
    3e36:	32 81       	ldd	r19, Z+2	; 0x02
    3e38:	8b 81       	ldd	r24, Y+3	; 0x03
    3e3a:	9c 81       	ldd	r25, Y+4	; 0x04
    3e3c:	28 17       	cp	r18, r24
    3e3e:	39 07       	cpc	r19, r25
    3e40:	41 f4       	brne	.+16     	; 0x3e52 <vListRemove+0x6e>
	{
		pxList->pxIndex = pxItemToRemove->pxPrevious;
    3e42:	eb 81       	ldd	r30, Y+3	; 0x03
    3e44:	fc 81       	ldd	r31, Y+4	; 0x04
    3e46:	84 81       	ldd	r24, Z+4	; 0x04
    3e48:	95 81       	ldd	r25, Z+5	; 0x05
    3e4a:	e9 81       	ldd	r30, Y+1	; 0x01
    3e4c:	fa 81       	ldd	r31, Y+2	; 0x02
    3e4e:	92 83       	std	Z+2, r25	; 0x02
    3e50:	81 83       	std	Z+1, r24	; 0x01
	}

	pxItemToRemove->pvContainer = NULL;
    3e52:	eb 81       	ldd	r30, Y+3	; 0x03
    3e54:	fc 81       	ldd	r31, Y+4	; 0x04
    3e56:	11 86       	std	Z+9, r1	; 0x09
    3e58:	10 86       	std	Z+8, r1	; 0x08
	( pxList->uxNumberOfItems )--;
    3e5a:	e9 81       	ldd	r30, Y+1	; 0x01
    3e5c:	fa 81       	ldd	r31, Y+2	; 0x02
    3e5e:	80 81       	ld	r24, Z
    3e60:	81 50       	subi	r24, 0x01	; 1
    3e62:	e9 81       	ldd	r30, Y+1	; 0x01
    3e64:	fa 81       	ldd	r31, Y+2	; 0x02
    3e66:	80 83       	st	Z, r24
}
    3e68:	0f 90       	pop	r0
    3e6a:	0f 90       	pop	r0
    3e6c:	0f 90       	pop	r0
    3e6e:	0f 90       	pop	r0
    3e70:	cf 91       	pop	r28
    3e72:	df 91       	pop	r29
    3e74:	08 95       	ret

00003e76 <pxPortInitialiseStack>:

/* 
 * See header file for description. 
 */
portSTACK_TYPE *pxPortInitialiseStack( portSTACK_TYPE *pxTopOfStack, pdTASK_CODE pxCode, void *pvParameters )
{
    3e76:	df 93       	push	r29
    3e78:	cf 93       	push	r28
    3e7a:	cd b7       	in	r28, 0x3d	; 61
    3e7c:	de b7       	in	r29, 0x3e	; 62
    3e7e:	28 97       	sbiw	r28, 0x08	; 8
    3e80:	0f b6       	in	r0, 0x3f	; 63
    3e82:	f8 94       	cli
    3e84:	de bf       	out	0x3e, r29	; 62
    3e86:	0f be       	out	0x3f, r0	; 63
    3e88:	cd bf       	out	0x3d, r28	; 61
    3e8a:	9c 83       	std	Y+4, r25	; 0x04
    3e8c:	8b 83       	std	Y+3, r24	; 0x03
    3e8e:	7e 83       	std	Y+6, r23	; 0x06
    3e90:	6d 83       	std	Y+5, r22	; 0x05
    3e92:	58 87       	std	Y+8, r21	; 0x08
    3e94:	4f 83       	std	Y+7, r20	; 0x07
unsigned short usAddress;

	/* Place a few bytes of known values on the bottom of the stack. 
	This is just useful for debugging. */

	*pxTopOfStack = 0x11;
    3e96:	eb 81       	ldd	r30, Y+3	; 0x03
    3e98:	fc 81       	ldd	r31, Y+4	; 0x04
    3e9a:	81 e1       	ldi	r24, 0x11	; 17
    3e9c:	80 83       	st	Z, r24
	pxTopOfStack--;
    3e9e:	8b 81       	ldd	r24, Y+3	; 0x03
    3ea0:	9c 81       	ldd	r25, Y+4	; 0x04
    3ea2:	01 97       	sbiw	r24, 0x01	; 1
    3ea4:	9c 83       	std	Y+4, r25	; 0x04
    3ea6:	8b 83       	std	Y+3, r24	; 0x03
	*pxTopOfStack = 0x22;
    3ea8:	eb 81       	ldd	r30, Y+3	; 0x03
    3eaa:	fc 81       	ldd	r31, Y+4	; 0x04
    3eac:	82 e2       	ldi	r24, 0x22	; 34
    3eae:	80 83       	st	Z, r24
	pxTopOfStack--;
    3eb0:	8b 81       	ldd	r24, Y+3	; 0x03
    3eb2:	9c 81       	ldd	r25, Y+4	; 0x04
    3eb4:	01 97       	sbiw	r24, 0x01	; 1
    3eb6:	9c 83       	std	Y+4, r25	; 0x04
    3eb8:	8b 83       	std	Y+3, r24	; 0x03
	*pxTopOfStack = 0x33;
    3eba:	eb 81       	ldd	r30, Y+3	; 0x03
    3ebc:	fc 81       	ldd	r31, Y+4	; 0x04
    3ebe:	83 e3       	ldi	r24, 0x33	; 51
    3ec0:	80 83       	st	Z, r24
	pxTopOfStack--;
    3ec2:	8b 81       	ldd	r24, Y+3	; 0x03
    3ec4:	9c 81       	ldd	r25, Y+4	; 0x04
    3ec6:	01 97       	sbiw	r24, 0x01	; 1
    3ec8:	9c 83       	std	Y+4, r25	; 0x04
    3eca:	8b 83       	std	Y+3, r24	; 0x03

	/*lint -e950 -e611 -e923 Lint doesn't like this much - but nothing I can do about it. */

	/* The start of the task code will be popped off the stack last, so place
	it on first. */
	usAddress = ( unsigned short ) pxCode;
    3ecc:	8d 81       	ldd	r24, Y+5	; 0x05
    3ece:	9e 81       	ldd	r25, Y+6	; 0x06
    3ed0:	9a 83       	std	Y+2, r25	; 0x02
    3ed2:	89 83       	std	Y+1, r24	; 0x01
	*pxTopOfStack = ( portSTACK_TYPE ) ( usAddress & ( unsigned short ) 0x00ff );
    3ed4:	89 81       	ldd	r24, Y+1	; 0x01
    3ed6:	eb 81       	ldd	r30, Y+3	; 0x03
    3ed8:	fc 81       	ldd	r31, Y+4	; 0x04
    3eda:	80 83       	st	Z, r24
	pxTopOfStack--;
    3edc:	8b 81       	ldd	r24, Y+3	; 0x03
    3ede:	9c 81       	ldd	r25, Y+4	; 0x04
    3ee0:	01 97       	sbiw	r24, 0x01	; 1
    3ee2:	9c 83       	std	Y+4, r25	; 0x04
    3ee4:	8b 83       	std	Y+3, r24	; 0x03

	usAddress >>= 8;
    3ee6:	89 81       	ldd	r24, Y+1	; 0x01
    3ee8:	9a 81       	ldd	r25, Y+2	; 0x02
    3eea:	89 2f       	mov	r24, r25
    3eec:	99 27       	eor	r25, r25
    3eee:	9a 83       	std	Y+2, r25	; 0x02
    3ef0:	89 83       	std	Y+1, r24	; 0x01
	*pxTopOfStack = ( portSTACK_TYPE ) ( usAddress & ( unsigned short ) 0x00ff );
    3ef2:	89 81       	ldd	r24, Y+1	; 0x01
    3ef4:	eb 81       	ldd	r30, Y+3	; 0x03
    3ef6:	fc 81       	ldd	r31, Y+4	; 0x04
    3ef8:	80 83       	st	Z, r24
	pxTopOfStack--;
    3efa:	8b 81       	ldd	r24, Y+3	; 0x03
    3efc:	9c 81       	ldd	r25, Y+4	; 0x04
    3efe:	01 97       	sbiw	r24, 0x01	; 1
    3f00:	9c 83       	std	Y+4, r25	; 0x04
    3f02:	8b 83       	std	Y+3, r24	; 0x03

	/* Next simulate the stack as if after a call to portSAVE_CONTEXT().  
	portSAVE_CONTEXT places the flags on the stack immediately after r0
	to ensure the interrupts get disabled as soon as possible, and so ensuring
	the stack use is minimal should a context switch interrupt occur. */
	*pxTopOfStack = ( portSTACK_TYPE ) 0x00;	/* R0 */
    3f04:	eb 81       	ldd	r30, Y+3	; 0x03
    3f06:	fc 81       	ldd	r31, Y+4	; 0x04
    3f08:	10 82       	st	Z, r1
	pxTopOfStack--;
    3f0a:	8b 81       	ldd	r24, Y+3	; 0x03
    3f0c:	9c 81       	ldd	r25, Y+4	; 0x04
    3f0e:	01 97       	sbiw	r24, 0x01	; 1
    3f10:	9c 83       	std	Y+4, r25	; 0x04
    3f12:	8b 83       	std	Y+3, r24	; 0x03
	*pxTopOfStack = portFLAGS_INT_ENABLED;
    3f14:	eb 81       	ldd	r30, Y+3	; 0x03
    3f16:	fc 81       	ldd	r31, Y+4	; 0x04
    3f18:	80 e8       	ldi	r24, 0x80	; 128
    3f1a:	80 83       	st	Z, r24
	pxTopOfStack--;
    3f1c:	8b 81       	ldd	r24, Y+3	; 0x03
    3f1e:	9c 81       	ldd	r25, Y+4	; 0x04
    3f20:	01 97       	sbiw	r24, 0x01	; 1
    3f22:	9c 83       	std	Y+4, r25	; 0x04
    3f24:	8b 83       	std	Y+3, r24	; 0x03


	/* Now the remaining registers.   The compiler expects R1 to be 0. */
	*pxTopOfStack = ( portSTACK_TYPE ) 0x00;	/* R1 */
    3f26:	eb 81       	ldd	r30, Y+3	; 0x03
    3f28:	fc 81       	ldd	r31, Y+4	; 0x04
    3f2a:	10 82       	st	Z, r1
	pxTopOfStack--;
    3f2c:	8b 81       	ldd	r24, Y+3	; 0x03
    3f2e:	9c 81       	ldd	r25, Y+4	; 0x04
    3f30:	01 97       	sbiw	r24, 0x01	; 1
    3f32:	9c 83       	std	Y+4, r25	; 0x04
    3f34:	8b 83       	std	Y+3, r24	; 0x03
	*pxTopOfStack = ( portSTACK_TYPE ) 0x02;	/* R2 */
    3f36:	eb 81       	ldd	r30, Y+3	; 0x03
    3f38:	fc 81       	ldd	r31, Y+4	; 0x04
    3f3a:	82 e0       	ldi	r24, 0x02	; 2
    3f3c:	80 83       	st	Z, r24
	pxTopOfStack--;
    3f3e:	8b 81       	ldd	r24, Y+3	; 0x03
    3f40:	9c 81       	ldd	r25, Y+4	; 0x04
    3f42:	01 97       	sbiw	r24, 0x01	; 1
    3f44:	9c 83       	std	Y+4, r25	; 0x04
    3f46:	8b 83       	std	Y+3, r24	; 0x03
	*pxTopOfStack = ( portSTACK_TYPE ) 0x03;	/* R3 */
    3f48:	eb 81       	ldd	r30, Y+3	; 0x03
    3f4a:	fc 81       	ldd	r31, Y+4	; 0x04
    3f4c:	83 e0       	ldi	r24, 0x03	; 3
    3f4e:	80 83       	st	Z, r24
	pxTopOfStack--;
    3f50:	8b 81       	ldd	r24, Y+3	; 0x03
    3f52:	9c 81       	ldd	r25, Y+4	; 0x04
    3f54:	01 97       	sbiw	r24, 0x01	; 1
    3f56:	9c 83       	std	Y+4, r25	; 0x04
    3f58:	8b 83       	std	Y+3, r24	; 0x03
	*pxTopOfStack = ( portSTACK_TYPE ) 0x04;	/* R4 */
    3f5a:	eb 81       	ldd	r30, Y+3	; 0x03
    3f5c:	fc 81       	ldd	r31, Y+4	; 0x04
    3f5e:	84 e0       	ldi	r24, 0x04	; 4
    3f60:	80 83       	st	Z, r24
	pxTopOfStack--;
    3f62:	8b 81       	ldd	r24, Y+3	; 0x03
    3f64:	9c 81       	ldd	r25, Y+4	; 0x04
    3f66:	01 97       	sbiw	r24, 0x01	; 1
    3f68:	9c 83       	std	Y+4, r25	; 0x04
    3f6a:	8b 83       	std	Y+3, r24	; 0x03
	*pxTopOfStack = ( portSTACK_TYPE ) 0x05;	/* R5 */
    3f6c:	eb 81       	ldd	r30, Y+3	; 0x03
    3f6e:	fc 81       	ldd	r31, Y+4	; 0x04
    3f70:	85 e0       	ldi	r24, 0x05	; 5
    3f72:	80 83       	st	Z, r24
	pxTopOfStack--;
    3f74:	8b 81       	ldd	r24, Y+3	; 0x03
    3f76:	9c 81       	ldd	r25, Y+4	; 0x04
    3f78:	01 97       	sbiw	r24, 0x01	; 1
    3f7a:	9c 83       	std	Y+4, r25	; 0x04
    3f7c:	8b 83       	std	Y+3, r24	; 0x03
	*pxTopOfStack = ( portSTACK_TYPE ) 0x06;	/* R6 */
    3f7e:	eb 81       	ldd	r30, Y+3	; 0x03
    3f80:	fc 81       	ldd	r31, Y+4	; 0x04
    3f82:	86 e0       	ldi	r24, 0x06	; 6
    3f84:	80 83       	st	Z, r24
	pxTopOfStack--;
    3f86:	8b 81       	ldd	r24, Y+3	; 0x03
    3f88:	9c 81       	ldd	r25, Y+4	; 0x04
    3f8a:	01 97       	sbiw	r24, 0x01	; 1
    3f8c:	9c 83       	std	Y+4, r25	; 0x04
    3f8e:	8b 83       	std	Y+3, r24	; 0x03
	*pxTopOfStack = ( portSTACK_TYPE ) 0x07;	/* R7 */
    3f90:	eb 81       	ldd	r30, Y+3	; 0x03
    3f92:	fc 81       	ldd	r31, Y+4	; 0x04
    3f94:	87 e0       	ldi	r24, 0x07	; 7
    3f96:	80 83       	st	Z, r24
	pxTopOfStack--;
    3f98:	8b 81       	ldd	r24, Y+3	; 0x03
    3f9a:	9c 81       	ldd	r25, Y+4	; 0x04
    3f9c:	01 97       	sbiw	r24, 0x01	; 1
    3f9e:	9c 83       	std	Y+4, r25	; 0x04
    3fa0:	8b 83       	std	Y+3, r24	; 0x03
	*pxTopOfStack = ( portSTACK_TYPE ) 0x08;	/* R8 */
    3fa2:	eb 81       	ldd	r30, Y+3	; 0x03
    3fa4:	fc 81       	ldd	r31, Y+4	; 0x04
    3fa6:	88 e0       	ldi	r24, 0x08	; 8
    3fa8:	80 83       	st	Z, r24
	pxTopOfStack--;
    3faa:	8b 81       	ldd	r24, Y+3	; 0x03
    3fac:	9c 81       	ldd	r25, Y+4	; 0x04
    3fae:	01 97       	sbiw	r24, 0x01	; 1
    3fb0:	9c 83       	std	Y+4, r25	; 0x04
    3fb2:	8b 83       	std	Y+3, r24	; 0x03
	*pxTopOfStack = ( portSTACK_TYPE ) 0x09;	/* R9 */
    3fb4:	eb 81       	ldd	r30, Y+3	; 0x03
    3fb6:	fc 81       	ldd	r31, Y+4	; 0x04
    3fb8:	89 e0       	ldi	r24, 0x09	; 9
    3fba:	80 83       	st	Z, r24
	pxTopOfStack--;
    3fbc:	8b 81       	ldd	r24, Y+3	; 0x03
    3fbe:	9c 81       	ldd	r25, Y+4	; 0x04
    3fc0:	01 97       	sbiw	r24, 0x01	; 1
    3fc2:	9c 83       	std	Y+4, r25	; 0x04
    3fc4:	8b 83       	std	Y+3, r24	; 0x03
	*pxTopOfStack = ( portSTACK_TYPE ) 0x10;	/* R10 */
    3fc6:	eb 81       	ldd	r30, Y+3	; 0x03
    3fc8:	fc 81       	ldd	r31, Y+4	; 0x04
    3fca:	80 e1       	ldi	r24, 0x10	; 16
    3fcc:	80 83       	st	Z, r24
	pxTopOfStack--;
    3fce:	8b 81       	ldd	r24, Y+3	; 0x03
    3fd0:	9c 81       	ldd	r25, Y+4	; 0x04
    3fd2:	01 97       	sbiw	r24, 0x01	; 1
    3fd4:	9c 83       	std	Y+4, r25	; 0x04
    3fd6:	8b 83       	std	Y+3, r24	; 0x03
	*pxTopOfStack = ( portSTACK_TYPE ) 0x11;	/* R11 */
    3fd8:	eb 81       	ldd	r30, Y+3	; 0x03
    3fda:	fc 81       	ldd	r31, Y+4	; 0x04
    3fdc:	81 e1       	ldi	r24, 0x11	; 17
    3fde:	80 83       	st	Z, r24
	pxTopOfStack--;
    3fe0:	8b 81       	ldd	r24, Y+3	; 0x03
    3fe2:	9c 81       	ldd	r25, Y+4	; 0x04
    3fe4:	01 97       	sbiw	r24, 0x01	; 1
    3fe6:	9c 83       	std	Y+4, r25	; 0x04
    3fe8:	8b 83       	std	Y+3, r24	; 0x03
	*pxTopOfStack = ( portSTACK_TYPE ) 0x12;	/* R12 */
    3fea:	eb 81       	ldd	r30, Y+3	; 0x03
    3fec:	fc 81       	ldd	r31, Y+4	; 0x04
    3fee:	82 e1       	ldi	r24, 0x12	; 18
    3ff0:	80 83       	st	Z, r24
	pxTopOfStack--;
    3ff2:	8b 81       	ldd	r24, Y+3	; 0x03
    3ff4:	9c 81       	ldd	r25, Y+4	; 0x04
    3ff6:	01 97       	sbiw	r24, 0x01	; 1
    3ff8:	9c 83       	std	Y+4, r25	; 0x04
    3ffa:	8b 83       	std	Y+3, r24	; 0x03
	*pxTopOfStack = ( portSTACK_TYPE ) 0x13;	/* R13 */
    3ffc:	eb 81       	ldd	r30, Y+3	; 0x03
    3ffe:	fc 81       	ldd	r31, Y+4	; 0x04
    4000:	83 e1       	ldi	r24, 0x13	; 19
    4002:	80 83       	st	Z, r24
	pxTopOfStack--;
    4004:	8b 81       	ldd	r24, Y+3	; 0x03
    4006:	9c 81       	ldd	r25, Y+4	; 0x04
    4008:	01 97       	sbiw	r24, 0x01	; 1
    400a:	9c 83       	std	Y+4, r25	; 0x04
    400c:	8b 83       	std	Y+3, r24	; 0x03
	*pxTopOfStack = ( portSTACK_TYPE ) 0x14;	/* R14 */
    400e:	eb 81       	ldd	r30, Y+3	; 0x03
    4010:	fc 81       	ldd	r31, Y+4	; 0x04
    4012:	84 e1       	ldi	r24, 0x14	; 20
    4014:	80 83       	st	Z, r24
	pxTopOfStack--;
    4016:	8b 81       	ldd	r24, Y+3	; 0x03
    4018:	9c 81       	ldd	r25, Y+4	; 0x04
    401a:	01 97       	sbiw	r24, 0x01	; 1
    401c:	9c 83       	std	Y+4, r25	; 0x04
    401e:	8b 83       	std	Y+3, r24	; 0x03
	*pxTopOfStack = ( portSTACK_TYPE ) 0x15;	/* R15 */
    4020:	eb 81       	ldd	r30, Y+3	; 0x03
    4022:	fc 81       	ldd	r31, Y+4	; 0x04
    4024:	85 e1       	ldi	r24, 0x15	; 21
    4026:	80 83       	st	Z, r24
	pxTopOfStack--;
    4028:	8b 81       	ldd	r24, Y+3	; 0x03
    402a:	9c 81       	ldd	r25, Y+4	; 0x04
    402c:	01 97       	sbiw	r24, 0x01	; 1
    402e:	9c 83       	std	Y+4, r25	; 0x04
    4030:	8b 83       	std	Y+3, r24	; 0x03
	*pxTopOfStack = ( portSTACK_TYPE ) 0x16;	/* R16 */
    4032:	eb 81       	ldd	r30, Y+3	; 0x03
    4034:	fc 81       	ldd	r31, Y+4	; 0x04
    4036:	86 e1       	ldi	r24, 0x16	; 22
    4038:	80 83       	st	Z, r24
	pxTopOfStack--;
    403a:	8b 81       	ldd	r24, Y+3	; 0x03
    403c:	9c 81       	ldd	r25, Y+4	; 0x04
    403e:	01 97       	sbiw	r24, 0x01	; 1
    4040:	9c 83       	std	Y+4, r25	; 0x04
    4042:	8b 83       	std	Y+3, r24	; 0x03
	*pxTopOfStack = ( portSTACK_TYPE ) 0x17;	/* R17 */
    4044:	eb 81       	ldd	r30, Y+3	; 0x03
    4046:	fc 81       	ldd	r31, Y+4	; 0x04
    4048:	87 e1       	ldi	r24, 0x17	; 23
    404a:	80 83       	st	Z, r24
	pxTopOfStack--;
    404c:	8b 81       	ldd	r24, Y+3	; 0x03
    404e:	9c 81       	ldd	r25, Y+4	; 0x04
    4050:	01 97       	sbiw	r24, 0x01	; 1
    4052:	9c 83       	std	Y+4, r25	; 0x04
    4054:	8b 83       	std	Y+3, r24	; 0x03
	*pxTopOfStack = ( portSTACK_TYPE ) 0x18;	/* R18 */
    4056:	eb 81       	ldd	r30, Y+3	; 0x03
    4058:	fc 81       	ldd	r31, Y+4	; 0x04
    405a:	88 e1       	ldi	r24, 0x18	; 24
    405c:	80 83       	st	Z, r24
	pxTopOfStack--;
    405e:	8b 81       	ldd	r24, Y+3	; 0x03
    4060:	9c 81       	ldd	r25, Y+4	; 0x04
    4062:	01 97       	sbiw	r24, 0x01	; 1
    4064:	9c 83       	std	Y+4, r25	; 0x04
    4066:	8b 83       	std	Y+3, r24	; 0x03
	*pxTopOfStack = ( portSTACK_TYPE ) 0x19;	/* R19 */
    4068:	eb 81       	ldd	r30, Y+3	; 0x03
    406a:	fc 81       	ldd	r31, Y+4	; 0x04
    406c:	89 e1       	ldi	r24, 0x19	; 25
    406e:	80 83       	st	Z, r24
	pxTopOfStack--;
    4070:	8b 81       	ldd	r24, Y+3	; 0x03
    4072:	9c 81       	ldd	r25, Y+4	; 0x04
    4074:	01 97       	sbiw	r24, 0x01	; 1
    4076:	9c 83       	std	Y+4, r25	; 0x04
    4078:	8b 83       	std	Y+3, r24	; 0x03
	*pxTopOfStack = ( portSTACK_TYPE ) 0x20;	/* R20 */
    407a:	eb 81       	ldd	r30, Y+3	; 0x03
    407c:	fc 81       	ldd	r31, Y+4	; 0x04
    407e:	80 e2       	ldi	r24, 0x20	; 32
    4080:	80 83       	st	Z, r24
	pxTopOfStack--;
    4082:	8b 81       	ldd	r24, Y+3	; 0x03
    4084:	9c 81       	ldd	r25, Y+4	; 0x04
    4086:	01 97       	sbiw	r24, 0x01	; 1
    4088:	9c 83       	std	Y+4, r25	; 0x04
    408a:	8b 83       	std	Y+3, r24	; 0x03
	*pxTopOfStack = ( portSTACK_TYPE ) 0x21;	/* R21 */
    408c:	eb 81       	ldd	r30, Y+3	; 0x03
    408e:	fc 81       	ldd	r31, Y+4	; 0x04
    4090:	81 e2       	ldi	r24, 0x21	; 33
    4092:	80 83       	st	Z, r24
	pxTopOfStack--;
    4094:	8b 81       	ldd	r24, Y+3	; 0x03
    4096:	9c 81       	ldd	r25, Y+4	; 0x04
    4098:	01 97       	sbiw	r24, 0x01	; 1
    409a:	9c 83       	std	Y+4, r25	; 0x04
    409c:	8b 83       	std	Y+3, r24	; 0x03
	*pxTopOfStack = ( portSTACK_TYPE ) 0x22;	/* R22 */
    409e:	eb 81       	ldd	r30, Y+3	; 0x03
    40a0:	fc 81       	ldd	r31, Y+4	; 0x04
    40a2:	82 e2       	ldi	r24, 0x22	; 34
    40a4:	80 83       	st	Z, r24
	pxTopOfStack--;
    40a6:	8b 81       	ldd	r24, Y+3	; 0x03
    40a8:	9c 81       	ldd	r25, Y+4	; 0x04
    40aa:	01 97       	sbiw	r24, 0x01	; 1
    40ac:	9c 83       	std	Y+4, r25	; 0x04
    40ae:	8b 83       	std	Y+3, r24	; 0x03
	*pxTopOfStack = ( portSTACK_TYPE ) 0x23;	/* R23 */
    40b0:	eb 81       	ldd	r30, Y+3	; 0x03
    40b2:	fc 81       	ldd	r31, Y+4	; 0x04
    40b4:	83 e2       	ldi	r24, 0x23	; 35
    40b6:	80 83       	st	Z, r24
	pxTopOfStack--;
    40b8:	8b 81       	ldd	r24, Y+3	; 0x03
    40ba:	9c 81       	ldd	r25, Y+4	; 0x04
    40bc:	01 97       	sbiw	r24, 0x01	; 1
    40be:	9c 83       	std	Y+4, r25	; 0x04
    40c0:	8b 83       	std	Y+3, r24	; 0x03

	/* Place the parameter on the stack in the expected location. */
	usAddress = ( unsigned short ) pvParameters;
    40c2:	8f 81       	ldd	r24, Y+7	; 0x07
    40c4:	98 85       	ldd	r25, Y+8	; 0x08
    40c6:	9a 83       	std	Y+2, r25	; 0x02
    40c8:	89 83       	std	Y+1, r24	; 0x01
	*pxTopOfStack = ( portSTACK_TYPE ) ( usAddress & ( unsigned short ) 0x00ff );
    40ca:	89 81       	ldd	r24, Y+1	; 0x01
    40cc:	eb 81       	ldd	r30, Y+3	; 0x03
    40ce:	fc 81       	ldd	r31, Y+4	; 0x04
    40d0:	80 83       	st	Z, r24
	pxTopOfStack--;
    40d2:	8b 81       	ldd	r24, Y+3	; 0x03
    40d4:	9c 81       	ldd	r25, Y+4	; 0x04
    40d6:	01 97       	sbiw	r24, 0x01	; 1
    40d8:	9c 83       	std	Y+4, r25	; 0x04
    40da:	8b 83       	std	Y+3, r24	; 0x03

	usAddress >>= 8;
    40dc:	89 81       	ldd	r24, Y+1	; 0x01
    40de:	9a 81       	ldd	r25, Y+2	; 0x02
    40e0:	89 2f       	mov	r24, r25
    40e2:	99 27       	eor	r25, r25
    40e4:	9a 83       	std	Y+2, r25	; 0x02
    40e6:	89 83       	std	Y+1, r24	; 0x01
	*pxTopOfStack = ( portSTACK_TYPE ) ( usAddress & ( unsigned short ) 0x00ff );
    40e8:	89 81       	ldd	r24, Y+1	; 0x01
    40ea:	eb 81       	ldd	r30, Y+3	; 0x03
    40ec:	fc 81       	ldd	r31, Y+4	; 0x04
    40ee:	80 83       	st	Z, r24
	pxTopOfStack--;
    40f0:	8b 81       	ldd	r24, Y+3	; 0x03
    40f2:	9c 81       	ldd	r25, Y+4	; 0x04
    40f4:	01 97       	sbiw	r24, 0x01	; 1
    40f6:	9c 83       	std	Y+4, r25	; 0x04
    40f8:	8b 83       	std	Y+3, r24	; 0x03

	*pxTopOfStack = ( portSTACK_TYPE ) 0x26;	/* R26 X */
    40fa:	eb 81       	ldd	r30, Y+3	; 0x03
    40fc:	fc 81       	ldd	r31, Y+4	; 0x04
    40fe:	86 e2       	ldi	r24, 0x26	; 38
    4100:	80 83       	st	Z, r24
	pxTopOfStack--;
    4102:	8b 81       	ldd	r24, Y+3	; 0x03
    4104:	9c 81       	ldd	r25, Y+4	; 0x04
    4106:	01 97       	sbiw	r24, 0x01	; 1
    4108:	9c 83       	std	Y+4, r25	; 0x04
    410a:	8b 83       	std	Y+3, r24	; 0x03
	*pxTopOfStack = ( portSTACK_TYPE ) 0x27;	/* R27 */
    410c:	eb 81       	ldd	r30, Y+3	; 0x03
    410e:	fc 81       	ldd	r31, Y+4	; 0x04
    4110:	87 e2       	ldi	r24, 0x27	; 39
    4112:	80 83       	st	Z, r24
	pxTopOfStack--;
    4114:	8b 81       	ldd	r24, Y+3	; 0x03
    4116:	9c 81       	ldd	r25, Y+4	; 0x04
    4118:	01 97       	sbiw	r24, 0x01	; 1
    411a:	9c 83       	std	Y+4, r25	; 0x04
    411c:	8b 83       	std	Y+3, r24	; 0x03
	*pxTopOfStack = ( portSTACK_TYPE ) 0x28;	/* R28 Y */
    411e:	eb 81       	ldd	r30, Y+3	; 0x03
    4120:	fc 81       	ldd	r31, Y+4	; 0x04
    4122:	88 e2       	ldi	r24, 0x28	; 40
    4124:	80 83       	st	Z, r24
	pxTopOfStack--;
    4126:	8b 81       	ldd	r24, Y+3	; 0x03
    4128:	9c 81       	ldd	r25, Y+4	; 0x04
    412a:	01 97       	sbiw	r24, 0x01	; 1
    412c:	9c 83       	std	Y+4, r25	; 0x04
    412e:	8b 83       	std	Y+3, r24	; 0x03
	*pxTopOfStack = ( portSTACK_TYPE ) 0x29;	/* R29 */
    4130:	eb 81       	ldd	r30, Y+3	; 0x03
    4132:	fc 81       	ldd	r31, Y+4	; 0x04
    4134:	89 e2       	ldi	r24, 0x29	; 41
    4136:	80 83       	st	Z, r24
	pxTopOfStack--;
    4138:	8b 81       	ldd	r24, Y+3	; 0x03
    413a:	9c 81       	ldd	r25, Y+4	; 0x04
    413c:	01 97       	sbiw	r24, 0x01	; 1
    413e:	9c 83       	std	Y+4, r25	; 0x04
    4140:	8b 83       	std	Y+3, r24	; 0x03
	*pxTopOfStack = ( portSTACK_TYPE ) 0x30;	/* R30 Z */
    4142:	eb 81       	ldd	r30, Y+3	; 0x03
    4144:	fc 81       	ldd	r31, Y+4	; 0x04
    4146:	80 e3       	ldi	r24, 0x30	; 48
    4148:	80 83       	st	Z, r24
	pxTopOfStack--;
    414a:	8b 81       	ldd	r24, Y+3	; 0x03
    414c:	9c 81       	ldd	r25, Y+4	; 0x04
    414e:	01 97       	sbiw	r24, 0x01	; 1
    4150:	9c 83       	std	Y+4, r25	; 0x04
    4152:	8b 83       	std	Y+3, r24	; 0x03
	*pxTopOfStack = ( portSTACK_TYPE ) 0x031;	/* R31 */
    4154:	eb 81       	ldd	r30, Y+3	; 0x03
    4156:	fc 81       	ldd	r31, Y+4	; 0x04
    4158:	81 e3       	ldi	r24, 0x31	; 49
    415a:	80 83       	st	Z, r24
	pxTopOfStack--;
    415c:	8b 81       	ldd	r24, Y+3	; 0x03
    415e:	9c 81       	ldd	r25, Y+4	; 0x04
    4160:	01 97       	sbiw	r24, 0x01	; 1
    4162:	9c 83       	std	Y+4, r25	; 0x04
    4164:	8b 83       	std	Y+3, r24	; 0x03

	/*lint +e950 +e611 +e923 */

	return pxTopOfStack;
    4166:	8b 81       	ldd	r24, Y+3	; 0x03
    4168:	9c 81       	ldd	r25, Y+4	; 0x04
}
    416a:	28 96       	adiw	r28, 0x08	; 8
    416c:	0f b6       	in	r0, 0x3f	; 63
    416e:	f8 94       	cli
    4170:	de bf       	out	0x3e, r29	; 62
    4172:	0f be       	out	0x3f, r0	; 63
    4174:	cd bf       	out	0x3d, r28	; 61
    4176:	cf 91       	pop	r28
    4178:	df 91       	pop	r29
    417a:	08 95       	ret

0000417c <xPortStartScheduler>:
/*-----------------------------------------------------------*/

portBASE_TYPE xPortStartScheduler( void )
{
    417c:	df 93       	push	r29
    417e:	cf 93       	push	r28
    4180:	cd b7       	in	r28, 0x3d	; 61
    4182:	de b7       	in	r29, 0x3e	; 62
	/* Setup the hardware to generate the tick. */
	prvSetupTimerInterrupt();
    4184:	0e 94 ae 21 	call	0x435c	; 0x435c <prvSetupTimerInterrupt>

	/* Restore the context of the first task that is going to run. */
	portRESTORE_CONTEXT();
    4188:	a0 91 9e 04 	lds	r26, 0x049E
    418c:	b0 91 9f 04 	lds	r27, 0x049F
    4190:	cd 91       	ld	r28, X+
    4192:	cd bf       	out	0x3d, r28	; 61
    4194:	dd 91       	ld	r29, X+
    4196:	de bf       	out	0x3e, r29	; 62
    4198:	ff 91       	pop	r31
    419a:	ef 91       	pop	r30
    419c:	df 91       	pop	r29
    419e:	cf 91       	pop	r28
    41a0:	bf 91       	pop	r27
    41a2:	af 91       	pop	r26
    41a4:	9f 91       	pop	r25
    41a6:	8f 91       	pop	r24
    41a8:	7f 91       	pop	r23
    41aa:	6f 91       	pop	r22
    41ac:	5f 91       	pop	r21
    41ae:	4f 91       	pop	r20
    41b0:	3f 91       	pop	r19
    41b2:	2f 91       	pop	r18
    41b4:	1f 91       	pop	r17
    41b6:	0f 91       	pop	r16
    41b8:	ff 90       	pop	r15
    41ba:	ef 90       	pop	r14
    41bc:	df 90       	pop	r13
    41be:	cf 90       	pop	r12
    41c0:	bf 90       	pop	r11
    41c2:	af 90       	pop	r10
    41c4:	9f 90       	pop	r9
    41c6:	8f 90       	pop	r8
    41c8:	7f 90       	pop	r7
    41ca:	6f 90       	pop	r6
    41cc:	5f 90       	pop	r5
    41ce:	4f 90       	pop	r4
    41d0:	3f 90       	pop	r3
    41d2:	2f 90       	pop	r2
    41d4:	1f 90       	pop	r1
    41d6:	0f 90       	pop	r0
    41d8:	0f be       	out	0x3f, r0	; 63
    41da:	0f 90       	pop	r0

	/* Simulate a function call end as generated by the compiler.  We will now
	jump to the start of the task the context of which we have just restored. */
	asm volatile ( "ret" );
    41dc:	08 95       	ret

	/* Should not get here. */
	return pdTRUE;
    41de:	81 e0       	ldi	r24, 0x01	; 1
}
    41e0:	cf 91       	pop	r28
    41e2:	df 91       	pop	r29
    41e4:	08 95       	ret

000041e6 <vPortEndScheduler>:
/*-----------------------------------------------------------*/

void vPortEndScheduler( void )
{
    41e6:	df 93       	push	r29
    41e8:	cf 93       	push	r28
    41ea:	cd b7       	in	r28, 0x3d	; 61
    41ec:	de b7       	in	r29, 0x3e	; 62
	/* It is unlikely that the AVR port will get stopped.  If required simply
	disable the tick interrupt here. */
}
    41ee:	cf 91       	pop	r28
    41f0:	df 91       	pop	r29
    41f2:	08 95       	ret

000041f4 <vPortYield>:
 * can use a naked attribute.
 */
void vPortYield( void ) __attribute__ ( ( naked ) );
void vPortYield( void )
{
	portSAVE_CONTEXT();
    41f4:	0f 92       	push	r0
    41f6:	0f b6       	in	r0, 0x3f	; 63
    41f8:	f8 94       	cli
    41fa:	0f 92       	push	r0
    41fc:	1f 92       	push	r1
    41fe:	11 24       	eor	r1, r1
    4200:	2f 92       	push	r2
    4202:	3f 92       	push	r3
    4204:	4f 92       	push	r4
    4206:	5f 92       	push	r5
    4208:	6f 92       	push	r6
    420a:	7f 92       	push	r7
    420c:	8f 92       	push	r8
    420e:	9f 92       	push	r9
    4210:	af 92       	push	r10
    4212:	bf 92       	push	r11
    4214:	cf 92       	push	r12
    4216:	df 92       	push	r13
    4218:	ef 92       	push	r14
    421a:	ff 92       	push	r15
    421c:	0f 93       	push	r16
    421e:	1f 93       	push	r17
    4220:	2f 93       	push	r18
    4222:	3f 93       	push	r19
    4224:	4f 93       	push	r20
    4226:	5f 93       	push	r21
    4228:	6f 93       	push	r22
    422a:	7f 93       	push	r23
    422c:	8f 93       	push	r24
    422e:	9f 93       	push	r25
    4230:	af 93       	push	r26
    4232:	bf 93       	push	r27
    4234:	cf 93       	push	r28
    4236:	df 93       	push	r29
    4238:	ef 93       	push	r30
    423a:	ff 93       	push	r31
    423c:	a0 91 9e 04 	lds	r26, 0x049E
    4240:	b0 91 9f 04 	lds	r27, 0x049F
    4244:	0d b6       	in	r0, 0x3d	; 61
    4246:	0d 92       	st	X+, r0
    4248:	0e b6       	in	r0, 0x3e	; 62
    424a:	0d 92       	st	X+, r0
	vTaskSwitchContext();
    424c:	0e 94 89 2a 	call	0x5512	; 0x5512 <vTaskSwitchContext>
	portRESTORE_CONTEXT();
    4250:	a0 91 9e 04 	lds	r26, 0x049E
    4254:	b0 91 9f 04 	lds	r27, 0x049F
    4258:	cd 91       	ld	r28, X+
    425a:	cd bf       	out	0x3d, r28	; 61
    425c:	dd 91       	ld	r29, X+
    425e:	de bf       	out	0x3e, r29	; 62
    4260:	ff 91       	pop	r31
    4262:	ef 91       	pop	r30
    4264:	df 91       	pop	r29
    4266:	cf 91       	pop	r28
    4268:	bf 91       	pop	r27
    426a:	af 91       	pop	r26
    426c:	9f 91       	pop	r25
    426e:	8f 91       	pop	r24
    4270:	7f 91       	pop	r23
    4272:	6f 91       	pop	r22
    4274:	5f 91       	pop	r21
    4276:	4f 91       	pop	r20
    4278:	3f 91       	pop	r19
    427a:	2f 91       	pop	r18
    427c:	1f 91       	pop	r17
    427e:	0f 91       	pop	r16
    4280:	ff 90       	pop	r15
    4282:	ef 90       	pop	r14
    4284:	df 90       	pop	r13
    4286:	cf 90       	pop	r12
    4288:	bf 90       	pop	r11
    428a:	af 90       	pop	r10
    428c:	9f 90       	pop	r9
    428e:	8f 90       	pop	r8
    4290:	7f 90       	pop	r7
    4292:	6f 90       	pop	r6
    4294:	5f 90       	pop	r5
    4296:	4f 90       	pop	r4
    4298:	3f 90       	pop	r3
    429a:	2f 90       	pop	r2
    429c:	1f 90       	pop	r1
    429e:	0f 90       	pop	r0
    42a0:	0f be       	out	0x3f, r0	; 63
    42a2:	0f 90       	pop	r0

	asm volatile ( "ret" );
    42a4:	08 95       	ret

000042a6 <vPortYieldFromTick>:
 * call comes from the tick ISR.
 */
void vPortYieldFromTick( void ) __attribute__ ( ( naked ) );
void vPortYieldFromTick( void )
{
	portSAVE_CONTEXT();
    42a6:	0f 92       	push	r0
    42a8:	0f b6       	in	r0, 0x3f	; 63
    42aa:	f8 94       	cli
    42ac:	0f 92       	push	r0
    42ae:	1f 92       	push	r1
    42b0:	11 24       	eor	r1, r1
    42b2:	2f 92       	push	r2
    42b4:	3f 92       	push	r3
    42b6:	4f 92       	push	r4
    42b8:	5f 92       	push	r5
    42ba:	6f 92       	push	r6
    42bc:	7f 92       	push	r7
    42be:	8f 92       	push	r8
    42c0:	9f 92       	push	r9
    42c2:	af 92       	push	r10
    42c4:	bf 92       	push	r11
    42c6:	cf 92       	push	r12
    42c8:	df 92       	push	r13
    42ca:	ef 92       	push	r14
    42cc:	ff 92       	push	r15
    42ce:	0f 93       	push	r16
    42d0:	1f 93       	push	r17
    42d2:	2f 93       	push	r18
    42d4:	3f 93       	push	r19
    42d6:	4f 93       	push	r20
    42d8:	5f 93       	push	r21
    42da:	6f 93       	push	r22
    42dc:	7f 93       	push	r23
    42de:	8f 93       	push	r24
    42e0:	9f 93       	push	r25
    42e2:	af 93       	push	r26
    42e4:	bf 93       	push	r27
    42e6:	cf 93       	push	r28
    42e8:	df 93       	push	r29
    42ea:	ef 93       	push	r30
    42ec:	ff 93       	push	r31
    42ee:	a0 91 9e 04 	lds	r26, 0x049E
    42f2:	b0 91 9f 04 	lds	r27, 0x049F
    42f6:	0d b6       	in	r0, 0x3d	; 61
    42f8:	0d 92       	st	X+, r0
    42fa:	0e b6       	in	r0, 0x3e	; 62
    42fc:	0d 92       	st	X+, r0
	vTaskIncrementTick();
    42fe:	0e 94 b4 29 	call	0x5368	; 0x5368 <vTaskIncrementTick>
	vTaskSwitchContext();
    4302:	0e 94 89 2a 	call	0x5512	; 0x5512 <vTaskSwitchContext>
	portRESTORE_CONTEXT();
    4306:	a0 91 9e 04 	lds	r26, 0x049E
    430a:	b0 91 9f 04 	lds	r27, 0x049F
    430e:	cd 91       	ld	r28, X+
    4310:	cd bf       	out	0x3d, r28	; 61
    4312:	dd 91       	ld	r29, X+
    4314:	de bf       	out	0x3e, r29	; 62
    4316:	ff 91       	pop	r31
    4318:	ef 91       	pop	r30
    431a:	df 91       	pop	r29
    431c:	cf 91       	pop	r28
    431e:	bf 91       	pop	r27
    4320:	af 91       	pop	r26
    4322:	9f 91       	pop	r25
    4324:	8f 91       	pop	r24
    4326:	7f 91       	pop	r23
    4328:	6f 91       	pop	r22
    432a:	5f 91       	pop	r21
    432c:	4f 91       	pop	r20
    432e:	3f 91       	pop	r19
    4330:	2f 91       	pop	r18
    4332:	1f 91       	pop	r17
    4334:	0f 91       	pop	r16
    4336:	ff 90       	pop	r15
    4338:	ef 90       	pop	r14
    433a:	df 90       	pop	r13
    433c:	cf 90       	pop	r12
    433e:	bf 90       	pop	r11
    4340:	af 90       	pop	r10
    4342:	9f 90       	pop	r9
    4344:	8f 90       	pop	r8
    4346:	7f 90       	pop	r7
    4348:	6f 90       	pop	r6
    434a:	5f 90       	pop	r5
    434c:	4f 90       	pop	r4
    434e:	3f 90       	pop	r3
    4350:	2f 90       	pop	r2
    4352:	1f 90       	pop	r1
    4354:	0f 90       	pop	r0
    4356:	0f be       	out	0x3f, r0	; 63
    4358:	0f 90       	pop	r0

	asm volatile ( "ret" );
    435a:	08 95       	ret

0000435c <prvSetupTimerInterrupt>:

/*
 * Setup timer 1 compare match A to generate a tick interrupt.
 */
static void prvSetupTimerInterrupt( void )
{
    435c:	df 93       	push	r29
    435e:	cf 93       	push	r28
    4360:	00 d0       	rcall	.+0      	; 0x4362 <prvSetupTimerInterrupt+0x6>
    4362:	00 d0       	rcall	.+0      	; 0x4364 <prvSetupTimerInterrupt+0x8>
    4364:	00 d0       	rcall	.+0      	; 0x4366 <prvSetupTimerInterrupt+0xa>
    4366:	cd b7       	in	r28, 0x3d	; 61
    4368:	de b7       	in	r29, 0x3e	; 62
unsigned char ucHighByte, ucLowByte;

	/* Using 16bit timer 1 to generate the tick.  Correct fuses must be
	selected for the configCPU_CLOCK_HZ clock. */

	ulCompareMatch = configCPU_CLOCK_HZ / configTICK_RATE_HZ;
    436a:	80 e4       	ldi	r24, 0x40	; 64
    436c:	9f e1       	ldi	r25, 0x1F	; 31
    436e:	a0 e0       	ldi	r26, 0x00	; 0
    4370:	b0 e0       	ldi	r27, 0x00	; 0
    4372:	8b 83       	std	Y+3, r24	; 0x03
    4374:	9c 83       	std	Y+4, r25	; 0x04
    4376:	ad 83       	std	Y+5, r26	; 0x05
    4378:	be 83       	std	Y+6, r27	; 0x06

	/* We only have 16 bits so have to scale to get our required tick rate. */
	ulCompareMatch /= portCLOCK_PRESCALER;
    437a:	8b 81       	ldd	r24, Y+3	; 0x03
    437c:	9c 81       	ldd	r25, Y+4	; 0x04
    437e:	ad 81       	ldd	r26, Y+5	; 0x05
    4380:	be 81       	ldd	r27, Y+6	; 0x06
    4382:	68 94       	set
    4384:	15 f8       	bld	r1, 5
    4386:	b6 95       	lsr	r27
    4388:	a7 95       	ror	r26
    438a:	97 95       	ror	r25
    438c:	87 95       	ror	r24
    438e:	16 94       	lsr	r1
    4390:	d1 f7       	brne	.-12     	; 0x4386 <prvSetupTimerInterrupt+0x2a>
    4392:	8b 83       	std	Y+3, r24	; 0x03
    4394:	9c 83       	std	Y+4, r25	; 0x04
    4396:	ad 83       	std	Y+5, r26	; 0x05
    4398:	be 83       	std	Y+6, r27	; 0x06

	/* Adjust for correct value. */
	ulCompareMatch -= ( unsigned long ) 1;
    439a:	8b 81       	ldd	r24, Y+3	; 0x03
    439c:	9c 81       	ldd	r25, Y+4	; 0x04
    439e:	ad 81       	ldd	r26, Y+5	; 0x05
    43a0:	be 81       	ldd	r27, Y+6	; 0x06
    43a2:	01 97       	sbiw	r24, 0x01	; 1
    43a4:	a1 09       	sbc	r26, r1
    43a6:	b1 09       	sbc	r27, r1
    43a8:	8b 83       	std	Y+3, r24	; 0x03
    43aa:	9c 83       	std	Y+4, r25	; 0x04
    43ac:	ad 83       	std	Y+5, r26	; 0x05
    43ae:	be 83       	std	Y+6, r27	; 0x06

	/* Setup compare match value for compare match A.  Interrupts are disabled 
	before this is called so we need not worry here. */
	ucLowByte = ( unsigned char ) ( ulCompareMatch & ( unsigned long ) 0xff );
    43b0:	8b 81       	ldd	r24, Y+3	; 0x03
    43b2:	89 83       	std	Y+1, r24	; 0x01
	ulCompareMatch >>= 8;
    43b4:	8b 81       	ldd	r24, Y+3	; 0x03
    43b6:	9c 81       	ldd	r25, Y+4	; 0x04
    43b8:	ad 81       	ldd	r26, Y+5	; 0x05
    43ba:	be 81       	ldd	r27, Y+6	; 0x06
    43bc:	89 2f       	mov	r24, r25
    43be:	9a 2f       	mov	r25, r26
    43c0:	ab 2f       	mov	r26, r27
    43c2:	bb 27       	eor	r27, r27
    43c4:	8b 83       	std	Y+3, r24	; 0x03
    43c6:	9c 83       	std	Y+4, r25	; 0x04
    43c8:	ad 83       	std	Y+5, r26	; 0x05
    43ca:	be 83       	std	Y+6, r27	; 0x06
	ucHighByte = ( unsigned char ) ( ulCompareMatch & ( unsigned long ) 0xff );
    43cc:	8b 81       	ldd	r24, Y+3	; 0x03
    43ce:	8a 83       	std	Y+2, r24	; 0x02
	OCR1AH = ucHighByte;
    43d0:	eb e4       	ldi	r30, 0x4B	; 75
    43d2:	f0 e0       	ldi	r31, 0x00	; 0
    43d4:	8a 81       	ldd	r24, Y+2	; 0x02
    43d6:	80 83       	st	Z, r24
	OCR1AL = ucLowByte;
    43d8:	ea e4       	ldi	r30, 0x4A	; 74
    43da:	f0 e0       	ldi	r31, 0x00	; 0
    43dc:	89 81       	ldd	r24, Y+1	; 0x01
    43de:	80 83       	st	Z, r24

	/* Setup clock source and compare match behaviour. */
	ucLowByte = portCLEAR_COUNTER_ON_MATCH | portPRESCALE_64;
    43e0:	8b e0       	ldi	r24, 0x0B	; 11
    43e2:	89 83       	std	Y+1, r24	; 0x01
	TCCR1B = ucLowByte;
    43e4:	ee e4       	ldi	r30, 0x4E	; 78
    43e6:	f0 e0       	ldi	r31, 0x00	; 0
    43e8:	89 81       	ldd	r24, Y+1	; 0x01
    43ea:	80 83       	st	Z, r24

	/* Enable the interrupt - this is okay as interrupt are currently globally
	disabled. */
	ucLowByte = TIMSK;
    43ec:	e9 e5       	ldi	r30, 0x59	; 89
    43ee:	f0 e0       	ldi	r31, 0x00	; 0
    43f0:	80 81       	ld	r24, Z
    43f2:	89 83       	std	Y+1, r24	; 0x01
	ucLowByte |= portCOMPARE_MATCH_A_INTERRUPT_ENABLE;
    43f4:	89 81       	ldd	r24, Y+1	; 0x01
    43f6:	80 61       	ori	r24, 0x10	; 16
    43f8:	89 83       	std	Y+1, r24	; 0x01
	TIMSK = ucLowByte;
    43fa:	e9 e5       	ldi	r30, 0x59	; 89
    43fc:	f0 e0       	ldi	r31, 0x00	; 0
    43fe:	89 81       	ldd	r24, Y+1	; 0x01
    4400:	80 83       	st	Z, r24
}
    4402:	26 96       	adiw	r28, 0x06	; 6
    4404:	0f b6       	in	r0, 0x3f	; 63
    4406:	f8 94       	cli
    4408:	de bf       	out	0x3e, r29	; 62
    440a:	0f be       	out	0x3f, r0	; 63
    440c:	cd bf       	out	0x3d, r28	; 61
    440e:	cf 91       	pop	r28
    4410:	df 91       	pop	r29
    4412:	08 95       	ret

00004414 <__vector_7>:
	 * count is incremented after the context is saved.
	 */
	void SIG_OUTPUT_COMPARE1A( void ) __attribute__ ( ( signal, naked ) );
	void SIG_OUTPUT_COMPARE1A( void )
	{
		vPortYieldFromTick();
    4414:	0e 94 53 21 	call	0x42a6	; 0x42a6 <vPortYieldFromTick>
		asm volatile ( "reti" );
    4418:	18 95       	reti

0000441a <xQueueCreate>:
/*-----------------------------------------------------------
 * PUBLIC QUEUE MANAGEMENT API documented in queue.h
 *----------------------------------------------------------*/

xQueueHandle xQueueCreate( unsigned portBASE_TYPE uxQueueLength, unsigned portBASE_TYPE uxItemSize )
{
    441a:	df 93       	push	r29
    441c:	cf 93       	push	r28
    441e:	cd b7       	in	r28, 0x3d	; 61
    4420:	de b7       	in	r29, 0x3e	; 62
    4422:	28 97       	sbiw	r28, 0x08	; 8
    4424:	0f b6       	in	r0, 0x3f	; 63
    4426:	f8 94       	cli
    4428:	de bf       	out	0x3e, r29	; 62
    442a:	0f be       	out	0x3f, r0	; 63
    442c:	cd bf       	out	0x3d, r28	; 61
    442e:	8f 83       	std	Y+7, r24	; 0x07
    4430:	68 87       	std	Y+8, r22	; 0x08
xQUEUE *pxNewQueue;
size_t xQueueSizeInBytes;
xQueueHandle xReturn = NULL;
    4432:	1a 82       	std	Y+2, r1	; 0x02
    4434:	19 82       	std	Y+1, r1	; 0x01

	/* Allocate the new queue structure. */
	if( uxQueueLength > ( unsigned portBASE_TYPE ) 0 )
    4436:	8f 81       	ldd	r24, Y+7	; 0x07
    4438:	88 23       	and	r24, r24
    443a:	09 f4       	brne	.+2      	; 0x443e <xQueueCreate+0x24>
    443c:	8c c0       	rjmp	.+280    	; 0x4556 <xQueueCreate+0x13c>
	{
		pxNewQueue = ( xQUEUE * ) pvPortMalloc( sizeof( xQUEUE ) );
    443e:	8f e1       	ldi	r24, 0x1F	; 31
    4440:	90 e0       	ldi	r25, 0x00	; 0
    4442:	0e 94 94 1d 	call	0x3b28	; 0x3b28 <pvPortMalloc>
    4446:	9e 83       	std	Y+6, r25	; 0x06
    4448:	8d 83       	std	Y+5, r24	; 0x05
		if( pxNewQueue != NULL )
    444a:	8d 81       	ldd	r24, Y+5	; 0x05
    444c:	9e 81       	ldd	r25, Y+6	; 0x06
    444e:	00 97       	sbiw	r24, 0x00	; 0
    4450:	09 f4       	brne	.+2      	; 0x4454 <xQueueCreate+0x3a>
    4452:	81 c0       	rjmp	.+258    	; 0x4556 <xQueueCreate+0x13c>
		{
			/* Create the list of pointers to queue items.  The queue is one byte
			longer than asked for to make wrap checking easier/faster. */
			xQueueSizeInBytes = ( size_t ) ( uxQueueLength * uxItemSize ) + ( size_t ) 1;
    4454:	8f 81       	ldd	r24, Y+7	; 0x07
    4456:	28 2f       	mov	r18, r24
    4458:	30 e0       	ldi	r19, 0x00	; 0
    445a:	88 85       	ldd	r24, Y+8	; 0x08
    445c:	88 2f       	mov	r24, r24
    445e:	90 e0       	ldi	r25, 0x00	; 0
    4460:	ac 01       	movw	r20, r24
    4462:	24 9f       	mul	r18, r20
    4464:	c0 01       	movw	r24, r0
    4466:	25 9f       	mul	r18, r21
    4468:	90 0d       	add	r25, r0
    446a:	34 9f       	mul	r19, r20
    446c:	90 0d       	add	r25, r0
    446e:	11 24       	eor	r1, r1
    4470:	01 96       	adiw	r24, 0x01	; 1
    4472:	9c 83       	std	Y+4, r25	; 0x04
    4474:	8b 83       	std	Y+3, r24	; 0x03

			pxNewQueue->pcHead = ( signed char * ) pvPortMalloc( xQueueSizeInBytes );
    4476:	8b 81       	ldd	r24, Y+3	; 0x03
    4478:	9c 81       	ldd	r25, Y+4	; 0x04
    447a:	0e 94 94 1d 	call	0x3b28	; 0x3b28 <pvPortMalloc>
    447e:	ed 81       	ldd	r30, Y+5	; 0x05
    4480:	fe 81       	ldd	r31, Y+6	; 0x06
    4482:	91 83       	std	Z+1, r25	; 0x01
    4484:	80 83       	st	Z, r24
			if( pxNewQueue->pcHead != NULL )
    4486:	ed 81       	ldd	r30, Y+5	; 0x05
    4488:	fe 81       	ldd	r31, Y+6	; 0x06
    448a:	80 81       	ld	r24, Z
    448c:	91 81       	ldd	r25, Z+1	; 0x01
    448e:	00 97       	sbiw	r24, 0x00	; 0
    4490:	09 f4       	brne	.+2      	; 0x4494 <xQueueCreate+0x7a>
    4492:	5d c0       	rjmp	.+186    	; 0x454e <xQueueCreate+0x134>
			{
				/* Initialise the queue members as described above where the
				queue type is defined. */
				pxNewQueue->pcTail = pxNewQueue->pcHead + ( uxQueueLength * uxItemSize );
    4494:	ed 81       	ldd	r30, Y+5	; 0x05
    4496:	fe 81       	ldd	r31, Y+6	; 0x06
    4498:	40 81       	ld	r20, Z
    449a:	51 81       	ldd	r21, Z+1	; 0x01
    449c:	8f 81       	ldd	r24, Y+7	; 0x07
    449e:	28 2f       	mov	r18, r24
    44a0:	30 e0       	ldi	r19, 0x00	; 0
    44a2:	88 85       	ldd	r24, Y+8	; 0x08
    44a4:	88 2f       	mov	r24, r24
    44a6:	90 e0       	ldi	r25, 0x00	; 0
    44a8:	bc 01       	movw	r22, r24
    44aa:	26 9f       	mul	r18, r22
    44ac:	c0 01       	movw	r24, r0
    44ae:	27 9f       	mul	r18, r23
    44b0:	90 0d       	add	r25, r0
    44b2:	36 9f       	mul	r19, r22
    44b4:	90 0d       	add	r25, r0
    44b6:	11 24       	eor	r1, r1
    44b8:	84 0f       	add	r24, r20
    44ba:	95 1f       	adc	r25, r21
    44bc:	ed 81       	ldd	r30, Y+5	; 0x05
    44be:	fe 81       	ldd	r31, Y+6	; 0x06
    44c0:	93 83       	std	Z+3, r25	; 0x03
    44c2:	82 83       	std	Z+2, r24	; 0x02
				pxNewQueue->uxMessagesWaiting = ( unsigned portBASE_TYPE ) 0U;
    44c4:	ed 81       	ldd	r30, Y+5	; 0x05
    44c6:	fe 81       	ldd	r31, Y+6	; 0x06
    44c8:	12 8e       	std	Z+26, r1	; 0x1a
				pxNewQueue->pcWriteTo = pxNewQueue->pcHead;
    44ca:	ed 81       	ldd	r30, Y+5	; 0x05
    44cc:	fe 81       	ldd	r31, Y+6	; 0x06
    44ce:	80 81       	ld	r24, Z
    44d0:	91 81       	ldd	r25, Z+1	; 0x01
    44d2:	ed 81       	ldd	r30, Y+5	; 0x05
    44d4:	fe 81       	ldd	r31, Y+6	; 0x06
    44d6:	95 83       	std	Z+5, r25	; 0x05
    44d8:	84 83       	std	Z+4, r24	; 0x04
				pxNewQueue->pcReadFrom = pxNewQueue->pcHead + ( ( uxQueueLength - ( unsigned portBASE_TYPE ) 1U ) * uxItemSize );
    44da:	ed 81       	ldd	r30, Y+5	; 0x05
    44dc:	fe 81       	ldd	r31, Y+6	; 0x06
    44de:	40 81       	ld	r20, Z
    44e0:	51 81       	ldd	r21, Z+1	; 0x01
    44e2:	8f 81       	ldd	r24, Y+7	; 0x07
    44e4:	88 2f       	mov	r24, r24
    44e6:	90 e0       	ldi	r25, 0x00	; 0
    44e8:	9c 01       	movw	r18, r24
    44ea:	21 50       	subi	r18, 0x01	; 1
    44ec:	30 40       	sbci	r19, 0x00	; 0
    44ee:	88 85       	ldd	r24, Y+8	; 0x08
    44f0:	88 2f       	mov	r24, r24
    44f2:	90 e0       	ldi	r25, 0x00	; 0
    44f4:	bc 01       	movw	r22, r24
    44f6:	26 9f       	mul	r18, r22
    44f8:	c0 01       	movw	r24, r0
    44fa:	27 9f       	mul	r18, r23
    44fc:	90 0d       	add	r25, r0
    44fe:	36 9f       	mul	r19, r22
    4500:	90 0d       	add	r25, r0
    4502:	11 24       	eor	r1, r1
    4504:	84 0f       	add	r24, r20
    4506:	95 1f       	adc	r25, r21
    4508:	ed 81       	ldd	r30, Y+5	; 0x05
    450a:	fe 81       	ldd	r31, Y+6	; 0x06
    450c:	97 83       	std	Z+7, r25	; 0x07
    450e:	86 83       	std	Z+6, r24	; 0x06
				pxNewQueue->uxLength = uxQueueLength;
    4510:	ed 81       	ldd	r30, Y+5	; 0x05
    4512:	fe 81       	ldd	r31, Y+6	; 0x06
    4514:	8f 81       	ldd	r24, Y+7	; 0x07
    4516:	83 8f       	std	Z+27, r24	; 0x1b
				pxNewQueue->uxItemSize = uxItemSize;
    4518:	ed 81       	ldd	r30, Y+5	; 0x05
    451a:	fe 81       	ldd	r31, Y+6	; 0x06
    451c:	88 85       	ldd	r24, Y+8	; 0x08
    451e:	84 8f       	std	Z+28, r24	; 0x1c
				pxNewQueue->xRxLock = queueUNLOCKED;
    4520:	ed 81       	ldd	r30, Y+5	; 0x05
    4522:	fe 81       	ldd	r31, Y+6	; 0x06
    4524:	8f ef       	ldi	r24, 0xFF	; 255
    4526:	85 8f       	std	Z+29, r24	; 0x1d
				pxNewQueue->xTxLock = queueUNLOCKED;
    4528:	ed 81       	ldd	r30, Y+5	; 0x05
    452a:	fe 81       	ldd	r31, Y+6	; 0x06
    452c:	8f ef       	ldi	r24, 0xFF	; 255
    452e:	86 8f       	std	Z+30, r24	; 0x1e

				/* Likewise ensure the event queues start with the correct state. */
				vListInitialise( &( pxNewQueue->xTasksWaitingToSend ) );
    4530:	8d 81       	ldd	r24, Y+5	; 0x05
    4532:	9e 81       	ldd	r25, Y+6	; 0x06
    4534:	08 96       	adiw	r24, 0x08	; 8
    4536:	0e 94 00 1e 	call	0x3c00	; 0x3c00 <vListInitialise>
				vListInitialise( &( pxNewQueue->xTasksWaitingToReceive ) );
    453a:	8d 81       	ldd	r24, Y+5	; 0x05
    453c:	9e 81       	ldd	r25, Y+6	; 0x06
    453e:	41 96       	adiw	r24, 0x11	; 17
    4540:	0e 94 00 1e 	call	0x3c00	; 0x3c00 <vListInitialise>

				traceQUEUE_CREATE( pxNewQueue );
				xReturn = pxNewQueue;
    4544:	8d 81       	ldd	r24, Y+5	; 0x05
    4546:	9e 81       	ldd	r25, Y+6	; 0x06
    4548:	9a 83       	std	Y+2, r25	; 0x02
    454a:	89 83       	std	Y+1, r24	; 0x01
    454c:	04 c0       	rjmp	.+8      	; 0x4556 <xQueueCreate+0x13c>
			}
			else
			{
				traceQUEUE_CREATE_FAILED();
				vPortFree( pxNewQueue );
    454e:	8d 81       	ldd	r24, Y+5	; 0x05
    4550:	9e 81       	ldd	r25, Y+6	; 0x06
    4552:	0e 94 da 1d 	call	0x3bb4	; 0x3bb4 <vPortFree>
		}
	}

	configASSERT( xReturn );

	return xReturn;
    4556:	89 81       	ldd	r24, Y+1	; 0x01
    4558:	9a 81       	ldd	r25, Y+2	; 0x02
}
    455a:	28 96       	adiw	r28, 0x08	; 8
    455c:	0f b6       	in	r0, 0x3f	; 63
    455e:	f8 94       	cli
    4560:	de bf       	out	0x3e, r29	; 62
    4562:	0f be       	out	0x3f, r0	; 63
    4564:	cd bf       	out	0x3d, r28	; 61
    4566:	cf 91       	pop	r28
    4568:	df 91       	pop	r29
    456a:	08 95       	ret

0000456c <xQueueCreateCountingSemaphore>:
/*-----------------------------------------------------------*/

#if configUSE_COUNTING_SEMAPHORES == 1

	xQueueHandle xQueueCreateCountingSemaphore( unsigned portBASE_TYPE uxCountValue, unsigned portBASE_TYPE uxInitialCount )
	{
    456c:	df 93       	push	r29
    456e:	cf 93       	push	r28
    4570:	00 d0       	rcall	.+0      	; 0x4572 <xQueueCreateCountingSemaphore+0x6>
    4572:	00 d0       	rcall	.+0      	; 0x4574 <xQueueCreateCountingSemaphore+0x8>
    4574:	cd b7       	in	r28, 0x3d	; 61
    4576:	de b7       	in	r29, 0x3e	; 62
    4578:	8b 83       	std	Y+3, r24	; 0x03
    457a:	6c 83       	std	Y+4, r22	; 0x04
	xQueueHandle pxHandle;

		pxHandle = xQueueCreate( ( unsigned portBASE_TYPE ) uxCountValue, queueSEMAPHORE_QUEUE_ITEM_LENGTH );
    457c:	8b 81       	ldd	r24, Y+3	; 0x03
    457e:	60 e0       	ldi	r22, 0x00	; 0
    4580:	0e 94 0d 22 	call	0x441a	; 0x441a <xQueueCreate>
    4584:	9a 83       	std	Y+2, r25	; 0x02
    4586:	89 83       	std	Y+1, r24	; 0x01

		if( pxHandle != NULL )
    4588:	89 81       	ldd	r24, Y+1	; 0x01
    458a:	9a 81       	ldd	r25, Y+2	; 0x02
    458c:	00 97       	sbiw	r24, 0x00	; 0
    458e:	21 f0       	breq	.+8      	; 0x4598 <xQueueCreateCountingSemaphore+0x2c>
		{
			pxHandle->uxMessagesWaiting = uxInitialCount;
    4590:	e9 81       	ldd	r30, Y+1	; 0x01
    4592:	fa 81       	ldd	r31, Y+2	; 0x02
    4594:	8c 81       	ldd	r24, Y+4	; 0x04
    4596:	82 8f       	std	Z+26, r24	; 0x1a
		{
			traceCREATE_COUNTING_SEMAPHORE_FAILED();
		}

		configASSERT( pxHandle );
		return pxHandle;
    4598:	89 81       	ldd	r24, Y+1	; 0x01
    459a:	9a 81       	ldd	r25, Y+2	; 0x02
	}
    459c:	0f 90       	pop	r0
    459e:	0f 90       	pop	r0
    45a0:	0f 90       	pop	r0
    45a2:	0f 90       	pop	r0
    45a4:	cf 91       	pop	r28
    45a6:	df 91       	pop	r29
    45a8:	08 95       	ret

000045aa <xQueueGenericSend>:

#endif /* configUSE_COUNTING_SEMAPHORES */
/*-----------------------------------------------------------*/

signed portBASE_TYPE xQueueGenericSend( xQueueHandle pxQueue, const void * const pvItemToQueue, portTickType xTicksToWait, portBASE_TYPE xCopyPosition )
{
    45aa:	df 93       	push	r29
    45ac:	cf 93       	push	r28
    45ae:	cd b7       	in	r28, 0x3d	; 61
    45b0:	de b7       	in	r29, 0x3e	; 62
    45b2:	2c 97       	sbiw	r28, 0x0c	; 12
    45b4:	0f b6       	in	r0, 0x3f	; 63
    45b6:	f8 94       	cli
    45b8:	de bf       	out	0x3e, r29	; 62
    45ba:	0f be       	out	0x3f, r0	; 63
    45bc:	cd bf       	out	0x3d, r28	; 61
    45be:	9e 83       	std	Y+6, r25	; 0x06
    45c0:	8d 83       	std	Y+5, r24	; 0x05
    45c2:	78 87       	std	Y+8, r23	; 0x08
    45c4:	6f 83       	std	Y+7, r22	; 0x07
    45c6:	5a 87       	std	Y+10, r21	; 0x0a
    45c8:	49 87       	std	Y+9, r20	; 0x09
    45ca:	2b 87       	std	Y+11, r18	; 0x0b
signed portBASE_TYPE xEntryTimeSet = pdFALSE;
    45cc:	19 82       	std	Y+1, r1	; 0x01
	/* This function relaxes the coding standard somewhat to allow return
	statements within the function itself.  This is done in the interest
	of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
    45ce:	0f b6       	in	r0, 0x3f	; 63
    45d0:	f8 94       	cli
    45d2:	0f 92       	push	r0
		{
			/* Is there room on the queue now?  To be running we must be
			the highest priority task wanting to access the queue. */
			if( pxQueue->uxMessagesWaiting < pxQueue->uxLength )
    45d4:	ed 81       	ldd	r30, Y+5	; 0x05
    45d6:	fe 81       	ldd	r31, Y+6	; 0x06
    45d8:	92 8d       	ldd	r25, Z+26	; 0x1a
    45da:	ed 81       	ldd	r30, Y+5	; 0x05
    45dc:	fe 81       	ldd	r31, Y+6	; 0x06
    45de:	83 8d       	ldd	r24, Z+27	; 0x1b
    45e0:	98 17       	cp	r25, r24
    45e2:	d8 f4       	brcc	.+54     	; 0x461a <xQueueGenericSend+0x70>
			{
				traceQUEUE_SEND( pxQueue );
				prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
    45e4:	8d 81       	ldd	r24, Y+5	; 0x05
    45e6:	9e 81       	ldd	r25, Y+6	; 0x06
    45e8:	2f 81       	ldd	r18, Y+7	; 0x07
    45ea:	38 85       	ldd	r19, Y+8	; 0x08
    45ec:	b9 01       	movw	r22, r18
    45ee:	4b 85       	ldd	r20, Y+11	; 0x0b
    45f0:	0e 94 10 25 	call	0x4a20	; 0x4a20 <prvCopyDataToQueue>

				/* If there was a task waiting for data to arrive on the
				queue then unblock it now. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
    45f4:	ed 81       	ldd	r30, Y+5	; 0x05
    45f6:	fe 81       	ldd	r31, Y+6	; 0x06
    45f8:	81 89       	ldd	r24, Z+17	; 0x11
    45fa:	88 23       	and	r24, r24
    45fc:	49 f0       	breq	.+18     	; 0x4610 <xQueueGenericSend+0x66>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) == pdTRUE )
    45fe:	8d 81       	ldd	r24, Y+5	; 0x05
    4600:	9e 81       	ldd	r25, Y+6	; 0x06
    4602:	41 96       	adiw	r24, 0x11	; 17
    4604:	0e 94 25 2b 	call	0x564a	; 0x564a <xTaskRemoveFromEventList>
    4608:	81 30       	cpi	r24, 0x01	; 1
    460a:	11 f4       	brne	.+4      	; 0x4610 <xQueueGenericSend+0x66>
					{
						/* The unblocked task has a priority higher than
						our own so yield immediately.  Yes it is ok to do
						this from within the critical section - the kernel
						takes care of that. */
						portYIELD_WITHIN_API();
    460c:	0e 94 fa 20 	call	0x41f4	; 0x41f4 <vPortYield>
					}
				}

				taskEXIT_CRITICAL();
    4610:	0f 90       	pop	r0
    4612:	0f be       	out	0x3f, r0	; 63

				/* Return to the original privilege level before exiting the
				function. */
				return pdPASS;
    4614:	81 e0       	ldi	r24, 0x01	; 1
    4616:	8c 87       	std	Y+12, r24	; 0x0c
    4618:	5c c0       	rjmp	.+184    	; 0x46d2 <xQueueGenericSend+0x128>
			}
			else
			{
				if( xTicksToWait == ( portTickType ) 0 )
    461a:	89 85       	ldd	r24, Y+9	; 0x09
    461c:	9a 85       	ldd	r25, Y+10	; 0x0a
    461e:	00 97       	sbiw	r24, 0x00	; 0
    4620:	21 f4       	brne	.+8      	; 0x462a <xQueueGenericSend+0x80>
				{
					/* The queue was full and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
    4622:	0f 90       	pop	r0
    4624:	0f be       	out	0x3f, r0	; 63

					/* Return to the original privilege level before exiting
					the function. */
					traceQUEUE_SEND_FAILED( pxQueue );
					return errQUEUE_FULL;
    4626:	1c 86       	std	Y+12, r1	; 0x0c
    4628:	54 c0       	rjmp	.+168    	; 0x46d2 <xQueueGenericSend+0x128>
				}
				else if( xEntryTimeSet == pdFALSE )
    462a:	89 81       	ldd	r24, Y+1	; 0x01
    462c:	88 23       	and	r24, r24
    462e:	31 f4       	brne	.+12     	; 0x463c <xQueueGenericSend+0x92>
				{
					/* The queue was full and a block time was specified so
					configure the timeout structure. */
					vTaskSetTimeOutState( &xTimeOut );
    4630:	ce 01       	movw	r24, r28
    4632:	02 96       	adiw	r24, 0x02	; 2
    4634:	0e 94 8d 2b 	call	0x571a	; 0x571a <vTaskSetTimeOutState>
					xEntryTimeSet = pdTRUE;
    4638:	81 e0       	ldi	r24, 0x01	; 1
    463a:	89 83       	std	Y+1, r24	; 0x01
				}
			}
		}
		taskEXIT_CRITICAL();
    463c:	0f 90       	pop	r0
    463e:	0f be       	out	0x3f, r0	; 63

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
    4640:	0e 94 e9 28 	call	0x51d2	; 0x51d2 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
    4644:	0f b6       	in	r0, 0x3f	; 63
    4646:	f8 94       	cli
    4648:	0f 92       	push	r0
    464a:	ed 81       	ldd	r30, Y+5	; 0x05
    464c:	fe 81       	ldd	r31, Y+6	; 0x06
    464e:	85 8d       	ldd	r24, Z+29	; 0x1d
    4650:	8f 3f       	cpi	r24, 0xFF	; 255
    4652:	19 f4       	brne	.+6      	; 0x465a <xQueueGenericSend+0xb0>
    4654:	ed 81       	ldd	r30, Y+5	; 0x05
    4656:	fe 81       	ldd	r31, Y+6	; 0x06
    4658:	15 8e       	std	Z+29, r1	; 0x1d
    465a:	ed 81       	ldd	r30, Y+5	; 0x05
    465c:	fe 81       	ldd	r31, Y+6	; 0x06
    465e:	86 8d       	ldd	r24, Z+30	; 0x1e
    4660:	8f 3f       	cpi	r24, 0xFF	; 255
    4662:	19 f4       	brne	.+6      	; 0x466a <xQueueGenericSend+0xc0>
    4664:	ed 81       	ldd	r30, Y+5	; 0x05
    4666:	fe 81       	ldd	r31, Y+6	; 0x06
    4668:	16 8e       	std	Z+30, r1	; 0x1e
    466a:	0f 90       	pop	r0
    466c:	0f be       	out	0x3f, r0	; 63

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
    466e:	ce 01       	movw	r24, r28
    4670:	02 96       	adiw	r24, 0x02	; 2
    4672:	9e 01       	movw	r18, r28
    4674:	27 5f       	subi	r18, 0xF7	; 247
    4676:	3f 4f       	sbci	r19, 0xFF	; 255
    4678:	b9 01       	movw	r22, r18
    467a:	0e 94 a6 2b 	call	0x574c	; 0x574c <xTaskCheckForTimeOut>
    467e:	88 23       	and	r24, r24
    4680:	09 f5       	brne	.+66     	; 0x46c4 <xQueueGenericSend+0x11a>
		{
			if( prvIsQueueFull( pxQueue ) != pdFALSE )
    4682:	8d 81       	ldd	r24, Y+5	; 0x05
    4684:	9e 81       	ldd	r25, Y+6	; 0x06
    4686:	0e 94 74 26 	call	0x4ce8	; 0x4ce8 <prvIsQueueFull>
    468a:	88 23       	and	r24, r24
    468c:	a1 f0       	breq	.+40     	; 0x46b6 <xQueueGenericSend+0x10c>
			{
				traceBLOCKING_ON_QUEUE_SEND( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToSend ), xTicksToWait );
    468e:	8d 81       	ldd	r24, Y+5	; 0x05
    4690:	9e 81       	ldd	r25, Y+6	; 0x06
    4692:	08 96       	adiw	r24, 0x08	; 8
    4694:	29 85       	ldd	r18, Y+9	; 0x09
    4696:	3a 85       	ldd	r19, Y+10	; 0x0a
    4698:	b9 01       	movw	r22, r18
    469a:	0e 94 ef 2a 	call	0x55de	; 0x55de <vTaskPlaceOnEventList>
				/* Unlocking the queue means queue events can effect the
				event list.  It is possible	that interrupts occurring now
				remove this task from the event	list again - but as the
				scheduler is suspended the task will go onto the pending
				ready last instead of the actual ready list. */
				prvUnlockQueue( pxQueue );
    469e:	8d 81       	ldd	r24, Y+5	; 0x05
    46a0:	9e 81       	ldd	r25, Y+6	; 0x06
    46a2:	0e 94 ed 25 	call	0x4bda	; 0x4bda <prvUnlockQueue>
				/* Resuming the scheduler will move tasks from the pending
				ready list into the ready list - so it is feasible that this
				task is already in a ready list before it yields - in which
				case the yield will not cause a context switch unless there
				is also a higher priority task in the pending ready list. */
				if( xTaskResumeAll() == pdFALSE )
    46a6:	0e 94 f5 28 	call	0x51ea	; 0x51ea <xTaskResumeAll>
    46aa:	88 23       	and	r24, r24
    46ac:	09 f0       	breq	.+2      	; 0x46b0 <xQueueGenericSend+0x106>
    46ae:	8f cf       	rjmp	.-226    	; 0x45ce <xQueueGenericSend+0x24>
				{
					portYIELD_WITHIN_API();
    46b0:	0e 94 fa 20 	call	0x41f4	; 0x41f4 <vPortYield>
    46b4:	8c cf       	rjmp	.-232    	; 0x45ce <xQueueGenericSend+0x24>
				}
			}
			else
			{
				/* Try again. */
				prvUnlockQueue( pxQueue );
    46b6:	8d 81       	ldd	r24, Y+5	; 0x05
    46b8:	9e 81       	ldd	r25, Y+6	; 0x06
    46ba:	0e 94 ed 25 	call	0x4bda	; 0x4bda <prvUnlockQueue>
				( void ) xTaskResumeAll();
    46be:	0e 94 f5 28 	call	0x51ea	; 0x51ea <xTaskResumeAll>
    46c2:	85 cf       	rjmp	.-246    	; 0x45ce <xQueueGenericSend+0x24>
			}
		}
		else
		{
			/* The timeout has expired. */
			prvUnlockQueue( pxQueue );
    46c4:	8d 81       	ldd	r24, Y+5	; 0x05
    46c6:	9e 81       	ldd	r25, Y+6	; 0x06
    46c8:	0e 94 ed 25 	call	0x4bda	; 0x4bda <prvUnlockQueue>
			( void ) xTaskResumeAll();
    46cc:	0e 94 f5 28 	call	0x51ea	; 0x51ea <xTaskResumeAll>

			/* Return to the original privilege level before exiting the
			function. */
			traceQUEUE_SEND_FAILED( pxQueue );
			return errQUEUE_FULL;
    46d0:	1c 86       	std	Y+12, r1	; 0x0c
    46d2:	8c 85       	ldd	r24, Y+12	; 0x0c
		}
	}
}
    46d4:	2c 96       	adiw	r28, 0x0c	; 12
    46d6:	0f b6       	in	r0, 0x3f	; 63
    46d8:	f8 94       	cli
    46da:	de bf       	out	0x3e, r29	; 62
    46dc:	0f be       	out	0x3f, r0	; 63
    46de:	cd bf       	out	0x3d, r28	; 61
    46e0:	cf 91       	pop	r28
    46e2:	df 91       	pop	r29
    46e4:	08 95       	ret

000046e6 <xQueueGenericSendFromISR>:

#endif /* configUSE_ALTERNATIVE_API */
/*-----------------------------------------------------------*/

signed portBASE_TYPE xQueueGenericSendFromISR( xQueueHandle pxQueue, const void * const pvItemToQueue, signed portBASE_TYPE *pxHigherPriorityTaskWoken, portBASE_TYPE xCopyPosition )
{
    46e6:	df 93       	push	r29
    46e8:	cf 93       	push	r28
    46ea:	cd b7       	in	r28, 0x3d	; 61
    46ec:	de b7       	in	r29, 0x3e	; 62
    46ee:	29 97       	sbiw	r28, 0x09	; 9
    46f0:	0f b6       	in	r0, 0x3f	; 63
    46f2:	f8 94       	cli
    46f4:	de bf       	out	0x3e, r29	; 62
    46f6:	0f be       	out	0x3f, r0	; 63
    46f8:	cd bf       	out	0x3d, r28	; 61
    46fa:	9c 83       	std	Y+4, r25	; 0x04
    46fc:	8b 83       	std	Y+3, r24	; 0x03
    46fe:	7e 83       	std	Y+6, r23	; 0x06
    4700:	6d 83       	std	Y+5, r22	; 0x05
    4702:	58 87       	std	Y+8, r21	; 0x08
    4704:	4f 83       	std	Y+7, r20	; 0x07
    4706:	29 87       	std	Y+9, r18	; 0x09
	/* Similar to xQueueGenericSend, except we don't block if there is no room
	in the queue.  Also we don't directly wake a task that was blocked on a
	queue read, instead we return a flag to say whether a context switch is
	required or not (i.e. has a task with a higher priority than us been woken
	by this	post). */
	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
    4708:	19 82       	std	Y+1, r1	; 0x01
	{
		if( pxQueue->uxMessagesWaiting < pxQueue->uxLength )
    470a:	eb 81       	ldd	r30, Y+3	; 0x03
    470c:	fc 81       	ldd	r31, Y+4	; 0x04
    470e:	92 8d       	ldd	r25, Z+26	; 0x1a
    4710:	eb 81       	ldd	r30, Y+3	; 0x03
    4712:	fc 81       	ldd	r31, Y+4	; 0x04
    4714:	83 8d       	ldd	r24, Z+27	; 0x1b
    4716:	98 17       	cp	r25, r24
    4718:	40 f5       	brcc	.+80     	; 0x476a <xQueueGenericSendFromISR+0x84>
		{
			traceQUEUE_SEND_FROM_ISR( pxQueue );

			prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
    471a:	8b 81       	ldd	r24, Y+3	; 0x03
    471c:	9c 81       	ldd	r25, Y+4	; 0x04
    471e:	2d 81       	ldd	r18, Y+5	; 0x05
    4720:	3e 81       	ldd	r19, Y+6	; 0x06
    4722:	b9 01       	movw	r22, r18
    4724:	49 85       	ldd	r20, Y+9	; 0x09
    4726:	0e 94 10 25 	call	0x4a20	; 0x4a20 <prvCopyDataToQueue>

			/* If the queue is locked we do not alter the event list.  This will
			be done when the queue is unlocked later. */
			if( pxQueue->xTxLock == queueUNLOCKED )
    472a:	eb 81       	ldd	r30, Y+3	; 0x03
    472c:	fc 81       	ldd	r31, Y+4	; 0x04
    472e:	86 8d       	ldd	r24, Z+30	; 0x1e
    4730:	8f 3f       	cpi	r24, 0xFF	; 255
    4732:	89 f4       	brne	.+34     	; 0x4756 <xQueueGenericSendFromISR+0x70>
			{
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
    4734:	eb 81       	ldd	r30, Y+3	; 0x03
    4736:	fc 81       	ldd	r31, Y+4	; 0x04
    4738:	81 89       	ldd	r24, Z+17	; 0x11
    473a:	88 23       	and	r24, r24
    473c:	99 f0       	breq	.+38     	; 0x4764 <xQueueGenericSendFromISR+0x7e>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
    473e:	8b 81       	ldd	r24, Y+3	; 0x03
    4740:	9c 81       	ldd	r25, Y+4	; 0x04
    4742:	41 96       	adiw	r24, 0x11	; 17
    4744:	0e 94 25 2b 	call	0x564a	; 0x564a <xTaskRemoveFromEventList>
    4748:	88 23       	and	r24, r24
    474a:	61 f0       	breq	.+24     	; 0x4764 <xQueueGenericSendFromISR+0x7e>
					{
						/* The task waiting has a higher priority so record that a
						context	switch is required. */
						*pxHigherPriorityTaskWoken = pdTRUE;
    474c:	ef 81       	ldd	r30, Y+7	; 0x07
    474e:	f8 85       	ldd	r31, Y+8	; 0x08
    4750:	81 e0       	ldi	r24, 0x01	; 1
    4752:	80 83       	st	Z, r24
    4754:	07 c0       	rjmp	.+14     	; 0x4764 <xQueueGenericSendFromISR+0x7e>
			}
			else
			{
				/* Increment the lock count so the task that unlocks the queue
				knows that data was posted while it was locked. */
				++( pxQueue->xTxLock );
    4756:	eb 81       	ldd	r30, Y+3	; 0x03
    4758:	fc 81       	ldd	r31, Y+4	; 0x04
    475a:	86 8d       	ldd	r24, Z+30	; 0x1e
    475c:	8f 5f       	subi	r24, 0xFF	; 255
    475e:	eb 81       	ldd	r30, Y+3	; 0x03
    4760:	fc 81       	ldd	r31, Y+4	; 0x04
    4762:	86 8f       	std	Z+30, r24	; 0x1e
			}

			xReturn = pdPASS;
    4764:	81 e0       	ldi	r24, 0x01	; 1
    4766:	8a 83       	std	Y+2, r24	; 0x02
    4768:	01 c0       	rjmp	.+2      	; 0x476c <xQueueGenericSendFromISR+0x86>
		}
		else
		{
			traceQUEUE_SEND_FROM_ISR_FAILED( pxQueue );
			xReturn = errQUEUE_FULL;
    476a:	1a 82       	std	Y+2, r1	; 0x02
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
    476c:	8a 81       	ldd	r24, Y+2	; 0x02
}
    476e:	29 96       	adiw	r28, 0x09	; 9
    4770:	0f b6       	in	r0, 0x3f	; 63
    4772:	f8 94       	cli
    4774:	de bf       	out	0x3e, r29	; 62
    4776:	0f be       	out	0x3f, r0	; 63
    4778:	cd bf       	out	0x3d, r28	; 61
    477a:	cf 91       	pop	r28
    477c:	df 91       	pop	r29
    477e:	08 95       	ret

00004780 <xQueueGenericReceive>:
/*-----------------------------------------------------------*/

signed portBASE_TYPE xQueueGenericReceive( xQueueHandle pxQueue, void * const pvBuffer, portTickType xTicksToWait, portBASE_TYPE xJustPeeking )
{
    4780:	df 93       	push	r29
    4782:	cf 93       	push	r28
    4784:	cd b7       	in	r28, 0x3d	; 61
    4786:	de b7       	in	r29, 0x3e	; 62
    4788:	2e 97       	sbiw	r28, 0x0e	; 14
    478a:	0f b6       	in	r0, 0x3f	; 63
    478c:	f8 94       	cli
    478e:	de bf       	out	0x3e, r29	; 62
    4790:	0f be       	out	0x3f, r0	; 63
    4792:	cd bf       	out	0x3d, r28	; 61
    4794:	98 87       	std	Y+8, r25	; 0x08
    4796:	8f 83       	std	Y+7, r24	; 0x07
    4798:	7a 87       	std	Y+10, r23	; 0x0a
    479a:	69 87       	std	Y+9, r22	; 0x09
    479c:	5c 87       	std	Y+12, r21	; 0x0c
    479e:	4b 87       	std	Y+11, r20	; 0x0b
    47a0:	2d 87       	std	Y+13, r18	; 0x0d
signed portBASE_TYPE xEntryTimeSet = pdFALSE;
    47a2:	1b 82       	std	Y+3, r1	; 0x03
	statements within the function itself.  This is done in the interest
	of execution time efficiency. */

	for( ;; )
	{
		taskENTER_CRITICAL();
    47a4:	0f b6       	in	r0, 0x3f	; 63
    47a6:	f8 94       	cli
    47a8:	0f 92       	push	r0
		{
			/* Is there data in the queue now?  To be running we must be
			the highest priority task wanting to access the queue. */
			if( pxQueue->uxMessagesWaiting > ( unsigned portBASE_TYPE ) 0 )
    47aa:	ef 81       	ldd	r30, Y+7	; 0x07
    47ac:	f8 85       	ldd	r31, Y+8	; 0x08
    47ae:	82 8d       	ldd	r24, Z+26	; 0x1a
    47b0:	88 23       	and	r24, r24
    47b2:	09 f4       	brne	.+2      	; 0x47b6 <xQueueGenericReceive+0x36>
    47b4:	3f c0       	rjmp	.+126    	; 0x4834 <xQueueGenericReceive+0xb4>
			{
				/* Remember our read position in case we are just peeking. */
				pcOriginalReadPosition = pxQueue->pcReadFrom;
    47b6:	ef 81       	ldd	r30, Y+7	; 0x07
    47b8:	f8 85       	ldd	r31, Y+8	; 0x08
    47ba:	86 81       	ldd	r24, Z+6	; 0x06
    47bc:	97 81       	ldd	r25, Z+7	; 0x07
    47be:	9a 83       	std	Y+2, r25	; 0x02
    47c0:	89 83       	std	Y+1, r24	; 0x01

				prvCopyDataFromQueue( pxQueue, pvBuffer );
    47c2:	8f 81       	ldd	r24, Y+7	; 0x07
    47c4:	98 85       	ldd	r25, Y+8	; 0x08
    47c6:	29 85       	ldd	r18, Y+9	; 0x09
    47c8:	3a 85       	ldd	r19, Y+10	; 0x0a
    47ca:	b9 01       	movw	r22, r18
    47cc:	0e 94 a5 25 	call	0x4b4a	; 0x4b4a <prvCopyDataFromQueue>

				if( xJustPeeking == pdFALSE )
    47d0:	8d 85       	ldd	r24, Y+13	; 0x0d
    47d2:	88 23       	and	r24, r24
    47d4:	b1 f4       	brne	.+44     	; 0x4802 <xQueueGenericReceive+0x82>
				{
					traceQUEUE_RECEIVE( pxQueue );

					/* We are actually removing data. */
					--( pxQueue->uxMessagesWaiting );
    47d6:	ef 81       	ldd	r30, Y+7	; 0x07
    47d8:	f8 85       	ldd	r31, Y+8	; 0x08
    47da:	82 8d       	ldd	r24, Z+26	; 0x1a
    47dc:	81 50       	subi	r24, 0x01	; 1
    47de:	ef 81       	ldd	r30, Y+7	; 0x07
    47e0:	f8 85       	ldd	r31, Y+8	; 0x08
    47e2:	82 8f       	std	Z+26, r24	; 0x1a
							pxQueue->pxMutexHolder = xTaskGetCurrentTaskHandle();
						}
					}
					#endif

					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
    47e4:	ef 81       	ldd	r30, Y+7	; 0x07
    47e6:	f8 85       	ldd	r31, Y+8	; 0x08
    47e8:	80 85       	ldd	r24, Z+8	; 0x08
    47ea:	88 23       	and	r24, r24
    47ec:	f1 f0       	breq	.+60     	; 0x482a <xQueueGenericReceive+0xaa>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) == pdTRUE )
    47ee:	8f 81       	ldd	r24, Y+7	; 0x07
    47f0:	98 85       	ldd	r25, Y+8	; 0x08
    47f2:	08 96       	adiw	r24, 0x08	; 8
    47f4:	0e 94 25 2b 	call	0x564a	; 0x564a <xTaskRemoveFromEventList>
    47f8:	81 30       	cpi	r24, 0x01	; 1
    47fa:	b9 f4       	brne	.+46     	; 0x482a <xQueueGenericReceive+0xaa>
						{
							portYIELD_WITHIN_API();
    47fc:	0e 94 fa 20 	call	0x41f4	; 0x41f4 <vPortYield>
    4800:	14 c0       	rjmp	.+40     	; 0x482a <xQueueGenericReceive+0xaa>
				{
					traceQUEUE_PEEK( pxQueue );

					/* We are not removing the data, so reset our read
					pointer. */
					pxQueue->pcReadFrom = pcOriginalReadPosition;
    4802:	ef 81       	ldd	r30, Y+7	; 0x07
    4804:	f8 85       	ldd	r31, Y+8	; 0x08
    4806:	89 81       	ldd	r24, Y+1	; 0x01
    4808:	9a 81       	ldd	r25, Y+2	; 0x02
    480a:	97 83       	std	Z+7, r25	; 0x07
    480c:	86 83       	std	Z+6, r24	; 0x06

					/* The data is being left in the queue, so see if there are
					any other tasks waiting for the data. */
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
    480e:	ef 81       	ldd	r30, Y+7	; 0x07
    4810:	f8 85       	ldd	r31, Y+8	; 0x08
    4812:	81 89       	ldd	r24, Z+17	; 0x11
    4814:	88 23       	and	r24, r24
    4816:	49 f0       	breq	.+18     	; 0x482a <xQueueGenericReceive+0xaa>
					{
						/* Tasks that are removed from the event list will get added to
						the pending ready list as the scheduler is still suspended. */
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
    4818:	8f 81       	ldd	r24, Y+7	; 0x07
    481a:	98 85       	ldd	r25, Y+8	; 0x08
    481c:	41 96       	adiw	r24, 0x11	; 17
    481e:	0e 94 25 2b 	call	0x564a	; 0x564a <xTaskRemoveFromEventList>
    4822:	88 23       	and	r24, r24
    4824:	11 f0       	breq	.+4      	; 0x482a <xQueueGenericReceive+0xaa>
						{
							/* The task waiting has a higher priority than this task. */
							portYIELD_WITHIN_API();
    4826:	0e 94 fa 20 	call	0x41f4	; 0x41f4 <vPortYield>
						}
					}

				}

				taskEXIT_CRITICAL();
    482a:	0f 90       	pop	r0
    482c:	0f be       	out	0x3f, r0	; 63
				return pdPASS;
    482e:	81 e0       	ldi	r24, 0x01	; 1
    4830:	8e 87       	std	Y+14, r24	; 0x0e
    4832:	5c c0       	rjmp	.+184    	; 0x48ec <xQueueGenericReceive+0x16c>
			}
			else
			{
				if( xTicksToWait == ( portTickType ) 0 )
    4834:	8b 85       	ldd	r24, Y+11	; 0x0b
    4836:	9c 85       	ldd	r25, Y+12	; 0x0c
    4838:	00 97       	sbiw	r24, 0x00	; 0
    483a:	21 f4       	brne	.+8      	; 0x4844 <xQueueGenericReceive+0xc4>
				{
					/* The queue was empty and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
    483c:	0f 90       	pop	r0
    483e:	0f be       	out	0x3f, r0	; 63
					traceQUEUE_RECEIVE_FAILED( pxQueue );
					return errQUEUE_EMPTY;
    4840:	1e 86       	std	Y+14, r1	; 0x0e
    4842:	54 c0       	rjmp	.+168    	; 0x48ec <xQueueGenericReceive+0x16c>
				}
				else if( xEntryTimeSet == pdFALSE )
    4844:	8b 81       	ldd	r24, Y+3	; 0x03
    4846:	88 23       	and	r24, r24
    4848:	31 f4       	brne	.+12     	; 0x4856 <xQueueGenericReceive+0xd6>
				{
					/* The queue was empty and a block time was specified so
					configure the timeout structure. */
					vTaskSetTimeOutState( &xTimeOut );
    484a:	ce 01       	movw	r24, r28
    484c:	04 96       	adiw	r24, 0x04	; 4
    484e:	0e 94 8d 2b 	call	0x571a	; 0x571a <vTaskSetTimeOutState>
					xEntryTimeSet = pdTRUE;
    4852:	81 e0       	ldi	r24, 0x01	; 1
    4854:	8b 83       	std	Y+3, r24	; 0x03
				}
			}
		}
		taskEXIT_CRITICAL();
    4856:	0f 90       	pop	r0
    4858:	0f be       	out	0x3f, r0	; 63

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
    485a:	0e 94 e9 28 	call	0x51d2	; 0x51d2 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
    485e:	0f b6       	in	r0, 0x3f	; 63
    4860:	f8 94       	cli
    4862:	0f 92       	push	r0
    4864:	ef 81       	ldd	r30, Y+7	; 0x07
    4866:	f8 85       	ldd	r31, Y+8	; 0x08
    4868:	85 8d       	ldd	r24, Z+29	; 0x1d
    486a:	8f 3f       	cpi	r24, 0xFF	; 255
    486c:	19 f4       	brne	.+6      	; 0x4874 <xQueueGenericReceive+0xf4>
    486e:	ef 81       	ldd	r30, Y+7	; 0x07
    4870:	f8 85       	ldd	r31, Y+8	; 0x08
    4872:	15 8e       	std	Z+29, r1	; 0x1d
    4874:	ef 81       	ldd	r30, Y+7	; 0x07
    4876:	f8 85       	ldd	r31, Y+8	; 0x08
    4878:	86 8d       	ldd	r24, Z+30	; 0x1e
    487a:	8f 3f       	cpi	r24, 0xFF	; 255
    487c:	19 f4       	brne	.+6      	; 0x4884 <xQueueGenericReceive+0x104>
    487e:	ef 81       	ldd	r30, Y+7	; 0x07
    4880:	f8 85       	ldd	r31, Y+8	; 0x08
    4882:	16 8e       	std	Z+30, r1	; 0x1e
    4884:	0f 90       	pop	r0
    4886:	0f be       	out	0x3f, r0	; 63

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
    4888:	ce 01       	movw	r24, r28
    488a:	04 96       	adiw	r24, 0x04	; 4
    488c:	9e 01       	movw	r18, r28
    488e:	25 5f       	subi	r18, 0xF5	; 245
    4890:	3f 4f       	sbci	r19, 0xFF	; 255
    4892:	b9 01       	movw	r22, r18
    4894:	0e 94 a6 2b 	call	0x574c	; 0x574c <xTaskCheckForTimeOut>
    4898:	88 23       	and	r24, r24
    489a:	09 f5       	brne	.+66     	; 0x48de <xQueueGenericReceive+0x15e>
		{
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
    489c:	8f 81       	ldd	r24, Y+7	; 0x07
    489e:	98 85       	ldd	r25, Y+8	; 0x08
    48a0:	0e 94 41 26 	call	0x4c82	; 0x4c82 <prvIsQueueEmpty>
    48a4:	88 23       	and	r24, r24
    48a6:	a1 f0       	breq	.+40     	; 0x48d0 <xQueueGenericReceive+0x150>
						portEXIT_CRITICAL();
					}
				}
				#endif

				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
    48a8:	8f 81       	ldd	r24, Y+7	; 0x07
    48aa:	98 85       	ldd	r25, Y+8	; 0x08
    48ac:	41 96       	adiw	r24, 0x11	; 17
    48ae:	2b 85       	ldd	r18, Y+11	; 0x0b
    48b0:	3c 85       	ldd	r19, Y+12	; 0x0c
    48b2:	b9 01       	movw	r22, r18
    48b4:	0e 94 ef 2a 	call	0x55de	; 0x55de <vTaskPlaceOnEventList>
				prvUnlockQueue( pxQueue );
    48b8:	8f 81       	ldd	r24, Y+7	; 0x07
    48ba:	98 85       	ldd	r25, Y+8	; 0x08
    48bc:	0e 94 ed 25 	call	0x4bda	; 0x4bda <prvUnlockQueue>
				if( xTaskResumeAll() == pdFALSE )
    48c0:	0e 94 f5 28 	call	0x51ea	; 0x51ea <xTaskResumeAll>
    48c4:	88 23       	and	r24, r24
    48c6:	09 f0       	breq	.+2      	; 0x48ca <xQueueGenericReceive+0x14a>
    48c8:	6d cf       	rjmp	.-294    	; 0x47a4 <xQueueGenericReceive+0x24>
				{
					portYIELD_WITHIN_API();
    48ca:	0e 94 fa 20 	call	0x41f4	; 0x41f4 <vPortYield>
    48ce:	6a cf       	rjmp	.-300    	; 0x47a4 <xQueueGenericReceive+0x24>
				}
			}
			else
			{
				/* Try again. */
				prvUnlockQueue( pxQueue );
    48d0:	8f 81       	ldd	r24, Y+7	; 0x07
    48d2:	98 85       	ldd	r25, Y+8	; 0x08
    48d4:	0e 94 ed 25 	call	0x4bda	; 0x4bda <prvUnlockQueue>
				( void ) xTaskResumeAll();
    48d8:	0e 94 f5 28 	call	0x51ea	; 0x51ea <xTaskResumeAll>
    48dc:	63 cf       	rjmp	.-314    	; 0x47a4 <xQueueGenericReceive+0x24>
			}
		}
		else
		{
			prvUnlockQueue( pxQueue );
    48de:	8f 81       	ldd	r24, Y+7	; 0x07
    48e0:	98 85       	ldd	r25, Y+8	; 0x08
    48e2:	0e 94 ed 25 	call	0x4bda	; 0x4bda <prvUnlockQueue>
			( void ) xTaskResumeAll();
    48e6:	0e 94 f5 28 	call	0x51ea	; 0x51ea <xTaskResumeAll>
			traceQUEUE_RECEIVE_FAILED( pxQueue );
			return errQUEUE_EMPTY;
    48ea:	1e 86       	std	Y+14, r1	; 0x0e
    48ec:	8e 85       	ldd	r24, Y+14	; 0x0e
		}
	}
}
    48ee:	2e 96       	adiw	r28, 0x0e	; 14
    48f0:	0f b6       	in	r0, 0x3f	; 63
    48f2:	f8 94       	cli
    48f4:	de bf       	out	0x3e, r29	; 62
    48f6:	0f be       	out	0x3f, r0	; 63
    48f8:	cd bf       	out	0x3d, r28	; 61
    48fa:	cf 91       	pop	r28
    48fc:	df 91       	pop	r29
    48fe:	08 95       	ret

00004900 <xQueueReceiveFromISR>:
/*-----------------------------------------------------------*/

signed portBASE_TYPE xQueueReceiveFromISR( xQueueHandle pxQueue, void * const pvBuffer, signed portBASE_TYPE *pxTaskWoken )
{
    4900:	df 93       	push	r29
    4902:	cf 93       	push	r28
    4904:	cd b7       	in	r28, 0x3d	; 61
    4906:	de b7       	in	r29, 0x3e	; 62
    4908:	28 97       	sbiw	r28, 0x08	; 8
    490a:	0f b6       	in	r0, 0x3f	; 63
    490c:	f8 94       	cli
    490e:	de bf       	out	0x3e, r29	; 62
    4910:	0f be       	out	0x3f, r0	; 63
    4912:	cd bf       	out	0x3d, r28	; 61
    4914:	9c 83       	std	Y+4, r25	; 0x04
    4916:	8b 83       	std	Y+3, r24	; 0x03
    4918:	7e 83       	std	Y+6, r23	; 0x06
    491a:	6d 83       	std	Y+5, r22	; 0x05
    491c:	58 87       	std	Y+8, r21	; 0x08
    491e:	4f 83       	std	Y+7, r20	; 0x07

	configASSERT( pxQueue );
	configASSERT( pxTaskWoken );
	configASSERT( !( ( pvBuffer == NULL ) && ( pxQueue->uxItemSize != ( unsigned portBASE_TYPE ) 0U ) ) );

	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
    4920:	19 82       	std	Y+1, r1	; 0x01
	{
		/* We cannot block from an ISR, so check there is data available. */
		if( pxQueue->uxMessagesWaiting > ( unsigned portBASE_TYPE ) 0 )
    4922:	eb 81       	ldd	r30, Y+3	; 0x03
    4924:	fc 81       	ldd	r31, Y+4	; 0x04
    4926:	82 8d       	ldd	r24, Z+26	; 0x1a
    4928:	88 23       	and	r24, r24
    492a:	71 f1       	breq	.+92     	; 0x4988 <xQueueReceiveFromISR+0x88>
		{
			traceQUEUE_RECEIVE_FROM_ISR( pxQueue );

			prvCopyDataFromQueue( pxQueue, pvBuffer );
    492c:	8b 81       	ldd	r24, Y+3	; 0x03
    492e:	9c 81       	ldd	r25, Y+4	; 0x04
    4930:	2d 81       	ldd	r18, Y+5	; 0x05
    4932:	3e 81       	ldd	r19, Y+6	; 0x06
    4934:	b9 01       	movw	r22, r18
    4936:	0e 94 a5 25 	call	0x4b4a	; 0x4b4a <prvCopyDataFromQueue>
			--( pxQueue->uxMessagesWaiting );
    493a:	eb 81       	ldd	r30, Y+3	; 0x03
    493c:	fc 81       	ldd	r31, Y+4	; 0x04
    493e:	82 8d       	ldd	r24, Z+26	; 0x1a
    4940:	81 50       	subi	r24, 0x01	; 1
    4942:	eb 81       	ldd	r30, Y+3	; 0x03
    4944:	fc 81       	ldd	r31, Y+4	; 0x04
    4946:	82 8f       	std	Z+26, r24	; 0x1a

			/* If the queue is locked we will not modify the event list.  Instead
			we update the lock count so the task that unlocks the queue will know
			that an ISR has removed data while the queue was locked. */
			if( pxQueue->xRxLock == queueUNLOCKED )
    4948:	eb 81       	ldd	r30, Y+3	; 0x03
    494a:	fc 81       	ldd	r31, Y+4	; 0x04
    494c:	85 8d       	ldd	r24, Z+29	; 0x1d
    494e:	8f 3f       	cpi	r24, 0xFF	; 255
    4950:	89 f4       	brne	.+34     	; 0x4974 <xQueueReceiveFromISR+0x74>
			{
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
    4952:	eb 81       	ldd	r30, Y+3	; 0x03
    4954:	fc 81       	ldd	r31, Y+4	; 0x04
    4956:	80 85       	ldd	r24, Z+8	; 0x08
    4958:	88 23       	and	r24, r24
    495a:	99 f0       	breq	.+38     	; 0x4982 <xQueueReceiveFromISR+0x82>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
    495c:	8b 81       	ldd	r24, Y+3	; 0x03
    495e:	9c 81       	ldd	r25, Y+4	; 0x04
    4960:	08 96       	adiw	r24, 0x08	; 8
    4962:	0e 94 25 2b 	call	0x564a	; 0x564a <xTaskRemoveFromEventList>
    4966:	88 23       	and	r24, r24
    4968:	61 f0       	breq	.+24     	; 0x4982 <xQueueReceiveFromISR+0x82>
					{
						/* The task waiting has a higher priority than us so
						force a context switch. */
						*pxTaskWoken = pdTRUE;
    496a:	ef 81       	ldd	r30, Y+7	; 0x07
    496c:	f8 85       	ldd	r31, Y+8	; 0x08
    496e:	81 e0       	ldi	r24, 0x01	; 1
    4970:	80 83       	st	Z, r24
    4972:	07 c0       	rjmp	.+14     	; 0x4982 <xQueueReceiveFromISR+0x82>
			}
			else
			{
				/* Increment the lock count so the task that unlocks the queue
				knows that data was removed while it was locked. */
				++( pxQueue->xRxLock );
    4974:	eb 81       	ldd	r30, Y+3	; 0x03
    4976:	fc 81       	ldd	r31, Y+4	; 0x04
    4978:	85 8d       	ldd	r24, Z+29	; 0x1d
    497a:	8f 5f       	subi	r24, 0xFF	; 255
    497c:	eb 81       	ldd	r30, Y+3	; 0x03
    497e:	fc 81       	ldd	r31, Y+4	; 0x04
    4980:	85 8f       	std	Z+29, r24	; 0x1d
			}

			xReturn = pdPASS;
    4982:	81 e0       	ldi	r24, 0x01	; 1
    4984:	8a 83       	std	Y+2, r24	; 0x02
    4986:	01 c0       	rjmp	.+2      	; 0x498a <xQueueReceiveFromISR+0x8a>
		}
		else
		{
			xReturn = pdFAIL;
    4988:	1a 82       	std	Y+2, r1	; 0x02
			traceQUEUE_RECEIVE_FROM_ISR_FAILED( pxQueue );
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
    498a:	8a 81       	ldd	r24, Y+2	; 0x02
}
    498c:	28 96       	adiw	r28, 0x08	; 8
    498e:	0f b6       	in	r0, 0x3f	; 63
    4990:	f8 94       	cli
    4992:	de bf       	out	0x3e, r29	; 62
    4994:	0f be       	out	0x3f, r0	; 63
    4996:	cd bf       	out	0x3d, r28	; 61
    4998:	cf 91       	pop	r28
    499a:	df 91       	pop	r29
    499c:	08 95       	ret

0000499e <uxQueueMessagesWaiting>:
/*-----------------------------------------------------------*/

unsigned portBASE_TYPE uxQueueMessagesWaiting( const xQueueHandle pxQueue )
{
    499e:	df 93       	push	r29
    49a0:	cf 93       	push	r28
    49a2:	00 d0       	rcall	.+0      	; 0x49a4 <uxQueueMessagesWaiting+0x6>
    49a4:	0f 92       	push	r0
    49a6:	cd b7       	in	r28, 0x3d	; 61
    49a8:	de b7       	in	r29, 0x3e	; 62
    49aa:	9b 83       	std	Y+3, r25	; 0x03
    49ac:	8a 83       	std	Y+2, r24	; 0x02
unsigned portBASE_TYPE uxReturn;

	configASSERT( pxQueue );

	taskENTER_CRITICAL();
    49ae:	0f b6       	in	r0, 0x3f	; 63
    49b0:	f8 94       	cli
    49b2:	0f 92       	push	r0
		uxReturn = pxQueue->uxMessagesWaiting;
    49b4:	ea 81       	ldd	r30, Y+2	; 0x02
    49b6:	fb 81       	ldd	r31, Y+3	; 0x03
    49b8:	82 8d       	ldd	r24, Z+26	; 0x1a
    49ba:	89 83       	std	Y+1, r24	; 0x01
	taskEXIT_CRITICAL();
    49bc:	0f 90       	pop	r0
    49be:	0f be       	out	0x3f, r0	; 63

	return uxReturn;
    49c0:	89 81       	ldd	r24, Y+1	; 0x01
}
    49c2:	0f 90       	pop	r0
    49c4:	0f 90       	pop	r0
    49c6:	0f 90       	pop	r0
    49c8:	cf 91       	pop	r28
    49ca:	df 91       	pop	r29
    49cc:	08 95       	ret

000049ce <uxQueueMessagesWaitingFromISR>:
/*-----------------------------------------------------------*/

unsigned portBASE_TYPE uxQueueMessagesWaitingFromISR( const xQueueHandle pxQueue )
{
    49ce:	df 93       	push	r29
    49d0:	cf 93       	push	r28
    49d2:	00 d0       	rcall	.+0      	; 0x49d4 <uxQueueMessagesWaitingFromISR+0x6>
    49d4:	0f 92       	push	r0
    49d6:	cd b7       	in	r28, 0x3d	; 61
    49d8:	de b7       	in	r29, 0x3e	; 62
    49da:	9b 83       	std	Y+3, r25	; 0x03
    49dc:	8a 83       	std	Y+2, r24	; 0x02
unsigned portBASE_TYPE uxReturn;

	configASSERT( pxQueue );

	uxReturn = pxQueue->uxMessagesWaiting;
    49de:	ea 81       	ldd	r30, Y+2	; 0x02
    49e0:	fb 81       	ldd	r31, Y+3	; 0x03
    49e2:	82 8d       	ldd	r24, Z+26	; 0x1a
    49e4:	89 83       	std	Y+1, r24	; 0x01

	return uxReturn;
    49e6:	89 81       	ldd	r24, Y+1	; 0x01
}
    49e8:	0f 90       	pop	r0
    49ea:	0f 90       	pop	r0
    49ec:	0f 90       	pop	r0
    49ee:	cf 91       	pop	r28
    49f0:	df 91       	pop	r29
    49f2:	08 95       	ret

000049f4 <vQueueDelete>:
/*-----------------------------------------------------------*/

void vQueueDelete( xQueueHandle pxQueue )
{
    49f4:	df 93       	push	r29
    49f6:	cf 93       	push	r28
    49f8:	00 d0       	rcall	.+0      	; 0x49fa <vQueueDelete+0x6>
    49fa:	cd b7       	in	r28, 0x3d	; 61
    49fc:	de b7       	in	r29, 0x3e	; 62
    49fe:	9a 83       	std	Y+2, r25	; 0x02
    4a00:	89 83       	std	Y+1, r24	; 0x01
	configASSERT( pxQueue );

	traceQUEUE_DELETE( pxQueue );
	vQueueUnregisterQueue( pxQueue );
	vPortFree( pxQueue->pcHead );
    4a02:	e9 81       	ldd	r30, Y+1	; 0x01
    4a04:	fa 81       	ldd	r31, Y+2	; 0x02
    4a06:	80 81       	ld	r24, Z
    4a08:	91 81       	ldd	r25, Z+1	; 0x01
    4a0a:	0e 94 da 1d 	call	0x3bb4	; 0x3bb4 <vPortFree>
	vPortFree( pxQueue );
    4a0e:	89 81       	ldd	r24, Y+1	; 0x01
    4a10:	9a 81       	ldd	r25, Y+2	; 0x02
    4a12:	0e 94 da 1d 	call	0x3bb4	; 0x3bb4 <vPortFree>
}
    4a16:	0f 90       	pop	r0
    4a18:	0f 90       	pop	r0
    4a1a:	cf 91       	pop	r28
    4a1c:	df 91       	pop	r29
    4a1e:	08 95       	ret

00004a20 <prvCopyDataToQueue>:
/*-----------------------------------------------------------*/

static void prvCopyDataToQueue( xQUEUE *pxQueue, const void *pvItemToQueue, portBASE_TYPE xPosition )
{
    4a20:	df 93       	push	r29
    4a22:	cf 93       	push	r28
    4a24:	00 d0       	rcall	.+0      	; 0x4a26 <prvCopyDataToQueue+0x6>
    4a26:	00 d0       	rcall	.+0      	; 0x4a28 <prvCopyDataToQueue+0x8>
    4a28:	0f 92       	push	r0
    4a2a:	cd b7       	in	r28, 0x3d	; 61
    4a2c:	de b7       	in	r29, 0x3e	; 62
    4a2e:	9a 83       	std	Y+2, r25	; 0x02
    4a30:	89 83       	std	Y+1, r24	; 0x01
    4a32:	7c 83       	std	Y+4, r23	; 0x04
    4a34:	6b 83       	std	Y+3, r22	; 0x03
    4a36:	4d 83       	std	Y+5, r20	; 0x05
	if( pxQueue->uxItemSize == ( unsigned portBASE_TYPE ) 0 )
    4a38:	e9 81       	ldd	r30, Y+1	; 0x01
    4a3a:	fa 81       	ldd	r31, Y+2	; 0x02
    4a3c:	84 8d       	ldd	r24, Z+28	; 0x1c
    4a3e:	88 23       	and	r24, r24
    4a40:	09 f4       	brne	.+2      	; 0x4a44 <prvCopyDataToQueue+0x24>
    4a42:	74 c0       	rjmp	.+232    	; 0x4b2c <prvCopyDataToQueue+0x10c>
				pxQueue->pxMutexHolder = NULL;
			}
		}
		#endif
	}
	else if( xPosition == queueSEND_TO_BACK )
    4a44:	8d 81       	ldd	r24, Y+5	; 0x05
    4a46:	88 23       	and	r24, r24
    4a48:	99 f5       	brne	.+102    	; 0x4ab0 <prvCopyDataToQueue+0x90>
	{
		memcpy( ( void * ) pxQueue->pcWriteTo, pvItemToQueue, ( unsigned ) pxQueue->uxItemSize );
    4a4a:	e9 81       	ldd	r30, Y+1	; 0x01
    4a4c:	fa 81       	ldd	r31, Y+2	; 0x02
    4a4e:	64 81       	ldd	r22, Z+4	; 0x04
    4a50:	75 81       	ldd	r23, Z+5	; 0x05
    4a52:	e9 81       	ldd	r30, Y+1	; 0x01
    4a54:	fa 81       	ldd	r31, Y+2	; 0x02
    4a56:	84 8d       	ldd	r24, Z+28	; 0x1c
    4a58:	48 2f       	mov	r20, r24
    4a5a:	50 e0       	ldi	r21, 0x00	; 0
    4a5c:	2b 81       	ldd	r18, Y+3	; 0x03
    4a5e:	3c 81       	ldd	r19, Y+4	; 0x04
    4a60:	cb 01       	movw	r24, r22
    4a62:	b9 01       	movw	r22, r18
    4a64:	0e 94 b7 2e 	call	0x5d6e	; 0x5d6e <memcpy>
		pxQueue->pcWriteTo += pxQueue->uxItemSize;
    4a68:	e9 81       	ldd	r30, Y+1	; 0x01
    4a6a:	fa 81       	ldd	r31, Y+2	; 0x02
    4a6c:	24 81       	ldd	r18, Z+4	; 0x04
    4a6e:	35 81       	ldd	r19, Z+5	; 0x05
    4a70:	e9 81       	ldd	r30, Y+1	; 0x01
    4a72:	fa 81       	ldd	r31, Y+2	; 0x02
    4a74:	84 8d       	ldd	r24, Z+28	; 0x1c
    4a76:	88 2f       	mov	r24, r24
    4a78:	90 e0       	ldi	r25, 0x00	; 0
    4a7a:	82 0f       	add	r24, r18
    4a7c:	93 1f       	adc	r25, r19
    4a7e:	e9 81       	ldd	r30, Y+1	; 0x01
    4a80:	fa 81       	ldd	r31, Y+2	; 0x02
    4a82:	95 83       	std	Z+5, r25	; 0x05
    4a84:	84 83       	std	Z+4, r24	; 0x04
		if( pxQueue->pcWriteTo >= pxQueue->pcTail )
    4a86:	e9 81       	ldd	r30, Y+1	; 0x01
    4a88:	fa 81       	ldd	r31, Y+2	; 0x02
    4a8a:	24 81       	ldd	r18, Z+4	; 0x04
    4a8c:	35 81       	ldd	r19, Z+5	; 0x05
    4a8e:	e9 81       	ldd	r30, Y+1	; 0x01
    4a90:	fa 81       	ldd	r31, Y+2	; 0x02
    4a92:	82 81       	ldd	r24, Z+2	; 0x02
    4a94:	93 81       	ldd	r25, Z+3	; 0x03
    4a96:	28 17       	cp	r18, r24
    4a98:	39 07       	cpc	r19, r25
    4a9a:	08 f4       	brcc	.+2      	; 0x4a9e <prvCopyDataToQueue+0x7e>
    4a9c:	47 c0       	rjmp	.+142    	; 0x4b2c <prvCopyDataToQueue+0x10c>
		{
			pxQueue->pcWriteTo = pxQueue->pcHead;
    4a9e:	e9 81       	ldd	r30, Y+1	; 0x01
    4aa0:	fa 81       	ldd	r31, Y+2	; 0x02
    4aa2:	80 81       	ld	r24, Z
    4aa4:	91 81       	ldd	r25, Z+1	; 0x01
    4aa6:	e9 81       	ldd	r30, Y+1	; 0x01
    4aa8:	fa 81       	ldd	r31, Y+2	; 0x02
    4aaa:	95 83       	std	Z+5, r25	; 0x05
    4aac:	84 83       	std	Z+4, r24	; 0x04
    4aae:	3e c0       	rjmp	.+124    	; 0x4b2c <prvCopyDataToQueue+0x10c>
		}
	}
	else
	{
		memcpy( ( void * ) pxQueue->pcReadFrom, pvItemToQueue, ( unsigned ) pxQueue->uxItemSize );
    4ab0:	e9 81       	ldd	r30, Y+1	; 0x01
    4ab2:	fa 81       	ldd	r31, Y+2	; 0x02
    4ab4:	66 81       	ldd	r22, Z+6	; 0x06
    4ab6:	77 81       	ldd	r23, Z+7	; 0x07
    4ab8:	e9 81       	ldd	r30, Y+1	; 0x01
    4aba:	fa 81       	ldd	r31, Y+2	; 0x02
    4abc:	84 8d       	ldd	r24, Z+28	; 0x1c
    4abe:	48 2f       	mov	r20, r24
    4ac0:	50 e0       	ldi	r21, 0x00	; 0
    4ac2:	2b 81       	ldd	r18, Y+3	; 0x03
    4ac4:	3c 81       	ldd	r19, Y+4	; 0x04
    4ac6:	cb 01       	movw	r24, r22
    4ac8:	b9 01       	movw	r22, r18
    4aca:	0e 94 b7 2e 	call	0x5d6e	; 0x5d6e <memcpy>
		pxQueue->pcReadFrom -= pxQueue->uxItemSize;
    4ace:	e9 81       	ldd	r30, Y+1	; 0x01
    4ad0:	fa 81       	ldd	r31, Y+2	; 0x02
    4ad2:	26 81       	ldd	r18, Z+6	; 0x06
    4ad4:	37 81       	ldd	r19, Z+7	; 0x07
    4ad6:	e9 81       	ldd	r30, Y+1	; 0x01
    4ad8:	fa 81       	ldd	r31, Y+2	; 0x02
    4ada:	84 8d       	ldd	r24, Z+28	; 0x1c
    4adc:	88 2f       	mov	r24, r24
    4ade:	90 e0       	ldi	r25, 0x00	; 0
    4ae0:	90 95       	com	r25
    4ae2:	81 95       	neg	r24
    4ae4:	9f 4f       	sbci	r25, 0xFF	; 255
    4ae6:	82 0f       	add	r24, r18
    4ae8:	93 1f       	adc	r25, r19
    4aea:	e9 81       	ldd	r30, Y+1	; 0x01
    4aec:	fa 81       	ldd	r31, Y+2	; 0x02
    4aee:	97 83       	std	Z+7, r25	; 0x07
    4af0:	86 83       	std	Z+6, r24	; 0x06
		if( pxQueue->pcReadFrom < pxQueue->pcHead )
    4af2:	e9 81       	ldd	r30, Y+1	; 0x01
    4af4:	fa 81       	ldd	r31, Y+2	; 0x02
    4af6:	26 81       	ldd	r18, Z+6	; 0x06
    4af8:	37 81       	ldd	r19, Z+7	; 0x07
    4afa:	e9 81       	ldd	r30, Y+1	; 0x01
    4afc:	fa 81       	ldd	r31, Y+2	; 0x02
    4afe:	80 81       	ld	r24, Z
    4b00:	91 81       	ldd	r25, Z+1	; 0x01
    4b02:	28 17       	cp	r18, r24
    4b04:	39 07       	cpc	r19, r25
    4b06:	90 f4       	brcc	.+36     	; 0x4b2c <prvCopyDataToQueue+0x10c>
		{
			pxQueue->pcReadFrom = ( pxQueue->pcTail - pxQueue->uxItemSize );
    4b08:	e9 81       	ldd	r30, Y+1	; 0x01
    4b0a:	fa 81       	ldd	r31, Y+2	; 0x02
    4b0c:	22 81       	ldd	r18, Z+2	; 0x02
    4b0e:	33 81       	ldd	r19, Z+3	; 0x03
    4b10:	e9 81       	ldd	r30, Y+1	; 0x01
    4b12:	fa 81       	ldd	r31, Y+2	; 0x02
    4b14:	84 8d       	ldd	r24, Z+28	; 0x1c
    4b16:	88 2f       	mov	r24, r24
    4b18:	90 e0       	ldi	r25, 0x00	; 0
    4b1a:	90 95       	com	r25
    4b1c:	81 95       	neg	r24
    4b1e:	9f 4f       	sbci	r25, 0xFF	; 255
    4b20:	82 0f       	add	r24, r18
    4b22:	93 1f       	adc	r25, r19
    4b24:	e9 81       	ldd	r30, Y+1	; 0x01
    4b26:	fa 81       	ldd	r31, Y+2	; 0x02
    4b28:	97 83       	std	Z+7, r25	; 0x07
    4b2a:	86 83       	std	Z+6, r24	; 0x06
		}
	}

	++( pxQueue->uxMessagesWaiting );
    4b2c:	e9 81       	ldd	r30, Y+1	; 0x01
    4b2e:	fa 81       	ldd	r31, Y+2	; 0x02
    4b30:	82 8d       	ldd	r24, Z+26	; 0x1a
    4b32:	8f 5f       	subi	r24, 0xFF	; 255
    4b34:	e9 81       	ldd	r30, Y+1	; 0x01
    4b36:	fa 81       	ldd	r31, Y+2	; 0x02
    4b38:	82 8f       	std	Z+26, r24	; 0x1a
}
    4b3a:	0f 90       	pop	r0
    4b3c:	0f 90       	pop	r0
    4b3e:	0f 90       	pop	r0
    4b40:	0f 90       	pop	r0
    4b42:	0f 90       	pop	r0
    4b44:	cf 91       	pop	r28
    4b46:	df 91       	pop	r29
    4b48:	08 95       	ret

00004b4a <prvCopyDataFromQueue>:
/*-----------------------------------------------------------*/

static void prvCopyDataFromQueue( xQUEUE * const pxQueue, const void *pvBuffer )
{
    4b4a:	df 93       	push	r29
    4b4c:	cf 93       	push	r28
    4b4e:	00 d0       	rcall	.+0      	; 0x4b50 <prvCopyDataFromQueue+0x6>
    4b50:	00 d0       	rcall	.+0      	; 0x4b52 <prvCopyDataFromQueue+0x8>
    4b52:	cd b7       	in	r28, 0x3d	; 61
    4b54:	de b7       	in	r29, 0x3e	; 62
    4b56:	9a 83       	std	Y+2, r25	; 0x02
    4b58:	89 83       	std	Y+1, r24	; 0x01
    4b5a:	7c 83       	std	Y+4, r23	; 0x04
    4b5c:	6b 83       	std	Y+3, r22	; 0x03
	if( pxQueue->uxQueueType != queueQUEUE_IS_MUTEX )
    4b5e:	e9 81       	ldd	r30, Y+1	; 0x01
    4b60:	fa 81       	ldd	r31, Y+2	; 0x02
    4b62:	80 81       	ld	r24, Z
    4b64:	91 81       	ldd	r25, Z+1	; 0x01
    4b66:	00 97       	sbiw	r24, 0x00	; 0
    4b68:	89 f1       	breq	.+98     	; 0x4bcc <prvCopyDataFromQueue+0x82>
	{
		pxQueue->pcReadFrom += pxQueue->uxItemSize;
    4b6a:	e9 81       	ldd	r30, Y+1	; 0x01
    4b6c:	fa 81       	ldd	r31, Y+2	; 0x02
    4b6e:	26 81       	ldd	r18, Z+6	; 0x06
    4b70:	37 81       	ldd	r19, Z+7	; 0x07
    4b72:	e9 81       	ldd	r30, Y+1	; 0x01
    4b74:	fa 81       	ldd	r31, Y+2	; 0x02
    4b76:	84 8d       	ldd	r24, Z+28	; 0x1c
    4b78:	88 2f       	mov	r24, r24
    4b7a:	90 e0       	ldi	r25, 0x00	; 0
    4b7c:	82 0f       	add	r24, r18
    4b7e:	93 1f       	adc	r25, r19
    4b80:	e9 81       	ldd	r30, Y+1	; 0x01
    4b82:	fa 81       	ldd	r31, Y+2	; 0x02
    4b84:	97 83       	std	Z+7, r25	; 0x07
    4b86:	86 83       	std	Z+6, r24	; 0x06
		if( pxQueue->pcReadFrom >= pxQueue->pcTail )
    4b88:	e9 81       	ldd	r30, Y+1	; 0x01
    4b8a:	fa 81       	ldd	r31, Y+2	; 0x02
    4b8c:	26 81       	ldd	r18, Z+6	; 0x06
    4b8e:	37 81       	ldd	r19, Z+7	; 0x07
    4b90:	e9 81       	ldd	r30, Y+1	; 0x01
    4b92:	fa 81       	ldd	r31, Y+2	; 0x02
    4b94:	82 81       	ldd	r24, Z+2	; 0x02
    4b96:	93 81       	ldd	r25, Z+3	; 0x03
    4b98:	28 17       	cp	r18, r24
    4b9a:	39 07       	cpc	r19, r25
    4b9c:	40 f0       	brcs	.+16     	; 0x4bae <prvCopyDataFromQueue+0x64>
		{
			pxQueue->pcReadFrom = pxQueue->pcHead;
    4b9e:	e9 81       	ldd	r30, Y+1	; 0x01
    4ba0:	fa 81       	ldd	r31, Y+2	; 0x02
    4ba2:	80 81       	ld	r24, Z
    4ba4:	91 81       	ldd	r25, Z+1	; 0x01
    4ba6:	e9 81       	ldd	r30, Y+1	; 0x01
    4ba8:	fa 81       	ldd	r31, Y+2	; 0x02
    4baa:	97 83       	std	Z+7, r25	; 0x07
    4bac:	86 83       	std	Z+6, r24	; 0x06
		}
		memcpy( ( void * ) pvBuffer, ( void * ) pxQueue->pcReadFrom, ( unsigned ) pxQueue->uxItemSize );
    4bae:	e9 81       	ldd	r30, Y+1	; 0x01
    4bb0:	fa 81       	ldd	r31, Y+2	; 0x02
    4bb2:	46 81       	ldd	r20, Z+6	; 0x06
    4bb4:	57 81       	ldd	r21, Z+7	; 0x07
    4bb6:	e9 81       	ldd	r30, Y+1	; 0x01
    4bb8:	fa 81       	ldd	r31, Y+2	; 0x02
    4bba:	84 8d       	ldd	r24, Z+28	; 0x1c
    4bbc:	28 2f       	mov	r18, r24
    4bbe:	30 e0       	ldi	r19, 0x00	; 0
    4bc0:	8b 81       	ldd	r24, Y+3	; 0x03
    4bc2:	9c 81       	ldd	r25, Y+4	; 0x04
    4bc4:	ba 01       	movw	r22, r20
    4bc6:	a9 01       	movw	r20, r18
    4bc8:	0e 94 b7 2e 	call	0x5d6e	; 0x5d6e <memcpy>
	}
}
    4bcc:	0f 90       	pop	r0
    4bce:	0f 90       	pop	r0
    4bd0:	0f 90       	pop	r0
    4bd2:	0f 90       	pop	r0
    4bd4:	cf 91       	pop	r28
    4bd6:	df 91       	pop	r29
    4bd8:	08 95       	ret

00004bda <prvUnlockQueue>:
/*-----------------------------------------------------------*/

static void prvUnlockQueue( xQueueHandle pxQueue )
{
    4bda:	df 93       	push	r29
    4bdc:	cf 93       	push	r28
    4bde:	00 d0       	rcall	.+0      	; 0x4be0 <prvUnlockQueue+0x6>
    4be0:	cd b7       	in	r28, 0x3d	; 61
    4be2:	de b7       	in	r29, 0x3e	; 62
    4be4:	9a 83       	std	Y+2, r25	; 0x02
    4be6:	89 83       	std	Y+1, r24	; 0x01

	/* The lock counts contains the number of extra data items placed or
	removed from the queue while the queue was locked.  When a queue is
	locked items can be added or removed, but the event lists cannot be
	updated. */
	taskENTER_CRITICAL();
    4be8:	0f b6       	in	r0, 0x3f	; 63
    4bea:	f8 94       	cli
    4bec:	0f 92       	push	r0
    4bee:	15 c0       	rjmp	.+42     	; 0x4c1a <prvUnlockQueue+0x40>
		/* See if data was added to the queue while it was locked. */
		while( pxQueue->xTxLock > queueLOCKED_UNMODIFIED )
		{
			/* Data was posted while the queue was locked.  Are any tasks
			blocked waiting for data to become available? */
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
    4bf0:	e9 81       	ldd	r30, Y+1	; 0x01
    4bf2:	fa 81       	ldd	r31, Y+2	; 0x02
    4bf4:	81 89       	ldd	r24, Z+17	; 0x11
    4bf6:	88 23       	and	r24, r24
    4bf8:	a9 f0       	breq	.+42     	; 0x4c24 <prvUnlockQueue+0x4a>
			{
				/* Tasks that are removed from the event list will get added to
				the pending ready list as the scheduler is still suspended. */
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
    4bfa:	89 81       	ldd	r24, Y+1	; 0x01
    4bfc:	9a 81       	ldd	r25, Y+2	; 0x02
    4bfe:	41 96       	adiw	r24, 0x11	; 17
    4c00:	0e 94 25 2b 	call	0x564a	; 0x564a <xTaskRemoveFromEventList>
    4c04:	88 23       	and	r24, r24
    4c06:	11 f0       	breq	.+4      	; 0x4c0c <prvUnlockQueue+0x32>
				{
					/* The task waiting has a higher priority so record that a
					context	switch is required. */
					vTaskMissedYield();
    4c08:	0e 94 03 2c 	call	0x5806	; 0x5806 <vTaskMissedYield>
				}

				--( pxQueue->xTxLock );
    4c0c:	e9 81       	ldd	r30, Y+1	; 0x01
    4c0e:	fa 81       	ldd	r31, Y+2	; 0x02
    4c10:	86 8d       	ldd	r24, Z+30	; 0x1e
    4c12:	81 50       	subi	r24, 0x01	; 1
    4c14:	e9 81       	ldd	r30, Y+1	; 0x01
    4c16:	fa 81       	ldd	r31, Y+2	; 0x02
    4c18:	86 8f       	std	Z+30, r24	; 0x1e
	locked items can be added or removed, but the event lists cannot be
	updated. */
	taskENTER_CRITICAL();
	{
		/* See if data was added to the queue while it was locked. */
		while( pxQueue->xTxLock > queueLOCKED_UNMODIFIED )
    4c1a:	e9 81       	ldd	r30, Y+1	; 0x01
    4c1c:	fa 81       	ldd	r31, Y+2	; 0x02
    4c1e:	86 8d       	ldd	r24, Z+30	; 0x1e
    4c20:	18 16       	cp	r1, r24
    4c22:	34 f3       	brlt	.-52     	; 0x4bf0 <prvUnlockQueue+0x16>
			{
				break;
			}
		}

		pxQueue->xTxLock = queueUNLOCKED;
    4c24:	e9 81       	ldd	r30, Y+1	; 0x01
    4c26:	fa 81       	ldd	r31, Y+2	; 0x02
    4c28:	8f ef       	ldi	r24, 0xFF	; 255
    4c2a:	86 8f       	std	Z+30, r24	; 0x1e
	}
	taskEXIT_CRITICAL();
    4c2c:	0f 90       	pop	r0
    4c2e:	0f be       	out	0x3f, r0	; 63

	/* Do the same for the Rx lock. */
	taskENTER_CRITICAL();
    4c30:	0f b6       	in	r0, 0x3f	; 63
    4c32:	f8 94       	cli
    4c34:	0f 92       	push	r0
    4c36:	15 c0       	rjmp	.+42     	; 0x4c62 <prvUnlockQueue+0x88>
	{
		while( pxQueue->xRxLock > queueLOCKED_UNMODIFIED )
		{
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
    4c38:	e9 81       	ldd	r30, Y+1	; 0x01
    4c3a:	fa 81       	ldd	r31, Y+2	; 0x02
    4c3c:	80 85       	ldd	r24, Z+8	; 0x08
    4c3e:	88 23       	and	r24, r24
    4c40:	a9 f0       	breq	.+42     	; 0x4c6c <prvUnlockQueue+0x92>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
    4c42:	89 81       	ldd	r24, Y+1	; 0x01
    4c44:	9a 81       	ldd	r25, Y+2	; 0x02
    4c46:	08 96       	adiw	r24, 0x08	; 8
    4c48:	0e 94 25 2b 	call	0x564a	; 0x564a <xTaskRemoveFromEventList>
    4c4c:	88 23       	and	r24, r24
    4c4e:	11 f0       	breq	.+4      	; 0x4c54 <prvUnlockQueue+0x7a>
				{
					vTaskMissedYield();
    4c50:	0e 94 03 2c 	call	0x5806	; 0x5806 <vTaskMissedYield>
				}

				--( pxQueue->xRxLock );
    4c54:	e9 81       	ldd	r30, Y+1	; 0x01
    4c56:	fa 81       	ldd	r31, Y+2	; 0x02
    4c58:	85 8d       	ldd	r24, Z+29	; 0x1d
    4c5a:	81 50       	subi	r24, 0x01	; 1
    4c5c:	e9 81       	ldd	r30, Y+1	; 0x01
    4c5e:	fa 81       	ldd	r31, Y+2	; 0x02
    4c60:	85 8f       	std	Z+29, r24	; 0x1d
	taskEXIT_CRITICAL();

	/* Do the same for the Rx lock. */
	taskENTER_CRITICAL();
	{
		while( pxQueue->xRxLock > queueLOCKED_UNMODIFIED )
    4c62:	e9 81       	ldd	r30, Y+1	; 0x01
    4c64:	fa 81       	ldd	r31, Y+2	; 0x02
    4c66:	85 8d       	ldd	r24, Z+29	; 0x1d
    4c68:	18 16       	cp	r1, r24
    4c6a:	34 f3       	brlt	.-52     	; 0x4c38 <prvUnlockQueue+0x5e>
			{
				break;
			}
		}

		pxQueue->xRxLock = queueUNLOCKED;
    4c6c:	e9 81       	ldd	r30, Y+1	; 0x01
    4c6e:	fa 81       	ldd	r31, Y+2	; 0x02
    4c70:	8f ef       	ldi	r24, 0xFF	; 255
    4c72:	85 8f       	std	Z+29, r24	; 0x1d
	}
	taskEXIT_CRITICAL();
    4c74:	0f 90       	pop	r0
    4c76:	0f be       	out	0x3f, r0	; 63
}
    4c78:	0f 90       	pop	r0
    4c7a:	0f 90       	pop	r0
    4c7c:	cf 91       	pop	r28
    4c7e:	df 91       	pop	r29
    4c80:	08 95       	ret

00004c82 <prvIsQueueEmpty>:
/*-----------------------------------------------------------*/

static signed portBASE_TYPE prvIsQueueEmpty( const xQueueHandle pxQueue )
{
    4c82:	df 93       	push	r29
    4c84:	cf 93       	push	r28
    4c86:	00 d0       	rcall	.+0      	; 0x4c88 <prvIsQueueEmpty+0x6>
    4c88:	0f 92       	push	r0
    4c8a:	cd b7       	in	r28, 0x3d	; 61
    4c8c:	de b7       	in	r29, 0x3e	; 62
    4c8e:	9b 83       	std	Y+3, r25	; 0x03
    4c90:	8a 83       	std	Y+2, r24	; 0x02
signed portBASE_TYPE xReturn;

	taskENTER_CRITICAL();
    4c92:	0f b6       	in	r0, 0x3f	; 63
    4c94:	f8 94       	cli
    4c96:	0f 92       	push	r0
		xReturn = ( pxQueue->uxMessagesWaiting == ( unsigned portBASE_TYPE ) 0 );
    4c98:	ea 81       	ldd	r30, Y+2	; 0x02
    4c9a:	fb 81       	ldd	r31, Y+3	; 0x03
    4c9c:	82 8d       	ldd	r24, Z+26	; 0x1a
    4c9e:	19 82       	std	Y+1, r1	; 0x01
    4ca0:	88 23       	and	r24, r24
    4ca2:	11 f4       	brne	.+4      	; 0x4ca8 <prvIsQueueEmpty+0x26>
    4ca4:	81 e0       	ldi	r24, 0x01	; 1
    4ca6:	89 83       	std	Y+1, r24	; 0x01
	taskEXIT_CRITICAL();
    4ca8:	0f 90       	pop	r0
    4caa:	0f be       	out	0x3f, r0	; 63

	return xReturn;
    4cac:	89 81       	ldd	r24, Y+1	; 0x01
}
    4cae:	0f 90       	pop	r0
    4cb0:	0f 90       	pop	r0
    4cb2:	0f 90       	pop	r0
    4cb4:	cf 91       	pop	r28
    4cb6:	df 91       	pop	r29
    4cb8:	08 95       	ret

00004cba <xQueueIsQueueEmptyFromISR>:
/*-----------------------------------------------------------*/

signed portBASE_TYPE xQueueIsQueueEmptyFromISR( const xQueueHandle pxQueue )
{
    4cba:	df 93       	push	r29
    4cbc:	cf 93       	push	r28
    4cbe:	00 d0       	rcall	.+0      	; 0x4cc0 <xQueueIsQueueEmptyFromISR+0x6>
    4cc0:	0f 92       	push	r0
    4cc2:	cd b7       	in	r28, 0x3d	; 61
    4cc4:	de b7       	in	r29, 0x3e	; 62
    4cc6:	9b 83       	std	Y+3, r25	; 0x03
    4cc8:	8a 83       	std	Y+2, r24	; 0x02
signed portBASE_TYPE xReturn;

	configASSERT( pxQueue );
	xReturn = ( pxQueue->uxMessagesWaiting == ( unsigned portBASE_TYPE ) 0 );
    4cca:	ea 81       	ldd	r30, Y+2	; 0x02
    4ccc:	fb 81       	ldd	r31, Y+3	; 0x03
    4cce:	82 8d       	ldd	r24, Z+26	; 0x1a
    4cd0:	19 82       	std	Y+1, r1	; 0x01
    4cd2:	88 23       	and	r24, r24
    4cd4:	11 f4       	brne	.+4      	; 0x4cda <xQueueIsQueueEmptyFromISR+0x20>
    4cd6:	81 e0       	ldi	r24, 0x01	; 1
    4cd8:	89 83       	std	Y+1, r24	; 0x01

	return xReturn;
    4cda:	89 81       	ldd	r24, Y+1	; 0x01
}
    4cdc:	0f 90       	pop	r0
    4cde:	0f 90       	pop	r0
    4ce0:	0f 90       	pop	r0
    4ce2:	cf 91       	pop	r28
    4ce4:	df 91       	pop	r29
    4ce6:	08 95       	ret

00004ce8 <prvIsQueueFull>:
/*-----------------------------------------------------------*/

static signed portBASE_TYPE prvIsQueueFull( const xQueueHandle pxQueue )
{
    4ce8:	df 93       	push	r29
    4cea:	cf 93       	push	r28
    4cec:	00 d0       	rcall	.+0      	; 0x4cee <prvIsQueueFull+0x6>
    4cee:	0f 92       	push	r0
    4cf0:	cd b7       	in	r28, 0x3d	; 61
    4cf2:	de b7       	in	r29, 0x3e	; 62
    4cf4:	9b 83       	std	Y+3, r25	; 0x03
    4cf6:	8a 83       	std	Y+2, r24	; 0x02
signed portBASE_TYPE xReturn;

	taskENTER_CRITICAL();
    4cf8:	0f b6       	in	r0, 0x3f	; 63
    4cfa:	f8 94       	cli
    4cfc:	0f 92       	push	r0
		xReturn = ( pxQueue->uxMessagesWaiting == pxQueue->uxLength );
    4cfe:	ea 81       	ldd	r30, Y+2	; 0x02
    4d00:	fb 81       	ldd	r31, Y+3	; 0x03
    4d02:	92 8d       	ldd	r25, Z+26	; 0x1a
    4d04:	ea 81       	ldd	r30, Y+2	; 0x02
    4d06:	fb 81       	ldd	r31, Y+3	; 0x03
    4d08:	83 8d       	ldd	r24, Z+27	; 0x1b
    4d0a:	19 82       	std	Y+1, r1	; 0x01
    4d0c:	98 17       	cp	r25, r24
    4d0e:	11 f4       	brne	.+4      	; 0x4d14 <prvIsQueueFull+0x2c>
    4d10:	81 e0       	ldi	r24, 0x01	; 1
    4d12:	89 83       	std	Y+1, r24	; 0x01
	taskEXIT_CRITICAL();
    4d14:	0f 90       	pop	r0
    4d16:	0f be       	out	0x3f, r0	; 63

	return xReturn;
    4d18:	89 81       	ldd	r24, Y+1	; 0x01
}
    4d1a:	0f 90       	pop	r0
    4d1c:	0f 90       	pop	r0
    4d1e:	0f 90       	pop	r0
    4d20:	cf 91       	pop	r28
    4d22:	df 91       	pop	r29
    4d24:	08 95       	ret

00004d26 <xQueueIsQueueFullFromISR>:
/*-----------------------------------------------------------*/

signed portBASE_TYPE xQueueIsQueueFullFromISR( const xQueueHandle pxQueue )
{
    4d26:	df 93       	push	r29
    4d28:	cf 93       	push	r28
    4d2a:	00 d0       	rcall	.+0      	; 0x4d2c <xQueueIsQueueFullFromISR+0x6>
    4d2c:	0f 92       	push	r0
    4d2e:	cd b7       	in	r28, 0x3d	; 61
    4d30:	de b7       	in	r29, 0x3e	; 62
    4d32:	9b 83       	std	Y+3, r25	; 0x03
    4d34:	8a 83       	std	Y+2, r24	; 0x02
signed portBASE_TYPE xReturn;

	configASSERT( pxQueue );
	xReturn = ( pxQueue->uxMessagesWaiting == pxQueue->uxLength );
    4d36:	ea 81       	ldd	r30, Y+2	; 0x02
    4d38:	fb 81       	ldd	r31, Y+3	; 0x03
    4d3a:	92 8d       	ldd	r25, Z+26	; 0x1a
    4d3c:	ea 81       	ldd	r30, Y+2	; 0x02
    4d3e:	fb 81       	ldd	r31, Y+3	; 0x03
    4d40:	83 8d       	ldd	r24, Z+27	; 0x1b
    4d42:	19 82       	std	Y+1, r1	; 0x01
    4d44:	98 17       	cp	r25, r24
    4d46:	11 f4       	brne	.+4      	; 0x4d4c <xQueueIsQueueFullFromISR+0x26>
    4d48:	81 e0       	ldi	r24, 0x01	; 1
    4d4a:	89 83       	std	Y+1, r24	; 0x01

	return xReturn;
    4d4c:	89 81       	ldd	r24, Y+1	; 0x01
}
    4d4e:	0f 90       	pop	r0
    4d50:	0f 90       	pop	r0
    4d52:	0f 90       	pop	r0
    4d54:	cf 91       	pop	r28
    4d56:	df 91       	pop	r29
    4d58:	08 95       	ret

00004d5a <xTaskGenericCreate>:
/*-----------------------------------------------------------
 * TASK CREATION API documented in task.h
 *----------------------------------------------------------*/

signed portBASE_TYPE xTaskGenericCreate( pdTASK_CODE pxTaskCode, const signed char * const pcName, unsigned short usStackDepth, void *pvParameters, unsigned portBASE_TYPE uxPriority, xTaskHandle *pxCreatedTask, portSTACK_TYPE *puxStackBuffer, const xMemoryRegion * const xRegions )
{
    4d5a:	af 92       	push	r10
    4d5c:	bf 92       	push	r11
    4d5e:	cf 92       	push	r12
    4d60:	df 92       	push	r13
    4d62:	ef 92       	push	r14
    4d64:	ff 92       	push	r15
    4d66:	0f 93       	push	r16
    4d68:	1f 93       	push	r17
    4d6a:	df 93       	push	r29
    4d6c:	cf 93       	push	r28
    4d6e:	cd b7       	in	r28, 0x3d	; 61
    4d70:	de b7       	in	r29, 0x3e	; 62
    4d72:	64 97       	sbiw	r28, 0x14	; 20
    4d74:	0f b6       	in	r0, 0x3f	; 63
    4d76:	f8 94       	cli
    4d78:	de bf       	out	0x3e, r29	; 62
    4d7a:	0f be       	out	0x3f, r0	; 63
    4d7c:	cd bf       	out	0x3d, r28	; 61
    4d7e:	9f 83       	std	Y+7, r25	; 0x07
    4d80:	8e 83       	std	Y+6, r24	; 0x06
    4d82:	79 87       	std	Y+9, r23	; 0x09
    4d84:	68 87       	std	Y+8, r22	; 0x08
    4d86:	5b 87       	std	Y+11, r21	; 0x0b
    4d88:	4a 87       	std	Y+10, r20	; 0x0a
    4d8a:	3d 87       	std	Y+13, r19	; 0x0d
    4d8c:	2c 87       	std	Y+12, r18	; 0x0c
    4d8e:	0e 87       	std	Y+14, r16	; 0x0e
    4d90:	f8 8a       	std	Y+16, r15	; 0x10
    4d92:	ef 86       	std	Y+15, r14	; 0x0f
    4d94:	da 8a       	std	Y+18, r13	; 0x12
    4d96:	c9 8a       	std	Y+17, r12	; 0x11
    4d98:	bc 8a       	std	Y+20, r11	; 0x14
    4d9a:	ab 8a       	std	Y+19, r10	; 0x13
	configASSERT( pxTaskCode );
	configASSERT( ( uxPriority < configMAX_PRIORITIES ) );

	/* Allocate the memory required by the TCB and stack for the new task,
	checking that the allocation was successful. */
	pxNewTCB = prvAllocateTCBAndStack( usStackDepth, puxStackBuffer );
    4d9c:	8a 85       	ldd	r24, Y+10	; 0x0a
    4d9e:	9b 85       	ldd	r25, Y+11	; 0x0b
    4da0:	29 89       	ldd	r18, Y+17	; 0x11
    4da2:	3a 89       	ldd	r19, Y+18	; 0x12
    4da4:	b9 01       	movw	r22, r18
    4da6:	0e 94 32 2d 	call	0x5a64	; 0x5a64 <prvAllocateTCBAndStack>
    4daa:	9c 83       	std	Y+4, r25	; 0x04
    4dac:	8b 83       	std	Y+3, r24	; 0x03

	if( pxNewTCB != NULL )
    4dae:	8b 81       	ldd	r24, Y+3	; 0x03
    4db0:	9c 81       	ldd	r25, Y+4	; 0x04
    4db2:	00 97       	sbiw	r24, 0x00	; 0
    4db4:	09 f4       	brne	.+2      	; 0x4db8 <xTaskGenericCreate+0x5e>
    4db6:	99 c0       	rjmp	.+306    	; 0x4eea <xTaskGenericCreate+0x190>
		stack grows from high memory to low (as per the 80x86) or visa versa.
		portSTACK_GROWTH is used to make the result positive or negative as
		required by the port. */
		#if( portSTACK_GROWTH < 0 )
		{
			pxTopOfStack = pxNewTCB->pxStack + ( usStackDepth - ( unsigned short ) 1 );
    4db8:	eb 81       	ldd	r30, Y+3	; 0x03
    4dba:	fc 81       	ldd	r31, Y+4	; 0x04
    4dbc:	27 89       	ldd	r18, Z+23	; 0x17
    4dbe:	30 8d       	ldd	r19, Z+24	; 0x18
    4dc0:	8a 85       	ldd	r24, Y+10	; 0x0a
    4dc2:	9b 85       	ldd	r25, Y+11	; 0x0b
    4dc4:	01 97       	sbiw	r24, 0x01	; 1
    4dc6:	82 0f       	add	r24, r18
    4dc8:	93 1f       	adc	r25, r19
    4dca:	9a 83       	std	Y+2, r25	; 0x02
    4dcc:	89 83       	std	Y+1, r24	; 0x01
			pxNewTCB->pxEndOfStack = pxNewTCB->pxStack + ( usStackDepth - 1 );
		}
		#endif

		/* Setup the newly allocated TCB with the initial state of the task. */
		prvInitialiseTCBVariables( pxNewTCB, pcName, uxPriority, xRegions, usStackDepth );
    4dce:	8b 81       	ldd	r24, Y+3	; 0x03
    4dd0:	9c 81       	ldd	r25, Y+4	; 0x04
    4dd2:	28 85       	ldd	r18, Y+8	; 0x08
    4dd4:	39 85       	ldd	r19, Y+9	; 0x09
    4dd6:	eb 89       	ldd	r30, Y+19	; 0x13
    4dd8:	fc 89       	ldd	r31, Y+20	; 0x14
    4dda:	aa 85       	ldd	r26, Y+10	; 0x0a
    4ddc:	bb 85       	ldd	r27, Y+11	; 0x0b
    4dde:	b9 01       	movw	r22, r18
    4de0:	4e 85       	ldd	r20, Y+14	; 0x0e
    4de2:	9f 01       	movw	r18, r30
    4de4:	8d 01       	movw	r16, r26
    4de6:	0e 94 17 2c 	call	0x582e	; 0x582e <prvInitialiseTCBVariables>
		{
			pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters, xRunPrivileged );
		}
		#else
		{
			pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters );
    4dea:	89 81       	ldd	r24, Y+1	; 0x01
    4dec:	9a 81       	ldd	r25, Y+2	; 0x02
    4dee:	2e 81       	ldd	r18, Y+6	; 0x06
    4df0:	3f 81       	ldd	r19, Y+7	; 0x07
    4df2:	4c 85       	ldd	r20, Y+12	; 0x0c
    4df4:	5d 85       	ldd	r21, Y+13	; 0x0d
    4df6:	b9 01       	movw	r22, r18
    4df8:	0e 94 3b 1f 	call	0x3e76	; 0x3e76 <pxPortInitialiseStack>
    4dfc:	eb 81       	ldd	r30, Y+3	; 0x03
    4dfe:	fc 81       	ldd	r31, Y+4	; 0x04
    4e00:	91 83       	std	Z+1, r25	; 0x01
    4e02:	80 83       	st	Z, r24
		#endif

		/* Check the alignment of the initialised stack. */
		configASSERT( ( ( ( unsigned long ) pxNewTCB->pxTopOfStack & ( unsigned long ) portBYTE_ALIGNMENT_MASK ) == 0UL ) );

		if( ( void * ) pxCreatedTask != NULL )
    4e04:	8f 85       	ldd	r24, Y+15	; 0x0f
    4e06:	98 89       	ldd	r25, Y+16	; 0x10
    4e08:	00 97       	sbiw	r24, 0x00	; 0
    4e0a:	31 f0       	breq	.+12     	; 0x4e18 <xTaskGenericCreate+0xbe>
		{
			/* Pass the TCB out - in an anonymous way.  The calling function/
			task can use this as a handle to delete the task later if
			required.*/
			*pxCreatedTask = ( xTaskHandle ) pxNewTCB;
    4e0c:	ef 85       	ldd	r30, Y+15	; 0x0f
    4e0e:	f8 89       	ldd	r31, Y+16	; 0x10
    4e10:	8b 81       	ldd	r24, Y+3	; 0x03
    4e12:	9c 81       	ldd	r25, Y+4	; 0x04
    4e14:	91 83       	std	Z+1, r25	; 0x01
    4e16:	80 83       	st	Z, r24
		}
		
		/* We are going to manipulate the task queues to add this task to a
		ready list, so must make sure no interrupts occur. */
		taskENTER_CRITICAL();
    4e18:	0f b6       	in	r0, 0x3f	; 63
    4e1a:	f8 94       	cli
    4e1c:	0f 92       	push	r0
		{
			uxCurrentNumberOfTasks++;
    4e1e:	80 91 a1 04 	lds	r24, 0x04A1
    4e22:	8f 5f       	subi	r24, 0xFF	; 255
    4e24:	80 93 a1 04 	sts	0x04A1, r24
			if( pxCurrentTCB == NULL )
    4e28:	80 91 9e 04 	lds	r24, 0x049E
    4e2c:	90 91 9f 04 	lds	r25, 0x049F
    4e30:	00 97       	sbiw	r24, 0x00	; 0
    4e32:	69 f4       	brne	.+26     	; 0x4e4e <xTaskGenericCreate+0xf4>
			{
				/* There are no other tasks, or all the other tasks are in
				the suspended state - make this the current task. */
				pxCurrentTCB =  pxNewTCB;
    4e34:	8b 81       	ldd	r24, Y+3	; 0x03
    4e36:	9c 81       	ldd	r25, Y+4	; 0x04
    4e38:	90 93 9f 04 	sts	0x049F, r25
    4e3c:	80 93 9e 04 	sts	0x049E, r24

				if( uxCurrentNumberOfTasks == ( unsigned portBASE_TYPE ) 1 )
    4e40:	80 91 a1 04 	lds	r24, 0x04A1
    4e44:	81 30       	cpi	r24, 0x01	; 1
    4e46:	a9 f4       	brne	.+42     	; 0x4e72 <xTaskGenericCreate+0x118>
				{
					/* This is the first task to be created so do the preliminary
					initialisation required.  We will not recover if this call
					fails, but we will report the failure. */
					prvInitialiseTaskLists();
    4e48:	0e 94 6e 2c 	call	0x58dc	; 0x58dc <prvInitialiseTaskLists>
    4e4c:	12 c0       	rjmp	.+36     	; 0x4e72 <xTaskGenericCreate+0x118>
			else
			{
				/* If the scheduler is not already running, make this task the
				current task if it is the highest priority task to be created
				so far. */
				if( xSchedulerRunning == pdFALSE )
    4e4e:	80 91 a6 04 	lds	r24, 0x04A6
    4e52:	88 23       	and	r24, r24
    4e54:	71 f4       	brne	.+28     	; 0x4e72 <xTaskGenericCreate+0x118>
				{
					if( pxCurrentTCB->uxPriority <= uxPriority )
    4e56:	e0 91 9e 04 	lds	r30, 0x049E
    4e5a:	f0 91 9f 04 	lds	r31, 0x049F
    4e5e:	96 89       	ldd	r25, Z+22	; 0x16
    4e60:	8e 85       	ldd	r24, Y+14	; 0x0e
    4e62:	89 17       	cp	r24, r25
    4e64:	30 f0       	brcs	.+12     	; 0x4e72 <xTaskGenericCreate+0x118>
					{
						pxCurrentTCB = pxNewTCB;
    4e66:	8b 81       	ldd	r24, Y+3	; 0x03
    4e68:	9c 81       	ldd	r25, Y+4	; 0x04
    4e6a:	90 93 9f 04 	sts	0x049F, r25
    4e6e:	80 93 9e 04 	sts	0x049E, r24
				}
			}

			/* Remember the top priority to make context switching faster.  Use
			the priority in pxNewTCB as this has been capped to a valid value. */
			if( pxNewTCB->uxPriority > uxTopUsedPriority )
    4e72:	eb 81       	ldd	r30, Y+3	; 0x03
    4e74:	fc 81       	ldd	r31, Y+4	; 0x04
    4e76:	96 89       	ldd	r25, Z+22	; 0x16
    4e78:	80 91 a4 04 	lds	r24, 0x04A4
    4e7c:	89 17       	cp	r24, r25
    4e7e:	28 f4       	brcc	.+10     	; 0x4e8a <xTaskGenericCreate+0x130>
			{
				uxTopUsedPriority = pxNewTCB->uxPriority;
    4e80:	eb 81       	ldd	r30, Y+3	; 0x03
    4e82:	fc 81       	ldd	r31, Y+4	; 0x04
    4e84:	86 89       	ldd	r24, Z+22	; 0x16
    4e86:	80 93 a4 04 	sts	0x04A4, r24
			{
				/* Add a counter into the TCB for tracing only. */
				pxNewTCB->uxTCBNumber = uxTaskNumber;
			}
			#endif
			uxTaskNumber++;
    4e8a:	80 91 ab 04 	lds	r24, 0x04AB
    4e8e:	8f 5f       	subi	r24, 0xFF	; 255
    4e90:	80 93 ab 04 	sts	0x04AB, r24

			prvAddTaskToReadyQueue( pxNewTCB );
    4e94:	eb 81       	ldd	r30, Y+3	; 0x03
    4e96:	fc 81       	ldd	r31, Y+4	; 0x04
    4e98:	96 89       	ldd	r25, Z+22	; 0x16
    4e9a:	80 91 a5 04 	lds	r24, 0x04A5
    4e9e:	89 17       	cp	r24, r25
    4ea0:	28 f4       	brcc	.+10     	; 0x4eac <xTaskGenericCreate+0x152>
    4ea2:	eb 81       	ldd	r30, Y+3	; 0x03
    4ea4:	fc 81       	ldd	r31, Y+4	; 0x04
    4ea6:	86 89       	ldd	r24, Z+22	; 0x16
    4ea8:	80 93 a5 04 	sts	0x04A5, r24
    4eac:	eb 81       	ldd	r30, Y+3	; 0x03
    4eae:	fc 81       	ldd	r31, Y+4	; 0x04
    4eb0:	86 89       	ldd	r24, Z+22	; 0x16
    4eb2:	28 2f       	mov	r18, r24
    4eb4:	30 e0       	ldi	r19, 0x00	; 0
    4eb6:	c9 01       	movw	r24, r18
    4eb8:	88 0f       	add	r24, r24
    4eba:	99 1f       	adc	r25, r25
    4ebc:	88 0f       	add	r24, r24
    4ebe:	99 1f       	adc	r25, r25
    4ec0:	88 0f       	add	r24, r24
    4ec2:	99 1f       	adc	r25, r25
    4ec4:	82 0f       	add	r24, r18
    4ec6:	93 1f       	adc	r25, r19
    4ec8:	ac 01       	movw	r20, r24
    4eca:	44 55       	subi	r20, 0x54	; 84
    4ecc:	5b 4f       	sbci	r21, 0xFB	; 251
    4ece:	8b 81       	ldd	r24, Y+3	; 0x03
    4ed0:	9c 81       	ldd	r25, Y+4	; 0x04
    4ed2:	9c 01       	movw	r18, r24
    4ed4:	2e 5f       	subi	r18, 0xFE	; 254
    4ed6:	3f 4f       	sbci	r19, 0xFF	; 255
    4ed8:	ca 01       	movw	r24, r20
    4eda:	b9 01       	movw	r22, r18
    4edc:	0e 94 3a 1e 	call	0x3c74	; 0x3c74 <vListInsertEnd>

			xReturn = pdPASS;
    4ee0:	81 e0       	ldi	r24, 0x01	; 1
    4ee2:	8d 83       	std	Y+5, r24	; 0x05
			traceTASK_CREATE( pxNewTCB );
		}
		taskEXIT_CRITICAL();
    4ee4:	0f 90       	pop	r0
    4ee6:	0f be       	out	0x3f, r0	; 63
    4ee8:	02 c0       	rjmp	.+4      	; 0x4eee <xTaskGenericCreate+0x194>
	}
	else
	{
		xReturn = errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY;
    4eea:	8f ef       	ldi	r24, 0xFF	; 255
    4eec:	8d 83       	std	Y+5, r24	; 0x05
		traceTASK_CREATE_FAILED();
	}

	if( xReturn == pdPASS )
    4eee:	8d 81       	ldd	r24, Y+5	; 0x05
    4ef0:	81 30       	cpi	r24, 0x01	; 1
    4ef2:	71 f4       	brne	.+28     	; 0x4f10 <xTaskGenericCreate+0x1b6>
	{
		if( xSchedulerRunning != pdFALSE )
    4ef4:	80 91 a6 04 	lds	r24, 0x04A6
    4ef8:	88 23       	and	r24, r24
    4efa:	51 f0       	breq	.+20     	; 0x4f10 <xTaskGenericCreate+0x1b6>
		{
			/* If the created task is of a higher priority than the current task
			then it should run now. */
			if( pxCurrentTCB->uxPriority < uxPriority )
    4efc:	e0 91 9e 04 	lds	r30, 0x049E
    4f00:	f0 91 9f 04 	lds	r31, 0x049F
    4f04:	96 89       	ldd	r25, Z+22	; 0x16
    4f06:	8e 85       	ldd	r24, Y+14	; 0x0e
    4f08:	98 17       	cp	r25, r24
    4f0a:	10 f4       	brcc	.+4      	; 0x4f10 <xTaskGenericCreate+0x1b6>
			{
				portYIELD_WITHIN_API();
    4f0c:	0e 94 fa 20 	call	0x41f4	; 0x41f4 <vPortYield>
			}
		}
	}

	return xReturn;
    4f10:	8d 81       	ldd	r24, Y+5	; 0x05
}
    4f12:	64 96       	adiw	r28, 0x14	; 20
    4f14:	0f b6       	in	r0, 0x3f	; 63
    4f16:	f8 94       	cli
    4f18:	de bf       	out	0x3e, r29	; 62
    4f1a:	0f be       	out	0x3f, r0	; 63
    4f1c:	cd bf       	out	0x3d, r28	; 61
    4f1e:	cf 91       	pop	r28
    4f20:	df 91       	pop	r29
    4f22:	1f 91       	pop	r17
    4f24:	0f 91       	pop	r16
    4f26:	ff 90       	pop	r15
    4f28:	ef 90       	pop	r14
    4f2a:	df 90       	pop	r13
    4f2c:	cf 90       	pop	r12
    4f2e:	bf 90       	pop	r11
    4f30:	af 90       	pop	r10
    4f32:	08 95       	ret

00004f34 <vTaskDelete>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelete == 1 )

	void vTaskDelete( xTaskHandle pxTaskToDelete )
	{
    4f34:	df 93       	push	r29
    4f36:	cf 93       	push	r28
    4f38:	00 d0       	rcall	.+0      	; 0x4f3a <vTaskDelete+0x6>
    4f3a:	00 d0       	rcall	.+0      	; 0x4f3c <vTaskDelete+0x8>
    4f3c:	00 d0       	rcall	.+0      	; 0x4f3e <vTaskDelete+0xa>
    4f3e:	cd b7       	in	r28, 0x3d	; 61
    4f40:	de b7       	in	r29, 0x3e	; 62
    4f42:	9c 83       	std	Y+4, r25	; 0x04
    4f44:	8b 83       	std	Y+3, r24	; 0x03
	tskTCB *pxTCB;

		taskENTER_CRITICAL();
    4f46:	0f b6       	in	r0, 0x3f	; 63
    4f48:	f8 94       	cli
    4f4a:	0f 92       	push	r0
		{
			/* Ensure a yield is performed if the current task is being
			deleted. */
			if( pxTaskToDelete == pxCurrentTCB )
    4f4c:	20 91 9e 04 	lds	r18, 0x049E
    4f50:	30 91 9f 04 	lds	r19, 0x049F
    4f54:	8b 81       	ldd	r24, Y+3	; 0x03
    4f56:	9c 81       	ldd	r25, Y+4	; 0x04
    4f58:	82 17       	cp	r24, r18
    4f5a:	93 07       	cpc	r25, r19
    4f5c:	11 f4       	brne	.+4      	; 0x4f62 <vTaskDelete+0x2e>
			{
				pxTaskToDelete = NULL;
    4f5e:	1c 82       	std	Y+4, r1	; 0x04
    4f60:	1b 82       	std	Y+3, r1	; 0x03
			}

			/* If null is passed in here then we are deleting ourselves. */
			pxTCB = prvGetTCBFromHandle( pxTaskToDelete );
    4f62:	8b 81       	ldd	r24, Y+3	; 0x03
    4f64:	9c 81       	ldd	r25, Y+4	; 0x04
    4f66:	00 97       	sbiw	r24, 0x00	; 0
    4f68:	39 f4       	brne	.+14     	; 0x4f78 <vTaskDelete+0x44>
    4f6a:	80 91 9e 04 	lds	r24, 0x049E
    4f6e:	90 91 9f 04 	lds	r25, 0x049F
    4f72:	9e 83       	std	Y+6, r25	; 0x06
    4f74:	8d 83       	std	Y+5, r24	; 0x05
    4f76:	04 c0       	rjmp	.+8      	; 0x4f80 <vTaskDelete+0x4c>
    4f78:	8b 81       	ldd	r24, Y+3	; 0x03
    4f7a:	9c 81       	ldd	r25, Y+4	; 0x04
    4f7c:	9e 83       	std	Y+6, r25	; 0x06
    4f7e:	8d 83       	std	Y+5, r24	; 0x05
    4f80:	8d 81       	ldd	r24, Y+5	; 0x05
    4f82:	9e 81       	ldd	r25, Y+6	; 0x06
    4f84:	9a 83       	std	Y+2, r25	; 0x02
    4f86:	89 83       	std	Y+1, r24	; 0x01

			/* Remove task from the ready list and place in the	termination list.
			This will stop the task from be scheduled.  The idle task will check
			the termination list and free up any memory allocated by the
			scheduler for the TCB and stack. */
			vListRemove( &( pxTCB->xGenericListItem ) );
    4f88:	89 81       	ldd	r24, Y+1	; 0x01
    4f8a:	9a 81       	ldd	r25, Y+2	; 0x02
    4f8c:	02 96       	adiw	r24, 0x02	; 2
    4f8e:	0e 94 f2 1e 	call	0x3de4	; 0x3de4 <vListRemove>

			/* Is the task waiting on an event also? */
			if( pxTCB->xEventListItem.pvContainer != NULL )
    4f92:	e9 81       	ldd	r30, Y+1	; 0x01
    4f94:	fa 81       	ldd	r31, Y+2	; 0x02
    4f96:	84 89       	ldd	r24, Z+20	; 0x14
    4f98:	95 89       	ldd	r25, Z+21	; 0x15
    4f9a:	00 97       	sbiw	r24, 0x00	; 0
    4f9c:	29 f0       	breq	.+10     	; 0x4fa8 <vTaskDelete+0x74>
			{
				vListRemove( &( pxTCB->xEventListItem ) );
    4f9e:	89 81       	ldd	r24, Y+1	; 0x01
    4fa0:	9a 81       	ldd	r25, Y+2	; 0x02
    4fa2:	0c 96       	adiw	r24, 0x0c	; 12
    4fa4:	0e 94 f2 1e 	call	0x3de4	; 0x3de4 <vListRemove>
			}

			vListInsertEnd( ( xList * ) &xTasksWaitingTermination, &( pxTCB->xGenericListItem ) );
    4fa8:	89 81       	ldd	r24, Y+1	; 0x01
    4faa:	9a 81       	ldd	r25, Y+2	; 0x02
    4fac:	9c 01       	movw	r18, r24
    4fae:	2e 5f       	subi	r18, 0xFE	; 254
    4fb0:	3f 4f       	sbci	r19, 0xFF	; 255
    4fb2:	8a e0       	ldi	r24, 0x0A	; 10
    4fb4:	95 e0       	ldi	r25, 0x05	; 5
    4fb6:	b9 01       	movw	r22, r18
    4fb8:	0e 94 3a 1e 	call	0x3c74	; 0x3c74 <vListInsertEnd>

			/* Increment the ucTasksDeleted variable so the idle task knows
			there is a task that has been deleted and that it should therefore
			check the xTasksWaitingTermination list. */
			++uxTasksDeleted;
    4fbc:	80 91 a0 04 	lds	r24, 0x04A0
    4fc0:	8f 5f       	subi	r24, 0xFF	; 255
    4fc2:	80 93 a0 04 	sts	0x04A0, r24

			/* Increment the uxTaskNumberVariable also so kernel aware debuggers
			can detect that the task lists need re-generating. */
			uxTaskNumber++;
    4fc6:	80 91 ab 04 	lds	r24, 0x04AB
    4fca:	8f 5f       	subi	r24, 0xFF	; 255
    4fcc:	80 93 ab 04 	sts	0x04AB, r24

			traceTASK_DELETE( pxTCB );
		}
		taskEXIT_CRITICAL();
    4fd0:	0f 90       	pop	r0
    4fd2:	0f be       	out	0x3f, r0	; 63

		/* Force a reschedule if we have just deleted the current task. */
		if( xSchedulerRunning != pdFALSE )
    4fd4:	80 91 a6 04 	lds	r24, 0x04A6
    4fd8:	88 23       	and	r24, r24
    4fda:	31 f0       	breq	.+12     	; 0x4fe8 <vTaskDelete+0xb4>
		{
			if( ( void * ) pxTaskToDelete == NULL )
    4fdc:	8b 81       	ldd	r24, Y+3	; 0x03
    4fde:	9c 81       	ldd	r25, Y+4	; 0x04
    4fe0:	00 97       	sbiw	r24, 0x00	; 0
    4fe2:	11 f4       	brne	.+4      	; 0x4fe8 <vTaskDelete+0xb4>
			{
				portYIELD_WITHIN_API();
    4fe4:	0e 94 fa 20 	call	0x41f4	; 0x41f4 <vPortYield>
			}
		}
	}
    4fe8:	26 96       	adiw	r28, 0x06	; 6
    4fea:	0f b6       	in	r0, 0x3f	; 63
    4fec:	f8 94       	cli
    4fee:	de bf       	out	0x3e, r29	; 62
    4ff0:	0f be       	out	0x3f, r0	; 63
    4ff2:	cd bf       	out	0x3d, r28	; 61
    4ff4:	cf 91       	pop	r28
    4ff6:	df 91       	pop	r29
    4ff8:	08 95       	ret

00004ffa <vTaskDelayUntil>:
 *----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelayUntil == 1 )

	void vTaskDelayUntil( portTickType * const pxPreviousWakeTime, portTickType xTimeIncrement )
	{
    4ffa:	df 93       	push	r29
    4ffc:	cf 93       	push	r28
    4ffe:	cd b7       	in	r28, 0x3d	; 61
    5000:	de b7       	in	r29, 0x3e	; 62
    5002:	28 97       	sbiw	r28, 0x08	; 8
    5004:	0f b6       	in	r0, 0x3f	; 63
    5006:	f8 94       	cli
    5008:	de bf       	out	0x3e, r29	; 62
    500a:	0f be       	out	0x3f, r0	; 63
    500c:	cd bf       	out	0x3d, r28	; 61
    500e:	9e 83       	std	Y+6, r25	; 0x06
    5010:	8d 83       	std	Y+5, r24	; 0x05
    5012:	78 87       	std	Y+8, r23	; 0x08
    5014:	6f 83       	std	Y+7, r22	; 0x07
	portTickType xTimeToWake;
	portBASE_TYPE xAlreadyYielded, xShouldDelay = pdFALSE;
    5016:	19 82       	std	Y+1, r1	; 0x01

		configASSERT( pxPreviousWakeTime );
		configASSERT( ( xTimeIncrement > 0U ) );

		vTaskSuspendAll();
    5018:	0e 94 e9 28 	call	0x51d2	; 0x51d2 <vTaskSuspendAll>
		{
			/* Generate the tick time at which the task wants to wake. */
			xTimeToWake = *pxPreviousWakeTime + xTimeIncrement;
    501c:	ed 81       	ldd	r30, Y+5	; 0x05
    501e:	fe 81       	ldd	r31, Y+6	; 0x06
    5020:	20 81       	ld	r18, Z
    5022:	31 81       	ldd	r19, Z+1	; 0x01
    5024:	8f 81       	ldd	r24, Y+7	; 0x07
    5026:	98 85       	ldd	r25, Y+8	; 0x08
    5028:	82 0f       	add	r24, r18
    502a:	93 1f       	adc	r25, r19
    502c:	9c 83       	std	Y+4, r25	; 0x04
    502e:	8b 83       	std	Y+3, r24	; 0x03

			if( xTickCount < *pxPreviousWakeTime )
    5030:	ed 81       	ldd	r30, Y+5	; 0x05
    5032:	fe 81       	ldd	r31, Y+6	; 0x06
    5034:	20 81       	ld	r18, Z
    5036:	31 81       	ldd	r19, Z+1	; 0x01
    5038:	80 91 a2 04 	lds	r24, 0x04A2
    503c:	90 91 a3 04 	lds	r25, 0x04A3
    5040:	82 17       	cp	r24, r18
    5042:	93 07       	cpc	r25, r19
    5044:	a8 f4       	brcc	.+42     	; 0x5070 <vTaskDelayUntil+0x76>
				/* The tick count has overflowed since this function was
				lasted called.  In this case the only time we should ever
				actually delay is if the wake time has also	overflowed,
				and the wake time is greater than the tick time.  When this
				is the case it is as if neither time had overflowed. */
				if( ( xTimeToWake < *pxPreviousWakeTime ) && ( xTimeToWake > xTickCount ) )
    5046:	ed 81       	ldd	r30, Y+5	; 0x05
    5048:	fe 81       	ldd	r31, Y+6	; 0x06
    504a:	20 81       	ld	r18, Z
    504c:	31 81       	ldd	r19, Z+1	; 0x01
    504e:	8b 81       	ldd	r24, Y+3	; 0x03
    5050:	9c 81       	ldd	r25, Y+4	; 0x04
    5052:	82 17       	cp	r24, r18
    5054:	93 07       	cpc	r25, r19
    5056:	00 f5       	brcc	.+64     	; 0x5098 <vTaskDelayUntil+0x9e>
    5058:	20 91 a2 04 	lds	r18, 0x04A2
    505c:	30 91 a3 04 	lds	r19, 0x04A3
    5060:	8b 81       	ldd	r24, Y+3	; 0x03
    5062:	9c 81       	ldd	r25, Y+4	; 0x04
    5064:	28 17       	cp	r18, r24
    5066:	39 07       	cpc	r19, r25
    5068:	b8 f4       	brcc	.+46     	; 0x5098 <vTaskDelayUntil+0x9e>
				{
					xShouldDelay = pdTRUE;
    506a:	81 e0       	ldi	r24, 0x01	; 1
    506c:	89 83       	std	Y+1, r24	; 0x01
    506e:	14 c0       	rjmp	.+40     	; 0x5098 <vTaskDelayUntil+0x9e>
			else
			{
				/* The tick time has not overflowed.  In this case we will
				delay if either the wake time has overflowed, and/or the
				tick time is less than the wake time. */
				if( ( xTimeToWake < *pxPreviousWakeTime ) || ( xTimeToWake > xTickCount ) )
    5070:	ed 81       	ldd	r30, Y+5	; 0x05
    5072:	fe 81       	ldd	r31, Y+6	; 0x06
    5074:	20 81       	ld	r18, Z
    5076:	31 81       	ldd	r19, Z+1	; 0x01
    5078:	8b 81       	ldd	r24, Y+3	; 0x03
    507a:	9c 81       	ldd	r25, Y+4	; 0x04
    507c:	82 17       	cp	r24, r18
    507e:	93 07       	cpc	r25, r19
    5080:	48 f0       	brcs	.+18     	; 0x5094 <vTaskDelayUntil+0x9a>
    5082:	20 91 a2 04 	lds	r18, 0x04A2
    5086:	30 91 a3 04 	lds	r19, 0x04A3
    508a:	8b 81       	ldd	r24, Y+3	; 0x03
    508c:	9c 81       	ldd	r25, Y+4	; 0x04
    508e:	28 17       	cp	r18, r24
    5090:	39 07       	cpc	r19, r25
    5092:	10 f4       	brcc	.+4      	; 0x5098 <vTaskDelayUntil+0x9e>
				{
					xShouldDelay = pdTRUE;
    5094:	81 e0       	ldi	r24, 0x01	; 1
    5096:	89 83       	std	Y+1, r24	; 0x01
				}
			}

			/* Update the wake time ready for the next call. */
			*pxPreviousWakeTime = xTimeToWake;
    5098:	ed 81       	ldd	r30, Y+5	; 0x05
    509a:	fe 81       	ldd	r31, Y+6	; 0x06
    509c:	8b 81       	ldd	r24, Y+3	; 0x03
    509e:	9c 81       	ldd	r25, Y+4	; 0x04
    50a0:	91 83       	std	Z+1, r25	; 0x01
    50a2:	80 83       	st	Z, r24

			if( xShouldDelay != pdFALSE )
    50a4:	89 81       	ldd	r24, Y+1	; 0x01
    50a6:	88 23       	and	r24, r24
    50a8:	59 f0       	breq	.+22     	; 0x50c0 <vTaskDelayUntil+0xc6>
				traceTASK_DELAY_UNTIL();

				/* We must remove ourselves from the ready list before adding
				ourselves to the blocked list as the same list item is used for
				both lists. */
				vListRemove( ( xListItem * ) &( pxCurrentTCB->xGenericListItem ) );
    50aa:	80 91 9e 04 	lds	r24, 0x049E
    50ae:	90 91 9f 04 	lds	r25, 0x049F
    50b2:	02 96       	adiw	r24, 0x02	; 2
    50b4:	0e 94 f2 1e 	call	0x3de4	; 0x3de4 <vListRemove>
				prvAddCurrentTaskToDelayedList( xTimeToWake );
    50b8:	8b 81       	ldd	r24, Y+3	; 0x03
    50ba:	9c 81       	ldd	r25, Y+4	; 0x04
    50bc:	0e 94 e9 2c 	call	0x59d2	; 0x59d2 <prvAddCurrentTaskToDelayedList>
			}
		}
		xAlreadyYielded = xTaskResumeAll();
    50c0:	0e 94 f5 28 	call	0x51ea	; 0x51ea <xTaskResumeAll>
    50c4:	8a 83       	std	Y+2, r24	; 0x02

		/* Force a reschedule if xTaskResumeAll has not already done so, we may
		have put ourselves to sleep. */
		if( xAlreadyYielded == pdFALSE )
    50c6:	8a 81       	ldd	r24, Y+2	; 0x02
    50c8:	88 23       	and	r24, r24
    50ca:	11 f4       	brne	.+4      	; 0x50d0 <vTaskDelayUntil+0xd6>
		{
			portYIELD_WITHIN_API();
    50cc:	0e 94 fa 20 	call	0x41f4	; 0x41f4 <vPortYield>
		}
	}
    50d0:	28 96       	adiw	r28, 0x08	; 8
    50d2:	0f b6       	in	r0, 0x3f	; 63
    50d4:	f8 94       	cli
    50d6:	de bf       	out	0x3e, r29	; 62
    50d8:	0f be       	out	0x3f, r0	; 63
    50da:	cd bf       	out	0x3d, r28	; 61
    50dc:	cf 91       	pop	r28
    50de:	df 91       	pop	r29
    50e0:	08 95       	ret

000050e2 <vTaskDelay>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelay == 1 )

	void vTaskDelay( portTickType xTicksToDelay )
	{
    50e2:	df 93       	push	r29
    50e4:	cf 93       	push	r28
    50e6:	00 d0       	rcall	.+0      	; 0x50e8 <vTaskDelay+0x6>
    50e8:	00 d0       	rcall	.+0      	; 0x50ea <vTaskDelay+0x8>
    50ea:	0f 92       	push	r0
    50ec:	cd b7       	in	r28, 0x3d	; 61
    50ee:	de b7       	in	r29, 0x3e	; 62
    50f0:	9d 83       	std	Y+5, r25	; 0x05
    50f2:	8c 83       	std	Y+4, r24	; 0x04
	portTickType xTimeToWake;
	signed portBASE_TYPE xAlreadyYielded = pdFALSE;
    50f4:	19 82       	std	Y+1, r1	; 0x01

		/* A delay time of zero just forces a reschedule. */
		if( xTicksToDelay > ( portTickType ) 0U )
    50f6:	8c 81       	ldd	r24, Y+4	; 0x04
    50f8:	9d 81       	ldd	r25, Y+5	; 0x05
    50fa:	00 97       	sbiw	r24, 0x00	; 0
    50fc:	d1 f0       	breq	.+52     	; 0x5132 <vTaskDelay+0x50>
		{
			vTaskSuspendAll();
    50fe:	0e 94 e9 28 	call	0x51d2	; 0x51d2 <vTaskSuspendAll>
				This task cannot be in an event list as it is the currently
				executing task. */

				/* Calculate the time to wake - this may overflow but this is
				not a problem. */
				xTimeToWake = xTickCount + xTicksToDelay;
    5102:	20 91 a2 04 	lds	r18, 0x04A2
    5106:	30 91 a3 04 	lds	r19, 0x04A3
    510a:	8c 81       	ldd	r24, Y+4	; 0x04
    510c:	9d 81       	ldd	r25, Y+5	; 0x05
    510e:	82 0f       	add	r24, r18
    5110:	93 1f       	adc	r25, r19
    5112:	9b 83       	std	Y+3, r25	; 0x03
    5114:	8a 83       	std	Y+2, r24	; 0x02

				/* We must remove ourselves from the ready list before adding
				ourselves to the blocked list as the same list item is used for
				both lists. */
				vListRemove( ( xListItem * ) &( pxCurrentTCB->xGenericListItem ) );
    5116:	80 91 9e 04 	lds	r24, 0x049E
    511a:	90 91 9f 04 	lds	r25, 0x049F
    511e:	02 96       	adiw	r24, 0x02	; 2
    5120:	0e 94 f2 1e 	call	0x3de4	; 0x3de4 <vListRemove>
				prvAddCurrentTaskToDelayedList( xTimeToWake );
    5124:	8a 81       	ldd	r24, Y+2	; 0x02
    5126:	9b 81       	ldd	r25, Y+3	; 0x03
    5128:	0e 94 e9 2c 	call	0x59d2	; 0x59d2 <prvAddCurrentTaskToDelayedList>
			}
			xAlreadyYielded = xTaskResumeAll();
    512c:	0e 94 f5 28 	call	0x51ea	; 0x51ea <xTaskResumeAll>
    5130:	89 83       	std	Y+1, r24	; 0x01
		}

		/* Force a reschedule if xTaskResumeAll has not already done so, we may
		have put ourselves to sleep. */
		if( xAlreadyYielded == pdFALSE )
    5132:	89 81       	ldd	r24, Y+1	; 0x01
    5134:	88 23       	and	r24, r24
    5136:	11 f4       	brne	.+4      	; 0x513c <vTaskDelay+0x5a>
		{
			portYIELD_WITHIN_API();
    5138:	0e 94 fa 20 	call	0x41f4	; 0x41f4 <vPortYield>
		}
	}
    513c:	0f 90       	pop	r0
    513e:	0f 90       	pop	r0
    5140:	0f 90       	pop	r0
    5142:	0f 90       	pop	r0
    5144:	0f 90       	pop	r0
    5146:	cf 91       	pop	r28
    5148:	df 91       	pop	r29
    514a:	08 95       	ret

0000514c <vTaskStartScheduler>:
 * PUBLIC SCHEDULER CONTROL documented in task.h
 *----------------------------------------------------------*/


void vTaskStartScheduler( void )
{
    514c:	af 92       	push	r10
    514e:	bf 92       	push	r11
    5150:	cf 92       	push	r12
    5152:	df 92       	push	r13
    5154:	ef 92       	push	r14
    5156:	ff 92       	push	r15
    5158:	0f 93       	push	r16
    515a:	df 93       	push	r29
    515c:	cf 93       	push	r28
    515e:	0f 92       	push	r0
    5160:	cd b7       	in	r28, 0x3d	; 61
    5162:	de b7       	in	r29, 0x3e	; 62
		xReturn = xTaskCreate( prvIdleTask, ( signed char * ) "IDLE", tskIDLE_STACK_SIZE, ( void * ) NULL, ( tskIDLE_PRIORITY | portPRIVILEGE_BIT ), &xIdleTaskHandle );
	}
	#else
	{
		/* Create the idle task without storing its handle. */
		xReturn = xTaskCreate( prvIdleTask, ( signed char * ) "IDLE", tskIDLE_STACK_SIZE, ( void * ) NULL, ( tskIDLE_PRIORITY | portPRIVILEGE_BIT ), NULL );
    5164:	2a e6       	ldi	r18, 0x6A	; 106
    5166:	30 e0       	ldi	r19, 0x00	; 0
    5168:	8d e0       	ldi	r24, 0x0D	; 13
    516a:	9c e2       	ldi	r25, 0x2C	; 44
    516c:	b9 01       	movw	r22, r18
    516e:	44 e6       	ldi	r20, 0x64	; 100
    5170:	50 e0       	ldi	r21, 0x00	; 0
    5172:	20 e0       	ldi	r18, 0x00	; 0
    5174:	30 e0       	ldi	r19, 0x00	; 0
    5176:	00 e0       	ldi	r16, 0x00	; 0
    5178:	ee 24       	eor	r14, r14
    517a:	ff 24       	eor	r15, r15
    517c:	cc 24       	eor	r12, r12
    517e:	dd 24       	eor	r13, r13
    5180:	aa 24       	eor	r10, r10
    5182:	bb 24       	eor	r11, r11
    5184:	0e 94 ad 26 	call	0x4d5a	; 0x4d5a <xTaskGenericCreate>
    5188:	89 83       	std	Y+1, r24	; 0x01
			xReturn = xTimerCreateTimerTask();
		}
	}
	#endif

	if( xReturn == pdPASS )
    518a:	89 81       	ldd	r24, Y+1	; 0x01
    518c:	81 30       	cpi	r24, 0x01	; 1
    518e:	51 f4       	brne	.+20     	; 0x51a4 <vTaskStartScheduler+0x58>
		so interrupts will automatically get re-enabled when the first task
		starts to run.

		STEPPING THROUGH HERE USING A DEBUGGER CAN CAUSE BIG PROBLEMS IF THE
		DEBUGGER ALLOWS INTERRUPTS TO BE PROCESSED. */
		portDISABLE_INTERRUPTS();
    5190:	f8 94       	cli

		xSchedulerRunning = pdTRUE;
    5192:	81 e0       	ldi	r24, 0x01	; 1
    5194:	80 93 a6 04 	sts	0x04A6, r24
		xTickCount = ( portTickType ) 0U;
    5198:	10 92 a3 04 	sts	0x04A3, r1
    519c:	10 92 a2 04 	sts	0x04A2, r1
		the run time counter time base. */
		portCONFIGURE_TIMER_FOR_RUN_TIME_STATS();
		
		/* Setting up the timer tick is hardware specific and thus in the
		portable interface. */
		if( xPortStartScheduler() != pdFALSE )
    51a0:	0e 94 be 20 	call	0x417c	; 0x417c <xPortStartScheduler>
		}
	}

	/* This line will only be reached if the kernel could not be started. */
	configASSERT( xReturn );
}
    51a4:	0f 90       	pop	r0
    51a6:	cf 91       	pop	r28
    51a8:	df 91       	pop	r29
    51aa:	0f 91       	pop	r16
    51ac:	ff 90       	pop	r15
    51ae:	ef 90       	pop	r14
    51b0:	df 90       	pop	r13
    51b2:	cf 90       	pop	r12
    51b4:	bf 90       	pop	r11
    51b6:	af 90       	pop	r10
    51b8:	08 95       	ret

000051ba <vTaskEndScheduler>:
/*-----------------------------------------------------------*/

void vTaskEndScheduler( void )
{
    51ba:	df 93       	push	r29
    51bc:	cf 93       	push	r28
    51be:	cd b7       	in	r28, 0x3d	; 61
    51c0:	de b7       	in	r29, 0x3e	; 62
	/* Stop the scheduler interrupts and call the portable scheduler end
	routine so the original ISRs can be restored if necessary.  The port
	layer must ensure interrupts enable	bit is left in the correct state. */
	portDISABLE_INTERRUPTS();
    51c2:	f8 94       	cli
	xSchedulerRunning = pdFALSE;
    51c4:	10 92 a6 04 	sts	0x04A6, r1
	vPortEndScheduler();
    51c8:	0e 94 f3 20 	call	0x41e6	; 0x41e6 <vPortEndScheduler>
}
    51cc:	cf 91       	pop	r28
    51ce:	df 91       	pop	r29
    51d0:	08 95       	ret

000051d2 <vTaskSuspendAll>:
/*----------------------------------------------------------*/

void vTaskSuspendAll( void )
{
    51d2:	df 93       	push	r29
    51d4:	cf 93       	push	r28
    51d6:	cd b7       	in	r28, 0x3d	; 61
    51d8:	de b7       	in	r29, 0x3e	; 62
	/* A critical section is not required as the variable is of type
	portBASE_TYPE. */
	++uxSchedulerSuspended;
    51da:	80 91 a7 04 	lds	r24, 0x04A7
    51de:	8f 5f       	subi	r24, 0xFF	; 255
    51e0:	80 93 a7 04 	sts	0x04A7, r24
}
    51e4:	cf 91       	pop	r28
    51e6:	df 91       	pop	r29
    51e8:	08 95       	ret

000051ea <xTaskResumeAll>:
/*----------------------------------------------------------*/

signed portBASE_TYPE xTaskResumeAll( void )
{
    51ea:	df 93       	push	r29
    51ec:	cf 93       	push	r28
    51ee:	00 d0       	rcall	.+0      	; 0x51f0 <xTaskResumeAll+0x6>
    51f0:	00 d0       	rcall	.+0      	; 0x51f2 <xTaskResumeAll+0x8>
    51f2:	cd b7       	in	r28, 0x3d	; 61
    51f4:	de b7       	in	r29, 0x3e	; 62
register tskTCB *pxTCB;
signed portBASE_TYPE xAlreadyYielded = pdFALSE;
    51f6:	1a 82       	std	Y+2, r1	; 0x02
	/* It is possible that an ISR caused a task to be removed from an event
	list while the scheduler was suspended.  If this was the case then the
	removed task will have been added to the xPendingReadyList.  Once the
	scheduler has been resumed it is safe to move all the pending ready
	tasks from this list into their appropriate ready list. */
	taskENTER_CRITICAL();
    51f8:	0f b6       	in	r0, 0x3f	; 63
    51fa:	f8 94       	cli
    51fc:	0f 92       	push	r0
	{
		--uxSchedulerSuspended;
    51fe:	80 91 a7 04 	lds	r24, 0x04A7
    5202:	81 50       	subi	r24, 0x01	; 1
    5204:	80 93 a7 04 	sts	0x04A7, r24

		if( uxSchedulerSuspended == ( unsigned portBASE_TYPE ) pdFALSE )
    5208:	80 91 a7 04 	lds	r24, 0x04A7
    520c:	88 23       	and	r24, r24
    520e:	09 f0       	breq	.+2      	; 0x5212 <xTaskResumeAll+0x28>
    5210:	6c c0       	rjmp	.+216    	; 0x52ea <xTaskResumeAll+0x100>
		{
			if( uxCurrentNumberOfTasks > ( unsigned portBASE_TYPE ) 0U )
    5212:	80 91 a1 04 	lds	r24, 0x04A1
    5216:	88 23       	and	r24, r24
    5218:	09 f4       	brne	.+2      	; 0x521c <xTaskResumeAll+0x32>
    521a:	67 c0       	rjmp	.+206    	; 0x52ea <xTaskResumeAll+0x100>
			{
				portBASE_TYPE xYieldRequired = pdFALSE;
    521c:	19 82       	std	Y+1, r1	; 0x01
    521e:	41 c0       	rjmp	.+130    	; 0x52a2 <xTaskResumeAll+0xb8>

				/* Move any readied tasks from the pending list into the
				appropriate ready list. */
				while( listLIST_IS_EMPTY( ( xList * ) &xPendingReadyList ) == pdFALSE )
				{
					pxTCB = ( tskTCB * ) listGET_OWNER_OF_HEAD_ENTRY(  ( ( xList * ) &xPendingReadyList ) );
    5220:	e0 91 06 05 	lds	r30, 0x0506
    5224:	f0 91 07 05 	lds	r31, 0x0507
    5228:	86 81       	ldd	r24, Z+6	; 0x06
    522a:	97 81       	ldd	r25, Z+7	; 0x07
    522c:	9c 83       	std	Y+4, r25	; 0x04
    522e:	8b 83       	std	Y+3, r24	; 0x03
					vListRemove( &( pxTCB->xEventListItem ) );
    5230:	8b 81       	ldd	r24, Y+3	; 0x03
    5232:	9c 81       	ldd	r25, Y+4	; 0x04
    5234:	0c 96       	adiw	r24, 0x0c	; 12
    5236:	0e 94 f2 1e 	call	0x3de4	; 0x3de4 <vListRemove>
					vListRemove( &( pxTCB->xGenericListItem ) );
    523a:	8b 81       	ldd	r24, Y+3	; 0x03
    523c:	9c 81       	ldd	r25, Y+4	; 0x04
    523e:	02 96       	adiw	r24, 0x02	; 2
    5240:	0e 94 f2 1e 	call	0x3de4	; 0x3de4 <vListRemove>
					prvAddTaskToReadyQueue( pxTCB );
    5244:	eb 81       	ldd	r30, Y+3	; 0x03
    5246:	fc 81       	ldd	r31, Y+4	; 0x04
    5248:	96 89       	ldd	r25, Z+22	; 0x16
    524a:	80 91 a5 04 	lds	r24, 0x04A5
    524e:	89 17       	cp	r24, r25
    5250:	28 f4       	brcc	.+10     	; 0x525c <xTaskResumeAll+0x72>
    5252:	eb 81       	ldd	r30, Y+3	; 0x03
    5254:	fc 81       	ldd	r31, Y+4	; 0x04
    5256:	86 89       	ldd	r24, Z+22	; 0x16
    5258:	80 93 a5 04 	sts	0x04A5, r24
    525c:	eb 81       	ldd	r30, Y+3	; 0x03
    525e:	fc 81       	ldd	r31, Y+4	; 0x04
    5260:	86 89       	ldd	r24, Z+22	; 0x16
    5262:	28 2f       	mov	r18, r24
    5264:	30 e0       	ldi	r19, 0x00	; 0
    5266:	c9 01       	movw	r24, r18
    5268:	88 0f       	add	r24, r24
    526a:	99 1f       	adc	r25, r25
    526c:	88 0f       	add	r24, r24
    526e:	99 1f       	adc	r25, r25
    5270:	88 0f       	add	r24, r24
    5272:	99 1f       	adc	r25, r25
    5274:	82 0f       	add	r24, r18
    5276:	93 1f       	adc	r25, r19
    5278:	84 55       	subi	r24, 0x54	; 84
    527a:	9b 4f       	sbci	r25, 0xFB	; 251
    527c:	2b 81       	ldd	r18, Y+3	; 0x03
    527e:	3c 81       	ldd	r19, Y+4	; 0x04
    5280:	2e 5f       	subi	r18, 0xFE	; 254
    5282:	3f 4f       	sbci	r19, 0xFF	; 255
    5284:	b9 01       	movw	r22, r18
    5286:	0e 94 3a 1e 	call	0x3c74	; 0x3c74 <vListInsertEnd>

					/* If we have moved a task that has a priority higher than
					the current task then we should yield. */
					if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
    528a:	eb 81       	ldd	r30, Y+3	; 0x03
    528c:	fc 81       	ldd	r31, Y+4	; 0x04
    528e:	96 89       	ldd	r25, Z+22	; 0x16
    5290:	e0 91 9e 04 	lds	r30, 0x049E
    5294:	f0 91 9f 04 	lds	r31, 0x049F
    5298:	86 89       	ldd	r24, Z+22	; 0x16
    529a:	98 17       	cp	r25, r24
    529c:	10 f0       	brcs	.+4      	; 0x52a2 <xTaskResumeAll+0xb8>
					{
						xYieldRequired = pdTRUE;
    529e:	81 e0       	ldi	r24, 0x01	; 1
    52a0:	89 83       	std	Y+1, r24	; 0x01
			{
				portBASE_TYPE xYieldRequired = pdFALSE;

				/* Move any readied tasks from the pending list into the
				appropriate ready list. */
				while( listLIST_IS_EMPTY( ( xList * ) &xPendingReadyList ) == pdFALSE )
    52a2:	80 91 01 05 	lds	r24, 0x0501
    52a6:	88 23       	and	r24, r24
    52a8:	09 f0       	breq	.+2      	; 0x52ac <xTaskResumeAll+0xc2>
    52aa:	ba cf       	rjmp	.-140    	; 0x5220 <xTaskResumeAll+0x36>
				}

				/* If any ticks occurred while the scheduler was suspended then
				they should be processed now.  This ensures the tick count does not
				slip, and that any delayed tasks are resumed at the correct time. */
				if( uxMissedTicks > ( unsigned portBASE_TYPE ) 0U )
    52ac:	80 91 a8 04 	lds	r24, 0x04A8
    52b0:	88 23       	and	r24, r24
    52b2:	71 f0       	breq	.+28     	; 0x52d0 <xTaskResumeAll+0xe6>
    52b4:	07 c0       	rjmp	.+14     	; 0x52c4 <xTaskResumeAll+0xda>
				{
					while( uxMissedTicks > ( unsigned portBASE_TYPE ) 0U )
					{
						vTaskIncrementTick();
    52b6:	0e 94 b4 29 	call	0x5368	; 0x5368 <vTaskIncrementTick>
						--uxMissedTicks;
    52ba:	80 91 a8 04 	lds	r24, 0x04A8
    52be:	81 50       	subi	r24, 0x01	; 1
    52c0:	80 93 a8 04 	sts	0x04A8, r24
				/* If any ticks occurred while the scheduler was suspended then
				they should be processed now.  This ensures the tick count does not
				slip, and that any delayed tasks are resumed at the correct time. */
				if( uxMissedTicks > ( unsigned portBASE_TYPE ) 0U )
				{
					while( uxMissedTicks > ( unsigned portBASE_TYPE ) 0U )
    52c4:	80 91 a8 04 	lds	r24, 0x04A8
    52c8:	88 23       	and	r24, r24
    52ca:	a9 f7       	brne	.-22     	; 0x52b6 <xTaskResumeAll+0xcc>
					/* As we have processed some ticks it is appropriate to yield
					to ensure the highest priority task that is ready to run is
					the task actually running. */
					#if configUSE_PREEMPTION == 1
					{
						xYieldRequired = pdTRUE;
    52cc:	81 e0       	ldi	r24, 0x01	; 1
    52ce:	89 83       	std	Y+1, r24	; 0x01
					}
					#endif
				}

				if( ( xYieldRequired == pdTRUE ) || ( xMissedYield == pdTRUE ) )
    52d0:	89 81       	ldd	r24, Y+1	; 0x01
    52d2:	81 30       	cpi	r24, 0x01	; 1
    52d4:	21 f0       	breq	.+8      	; 0x52de <xTaskResumeAll+0xf4>
    52d6:	80 91 a9 04 	lds	r24, 0x04A9
    52da:	81 30       	cpi	r24, 0x01	; 1
    52dc:	31 f4       	brne	.+12     	; 0x52ea <xTaskResumeAll+0x100>
				{
					xAlreadyYielded = pdTRUE;
    52de:	81 e0       	ldi	r24, 0x01	; 1
    52e0:	8a 83       	std	Y+2, r24	; 0x02
					xMissedYield = pdFALSE;
    52e2:	10 92 a9 04 	sts	0x04A9, r1
					portYIELD_WITHIN_API();
    52e6:	0e 94 fa 20 	call	0x41f4	; 0x41f4 <vPortYield>
				}
			}
		}
	}
	taskEXIT_CRITICAL();
    52ea:	0f 90       	pop	r0
    52ec:	0f be       	out	0x3f, r0	; 63

	return xAlreadyYielded;
    52ee:	8a 81       	ldd	r24, Y+2	; 0x02
}
    52f0:	0f 90       	pop	r0
    52f2:	0f 90       	pop	r0
    52f4:	0f 90       	pop	r0
    52f6:	0f 90       	pop	r0
    52f8:	cf 91       	pop	r28
    52fa:	df 91       	pop	r29
    52fc:	08 95       	ret

000052fe <xTaskGetTickCount>:
 *----------------------------------------------------------*/



portTickType xTaskGetTickCount( void )
{
    52fe:	df 93       	push	r29
    5300:	cf 93       	push	r28
    5302:	00 d0       	rcall	.+0      	; 0x5304 <xTaskGetTickCount+0x6>
    5304:	cd b7       	in	r28, 0x3d	; 61
    5306:	de b7       	in	r29, 0x3e	; 62
portTickType xTicks;

	/* Critical section required if running on a 16 bit processor. */
	taskENTER_CRITICAL();
    5308:	0f b6       	in	r0, 0x3f	; 63
    530a:	f8 94       	cli
    530c:	0f 92       	push	r0
	{
		xTicks = xTickCount;
    530e:	80 91 a2 04 	lds	r24, 0x04A2
    5312:	90 91 a3 04 	lds	r25, 0x04A3
    5316:	9a 83       	std	Y+2, r25	; 0x02
    5318:	89 83       	std	Y+1, r24	; 0x01
	}
	taskEXIT_CRITICAL();
    531a:	0f 90       	pop	r0
    531c:	0f be       	out	0x3f, r0	; 63

	return xTicks;
    531e:	89 81       	ldd	r24, Y+1	; 0x01
    5320:	9a 81       	ldd	r25, Y+2	; 0x02
}
    5322:	0f 90       	pop	r0
    5324:	0f 90       	pop	r0
    5326:	cf 91       	pop	r28
    5328:	df 91       	pop	r29
    532a:	08 95       	ret

0000532c <xTaskGetTickCountFromISR>:
/*-----------------------------------------------------------*/

portTickType xTaskGetTickCountFromISR( void )
{
    532c:	df 93       	push	r29
    532e:	cf 93       	push	r28
    5330:	00 d0       	rcall	.+0      	; 0x5332 <xTaskGetTickCountFromISR+0x6>
    5332:	0f 92       	push	r0
    5334:	cd b7       	in	r28, 0x3d	; 61
    5336:	de b7       	in	r29, 0x3e	; 62
portTickType xReturn;
unsigned portBASE_TYPE uxSavedInterruptStatus;

	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
    5338:	19 82       	std	Y+1, r1	; 0x01
	xReturn = xTickCount;
    533a:	80 91 a2 04 	lds	r24, 0x04A2
    533e:	90 91 a3 04 	lds	r25, 0x04A3
    5342:	9b 83       	std	Y+3, r25	; 0x03
    5344:	8a 83       	std	Y+2, r24	; 0x02
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
    5346:	8a 81       	ldd	r24, Y+2	; 0x02
    5348:	9b 81       	ldd	r25, Y+3	; 0x03
}
    534a:	0f 90       	pop	r0
    534c:	0f 90       	pop	r0
    534e:	0f 90       	pop	r0
    5350:	cf 91       	pop	r28
    5352:	df 91       	pop	r29
    5354:	08 95       	ret

00005356 <uxTaskGetNumberOfTasks>:
/*-----------------------------------------------------------*/

unsigned portBASE_TYPE uxTaskGetNumberOfTasks( void )
{
    5356:	df 93       	push	r29
    5358:	cf 93       	push	r28
    535a:	cd b7       	in	r28, 0x3d	; 61
    535c:	de b7       	in	r29, 0x3e	; 62
	/* A critical section is not required because the variables are of type
	portBASE_TYPE. */
	return uxCurrentNumberOfTasks;
    535e:	80 91 a1 04 	lds	r24, 0x04A1
}
    5362:	cf 91       	pop	r28
    5364:	df 91       	pop	r29
    5366:	08 95       	ret

00005368 <vTaskIncrementTick>:
 * SCHEDULER INTERNALS AVAILABLE FOR PORTING PURPOSES
 * documented in task.h
 *----------------------------------------------------------*/

void vTaskIncrementTick( void )
{
    5368:	df 93       	push	r29
    536a:	cf 93       	push	r28
    536c:	00 d0       	rcall	.+0      	; 0x536e <vTaskIncrementTick+0x6>
    536e:	00 d0       	rcall	.+0      	; 0x5370 <vTaskIncrementTick+0x8>
    5370:	00 d0       	rcall	.+0      	; 0x5372 <vTaskIncrementTick+0xa>
    5372:	cd b7       	in	r28, 0x3d	; 61
    5374:	de b7       	in	r29, 0x3e	; 62
tskTCB * pxTCB;

	/* Called by the portable layer each time a tick interrupt occurs.
	Increments the tick then checks to see if the new tick value will cause any
	tasks to be unblocked. */
	if( uxSchedulerSuspended == ( unsigned portBASE_TYPE ) pdFALSE )
    5376:	80 91 a7 04 	lds	r24, 0x04A7
    537a:	88 23       	and	r24, r24
    537c:	09 f0       	breq	.+2      	; 0x5380 <vTaskIncrementTick+0x18>
    537e:	bb c0       	rjmp	.+374    	; 0x54f6 <vTaskIncrementTick+0x18e>
	{
		++xTickCount;
    5380:	80 91 a2 04 	lds	r24, 0x04A2
    5384:	90 91 a3 04 	lds	r25, 0x04A3
    5388:	01 96       	adiw	r24, 0x01	; 1
    538a:	90 93 a3 04 	sts	0x04A3, r25
    538e:	80 93 a2 04 	sts	0x04A2, r24
		if( xTickCount == ( portTickType ) 0U )
    5392:	80 91 a2 04 	lds	r24, 0x04A2
    5396:	90 91 a3 04 	lds	r25, 0x04A3
    539a:	00 97       	sbiw	r24, 0x00	; 0
    539c:	d1 f5       	brne	.+116    	; 0x5412 <vTaskIncrementTick+0xaa>
			/* Tick count has overflowed so we need to swap the delay lists.
			If there are any items in pxDelayedTaskList here then there is
			an error! */
			configASSERT( ( listLIST_IS_EMPTY( pxDelayedTaskList ) ) );
			
			pxTemp = pxDelayedTaskList;
    539e:	80 91 fd 04 	lds	r24, 0x04FD
    53a2:	90 91 fe 04 	lds	r25, 0x04FE
    53a6:	9c 83       	std	Y+4, r25	; 0x04
    53a8:	8b 83       	std	Y+3, r24	; 0x03
			pxDelayedTaskList = pxOverflowDelayedTaskList;
    53aa:	80 91 ff 04 	lds	r24, 0x04FF
    53ae:	90 91 00 05 	lds	r25, 0x0500
    53b2:	90 93 fe 04 	sts	0x04FE, r25
    53b6:	80 93 fd 04 	sts	0x04FD, r24
			pxOverflowDelayedTaskList = pxTemp;
    53ba:	8b 81       	ldd	r24, Y+3	; 0x03
    53bc:	9c 81       	ldd	r25, Y+4	; 0x04
    53be:	90 93 00 05 	sts	0x0500, r25
    53c2:	80 93 ff 04 	sts	0x04FF, r24
			xNumOfOverflows++;
    53c6:	80 91 aa 04 	lds	r24, 0x04AA
    53ca:	8f 5f       	subi	r24, 0xFF	; 255
    53cc:	80 93 aa 04 	sts	0x04AA, r24
	
			if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
    53d0:	e0 91 fd 04 	lds	r30, 0x04FD
    53d4:	f0 91 fe 04 	lds	r31, 0x04FE
    53d8:	80 81       	ld	r24, Z
    53da:	88 23       	and	r24, r24
    53dc:	39 f4       	brne	.+14     	; 0x53ec <vTaskIncrementTick+0x84>
				/* The new current delayed list is empty.  Set
				xNextTaskUnblockTime to the maximum possible value so it is
				extremely unlikely that the	
				if( xTickCount >= xNextTaskUnblockTime ) test will pass until
				there is an item in the delayed list. */
				xNextTaskUnblockTime = portMAX_DELAY;
    53de:	8f ef       	ldi	r24, 0xFF	; 255
    53e0:	9f ef       	ldi	r25, 0xFF	; 255
    53e2:	90 93 78 00 	sts	0x0078, r25
    53e6:	80 93 77 00 	sts	0x0077, r24
    53ea:	13 c0       	rjmp	.+38     	; 0x5412 <vTaskIncrementTick+0xaa>
			{
				/* The new current delayed list is not empty, get the value of
				the item at the head of the delayed list.  This is the time at
				which the task at the head of the delayed list should be removed
				from the Blocked state. */
				pxTCB = ( tskTCB * ) listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList );
    53ec:	e0 91 fd 04 	lds	r30, 0x04FD
    53f0:	f0 91 fe 04 	lds	r31, 0x04FE
    53f4:	05 80       	ldd	r0, Z+5	; 0x05
    53f6:	f6 81       	ldd	r31, Z+6	; 0x06
    53f8:	e0 2d       	mov	r30, r0
    53fa:	86 81       	ldd	r24, Z+6	; 0x06
    53fc:	97 81       	ldd	r25, Z+7	; 0x07
    53fe:	9e 83       	std	Y+6, r25	; 0x06
    5400:	8d 83       	std	Y+5, r24	; 0x05
				xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( pxTCB->xGenericListItem ) );
    5402:	ed 81       	ldd	r30, Y+5	; 0x05
    5404:	fe 81       	ldd	r31, Y+6	; 0x06
    5406:	82 81       	ldd	r24, Z+2	; 0x02
    5408:	93 81       	ldd	r25, Z+3	; 0x03
    540a:	90 93 78 00 	sts	0x0078, r25
    540e:	80 93 77 00 	sts	0x0077, r24
			}
		}

		/* See if this tick has made a timeout expire. */
		prvCheckDelayedTasks();
    5412:	20 91 a2 04 	lds	r18, 0x04A2
    5416:	30 91 a3 04 	lds	r19, 0x04A3
    541a:	80 91 77 00 	lds	r24, 0x0077
    541e:	90 91 78 00 	lds	r25, 0x0078
    5422:	28 17       	cp	r18, r24
    5424:	39 07       	cpc	r19, r25
    5426:	08 f4       	brcc	.+2      	; 0x542a <vTaskIncrementTick+0xc2>
    5428:	6b c0       	rjmp	.+214    	; 0x5500 <vTaskIncrementTick+0x198>
    542a:	e0 91 fd 04 	lds	r30, 0x04FD
    542e:	f0 91 fe 04 	lds	r31, 0x04FE
    5432:	80 81       	ld	r24, Z
    5434:	88 23       	and	r24, r24
    5436:	39 f4       	brne	.+14     	; 0x5446 <vTaskIncrementTick+0xde>
    5438:	8f ef       	ldi	r24, 0xFF	; 255
    543a:	9f ef       	ldi	r25, 0xFF	; 255
    543c:	90 93 78 00 	sts	0x0078, r25
    5440:	80 93 77 00 	sts	0x0077, r24
    5444:	5d c0       	rjmp	.+186    	; 0x5500 <vTaskIncrementTick+0x198>
    5446:	e0 91 fd 04 	lds	r30, 0x04FD
    544a:	f0 91 fe 04 	lds	r31, 0x04FE
    544e:	05 80       	ldd	r0, Z+5	; 0x05
    5450:	f6 81       	ldd	r31, Z+6	; 0x06
    5452:	e0 2d       	mov	r30, r0
    5454:	86 81       	ldd	r24, Z+6	; 0x06
    5456:	97 81       	ldd	r25, Z+7	; 0x07
    5458:	9e 83       	std	Y+6, r25	; 0x06
    545a:	8d 83       	std	Y+5, r24	; 0x05
    545c:	ed 81       	ldd	r30, Y+5	; 0x05
    545e:	fe 81       	ldd	r31, Y+6	; 0x06
    5460:	82 81       	ldd	r24, Z+2	; 0x02
    5462:	93 81       	ldd	r25, Z+3	; 0x03
    5464:	9a 83       	std	Y+2, r25	; 0x02
    5466:	89 83       	std	Y+1, r24	; 0x01
    5468:	20 91 a2 04 	lds	r18, 0x04A2
    546c:	30 91 a3 04 	lds	r19, 0x04A3
    5470:	89 81       	ldd	r24, Y+1	; 0x01
    5472:	9a 81       	ldd	r25, Y+2	; 0x02
    5474:	28 17       	cp	r18, r24
    5476:	39 07       	cpc	r19, r25
    5478:	38 f4       	brcc	.+14     	; 0x5488 <vTaskIncrementTick+0x120>
    547a:	89 81       	ldd	r24, Y+1	; 0x01
    547c:	9a 81       	ldd	r25, Y+2	; 0x02
    547e:	90 93 78 00 	sts	0x0078, r25
    5482:	80 93 77 00 	sts	0x0077, r24
    5486:	3c c0       	rjmp	.+120    	; 0x5500 <vTaskIncrementTick+0x198>
    5488:	8d 81       	ldd	r24, Y+5	; 0x05
    548a:	9e 81       	ldd	r25, Y+6	; 0x06
    548c:	02 96       	adiw	r24, 0x02	; 2
    548e:	0e 94 f2 1e 	call	0x3de4	; 0x3de4 <vListRemove>
    5492:	ed 81       	ldd	r30, Y+5	; 0x05
    5494:	fe 81       	ldd	r31, Y+6	; 0x06
    5496:	84 89       	ldd	r24, Z+20	; 0x14
    5498:	95 89       	ldd	r25, Z+21	; 0x15
    549a:	00 97       	sbiw	r24, 0x00	; 0
    549c:	29 f0       	breq	.+10     	; 0x54a8 <vTaskIncrementTick+0x140>
    549e:	8d 81       	ldd	r24, Y+5	; 0x05
    54a0:	9e 81       	ldd	r25, Y+6	; 0x06
    54a2:	0c 96       	adiw	r24, 0x0c	; 12
    54a4:	0e 94 f2 1e 	call	0x3de4	; 0x3de4 <vListRemove>
    54a8:	ed 81       	ldd	r30, Y+5	; 0x05
    54aa:	fe 81       	ldd	r31, Y+6	; 0x06
    54ac:	96 89       	ldd	r25, Z+22	; 0x16
    54ae:	80 91 a5 04 	lds	r24, 0x04A5
    54b2:	89 17       	cp	r24, r25
    54b4:	28 f4       	brcc	.+10     	; 0x54c0 <vTaskIncrementTick+0x158>
    54b6:	ed 81       	ldd	r30, Y+5	; 0x05
    54b8:	fe 81       	ldd	r31, Y+6	; 0x06
    54ba:	86 89       	ldd	r24, Z+22	; 0x16
    54bc:	80 93 a5 04 	sts	0x04A5, r24
    54c0:	ed 81       	ldd	r30, Y+5	; 0x05
    54c2:	fe 81       	ldd	r31, Y+6	; 0x06
    54c4:	86 89       	ldd	r24, Z+22	; 0x16
    54c6:	28 2f       	mov	r18, r24
    54c8:	30 e0       	ldi	r19, 0x00	; 0
    54ca:	c9 01       	movw	r24, r18
    54cc:	88 0f       	add	r24, r24
    54ce:	99 1f       	adc	r25, r25
    54d0:	88 0f       	add	r24, r24
    54d2:	99 1f       	adc	r25, r25
    54d4:	88 0f       	add	r24, r24
    54d6:	99 1f       	adc	r25, r25
    54d8:	82 0f       	add	r24, r18
    54da:	93 1f       	adc	r25, r19
    54dc:	ac 01       	movw	r20, r24
    54de:	44 55       	subi	r20, 0x54	; 84
    54e0:	5b 4f       	sbci	r21, 0xFB	; 251
    54e2:	8d 81       	ldd	r24, Y+5	; 0x05
    54e4:	9e 81       	ldd	r25, Y+6	; 0x06
    54e6:	9c 01       	movw	r18, r24
    54e8:	2e 5f       	subi	r18, 0xFE	; 254
    54ea:	3f 4f       	sbci	r19, 0xFF	; 255
    54ec:	ca 01       	movw	r24, r20
    54ee:	b9 01       	movw	r22, r18
    54f0:	0e 94 3a 1e 	call	0x3c74	; 0x3c74 <vListInsertEnd>
    54f4:	9a cf       	rjmp	.-204    	; 0x542a <vTaskIncrementTick+0xc2>
	}
	else
	{
		++uxMissedTicks;
    54f6:	80 91 a8 04 	lds	r24, 0x04A8
    54fa:	8f 5f       	subi	r24, 0xFF	; 255
    54fc:	80 93 a8 04 	sts	0x04A8, r24
		}
	}
	#endif

	traceTASK_INCREMENT_TICK( xTickCount );
}
    5500:	26 96       	adiw	r28, 0x06	; 6
    5502:	0f b6       	in	r0, 0x3f	; 63
    5504:	f8 94       	cli
    5506:	de bf       	out	0x3e, r29	; 62
    5508:	0f be       	out	0x3f, r0	; 63
    550a:	cd bf       	out	0x3d, r28	; 61
    550c:	cf 91       	pop	r28
    550e:	df 91       	pop	r29
    5510:	08 95       	ret

00005512 <vTaskSwitchContext>:

#endif
/*-----------------------------------------------------------*/

void vTaskSwitchContext( void )
{
    5512:	df 93       	push	r29
    5514:	cf 93       	push	r28
    5516:	00 d0       	rcall	.+0      	; 0x5518 <vTaskSwitchContext+0x6>
    5518:	cd b7       	in	r28, 0x3d	; 61
    551a:	de b7       	in	r29, 0x3e	; 62
	if( uxSchedulerSuspended != ( unsigned portBASE_TYPE ) pdFALSE )
    551c:	80 91 a7 04 	lds	r24, 0x04A7
    5520:	88 23       	and	r24, r24
    5522:	49 f0       	breq	.+18     	; 0x5536 <vTaskSwitchContext+0x24>
	{
		/* The scheduler is currently suspended - do not allow a context
		switch. */
		xMissedYield = pdTRUE;
    5524:	81 e0       	ldi	r24, 0x01	; 1
    5526:	80 93 a9 04 	sts	0x04A9, r24
    552a:	54 c0       	rjmp	.+168    	; 0x55d4 <vTaskSwitchContext+0xc2>
	
		/* Find the highest priority queue that contains ready tasks. */
		while( listLIST_IS_EMPTY( &( pxReadyTasksLists[ uxTopReadyPriority ] ) ) )
		{
			configASSERT( uxTopReadyPriority );
			--uxTopReadyPriority;
    552c:	80 91 a5 04 	lds	r24, 0x04A5
    5530:	81 50       	subi	r24, 0x01	; 1
    5532:	80 93 a5 04 	sts	0x04A5, r24
	
		taskFIRST_CHECK_FOR_STACK_OVERFLOW();
		taskSECOND_CHECK_FOR_STACK_OVERFLOW();
	
		/* Find the highest priority queue that contains ready tasks. */
		while( listLIST_IS_EMPTY( &( pxReadyTasksLists[ uxTopReadyPriority ] ) ) )
    5536:	80 91 a5 04 	lds	r24, 0x04A5
    553a:	28 2f       	mov	r18, r24
    553c:	30 e0       	ldi	r19, 0x00	; 0
    553e:	c9 01       	movw	r24, r18
    5540:	88 0f       	add	r24, r24
    5542:	99 1f       	adc	r25, r25
    5544:	88 0f       	add	r24, r24
    5546:	99 1f       	adc	r25, r25
    5548:	88 0f       	add	r24, r24
    554a:	99 1f       	adc	r25, r25
    554c:	82 0f       	add	r24, r18
    554e:	93 1f       	adc	r25, r19
    5550:	fc 01       	movw	r30, r24
    5552:	e4 55       	subi	r30, 0x54	; 84
    5554:	fb 4f       	sbci	r31, 0xFB	; 251
    5556:	80 81       	ld	r24, Z
    5558:	88 23       	and	r24, r24
    555a:	41 f3       	breq	.-48     	; 0x552c <vTaskSwitchContext+0x1a>
			--uxTopReadyPriority;
		}
	
		/* listGET_OWNER_OF_NEXT_ENTRY walks through the list, so the tasks of the
		same priority get an equal share of the processor time. */
		listGET_OWNER_OF_NEXT_ENTRY( pxCurrentTCB, &( pxReadyTasksLists[ uxTopReadyPriority ] ) );
    555c:	80 91 a5 04 	lds	r24, 0x04A5
    5560:	28 2f       	mov	r18, r24
    5562:	30 e0       	ldi	r19, 0x00	; 0
    5564:	c9 01       	movw	r24, r18
    5566:	88 0f       	add	r24, r24
    5568:	99 1f       	adc	r25, r25
    556a:	88 0f       	add	r24, r24
    556c:	99 1f       	adc	r25, r25
    556e:	88 0f       	add	r24, r24
    5570:	99 1f       	adc	r25, r25
    5572:	82 0f       	add	r24, r18
    5574:	93 1f       	adc	r25, r19
    5576:	84 55       	subi	r24, 0x54	; 84
    5578:	9b 4f       	sbci	r25, 0xFB	; 251
    557a:	9a 83       	std	Y+2, r25	; 0x02
    557c:	89 83       	std	Y+1, r24	; 0x01
    557e:	e9 81       	ldd	r30, Y+1	; 0x01
    5580:	fa 81       	ldd	r31, Y+2	; 0x02
    5582:	01 80       	ldd	r0, Z+1	; 0x01
    5584:	f2 81       	ldd	r31, Z+2	; 0x02
    5586:	e0 2d       	mov	r30, r0
    5588:	82 81       	ldd	r24, Z+2	; 0x02
    558a:	93 81       	ldd	r25, Z+3	; 0x03
    558c:	e9 81       	ldd	r30, Y+1	; 0x01
    558e:	fa 81       	ldd	r31, Y+2	; 0x02
    5590:	92 83       	std	Z+2, r25	; 0x02
    5592:	81 83       	std	Z+1, r24	; 0x01
    5594:	e9 81       	ldd	r30, Y+1	; 0x01
    5596:	fa 81       	ldd	r31, Y+2	; 0x02
    5598:	21 81       	ldd	r18, Z+1	; 0x01
    559a:	32 81       	ldd	r19, Z+2	; 0x02
    559c:	89 81       	ldd	r24, Y+1	; 0x01
    559e:	9a 81       	ldd	r25, Y+2	; 0x02
    55a0:	03 96       	adiw	r24, 0x03	; 3
    55a2:	28 17       	cp	r18, r24
    55a4:	39 07       	cpc	r19, r25
    55a6:	59 f4       	brne	.+22     	; 0x55be <vTaskSwitchContext+0xac>
    55a8:	e9 81       	ldd	r30, Y+1	; 0x01
    55aa:	fa 81       	ldd	r31, Y+2	; 0x02
    55ac:	01 80       	ldd	r0, Z+1	; 0x01
    55ae:	f2 81       	ldd	r31, Z+2	; 0x02
    55b0:	e0 2d       	mov	r30, r0
    55b2:	82 81       	ldd	r24, Z+2	; 0x02
    55b4:	93 81       	ldd	r25, Z+3	; 0x03
    55b6:	e9 81       	ldd	r30, Y+1	; 0x01
    55b8:	fa 81       	ldd	r31, Y+2	; 0x02
    55ba:	92 83       	std	Z+2, r25	; 0x02
    55bc:	81 83       	std	Z+1, r24	; 0x01
    55be:	e9 81       	ldd	r30, Y+1	; 0x01
    55c0:	fa 81       	ldd	r31, Y+2	; 0x02
    55c2:	01 80       	ldd	r0, Z+1	; 0x01
    55c4:	f2 81       	ldd	r31, Z+2	; 0x02
    55c6:	e0 2d       	mov	r30, r0
    55c8:	86 81       	ldd	r24, Z+6	; 0x06
    55ca:	97 81       	ldd	r25, Z+7	; 0x07
    55cc:	90 93 9f 04 	sts	0x049F, r25
    55d0:	80 93 9e 04 	sts	0x049E, r24
	
		traceTASK_SWITCHED_IN();
		vWriteTraceToBuffer();
	}
}
    55d4:	0f 90       	pop	r0
    55d6:	0f 90       	pop	r0
    55d8:	cf 91       	pop	r28
    55da:	df 91       	pop	r29
    55dc:	08 95       	ret

000055de <vTaskPlaceOnEventList>:
/*-----------------------------------------------------------*/

void vTaskPlaceOnEventList( const xList * const pxEventList, portTickType xTicksToWait )
{
    55de:	df 93       	push	r29
    55e0:	cf 93       	push	r28
    55e2:	00 d0       	rcall	.+0      	; 0x55e4 <vTaskPlaceOnEventList+0x6>
    55e4:	00 d0       	rcall	.+0      	; 0x55e6 <vTaskPlaceOnEventList+0x8>
    55e6:	00 d0       	rcall	.+0      	; 0x55e8 <vTaskPlaceOnEventList+0xa>
    55e8:	cd b7       	in	r28, 0x3d	; 61
    55ea:	de b7       	in	r29, 0x3e	; 62
    55ec:	9c 83       	std	Y+4, r25	; 0x04
    55ee:	8b 83       	std	Y+3, r24	; 0x03
    55f0:	7e 83       	std	Y+6, r23	; 0x06
    55f2:	6d 83       	std	Y+5, r22	; 0x05
	SCHEDULER SUSPENDED. */

	/* Place the event list item of the TCB in the appropriate event list.
	This is placed in the list in priority order so the highest priority task
	is the first to be woken by the event. */
	vListInsert( ( xList * ) pxEventList, ( xListItem * ) &( pxCurrentTCB->xEventListItem ) );
    55f4:	4b 81       	ldd	r20, Y+3	; 0x03
    55f6:	5c 81       	ldd	r21, Y+4	; 0x04
    55f8:	80 91 9e 04 	lds	r24, 0x049E
    55fc:	90 91 9f 04 	lds	r25, 0x049F
    5600:	9c 01       	movw	r18, r24
    5602:	24 5f       	subi	r18, 0xF4	; 244
    5604:	3f 4f       	sbci	r19, 0xFF	; 255
    5606:	ca 01       	movw	r24, r20
    5608:	b9 01       	movw	r22, r18
    560a:	0e 94 86 1e 	call	0x3d0c	; 0x3d0c <vListInsert>

	/* We must remove ourselves from the ready list before adding ourselves
	to the blocked list as the same list item is used for both lists.  We have
	exclusive access to the ready lists as the scheduler is locked. */
	vListRemove( ( xListItem * ) &( pxCurrentTCB->xGenericListItem ) );
    560e:	80 91 9e 04 	lds	r24, 0x049E
    5612:	90 91 9f 04 	lds	r25, 0x049F
    5616:	02 96       	adiw	r24, 0x02	; 2
    5618:	0e 94 f2 1e 	call	0x3de4	; 0x3de4 <vListRemove>
	}
	#else
	{
			/* Calculate the time at which the task should be woken if the event does
			not occur.  This may overflow but this doesn't matter. */
			xTimeToWake = xTickCount + xTicksToWait;
    561c:	20 91 a2 04 	lds	r18, 0x04A2
    5620:	30 91 a3 04 	lds	r19, 0x04A3
    5624:	8d 81       	ldd	r24, Y+5	; 0x05
    5626:	9e 81       	ldd	r25, Y+6	; 0x06
    5628:	82 0f       	add	r24, r18
    562a:	93 1f       	adc	r25, r19
    562c:	9a 83       	std	Y+2, r25	; 0x02
    562e:	89 83       	std	Y+1, r24	; 0x01
			prvAddCurrentTaskToDelayedList( xTimeToWake );
    5630:	89 81       	ldd	r24, Y+1	; 0x01
    5632:	9a 81       	ldd	r25, Y+2	; 0x02
    5634:	0e 94 e9 2c 	call	0x59d2	; 0x59d2 <prvAddCurrentTaskToDelayedList>
	}
	#endif
}
    5638:	26 96       	adiw	r28, 0x06	; 6
    563a:	0f b6       	in	r0, 0x3f	; 63
    563c:	f8 94       	cli
    563e:	de bf       	out	0x3e, r29	; 62
    5640:	0f be       	out	0x3f, r0	; 63
    5642:	cd bf       	out	0x3d, r28	; 61
    5644:	cf 91       	pop	r28
    5646:	df 91       	pop	r29
    5648:	08 95       	ret

0000564a <xTaskRemoveFromEventList>:
	
#endif /* configUSE_TIMERS */
/*-----------------------------------------------------------*/

signed portBASE_TYPE xTaskRemoveFromEventList( const xList * const pxEventList )
{
    564a:	df 93       	push	r29
    564c:	cf 93       	push	r28
    564e:	00 d0       	rcall	.+0      	; 0x5650 <xTaskRemoveFromEventList+0x6>
    5650:	00 d0       	rcall	.+0      	; 0x5652 <xTaskRemoveFromEventList+0x8>
    5652:	0f 92       	push	r0
    5654:	cd b7       	in	r28, 0x3d	; 61
    5656:	de b7       	in	r29, 0x3e	; 62
    5658:	9d 83       	std	Y+5, r25	; 0x05
    565a:	8c 83       	std	Y+4, r24	; 0x04
	get called - the lock count on the queue will get modified instead.  This
	means we can always expect exclusive access to the event list here.
	
	This function assumes that a check has already been made to ensure that
	pxEventList is not empty. */
	pxUnblockedTCB = ( tskTCB * ) listGET_OWNER_OF_HEAD_ENTRY( pxEventList );
    565c:	ec 81       	ldd	r30, Y+4	; 0x04
    565e:	fd 81       	ldd	r31, Y+5	; 0x05
    5660:	05 80       	ldd	r0, Z+5	; 0x05
    5662:	f6 81       	ldd	r31, Z+6	; 0x06
    5664:	e0 2d       	mov	r30, r0
    5666:	86 81       	ldd	r24, Z+6	; 0x06
    5668:	97 81       	ldd	r25, Z+7	; 0x07
    566a:	9b 83       	std	Y+3, r25	; 0x03
    566c:	8a 83       	std	Y+2, r24	; 0x02
	configASSERT( pxUnblockedTCB );
	vListRemove( &( pxUnblockedTCB->xEventListItem ) );
    566e:	8a 81       	ldd	r24, Y+2	; 0x02
    5670:	9b 81       	ldd	r25, Y+3	; 0x03
    5672:	0c 96       	adiw	r24, 0x0c	; 12
    5674:	0e 94 f2 1e 	call	0x3de4	; 0x3de4 <vListRemove>

	if( uxSchedulerSuspended == ( unsigned portBASE_TYPE ) pdFALSE )
    5678:	80 91 a7 04 	lds	r24, 0x04A7
    567c:	88 23       	and	r24, r24
    567e:	61 f5       	brne	.+88     	; 0x56d8 <xTaskRemoveFromEventList+0x8e>
	{
		vListRemove( &( pxUnblockedTCB->xGenericListItem ) );
    5680:	8a 81       	ldd	r24, Y+2	; 0x02
    5682:	9b 81       	ldd	r25, Y+3	; 0x03
    5684:	02 96       	adiw	r24, 0x02	; 2
    5686:	0e 94 f2 1e 	call	0x3de4	; 0x3de4 <vListRemove>
		prvAddTaskToReadyQueue( pxUnblockedTCB );
    568a:	ea 81       	ldd	r30, Y+2	; 0x02
    568c:	fb 81       	ldd	r31, Y+3	; 0x03
    568e:	96 89       	ldd	r25, Z+22	; 0x16
    5690:	80 91 a5 04 	lds	r24, 0x04A5
    5694:	89 17       	cp	r24, r25
    5696:	28 f4       	brcc	.+10     	; 0x56a2 <xTaskRemoveFromEventList+0x58>
    5698:	ea 81       	ldd	r30, Y+2	; 0x02
    569a:	fb 81       	ldd	r31, Y+3	; 0x03
    569c:	86 89       	ldd	r24, Z+22	; 0x16
    569e:	80 93 a5 04 	sts	0x04A5, r24
    56a2:	ea 81       	ldd	r30, Y+2	; 0x02
    56a4:	fb 81       	ldd	r31, Y+3	; 0x03
    56a6:	86 89       	ldd	r24, Z+22	; 0x16
    56a8:	28 2f       	mov	r18, r24
    56aa:	30 e0       	ldi	r19, 0x00	; 0
    56ac:	c9 01       	movw	r24, r18
    56ae:	88 0f       	add	r24, r24
    56b0:	99 1f       	adc	r25, r25
    56b2:	88 0f       	add	r24, r24
    56b4:	99 1f       	adc	r25, r25
    56b6:	88 0f       	add	r24, r24
    56b8:	99 1f       	adc	r25, r25
    56ba:	82 0f       	add	r24, r18
    56bc:	93 1f       	adc	r25, r19
    56be:	ac 01       	movw	r20, r24
    56c0:	44 55       	subi	r20, 0x54	; 84
    56c2:	5b 4f       	sbci	r21, 0xFB	; 251
    56c4:	8a 81       	ldd	r24, Y+2	; 0x02
    56c6:	9b 81       	ldd	r25, Y+3	; 0x03
    56c8:	9c 01       	movw	r18, r24
    56ca:	2e 5f       	subi	r18, 0xFE	; 254
    56cc:	3f 4f       	sbci	r19, 0xFF	; 255
    56ce:	ca 01       	movw	r24, r20
    56d0:	b9 01       	movw	r22, r18
    56d2:	0e 94 3a 1e 	call	0x3c74	; 0x3c74 <vListInsertEnd>
    56d6:	0a c0       	rjmp	.+20     	; 0x56ec <xTaskRemoveFromEventList+0xa2>
	}
	else
	{
		/* We cannot access the delayed or ready lists, so will hold this
		task pending until the scheduler is resumed. */
		vListInsertEnd( ( xList * ) &( xPendingReadyList ), &( pxUnblockedTCB->xEventListItem ) );
    56d8:	8a 81       	ldd	r24, Y+2	; 0x02
    56da:	9b 81       	ldd	r25, Y+3	; 0x03
    56dc:	9c 01       	movw	r18, r24
    56de:	24 5f       	subi	r18, 0xF4	; 244
    56e0:	3f 4f       	sbci	r19, 0xFF	; 255
    56e2:	81 e0       	ldi	r24, 0x01	; 1
    56e4:	95 e0       	ldi	r25, 0x05	; 5
    56e6:	b9 01       	movw	r22, r18
    56e8:	0e 94 3a 1e 	call	0x3c74	; 0x3c74 <vListInsertEnd>
	}

	if( pxUnblockedTCB->uxPriority >= pxCurrentTCB->uxPriority )
    56ec:	ea 81       	ldd	r30, Y+2	; 0x02
    56ee:	fb 81       	ldd	r31, Y+3	; 0x03
    56f0:	96 89       	ldd	r25, Z+22	; 0x16
    56f2:	e0 91 9e 04 	lds	r30, 0x049E
    56f6:	f0 91 9f 04 	lds	r31, 0x049F
    56fa:	86 89       	ldd	r24, Z+22	; 0x16
    56fc:	98 17       	cp	r25, r24
    56fe:	18 f0       	brcs	.+6      	; 0x5706 <xTaskRemoveFromEventList+0xbc>
	{
		/* Return true if the task removed from the event list has
		a higher priority than the calling task.  This allows
		the calling task to know if it should force a context
		switch now. */
		xReturn = pdTRUE;
    5700:	81 e0       	ldi	r24, 0x01	; 1
    5702:	89 83       	std	Y+1, r24	; 0x01
    5704:	01 c0       	rjmp	.+2      	; 0x5708 <xTaskRemoveFromEventList+0xbe>
	}
	else
	{
		xReturn = pdFALSE;
    5706:	19 82       	std	Y+1, r1	; 0x01
	}

	return xReturn;
    5708:	89 81       	ldd	r24, Y+1	; 0x01
}
    570a:	0f 90       	pop	r0
    570c:	0f 90       	pop	r0
    570e:	0f 90       	pop	r0
    5710:	0f 90       	pop	r0
    5712:	0f 90       	pop	r0
    5714:	cf 91       	pop	r28
    5716:	df 91       	pop	r29
    5718:	08 95       	ret

0000571a <vTaskSetTimeOutState>:
/*-----------------------------------------------------------*/

void vTaskSetTimeOutState( xTimeOutType * const pxTimeOut )
{
    571a:	df 93       	push	r29
    571c:	cf 93       	push	r28
    571e:	00 d0       	rcall	.+0      	; 0x5720 <vTaskSetTimeOutState+0x6>
    5720:	cd b7       	in	r28, 0x3d	; 61
    5722:	de b7       	in	r29, 0x3e	; 62
    5724:	9a 83       	std	Y+2, r25	; 0x02
    5726:	89 83       	std	Y+1, r24	; 0x01
	configASSERT( pxTimeOut );
	pxTimeOut->xOverflowCount = xNumOfOverflows;
    5728:	80 91 aa 04 	lds	r24, 0x04AA
    572c:	e9 81       	ldd	r30, Y+1	; 0x01
    572e:	fa 81       	ldd	r31, Y+2	; 0x02
    5730:	80 83       	st	Z, r24
	pxTimeOut->xTimeOnEntering = xTickCount;
    5732:	80 91 a2 04 	lds	r24, 0x04A2
    5736:	90 91 a3 04 	lds	r25, 0x04A3
    573a:	e9 81       	ldd	r30, Y+1	; 0x01
    573c:	fa 81       	ldd	r31, Y+2	; 0x02
    573e:	92 83       	std	Z+2, r25	; 0x02
    5740:	81 83       	std	Z+1, r24	; 0x01
}
    5742:	0f 90       	pop	r0
    5744:	0f 90       	pop	r0
    5746:	cf 91       	pop	r28
    5748:	df 91       	pop	r29
    574a:	08 95       	ret

0000574c <xTaskCheckForTimeOut>:
/*-----------------------------------------------------------*/

portBASE_TYPE xTaskCheckForTimeOut( xTimeOutType * const pxTimeOut, portTickType * const pxTicksToWait )
{
    574c:	df 93       	push	r29
    574e:	cf 93       	push	r28
    5750:	00 d0       	rcall	.+0      	; 0x5752 <xTaskCheckForTimeOut+0x6>
    5752:	00 d0       	rcall	.+0      	; 0x5754 <xTaskCheckForTimeOut+0x8>
    5754:	0f 92       	push	r0
    5756:	cd b7       	in	r28, 0x3d	; 61
    5758:	de b7       	in	r29, 0x3e	; 62
    575a:	9b 83       	std	Y+3, r25	; 0x03
    575c:	8a 83       	std	Y+2, r24	; 0x02
    575e:	7d 83       	std	Y+5, r23	; 0x05
    5760:	6c 83       	std	Y+4, r22	; 0x04
portBASE_TYPE xReturn;

	configASSERT( pxTimeOut );
	configASSERT( pxTicksToWait );

	taskENTER_CRITICAL();
    5762:	0f b6       	in	r0, 0x3f	; 63
    5764:	f8 94       	cli
    5766:	0f 92       	push	r0
				xReturn = pdFALSE;
			}
			else /* We are not blocking indefinitely, perform the checks below. */
		#endif

		if( ( xNumOfOverflows != pxTimeOut->xOverflowCount ) && ( ( portTickType ) xTickCount >= ( portTickType ) pxTimeOut->xTimeOnEntering ) )
    5768:	ea 81       	ldd	r30, Y+2	; 0x02
    576a:	fb 81       	ldd	r31, Y+3	; 0x03
    576c:	90 81       	ld	r25, Z
    576e:	80 91 aa 04 	lds	r24, 0x04AA
    5772:	98 17       	cp	r25, r24
    5774:	71 f0       	breq	.+28     	; 0x5792 <xTaskCheckForTimeOut+0x46>
    5776:	ea 81       	ldd	r30, Y+2	; 0x02
    5778:	fb 81       	ldd	r31, Y+3	; 0x03
    577a:	21 81       	ldd	r18, Z+1	; 0x01
    577c:	32 81       	ldd	r19, Z+2	; 0x02
    577e:	80 91 a2 04 	lds	r24, 0x04A2
    5782:	90 91 a3 04 	lds	r25, 0x04A3
    5786:	82 17       	cp	r24, r18
    5788:	93 07       	cpc	r25, r19
    578a:	18 f0       	brcs	.+6      	; 0x5792 <xTaskCheckForTimeOut+0x46>
		{
			/* The tick count is greater than the time at which vTaskSetTimeout()
			was called, but has also overflowed since vTaskSetTimeOut() was called.
			It must have wrapped all the way around and gone past us again. This
			passed since vTaskSetTimeout() was called. */
			xReturn = pdTRUE;
    578c:	81 e0       	ldi	r24, 0x01	; 1
    578e:	89 83       	std	Y+1, r24	; 0x01
    5790:	2f c0       	rjmp	.+94     	; 0x57f0 <xTaskCheckForTimeOut+0xa4>
		}
		else if( ( ( portTickType ) ( ( portTickType ) xTickCount - ( portTickType ) pxTimeOut->xTimeOnEntering ) ) < ( portTickType ) *pxTicksToWait )
    5792:	20 91 a2 04 	lds	r18, 0x04A2
    5796:	30 91 a3 04 	lds	r19, 0x04A3
    579a:	ea 81       	ldd	r30, Y+2	; 0x02
    579c:	fb 81       	ldd	r31, Y+3	; 0x03
    579e:	81 81       	ldd	r24, Z+1	; 0x01
    57a0:	92 81       	ldd	r25, Z+2	; 0x02
    57a2:	28 1b       	sub	r18, r24
    57a4:	39 0b       	sbc	r19, r25
    57a6:	ec 81       	ldd	r30, Y+4	; 0x04
    57a8:	fd 81       	ldd	r31, Y+5	; 0x05
    57aa:	80 81       	ld	r24, Z
    57ac:	91 81       	ldd	r25, Z+1	; 0x01
    57ae:	28 17       	cp	r18, r24
    57b0:	39 07       	cpc	r19, r25
    57b2:	e0 f4       	brcc	.+56     	; 0x57ec <xTaskCheckForTimeOut+0xa0>
		{
			/* Not a genuine timeout. Adjust parameters for time remaining. */
			*pxTicksToWait -= ( ( portTickType ) xTickCount - ( portTickType ) pxTimeOut->xTimeOnEntering );
    57b4:	ec 81       	ldd	r30, Y+4	; 0x04
    57b6:	fd 81       	ldd	r31, Y+5	; 0x05
    57b8:	40 81       	ld	r20, Z
    57ba:	51 81       	ldd	r21, Z+1	; 0x01
    57bc:	ea 81       	ldd	r30, Y+2	; 0x02
    57be:	fb 81       	ldd	r31, Y+3	; 0x03
    57c0:	21 81       	ldd	r18, Z+1	; 0x01
    57c2:	32 81       	ldd	r19, Z+2	; 0x02
    57c4:	80 91 a2 04 	lds	r24, 0x04A2
    57c8:	90 91 a3 04 	lds	r25, 0x04A3
    57cc:	b9 01       	movw	r22, r18
    57ce:	68 1b       	sub	r22, r24
    57d0:	79 0b       	sbc	r23, r25
    57d2:	cb 01       	movw	r24, r22
    57d4:	84 0f       	add	r24, r20
    57d6:	95 1f       	adc	r25, r21
    57d8:	ec 81       	ldd	r30, Y+4	; 0x04
    57da:	fd 81       	ldd	r31, Y+5	; 0x05
    57dc:	91 83       	std	Z+1, r25	; 0x01
    57de:	80 83       	st	Z, r24
			vTaskSetTimeOutState( pxTimeOut );
    57e0:	8a 81       	ldd	r24, Y+2	; 0x02
    57e2:	9b 81       	ldd	r25, Y+3	; 0x03
    57e4:	0e 94 8d 2b 	call	0x571a	; 0x571a <vTaskSetTimeOutState>
			xReturn = pdFALSE;
    57e8:	19 82       	std	Y+1, r1	; 0x01
    57ea:	02 c0       	rjmp	.+4      	; 0x57f0 <xTaskCheckForTimeOut+0xa4>
		}
		else
		{
			xReturn = pdTRUE;
    57ec:	81 e0       	ldi	r24, 0x01	; 1
    57ee:	89 83       	std	Y+1, r24	; 0x01
		}
	}
	taskEXIT_CRITICAL();
    57f0:	0f 90       	pop	r0
    57f2:	0f be       	out	0x3f, r0	; 63

	return xReturn;
    57f4:	89 81       	ldd	r24, Y+1	; 0x01
}
    57f6:	0f 90       	pop	r0
    57f8:	0f 90       	pop	r0
    57fa:	0f 90       	pop	r0
    57fc:	0f 90       	pop	r0
    57fe:	0f 90       	pop	r0
    5800:	cf 91       	pop	r28
    5802:	df 91       	pop	r29
    5804:	08 95       	ret

00005806 <vTaskMissedYield>:
/*-----------------------------------------------------------*/

void vTaskMissedYield( void )
{
    5806:	df 93       	push	r29
    5808:	cf 93       	push	r28
    580a:	cd b7       	in	r28, 0x3d	; 61
    580c:	de b7       	in	r29, 0x3e	; 62
	xMissedYield = pdTRUE;
    580e:	81 e0       	ldi	r24, 0x01	; 1
    5810:	80 93 a9 04 	sts	0x04A9, r24
}
    5814:	cf 91       	pop	r28
    5816:	df 91       	pop	r29
    5818:	08 95       	ret

0000581a <prvIdleTask>:
 *
 * void prvIdleTask( void *pvParameters );
 *
 */
static portTASK_FUNCTION( prvIdleTask, pvParameters )
{
    581a:	df 93       	push	r29
    581c:	cf 93       	push	r28
    581e:	00 d0       	rcall	.+0      	; 0x5820 <prvIdleTask+0x6>
    5820:	cd b7       	in	r28, 0x3d	; 61
    5822:	de b7       	in	r29, 0x3e	; 62
    5824:	9a 83       	std	Y+2, r25	; 0x02
    5826:	89 83       	std	Y+1, r24	; 0x01
	( void ) pvParameters;

	for( ;; )
	{
		/* See if any tasks have been deleted. */
		prvCheckTasksWaitingTermination();
    5828:	0e 94 ab 2c 	call	0x5956	; 0x5956 <prvCheckTasksWaitingTermination>
    582c:	fd cf       	rjmp	.-6      	; 0x5828 <prvIdleTask+0xe>

0000582e <prvInitialiseTCBVariables>:
 *----------------------------------------------------------*/



static void prvInitialiseTCBVariables( tskTCB *pxTCB, const signed char * const pcName, unsigned portBASE_TYPE uxPriority, const xMemoryRegion * const xRegions, unsigned short usStackDepth )
{
    582e:	0f 93       	push	r16
    5830:	1f 93       	push	r17
    5832:	df 93       	push	r29
    5834:	cf 93       	push	r28
    5836:	cd b7       	in	r28, 0x3d	; 61
    5838:	de b7       	in	r29, 0x3e	; 62
    583a:	29 97       	sbiw	r28, 0x09	; 9
    583c:	0f b6       	in	r0, 0x3f	; 63
    583e:	f8 94       	cli
    5840:	de bf       	out	0x3e, r29	; 62
    5842:	0f be       	out	0x3f, r0	; 63
    5844:	cd bf       	out	0x3d, r28	; 61
    5846:	9a 83       	std	Y+2, r25	; 0x02
    5848:	89 83       	std	Y+1, r24	; 0x01
    584a:	7c 83       	std	Y+4, r23	; 0x04
    584c:	6b 83       	std	Y+3, r22	; 0x03
    584e:	4d 83       	std	Y+5, r20	; 0x05
    5850:	3f 83       	std	Y+7, r19	; 0x07
    5852:	2e 83       	std	Y+6, r18	; 0x06
    5854:	19 87       	std	Y+9, r17	; 0x09
    5856:	08 87       	std	Y+8, r16	; 0x08
	/* Store the function name in the TCB. */
	#if configMAX_TASK_NAME_LEN > 1
	{
		/* Don't bring strncpy into the build unnecessarily. */
		strncpy( ( char * ) pxTCB->pcTaskName, ( const char * ) pcName, ( unsigned short ) configMAX_TASK_NAME_LEN );
    5858:	89 81       	ldd	r24, Y+1	; 0x01
    585a:	9a 81       	ldd	r25, Y+2	; 0x02
    585c:	49 96       	adiw	r24, 0x19	; 25
    585e:	2b 81       	ldd	r18, Y+3	; 0x03
    5860:	3c 81       	ldd	r19, Y+4	; 0x04
    5862:	b9 01       	movw	r22, r18
    5864:	48 e0       	ldi	r20, 0x08	; 8
    5866:	50 e0       	ldi	r21, 0x00	; 0
    5868:	0e 94 c7 2e 	call	0x5d8e	; 0x5d8e <strncpy>
	}
	#endif
	pxTCB->pcTaskName[ ( unsigned short ) configMAX_TASK_NAME_LEN - ( unsigned short ) 1 ] = ( signed char ) '\0';
    586c:	e9 81       	ldd	r30, Y+1	; 0x01
    586e:	fa 81       	ldd	r31, Y+2	; 0x02
    5870:	10 a2       	std	Z+32, r1	; 0x20

	/* This is used as an array index so must ensure it's not too large.  First
	remove the privilege bit if one is present. */
	if( uxPriority >= configMAX_PRIORITIES )
    5872:	8d 81       	ldd	r24, Y+5	; 0x05
    5874:	87 30       	cpi	r24, 0x07	; 7
    5876:	10 f0       	brcs	.+4      	; 0x587c <prvInitialiseTCBVariables+0x4e>
	{
		uxPriority = configMAX_PRIORITIES - ( unsigned portBASE_TYPE ) 1U;
    5878:	86 e0       	ldi	r24, 0x06	; 6
    587a:	8d 83       	std	Y+5, r24	; 0x05
	}

	pxTCB->uxPriority = uxPriority;
    587c:	e9 81       	ldd	r30, Y+1	; 0x01
    587e:	fa 81       	ldd	r31, Y+2	; 0x02
    5880:	8d 81       	ldd	r24, Y+5	; 0x05
    5882:	86 8b       	std	Z+22, r24	; 0x16
	{
		pxTCB->uxBasePriority = uxPriority;
	}
	#endif

	vListInitialiseItem( &( pxTCB->xGenericListItem ) );
    5884:	89 81       	ldd	r24, Y+1	; 0x01
    5886:	9a 81       	ldd	r25, Y+2	; 0x02
    5888:	02 96       	adiw	r24, 0x02	; 2
    588a:	0e 94 2a 1e 	call	0x3c54	; 0x3c54 <vListInitialiseItem>
	vListInitialiseItem( &( pxTCB->xEventListItem ) );
    588e:	89 81       	ldd	r24, Y+1	; 0x01
    5890:	9a 81       	ldd	r25, Y+2	; 0x02
    5892:	0c 96       	adiw	r24, 0x0c	; 12
    5894:	0e 94 2a 1e 	call	0x3c54	; 0x3c54 <vListInitialiseItem>

	/* Set the pxTCB as a link back from the xListItem.  This is so we can get
	back to	the containing TCB from a generic item in a list. */
	listSET_LIST_ITEM_OWNER( &( pxTCB->xGenericListItem ), pxTCB );
    5898:	e9 81       	ldd	r30, Y+1	; 0x01
    589a:	fa 81       	ldd	r31, Y+2	; 0x02
    589c:	89 81       	ldd	r24, Y+1	; 0x01
    589e:	9a 81       	ldd	r25, Y+2	; 0x02
    58a0:	91 87       	std	Z+9, r25	; 0x09
    58a2:	80 87       	std	Z+8, r24	; 0x08

	/* Event lists are always in priority order. */
	listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), configMAX_PRIORITIES - ( portTickType ) uxPriority );
    58a4:	8d 81       	ldd	r24, Y+5	; 0x05
    58a6:	28 2f       	mov	r18, r24
    58a8:	30 e0       	ldi	r19, 0x00	; 0
    58aa:	87 e0       	ldi	r24, 0x07	; 7
    58ac:	90 e0       	ldi	r25, 0x00	; 0
    58ae:	82 1b       	sub	r24, r18
    58b0:	93 0b       	sbc	r25, r19
    58b2:	e9 81       	ldd	r30, Y+1	; 0x01
    58b4:	fa 81       	ldd	r31, Y+2	; 0x02
    58b6:	95 87       	std	Z+13, r25	; 0x0d
    58b8:	84 87       	std	Z+12, r24	; 0x0c
	listSET_LIST_ITEM_OWNER( &( pxTCB->xEventListItem ), pxTCB );
    58ba:	e9 81       	ldd	r30, Y+1	; 0x01
    58bc:	fa 81       	ldd	r31, Y+2	; 0x02
    58be:	89 81       	ldd	r24, Y+1	; 0x01
    58c0:	9a 81       	ldd	r25, Y+2	; 0x02
    58c2:	93 8b       	std	Z+19, r25	; 0x13
    58c4:	82 8b       	std	Z+18, r24	; 0x12
	{
		( void ) xRegions;
		( void ) usStackDepth;
	}
	#endif
}
    58c6:	29 96       	adiw	r28, 0x09	; 9
    58c8:	0f b6       	in	r0, 0x3f	; 63
    58ca:	f8 94       	cli
    58cc:	de bf       	out	0x3e, r29	; 62
    58ce:	0f be       	out	0x3f, r0	; 63
    58d0:	cd bf       	out	0x3d, r28	; 61
    58d2:	cf 91       	pop	r28
    58d4:	df 91       	pop	r29
    58d6:	1f 91       	pop	r17
    58d8:	0f 91       	pop	r16
    58da:	08 95       	ret

000058dc <prvInitialiseTaskLists>:
	}
	/*-----------------------------------------------------------*/
#endif

static void prvInitialiseTaskLists( void )
{
    58dc:	df 93       	push	r29
    58de:	cf 93       	push	r28
    58e0:	0f 92       	push	r0
    58e2:	cd b7       	in	r28, 0x3d	; 61
    58e4:	de b7       	in	r29, 0x3e	; 62
unsigned portBASE_TYPE uxPriority;

	for( uxPriority = ( unsigned portBASE_TYPE ) 0U; uxPriority < configMAX_PRIORITIES; uxPriority++ )
    58e6:	19 82       	std	Y+1, r1	; 0x01
    58e8:	13 c0       	rjmp	.+38     	; 0x5910 <prvInitialiseTaskLists+0x34>
	{
		vListInitialise( ( xList * ) &( pxReadyTasksLists[ uxPriority ] ) );
    58ea:	89 81       	ldd	r24, Y+1	; 0x01
    58ec:	28 2f       	mov	r18, r24
    58ee:	30 e0       	ldi	r19, 0x00	; 0
    58f0:	c9 01       	movw	r24, r18
    58f2:	88 0f       	add	r24, r24
    58f4:	99 1f       	adc	r25, r25
    58f6:	88 0f       	add	r24, r24
    58f8:	99 1f       	adc	r25, r25
    58fa:	88 0f       	add	r24, r24
    58fc:	99 1f       	adc	r25, r25
    58fe:	82 0f       	add	r24, r18
    5900:	93 1f       	adc	r25, r19
    5902:	84 55       	subi	r24, 0x54	; 84
    5904:	9b 4f       	sbci	r25, 0xFB	; 251
    5906:	0e 94 00 1e 	call	0x3c00	; 0x3c00 <vListInitialise>

static void prvInitialiseTaskLists( void )
{
unsigned portBASE_TYPE uxPriority;

	for( uxPriority = ( unsigned portBASE_TYPE ) 0U; uxPriority < configMAX_PRIORITIES; uxPriority++ )
    590a:	89 81       	ldd	r24, Y+1	; 0x01
    590c:	8f 5f       	subi	r24, 0xFF	; 255
    590e:	89 83       	std	Y+1, r24	; 0x01
    5910:	89 81       	ldd	r24, Y+1	; 0x01
    5912:	87 30       	cpi	r24, 0x07	; 7
    5914:	50 f3       	brcs	.-44     	; 0x58ea <prvInitialiseTaskLists+0xe>
	{
		vListInitialise( ( xList * ) &( pxReadyTasksLists[ uxPriority ] ) );
	}

	vListInitialise( ( xList * ) &xDelayedTaskList1 );
    5916:	8b ee       	ldi	r24, 0xEB	; 235
    5918:	94 e0       	ldi	r25, 0x04	; 4
    591a:	0e 94 00 1e 	call	0x3c00	; 0x3c00 <vListInitialise>
	vListInitialise( ( xList * ) &xDelayedTaskList2 );
    591e:	84 ef       	ldi	r24, 0xF4	; 244
    5920:	94 e0       	ldi	r25, 0x04	; 4
    5922:	0e 94 00 1e 	call	0x3c00	; 0x3c00 <vListInitialise>
	vListInitialise( ( xList * ) &xPendingReadyList );
    5926:	81 e0       	ldi	r24, 0x01	; 1
    5928:	95 e0       	ldi	r25, 0x05	; 5
    592a:	0e 94 00 1e 	call	0x3c00	; 0x3c00 <vListInitialise>

	#if ( INCLUDE_vTaskDelete == 1 )
	{
		vListInitialise( ( xList * ) &xTasksWaitingTermination );
    592e:	8a e0       	ldi	r24, 0x0A	; 10
    5930:	95 e0       	ldi	r25, 0x05	; 5
    5932:	0e 94 00 1e 	call	0x3c00	; 0x3c00 <vListInitialise>
	}
	#endif

	/* Start with pxDelayedTaskList using list1 and the pxOverflowDelayedTaskList
	using list2. */
	pxDelayedTaskList = &xDelayedTaskList1;
    5936:	8b ee       	ldi	r24, 0xEB	; 235
    5938:	94 e0       	ldi	r25, 0x04	; 4
    593a:	90 93 fe 04 	sts	0x04FE, r25
    593e:	80 93 fd 04 	sts	0x04FD, r24
	pxOverflowDelayedTaskList = &xDelayedTaskList2;
    5942:	84 ef       	ldi	r24, 0xF4	; 244
    5944:	94 e0       	ldi	r25, 0x04	; 4
    5946:	90 93 00 05 	sts	0x0500, r25
    594a:	80 93 ff 04 	sts	0x04FF, r24
}
    594e:	0f 90       	pop	r0
    5950:	cf 91       	pop	r28
    5952:	df 91       	pop	r29
    5954:	08 95       	ret

00005956 <prvCheckTasksWaitingTermination>:
/*-----------------------------------------------------------*/

static void prvCheckTasksWaitingTermination( void )
{
    5956:	df 93       	push	r29
    5958:	cf 93       	push	r28
    595a:	00 d0       	rcall	.+0      	; 0x595c <prvCheckTasksWaitingTermination+0x6>
    595c:	0f 92       	push	r0
    595e:	cd b7       	in	r28, 0x3d	; 61
    5960:	de b7       	in	r29, 0x3e	; 62
	{
		portBASE_TYPE xListIsEmpty;

		/* ucTasksDeleted is used to prevent vTaskSuspendAll() being called
		too often in the idle task. */
		if( uxTasksDeleted > ( unsigned portBASE_TYPE ) 0U )
    5962:	80 91 a0 04 	lds	r24, 0x04A0
    5966:	88 23       	and	r24, r24
    5968:	71 f1       	breq	.+92     	; 0x59c6 <prvCheckTasksWaitingTermination+0x70>
		{
			vTaskSuspendAll();
    596a:	0e 94 e9 28 	call	0x51d2	; 0x51d2 <vTaskSuspendAll>
				xListIsEmpty = listLIST_IS_EMPTY( &xTasksWaitingTermination );
    596e:	80 91 0a 05 	lds	r24, 0x050A
    5972:	1b 82       	std	Y+3, r1	; 0x03
    5974:	88 23       	and	r24, r24
    5976:	11 f4       	brne	.+4      	; 0x597c <prvCheckTasksWaitingTermination+0x26>
    5978:	81 e0       	ldi	r24, 0x01	; 1
    597a:	8b 83       	std	Y+3, r24	; 0x03
			xTaskResumeAll();
    597c:	0e 94 f5 28 	call	0x51ea	; 0x51ea <xTaskResumeAll>

			if( xListIsEmpty == pdFALSE )
    5980:	8b 81       	ldd	r24, Y+3	; 0x03
    5982:	88 23       	and	r24, r24
    5984:	01 f5       	brne	.+64     	; 0x59c6 <prvCheckTasksWaitingTermination+0x70>
			{
				tskTCB *pxTCB;

				taskENTER_CRITICAL();
    5986:	0f b6       	in	r0, 0x3f	; 63
    5988:	f8 94       	cli
    598a:	0f 92       	push	r0
				{
					pxTCB = ( tskTCB * ) listGET_OWNER_OF_HEAD_ENTRY( ( ( xList * ) &xTasksWaitingTermination ) );
    598c:	e0 91 0f 05 	lds	r30, 0x050F
    5990:	f0 91 10 05 	lds	r31, 0x0510
    5994:	86 81       	ldd	r24, Z+6	; 0x06
    5996:	97 81       	ldd	r25, Z+7	; 0x07
    5998:	9a 83       	std	Y+2, r25	; 0x02
    599a:	89 83       	std	Y+1, r24	; 0x01
					vListRemove( &( pxTCB->xGenericListItem ) );
    599c:	89 81       	ldd	r24, Y+1	; 0x01
    599e:	9a 81       	ldd	r25, Y+2	; 0x02
    59a0:	02 96       	adiw	r24, 0x02	; 2
    59a2:	0e 94 f2 1e 	call	0x3de4	; 0x3de4 <vListRemove>
					--uxCurrentNumberOfTasks;
    59a6:	80 91 a1 04 	lds	r24, 0x04A1
    59aa:	81 50       	subi	r24, 0x01	; 1
    59ac:	80 93 a1 04 	sts	0x04A1, r24
					--uxTasksDeleted;
    59b0:	80 91 a0 04 	lds	r24, 0x04A0
    59b4:	81 50       	subi	r24, 0x01	; 1
    59b6:	80 93 a0 04 	sts	0x04A0, r24
				}
				taskEXIT_CRITICAL();
    59ba:	0f 90       	pop	r0
    59bc:	0f be       	out	0x3f, r0	; 63

				prvDeleteTCB( pxTCB );
    59be:	89 81       	ldd	r24, Y+1	; 0x01
    59c0:	9a 81       	ldd	r25, Y+2	; 0x02
    59c2:	0e 94 82 2d 	call	0x5b04	; 0x5b04 <prvDeleteTCB>
			}
		}
	}
	#endif
}
    59c6:	0f 90       	pop	r0
    59c8:	0f 90       	pop	r0
    59ca:	0f 90       	pop	r0
    59cc:	cf 91       	pop	r28
    59ce:	df 91       	pop	r29
    59d0:	08 95       	ret

000059d2 <prvAddCurrentTaskToDelayedList>:
/*-----------------------------------------------------------*/

static void prvAddCurrentTaskToDelayedList( portTickType xTimeToWake )
{
    59d2:	df 93       	push	r29
    59d4:	cf 93       	push	r28
    59d6:	00 d0       	rcall	.+0      	; 0x59d8 <prvAddCurrentTaskToDelayedList+0x6>
    59d8:	cd b7       	in	r28, 0x3d	; 61
    59da:	de b7       	in	r29, 0x3e	; 62
    59dc:	9a 83       	std	Y+2, r25	; 0x02
    59de:	89 83       	std	Y+1, r24	; 0x01
	/* The list item will be inserted in wake time order. */
	listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xGenericListItem ), xTimeToWake );
    59e0:	e0 91 9e 04 	lds	r30, 0x049E
    59e4:	f0 91 9f 04 	lds	r31, 0x049F
    59e8:	89 81       	ldd	r24, Y+1	; 0x01
    59ea:	9a 81       	ldd	r25, Y+2	; 0x02
    59ec:	93 83       	std	Z+3, r25	; 0x03
    59ee:	82 83       	std	Z+2, r24	; 0x02

	if( xTimeToWake < xTickCount )
    59f0:	20 91 a2 04 	lds	r18, 0x04A2
    59f4:	30 91 a3 04 	lds	r19, 0x04A3
    59f8:	89 81       	ldd	r24, Y+1	; 0x01
    59fa:	9a 81       	ldd	r25, Y+2	; 0x02
    59fc:	82 17       	cp	r24, r18
    59fe:	93 07       	cpc	r25, r19
    5a00:	70 f4       	brcc	.+28     	; 0x5a1e <prvAddCurrentTaskToDelayedList+0x4c>
	{
		/* Wake time has overflowed.  Place this item in the overflow list. */
		vListInsert( ( xList * ) pxOverflowDelayedTaskList, ( xListItem * ) &( pxCurrentTCB->xGenericListItem ) );
    5a02:	80 91 ff 04 	lds	r24, 0x04FF
    5a06:	90 91 00 05 	lds	r25, 0x0500
    5a0a:	20 91 9e 04 	lds	r18, 0x049E
    5a0e:	30 91 9f 04 	lds	r19, 0x049F
    5a12:	2e 5f       	subi	r18, 0xFE	; 254
    5a14:	3f 4f       	sbci	r19, 0xFF	; 255
    5a16:	b9 01       	movw	r22, r18
    5a18:	0e 94 86 1e 	call	0x3d0c	; 0x3d0c <vListInsert>
    5a1c:	1e c0       	rjmp	.+60     	; 0x5a5a <prvAddCurrentTaskToDelayedList+0x88>
	}
	else
	{
		/* The wake time has not overflowed, so we can use the current block list. */
		vListInsert( ( xList * ) pxDelayedTaskList, ( xListItem * ) &( pxCurrentTCB->xGenericListItem ) );
    5a1e:	40 91 fd 04 	lds	r20, 0x04FD
    5a22:	50 91 fe 04 	lds	r21, 0x04FE
    5a26:	80 91 9e 04 	lds	r24, 0x049E
    5a2a:	90 91 9f 04 	lds	r25, 0x049F
    5a2e:	9c 01       	movw	r18, r24
    5a30:	2e 5f       	subi	r18, 0xFE	; 254
    5a32:	3f 4f       	sbci	r19, 0xFF	; 255
    5a34:	ca 01       	movw	r24, r20
    5a36:	b9 01       	movw	r22, r18
    5a38:	0e 94 86 1e 	call	0x3d0c	; 0x3d0c <vListInsert>

		/* If the task entering the blocked state was placed at the head of the
		list of blocked tasks then xNextTaskUnblockTime needs to be updated
		too. */
		if( xTimeToWake < xNextTaskUnblockTime )
    5a3c:	20 91 77 00 	lds	r18, 0x0077
    5a40:	30 91 78 00 	lds	r19, 0x0078
    5a44:	89 81       	ldd	r24, Y+1	; 0x01
    5a46:	9a 81       	ldd	r25, Y+2	; 0x02
    5a48:	82 17       	cp	r24, r18
    5a4a:	93 07       	cpc	r25, r19
    5a4c:	30 f4       	brcc	.+12     	; 0x5a5a <prvAddCurrentTaskToDelayedList+0x88>
		{
			xNextTaskUnblockTime = xTimeToWake;
    5a4e:	89 81       	ldd	r24, Y+1	; 0x01
    5a50:	9a 81       	ldd	r25, Y+2	; 0x02
    5a52:	90 93 78 00 	sts	0x0078, r25
    5a56:	80 93 77 00 	sts	0x0077, r24
		}
	}
}
    5a5a:	0f 90       	pop	r0
    5a5c:	0f 90       	pop	r0
    5a5e:	cf 91       	pop	r28
    5a60:	df 91       	pop	r29
    5a62:	08 95       	ret

00005a64 <prvAllocateTCBAndStack>:
/*-----------------------------------------------------------*/

static tskTCB *prvAllocateTCBAndStack( unsigned short usStackDepth, portSTACK_TYPE *puxStackBuffer )
{
    5a64:	df 93       	push	r29
    5a66:	cf 93       	push	r28
    5a68:	cd b7       	in	r28, 0x3d	; 61
    5a6a:	de b7       	in	r29, 0x3e	; 62
    5a6c:	28 97       	sbiw	r28, 0x08	; 8
    5a6e:	0f b6       	in	r0, 0x3f	; 63
    5a70:	f8 94       	cli
    5a72:	de bf       	out	0x3e, r29	; 62
    5a74:	0f be       	out	0x3f, r0	; 63
    5a76:	cd bf       	out	0x3d, r28	; 61
    5a78:	9c 83       	std	Y+4, r25	; 0x04
    5a7a:	8b 83       	std	Y+3, r24	; 0x03
    5a7c:	7e 83       	std	Y+6, r23	; 0x06
    5a7e:	6d 83       	std	Y+5, r22	; 0x05
tskTCB *pxNewTCB;

	/* Allocate space for the TCB.  Where the memory comes from depends on
	the implementation of the port malloc function. */
	pxNewTCB = ( tskTCB * ) pvPortMalloc( sizeof( tskTCB ) );
    5a80:	81 e2       	ldi	r24, 0x21	; 33
    5a82:	90 e0       	ldi	r25, 0x00	; 0
    5a84:	0e 94 94 1d 	call	0x3b28	; 0x3b28 <pvPortMalloc>
    5a88:	9a 83       	std	Y+2, r25	; 0x02
    5a8a:	89 83       	std	Y+1, r24	; 0x01

	if( pxNewTCB != NULL )
    5a8c:	89 81       	ldd	r24, Y+1	; 0x01
    5a8e:	9a 81       	ldd	r25, Y+2	; 0x02
    5a90:	00 97       	sbiw	r24, 0x00	; 0
    5a92:	69 f1       	breq	.+90     	; 0x5aee <prvAllocateTCBAndStack+0x8a>
	{
		/* Allocate space for the stack used by the task being created.
		The base of the stack memory stored in the TCB so the task can
		be deleted later if required. */
		pxNewTCB->pxStack = ( portSTACK_TYPE * ) pvPortMallocAligned( ( ( ( size_t )usStackDepth ) * sizeof( portSTACK_TYPE ) ), puxStackBuffer );
    5a94:	8d 81       	ldd	r24, Y+5	; 0x05
    5a96:	9e 81       	ldd	r25, Y+6	; 0x06
    5a98:	00 97       	sbiw	r24, 0x00	; 0
    5a9a:	39 f4       	brne	.+14     	; 0x5aaa <prvAllocateTCBAndStack+0x46>
    5a9c:	8b 81       	ldd	r24, Y+3	; 0x03
    5a9e:	9c 81       	ldd	r25, Y+4	; 0x04
    5aa0:	0e 94 94 1d 	call	0x3b28	; 0x3b28 <pvPortMalloc>
    5aa4:	98 87       	std	Y+8, r25	; 0x08
    5aa6:	8f 83       	std	Y+7, r24	; 0x07
    5aa8:	04 c0       	rjmp	.+8      	; 0x5ab2 <prvAllocateTCBAndStack+0x4e>
    5aaa:	8d 81       	ldd	r24, Y+5	; 0x05
    5aac:	9e 81       	ldd	r25, Y+6	; 0x06
    5aae:	98 87       	std	Y+8, r25	; 0x08
    5ab0:	8f 83       	std	Y+7, r24	; 0x07
    5ab2:	e9 81       	ldd	r30, Y+1	; 0x01
    5ab4:	fa 81       	ldd	r31, Y+2	; 0x02
    5ab6:	8f 81       	ldd	r24, Y+7	; 0x07
    5ab8:	98 85       	ldd	r25, Y+8	; 0x08
    5aba:	90 8f       	std	Z+24, r25	; 0x18
    5abc:	87 8b       	std	Z+23, r24	; 0x17

		if( pxNewTCB->pxStack == NULL )
    5abe:	e9 81       	ldd	r30, Y+1	; 0x01
    5ac0:	fa 81       	ldd	r31, Y+2	; 0x02
    5ac2:	87 89       	ldd	r24, Z+23	; 0x17
    5ac4:	90 8d       	ldd	r25, Z+24	; 0x18
    5ac6:	00 97       	sbiw	r24, 0x00	; 0
    5ac8:	39 f4       	brne	.+14     	; 0x5ad8 <prvAllocateTCBAndStack+0x74>
		{
			/* Could not allocate the stack.  Delete the allocated TCB. */
			vPortFree( pxNewTCB );
    5aca:	89 81       	ldd	r24, Y+1	; 0x01
    5acc:	9a 81       	ldd	r25, Y+2	; 0x02
    5ace:	0e 94 da 1d 	call	0x3bb4	; 0x3bb4 <vPortFree>
			pxNewTCB = NULL;
    5ad2:	1a 82       	std	Y+2, r1	; 0x02
    5ad4:	19 82       	std	Y+1, r1	; 0x01
    5ad6:	0b c0       	rjmp	.+22     	; 0x5aee <prvAllocateTCBAndStack+0x8a>
		}
		else
		{
			/* Just to help debugging. */
			memset( pxNewTCB->pxStack, ( int ) tskSTACK_FILL_BYTE, ( size_t ) usStackDepth * sizeof( portSTACK_TYPE ) );
    5ad8:	e9 81       	ldd	r30, Y+1	; 0x01
    5ada:	fa 81       	ldd	r31, Y+2	; 0x02
    5adc:	87 89       	ldd	r24, Z+23	; 0x17
    5ade:	90 8d       	ldd	r25, Z+24	; 0x18
    5ae0:	2b 81       	ldd	r18, Y+3	; 0x03
    5ae2:	3c 81       	ldd	r19, Y+4	; 0x04
    5ae4:	65 ea       	ldi	r22, 0xA5	; 165
    5ae6:	70 e0       	ldi	r23, 0x00	; 0
    5ae8:	a9 01       	movw	r20, r18
    5aea:	0e 94 c0 2e 	call	0x5d80	; 0x5d80 <memset>
		}
	}

	return pxNewTCB;
    5aee:	89 81       	ldd	r24, Y+1	; 0x01
    5af0:	9a 81       	ldd	r25, Y+2	; 0x02
}
    5af2:	28 96       	adiw	r28, 0x08	; 8
    5af4:	0f b6       	in	r0, 0x3f	; 63
    5af6:	f8 94       	cli
    5af8:	de bf       	out	0x3e, r29	; 62
    5afa:	0f be       	out	0x3f, r0	; 63
    5afc:	cd bf       	out	0x3d, r28	; 61
    5afe:	cf 91       	pop	r28
    5b00:	df 91       	pop	r29
    5b02:	08 95       	ret

00005b04 <prvDeleteTCB>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelete == 1 )

	static void prvDeleteTCB( tskTCB *pxTCB )
	{
    5b04:	df 93       	push	r29
    5b06:	cf 93       	push	r28
    5b08:	00 d0       	rcall	.+0      	; 0x5b0a <prvDeleteTCB+0x6>
    5b0a:	cd b7       	in	r28, 0x3d	; 61
    5b0c:	de b7       	in	r29, 0x3e	; 62
    5b0e:	9a 83       	std	Y+2, r25	; 0x02
    5b10:	89 83       	std	Y+1, r24	; 0x01
		/* Free up the memory allocated by the scheduler for the task.  It is up to
		the task to free any memory allocated at the application level. */
		vPortFreeAligned( pxTCB->pxStack );
    5b12:	e9 81       	ldd	r30, Y+1	; 0x01
    5b14:	fa 81       	ldd	r31, Y+2	; 0x02
    5b16:	87 89       	ldd	r24, Z+23	; 0x17
    5b18:	90 8d       	ldd	r25, Z+24	; 0x18
    5b1a:	0e 94 da 1d 	call	0x3bb4	; 0x3bb4 <vPortFree>
		vPortFree( pxTCB );
    5b1e:	89 81       	ldd	r24, Y+1	; 0x01
    5b20:	9a 81       	ldd	r25, Y+2	; 0x02
    5b22:	0e 94 da 1d 	call	0x3bb4	; 0x3bb4 <vPortFree>
	}
    5b26:	0f 90       	pop	r0
    5b28:	0f 90       	pop	r0
    5b2a:	cf 91       	pop	r28
    5b2c:	df 91       	pop	r29
    5b2e:	08 95       	ret

00005b30 <func1>:
#include "./New folder/FREE_RTOS/task.h"


#include "avr/delay.h"
#include "Rtos.h"
void func1(void * pv){
    5b30:	df 93       	push	r29
    5b32:	cf 93       	push	r28
    5b34:	00 d0       	rcall	.+0      	; 0x5b36 <func1+0x6>
    5b36:	cd b7       	in	r28, 0x3d	; 61
    5b38:	de b7       	in	r29, 0x3e	; 62
    5b3a:	9a 83       	std	Y+2, r25	; 0x02
    5b3c:	89 83       	std	Y+1, r24	; 0x01
	while(1){
    DIO_FlipPinLevel(DIO_PORTA,DIO_PIN0);
    5b3e:	80 e0       	ldi	r24, 0x00	; 0
    5b40:	60 e0       	ldi	r22, 0x00	; 0
    5b42:	0e 94 f2 07 	call	0xfe4	; 0xfe4 <DIO_FlipPinLevel>
    vTaskDelay(100);
    5b46:	84 e6       	ldi	r24, 0x64	; 100
    5b48:	90 e0       	ldi	r25, 0x00	; 0
    5b4a:	0e 94 71 28 	call	0x50e2	; 0x50e2 <vTaskDelay>
    5b4e:	f7 cf       	rjmp	.-18     	; 0x5b3e <func1+0xe>

00005b50 <func2>:
	}
}
void func2(void *pv){
    5b50:	df 93       	push	r29
    5b52:	cf 93       	push	r28
    5b54:	00 d0       	rcall	.+0      	; 0x5b56 <func2+0x6>
    5b56:	cd b7       	in	r28, 0x3d	; 61
    5b58:	de b7       	in	r29, 0x3e	; 62
    5b5a:	9a 83       	std	Y+2, r25	; 0x02
    5b5c:	89 83       	std	Y+1, r24	; 0x01
	while(1){
    DIO_FlipPinLevel(DIO_PORTA,DIO_PIN1);
    5b5e:	80 e0       	ldi	r24, 0x00	; 0
    5b60:	61 e0       	ldi	r22, 0x01	; 1
    5b62:	0e 94 f2 07 	call	0xfe4	; 0xfe4 <DIO_FlipPinLevel>
    vTaskDelay(200);
    5b66:	88 ec       	ldi	r24, 0xC8	; 200
    5b68:	90 e0       	ldi	r25, 0x00	; 0
    5b6a:	0e 94 71 28 	call	0x50e2	; 0x50e2 <vTaskDelay>
    5b6e:	f7 cf       	rjmp	.-18     	; 0x5b5e <func2+0xe>

00005b70 <func3>:
	}
}
void func3(void * pv){
    5b70:	df 93       	push	r29
    5b72:	cf 93       	push	r28
    5b74:	00 d0       	rcall	.+0      	; 0x5b76 <func3+0x6>
    5b76:	cd b7       	in	r28, 0x3d	; 61
    5b78:	de b7       	in	r29, 0x3e	; 62
    5b7a:	9a 83       	std	Y+2, r25	; 0x02
    5b7c:	89 83       	std	Y+1, r24	; 0x01
    while(1){
	DIO_FlipPinLevel(DIO_PORTA,DIO_PIN2);
    5b7e:	80 e0       	ldi	r24, 0x00	; 0
    5b80:	62 e0       	ldi	r22, 0x02	; 2
    5b82:	0e 94 f2 07 	call	0xfe4	; 0xfe4 <DIO_FlipPinLevel>
	vTaskDelay(300);
    5b86:	8c e2       	ldi	r24, 0x2C	; 44
    5b88:	91 e0       	ldi	r25, 0x01	; 1
    5b8a:	0e 94 71 28 	call	0x50e2	; 0x50e2 <vTaskDelay>
    5b8e:	f7 cf       	rjmp	.-18     	; 0x5b7e <func3+0xe>

00005b90 <main>:
    }
}
int main(){
    5b90:	af 92       	push	r10
    5b92:	bf 92       	push	r11
    5b94:	cf 92       	push	r12
    5b96:	df 92       	push	r13
    5b98:	ef 92       	push	r14
    5b9a:	ff 92       	push	r15
    5b9c:	0f 93       	push	r16
    5b9e:	df 93       	push	r29
    5ba0:	cf 93       	push	r28
    5ba2:	cd b7       	in	r28, 0x3d	; 61
    5ba4:	de b7       	in	r29, 0x3e	; 62

    DIO_SetPinMode(DIO_PORTA,DIO_PIN0,DIO_OUTPUT);
    5ba6:	80 e0       	ldi	r24, 0x00	; 0
    5ba8:	60 e0       	ldi	r22, 0x00	; 0
    5baa:	42 e0       	ldi	r20, 0x02	; 2
    5bac:	0e 94 6f 08 	call	0x10de	; 0x10de <DIO_SetPinMode>
    DIO_SetPinMode(DIO_PORTA,DIO_PIN1,DIO_OUTPUT);
    5bb0:	80 e0       	ldi	r24, 0x00	; 0
    5bb2:	61 e0       	ldi	r22, 0x01	; 1
    5bb4:	42 e0       	ldi	r20, 0x02	; 2
    5bb6:	0e 94 6f 08 	call	0x10de	; 0x10de <DIO_SetPinMode>
    DIO_SetPinMode(DIO_PORTA,DIO_PIN2,DIO_OUTPUT);
    5bba:	80 e0       	ldi	r24, 0x00	; 0
    5bbc:	62 e0       	ldi	r22, 0x02	; 2
    5bbe:	42 e0       	ldi	r20, 0x02	; 2
    5bc0:	0e 94 6f 08 	call	0x10de	; 0x10de <DIO_SetPinMode>
    xTaskCreate(func1,NULL,100,NULL,1,NULL);
    5bc4:	88 e9       	ldi	r24, 0x98	; 152
    5bc6:	9d e2       	ldi	r25, 0x2D	; 45
    5bc8:	60 e0       	ldi	r22, 0x00	; 0
    5bca:	70 e0       	ldi	r23, 0x00	; 0
    5bcc:	44 e6       	ldi	r20, 0x64	; 100
    5bce:	50 e0       	ldi	r21, 0x00	; 0
    5bd0:	20 e0       	ldi	r18, 0x00	; 0
    5bd2:	30 e0       	ldi	r19, 0x00	; 0
    5bd4:	01 e0       	ldi	r16, 0x01	; 1
    5bd6:	ee 24       	eor	r14, r14
    5bd8:	ff 24       	eor	r15, r15
    5bda:	cc 24       	eor	r12, r12
    5bdc:	dd 24       	eor	r13, r13
    5bde:	aa 24       	eor	r10, r10
    5be0:	bb 24       	eor	r11, r11
    5be2:	0e 94 ad 26 	call	0x4d5a	; 0x4d5a <xTaskGenericCreate>
    	xTaskCreate(func2,NULL,200,NULL,2,NULL);
    5be6:	88 ea       	ldi	r24, 0xA8	; 168
    5be8:	9d e2       	ldi	r25, 0x2D	; 45
    5bea:	60 e0       	ldi	r22, 0x00	; 0
    5bec:	70 e0       	ldi	r23, 0x00	; 0
    5bee:	48 ec       	ldi	r20, 0xC8	; 200
    5bf0:	50 e0       	ldi	r21, 0x00	; 0
    5bf2:	20 e0       	ldi	r18, 0x00	; 0
    5bf4:	30 e0       	ldi	r19, 0x00	; 0
    5bf6:	02 e0       	ldi	r16, 0x02	; 2
    5bf8:	ee 24       	eor	r14, r14
    5bfa:	ff 24       	eor	r15, r15
    5bfc:	cc 24       	eor	r12, r12
    5bfe:	dd 24       	eor	r13, r13
    5c00:	aa 24       	eor	r10, r10
    5c02:	bb 24       	eor	r11, r11
    5c04:	0e 94 ad 26 	call	0x4d5a	; 0x4d5a <xTaskGenericCreate>
    	xTaskCreate(func3,NULL,300,NULL,3,NULL);
    5c08:	88 eb       	ldi	r24, 0xB8	; 184
    5c0a:	9d e2       	ldi	r25, 0x2D	; 45
    5c0c:	60 e0       	ldi	r22, 0x00	; 0
    5c0e:	70 e0       	ldi	r23, 0x00	; 0
    5c10:	4c e2       	ldi	r20, 0x2C	; 44
    5c12:	51 e0       	ldi	r21, 0x01	; 1
    5c14:	20 e0       	ldi	r18, 0x00	; 0
    5c16:	30 e0       	ldi	r19, 0x00	; 0
    5c18:	03 e0       	ldi	r16, 0x03	; 3
    5c1a:	ee 24       	eor	r14, r14
    5c1c:	ff 24       	eor	r15, r15
    5c1e:	cc 24       	eor	r12, r12
    5c20:	dd 24       	eor	r13, r13
    5c22:	aa 24       	eor	r10, r10
    5c24:	bb 24       	eor	r11, r11
    5c26:	0e 94 ad 26 	call	0x4d5a	; 0x4d5a <xTaskGenericCreate>

    	vTaskStartScheduler();
    5c2a:	0e 94 a6 28 	call	0x514c	; 0x514c <vTaskStartScheduler>
    5c2e:	ff cf       	rjmp	.-2      	; 0x5c2e <main+0x9e>

00005c30 <__mulsi3>:
    5c30:	62 9f       	mul	r22, r18
    5c32:	d0 01       	movw	r26, r0
    5c34:	73 9f       	mul	r23, r19
    5c36:	f0 01       	movw	r30, r0
    5c38:	82 9f       	mul	r24, r18
    5c3a:	e0 0d       	add	r30, r0
    5c3c:	f1 1d       	adc	r31, r1
    5c3e:	64 9f       	mul	r22, r20
    5c40:	e0 0d       	add	r30, r0
    5c42:	f1 1d       	adc	r31, r1
    5c44:	92 9f       	mul	r25, r18
    5c46:	f0 0d       	add	r31, r0
    5c48:	83 9f       	mul	r24, r19
    5c4a:	f0 0d       	add	r31, r0
    5c4c:	74 9f       	mul	r23, r20
    5c4e:	f0 0d       	add	r31, r0
    5c50:	65 9f       	mul	r22, r21
    5c52:	f0 0d       	add	r31, r0
    5c54:	99 27       	eor	r25, r25
    5c56:	72 9f       	mul	r23, r18
    5c58:	b0 0d       	add	r27, r0
    5c5a:	e1 1d       	adc	r30, r1
    5c5c:	f9 1f       	adc	r31, r25
    5c5e:	63 9f       	mul	r22, r19
    5c60:	b0 0d       	add	r27, r0
    5c62:	e1 1d       	adc	r30, r1
    5c64:	f9 1f       	adc	r31, r25
    5c66:	bd 01       	movw	r22, r26
    5c68:	cf 01       	movw	r24, r30
    5c6a:	11 24       	eor	r1, r1
    5c6c:	08 95       	ret

00005c6e <__udivmodqi4>:
    5c6e:	99 1b       	sub	r25, r25
    5c70:	79 e0       	ldi	r23, 0x09	; 9
    5c72:	04 c0       	rjmp	.+8      	; 0x5c7c <__udivmodqi4_ep>

00005c74 <__udivmodqi4_loop>:
    5c74:	99 1f       	adc	r25, r25
    5c76:	96 17       	cp	r25, r22
    5c78:	08 f0       	brcs	.+2      	; 0x5c7c <__udivmodqi4_ep>
    5c7a:	96 1b       	sub	r25, r22

00005c7c <__udivmodqi4_ep>:
    5c7c:	88 1f       	adc	r24, r24
    5c7e:	7a 95       	dec	r23
    5c80:	c9 f7       	brne	.-14     	; 0x5c74 <__udivmodqi4_loop>
    5c82:	80 95       	com	r24
    5c84:	08 95       	ret

00005c86 <__udivmodsi4>:
    5c86:	a1 e2       	ldi	r26, 0x21	; 33
    5c88:	1a 2e       	mov	r1, r26
    5c8a:	aa 1b       	sub	r26, r26
    5c8c:	bb 1b       	sub	r27, r27
    5c8e:	fd 01       	movw	r30, r26
    5c90:	0d c0       	rjmp	.+26     	; 0x5cac <__udivmodsi4_ep>

00005c92 <__udivmodsi4_loop>:
    5c92:	aa 1f       	adc	r26, r26
    5c94:	bb 1f       	adc	r27, r27
    5c96:	ee 1f       	adc	r30, r30
    5c98:	ff 1f       	adc	r31, r31
    5c9a:	a2 17       	cp	r26, r18
    5c9c:	b3 07       	cpc	r27, r19
    5c9e:	e4 07       	cpc	r30, r20
    5ca0:	f5 07       	cpc	r31, r21
    5ca2:	20 f0       	brcs	.+8      	; 0x5cac <__udivmodsi4_ep>
    5ca4:	a2 1b       	sub	r26, r18
    5ca6:	b3 0b       	sbc	r27, r19
    5ca8:	e4 0b       	sbc	r30, r20
    5caa:	f5 0b       	sbc	r31, r21

00005cac <__udivmodsi4_ep>:
    5cac:	66 1f       	adc	r22, r22
    5cae:	77 1f       	adc	r23, r23
    5cb0:	88 1f       	adc	r24, r24
    5cb2:	99 1f       	adc	r25, r25
    5cb4:	1a 94       	dec	r1
    5cb6:	69 f7       	brne	.-38     	; 0x5c92 <__udivmodsi4_loop>
    5cb8:	60 95       	com	r22
    5cba:	70 95       	com	r23
    5cbc:	80 95       	com	r24
    5cbe:	90 95       	com	r25
    5cc0:	9b 01       	movw	r18, r22
    5cc2:	ac 01       	movw	r20, r24
    5cc4:	bd 01       	movw	r22, r26
    5cc6:	cf 01       	movw	r24, r30
    5cc8:	08 95       	ret

00005cca <__divmodsi4>:
    5cca:	97 fb       	bst	r25, 7
    5ccc:	09 2e       	mov	r0, r25
    5cce:	05 26       	eor	r0, r21
    5cd0:	0e d0       	rcall	.+28     	; 0x5cee <__divmodsi4_neg1>
    5cd2:	57 fd       	sbrc	r21, 7
    5cd4:	04 d0       	rcall	.+8      	; 0x5cde <__divmodsi4_neg2>
    5cd6:	d7 df       	rcall	.-82     	; 0x5c86 <__udivmodsi4>
    5cd8:	0a d0       	rcall	.+20     	; 0x5cee <__divmodsi4_neg1>
    5cda:	00 1c       	adc	r0, r0
    5cdc:	38 f4       	brcc	.+14     	; 0x5cec <__divmodsi4_exit>

00005cde <__divmodsi4_neg2>:
    5cde:	50 95       	com	r21
    5ce0:	40 95       	com	r20
    5ce2:	30 95       	com	r19
    5ce4:	21 95       	neg	r18
    5ce6:	3f 4f       	sbci	r19, 0xFF	; 255
    5ce8:	4f 4f       	sbci	r20, 0xFF	; 255
    5cea:	5f 4f       	sbci	r21, 0xFF	; 255

00005cec <__divmodsi4_exit>:
    5cec:	08 95       	ret

00005cee <__divmodsi4_neg1>:
    5cee:	f6 f7       	brtc	.-4      	; 0x5cec <__divmodsi4_exit>
    5cf0:	90 95       	com	r25
    5cf2:	80 95       	com	r24
    5cf4:	70 95       	com	r23
    5cf6:	61 95       	neg	r22
    5cf8:	7f 4f       	sbci	r23, 0xFF	; 255
    5cfa:	8f 4f       	sbci	r24, 0xFF	; 255
    5cfc:	9f 4f       	sbci	r25, 0xFF	; 255
    5cfe:	08 95       	ret

00005d00 <__prologue_saves__>:
    5d00:	2f 92       	push	r2
    5d02:	3f 92       	push	r3
    5d04:	4f 92       	push	r4
    5d06:	5f 92       	push	r5
    5d08:	6f 92       	push	r6
    5d0a:	7f 92       	push	r7
    5d0c:	8f 92       	push	r8
    5d0e:	9f 92       	push	r9
    5d10:	af 92       	push	r10
    5d12:	bf 92       	push	r11
    5d14:	cf 92       	push	r12
    5d16:	df 92       	push	r13
    5d18:	ef 92       	push	r14
    5d1a:	ff 92       	push	r15
    5d1c:	0f 93       	push	r16
    5d1e:	1f 93       	push	r17
    5d20:	cf 93       	push	r28
    5d22:	df 93       	push	r29
    5d24:	cd b7       	in	r28, 0x3d	; 61
    5d26:	de b7       	in	r29, 0x3e	; 62
    5d28:	ca 1b       	sub	r28, r26
    5d2a:	db 0b       	sbc	r29, r27
    5d2c:	0f b6       	in	r0, 0x3f	; 63
    5d2e:	f8 94       	cli
    5d30:	de bf       	out	0x3e, r29	; 62
    5d32:	0f be       	out	0x3f, r0	; 63
    5d34:	cd bf       	out	0x3d, r28	; 61
    5d36:	09 94       	ijmp

00005d38 <__epilogue_restores__>:
    5d38:	2a 88       	ldd	r2, Y+18	; 0x12
    5d3a:	39 88       	ldd	r3, Y+17	; 0x11
    5d3c:	48 88       	ldd	r4, Y+16	; 0x10
    5d3e:	5f 84       	ldd	r5, Y+15	; 0x0f
    5d40:	6e 84       	ldd	r6, Y+14	; 0x0e
    5d42:	7d 84       	ldd	r7, Y+13	; 0x0d
    5d44:	8c 84       	ldd	r8, Y+12	; 0x0c
    5d46:	9b 84       	ldd	r9, Y+11	; 0x0b
    5d48:	aa 84       	ldd	r10, Y+10	; 0x0a
    5d4a:	b9 84       	ldd	r11, Y+9	; 0x09
    5d4c:	c8 84       	ldd	r12, Y+8	; 0x08
    5d4e:	df 80       	ldd	r13, Y+7	; 0x07
    5d50:	ee 80       	ldd	r14, Y+6	; 0x06
    5d52:	fd 80       	ldd	r15, Y+5	; 0x05
    5d54:	0c 81       	ldd	r16, Y+4	; 0x04
    5d56:	1b 81       	ldd	r17, Y+3	; 0x03
    5d58:	aa 81       	ldd	r26, Y+2	; 0x02
    5d5a:	b9 81       	ldd	r27, Y+1	; 0x01
    5d5c:	ce 0f       	add	r28, r30
    5d5e:	d1 1d       	adc	r29, r1
    5d60:	0f b6       	in	r0, 0x3f	; 63
    5d62:	f8 94       	cli
    5d64:	de bf       	out	0x3e, r29	; 62
    5d66:	0f be       	out	0x3f, r0	; 63
    5d68:	cd bf       	out	0x3d, r28	; 61
    5d6a:	ed 01       	movw	r28, r26
    5d6c:	08 95       	ret

00005d6e <memcpy>:
    5d6e:	fb 01       	movw	r30, r22
    5d70:	dc 01       	movw	r26, r24
    5d72:	02 c0       	rjmp	.+4      	; 0x5d78 <memcpy+0xa>
    5d74:	01 90       	ld	r0, Z+
    5d76:	0d 92       	st	X+, r0
    5d78:	41 50       	subi	r20, 0x01	; 1
    5d7a:	50 40       	sbci	r21, 0x00	; 0
    5d7c:	d8 f7       	brcc	.-10     	; 0x5d74 <memcpy+0x6>
    5d7e:	08 95       	ret

00005d80 <memset>:
    5d80:	dc 01       	movw	r26, r24
    5d82:	01 c0       	rjmp	.+2      	; 0x5d86 <memset+0x6>
    5d84:	6d 93       	st	X+, r22
    5d86:	41 50       	subi	r20, 0x01	; 1
    5d88:	50 40       	sbci	r21, 0x00	; 0
    5d8a:	e0 f7       	brcc	.-8      	; 0x5d84 <memset+0x4>
    5d8c:	08 95       	ret

00005d8e <strncpy>:
    5d8e:	fb 01       	movw	r30, r22
    5d90:	dc 01       	movw	r26, r24
    5d92:	41 50       	subi	r20, 0x01	; 1
    5d94:	50 40       	sbci	r21, 0x00	; 0
    5d96:	48 f0       	brcs	.+18     	; 0x5daa <strncpy+0x1c>
    5d98:	01 90       	ld	r0, Z+
    5d9a:	0d 92       	st	X+, r0
    5d9c:	00 20       	and	r0, r0
    5d9e:	c9 f7       	brne	.-14     	; 0x5d92 <strncpy+0x4>
    5da0:	01 c0       	rjmp	.+2      	; 0x5da4 <strncpy+0x16>
    5da2:	1d 92       	st	X+, r1
    5da4:	41 50       	subi	r20, 0x01	; 1
    5da6:	50 40       	sbci	r21, 0x00	; 0
    5da8:	e0 f7       	brcc	.-8      	; 0x5da2 <strncpy+0x14>
    5daa:	08 95       	ret

00005dac <_exit>:
    5dac:	f8 94       	cli

00005dae <__stop_program>:
    5dae:	ff cf       	rjmp	.-2      	; 0x5dae <__stop_program>
