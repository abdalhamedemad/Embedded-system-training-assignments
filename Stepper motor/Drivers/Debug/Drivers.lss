
Drivers.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         000051fc  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .data         00000112  00800060  000051fc  00005290  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  2 .bss          00000016  00800172  00800172  000053a2  2**0
                  ALLOC
  3 .stab         00004ce0  00000000  00000000  000053a4  2**2
                  CONTENTS, READONLY, DEBUGGING
  4 .stabstr      00002371  00000000  00000000  0000a084  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_aranges 000001a0  00000000  00000000  0000c3f5  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_pubnames 000001f2  00000000  00000000  0000c595  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_info   0000240b  00000000  00000000  0000c787  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_abbrev 00001386  00000000  00000000  0000eb92  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_line   000011d6  00000000  00000000  0000ff18  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_frame  000001c0  00000000  00000000  000110f0  2**2
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_str    000002f6  00000000  00000000  000112b0  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_loc    0000096e  00000000  00000000  000115a6  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_ranges 00000050  00000000  00000000  00011f14  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
       0:	0c 94 2a 00 	jmp	0x54	; 0x54 <__ctors_end>
       4:	0c 94 98 0f 	jmp	0x1f30	; 0x1f30 <__vector_1>
       8:	0c 94 c5 0f 	jmp	0x1f8a	; 0x1f8a <__vector_2>
       c:	0c 94 f2 0f 	jmp	0x1fe4	; 0x1fe4 <__vector_3>
      10:	0c 94 93 11 	jmp	0x2326	; 0x2326 <__vector_4>
      14:	0c 94 c0 11 	jmp	0x2380	; 0x2380 <__vector_5>
      18:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      1c:	0c 94 0c 11 	jmp	0x2218	; 0x2218 <__vector_7>
      20:	0c 94 66 11 	jmp	0x22cc	; 0x22cc <__vector_8>
      24:	0c 94 39 11 	jmp	0x2272	; 0x2272 <__vector_9>
      28:	0c 94 b2 10 	jmp	0x2164	; 0x2164 <__vector_10>
      2c:	0c 94 df 10 	jmp	0x21be	; 0x21be <__vector_11>
      30:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      34:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      38:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      3c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      40:	0c 94 17 07 	jmp	0xe2e	; 0xe2e <__vector_16>
      44:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      48:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      4c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      50:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>

00000054 <__ctors_end>:
      54:	11 24       	eor	r1, r1
      56:	1f be       	out	0x3f, r1	; 63
      58:	cf e5       	ldi	r28, 0x5F	; 95
      5a:	d8 e0       	ldi	r29, 0x08	; 8
      5c:	de bf       	out	0x3e, r29	; 62
      5e:	cd bf       	out	0x3d, r28	; 61

00000060 <__do_copy_data>:
      60:	11 e0       	ldi	r17, 0x01	; 1
      62:	a0 e6       	ldi	r26, 0x60	; 96
      64:	b0 e0       	ldi	r27, 0x00	; 0
      66:	ec ef       	ldi	r30, 0xFC	; 252
      68:	f1 e5       	ldi	r31, 0x51	; 81
      6a:	02 c0       	rjmp	.+4      	; 0x70 <.do_copy_data_start>

0000006c <.do_copy_data_loop>:
      6c:	05 90       	lpm	r0, Z+
      6e:	0d 92       	st	X+, r0

00000070 <.do_copy_data_start>:
      70:	a2 37       	cpi	r26, 0x72	; 114
      72:	b1 07       	cpc	r27, r17
      74:	d9 f7       	brne	.-10     	; 0x6c <.do_copy_data_loop>

00000076 <__do_clear_bss>:
      76:	11 e0       	ldi	r17, 0x01	; 1
      78:	a2 e7       	ldi	r26, 0x72	; 114
      7a:	b1 e0       	ldi	r27, 0x01	; 1
      7c:	01 c0       	rjmp	.+2      	; 0x80 <.do_clear_bss_start>

0000007e <.do_clear_bss_loop>:
      7e:	1d 92       	st	X+, r1

00000080 <.do_clear_bss_start>:
      80:	a8 38       	cpi	r26, 0x88	; 136
      82:	b1 07       	cpc	r27, r17
      84:	e1 f7       	brne	.-8      	; 0x7e <.do_clear_bss_loop>
      86:	0e 94 3c 25 	call	0x4a78	; 0x4a78 <main>
      8a:	0c 94 fc 28 	jmp	0x51f8	; 0x51f8 <_exit>

0000008e <__bad_interrupt>:
      8e:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

00000092 <__fixunssfsi>:
      92:	ef 92       	push	r14
      94:	ff 92       	push	r15
      96:	0f 93       	push	r16
      98:	1f 93       	push	r17
      9a:	7b 01       	movw	r14, r22
      9c:	8c 01       	movw	r16, r24
      9e:	20 e0       	ldi	r18, 0x00	; 0
      a0:	30 e0       	ldi	r19, 0x00	; 0
      a2:	40 e0       	ldi	r20, 0x00	; 0
      a4:	5f e4       	ldi	r21, 0x4F	; 79
      a6:	0e 94 f5 03 	call	0x7ea	; 0x7ea <__gesf2>
      aa:	88 23       	and	r24, r24
      ac:	8c f0       	brlt	.+34     	; 0xd0 <__fixunssfsi+0x3e>
      ae:	c8 01       	movw	r24, r16
      b0:	b7 01       	movw	r22, r14
      b2:	20 e0       	ldi	r18, 0x00	; 0
      b4:	30 e0       	ldi	r19, 0x00	; 0
      b6:	40 e0       	ldi	r20, 0x00	; 0
      b8:	5f e4       	ldi	r21, 0x4F	; 79
      ba:	0e 94 c1 01 	call	0x382	; 0x382 <__subsf3>
      be:	0e 94 55 04 	call	0x8aa	; 0x8aa <__fixsfsi>
      c2:	9b 01       	movw	r18, r22
      c4:	ac 01       	movw	r20, r24
      c6:	20 50       	subi	r18, 0x00	; 0
      c8:	30 40       	sbci	r19, 0x00	; 0
      ca:	40 40       	sbci	r20, 0x00	; 0
      cc:	50 48       	sbci	r21, 0x80	; 128
      ce:	06 c0       	rjmp	.+12     	; 0xdc <__fixunssfsi+0x4a>
      d0:	c8 01       	movw	r24, r16
      d2:	b7 01       	movw	r22, r14
      d4:	0e 94 55 04 	call	0x8aa	; 0x8aa <__fixsfsi>
      d8:	9b 01       	movw	r18, r22
      da:	ac 01       	movw	r20, r24
      dc:	b9 01       	movw	r22, r18
      de:	ca 01       	movw	r24, r20
      e0:	1f 91       	pop	r17
      e2:	0f 91       	pop	r16
      e4:	ff 90       	pop	r15
      e6:	ef 90       	pop	r14
      e8:	08 95       	ret

000000ea <_fpadd_parts>:
      ea:	a0 e0       	ldi	r26, 0x00	; 0
      ec:	b0 e0       	ldi	r27, 0x00	; 0
      ee:	eb e7       	ldi	r30, 0x7B	; 123
      f0:	f0 e0       	ldi	r31, 0x00	; 0
      f2:	0c 94 c5 28 	jmp	0x518a	; 0x518a <__prologue_saves__>
      f6:	dc 01       	movw	r26, r24
      f8:	2b 01       	movw	r4, r22
      fa:	fa 01       	movw	r30, r20
      fc:	9c 91       	ld	r25, X
      fe:	92 30       	cpi	r25, 0x02	; 2
     100:	08 f4       	brcc	.+2      	; 0x104 <_fpadd_parts+0x1a>
     102:	39 c1       	rjmp	.+626    	; 0x376 <_fpadd_parts+0x28c>
     104:	eb 01       	movw	r28, r22
     106:	88 81       	ld	r24, Y
     108:	82 30       	cpi	r24, 0x02	; 2
     10a:	08 f4       	brcc	.+2      	; 0x10e <_fpadd_parts+0x24>
     10c:	33 c1       	rjmp	.+614    	; 0x374 <_fpadd_parts+0x28a>
     10e:	94 30       	cpi	r25, 0x04	; 4
     110:	69 f4       	brne	.+26     	; 0x12c <_fpadd_parts+0x42>
     112:	84 30       	cpi	r24, 0x04	; 4
     114:	09 f0       	breq	.+2      	; 0x118 <_fpadd_parts+0x2e>
     116:	2f c1       	rjmp	.+606    	; 0x376 <_fpadd_parts+0x28c>
     118:	11 96       	adiw	r26, 0x01	; 1
     11a:	9c 91       	ld	r25, X
     11c:	11 97       	sbiw	r26, 0x01	; 1
     11e:	89 81       	ldd	r24, Y+1	; 0x01
     120:	98 17       	cp	r25, r24
     122:	09 f4       	brne	.+2      	; 0x126 <_fpadd_parts+0x3c>
     124:	28 c1       	rjmp	.+592    	; 0x376 <_fpadd_parts+0x28c>
     126:	aa e6       	ldi	r26, 0x6A	; 106
     128:	b0 e0       	ldi	r27, 0x00	; 0
     12a:	25 c1       	rjmp	.+586    	; 0x376 <_fpadd_parts+0x28c>
     12c:	84 30       	cpi	r24, 0x04	; 4
     12e:	09 f4       	brne	.+2      	; 0x132 <_fpadd_parts+0x48>
     130:	21 c1       	rjmp	.+578    	; 0x374 <_fpadd_parts+0x28a>
     132:	82 30       	cpi	r24, 0x02	; 2
     134:	a9 f4       	brne	.+42     	; 0x160 <_fpadd_parts+0x76>
     136:	92 30       	cpi	r25, 0x02	; 2
     138:	09 f0       	breq	.+2      	; 0x13c <_fpadd_parts+0x52>
     13a:	1d c1       	rjmp	.+570    	; 0x376 <_fpadd_parts+0x28c>
     13c:	9a 01       	movw	r18, r20
     13e:	ad 01       	movw	r20, r26
     140:	88 e0       	ldi	r24, 0x08	; 8
     142:	ea 01       	movw	r28, r20
     144:	09 90       	ld	r0, Y+
     146:	ae 01       	movw	r20, r28
     148:	e9 01       	movw	r28, r18
     14a:	09 92       	st	Y+, r0
     14c:	9e 01       	movw	r18, r28
     14e:	81 50       	subi	r24, 0x01	; 1
     150:	c1 f7       	brne	.-16     	; 0x142 <_fpadd_parts+0x58>
     152:	e2 01       	movw	r28, r4
     154:	89 81       	ldd	r24, Y+1	; 0x01
     156:	11 96       	adiw	r26, 0x01	; 1
     158:	9c 91       	ld	r25, X
     15a:	89 23       	and	r24, r25
     15c:	81 83       	std	Z+1, r24	; 0x01
     15e:	08 c1       	rjmp	.+528    	; 0x370 <_fpadd_parts+0x286>
     160:	92 30       	cpi	r25, 0x02	; 2
     162:	09 f4       	brne	.+2      	; 0x166 <_fpadd_parts+0x7c>
     164:	07 c1       	rjmp	.+526    	; 0x374 <_fpadd_parts+0x28a>
     166:	12 96       	adiw	r26, 0x02	; 2
     168:	2d 90       	ld	r2, X+
     16a:	3c 90       	ld	r3, X
     16c:	13 97       	sbiw	r26, 0x03	; 3
     16e:	eb 01       	movw	r28, r22
     170:	8a 81       	ldd	r24, Y+2	; 0x02
     172:	9b 81       	ldd	r25, Y+3	; 0x03
     174:	14 96       	adiw	r26, 0x04	; 4
     176:	ad 90       	ld	r10, X+
     178:	bd 90       	ld	r11, X+
     17a:	cd 90       	ld	r12, X+
     17c:	dc 90       	ld	r13, X
     17e:	17 97       	sbiw	r26, 0x07	; 7
     180:	ec 80       	ldd	r14, Y+4	; 0x04
     182:	fd 80       	ldd	r15, Y+5	; 0x05
     184:	0e 81       	ldd	r16, Y+6	; 0x06
     186:	1f 81       	ldd	r17, Y+7	; 0x07
     188:	91 01       	movw	r18, r2
     18a:	28 1b       	sub	r18, r24
     18c:	39 0b       	sbc	r19, r25
     18e:	b9 01       	movw	r22, r18
     190:	37 ff       	sbrs	r19, 7
     192:	04 c0       	rjmp	.+8      	; 0x19c <_fpadd_parts+0xb2>
     194:	66 27       	eor	r22, r22
     196:	77 27       	eor	r23, r23
     198:	62 1b       	sub	r22, r18
     19a:	73 0b       	sbc	r23, r19
     19c:	60 32       	cpi	r22, 0x20	; 32
     19e:	71 05       	cpc	r23, r1
     1a0:	0c f0       	brlt	.+2      	; 0x1a4 <_fpadd_parts+0xba>
     1a2:	61 c0       	rjmp	.+194    	; 0x266 <_fpadd_parts+0x17c>
     1a4:	12 16       	cp	r1, r18
     1a6:	13 06       	cpc	r1, r19
     1a8:	6c f5       	brge	.+90     	; 0x204 <_fpadd_parts+0x11a>
     1aa:	37 01       	movw	r6, r14
     1ac:	48 01       	movw	r8, r16
     1ae:	06 2e       	mov	r0, r22
     1b0:	04 c0       	rjmp	.+8      	; 0x1ba <_fpadd_parts+0xd0>
     1b2:	96 94       	lsr	r9
     1b4:	87 94       	ror	r8
     1b6:	77 94       	ror	r7
     1b8:	67 94       	ror	r6
     1ba:	0a 94       	dec	r0
     1bc:	d2 f7       	brpl	.-12     	; 0x1b2 <_fpadd_parts+0xc8>
     1be:	21 e0       	ldi	r18, 0x01	; 1
     1c0:	30 e0       	ldi	r19, 0x00	; 0
     1c2:	40 e0       	ldi	r20, 0x00	; 0
     1c4:	50 e0       	ldi	r21, 0x00	; 0
     1c6:	04 c0       	rjmp	.+8      	; 0x1d0 <_fpadd_parts+0xe6>
     1c8:	22 0f       	add	r18, r18
     1ca:	33 1f       	adc	r19, r19
     1cc:	44 1f       	adc	r20, r20
     1ce:	55 1f       	adc	r21, r21
     1d0:	6a 95       	dec	r22
     1d2:	d2 f7       	brpl	.-12     	; 0x1c8 <_fpadd_parts+0xde>
     1d4:	21 50       	subi	r18, 0x01	; 1
     1d6:	30 40       	sbci	r19, 0x00	; 0
     1d8:	40 40       	sbci	r20, 0x00	; 0
     1da:	50 40       	sbci	r21, 0x00	; 0
     1dc:	2e 21       	and	r18, r14
     1de:	3f 21       	and	r19, r15
     1e0:	40 23       	and	r20, r16
     1e2:	51 23       	and	r21, r17
     1e4:	21 15       	cp	r18, r1
     1e6:	31 05       	cpc	r19, r1
     1e8:	41 05       	cpc	r20, r1
     1ea:	51 05       	cpc	r21, r1
     1ec:	21 f0       	breq	.+8      	; 0x1f6 <_fpadd_parts+0x10c>
     1ee:	21 e0       	ldi	r18, 0x01	; 1
     1f0:	30 e0       	ldi	r19, 0x00	; 0
     1f2:	40 e0       	ldi	r20, 0x00	; 0
     1f4:	50 e0       	ldi	r21, 0x00	; 0
     1f6:	79 01       	movw	r14, r18
     1f8:	8a 01       	movw	r16, r20
     1fa:	e6 28       	or	r14, r6
     1fc:	f7 28       	or	r15, r7
     1fe:	08 29       	or	r16, r8
     200:	19 29       	or	r17, r9
     202:	3c c0       	rjmp	.+120    	; 0x27c <_fpadd_parts+0x192>
     204:	23 2b       	or	r18, r19
     206:	d1 f1       	breq	.+116    	; 0x27c <_fpadd_parts+0x192>
     208:	26 0e       	add	r2, r22
     20a:	37 1e       	adc	r3, r23
     20c:	35 01       	movw	r6, r10
     20e:	46 01       	movw	r8, r12
     210:	06 2e       	mov	r0, r22
     212:	04 c0       	rjmp	.+8      	; 0x21c <_fpadd_parts+0x132>
     214:	96 94       	lsr	r9
     216:	87 94       	ror	r8
     218:	77 94       	ror	r7
     21a:	67 94       	ror	r6
     21c:	0a 94       	dec	r0
     21e:	d2 f7       	brpl	.-12     	; 0x214 <_fpadd_parts+0x12a>
     220:	21 e0       	ldi	r18, 0x01	; 1
     222:	30 e0       	ldi	r19, 0x00	; 0
     224:	40 e0       	ldi	r20, 0x00	; 0
     226:	50 e0       	ldi	r21, 0x00	; 0
     228:	04 c0       	rjmp	.+8      	; 0x232 <_fpadd_parts+0x148>
     22a:	22 0f       	add	r18, r18
     22c:	33 1f       	adc	r19, r19
     22e:	44 1f       	adc	r20, r20
     230:	55 1f       	adc	r21, r21
     232:	6a 95       	dec	r22
     234:	d2 f7       	brpl	.-12     	; 0x22a <_fpadd_parts+0x140>
     236:	21 50       	subi	r18, 0x01	; 1
     238:	30 40       	sbci	r19, 0x00	; 0
     23a:	40 40       	sbci	r20, 0x00	; 0
     23c:	50 40       	sbci	r21, 0x00	; 0
     23e:	2a 21       	and	r18, r10
     240:	3b 21       	and	r19, r11
     242:	4c 21       	and	r20, r12
     244:	5d 21       	and	r21, r13
     246:	21 15       	cp	r18, r1
     248:	31 05       	cpc	r19, r1
     24a:	41 05       	cpc	r20, r1
     24c:	51 05       	cpc	r21, r1
     24e:	21 f0       	breq	.+8      	; 0x258 <_fpadd_parts+0x16e>
     250:	21 e0       	ldi	r18, 0x01	; 1
     252:	30 e0       	ldi	r19, 0x00	; 0
     254:	40 e0       	ldi	r20, 0x00	; 0
     256:	50 e0       	ldi	r21, 0x00	; 0
     258:	59 01       	movw	r10, r18
     25a:	6a 01       	movw	r12, r20
     25c:	a6 28       	or	r10, r6
     25e:	b7 28       	or	r11, r7
     260:	c8 28       	or	r12, r8
     262:	d9 28       	or	r13, r9
     264:	0b c0       	rjmp	.+22     	; 0x27c <_fpadd_parts+0x192>
     266:	82 15       	cp	r24, r2
     268:	93 05       	cpc	r25, r3
     26a:	2c f0       	brlt	.+10     	; 0x276 <_fpadd_parts+0x18c>
     26c:	1c 01       	movw	r2, r24
     26e:	aa 24       	eor	r10, r10
     270:	bb 24       	eor	r11, r11
     272:	65 01       	movw	r12, r10
     274:	03 c0       	rjmp	.+6      	; 0x27c <_fpadd_parts+0x192>
     276:	ee 24       	eor	r14, r14
     278:	ff 24       	eor	r15, r15
     27a:	87 01       	movw	r16, r14
     27c:	11 96       	adiw	r26, 0x01	; 1
     27e:	9c 91       	ld	r25, X
     280:	d2 01       	movw	r26, r4
     282:	11 96       	adiw	r26, 0x01	; 1
     284:	8c 91       	ld	r24, X
     286:	98 17       	cp	r25, r24
     288:	09 f4       	brne	.+2      	; 0x28c <_fpadd_parts+0x1a2>
     28a:	45 c0       	rjmp	.+138    	; 0x316 <_fpadd_parts+0x22c>
     28c:	99 23       	and	r25, r25
     28e:	39 f0       	breq	.+14     	; 0x29e <_fpadd_parts+0x1b4>
     290:	a8 01       	movw	r20, r16
     292:	97 01       	movw	r18, r14
     294:	2a 19       	sub	r18, r10
     296:	3b 09       	sbc	r19, r11
     298:	4c 09       	sbc	r20, r12
     29a:	5d 09       	sbc	r21, r13
     29c:	06 c0       	rjmp	.+12     	; 0x2aa <_fpadd_parts+0x1c0>
     29e:	a6 01       	movw	r20, r12
     2a0:	95 01       	movw	r18, r10
     2a2:	2e 19       	sub	r18, r14
     2a4:	3f 09       	sbc	r19, r15
     2a6:	40 0b       	sbc	r20, r16
     2a8:	51 0b       	sbc	r21, r17
     2aa:	57 fd       	sbrc	r21, 7
     2ac:	08 c0       	rjmp	.+16     	; 0x2be <_fpadd_parts+0x1d4>
     2ae:	11 82       	std	Z+1, r1	; 0x01
     2b0:	33 82       	std	Z+3, r3	; 0x03
     2b2:	22 82       	std	Z+2, r2	; 0x02
     2b4:	24 83       	std	Z+4, r18	; 0x04
     2b6:	35 83       	std	Z+5, r19	; 0x05
     2b8:	46 83       	std	Z+6, r20	; 0x06
     2ba:	57 83       	std	Z+7, r21	; 0x07
     2bc:	1d c0       	rjmp	.+58     	; 0x2f8 <_fpadd_parts+0x20e>
     2be:	81 e0       	ldi	r24, 0x01	; 1
     2c0:	81 83       	std	Z+1, r24	; 0x01
     2c2:	33 82       	std	Z+3, r3	; 0x03
     2c4:	22 82       	std	Z+2, r2	; 0x02
     2c6:	88 27       	eor	r24, r24
     2c8:	99 27       	eor	r25, r25
     2ca:	dc 01       	movw	r26, r24
     2cc:	82 1b       	sub	r24, r18
     2ce:	93 0b       	sbc	r25, r19
     2d0:	a4 0b       	sbc	r26, r20
     2d2:	b5 0b       	sbc	r27, r21
     2d4:	84 83       	std	Z+4, r24	; 0x04
     2d6:	95 83       	std	Z+5, r25	; 0x05
     2d8:	a6 83       	std	Z+6, r26	; 0x06
     2da:	b7 83       	std	Z+7, r27	; 0x07
     2dc:	0d c0       	rjmp	.+26     	; 0x2f8 <_fpadd_parts+0x20e>
     2de:	22 0f       	add	r18, r18
     2e0:	33 1f       	adc	r19, r19
     2e2:	44 1f       	adc	r20, r20
     2e4:	55 1f       	adc	r21, r21
     2e6:	24 83       	std	Z+4, r18	; 0x04
     2e8:	35 83       	std	Z+5, r19	; 0x05
     2ea:	46 83       	std	Z+6, r20	; 0x06
     2ec:	57 83       	std	Z+7, r21	; 0x07
     2ee:	82 81       	ldd	r24, Z+2	; 0x02
     2f0:	93 81       	ldd	r25, Z+3	; 0x03
     2f2:	01 97       	sbiw	r24, 0x01	; 1
     2f4:	93 83       	std	Z+3, r25	; 0x03
     2f6:	82 83       	std	Z+2, r24	; 0x02
     2f8:	24 81       	ldd	r18, Z+4	; 0x04
     2fa:	35 81       	ldd	r19, Z+5	; 0x05
     2fc:	46 81       	ldd	r20, Z+6	; 0x06
     2fe:	57 81       	ldd	r21, Z+7	; 0x07
     300:	da 01       	movw	r26, r20
     302:	c9 01       	movw	r24, r18
     304:	01 97       	sbiw	r24, 0x01	; 1
     306:	a1 09       	sbc	r26, r1
     308:	b1 09       	sbc	r27, r1
     30a:	8f 5f       	subi	r24, 0xFF	; 255
     30c:	9f 4f       	sbci	r25, 0xFF	; 255
     30e:	af 4f       	sbci	r26, 0xFF	; 255
     310:	bf 43       	sbci	r27, 0x3F	; 63
     312:	28 f3       	brcs	.-54     	; 0x2de <_fpadd_parts+0x1f4>
     314:	0b c0       	rjmp	.+22     	; 0x32c <_fpadd_parts+0x242>
     316:	91 83       	std	Z+1, r25	; 0x01
     318:	33 82       	std	Z+3, r3	; 0x03
     31a:	22 82       	std	Z+2, r2	; 0x02
     31c:	ea 0c       	add	r14, r10
     31e:	fb 1c       	adc	r15, r11
     320:	0c 1d       	adc	r16, r12
     322:	1d 1d       	adc	r17, r13
     324:	e4 82       	std	Z+4, r14	; 0x04
     326:	f5 82       	std	Z+5, r15	; 0x05
     328:	06 83       	std	Z+6, r16	; 0x06
     32a:	17 83       	std	Z+7, r17	; 0x07
     32c:	83 e0       	ldi	r24, 0x03	; 3
     32e:	80 83       	st	Z, r24
     330:	24 81       	ldd	r18, Z+4	; 0x04
     332:	35 81       	ldd	r19, Z+5	; 0x05
     334:	46 81       	ldd	r20, Z+6	; 0x06
     336:	57 81       	ldd	r21, Z+7	; 0x07
     338:	57 ff       	sbrs	r21, 7
     33a:	1a c0       	rjmp	.+52     	; 0x370 <_fpadd_parts+0x286>
     33c:	c9 01       	movw	r24, r18
     33e:	aa 27       	eor	r26, r26
     340:	97 fd       	sbrc	r25, 7
     342:	a0 95       	com	r26
     344:	ba 2f       	mov	r27, r26
     346:	81 70       	andi	r24, 0x01	; 1
     348:	90 70       	andi	r25, 0x00	; 0
     34a:	a0 70       	andi	r26, 0x00	; 0
     34c:	b0 70       	andi	r27, 0x00	; 0
     34e:	56 95       	lsr	r21
     350:	47 95       	ror	r20
     352:	37 95       	ror	r19
     354:	27 95       	ror	r18
     356:	82 2b       	or	r24, r18
     358:	93 2b       	or	r25, r19
     35a:	a4 2b       	or	r26, r20
     35c:	b5 2b       	or	r27, r21
     35e:	84 83       	std	Z+4, r24	; 0x04
     360:	95 83       	std	Z+5, r25	; 0x05
     362:	a6 83       	std	Z+6, r26	; 0x06
     364:	b7 83       	std	Z+7, r27	; 0x07
     366:	82 81       	ldd	r24, Z+2	; 0x02
     368:	93 81       	ldd	r25, Z+3	; 0x03
     36a:	01 96       	adiw	r24, 0x01	; 1
     36c:	93 83       	std	Z+3, r25	; 0x03
     36e:	82 83       	std	Z+2, r24	; 0x02
     370:	df 01       	movw	r26, r30
     372:	01 c0       	rjmp	.+2      	; 0x376 <_fpadd_parts+0x28c>
     374:	d2 01       	movw	r26, r4
     376:	cd 01       	movw	r24, r26
     378:	cd b7       	in	r28, 0x3d	; 61
     37a:	de b7       	in	r29, 0x3e	; 62
     37c:	e2 e1       	ldi	r30, 0x12	; 18
     37e:	0c 94 e1 28 	jmp	0x51c2	; 0x51c2 <__epilogue_restores__>

00000382 <__subsf3>:
     382:	a0 e2       	ldi	r26, 0x20	; 32
     384:	b0 e0       	ldi	r27, 0x00	; 0
     386:	e7 ec       	ldi	r30, 0xC7	; 199
     388:	f1 e0       	ldi	r31, 0x01	; 1
     38a:	0c 94 d1 28 	jmp	0x51a2	; 0x51a2 <__prologue_saves__+0x18>
     38e:	69 83       	std	Y+1, r22	; 0x01
     390:	7a 83       	std	Y+2, r23	; 0x02
     392:	8b 83       	std	Y+3, r24	; 0x03
     394:	9c 83       	std	Y+4, r25	; 0x04
     396:	2d 83       	std	Y+5, r18	; 0x05
     398:	3e 83       	std	Y+6, r19	; 0x06
     39a:	4f 83       	std	Y+7, r20	; 0x07
     39c:	58 87       	std	Y+8, r21	; 0x08
     39e:	e9 e0       	ldi	r30, 0x09	; 9
     3a0:	ee 2e       	mov	r14, r30
     3a2:	f1 2c       	mov	r15, r1
     3a4:	ec 0e       	add	r14, r28
     3a6:	fd 1e       	adc	r15, r29
     3a8:	ce 01       	movw	r24, r28
     3aa:	01 96       	adiw	r24, 0x01	; 1
     3ac:	b7 01       	movw	r22, r14
     3ae:	0e 94 46 06 	call	0xc8c	; 0xc8c <__unpack_f>
     3b2:	8e 01       	movw	r16, r28
     3b4:	0f 5e       	subi	r16, 0xEF	; 239
     3b6:	1f 4f       	sbci	r17, 0xFF	; 255
     3b8:	ce 01       	movw	r24, r28
     3ba:	05 96       	adiw	r24, 0x05	; 5
     3bc:	b8 01       	movw	r22, r16
     3be:	0e 94 46 06 	call	0xc8c	; 0xc8c <__unpack_f>
     3c2:	8a 89       	ldd	r24, Y+18	; 0x12
     3c4:	91 e0       	ldi	r25, 0x01	; 1
     3c6:	89 27       	eor	r24, r25
     3c8:	8a 8b       	std	Y+18, r24	; 0x12
     3ca:	c7 01       	movw	r24, r14
     3cc:	b8 01       	movw	r22, r16
     3ce:	ae 01       	movw	r20, r28
     3d0:	47 5e       	subi	r20, 0xE7	; 231
     3d2:	5f 4f       	sbci	r21, 0xFF	; 255
     3d4:	0e 94 75 00 	call	0xea	; 0xea <_fpadd_parts>
     3d8:	0e 94 71 05 	call	0xae2	; 0xae2 <__pack_f>
     3dc:	a0 96       	adiw	r28, 0x20	; 32
     3de:	e6 e0       	ldi	r30, 0x06	; 6
     3e0:	0c 94 ed 28 	jmp	0x51da	; 0x51da <__epilogue_restores__+0x18>

000003e4 <__addsf3>:
     3e4:	a0 e2       	ldi	r26, 0x20	; 32
     3e6:	b0 e0       	ldi	r27, 0x00	; 0
     3e8:	e8 ef       	ldi	r30, 0xF8	; 248
     3ea:	f1 e0       	ldi	r31, 0x01	; 1
     3ec:	0c 94 d1 28 	jmp	0x51a2	; 0x51a2 <__prologue_saves__+0x18>
     3f0:	69 83       	std	Y+1, r22	; 0x01
     3f2:	7a 83       	std	Y+2, r23	; 0x02
     3f4:	8b 83       	std	Y+3, r24	; 0x03
     3f6:	9c 83       	std	Y+4, r25	; 0x04
     3f8:	2d 83       	std	Y+5, r18	; 0x05
     3fa:	3e 83       	std	Y+6, r19	; 0x06
     3fc:	4f 83       	std	Y+7, r20	; 0x07
     3fe:	58 87       	std	Y+8, r21	; 0x08
     400:	f9 e0       	ldi	r31, 0x09	; 9
     402:	ef 2e       	mov	r14, r31
     404:	f1 2c       	mov	r15, r1
     406:	ec 0e       	add	r14, r28
     408:	fd 1e       	adc	r15, r29
     40a:	ce 01       	movw	r24, r28
     40c:	01 96       	adiw	r24, 0x01	; 1
     40e:	b7 01       	movw	r22, r14
     410:	0e 94 46 06 	call	0xc8c	; 0xc8c <__unpack_f>
     414:	8e 01       	movw	r16, r28
     416:	0f 5e       	subi	r16, 0xEF	; 239
     418:	1f 4f       	sbci	r17, 0xFF	; 255
     41a:	ce 01       	movw	r24, r28
     41c:	05 96       	adiw	r24, 0x05	; 5
     41e:	b8 01       	movw	r22, r16
     420:	0e 94 46 06 	call	0xc8c	; 0xc8c <__unpack_f>
     424:	c7 01       	movw	r24, r14
     426:	b8 01       	movw	r22, r16
     428:	ae 01       	movw	r20, r28
     42a:	47 5e       	subi	r20, 0xE7	; 231
     42c:	5f 4f       	sbci	r21, 0xFF	; 255
     42e:	0e 94 75 00 	call	0xea	; 0xea <_fpadd_parts>
     432:	0e 94 71 05 	call	0xae2	; 0xae2 <__pack_f>
     436:	a0 96       	adiw	r28, 0x20	; 32
     438:	e6 e0       	ldi	r30, 0x06	; 6
     43a:	0c 94 ed 28 	jmp	0x51da	; 0x51da <__epilogue_restores__+0x18>

0000043e <__mulsf3>:
     43e:	a0 e2       	ldi	r26, 0x20	; 32
     440:	b0 e0       	ldi	r27, 0x00	; 0
     442:	e5 e2       	ldi	r30, 0x25	; 37
     444:	f2 e0       	ldi	r31, 0x02	; 2
     446:	0c 94 c5 28 	jmp	0x518a	; 0x518a <__prologue_saves__>
     44a:	69 83       	std	Y+1, r22	; 0x01
     44c:	7a 83       	std	Y+2, r23	; 0x02
     44e:	8b 83       	std	Y+3, r24	; 0x03
     450:	9c 83       	std	Y+4, r25	; 0x04
     452:	2d 83       	std	Y+5, r18	; 0x05
     454:	3e 83       	std	Y+6, r19	; 0x06
     456:	4f 83       	std	Y+7, r20	; 0x07
     458:	58 87       	std	Y+8, r21	; 0x08
     45a:	ce 01       	movw	r24, r28
     45c:	01 96       	adiw	r24, 0x01	; 1
     45e:	be 01       	movw	r22, r28
     460:	67 5f       	subi	r22, 0xF7	; 247
     462:	7f 4f       	sbci	r23, 0xFF	; 255
     464:	0e 94 46 06 	call	0xc8c	; 0xc8c <__unpack_f>
     468:	ce 01       	movw	r24, r28
     46a:	05 96       	adiw	r24, 0x05	; 5
     46c:	be 01       	movw	r22, r28
     46e:	6f 5e       	subi	r22, 0xEF	; 239
     470:	7f 4f       	sbci	r23, 0xFF	; 255
     472:	0e 94 46 06 	call	0xc8c	; 0xc8c <__unpack_f>
     476:	99 85       	ldd	r25, Y+9	; 0x09
     478:	92 30       	cpi	r25, 0x02	; 2
     47a:	88 f0       	brcs	.+34     	; 0x49e <__mulsf3+0x60>
     47c:	89 89       	ldd	r24, Y+17	; 0x11
     47e:	82 30       	cpi	r24, 0x02	; 2
     480:	c8 f0       	brcs	.+50     	; 0x4b4 <__mulsf3+0x76>
     482:	94 30       	cpi	r25, 0x04	; 4
     484:	19 f4       	brne	.+6      	; 0x48c <__mulsf3+0x4e>
     486:	82 30       	cpi	r24, 0x02	; 2
     488:	51 f4       	brne	.+20     	; 0x49e <__mulsf3+0x60>
     48a:	04 c0       	rjmp	.+8      	; 0x494 <__mulsf3+0x56>
     48c:	84 30       	cpi	r24, 0x04	; 4
     48e:	29 f4       	brne	.+10     	; 0x49a <__mulsf3+0x5c>
     490:	92 30       	cpi	r25, 0x02	; 2
     492:	81 f4       	brne	.+32     	; 0x4b4 <__mulsf3+0x76>
     494:	8a e6       	ldi	r24, 0x6A	; 106
     496:	90 e0       	ldi	r25, 0x00	; 0
     498:	c6 c0       	rjmp	.+396    	; 0x626 <__mulsf3+0x1e8>
     49a:	92 30       	cpi	r25, 0x02	; 2
     49c:	49 f4       	brne	.+18     	; 0x4b0 <__mulsf3+0x72>
     49e:	20 e0       	ldi	r18, 0x00	; 0
     4a0:	9a 85       	ldd	r25, Y+10	; 0x0a
     4a2:	8a 89       	ldd	r24, Y+18	; 0x12
     4a4:	98 13       	cpse	r25, r24
     4a6:	21 e0       	ldi	r18, 0x01	; 1
     4a8:	2a 87       	std	Y+10, r18	; 0x0a
     4aa:	ce 01       	movw	r24, r28
     4ac:	09 96       	adiw	r24, 0x09	; 9
     4ae:	bb c0       	rjmp	.+374    	; 0x626 <__mulsf3+0x1e8>
     4b0:	82 30       	cpi	r24, 0x02	; 2
     4b2:	49 f4       	brne	.+18     	; 0x4c6 <__mulsf3+0x88>
     4b4:	20 e0       	ldi	r18, 0x00	; 0
     4b6:	9a 85       	ldd	r25, Y+10	; 0x0a
     4b8:	8a 89       	ldd	r24, Y+18	; 0x12
     4ba:	98 13       	cpse	r25, r24
     4bc:	21 e0       	ldi	r18, 0x01	; 1
     4be:	2a 8b       	std	Y+18, r18	; 0x12
     4c0:	ce 01       	movw	r24, r28
     4c2:	41 96       	adiw	r24, 0x11	; 17
     4c4:	b0 c0       	rjmp	.+352    	; 0x626 <__mulsf3+0x1e8>
     4c6:	2d 84       	ldd	r2, Y+13	; 0x0d
     4c8:	3e 84       	ldd	r3, Y+14	; 0x0e
     4ca:	4f 84       	ldd	r4, Y+15	; 0x0f
     4cc:	58 88       	ldd	r5, Y+16	; 0x10
     4ce:	6d 88       	ldd	r6, Y+21	; 0x15
     4d0:	7e 88       	ldd	r7, Y+22	; 0x16
     4d2:	8f 88       	ldd	r8, Y+23	; 0x17
     4d4:	98 8c       	ldd	r9, Y+24	; 0x18
     4d6:	ee 24       	eor	r14, r14
     4d8:	ff 24       	eor	r15, r15
     4da:	87 01       	movw	r16, r14
     4dc:	aa 24       	eor	r10, r10
     4de:	bb 24       	eor	r11, r11
     4e0:	65 01       	movw	r12, r10
     4e2:	40 e0       	ldi	r20, 0x00	; 0
     4e4:	50 e0       	ldi	r21, 0x00	; 0
     4e6:	60 e0       	ldi	r22, 0x00	; 0
     4e8:	70 e0       	ldi	r23, 0x00	; 0
     4ea:	e0 e0       	ldi	r30, 0x00	; 0
     4ec:	f0 e0       	ldi	r31, 0x00	; 0
     4ee:	c1 01       	movw	r24, r2
     4f0:	81 70       	andi	r24, 0x01	; 1
     4f2:	90 70       	andi	r25, 0x00	; 0
     4f4:	89 2b       	or	r24, r25
     4f6:	e9 f0       	breq	.+58     	; 0x532 <__mulsf3+0xf4>
     4f8:	e6 0c       	add	r14, r6
     4fa:	f7 1c       	adc	r15, r7
     4fc:	08 1d       	adc	r16, r8
     4fe:	19 1d       	adc	r17, r9
     500:	9a 01       	movw	r18, r20
     502:	ab 01       	movw	r20, r22
     504:	2a 0d       	add	r18, r10
     506:	3b 1d       	adc	r19, r11
     508:	4c 1d       	adc	r20, r12
     50a:	5d 1d       	adc	r21, r13
     50c:	80 e0       	ldi	r24, 0x00	; 0
     50e:	90 e0       	ldi	r25, 0x00	; 0
     510:	a0 e0       	ldi	r26, 0x00	; 0
     512:	b0 e0       	ldi	r27, 0x00	; 0
     514:	e6 14       	cp	r14, r6
     516:	f7 04       	cpc	r15, r7
     518:	08 05       	cpc	r16, r8
     51a:	19 05       	cpc	r17, r9
     51c:	20 f4       	brcc	.+8      	; 0x526 <__mulsf3+0xe8>
     51e:	81 e0       	ldi	r24, 0x01	; 1
     520:	90 e0       	ldi	r25, 0x00	; 0
     522:	a0 e0       	ldi	r26, 0x00	; 0
     524:	b0 e0       	ldi	r27, 0x00	; 0
     526:	ba 01       	movw	r22, r20
     528:	a9 01       	movw	r20, r18
     52a:	48 0f       	add	r20, r24
     52c:	59 1f       	adc	r21, r25
     52e:	6a 1f       	adc	r22, r26
     530:	7b 1f       	adc	r23, r27
     532:	aa 0c       	add	r10, r10
     534:	bb 1c       	adc	r11, r11
     536:	cc 1c       	adc	r12, r12
     538:	dd 1c       	adc	r13, r13
     53a:	97 fe       	sbrs	r9, 7
     53c:	08 c0       	rjmp	.+16     	; 0x54e <__mulsf3+0x110>
     53e:	81 e0       	ldi	r24, 0x01	; 1
     540:	90 e0       	ldi	r25, 0x00	; 0
     542:	a0 e0       	ldi	r26, 0x00	; 0
     544:	b0 e0       	ldi	r27, 0x00	; 0
     546:	a8 2a       	or	r10, r24
     548:	b9 2a       	or	r11, r25
     54a:	ca 2a       	or	r12, r26
     54c:	db 2a       	or	r13, r27
     54e:	31 96       	adiw	r30, 0x01	; 1
     550:	e0 32       	cpi	r30, 0x20	; 32
     552:	f1 05       	cpc	r31, r1
     554:	49 f0       	breq	.+18     	; 0x568 <__mulsf3+0x12a>
     556:	66 0c       	add	r6, r6
     558:	77 1c       	adc	r7, r7
     55a:	88 1c       	adc	r8, r8
     55c:	99 1c       	adc	r9, r9
     55e:	56 94       	lsr	r5
     560:	47 94       	ror	r4
     562:	37 94       	ror	r3
     564:	27 94       	ror	r2
     566:	c3 cf       	rjmp	.-122    	; 0x4ee <__mulsf3+0xb0>
     568:	fa 85       	ldd	r31, Y+10	; 0x0a
     56a:	ea 89       	ldd	r30, Y+18	; 0x12
     56c:	2b 89       	ldd	r18, Y+19	; 0x13
     56e:	3c 89       	ldd	r19, Y+20	; 0x14
     570:	8b 85       	ldd	r24, Y+11	; 0x0b
     572:	9c 85       	ldd	r25, Y+12	; 0x0c
     574:	28 0f       	add	r18, r24
     576:	39 1f       	adc	r19, r25
     578:	2e 5f       	subi	r18, 0xFE	; 254
     57a:	3f 4f       	sbci	r19, 0xFF	; 255
     57c:	17 c0       	rjmp	.+46     	; 0x5ac <__mulsf3+0x16e>
     57e:	ca 01       	movw	r24, r20
     580:	81 70       	andi	r24, 0x01	; 1
     582:	90 70       	andi	r25, 0x00	; 0
     584:	89 2b       	or	r24, r25
     586:	61 f0       	breq	.+24     	; 0x5a0 <__mulsf3+0x162>
     588:	16 95       	lsr	r17
     58a:	07 95       	ror	r16
     58c:	f7 94       	ror	r15
     58e:	e7 94       	ror	r14
     590:	80 e0       	ldi	r24, 0x00	; 0
     592:	90 e0       	ldi	r25, 0x00	; 0
     594:	a0 e0       	ldi	r26, 0x00	; 0
     596:	b0 e8       	ldi	r27, 0x80	; 128
     598:	e8 2a       	or	r14, r24
     59a:	f9 2a       	or	r15, r25
     59c:	0a 2b       	or	r16, r26
     59e:	1b 2b       	or	r17, r27
     5a0:	76 95       	lsr	r23
     5a2:	67 95       	ror	r22
     5a4:	57 95       	ror	r21
     5a6:	47 95       	ror	r20
     5a8:	2f 5f       	subi	r18, 0xFF	; 255
     5aa:	3f 4f       	sbci	r19, 0xFF	; 255
     5ac:	77 fd       	sbrc	r23, 7
     5ae:	e7 cf       	rjmp	.-50     	; 0x57e <__mulsf3+0x140>
     5b0:	0c c0       	rjmp	.+24     	; 0x5ca <__mulsf3+0x18c>
     5b2:	44 0f       	add	r20, r20
     5b4:	55 1f       	adc	r21, r21
     5b6:	66 1f       	adc	r22, r22
     5b8:	77 1f       	adc	r23, r23
     5ba:	17 fd       	sbrc	r17, 7
     5bc:	41 60       	ori	r20, 0x01	; 1
     5be:	ee 0c       	add	r14, r14
     5c0:	ff 1c       	adc	r15, r15
     5c2:	00 1f       	adc	r16, r16
     5c4:	11 1f       	adc	r17, r17
     5c6:	21 50       	subi	r18, 0x01	; 1
     5c8:	30 40       	sbci	r19, 0x00	; 0
     5ca:	40 30       	cpi	r20, 0x00	; 0
     5cc:	90 e0       	ldi	r25, 0x00	; 0
     5ce:	59 07       	cpc	r21, r25
     5d0:	90 e0       	ldi	r25, 0x00	; 0
     5d2:	69 07       	cpc	r22, r25
     5d4:	90 e4       	ldi	r25, 0x40	; 64
     5d6:	79 07       	cpc	r23, r25
     5d8:	60 f3       	brcs	.-40     	; 0x5b2 <__mulsf3+0x174>
     5da:	2b 8f       	std	Y+27, r18	; 0x1b
     5dc:	3c 8f       	std	Y+28, r19	; 0x1c
     5de:	db 01       	movw	r26, r22
     5e0:	ca 01       	movw	r24, r20
     5e2:	8f 77       	andi	r24, 0x7F	; 127
     5e4:	90 70       	andi	r25, 0x00	; 0
     5e6:	a0 70       	andi	r26, 0x00	; 0
     5e8:	b0 70       	andi	r27, 0x00	; 0
     5ea:	80 34       	cpi	r24, 0x40	; 64
     5ec:	91 05       	cpc	r25, r1
     5ee:	a1 05       	cpc	r26, r1
     5f0:	b1 05       	cpc	r27, r1
     5f2:	61 f4       	brne	.+24     	; 0x60c <__mulsf3+0x1ce>
     5f4:	47 fd       	sbrc	r20, 7
     5f6:	0a c0       	rjmp	.+20     	; 0x60c <__mulsf3+0x1ce>
     5f8:	e1 14       	cp	r14, r1
     5fa:	f1 04       	cpc	r15, r1
     5fc:	01 05       	cpc	r16, r1
     5fe:	11 05       	cpc	r17, r1
     600:	29 f0       	breq	.+10     	; 0x60c <__mulsf3+0x1ce>
     602:	40 5c       	subi	r20, 0xC0	; 192
     604:	5f 4f       	sbci	r21, 0xFF	; 255
     606:	6f 4f       	sbci	r22, 0xFF	; 255
     608:	7f 4f       	sbci	r23, 0xFF	; 255
     60a:	40 78       	andi	r20, 0x80	; 128
     60c:	1a 8e       	std	Y+26, r1	; 0x1a
     60e:	fe 17       	cp	r31, r30
     610:	11 f0       	breq	.+4      	; 0x616 <__mulsf3+0x1d8>
     612:	81 e0       	ldi	r24, 0x01	; 1
     614:	8a 8f       	std	Y+26, r24	; 0x1a
     616:	4d 8f       	std	Y+29, r20	; 0x1d
     618:	5e 8f       	std	Y+30, r21	; 0x1e
     61a:	6f 8f       	std	Y+31, r22	; 0x1f
     61c:	78 a3       	std	Y+32, r23	; 0x20
     61e:	83 e0       	ldi	r24, 0x03	; 3
     620:	89 8f       	std	Y+25, r24	; 0x19
     622:	ce 01       	movw	r24, r28
     624:	49 96       	adiw	r24, 0x19	; 25
     626:	0e 94 71 05 	call	0xae2	; 0xae2 <__pack_f>
     62a:	a0 96       	adiw	r28, 0x20	; 32
     62c:	e2 e1       	ldi	r30, 0x12	; 18
     62e:	0c 94 e1 28 	jmp	0x51c2	; 0x51c2 <__epilogue_restores__>

00000632 <__divsf3>:
     632:	a8 e1       	ldi	r26, 0x18	; 24
     634:	b0 e0       	ldi	r27, 0x00	; 0
     636:	ef e1       	ldi	r30, 0x1F	; 31
     638:	f3 e0       	ldi	r31, 0x03	; 3
     63a:	0c 94 cd 28 	jmp	0x519a	; 0x519a <__prologue_saves__+0x10>
     63e:	69 83       	std	Y+1, r22	; 0x01
     640:	7a 83       	std	Y+2, r23	; 0x02
     642:	8b 83       	std	Y+3, r24	; 0x03
     644:	9c 83       	std	Y+4, r25	; 0x04
     646:	2d 83       	std	Y+5, r18	; 0x05
     648:	3e 83       	std	Y+6, r19	; 0x06
     64a:	4f 83       	std	Y+7, r20	; 0x07
     64c:	58 87       	std	Y+8, r21	; 0x08
     64e:	b9 e0       	ldi	r27, 0x09	; 9
     650:	eb 2e       	mov	r14, r27
     652:	f1 2c       	mov	r15, r1
     654:	ec 0e       	add	r14, r28
     656:	fd 1e       	adc	r15, r29
     658:	ce 01       	movw	r24, r28
     65a:	01 96       	adiw	r24, 0x01	; 1
     65c:	b7 01       	movw	r22, r14
     65e:	0e 94 46 06 	call	0xc8c	; 0xc8c <__unpack_f>
     662:	8e 01       	movw	r16, r28
     664:	0f 5e       	subi	r16, 0xEF	; 239
     666:	1f 4f       	sbci	r17, 0xFF	; 255
     668:	ce 01       	movw	r24, r28
     66a:	05 96       	adiw	r24, 0x05	; 5
     66c:	b8 01       	movw	r22, r16
     66e:	0e 94 46 06 	call	0xc8c	; 0xc8c <__unpack_f>
     672:	29 85       	ldd	r18, Y+9	; 0x09
     674:	22 30       	cpi	r18, 0x02	; 2
     676:	08 f4       	brcc	.+2      	; 0x67a <__divsf3+0x48>
     678:	7e c0       	rjmp	.+252    	; 0x776 <__divsf3+0x144>
     67a:	39 89       	ldd	r19, Y+17	; 0x11
     67c:	32 30       	cpi	r19, 0x02	; 2
     67e:	10 f4       	brcc	.+4      	; 0x684 <__divsf3+0x52>
     680:	b8 01       	movw	r22, r16
     682:	7c c0       	rjmp	.+248    	; 0x77c <__divsf3+0x14a>
     684:	8a 85       	ldd	r24, Y+10	; 0x0a
     686:	9a 89       	ldd	r25, Y+18	; 0x12
     688:	89 27       	eor	r24, r25
     68a:	8a 87       	std	Y+10, r24	; 0x0a
     68c:	24 30       	cpi	r18, 0x04	; 4
     68e:	11 f0       	breq	.+4      	; 0x694 <__divsf3+0x62>
     690:	22 30       	cpi	r18, 0x02	; 2
     692:	31 f4       	brne	.+12     	; 0x6a0 <__divsf3+0x6e>
     694:	23 17       	cp	r18, r19
     696:	09 f0       	breq	.+2      	; 0x69a <__divsf3+0x68>
     698:	6e c0       	rjmp	.+220    	; 0x776 <__divsf3+0x144>
     69a:	6a e6       	ldi	r22, 0x6A	; 106
     69c:	70 e0       	ldi	r23, 0x00	; 0
     69e:	6e c0       	rjmp	.+220    	; 0x77c <__divsf3+0x14a>
     6a0:	34 30       	cpi	r19, 0x04	; 4
     6a2:	39 f4       	brne	.+14     	; 0x6b2 <__divsf3+0x80>
     6a4:	1d 86       	std	Y+13, r1	; 0x0d
     6a6:	1e 86       	std	Y+14, r1	; 0x0e
     6a8:	1f 86       	std	Y+15, r1	; 0x0f
     6aa:	18 8a       	std	Y+16, r1	; 0x10
     6ac:	1c 86       	std	Y+12, r1	; 0x0c
     6ae:	1b 86       	std	Y+11, r1	; 0x0b
     6b0:	04 c0       	rjmp	.+8      	; 0x6ba <__divsf3+0x88>
     6b2:	32 30       	cpi	r19, 0x02	; 2
     6b4:	21 f4       	brne	.+8      	; 0x6be <__divsf3+0x8c>
     6b6:	84 e0       	ldi	r24, 0x04	; 4
     6b8:	89 87       	std	Y+9, r24	; 0x09
     6ba:	b7 01       	movw	r22, r14
     6bc:	5f c0       	rjmp	.+190    	; 0x77c <__divsf3+0x14a>
     6be:	2b 85       	ldd	r18, Y+11	; 0x0b
     6c0:	3c 85       	ldd	r19, Y+12	; 0x0c
     6c2:	8b 89       	ldd	r24, Y+19	; 0x13
     6c4:	9c 89       	ldd	r25, Y+20	; 0x14
     6c6:	28 1b       	sub	r18, r24
     6c8:	39 0b       	sbc	r19, r25
     6ca:	3c 87       	std	Y+12, r19	; 0x0c
     6cc:	2b 87       	std	Y+11, r18	; 0x0b
     6ce:	ed 84       	ldd	r14, Y+13	; 0x0d
     6d0:	fe 84       	ldd	r15, Y+14	; 0x0e
     6d2:	0f 85       	ldd	r16, Y+15	; 0x0f
     6d4:	18 89       	ldd	r17, Y+16	; 0x10
     6d6:	ad 88       	ldd	r10, Y+21	; 0x15
     6d8:	be 88       	ldd	r11, Y+22	; 0x16
     6da:	cf 88       	ldd	r12, Y+23	; 0x17
     6dc:	d8 8c       	ldd	r13, Y+24	; 0x18
     6de:	ea 14       	cp	r14, r10
     6e0:	fb 04       	cpc	r15, r11
     6e2:	0c 05       	cpc	r16, r12
     6e4:	1d 05       	cpc	r17, r13
     6e6:	40 f4       	brcc	.+16     	; 0x6f8 <__divsf3+0xc6>
     6e8:	ee 0c       	add	r14, r14
     6ea:	ff 1c       	adc	r15, r15
     6ec:	00 1f       	adc	r16, r16
     6ee:	11 1f       	adc	r17, r17
     6f0:	21 50       	subi	r18, 0x01	; 1
     6f2:	30 40       	sbci	r19, 0x00	; 0
     6f4:	3c 87       	std	Y+12, r19	; 0x0c
     6f6:	2b 87       	std	Y+11, r18	; 0x0b
     6f8:	20 e0       	ldi	r18, 0x00	; 0
     6fa:	30 e0       	ldi	r19, 0x00	; 0
     6fc:	40 e0       	ldi	r20, 0x00	; 0
     6fe:	50 e0       	ldi	r21, 0x00	; 0
     700:	80 e0       	ldi	r24, 0x00	; 0
     702:	90 e0       	ldi	r25, 0x00	; 0
     704:	a0 e0       	ldi	r26, 0x00	; 0
     706:	b0 e4       	ldi	r27, 0x40	; 64
     708:	60 e0       	ldi	r22, 0x00	; 0
     70a:	70 e0       	ldi	r23, 0x00	; 0
     70c:	ea 14       	cp	r14, r10
     70e:	fb 04       	cpc	r15, r11
     710:	0c 05       	cpc	r16, r12
     712:	1d 05       	cpc	r17, r13
     714:	40 f0       	brcs	.+16     	; 0x726 <__divsf3+0xf4>
     716:	28 2b       	or	r18, r24
     718:	39 2b       	or	r19, r25
     71a:	4a 2b       	or	r20, r26
     71c:	5b 2b       	or	r21, r27
     71e:	ea 18       	sub	r14, r10
     720:	fb 08       	sbc	r15, r11
     722:	0c 09       	sbc	r16, r12
     724:	1d 09       	sbc	r17, r13
     726:	b6 95       	lsr	r27
     728:	a7 95       	ror	r26
     72a:	97 95       	ror	r25
     72c:	87 95       	ror	r24
     72e:	ee 0c       	add	r14, r14
     730:	ff 1c       	adc	r15, r15
     732:	00 1f       	adc	r16, r16
     734:	11 1f       	adc	r17, r17
     736:	6f 5f       	subi	r22, 0xFF	; 255
     738:	7f 4f       	sbci	r23, 0xFF	; 255
     73a:	6f 31       	cpi	r22, 0x1F	; 31
     73c:	71 05       	cpc	r23, r1
     73e:	31 f7       	brne	.-52     	; 0x70c <__divsf3+0xda>
     740:	da 01       	movw	r26, r20
     742:	c9 01       	movw	r24, r18
     744:	8f 77       	andi	r24, 0x7F	; 127
     746:	90 70       	andi	r25, 0x00	; 0
     748:	a0 70       	andi	r26, 0x00	; 0
     74a:	b0 70       	andi	r27, 0x00	; 0
     74c:	80 34       	cpi	r24, 0x40	; 64
     74e:	91 05       	cpc	r25, r1
     750:	a1 05       	cpc	r26, r1
     752:	b1 05       	cpc	r27, r1
     754:	61 f4       	brne	.+24     	; 0x76e <__divsf3+0x13c>
     756:	27 fd       	sbrc	r18, 7
     758:	0a c0       	rjmp	.+20     	; 0x76e <__divsf3+0x13c>
     75a:	e1 14       	cp	r14, r1
     75c:	f1 04       	cpc	r15, r1
     75e:	01 05       	cpc	r16, r1
     760:	11 05       	cpc	r17, r1
     762:	29 f0       	breq	.+10     	; 0x76e <__divsf3+0x13c>
     764:	20 5c       	subi	r18, 0xC0	; 192
     766:	3f 4f       	sbci	r19, 0xFF	; 255
     768:	4f 4f       	sbci	r20, 0xFF	; 255
     76a:	5f 4f       	sbci	r21, 0xFF	; 255
     76c:	20 78       	andi	r18, 0x80	; 128
     76e:	2d 87       	std	Y+13, r18	; 0x0d
     770:	3e 87       	std	Y+14, r19	; 0x0e
     772:	4f 87       	std	Y+15, r20	; 0x0f
     774:	58 8b       	std	Y+16, r21	; 0x10
     776:	be 01       	movw	r22, r28
     778:	67 5f       	subi	r22, 0xF7	; 247
     77a:	7f 4f       	sbci	r23, 0xFF	; 255
     77c:	cb 01       	movw	r24, r22
     77e:	0e 94 71 05 	call	0xae2	; 0xae2 <__pack_f>
     782:	68 96       	adiw	r28, 0x18	; 24
     784:	ea e0       	ldi	r30, 0x0A	; 10
     786:	0c 94 e9 28 	jmp	0x51d2	; 0x51d2 <__epilogue_restores__+0x10>

0000078a <__gtsf2>:
     78a:	a8 e1       	ldi	r26, 0x18	; 24
     78c:	b0 e0       	ldi	r27, 0x00	; 0
     78e:	eb ec       	ldi	r30, 0xCB	; 203
     790:	f3 e0       	ldi	r31, 0x03	; 3
     792:	0c 94 d1 28 	jmp	0x51a2	; 0x51a2 <__prologue_saves__+0x18>
     796:	69 83       	std	Y+1, r22	; 0x01
     798:	7a 83       	std	Y+2, r23	; 0x02
     79a:	8b 83       	std	Y+3, r24	; 0x03
     79c:	9c 83       	std	Y+4, r25	; 0x04
     79e:	2d 83       	std	Y+5, r18	; 0x05
     7a0:	3e 83       	std	Y+6, r19	; 0x06
     7a2:	4f 83       	std	Y+7, r20	; 0x07
     7a4:	58 87       	std	Y+8, r21	; 0x08
     7a6:	89 e0       	ldi	r24, 0x09	; 9
     7a8:	e8 2e       	mov	r14, r24
     7aa:	f1 2c       	mov	r15, r1
     7ac:	ec 0e       	add	r14, r28
     7ae:	fd 1e       	adc	r15, r29
     7b0:	ce 01       	movw	r24, r28
     7b2:	01 96       	adiw	r24, 0x01	; 1
     7b4:	b7 01       	movw	r22, r14
     7b6:	0e 94 46 06 	call	0xc8c	; 0xc8c <__unpack_f>
     7ba:	8e 01       	movw	r16, r28
     7bc:	0f 5e       	subi	r16, 0xEF	; 239
     7be:	1f 4f       	sbci	r17, 0xFF	; 255
     7c0:	ce 01       	movw	r24, r28
     7c2:	05 96       	adiw	r24, 0x05	; 5
     7c4:	b8 01       	movw	r22, r16
     7c6:	0e 94 46 06 	call	0xc8c	; 0xc8c <__unpack_f>
     7ca:	89 85       	ldd	r24, Y+9	; 0x09
     7cc:	82 30       	cpi	r24, 0x02	; 2
     7ce:	40 f0       	brcs	.+16     	; 0x7e0 <__gtsf2+0x56>
     7d0:	89 89       	ldd	r24, Y+17	; 0x11
     7d2:	82 30       	cpi	r24, 0x02	; 2
     7d4:	28 f0       	brcs	.+10     	; 0x7e0 <__gtsf2+0x56>
     7d6:	c7 01       	movw	r24, r14
     7d8:	b8 01       	movw	r22, r16
     7da:	0e 94 be 06 	call	0xd7c	; 0xd7c <__fpcmp_parts_f>
     7de:	01 c0       	rjmp	.+2      	; 0x7e2 <__gtsf2+0x58>
     7e0:	8f ef       	ldi	r24, 0xFF	; 255
     7e2:	68 96       	adiw	r28, 0x18	; 24
     7e4:	e6 e0       	ldi	r30, 0x06	; 6
     7e6:	0c 94 ed 28 	jmp	0x51da	; 0x51da <__epilogue_restores__+0x18>

000007ea <__gesf2>:
     7ea:	a8 e1       	ldi	r26, 0x18	; 24
     7ec:	b0 e0       	ldi	r27, 0x00	; 0
     7ee:	eb ef       	ldi	r30, 0xFB	; 251
     7f0:	f3 e0       	ldi	r31, 0x03	; 3
     7f2:	0c 94 d1 28 	jmp	0x51a2	; 0x51a2 <__prologue_saves__+0x18>
     7f6:	69 83       	std	Y+1, r22	; 0x01
     7f8:	7a 83       	std	Y+2, r23	; 0x02
     7fa:	8b 83       	std	Y+3, r24	; 0x03
     7fc:	9c 83       	std	Y+4, r25	; 0x04
     7fe:	2d 83       	std	Y+5, r18	; 0x05
     800:	3e 83       	std	Y+6, r19	; 0x06
     802:	4f 83       	std	Y+7, r20	; 0x07
     804:	58 87       	std	Y+8, r21	; 0x08
     806:	89 e0       	ldi	r24, 0x09	; 9
     808:	e8 2e       	mov	r14, r24
     80a:	f1 2c       	mov	r15, r1
     80c:	ec 0e       	add	r14, r28
     80e:	fd 1e       	adc	r15, r29
     810:	ce 01       	movw	r24, r28
     812:	01 96       	adiw	r24, 0x01	; 1
     814:	b7 01       	movw	r22, r14
     816:	0e 94 46 06 	call	0xc8c	; 0xc8c <__unpack_f>
     81a:	8e 01       	movw	r16, r28
     81c:	0f 5e       	subi	r16, 0xEF	; 239
     81e:	1f 4f       	sbci	r17, 0xFF	; 255
     820:	ce 01       	movw	r24, r28
     822:	05 96       	adiw	r24, 0x05	; 5
     824:	b8 01       	movw	r22, r16
     826:	0e 94 46 06 	call	0xc8c	; 0xc8c <__unpack_f>
     82a:	89 85       	ldd	r24, Y+9	; 0x09
     82c:	82 30       	cpi	r24, 0x02	; 2
     82e:	40 f0       	brcs	.+16     	; 0x840 <__gesf2+0x56>
     830:	89 89       	ldd	r24, Y+17	; 0x11
     832:	82 30       	cpi	r24, 0x02	; 2
     834:	28 f0       	brcs	.+10     	; 0x840 <__gesf2+0x56>
     836:	c7 01       	movw	r24, r14
     838:	b8 01       	movw	r22, r16
     83a:	0e 94 be 06 	call	0xd7c	; 0xd7c <__fpcmp_parts_f>
     83e:	01 c0       	rjmp	.+2      	; 0x842 <__gesf2+0x58>
     840:	8f ef       	ldi	r24, 0xFF	; 255
     842:	68 96       	adiw	r28, 0x18	; 24
     844:	e6 e0       	ldi	r30, 0x06	; 6
     846:	0c 94 ed 28 	jmp	0x51da	; 0x51da <__epilogue_restores__+0x18>

0000084a <__ltsf2>:
     84a:	a8 e1       	ldi	r26, 0x18	; 24
     84c:	b0 e0       	ldi	r27, 0x00	; 0
     84e:	eb e2       	ldi	r30, 0x2B	; 43
     850:	f4 e0       	ldi	r31, 0x04	; 4
     852:	0c 94 d1 28 	jmp	0x51a2	; 0x51a2 <__prologue_saves__+0x18>
     856:	69 83       	std	Y+1, r22	; 0x01
     858:	7a 83       	std	Y+2, r23	; 0x02
     85a:	8b 83       	std	Y+3, r24	; 0x03
     85c:	9c 83       	std	Y+4, r25	; 0x04
     85e:	2d 83       	std	Y+5, r18	; 0x05
     860:	3e 83       	std	Y+6, r19	; 0x06
     862:	4f 83       	std	Y+7, r20	; 0x07
     864:	58 87       	std	Y+8, r21	; 0x08
     866:	89 e0       	ldi	r24, 0x09	; 9
     868:	e8 2e       	mov	r14, r24
     86a:	f1 2c       	mov	r15, r1
     86c:	ec 0e       	add	r14, r28
     86e:	fd 1e       	adc	r15, r29
     870:	ce 01       	movw	r24, r28
     872:	01 96       	adiw	r24, 0x01	; 1
     874:	b7 01       	movw	r22, r14
     876:	0e 94 46 06 	call	0xc8c	; 0xc8c <__unpack_f>
     87a:	8e 01       	movw	r16, r28
     87c:	0f 5e       	subi	r16, 0xEF	; 239
     87e:	1f 4f       	sbci	r17, 0xFF	; 255
     880:	ce 01       	movw	r24, r28
     882:	05 96       	adiw	r24, 0x05	; 5
     884:	b8 01       	movw	r22, r16
     886:	0e 94 46 06 	call	0xc8c	; 0xc8c <__unpack_f>
     88a:	89 85       	ldd	r24, Y+9	; 0x09
     88c:	82 30       	cpi	r24, 0x02	; 2
     88e:	40 f0       	brcs	.+16     	; 0x8a0 <__stack+0x41>
     890:	89 89       	ldd	r24, Y+17	; 0x11
     892:	82 30       	cpi	r24, 0x02	; 2
     894:	28 f0       	brcs	.+10     	; 0x8a0 <__stack+0x41>
     896:	c7 01       	movw	r24, r14
     898:	b8 01       	movw	r22, r16
     89a:	0e 94 be 06 	call	0xd7c	; 0xd7c <__fpcmp_parts_f>
     89e:	01 c0       	rjmp	.+2      	; 0x8a2 <__stack+0x43>
     8a0:	81 e0       	ldi	r24, 0x01	; 1
     8a2:	68 96       	adiw	r28, 0x18	; 24
     8a4:	e6 e0       	ldi	r30, 0x06	; 6
     8a6:	0c 94 ed 28 	jmp	0x51da	; 0x51da <__epilogue_restores__+0x18>

000008aa <__fixsfsi>:
     8aa:	ac e0       	ldi	r26, 0x0C	; 12
     8ac:	b0 e0       	ldi	r27, 0x00	; 0
     8ae:	eb e5       	ldi	r30, 0x5B	; 91
     8b0:	f4 e0       	ldi	r31, 0x04	; 4
     8b2:	0c 94 d5 28 	jmp	0x51aa	; 0x51aa <__prologue_saves__+0x20>
     8b6:	69 83       	std	Y+1, r22	; 0x01
     8b8:	7a 83       	std	Y+2, r23	; 0x02
     8ba:	8b 83       	std	Y+3, r24	; 0x03
     8bc:	9c 83       	std	Y+4, r25	; 0x04
     8be:	ce 01       	movw	r24, r28
     8c0:	01 96       	adiw	r24, 0x01	; 1
     8c2:	be 01       	movw	r22, r28
     8c4:	6b 5f       	subi	r22, 0xFB	; 251
     8c6:	7f 4f       	sbci	r23, 0xFF	; 255
     8c8:	0e 94 46 06 	call	0xc8c	; 0xc8c <__unpack_f>
     8cc:	8d 81       	ldd	r24, Y+5	; 0x05
     8ce:	82 30       	cpi	r24, 0x02	; 2
     8d0:	61 f1       	breq	.+88     	; 0x92a <__fixsfsi+0x80>
     8d2:	82 30       	cpi	r24, 0x02	; 2
     8d4:	50 f1       	brcs	.+84     	; 0x92a <__fixsfsi+0x80>
     8d6:	84 30       	cpi	r24, 0x04	; 4
     8d8:	21 f4       	brne	.+8      	; 0x8e2 <__fixsfsi+0x38>
     8da:	8e 81       	ldd	r24, Y+6	; 0x06
     8dc:	88 23       	and	r24, r24
     8de:	51 f1       	breq	.+84     	; 0x934 <__fixsfsi+0x8a>
     8e0:	2e c0       	rjmp	.+92     	; 0x93e <__fixsfsi+0x94>
     8e2:	2f 81       	ldd	r18, Y+7	; 0x07
     8e4:	38 85       	ldd	r19, Y+8	; 0x08
     8e6:	37 fd       	sbrc	r19, 7
     8e8:	20 c0       	rjmp	.+64     	; 0x92a <__fixsfsi+0x80>
     8ea:	6e 81       	ldd	r22, Y+6	; 0x06
     8ec:	2f 31       	cpi	r18, 0x1F	; 31
     8ee:	31 05       	cpc	r19, r1
     8f0:	1c f0       	brlt	.+6      	; 0x8f8 <__fixsfsi+0x4e>
     8f2:	66 23       	and	r22, r22
     8f4:	f9 f0       	breq	.+62     	; 0x934 <__fixsfsi+0x8a>
     8f6:	23 c0       	rjmp	.+70     	; 0x93e <__fixsfsi+0x94>
     8f8:	8e e1       	ldi	r24, 0x1E	; 30
     8fa:	90 e0       	ldi	r25, 0x00	; 0
     8fc:	82 1b       	sub	r24, r18
     8fe:	93 0b       	sbc	r25, r19
     900:	29 85       	ldd	r18, Y+9	; 0x09
     902:	3a 85       	ldd	r19, Y+10	; 0x0a
     904:	4b 85       	ldd	r20, Y+11	; 0x0b
     906:	5c 85       	ldd	r21, Y+12	; 0x0c
     908:	04 c0       	rjmp	.+8      	; 0x912 <__fixsfsi+0x68>
     90a:	56 95       	lsr	r21
     90c:	47 95       	ror	r20
     90e:	37 95       	ror	r19
     910:	27 95       	ror	r18
     912:	8a 95       	dec	r24
     914:	d2 f7       	brpl	.-12     	; 0x90a <__fixsfsi+0x60>
     916:	66 23       	and	r22, r22
     918:	b1 f0       	breq	.+44     	; 0x946 <__fixsfsi+0x9c>
     91a:	50 95       	com	r21
     91c:	40 95       	com	r20
     91e:	30 95       	com	r19
     920:	21 95       	neg	r18
     922:	3f 4f       	sbci	r19, 0xFF	; 255
     924:	4f 4f       	sbci	r20, 0xFF	; 255
     926:	5f 4f       	sbci	r21, 0xFF	; 255
     928:	0e c0       	rjmp	.+28     	; 0x946 <__fixsfsi+0x9c>
     92a:	20 e0       	ldi	r18, 0x00	; 0
     92c:	30 e0       	ldi	r19, 0x00	; 0
     92e:	40 e0       	ldi	r20, 0x00	; 0
     930:	50 e0       	ldi	r21, 0x00	; 0
     932:	09 c0       	rjmp	.+18     	; 0x946 <__fixsfsi+0x9c>
     934:	2f ef       	ldi	r18, 0xFF	; 255
     936:	3f ef       	ldi	r19, 0xFF	; 255
     938:	4f ef       	ldi	r20, 0xFF	; 255
     93a:	5f e7       	ldi	r21, 0x7F	; 127
     93c:	04 c0       	rjmp	.+8      	; 0x946 <__fixsfsi+0x9c>
     93e:	20 e0       	ldi	r18, 0x00	; 0
     940:	30 e0       	ldi	r19, 0x00	; 0
     942:	40 e0       	ldi	r20, 0x00	; 0
     944:	50 e8       	ldi	r21, 0x80	; 128
     946:	b9 01       	movw	r22, r18
     948:	ca 01       	movw	r24, r20
     94a:	2c 96       	adiw	r28, 0x0c	; 12
     94c:	e2 e0       	ldi	r30, 0x02	; 2
     94e:	0c 94 f1 28 	jmp	0x51e2	; 0x51e2 <__epilogue_restores__+0x20>

00000952 <__floatunsisf>:
     952:	a8 e0       	ldi	r26, 0x08	; 8
     954:	b0 e0       	ldi	r27, 0x00	; 0
     956:	ef ea       	ldi	r30, 0xAF	; 175
     958:	f4 e0       	ldi	r31, 0x04	; 4
     95a:	0c 94 cd 28 	jmp	0x519a	; 0x519a <__prologue_saves__+0x10>
     95e:	7b 01       	movw	r14, r22
     960:	8c 01       	movw	r16, r24
     962:	61 15       	cp	r22, r1
     964:	71 05       	cpc	r23, r1
     966:	81 05       	cpc	r24, r1
     968:	91 05       	cpc	r25, r1
     96a:	19 f4       	brne	.+6      	; 0x972 <__floatunsisf+0x20>
     96c:	82 e0       	ldi	r24, 0x02	; 2
     96e:	89 83       	std	Y+1, r24	; 0x01
     970:	60 c0       	rjmp	.+192    	; 0xa32 <__floatunsisf+0xe0>
     972:	83 e0       	ldi	r24, 0x03	; 3
     974:	89 83       	std	Y+1, r24	; 0x01
     976:	8e e1       	ldi	r24, 0x1E	; 30
     978:	c8 2e       	mov	r12, r24
     97a:	d1 2c       	mov	r13, r1
     97c:	dc 82       	std	Y+4, r13	; 0x04
     97e:	cb 82       	std	Y+3, r12	; 0x03
     980:	ed 82       	std	Y+5, r14	; 0x05
     982:	fe 82       	std	Y+6, r15	; 0x06
     984:	0f 83       	std	Y+7, r16	; 0x07
     986:	18 87       	std	Y+8, r17	; 0x08
     988:	c8 01       	movw	r24, r16
     98a:	b7 01       	movw	r22, r14
     98c:	0e 94 22 05 	call	0xa44	; 0xa44 <__clzsi2>
     990:	fc 01       	movw	r30, r24
     992:	31 97       	sbiw	r30, 0x01	; 1
     994:	f7 ff       	sbrs	r31, 7
     996:	3b c0       	rjmp	.+118    	; 0xa0e <__floatunsisf+0xbc>
     998:	22 27       	eor	r18, r18
     99a:	33 27       	eor	r19, r19
     99c:	2e 1b       	sub	r18, r30
     99e:	3f 0b       	sbc	r19, r31
     9a0:	57 01       	movw	r10, r14
     9a2:	68 01       	movw	r12, r16
     9a4:	02 2e       	mov	r0, r18
     9a6:	04 c0       	rjmp	.+8      	; 0x9b0 <__floatunsisf+0x5e>
     9a8:	d6 94       	lsr	r13
     9aa:	c7 94       	ror	r12
     9ac:	b7 94       	ror	r11
     9ae:	a7 94       	ror	r10
     9b0:	0a 94       	dec	r0
     9b2:	d2 f7       	brpl	.-12     	; 0x9a8 <__floatunsisf+0x56>
     9b4:	40 e0       	ldi	r20, 0x00	; 0
     9b6:	50 e0       	ldi	r21, 0x00	; 0
     9b8:	60 e0       	ldi	r22, 0x00	; 0
     9ba:	70 e0       	ldi	r23, 0x00	; 0
     9bc:	81 e0       	ldi	r24, 0x01	; 1
     9be:	90 e0       	ldi	r25, 0x00	; 0
     9c0:	a0 e0       	ldi	r26, 0x00	; 0
     9c2:	b0 e0       	ldi	r27, 0x00	; 0
     9c4:	04 c0       	rjmp	.+8      	; 0x9ce <__floatunsisf+0x7c>
     9c6:	88 0f       	add	r24, r24
     9c8:	99 1f       	adc	r25, r25
     9ca:	aa 1f       	adc	r26, r26
     9cc:	bb 1f       	adc	r27, r27
     9ce:	2a 95       	dec	r18
     9d0:	d2 f7       	brpl	.-12     	; 0x9c6 <__floatunsisf+0x74>
     9d2:	01 97       	sbiw	r24, 0x01	; 1
     9d4:	a1 09       	sbc	r26, r1
     9d6:	b1 09       	sbc	r27, r1
     9d8:	8e 21       	and	r24, r14
     9da:	9f 21       	and	r25, r15
     9dc:	a0 23       	and	r26, r16
     9de:	b1 23       	and	r27, r17
     9e0:	00 97       	sbiw	r24, 0x00	; 0
     9e2:	a1 05       	cpc	r26, r1
     9e4:	b1 05       	cpc	r27, r1
     9e6:	21 f0       	breq	.+8      	; 0x9f0 <__floatunsisf+0x9e>
     9e8:	41 e0       	ldi	r20, 0x01	; 1
     9ea:	50 e0       	ldi	r21, 0x00	; 0
     9ec:	60 e0       	ldi	r22, 0x00	; 0
     9ee:	70 e0       	ldi	r23, 0x00	; 0
     9f0:	4a 29       	or	r20, r10
     9f2:	5b 29       	or	r21, r11
     9f4:	6c 29       	or	r22, r12
     9f6:	7d 29       	or	r23, r13
     9f8:	4d 83       	std	Y+5, r20	; 0x05
     9fa:	5e 83       	std	Y+6, r21	; 0x06
     9fc:	6f 83       	std	Y+7, r22	; 0x07
     9fe:	78 87       	std	Y+8, r23	; 0x08
     a00:	8e e1       	ldi	r24, 0x1E	; 30
     a02:	90 e0       	ldi	r25, 0x00	; 0
     a04:	8e 1b       	sub	r24, r30
     a06:	9f 0b       	sbc	r25, r31
     a08:	9c 83       	std	Y+4, r25	; 0x04
     a0a:	8b 83       	std	Y+3, r24	; 0x03
     a0c:	12 c0       	rjmp	.+36     	; 0xa32 <__floatunsisf+0xe0>
     a0e:	30 97       	sbiw	r30, 0x00	; 0
     a10:	81 f0       	breq	.+32     	; 0xa32 <__floatunsisf+0xe0>
     a12:	0e 2e       	mov	r0, r30
     a14:	04 c0       	rjmp	.+8      	; 0xa1e <__floatunsisf+0xcc>
     a16:	ee 0c       	add	r14, r14
     a18:	ff 1c       	adc	r15, r15
     a1a:	00 1f       	adc	r16, r16
     a1c:	11 1f       	adc	r17, r17
     a1e:	0a 94       	dec	r0
     a20:	d2 f7       	brpl	.-12     	; 0xa16 <__floatunsisf+0xc4>
     a22:	ed 82       	std	Y+5, r14	; 0x05
     a24:	fe 82       	std	Y+6, r15	; 0x06
     a26:	0f 83       	std	Y+7, r16	; 0x07
     a28:	18 87       	std	Y+8, r17	; 0x08
     a2a:	ce 1a       	sub	r12, r30
     a2c:	df 0a       	sbc	r13, r31
     a2e:	dc 82       	std	Y+4, r13	; 0x04
     a30:	cb 82       	std	Y+3, r12	; 0x03
     a32:	1a 82       	std	Y+2, r1	; 0x02
     a34:	ce 01       	movw	r24, r28
     a36:	01 96       	adiw	r24, 0x01	; 1
     a38:	0e 94 71 05 	call	0xae2	; 0xae2 <__pack_f>
     a3c:	28 96       	adiw	r28, 0x08	; 8
     a3e:	ea e0       	ldi	r30, 0x0A	; 10
     a40:	0c 94 e9 28 	jmp	0x51d2	; 0x51d2 <__epilogue_restores__+0x10>

00000a44 <__clzsi2>:
     a44:	ef 92       	push	r14
     a46:	ff 92       	push	r15
     a48:	0f 93       	push	r16
     a4a:	1f 93       	push	r17
     a4c:	7b 01       	movw	r14, r22
     a4e:	8c 01       	movw	r16, r24
     a50:	80 e0       	ldi	r24, 0x00	; 0
     a52:	e8 16       	cp	r14, r24
     a54:	80 e0       	ldi	r24, 0x00	; 0
     a56:	f8 06       	cpc	r15, r24
     a58:	81 e0       	ldi	r24, 0x01	; 1
     a5a:	08 07       	cpc	r16, r24
     a5c:	80 e0       	ldi	r24, 0x00	; 0
     a5e:	18 07       	cpc	r17, r24
     a60:	88 f4       	brcc	.+34     	; 0xa84 <__clzsi2+0x40>
     a62:	8f ef       	ldi	r24, 0xFF	; 255
     a64:	e8 16       	cp	r14, r24
     a66:	f1 04       	cpc	r15, r1
     a68:	01 05       	cpc	r16, r1
     a6a:	11 05       	cpc	r17, r1
     a6c:	31 f0       	breq	.+12     	; 0xa7a <__clzsi2+0x36>
     a6e:	28 f0       	brcs	.+10     	; 0xa7a <__clzsi2+0x36>
     a70:	88 e0       	ldi	r24, 0x08	; 8
     a72:	90 e0       	ldi	r25, 0x00	; 0
     a74:	a0 e0       	ldi	r26, 0x00	; 0
     a76:	b0 e0       	ldi	r27, 0x00	; 0
     a78:	17 c0       	rjmp	.+46     	; 0xaa8 <__clzsi2+0x64>
     a7a:	80 e0       	ldi	r24, 0x00	; 0
     a7c:	90 e0       	ldi	r25, 0x00	; 0
     a7e:	a0 e0       	ldi	r26, 0x00	; 0
     a80:	b0 e0       	ldi	r27, 0x00	; 0
     a82:	12 c0       	rjmp	.+36     	; 0xaa8 <__clzsi2+0x64>
     a84:	80 e0       	ldi	r24, 0x00	; 0
     a86:	e8 16       	cp	r14, r24
     a88:	80 e0       	ldi	r24, 0x00	; 0
     a8a:	f8 06       	cpc	r15, r24
     a8c:	80 e0       	ldi	r24, 0x00	; 0
     a8e:	08 07       	cpc	r16, r24
     a90:	81 e0       	ldi	r24, 0x01	; 1
     a92:	18 07       	cpc	r17, r24
     a94:	28 f0       	brcs	.+10     	; 0xaa0 <__clzsi2+0x5c>
     a96:	88 e1       	ldi	r24, 0x18	; 24
     a98:	90 e0       	ldi	r25, 0x00	; 0
     a9a:	a0 e0       	ldi	r26, 0x00	; 0
     a9c:	b0 e0       	ldi	r27, 0x00	; 0
     a9e:	04 c0       	rjmp	.+8      	; 0xaa8 <__clzsi2+0x64>
     aa0:	80 e1       	ldi	r24, 0x10	; 16
     aa2:	90 e0       	ldi	r25, 0x00	; 0
     aa4:	a0 e0       	ldi	r26, 0x00	; 0
     aa6:	b0 e0       	ldi	r27, 0x00	; 0
     aa8:	20 e2       	ldi	r18, 0x20	; 32
     aaa:	30 e0       	ldi	r19, 0x00	; 0
     aac:	40 e0       	ldi	r20, 0x00	; 0
     aae:	50 e0       	ldi	r21, 0x00	; 0
     ab0:	28 1b       	sub	r18, r24
     ab2:	39 0b       	sbc	r19, r25
     ab4:	4a 0b       	sbc	r20, r26
     ab6:	5b 0b       	sbc	r21, r27
     ab8:	04 c0       	rjmp	.+8      	; 0xac2 <__clzsi2+0x7e>
     aba:	16 95       	lsr	r17
     abc:	07 95       	ror	r16
     abe:	f7 94       	ror	r15
     ac0:	e7 94       	ror	r14
     ac2:	8a 95       	dec	r24
     ac4:	d2 f7       	brpl	.-12     	; 0xaba <__clzsi2+0x76>
     ac6:	f7 01       	movw	r30, r14
     ac8:	ee 58       	subi	r30, 0x8E	; 142
     aca:	ff 4f       	sbci	r31, 0xFF	; 255
     acc:	80 81       	ld	r24, Z
     ace:	28 1b       	sub	r18, r24
     ad0:	31 09       	sbc	r19, r1
     ad2:	41 09       	sbc	r20, r1
     ad4:	51 09       	sbc	r21, r1
     ad6:	c9 01       	movw	r24, r18
     ad8:	1f 91       	pop	r17
     ada:	0f 91       	pop	r16
     adc:	ff 90       	pop	r15
     ade:	ef 90       	pop	r14
     ae0:	08 95       	ret

00000ae2 <__pack_f>:
     ae2:	df 92       	push	r13
     ae4:	ef 92       	push	r14
     ae6:	ff 92       	push	r15
     ae8:	0f 93       	push	r16
     aea:	1f 93       	push	r17
     aec:	fc 01       	movw	r30, r24
     aee:	e4 80       	ldd	r14, Z+4	; 0x04
     af0:	f5 80       	ldd	r15, Z+5	; 0x05
     af2:	06 81       	ldd	r16, Z+6	; 0x06
     af4:	17 81       	ldd	r17, Z+7	; 0x07
     af6:	d1 80       	ldd	r13, Z+1	; 0x01
     af8:	80 81       	ld	r24, Z
     afa:	82 30       	cpi	r24, 0x02	; 2
     afc:	48 f4       	brcc	.+18     	; 0xb10 <__pack_f+0x2e>
     afe:	80 e0       	ldi	r24, 0x00	; 0
     b00:	90 e0       	ldi	r25, 0x00	; 0
     b02:	a0 e1       	ldi	r26, 0x10	; 16
     b04:	b0 e0       	ldi	r27, 0x00	; 0
     b06:	e8 2a       	or	r14, r24
     b08:	f9 2a       	or	r15, r25
     b0a:	0a 2b       	or	r16, r26
     b0c:	1b 2b       	or	r17, r27
     b0e:	a5 c0       	rjmp	.+330    	; 0xc5a <__pack_f+0x178>
     b10:	84 30       	cpi	r24, 0x04	; 4
     b12:	09 f4       	brne	.+2      	; 0xb16 <__pack_f+0x34>
     b14:	9f c0       	rjmp	.+318    	; 0xc54 <__pack_f+0x172>
     b16:	82 30       	cpi	r24, 0x02	; 2
     b18:	21 f4       	brne	.+8      	; 0xb22 <__pack_f+0x40>
     b1a:	ee 24       	eor	r14, r14
     b1c:	ff 24       	eor	r15, r15
     b1e:	87 01       	movw	r16, r14
     b20:	05 c0       	rjmp	.+10     	; 0xb2c <__pack_f+0x4a>
     b22:	e1 14       	cp	r14, r1
     b24:	f1 04       	cpc	r15, r1
     b26:	01 05       	cpc	r16, r1
     b28:	11 05       	cpc	r17, r1
     b2a:	19 f4       	brne	.+6      	; 0xb32 <__pack_f+0x50>
     b2c:	e0 e0       	ldi	r30, 0x00	; 0
     b2e:	f0 e0       	ldi	r31, 0x00	; 0
     b30:	96 c0       	rjmp	.+300    	; 0xc5e <__pack_f+0x17c>
     b32:	62 81       	ldd	r22, Z+2	; 0x02
     b34:	73 81       	ldd	r23, Z+3	; 0x03
     b36:	9f ef       	ldi	r25, 0xFF	; 255
     b38:	62 38       	cpi	r22, 0x82	; 130
     b3a:	79 07       	cpc	r23, r25
     b3c:	0c f0       	brlt	.+2      	; 0xb40 <__pack_f+0x5e>
     b3e:	5b c0       	rjmp	.+182    	; 0xbf6 <__pack_f+0x114>
     b40:	22 e8       	ldi	r18, 0x82	; 130
     b42:	3f ef       	ldi	r19, 0xFF	; 255
     b44:	26 1b       	sub	r18, r22
     b46:	37 0b       	sbc	r19, r23
     b48:	2a 31       	cpi	r18, 0x1A	; 26
     b4a:	31 05       	cpc	r19, r1
     b4c:	2c f0       	brlt	.+10     	; 0xb58 <__pack_f+0x76>
     b4e:	20 e0       	ldi	r18, 0x00	; 0
     b50:	30 e0       	ldi	r19, 0x00	; 0
     b52:	40 e0       	ldi	r20, 0x00	; 0
     b54:	50 e0       	ldi	r21, 0x00	; 0
     b56:	2a c0       	rjmp	.+84     	; 0xbac <__pack_f+0xca>
     b58:	b8 01       	movw	r22, r16
     b5a:	a7 01       	movw	r20, r14
     b5c:	02 2e       	mov	r0, r18
     b5e:	04 c0       	rjmp	.+8      	; 0xb68 <__pack_f+0x86>
     b60:	76 95       	lsr	r23
     b62:	67 95       	ror	r22
     b64:	57 95       	ror	r21
     b66:	47 95       	ror	r20
     b68:	0a 94       	dec	r0
     b6a:	d2 f7       	brpl	.-12     	; 0xb60 <__pack_f+0x7e>
     b6c:	81 e0       	ldi	r24, 0x01	; 1
     b6e:	90 e0       	ldi	r25, 0x00	; 0
     b70:	a0 e0       	ldi	r26, 0x00	; 0
     b72:	b0 e0       	ldi	r27, 0x00	; 0
     b74:	04 c0       	rjmp	.+8      	; 0xb7e <__pack_f+0x9c>
     b76:	88 0f       	add	r24, r24
     b78:	99 1f       	adc	r25, r25
     b7a:	aa 1f       	adc	r26, r26
     b7c:	bb 1f       	adc	r27, r27
     b7e:	2a 95       	dec	r18
     b80:	d2 f7       	brpl	.-12     	; 0xb76 <__pack_f+0x94>
     b82:	01 97       	sbiw	r24, 0x01	; 1
     b84:	a1 09       	sbc	r26, r1
     b86:	b1 09       	sbc	r27, r1
     b88:	8e 21       	and	r24, r14
     b8a:	9f 21       	and	r25, r15
     b8c:	a0 23       	and	r26, r16
     b8e:	b1 23       	and	r27, r17
     b90:	00 97       	sbiw	r24, 0x00	; 0
     b92:	a1 05       	cpc	r26, r1
     b94:	b1 05       	cpc	r27, r1
     b96:	21 f0       	breq	.+8      	; 0xba0 <__pack_f+0xbe>
     b98:	81 e0       	ldi	r24, 0x01	; 1
     b9a:	90 e0       	ldi	r25, 0x00	; 0
     b9c:	a0 e0       	ldi	r26, 0x00	; 0
     b9e:	b0 e0       	ldi	r27, 0x00	; 0
     ba0:	9a 01       	movw	r18, r20
     ba2:	ab 01       	movw	r20, r22
     ba4:	28 2b       	or	r18, r24
     ba6:	39 2b       	or	r19, r25
     ba8:	4a 2b       	or	r20, r26
     baa:	5b 2b       	or	r21, r27
     bac:	da 01       	movw	r26, r20
     bae:	c9 01       	movw	r24, r18
     bb0:	8f 77       	andi	r24, 0x7F	; 127
     bb2:	90 70       	andi	r25, 0x00	; 0
     bb4:	a0 70       	andi	r26, 0x00	; 0
     bb6:	b0 70       	andi	r27, 0x00	; 0
     bb8:	80 34       	cpi	r24, 0x40	; 64
     bba:	91 05       	cpc	r25, r1
     bbc:	a1 05       	cpc	r26, r1
     bbe:	b1 05       	cpc	r27, r1
     bc0:	39 f4       	brne	.+14     	; 0xbd0 <__pack_f+0xee>
     bc2:	27 ff       	sbrs	r18, 7
     bc4:	09 c0       	rjmp	.+18     	; 0xbd8 <__pack_f+0xf6>
     bc6:	20 5c       	subi	r18, 0xC0	; 192
     bc8:	3f 4f       	sbci	r19, 0xFF	; 255
     bca:	4f 4f       	sbci	r20, 0xFF	; 255
     bcc:	5f 4f       	sbci	r21, 0xFF	; 255
     bce:	04 c0       	rjmp	.+8      	; 0xbd8 <__pack_f+0xf6>
     bd0:	21 5c       	subi	r18, 0xC1	; 193
     bd2:	3f 4f       	sbci	r19, 0xFF	; 255
     bd4:	4f 4f       	sbci	r20, 0xFF	; 255
     bd6:	5f 4f       	sbci	r21, 0xFF	; 255
     bd8:	e0 e0       	ldi	r30, 0x00	; 0
     bda:	f0 e0       	ldi	r31, 0x00	; 0
     bdc:	20 30       	cpi	r18, 0x00	; 0
     bde:	a0 e0       	ldi	r26, 0x00	; 0
     be0:	3a 07       	cpc	r19, r26
     be2:	a0 e0       	ldi	r26, 0x00	; 0
     be4:	4a 07       	cpc	r20, r26
     be6:	a0 e4       	ldi	r26, 0x40	; 64
     be8:	5a 07       	cpc	r21, r26
     bea:	10 f0       	brcs	.+4      	; 0xbf0 <__pack_f+0x10e>
     bec:	e1 e0       	ldi	r30, 0x01	; 1
     bee:	f0 e0       	ldi	r31, 0x00	; 0
     bf0:	79 01       	movw	r14, r18
     bf2:	8a 01       	movw	r16, r20
     bf4:	27 c0       	rjmp	.+78     	; 0xc44 <__pack_f+0x162>
     bf6:	60 38       	cpi	r22, 0x80	; 128
     bf8:	71 05       	cpc	r23, r1
     bfa:	64 f5       	brge	.+88     	; 0xc54 <__pack_f+0x172>
     bfc:	fb 01       	movw	r30, r22
     bfe:	e1 58       	subi	r30, 0x81	; 129
     c00:	ff 4f       	sbci	r31, 0xFF	; 255
     c02:	d8 01       	movw	r26, r16
     c04:	c7 01       	movw	r24, r14
     c06:	8f 77       	andi	r24, 0x7F	; 127
     c08:	90 70       	andi	r25, 0x00	; 0
     c0a:	a0 70       	andi	r26, 0x00	; 0
     c0c:	b0 70       	andi	r27, 0x00	; 0
     c0e:	80 34       	cpi	r24, 0x40	; 64
     c10:	91 05       	cpc	r25, r1
     c12:	a1 05       	cpc	r26, r1
     c14:	b1 05       	cpc	r27, r1
     c16:	39 f4       	brne	.+14     	; 0xc26 <__pack_f+0x144>
     c18:	e7 fe       	sbrs	r14, 7
     c1a:	0d c0       	rjmp	.+26     	; 0xc36 <__pack_f+0x154>
     c1c:	80 e4       	ldi	r24, 0x40	; 64
     c1e:	90 e0       	ldi	r25, 0x00	; 0
     c20:	a0 e0       	ldi	r26, 0x00	; 0
     c22:	b0 e0       	ldi	r27, 0x00	; 0
     c24:	04 c0       	rjmp	.+8      	; 0xc2e <__pack_f+0x14c>
     c26:	8f e3       	ldi	r24, 0x3F	; 63
     c28:	90 e0       	ldi	r25, 0x00	; 0
     c2a:	a0 e0       	ldi	r26, 0x00	; 0
     c2c:	b0 e0       	ldi	r27, 0x00	; 0
     c2e:	e8 0e       	add	r14, r24
     c30:	f9 1e       	adc	r15, r25
     c32:	0a 1f       	adc	r16, r26
     c34:	1b 1f       	adc	r17, r27
     c36:	17 ff       	sbrs	r17, 7
     c38:	05 c0       	rjmp	.+10     	; 0xc44 <__pack_f+0x162>
     c3a:	16 95       	lsr	r17
     c3c:	07 95       	ror	r16
     c3e:	f7 94       	ror	r15
     c40:	e7 94       	ror	r14
     c42:	31 96       	adiw	r30, 0x01	; 1
     c44:	87 e0       	ldi	r24, 0x07	; 7
     c46:	16 95       	lsr	r17
     c48:	07 95       	ror	r16
     c4a:	f7 94       	ror	r15
     c4c:	e7 94       	ror	r14
     c4e:	8a 95       	dec	r24
     c50:	d1 f7       	brne	.-12     	; 0xc46 <__pack_f+0x164>
     c52:	05 c0       	rjmp	.+10     	; 0xc5e <__pack_f+0x17c>
     c54:	ee 24       	eor	r14, r14
     c56:	ff 24       	eor	r15, r15
     c58:	87 01       	movw	r16, r14
     c5a:	ef ef       	ldi	r30, 0xFF	; 255
     c5c:	f0 e0       	ldi	r31, 0x00	; 0
     c5e:	6e 2f       	mov	r22, r30
     c60:	67 95       	ror	r22
     c62:	66 27       	eor	r22, r22
     c64:	67 95       	ror	r22
     c66:	90 2f       	mov	r25, r16
     c68:	9f 77       	andi	r25, 0x7F	; 127
     c6a:	d7 94       	ror	r13
     c6c:	dd 24       	eor	r13, r13
     c6e:	d7 94       	ror	r13
     c70:	8e 2f       	mov	r24, r30
     c72:	86 95       	lsr	r24
     c74:	49 2f       	mov	r20, r25
     c76:	46 2b       	or	r20, r22
     c78:	58 2f       	mov	r21, r24
     c7a:	5d 29       	or	r21, r13
     c7c:	b7 01       	movw	r22, r14
     c7e:	ca 01       	movw	r24, r20
     c80:	1f 91       	pop	r17
     c82:	0f 91       	pop	r16
     c84:	ff 90       	pop	r15
     c86:	ef 90       	pop	r14
     c88:	df 90       	pop	r13
     c8a:	08 95       	ret

00000c8c <__unpack_f>:
     c8c:	fc 01       	movw	r30, r24
     c8e:	db 01       	movw	r26, r22
     c90:	40 81       	ld	r20, Z
     c92:	51 81       	ldd	r21, Z+1	; 0x01
     c94:	22 81       	ldd	r18, Z+2	; 0x02
     c96:	62 2f       	mov	r22, r18
     c98:	6f 77       	andi	r22, 0x7F	; 127
     c9a:	70 e0       	ldi	r23, 0x00	; 0
     c9c:	22 1f       	adc	r18, r18
     c9e:	22 27       	eor	r18, r18
     ca0:	22 1f       	adc	r18, r18
     ca2:	93 81       	ldd	r25, Z+3	; 0x03
     ca4:	89 2f       	mov	r24, r25
     ca6:	88 0f       	add	r24, r24
     ca8:	82 2b       	or	r24, r18
     caa:	28 2f       	mov	r18, r24
     cac:	30 e0       	ldi	r19, 0x00	; 0
     cae:	99 1f       	adc	r25, r25
     cb0:	99 27       	eor	r25, r25
     cb2:	99 1f       	adc	r25, r25
     cb4:	11 96       	adiw	r26, 0x01	; 1
     cb6:	9c 93       	st	X, r25
     cb8:	11 97       	sbiw	r26, 0x01	; 1
     cba:	21 15       	cp	r18, r1
     cbc:	31 05       	cpc	r19, r1
     cbe:	a9 f5       	brne	.+106    	; 0xd2a <__unpack_f+0x9e>
     cc0:	41 15       	cp	r20, r1
     cc2:	51 05       	cpc	r21, r1
     cc4:	61 05       	cpc	r22, r1
     cc6:	71 05       	cpc	r23, r1
     cc8:	11 f4       	brne	.+4      	; 0xcce <__unpack_f+0x42>
     cca:	82 e0       	ldi	r24, 0x02	; 2
     ccc:	37 c0       	rjmp	.+110    	; 0xd3c <__unpack_f+0xb0>
     cce:	82 e8       	ldi	r24, 0x82	; 130
     cd0:	9f ef       	ldi	r25, 0xFF	; 255
     cd2:	13 96       	adiw	r26, 0x03	; 3
     cd4:	9c 93       	st	X, r25
     cd6:	8e 93       	st	-X, r24
     cd8:	12 97       	sbiw	r26, 0x02	; 2
     cda:	9a 01       	movw	r18, r20
     cdc:	ab 01       	movw	r20, r22
     cde:	67 e0       	ldi	r22, 0x07	; 7
     ce0:	22 0f       	add	r18, r18
     ce2:	33 1f       	adc	r19, r19
     ce4:	44 1f       	adc	r20, r20
     ce6:	55 1f       	adc	r21, r21
     ce8:	6a 95       	dec	r22
     cea:	d1 f7       	brne	.-12     	; 0xce0 <__unpack_f+0x54>
     cec:	83 e0       	ldi	r24, 0x03	; 3
     cee:	8c 93       	st	X, r24
     cf0:	0d c0       	rjmp	.+26     	; 0xd0c <__unpack_f+0x80>
     cf2:	22 0f       	add	r18, r18
     cf4:	33 1f       	adc	r19, r19
     cf6:	44 1f       	adc	r20, r20
     cf8:	55 1f       	adc	r21, r21
     cfa:	12 96       	adiw	r26, 0x02	; 2
     cfc:	8d 91       	ld	r24, X+
     cfe:	9c 91       	ld	r25, X
     d00:	13 97       	sbiw	r26, 0x03	; 3
     d02:	01 97       	sbiw	r24, 0x01	; 1
     d04:	13 96       	adiw	r26, 0x03	; 3
     d06:	9c 93       	st	X, r25
     d08:	8e 93       	st	-X, r24
     d0a:	12 97       	sbiw	r26, 0x02	; 2
     d0c:	20 30       	cpi	r18, 0x00	; 0
     d0e:	80 e0       	ldi	r24, 0x00	; 0
     d10:	38 07       	cpc	r19, r24
     d12:	80 e0       	ldi	r24, 0x00	; 0
     d14:	48 07       	cpc	r20, r24
     d16:	80 e4       	ldi	r24, 0x40	; 64
     d18:	58 07       	cpc	r21, r24
     d1a:	58 f3       	brcs	.-42     	; 0xcf2 <__unpack_f+0x66>
     d1c:	14 96       	adiw	r26, 0x04	; 4
     d1e:	2d 93       	st	X+, r18
     d20:	3d 93       	st	X+, r19
     d22:	4d 93       	st	X+, r20
     d24:	5c 93       	st	X, r21
     d26:	17 97       	sbiw	r26, 0x07	; 7
     d28:	08 95       	ret
     d2a:	2f 3f       	cpi	r18, 0xFF	; 255
     d2c:	31 05       	cpc	r19, r1
     d2e:	79 f4       	brne	.+30     	; 0xd4e <__unpack_f+0xc2>
     d30:	41 15       	cp	r20, r1
     d32:	51 05       	cpc	r21, r1
     d34:	61 05       	cpc	r22, r1
     d36:	71 05       	cpc	r23, r1
     d38:	19 f4       	brne	.+6      	; 0xd40 <__unpack_f+0xb4>
     d3a:	84 e0       	ldi	r24, 0x04	; 4
     d3c:	8c 93       	st	X, r24
     d3e:	08 95       	ret
     d40:	64 ff       	sbrs	r22, 4
     d42:	03 c0       	rjmp	.+6      	; 0xd4a <__unpack_f+0xbe>
     d44:	81 e0       	ldi	r24, 0x01	; 1
     d46:	8c 93       	st	X, r24
     d48:	12 c0       	rjmp	.+36     	; 0xd6e <__unpack_f+0xe2>
     d4a:	1c 92       	st	X, r1
     d4c:	10 c0       	rjmp	.+32     	; 0xd6e <__unpack_f+0xe2>
     d4e:	2f 57       	subi	r18, 0x7F	; 127
     d50:	30 40       	sbci	r19, 0x00	; 0
     d52:	13 96       	adiw	r26, 0x03	; 3
     d54:	3c 93       	st	X, r19
     d56:	2e 93       	st	-X, r18
     d58:	12 97       	sbiw	r26, 0x02	; 2
     d5a:	83 e0       	ldi	r24, 0x03	; 3
     d5c:	8c 93       	st	X, r24
     d5e:	87 e0       	ldi	r24, 0x07	; 7
     d60:	44 0f       	add	r20, r20
     d62:	55 1f       	adc	r21, r21
     d64:	66 1f       	adc	r22, r22
     d66:	77 1f       	adc	r23, r23
     d68:	8a 95       	dec	r24
     d6a:	d1 f7       	brne	.-12     	; 0xd60 <__unpack_f+0xd4>
     d6c:	70 64       	ori	r23, 0x40	; 64
     d6e:	14 96       	adiw	r26, 0x04	; 4
     d70:	4d 93       	st	X+, r20
     d72:	5d 93       	st	X+, r21
     d74:	6d 93       	st	X+, r22
     d76:	7c 93       	st	X, r23
     d78:	17 97       	sbiw	r26, 0x07	; 7
     d7a:	08 95       	ret

00000d7c <__fpcmp_parts_f>:
     d7c:	1f 93       	push	r17
     d7e:	dc 01       	movw	r26, r24
     d80:	fb 01       	movw	r30, r22
     d82:	9c 91       	ld	r25, X
     d84:	92 30       	cpi	r25, 0x02	; 2
     d86:	08 f4       	brcc	.+2      	; 0xd8a <__fpcmp_parts_f+0xe>
     d88:	47 c0       	rjmp	.+142    	; 0xe18 <__fpcmp_parts_f+0x9c>
     d8a:	80 81       	ld	r24, Z
     d8c:	82 30       	cpi	r24, 0x02	; 2
     d8e:	08 f4       	brcc	.+2      	; 0xd92 <__fpcmp_parts_f+0x16>
     d90:	43 c0       	rjmp	.+134    	; 0xe18 <__fpcmp_parts_f+0x9c>
     d92:	94 30       	cpi	r25, 0x04	; 4
     d94:	51 f4       	brne	.+20     	; 0xdaa <__fpcmp_parts_f+0x2e>
     d96:	11 96       	adiw	r26, 0x01	; 1
     d98:	1c 91       	ld	r17, X
     d9a:	84 30       	cpi	r24, 0x04	; 4
     d9c:	99 f5       	brne	.+102    	; 0xe04 <__fpcmp_parts_f+0x88>
     d9e:	81 81       	ldd	r24, Z+1	; 0x01
     da0:	68 2f       	mov	r22, r24
     da2:	70 e0       	ldi	r23, 0x00	; 0
     da4:	61 1b       	sub	r22, r17
     da6:	71 09       	sbc	r23, r1
     da8:	3f c0       	rjmp	.+126    	; 0xe28 <__fpcmp_parts_f+0xac>
     daa:	84 30       	cpi	r24, 0x04	; 4
     dac:	21 f0       	breq	.+8      	; 0xdb6 <__fpcmp_parts_f+0x3a>
     dae:	92 30       	cpi	r25, 0x02	; 2
     db0:	31 f4       	brne	.+12     	; 0xdbe <__fpcmp_parts_f+0x42>
     db2:	82 30       	cpi	r24, 0x02	; 2
     db4:	b9 f1       	breq	.+110    	; 0xe24 <__fpcmp_parts_f+0xa8>
     db6:	81 81       	ldd	r24, Z+1	; 0x01
     db8:	88 23       	and	r24, r24
     dba:	89 f1       	breq	.+98     	; 0xe1e <__fpcmp_parts_f+0xa2>
     dbc:	2d c0       	rjmp	.+90     	; 0xe18 <__fpcmp_parts_f+0x9c>
     dbe:	11 96       	adiw	r26, 0x01	; 1
     dc0:	1c 91       	ld	r17, X
     dc2:	11 97       	sbiw	r26, 0x01	; 1
     dc4:	82 30       	cpi	r24, 0x02	; 2
     dc6:	f1 f0       	breq	.+60     	; 0xe04 <__fpcmp_parts_f+0x88>
     dc8:	81 81       	ldd	r24, Z+1	; 0x01
     dca:	18 17       	cp	r17, r24
     dcc:	d9 f4       	brne	.+54     	; 0xe04 <__fpcmp_parts_f+0x88>
     dce:	12 96       	adiw	r26, 0x02	; 2
     dd0:	2d 91       	ld	r18, X+
     dd2:	3c 91       	ld	r19, X
     dd4:	13 97       	sbiw	r26, 0x03	; 3
     dd6:	82 81       	ldd	r24, Z+2	; 0x02
     dd8:	93 81       	ldd	r25, Z+3	; 0x03
     dda:	82 17       	cp	r24, r18
     ddc:	93 07       	cpc	r25, r19
     dde:	94 f0       	brlt	.+36     	; 0xe04 <__fpcmp_parts_f+0x88>
     de0:	28 17       	cp	r18, r24
     de2:	39 07       	cpc	r19, r25
     de4:	bc f0       	brlt	.+46     	; 0xe14 <__fpcmp_parts_f+0x98>
     de6:	14 96       	adiw	r26, 0x04	; 4
     de8:	8d 91       	ld	r24, X+
     dea:	9d 91       	ld	r25, X+
     dec:	0d 90       	ld	r0, X+
     dee:	bc 91       	ld	r27, X
     df0:	a0 2d       	mov	r26, r0
     df2:	24 81       	ldd	r18, Z+4	; 0x04
     df4:	35 81       	ldd	r19, Z+5	; 0x05
     df6:	46 81       	ldd	r20, Z+6	; 0x06
     df8:	57 81       	ldd	r21, Z+7	; 0x07
     dfa:	28 17       	cp	r18, r24
     dfc:	39 07       	cpc	r19, r25
     dfe:	4a 07       	cpc	r20, r26
     e00:	5b 07       	cpc	r21, r27
     e02:	18 f4       	brcc	.+6      	; 0xe0a <__fpcmp_parts_f+0x8e>
     e04:	11 23       	and	r17, r17
     e06:	41 f0       	breq	.+16     	; 0xe18 <__fpcmp_parts_f+0x9c>
     e08:	0a c0       	rjmp	.+20     	; 0xe1e <__fpcmp_parts_f+0xa2>
     e0a:	82 17       	cp	r24, r18
     e0c:	93 07       	cpc	r25, r19
     e0e:	a4 07       	cpc	r26, r20
     e10:	b5 07       	cpc	r27, r21
     e12:	40 f4       	brcc	.+16     	; 0xe24 <__fpcmp_parts_f+0xa8>
     e14:	11 23       	and	r17, r17
     e16:	19 f0       	breq	.+6      	; 0xe1e <__fpcmp_parts_f+0xa2>
     e18:	61 e0       	ldi	r22, 0x01	; 1
     e1a:	70 e0       	ldi	r23, 0x00	; 0
     e1c:	05 c0       	rjmp	.+10     	; 0xe28 <__fpcmp_parts_f+0xac>
     e1e:	6f ef       	ldi	r22, 0xFF	; 255
     e20:	7f ef       	ldi	r23, 0xFF	; 255
     e22:	02 c0       	rjmp	.+4      	; 0xe28 <__fpcmp_parts_f+0xac>
     e24:	60 e0       	ldi	r22, 0x00	; 0
     e26:	70 e0       	ldi	r23, 0x00	; 0
     e28:	cb 01       	movw	r24, r22
     e2a:	1f 91       	pop	r17
     e2c:	08 95       	ret

00000e2e <__vector_16>:
#include "Adc_cfg.h"
#include "GlobalInterrupt.h"

void (*Adc_Callback) (u16 res);

ISR(VECTOR_ADC) {
     e2e:	1f 92       	push	r1
     e30:	0f 92       	push	r0
     e32:	0f b6       	in	r0, 0x3f	; 63
     e34:	0f 92       	push	r0
     e36:	11 24       	eor	r1, r1
     e38:	2f 93       	push	r18
     e3a:	3f 93       	push	r19
     e3c:	4f 93       	push	r20
     e3e:	5f 93       	push	r21
     e40:	6f 93       	push	r22
     e42:	7f 93       	push	r23
     e44:	8f 93       	push	r24
     e46:	9f 93       	push	r25
     e48:	af 93       	push	r26
     e4a:	bf 93       	push	r27
     e4c:	ef 93       	push	r30
     e4e:	ff 93       	push	r31
     e50:	df 93       	push	r29
     e52:	cf 93       	push	r28
     e54:	cd b7       	in	r28, 0x3d	; 61
     e56:	de b7       	in	r29, 0x3e	; 62
    Adc_Callback((ADC_DATA_REGISTER & 0b0000001111111111));
     e58:	20 91 72 01 	lds	r18, 0x0172
     e5c:	30 91 73 01 	lds	r19, 0x0173
     e60:	e4 e2       	ldi	r30, 0x24	; 36
     e62:	f0 e0       	ldi	r31, 0x00	; 0
     e64:	80 81       	ld	r24, Z
     e66:	91 81       	ldd	r25, Z+1	; 0x01
     e68:	93 70       	andi	r25, 0x03	; 3
     e6a:	f9 01       	movw	r30, r18
     e6c:	09 95       	icall
}
     e6e:	cf 91       	pop	r28
     e70:	df 91       	pop	r29
     e72:	ff 91       	pop	r31
     e74:	ef 91       	pop	r30
     e76:	bf 91       	pop	r27
     e78:	af 91       	pop	r26
     e7a:	9f 91       	pop	r25
     e7c:	8f 91       	pop	r24
     e7e:	7f 91       	pop	r23
     e80:	6f 91       	pop	r22
     e82:	5f 91       	pop	r21
     e84:	4f 91       	pop	r20
     e86:	3f 91       	pop	r19
     e88:	2f 91       	pop	r18
     e8a:	0f 90       	pop	r0
     e8c:	0f be       	out	0x3f, r0	; 63
     e8e:	0f 90       	pop	r0
     e90:	1f 90       	pop	r1
     e92:	18 95       	reti

00000e94 <Adc_Init>:

void Adc_Init(void) {
     e94:	df 93       	push	r29
     e96:	cf 93       	push	r28
     e98:	cd b7       	in	r28, 0x3d	; 61
     e9a:	de b7       	in	r29, 0x3e	; 62
    /*Reference Selection Bits*/
#if (ADC_REF_SELECTION == ADC_REF_AREF)
    CLR_BIT(ADMUX, ADMUX_REFS1);
     e9c:	a7 e2       	ldi	r26, 0x27	; 39
     e9e:	b0 e0       	ldi	r27, 0x00	; 0
     ea0:	e7 e2       	ldi	r30, 0x27	; 39
     ea2:	f0 e0       	ldi	r31, 0x00	; 0
     ea4:	80 81       	ld	r24, Z
     ea6:	8f 77       	andi	r24, 0x7F	; 127
     ea8:	8c 93       	st	X, r24
    CLR_BIT(ADMUX, ADMUX_REFS0);
     eaa:	a7 e2       	ldi	r26, 0x27	; 39
     eac:	b0 e0       	ldi	r27, 0x00	; 0
     eae:	e7 e2       	ldi	r30, 0x27	; 39
     eb0:	f0 e0       	ldi	r31, 0x00	; 0
     eb2:	80 81       	ld	r24, Z
     eb4:	8f 7b       	andi	r24, 0xBF	; 191
     eb6:	8c 93       	st	X, r24
#else
    #error "Error Ref Selection Choise"
#endif

    /* No Left Adjust */
    CLR_BIT(ADMUX, ADMUX_ADLAR);
     eb8:	a7 e2       	ldi	r26, 0x27	; 39
     eba:	b0 e0       	ldi	r27, 0x00	; 0
     ebc:	e7 e2       	ldi	r30, 0x27	; 39
     ebe:	f0 e0       	ldi	r31, 0x00	; 0
     ec0:	80 81       	ld	r24, Z
     ec2:	8f 7d       	andi	r24, 0xDF	; 223
     ec4:	8c 93       	st	X, r24

    /* ADC Enable */
    SET_BIT(ADCSRA, ADCSRA_ADEN);
     ec6:	a6 e2       	ldi	r26, 0x26	; 38
     ec8:	b0 e0       	ldi	r27, 0x00	; 0
     eca:	e6 e2       	ldi	r30, 0x26	; 38
     ecc:	f0 e0       	ldi	r31, 0x00	; 0
     ece:	80 81       	ld	r24, Z
     ed0:	80 68       	ori	r24, 0x80	; 128
     ed2:	8c 93       	st	X, r24

    /* ADC Interrupt Enable */
#if (ADC_INT_STATE == ADC_INT_DISABLE)
    CLR_BIT(ADCSRA, ADCSRA_ADIE);
#elif (ADC_INT_STATE == ADC_INT_ENABLE)
    SET_BIT(ADCSRA, ADCSRA_ADIE);
     ed4:	a6 e2       	ldi	r26, 0x26	; 38
     ed6:	b0 e0       	ldi	r27, 0x00	; 0
     ed8:	e6 e2       	ldi	r30, 0x26	; 38
     eda:	f0 e0       	ldi	r31, 0x00	; 0
     edc:	80 81       	ld	r24, Z
     ede:	88 60       	ori	r24, 0x08	; 8
     ee0:	8c 93       	st	X, r24
    GlobalInterrupt_Enable();
     ee2:	0e 94 96 10 	call	0x212c	; 0x212c <GlobalInterrupt_Enable>
#endif

    /* ADC Prescaler Select */

#if (ADC_PRESCALER == 128)
    SET_BIT(ADCSRA, ADCSRA_ADPS0);
     ee6:	a6 e2       	ldi	r26, 0x26	; 38
     ee8:	b0 e0       	ldi	r27, 0x00	; 0
     eea:	e6 e2       	ldi	r30, 0x26	; 38
     eec:	f0 e0       	ldi	r31, 0x00	; 0
     eee:	80 81       	ld	r24, Z
     ef0:	81 60       	ori	r24, 0x01	; 1
     ef2:	8c 93       	st	X, r24
    SET_BIT(ADCSRA, ADCSRA_ADPS1);
     ef4:	a6 e2       	ldi	r26, 0x26	; 38
     ef6:	b0 e0       	ldi	r27, 0x00	; 0
     ef8:	e6 e2       	ldi	r30, 0x26	; 38
     efa:	f0 e0       	ldi	r31, 0x00	; 0
     efc:	80 81       	ld	r24, Z
     efe:	82 60       	ori	r24, 0x02	; 2
     f00:	8c 93       	st	X, r24
    SET_BIT(ADCSRA, ADCSRA_ADPS2);
     f02:	a6 e2       	ldi	r26, 0x26	; 38
     f04:	b0 e0       	ldi	r27, 0x00	; 0
     f06:	e6 e2       	ldi	r30, 0x26	; 38
     f08:	f0 e0       	ldi	r31, 0x00	; 0
     f0a:	80 81       	ld	r24, Z
     f0c:	84 60       	ori	r24, 0x04	; 4
     f0e:	8c 93       	st	X, r24
    CLR_BIT(ADCSRA, ADCSRA_ADPS2);
    // TODO
#else
    #error "Error Prescaler Choise"
#endif
}
     f10:	cf 91       	pop	r28
     f12:	df 91       	pop	r29
     f14:	08 95       	ret

00000f16 <Adc_StartConversion>:

void Adc_StartConversion(Adc_ChannelType channel) {
     f16:	df 93       	push	r29
     f18:	cf 93       	push	r28
     f1a:	0f 92       	push	r0
     f1c:	cd b7       	in	r28, 0x3d	; 61
     f1e:	de b7       	in	r29, 0x3e	; 62
     f20:	89 83       	std	Y+1, r24	; 0x01
    ADMUX &= 0b11100000;
     f22:	a7 e2       	ldi	r26, 0x27	; 39
     f24:	b0 e0       	ldi	r27, 0x00	; 0
     f26:	e7 e2       	ldi	r30, 0x27	; 39
     f28:	f0 e0       	ldi	r31, 0x00	; 0
     f2a:	80 81       	ld	r24, Z
     f2c:	80 7e       	andi	r24, 0xE0	; 224
     f2e:	8c 93       	st	X, r24
    ADMUX |= channel;
     f30:	a7 e2       	ldi	r26, 0x27	; 39
     f32:	b0 e0       	ldi	r27, 0x00	; 0
     f34:	e7 e2       	ldi	r30, 0x27	; 39
     f36:	f0 e0       	ldi	r31, 0x00	; 0
     f38:	90 81       	ld	r25, Z
     f3a:	89 81       	ldd	r24, Y+1	; 0x01
     f3c:	89 2b       	or	r24, r25
     f3e:	8c 93       	st	X, r24
    SET_BIT(ADCSRA, ADCSRA_ADSC);
     f40:	a6 e2       	ldi	r26, 0x26	; 38
     f42:	b0 e0       	ldi	r27, 0x00	; 0
     f44:	e6 e2       	ldi	r30, 0x26	; 38
     f46:	f0 e0       	ldi	r31, 0x00	; 0
     f48:	80 81       	ld	r24, Z
     f4a:	80 64       	ori	r24, 0x40	; 64
     f4c:	8c 93       	st	X, r24
}
     f4e:	0f 90       	pop	r0
     f50:	cf 91       	pop	r28
     f52:	df 91       	pop	r29
     f54:	08 95       	ret

00000f56 <Adc_Enable>:

void Adc_Enable(void) {
     f56:	df 93       	push	r29
     f58:	cf 93       	push	r28
     f5a:	cd b7       	in	r28, 0x3d	; 61
     f5c:	de b7       	in	r29, 0x3e	; 62
    SET_BIT(ADCSRA, ADCSRA_ADEN);
     f5e:	a6 e2       	ldi	r26, 0x26	; 38
     f60:	b0 e0       	ldi	r27, 0x00	; 0
     f62:	e6 e2       	ldi	r30, 0x26	; 38
     f64:	f0 e0       	ldi	r31, 0x00	; 0
     f66:	80 81       	ld	r24, Z
     f68:	80 68       	ori	r24, 0x80	; 128
     f6a:	8c 93       	st	X, r24
    // TODO
}
     f6c:	cf 91       	pop	r28
     f6e:	df 91       	pop	r29
     f70:	08 95       	ret

00000f72 <Adc_Disable>:

void Adc_Disable(void) {
     f72:	df 93       	push	r29
     f74:	cf 93       	push	r28
     f76:	cd b7       	in	r28, 0x3d	; 61
     f78:	de b7       	in	r29, 0x3e	; 62
    CLR_BIT(ADCSRA, ADCSRA_ADEN);
     f7a:	a6 e2       	ldi	r26, 0x26	; 38
     f7c:	b0 e0       	ldi	r27, 0x00	; 0
     f7e:	e6 e2       	ldi	r30, 0x26	; 38
     f80:	f0 e0       	ldi	r31, 0x00	; 0
     f82:	80 81       	ld	r24, Z
     f84:	8f 77       	andi	r24, 0x7F	; 127
     f86:	8c 93       	st	X, r24
    // TODO
}
     f88:	cf 91       	pop	r28
     f8a:	df 91       	pop	r29
     f8c:	08 95       	ret

00000f8e <Adc_GetResult>:


Adc_ConversionStateType Adc_GetResult(u16* result) {
     f8e:	df 93       	push	r29
     f90:	cf 93       	push	r28
     f92:	00 d0       	rcall	.+0      	; 0xf94 <Adc_GetResult+0x6>
     f94:	0f 92       	push	r0
     f96:	cd b7       	in	r28, 0x3d	; 61
     f98:	de b7       	in	r29, 0x3e	; 62
     f9a:	9b 83       	std	Y+3, r25	; 0x03
     f9c:	8a 83       	std	Y+2, r24	; 0x02
    Adc_ConversionStateType flag = ADC_CONVERSION_NOT_COMPLETE;
     f9e:	19 82       	std	Y+1, r1	; 0x01
    if (GET_BIT(ADCSRA, ADCSRA_ADIF) == 1) {
     fa0:	e6 e2       	ldi	r30, 0x26	; 38
     fa2:	f0 e0       	ldi	r31, 0x00	; 0
     fa4:	80 81       	ld	r24, Z
     fa6:	82 95       	swap	r24
     fa8:	8f 70       	andi	r24, 0x0F	; 15
     faa:	88 2f       	mov	r24, r24
     fac:	90 e0       	ldi	r25, 0x00	; 0
     fae:	81 70       	andi	r24, 0x01	; 1
     fb0:	90 70       	andi	r25, 0x00	; 0
     fb2:	88 23       	and	r24, r24
     fb4:	91 f0       	breq	.+36     	; 0xfda <Adc_GetResult+0x4c>
        SET_BIT(ADCSRA, ADCSRA_ADIF);
     fb6:	a6 e2       	ldi	r26, 0x26	; 38
     fb8:	b0 e0       	ldi	r27, 0x00	; 0
     fba:	e6 e2       	ldi	r30, 0x26	; 38
     fbc:	f0 e0       	ldi	r31, 0x00	; 0
     fbe:	80 81       	ld	r24, Z
     fc0:	80 61       	ori	r24, 0x10	; 16
     fc2:	8c 93       	st	X, r24
        *result = ADC_DATA_REGISTER & 0b0000001111111111;
     fc4:	e4 e2       	ldi	r30, 0x24	; 36
     fc6:	f0 e0       	ldi	r31, 0x00	; 0
     fc8:	80 81       	ld	r24, Z
     fca:	91 81       	ldd	r25, Z+1	; 0x01
     fcc:	93 70       	andi	r25, 0x03	; 3
     fce:	ea 81       	ldd	r30, Y+2	; 0x02
     fd0:	fb 81       	ldd	r31, Y+3	; 0x03
     fd2:	91 83       	std	Z+1, r25	; 0x01
     fd4:	80 83       	st	Z, r24
        flag = ADC_CONVERSION_COMPLETE;
     fd6:	81 e0       	ldi	r24, 0x01	; 1
     fd8:	89 83       	std	Y+1, r24	; 0x01
    }
    return flag;
     fda:	89 81       	ldd	r24, Y+1	; 0x01
}
     fdc:	0f 90       	pop	r0
     fde:	0f 90       	pop	r0
     fe0:	0f 90       	pop	r0
     fe2:	cf 91       	pop	r28
     fe4:	df 91       	pop	r29
     fe6:	08 95       	ret

00000fe8 <Adc_GetResultPolling>:

u16 Adc_GetResultPolling(void) {
     fe8:	df 93       	push	r29
     fea:	cf 93       	push	r28
     fec:	cd b7       	in	r28, 0x3d	; 61
     fee:	de b7       	in	r29, 0x3e	; 62
    while (GET_BIT(ADCSRA, ADCSRA_ADIF) == 0);
     ff0:	e6 e2       	ldi	r30, 0x26	; 38
     ff2:	f0 e0       	ldi	r31, 0x00	; 0
     ff4:	80 81       	ld	r24, Z
     ff6:	82 95       	swap	r24
     ff8:	8f 70       	andi	r24, 0x0F	; 15
     ffa:	88 2f       	mov	r24, r24
     ffc:	90 e0       	ldi	r25, 0x00	; 0
     ffe:	81 70       	andi	r24, 0x01	; 1
    1000:	90 70       	andi	r25, 0x00	; 0
    1002:	00 97       	sbiw	r24, 0x00	; 0
    1004:	a9 f3       	breq	.-22     	; 0xff0 <Adc_GetResultPolling+0x8>
    return (ADC_DATA_REGISTER & 0b0000001111111111);
    1006:	e4 e2       	ldi	r30, 0x24	; 36
    1008:	f0 e0       	ldi	r31, 0x00	; 0
    100a:	80 81       	ld	r24, Z
    100c:	91 81       	ldd	r25, Z+1	; 0x01
    100e:	93 70       	andi	r25, 0x03	; 3
}
    1010:	cf 91       	pop	r28
    1012:	df 91       	pop	r29
    1014:	08 95       	ret

00001016 <Adc_SetCallback>:


void Adc_SetCallback (void (*callback) (u16 res)) {
    1016:	df 93       	push	r29
    1018:	cf 93       	push	r28
    101a:	00 d0       	rcall	.+0      	; 0x101c <Adc_SetCallback+0x6>
    101c:	cd b7       	in	r28, 0x3d	; 61
    101e:	de b7       	in	r29, 0x3e	; 62
    1020:	9a 83       	std	Y+2, r25	; 0x02
    1022:	89 83       	std	Y+1, r24	; 0x01
    Adc_Callback = callback;
    1024:	89 81       	ldd	r24, Y+1	; 0x01
    1026:	9a 81       	ldd	r25, Y+2	; 0x02
    1028:	90 93 73 01 	sts	0x0173, r25
    102c:	80 93 72 01 	sts	0x0172, r24
}
    1030:	0f 90       	pop	r0
    1032:	0f 90       	pop	r0
    1034:	cf 91       	pop	r28
    1036:	df 91       	pop	r29
    1038:	08 95       	ret

0000103a <Calculator_Run>:
#include "LCD.h"
#include "Calculator.h"

//u8 Calculator_GetRealNumber (Keypad_ButtonType button);

void Calculator_Run(void) {
    103a:	df 93       	push	r29
    103c:	cf 93       	push	r28
    103e:	cd b7       	in	r28, 0x3d	; 61
    1040:	de b7       	in	r29, 0x3e	; 62
    1042:	2d 97       	sbiw	r28, 0x0d	; 13
    1044:	0f b6       	in	r0, 0x3f	; 63
    1046:	f8 94       	cli
    1048:	de bf       	out	0x3e, r29	; 62
    104a:	0f be       	out	0x3f, r0	; 63
    104c:	cd bf       	out	0x3d, r28	; 61
    s8 num1=0, num2=0, operation=0, result=0;
    104e:	19 86       	std	Y+9, r1	; 0x09
    1050:	18 86       	std	Y+8, r1	; 0x08
    1052:	1f 82       	std	Y+7, r1	; 0x07
    1054:	1e 82       	std	Y+6, r1	; 0x06
    u8 num1_flag=0, num2_flag=0, operation_flag=0, result_flag=0;
    1056:	1d 82       	std	Y+5, r1	; 0x05
    1058:	1c 82       	std	Y+4, r1	; 0x04
    105a:	1b 82       	std	Y+3, r1	; 0x03
    105c:	1a 82       	std	Y+2, r1	; 0x02
    Keypad_ButtonType pressed_button;
    while (1)
    {
        /* Wait for user input */
        do {
            pressed_button = Keypad_GetPressedButton();
    105e:	0e 94 22 1d 	call	0x3a44	; 0x3a44 <Keypad_GetPressedButton>
    1062:	89 83       	std	Y+1, r24	; 0x01
        }
        while (pressed_button == KEYPAD_BUTTON_INVALID);
    1064:	89 81       	ldd	r24, Y+1	; 0x01
    1066:	80 31       	cpi	r24, 0x10	; 16
    1068:	d1 f3       	breq	.-12     	; 0x105e <Calculator_Run+0x24>

        if (pressed_button == CALCULATOR_BUTTON_CLR) {
    106a:	89 81       	ldd	r24, Y+1	; 0x01
    106c:	88 23       	and	r24, r24
    106e:	39 f4       	brne	.+14     	; 0x107e <Calculator_Run+0x44>
            num1_flag = 0;
    1070:	1d 82       	std	Y+5, r1	; 0x05
            num2_flag = 0;
    1072:	1c 82       	std	Y+4, r1	; 0x04
            operation_flag = 0;
    1074:	1b 82       	std	Y+3, r1	; 0x03
            result_flag = 0;
    1076:	1a 82       	std	Y+2, r1	; 0x02
            LCD_Clear();
    1078:	0e 94 e7 1d 	call	0x3bce	; 0x3bce <LCD_Clear>
    107c:	f0 cf       	rjmp	.-32     	; 0x105e <Calculator_Run+0x24>
            continue;
        }
        if (num1_flag == 0) {
    107e:	8d 81       	ldd	r24, Y+5	; 0x05
    1080:	88 23       	and	r24, r24
    1082:	81 f4       	brne	.+32     	; 0x10a4 <Calculator_Run+0x6a>
            num1_flag = 1;
    1084:	81 e0       	ldi	r24, 0x01	; 1
    1086:	8d 83       	std	Y+5, r24	; 0x05
            num1 = Calculator_GetRealNumber(pressed_button);
    1088:	89 81       	ldd	r24, Y+1	; 0x01
    108a:	0e 94 ef 08 	call	0x11de	; 0x11de <Calculator_GetRealNumber>
    108e:	89 87       	std	Y+9, r24	; 0x09
            LCD_DisplayNumber(num1);
    1090:	89 85       	ldd	r24, Y+9	; 0x09
    1092:	88 2f       	mov	r24, r24
    1094:	90 e0       	ldi	r25, 0x00	; 0
    1096:	a0 e0       	ldi	r26, 0x00	; 0
    1098:	b0 e0       	ldi	r27, 0x00	; 0
    109a:	bc 01       	movw	r22, r24
    109c:	cd 01       	movw	r24, r26
    109e:	0e 94 4b 1e 	call	0x3c96	; 0x3c96 <LCD_DisplayNumber>
    10a2:	dd cf       	rjmp	.-70     	; 0x105e <Calculator_Run+0x24>
        }
        else if (operation_flag == 0) {
    10a4:	8b 81       	ldd	r24, Y+3	; 0x03
    10a6:	88 23       	and	r24, r24
    10a8:	89 f5       	brne	.+98     	; 0x110c <Calculator_Run+0xd2>
            operation_flag = 1;
    10aa:	81 e0       	ldi	r24, 0x01	; 1
    10ac:	8b 83       	std	Y+3, r24	; 0x03
            switch (pressed_button)
    10ae:	89 81       	ldd	r24, Y+1	; 0x01
    10b0:	28 2f       	mov	r18, r24
    10b2:	30 e0       	ldi	r19, 0x00	; 0
    10b4:	3d 87       	std	Y+13, r19	; 0x0d
    10b6:	2c 87       	std	Y+12, r18	; 0x0c
    10b8:	8c 85       	ldd	r24, Y+12	; 0x0c
    10ba:	9d 85       	ldd	r25, Y+13	; 0x0d
    10bc:	87 30       	cpi	r24, 0x07	; 7
    10be:	91 05       	cpc	r25, r1
    10c0:	c9 f0       	breq	.+50     	; 0x10f4 <Calculator_Run+0xba>
    10c2:	2c 85       	ldd	r18, Y+12	; 0x0c
    10c4:	3d 85       	ldd	r19, Y+13	; 0x0d
    10c6:	28 30       	cpi	r18, 0x08	; 8
    10c8:	31 05       	cpc	r19, r1
    10ca:	34 f4       	brge	.+12     	; 0x10d8 <Calculator_Run+0x9e>
    10cc:	8c 85       	ldd	r24, Y+12	; 0x0c
    10ce:	9d 85       	ldd	r25, Y+13	; 0x0d
    10d0:	83 30       	cpi	r24, 0x03	; 3
    10d2:	91 05       	cpc	r25, r1
    10d4:	61 f0       	breq	.+24     	; 0x10ee <Calculator_Run+0xb4>
    10d6:	16 c0       	rjmp	.+44     	; 0x1104 <Calculator_Run+0xca>
    10d8:	2c 85       	ldd	r18, Y+12	; 0x0c
    10da:	3d 85       	ldd	r19, Y+13	; 0x0d
    10dc:	2b 30       	cpi	r18, 0x0B	; 11
    10de:	31 05       	cpc	r19, r1
    10e0:	61 f0       	breq	.+24     	; 0x10fa <Calculator_Run+0xc0>
    10e2:	8c 85       	ldd	r24, Y+12	; 0x0c
    10e4:	9d 85       	ldd	r25, Y+13	; 0x0d
    10e6:	8f 30       	cpi	r24, 0x0F	; 15
    10e8:	91 05       	cpc	r25, r1
    10ea:	51 f0       	breq	.+20     	; 0x1100 <Calculator_Run+0xc6>
    10ec:	0b c0       	rjmp	.+22     	; 0x1104 <Calculator_Run+0xca>
            {
            case CALCULATOR_BUTTON_PLUS:
                operation = '+';
    10ee:	8b e2       	ldi	r24, 0x2B	; 43
    10f0:	8f 83       	std	Y+7, r24	; 0x07
    10f2:	08 c0       	rjmp	.+16     	; 0x1104 <Calculator_Run+0xca>
                break;
            case CALCULATOR_BUTTON_MINUS:
                operation = '-';
    10f4:	8d e2       	ldi	r24, 0x2D	; 45
    10f6:	8f 83       	std	Y+7, r24	; 0x07
    10f8:	05 c0       	rjmp	.+10     	; 0x1104 <Calculator_Run+0xca>
                break;
            case CALCULATOR_BUTTON_MUL:
                operation = '*';
    10fa:	8a e2       	ldi	r24, 0x2A	; 42
    10fc:	8f 83       	std	Y+7, r24	; 0x07
    10fe:	02 c0       	rjmp	.+4      	; 0x1104 <Calculator_Run+0xca>
                break;
            case CALCULATOR_BUTTON_DIV:
                operation = '/';
    1100:	8f e2       	ldi	r24, 0x2F	; 47
    1102:	8f 83       	std	Y+7, r24	; 0x07
                break;
            default:
                break;
            }
            LCD_DisplayCharacter(operation);
    1104:	8f 81       	ldd	r24, Y+7	; 0x07
    1106:	0e 94 f1 1d 	call	0x3be2	; 0x3be2 <LCD_DisplayCharacter>
    110a:	a9 cf       	rjmp	.-174    	; 0x105e <Calculator_Run+0x24>
        }
        else if (num2_flag == 0) {
    110c:	8c 81       	ldd	r24, Y+4	; 0x04
    110e:	88 23       	and	r24, r24
    1110:	81 f4       	brne	.+32     	; 0x1132 <Calculator_Run+0xf8>
            num2_flag = 1;
    1112:	81 e0       	ldi	r24, 0x01	; 1
    1114:	8c 83       	std	Y+4, r24	; 0x04
            num2 = Calculator_GetRealNumber(pressed_button);
    1116:	89 81       	ldd	r24, Y+1	; 0x01
    1118:	0e 94 ef 08 	call	0x11de	; 0x11de <Calculator_GetRealNumber>
    111c:	88 87       	std	Y+8, r24	; 0x08
            LCD_DisplayNumber(num2);
    111e:	88 85       	ldd	r24, Y+8	; 0x08
    1120:	88 2f       	mov	r24, r24
    1122:	90 e0       	ldi	r25, 0x00	; 0
    1124:	a0 e0       	ldi	r26, 0x00	; 0
    1126:	b0 e0       	ldi	r27, 0x00	; 0
    1128:	bc 01       	movw	r22, r24
    112a:	cd 01       	movw	r24, r26
    112c:	0e 94 4b 1e 	call	0x3c96	; 0x3c96 <LCD_DisplayNumber>
    1130:	96 cf       	rjmp	.-212    	; 0x105e <Calculator_Run+0x24>
        }
        else if (result_flag == 0) {
    1132:	8a 81       	ldd	r24, Y+2	; 0x02
    1134:	88 23       	and	r24, r24
    1136:	09 f0       	breq	.+2      	; 0x113a <Calculator_Run+0x100>
    1138:	92 cf       	rjmp	.-220    	; 0x105e <Calculator_Run+0x24>
            if (pressed_button == CALCULATOR_BUTTON_EQUAL) {
    113a:	89 81       	ldd	r24, Y+1	; 0x01
    113c:	82 30       	cpi	r24, 0x02	; 2
    113e:	09 f0       	breq	.+2      	; 0x1142 <Calculator_Run+0x108>
    1140:	8e cf       	rjmp	.-228    	; 0x105e <Calculator_Run+0x24>
                result_flag = 1;
    1142:	81 e0       	ldi	r24, 0x01	; 1
    1144:	8a 83       	std	Y+2, r24	; 0x02
                switch (operation)
    1146:	8f 81       	ldd	r24, Y+7	; 0x07
    1148:	28 2f       	mov	r18, r24
    114a:	30 e0       	ldi	r19, 0x00	; 0
    114c:	3b 87       	std	Y+11, r19	; 0x0b
    114e:	2a 87       	std	Y+10, r18	; 0x0a
    1150:	8a 85       	ldd	r24, Y+10	; 0x0a
    1152:	9b 85       	ldd	r25, Y+11	; 0x0b
    1154:	8b 32       	cpi	r24, 0x2B	; 43
    1156:	91 05       	cpc	r25, r1
    1158:	b1 f0       	breq	.+44     	; 0x1186 <Calculator_Run+0x14c>
    115a:	2a 85       	ldd	r18, Y+10	; 0x0a
    115c:	3b 85       	ldd	r19, Y+11	; 0x0b
    115e:	2c 32       	cpi	r18, 0x2C	; 44
    1160:	31 05       	cpc	r19, r1
    1162:	34 f4       	brge	.+12     	; 0x1170 <Calculator_Run+0x136>
    1164:	8a 85       	ldd	r24, Y+10	; 0x0a
    1166:	9b 85       	ldd	r25, Y+11	; 0x0b
    1168:	8a 32       	cpi	r24, 0x2A	; 42
    116a:	91 05       	cpc	r25, r1
    116c:	b1 f0       	breq	.+44     	; 0x119a <Calculator_Run+0x160>
    116e:	22 c0       	rjmp	.+68     	; 0x11b4 <Calculator_Run+0x17a>
    1170:	2a 85       	ldd	r18, Y+10	; 0x0a
    1172:	3b 85       	ldd	r19, Y+11	; 0x0b
    1174:	2d 32       	cpi	r18, 0x2D	; 45
    1176:	31 05       	cpc	r19, r1
    1178:	59 f0       	breq	.+22     	; 0x1190 <Calculator_Run+0x156>
    117a:	8a 85       	ldd	r24, Y+10	; 0x0a
    117c:	9b 85       	ldd	r25, Y+11	; 0x0b
    117e:	8f 32       	cpi	r24, 0x2F	; 47
    1180:	91 05       	cpc	r25, r1
    1182:	91 f0       	breq	.+36     	; 0x11a8 <Calculator_Run+0x16e>
    1184:	17 c0       	rjmp	.+46     	; 0x11b4 <Calculator_Run+0x17a>
                {
                case '+':
                    result = num1 + num2;
    1186:	89 85       	ldd	r24, Y+9	; 0x09
    1188:	98 85       	ldd	r25, Y+8	; 0x08
    118a:	89 0f       	add	r24, r25
    118c:	8e 83       	std	Y+6, r24	; 0x06
    118e:	12 c0       	rjmp	.+36     	; 0x11b4 <Calculator_Run+0x17a>
                    break;
                case '-':
                    result = num1 - num2;
    1190:	89 85       	ldd	r24, Y+9	; 0x09
    1192:	98 85       	ldd	r25, Y+8	; 0x08
    1194:	89 1b       	sub	r24, r25
    1196:	8e 83       	std	Y+6, r24	; 0x06
    1198:	0d c0       	rjmp	.+26     	; 0x11b4 <Calculator_Run+0x17a>
                    break;
                case '*':
                    result = num1 * num2;
    119a:	89 85       	ldd	r24, Y+9	; 0x09
    119c:	98 85       	ldd	r25, Y+8	; 0x08
    119e:	89 9f       	mul	r24, r25
    11a0:	80 2d       	mov	r24, r0
    11a2:	11 24       	eor	r1, r1
    11a4:	8e 83       	std	Y+6, r24	; 0x06
    11a6:	06 c0       	rjmp	.+12     	; 0x11b4 <Calculator_Run+0x17a>
                    break;
                case '/':
                    result = num1 / num2;
    11a8:	89 85       	ldd	r24, Y+9	; 0x09
    11aa:	98 85       	ldd	r25, Y+8	; 0x08
    11ac:	69 2f       	mov	r22, r25
    11ae:	0e 94 7c 28 	call	0x50f8	; 0x50f8 <__udivmodqi4>
    11b2:	8e 83       	std	Y+6, r24	; 0x06
                    break;
                default:
                    break;
                }
                LCD_DisplayCharacter('=');
    11b4:	8d e3       	ldi	r24, 0x3D	; 61
    11b6:	0e 94 f1 1d 	call	0x3be2	; 0x3be2 <LCD_DisplayCharacter>
                LCD_SetCursorPosition(1,0);
    11ba:	81 e0       	ldi	r24, 0x01	; 1
    11bc:	60 e0       	ldi	r22, 0x00	; 0
    11be:	0e 94 27 1e 	call	0x3c4e	; 0x3c4e <LCD_SetCursorPosition>
                LCD_DisplayString((u8*)"Result = ");
    11c2:	80 e6       	ldi	r24, 0x60	; 96
    11c4:	90 e0       	ldi	r25, 0x00	; 0
    11c6:	0e 94 fe 1d 	call	0x3bfc	; 0x3bfc <LCD_DisplayString>
                LCD_DisplayNumber(result);
    11ca:	8e 81       	ldd	r24, Y+6	; 0x06
    11cc:	88 2f       	mov	r24, r24
    11ce:	90 e0       	ldi	r25, 0x00	; 0
    11d0:	a0 e0       	ldi	r26, 0x00	; 0
    11d2:	b0 e0       	ldi	r27, 0x00	; 0
    11d4:	bc 01       	movw	r22, r24
    11d6:	cd 01       	movw	r24, r26
    11d8:	0e 94 4b 1e 	call	0x3c96	; 0x3c96 <LCD_DisplayNumber>
    11dc:	40 cf       	rjmp	.-384    	; 0x105e <Calculator_Run+0x24>

000011de <Calculator_GetRealNumber>:
            }
        }
    }
}

 u8 Calculator_GetRealNumber (Keypad_ButtonType button) {
    11de:	df 93       	push	r29
    11e0:	cf 93       	push	r28
    11e2:	00 d0       	rcall	.+0      	; 0x11e4 <Calculator_GetRealNumber+0x6>
    11e4:	00 d0       	rcall	.+0      	; 0x11e6 <Calculator_GetRealNumber+0x8>
    11e6:	cd b7       	in	r28, 0x3d	; 61
    11e8:	de b7       	in	r29, 0x3e	; 62
    11ea:	8a 83       	std	Y+2, r24	; 0x02
    u8 num = 0;
    11ec:	19 82       	std	Y+1, r1	; 0x01
    switch (button)
    11ee:	8a 81       	ldd	r24, Y+2	; 0x02
    11f0:	28 2f       	mov	r18, r24
    11f2:	30 e0       	ldi	r19, 0x00	; 0
    11f4:	3c 83       	std	Y+4, r19	; 0x04
    11f6:	2b 83       	std	Y+3, r18	; 0x03
    11f8:	8b 81       	ldd	r24, Y+3	; 0x03
    11fa:	9c 81       	ldd	r25, Y+4	; 0x04
    11fc:	88 30       	cpi	r24, 0x08	; 8
    11fe:	91 05       	cpc	r25, r1
    1200:	09 f4       	brne	.+2      	; 0x1204 <Calculator_GetRealNumber+0x26>
    1202:	4b c0       	rjmp	.+150    	; 0x129a <Calculator_GetRealNumber+0xbc>
    1204:	2b 81       	ldd	r18, Y+3	; 0x03
    1206:	3c 81       	ldd	r19, Y+4	; 0x04
    1208:	29 30       	cpi	r18, 0x09	; 9
    120a:	31 05       	cpc	r19, r1
    120c:	dc f4       	brge	.+54     	; 0x1244 <Calculator_GetRealNumber+0x66>
    120e:	8b 81       	ldd	r24, Y+3	; 0x03
    1210:	9c 81       	ldd	r25, Y+4	; 0x04
    1212:	84 30       	cpi	r24, 0x04	; 4
    1214:	91 05       	cpc	r25, r1
    1216:	c1 f1       	breq	.+112    	; 0x1288 <Calculator_GetRealNumber+0xaa>
    1218:	2b 81       	ldd	r18, Y+3	; 0x03
    121a:	3c 81       	ldd	r19, Y+4	; 0x04
    121c:	25 30       	cpi	r18, 0x05	; 5
    121e:	31 05       	cpc	r19, r1
    1220:	34 f4       	brge	.+12     	; 0x122e <Calculator_GetRealNumber+0x50>
    1222:	8b 81       	ldd	r24, Y+3	; 0x03
    1224:	9c 81       	ldd	r25, Y+4	; 0x04
    1226:	81 30       	cpi	r24, 0x01	; 1
    1228:	91 05       	cpc	r25, r1
    122a:	61 f1       	breq	.+88     	; 0x1284 <Calculator_GetRealNumber+0xa6>
    122c:	47 c0       	rjmp	.+142    	; 0x12bc <Calculator_GetRealNumber+0xde>
    122e:	2b 81       	ldd	r18, Y+3	; 0x03
    1230:	3c 81       	ldd	r19, Y+4	; 0x04
    1232:	25 30       	cpi	r18, 0x05	; 5
    1234:	31 05       	cpc	r19, r1
    1236:	59 f1       	breq	.+86     	; 0x128e <Calculator_GetRealNumber+0xb0>
    1238:	8b 81       	ldd	r24, Y+3	; 0x03
    123a:	9c 81       	ldd	r25, Y+4	; 0x04
    123c:	86 30       	cpi	r24, 0x06	; 6
    123e:	91 05       	cpc	r25, r1
    1240:	49 f1       	breq	.+82     	; 0x1294 <Calculator_GetRealNumber+0xb6>
    1242:	3c c0       	rjmp	.+120    	; 0x12bc <Calculator_GetRealNumber+0xde>
    1244:	2b 81       	ldd	r18, Y+3	; 0x03
    1246:	3c 81       	ldd	r19, Y+4	; 0x04
    1248:	2c 30       	cpi	r18, 0x0C	; 12
    124a:	31 05       	cpc	r19, r1
    124c:	79 f1       	breq	.+94     	; 0x12ac <Calculator_GetRealNumber+0xce>
    124e:	8b 81       	ldd	r24, Y+3	; 0x03
    1250:	9c 81       	ldd	r25, Y+4	; 0x04
    1252:	8d 30       	cpi	r24, 0x0D	; 13
    1254:	91 05       	cpc	r25, r1
    1256:	5c f4       	brge	.+22     	; 0x126e <Calculator_GetRealNumber+0x90>
    1258:	2b 81       	ldd	r18, Y+3	; 0x03
    125a:	3c 81       	ldd	r19, Y+4	; 0x04
    125c:	29 30       	cpi	r18, 0x09	; 9
    125e:	31 05       	cpc	r19, r1
    1260:	f9 f0       	breq	.+62     	; 0x12a0 <Calculator_GetRealNumber+0xc2>
    1262:	8b 81       	ldd	r24, Y+3	; 0x03
    1264:	9c 81       	ldd	r25, Y+4	; 0x04
    1266:	8a 30       	cpi	r24, 0x0A	; 10
    1268:	91 05       	cpc	r25, r1
    126a:	e9 f0       	breq	.+58     	; 0x12a6 <Calculator_GetRealNumber+0xc8>
    126c:	27 c0       	rjmp	.+78     	; 0x12bc <Calculator_GetRealNumber+0xde>
    126e:	2b 81       	ldd	r18, Y+3	; 0x03
    1270:	3c 81       	ldd	r19, Y+4	; 0x04
    1272:	2d 30       	cpi	r18, 0x0D	; 13
    1274:	31 05       	cpc	r19, r1
    1276:	e9 f0       	breq	.+58     	; 0x12b2 <Calculator_GetRealNumber+0xd4>
    1278:	8b 81       	ldd	r24, Y+3	; 0x03
    127a:	9c 81       	ldd	r25, Y+4	; 0x04
    127c:	8e 30       	cpi	r24, 0x0E	; 14
    127e:	91 05       	cpc	r25, r1
    1280:	d9 f0       	breq	.+54     	; 0x12b8 <Calculator_GetRealNumber+0xda>
    1282:	1c c0       	rjmp	.+56     	; 0x12bc <Calculator_GetRealNumber+0xde>
    {
    case CALCULATOR_BUTTON_NUM0:
        num = 0;
    1284:	19 82       	std	Y+1, r1	; 0x01
    1286:	1a c0       	rjmp	.+52     	; 0x12bc <Calculator_GetRealNumber+0xde>
        break;
    case CALCULATOR_BUTTON_NUM1:
        num = 1;
    1288:	81 e0       	ldi	r24, 0x01	; 1
    128a:	89 83       	std	Y+1, r24	; 0x01
    128c:	17 c0       	rjmp	.+46     	; 0x12bc <Calculator_GetRealNumber+0xde>
        break;
    case CALCULATOR_BUTTON_NUM2:
        num = 2;
    128e:	82 e0       	ldi	r24, 0x02	; 2
    1290:	89 83       	std	Y+1, r24	; 0x01
    1292:	14 c0       	rjmp	.+40     	; 0x12bc <Calculator_GetRealNumber+0xde>
        break;
    case CALCULATOR_BUTTON_NUM3:
        num = 3;
    1294:	83 e0       	ldi	r24, 0x03	; 3
    1296:	89 83       	std	Y+1, r24	; 0x01
    1298:	11 c0       	rjmp	.+34     	; 0x12bc <Calculator_GetRealNumber+0xde>
        break;
    case CALCULATOR_BUTTON_NUM4:
        num = 4;
    129a:	84 e0       	ldi	r24, 0x04	; 4
    129c:	89 83       	std	Y+1, r24	; 0x01
    129e:	0e c0       	rjmp	.+28     	; 0x12bc <Calculator_GetRealNumber+0xde>
        break;
    case CALCULATOR_BUTTON_NUM5:
        num = 5;
    12a0:	85 e0       	ldi	r24, 0x05	; 5
    12a2:	89 83       	std	Y+1, r24	; 0x01
    12a4:	0b c0       	rjmp	.+22     	; 0x12bc <Calculator_GetRealNumber+0xde>
        break;
    case CALCULATOR_BUTTON_NUM6:
        num = 6;
    12a6:	86 e0       	ldi	r24, 0x06	; 6
    12a8:	89 83       	std	Y+1, r24	; 0x01
    12aa:	08 c0       	rjmp	.+16     	; 0x12bc <Calculator_GetRealNumber+0xde>
        break;
    case CALCULATOR_BUTTON_NUM7:
        num = 7;
    12ac:	87 e0       	ldi	r24, 0x07	; 7
    12ae:	89 83       	std	Y+1, r24	; 0x01
    12b0:	05 c0       	rjmp	.+10     	; 0x12bc <Calculator_GetRealNumber+0xde>
        break;
    case CALCULATOR_BUTTON_NUM8:
        num = 8;
    12b2:	88 e0       	ldi	r24, 0x08	; 8
    12b4:	89 83       	std	Y+1, r24	; 0x01
    12b6:	02 c0       	rjmp	.+4      	; 0x12bc <Calculator_GetRealNumber+0xde>
        break;
    case CALCULATOR_BUTTON_NUM9:
        num = 9;
    12b8:	89 e0       	ldi	r24, 0x09	; 9
    12ba:	89 83       	std	Y+1, r24	; 0x01
        break;
    default:
        break;
    }
    return num;
    12bc:	89 81       	ldd	r24, Y+1	; 0x01
}
    12be:	0f 90       	pop	r0
    12c0:	0f 90       	pop	r0
    12c2:	0f 90       	pop	r0
    12c4:	0f 90       	pop	r0
    12c6:	cf 91       	pop	r28
    12c8:	df 91       	pop	r29
    12ca:	08 95       	ret

000012cc <DIO_FlipPinLevel>:
#include "std_types.h"
#include "macros.h"
#include "DIO.h"

void DIO_FlipPinLevel(DIO_PortType port, DIO_PinType pin) {
    12cc:	df 93       	push	r29
    12ce:	cf 93       	push	r28
    12d0:	00 d0       	rcall	.+0      	; 0x12d2 <DIO_FlipPinLevel+0x6>
    12d2:	00 d0       	rcall	.+0      	; 0x12d4 <DIO_FlipPinLevel+0x8>
    12d4:	cd b7       	in	r28, 0x3d	; 61
    12d6:	de b7       	in	r29, 0x3e	; 62
    12d8:	89 83       	std	Y+1, r24	; 0x01
    12da:	6a 83       	std	Y+2, r22	; 0x02
    switch (port)
    12dc:	89 81       	ldd	r24, Y+1	; 0x01
    12de:	28 2f       	mov	r18, r24
    12e0:	30 e0       	ldi	r19, 0x00	; 0
    12e2:	3c 83       	std	Y+4, r19	; 0x04
    12e4:	2b 83       	std	Y+3, r18	; 0x03
    12e6:	8b 81       	ldd	r24, Y+3	; 0x03
    12e8:	9c 81       	ldd	r25, Y+4	; 0x04
    12ea:	81 30       	cpi	r24, 0x01	; 1
    12ec:	91 05       	cpc	r25, r1
    12ee:	49 f1       	breq	.+82     	; 0x1342 <DIO_FlipPinLevel+0x76>
    12f0:	2b 81       	ldd	r18, Y+3	; 0x03
    12f2:	3c 81       	ldd	r19, Y+4	; 0x04
    12f4:	22 30       	cpi	r18, 0x02	; 2
    12f6:	31 05       	cpc	r19, r1
    12f8:	2c f4       	brge	.+10     	; 0x1304 <DIO_FlipPinLevel+0x38>
    12fa:	8b 81       	ldd	r24, Y+3	; 0x03
    12fc:	9c 81       	ldd	r25, Y+4	; 0x04
    12fe:	00 97       	sbiw	r24, 0x00	; 0
    1300:	61 f0       	breq	.+24     	; 0x131a <DIO_FlipPinLevel+0x4e>
    1302:	5a c0       	rjmp	.+180    	; 0x13b8 <DIO_FlipPinLevel+0xec>
    1304:	2b 81       	ldd	r18, Y+3	; 0x03
    1306:	3c 81       	ldd	r19, Y+4	; 0x04
    1308:	22 30       	cpi	r18, 0x02	; 2
    130a:	31 05       	cpc	r19, r1
    130c:	71 f1       	breq	.+92     	; 0x136a <DIO_FlipPinLevel+0x9e>
    130e:	8b 81       	ldd	r24, Y+3	; 0x03
    1310:	9c 81       	ldd	r25, Y+4	; 0x04
    1312:	83 30       	cpi	r24, 0x03	; 3
    1314:	91 05       	cpc	r25, r1
    1316:	e9 f1       	breq	.+122    	; 0x1392 <DIO_FlipPinLevel+0xc6>
    1318:	4f c0       	rjmp	.+158    	; 0x13b8 <DIO_FlipPinLevel+0xec>
    {
    case DIO_PORTA:
        TOG_BIT(PORTA, pin);
    131a:	ab e3       	ldi	r26, 0x3B	; 59
    131c:	b0 e0       	ldi	r27, 0x00	; 0
    131e:	eb e3       	ldi	r30, 0x3B	; 59
    1320:	f0 e0       	ldi	r31, 0x00	; 0
    1322:	80 81       	ld	r24, Z
    1324:	48 2f       	mov	r20, r24
    1326:	8a 81       	ldd	r24, Y+2	; 0x02
    1328:	28 2f       	mov	r18, r24
    132a:	30 e0       	ldi	r19, 0x00	; 0
    132c:	81 e0       	ldi	r24, 0x01	; 1
    132e:	90 e0       	ldi	r25, 0x00	; 0
    1330:	02 2e       	mov	r0, r18
    1332:	02 c0       	rjmp	.+4      	; 0x1338 <DIO_FlipPinLevel+0x6c>
    1334:	88 0f       	add	r24, r24
    1336:	99 1f       	adc	r25, r25
    1338:	0a 94       	dec	r0
    133a:	e2 f7       	brpl	.-8      	; 0x1334 <DIO_FlipPinLevel+0x68>
    133c:	84 27       	eor	r24, r20
    133e:	8c 93       	st	X, r24
    1340:	3b c0       	rjmp	.+118    	; 0x13b8 <DIO_FlipPinLevel+0xec>
        break;
    case DIO_PORTB:
        TOG_BIT(PORTB, pin);
    1342:	a8 e3       	ldi	r26, 0x38	; 56
    1344:	b0 e0       	ldi	r27, 0x00	; 0
    1346:	e8 e3       	ldi	r30, 0x38	; 56
    1348:	f0 e0       	ldi	r31, 0x00	; 0
    134a:	80 81       	ld	r24, Z
    134c:	48 2f       	mov	r20, r24
    134e:	8a 81       	ldd	r24, Y+2	; 0x02
    1350:	28 2f       	mov	r18, r24
    1352:	30 e0       	ldi	r19, 0x00	; 0
    1354:	81 e0       	ldi	r24, 0x01	; 1
    1356:	90 e0       	ldi	r25, 0x00	; 0
    1358:	02 2e       	mov	r0, r18
    135a:	02 c0       	rjmp	.+4      	; 0x1360 <DIO_FlipPinLevel+0x94>
    135c:	88 0f       	add	r24, r24
    135e:	99 1f       	adc	r25, r25
    1360:	0a 94       	dec	r0
    1362:	e2 f7       	brpl	.-8      	; 0x135c <DIO_FlipPinLevel+0x90>
    1364:	84 27       	eor	r24, r20
    1366:	8c 93       	st	X, r24
    1368:	27 c0       	rjmp	.+78     	; 0x13b8 <DIO_FlipPinLevel+0xec>
        break;
    case DIO_PORTC:
        TOG_BIT(PORTC, pin);
    136a:	a5 e3       	ldi	r26, 0x35	; 53
    136c:	b0 e0       	ldi	r27, 0x00	; 0
    136e:	e5 e3       	ldi	r30, 0x35	; 53
    1370:	f0 e0       	ldi	r31, 0x00	; 0
    1372:	80 81       	ld	r24, Z
    1374:	48 2f       	mov	r20, r24
    1376:	8a 81       	ldd	r24, Y+2	; 0x02
    1378:	28 2f       	mov	r18, r24
    137a:	30 e0       	ldi	r19, 0x00	; 0
    137c:	81 e0       	ldi	r24, 0x01	; 1
    137e:	90 e0       	ldi	r25, 0x00	; 0
    1380:	02 2e       	mov	r0, r18
    1382:	02 c0       	rjmp	.+4      	; 0x1388 <DIO_FlipPinLevel+0xbc>
    1384:	88 0f       	add	r24, r24
    1386:	99 1f       	adc	r25, r25
    1388:	0a 94       	dec	r0
    138a:	e2 f7       	brpl	.-8      	; 0x1384 <DIO_FlipPinLevel+0xb8>
    138c:	84 27       	eor	r24, r20
    138e:	8c 93       	st	X, r24
    1390:	13 c0       	rjmp	.+38     	; 0x13b8 <DIO_FlipPinLevel+0xec>
        break;
    case DIO_PORTD:
        TOG_BIT(PORTD, pin);
    1392:	a2 e3       	ldi	r26, 0x32	; 50
    1394:	b0 e0       	ldi	r27, 0x00	; 0
    1396:	e2 e3       	ldi	r30, 0x32	; 50
    1398:	f0 e0       	ldi	r31, 0x00	; 0
    139a:	80 81       	ld	r24, Z
    139c:	48 2f       	mov	r20, r24
    139e:	8a 81       	ldd	r24, Y+2	; 0x02
    13a0:	28 2f       	mov	r18, r24
    13a2:	30 e0       	ldi	r19, 0x00	; 0
    13a4:	81 e0       	ldi	r24, 0x01	; 1
    13a6:	90 e0       	ldi	r25, 0x00	; 0
    13a8:	02 2e       	mov	r0, r18
    13aa:	02 c0       	rjmp	.+4      	; 0x13b0 <DIO_FlipPinLevel+0xe4>
    13ac:	88 0f       	add	r24, r24
    13ae:	99 1f       	adc	r25, r25
    13b0:	0a 94       	dec	r0
    13b2:	e2 f7       	brpl	.-8      	; 0x13ac <DIO_FlipPinLevel+0xe0>
    13b4:	84 27       	eor	r24, r20
    13b6:	8c 93       	st	X, r24
        break;
    default:
        break;
    }
}
    13b8:	0f 90       	pop	r0
    13ba:	0f 90       	pop	r0
    13bc:	0f 90       	pop	r0
    13be:	0f 90       	pop	r0
    13c0:	cf 91       	pop	r28
    13c2:	df 91       	pop	r29
    13c4:	08 95       	ret

000013c6 <DIO_SetPinMode>:
void DIO_SetPinMode(DIO_PortType port, DIO_PinType pin, DIO_ModeType mode) {
    13c6:	df 93       	push	r29
    13c8:	cf 93       	push	r28
    13ca:	cd b7       	in	r28, 0x3d	; 61
    13cc:	de b7       	in	r29, 0x3e	; 62
    13ce:	29 97       	sbiw	r28, 0x09	; 9
    13d0:	0f b6       	in	r0, 0x3f	; 63
    13d2:	f8 94       	cli
    13d4:	de bf       	out	0x3e, r29	; 62
    13d6:	0f be       	out	0x3f, r0	; 63
    13d8:	cd bf       	out	0x3d, r28	; 61
    13da:	89 83       	std	Y+1, r24	; 0x01
    13dc:	6a 83       	std	Y+2, r22	; 0x02
    13de:	4b 83       	std	Y+3, r20	; 0x03
    if (mode == DIO_INPUT_FLOATING)
    13e0:	8b 81       	ldd	r24, Y+3	; 0x03
    13e2:	88 23       	and	r24, r24
    13e4:	09 f0       	breq	.+2      	; 0x13e8 <DIO_SetPinMode+0x22>
    13e6:	c2 c0       	rjmp	.+388    	; 0x156c <DIO_SetPinMode+0x1a6>
    {
        switch (port)
    13e8:	89 81       	ldd	r24, Y+1	; 0x01
    13ea:	28 2f       	mov	r18, r24
    13ec:	30 e0       	ldi	r19, 0x00	; 0
    13ee:	39 87       	std	Y+9, r19	; 0x09
    13f0:	28 87       	std	Y+8, r18	; 0x08
    13f2:	88 85       	ldd	r24, Y+8	; 0x08
    13f4:	99 85       	ldd	r25, Y+9	; 0x09
    13f6:	81 30       	cpi	r24, 0x01	; 1
    13f8:	91 05       	cpc	r25, r1
    13fa:	09 f4       	brne	.+2      	; 0x13fe <DIO_SetPinMode+0x38>
    13fc:	3f c0       	rjmp	.+126    	; 0x147c <DIO_SetPinMode+0xb6>
    13fe:	28 85       	ldd	r18, Y+8	; 0x08
    1400:	39 85       	ldd	r19, Y+9	; 0x09
    1402:	22 30       	cpi	r18, 0x02	; 2
    1404:	31 05       	cpc	r19, r1
    1406:	2c f4       	brge	.+10     	; 0x1412 <DIO_SetPinMode+0x4c>
    1408:	88 85       	ldd	r24, Y+8	; 0x08
    140a:	99 85       	ldd	r25, Y+9	; 0x09
    140c:	00 97       	sbiw	r24, 0x00	; 0
    140e:	71 f0       	breq	.+28     	; 0x142c <DIO_SetPinMode+0x66>
    1410:	e1 c1       	rjmp	.+962    	; 0x17d4 <DIO_SetPinMode+0x40e>
    1412:	28 85       	ldd	r18, Y+8	; 0x08
    1414:	39 85       	ldd	r19, Y+9	; 0x09
    1416:	22 30       	cpi	r18, 0x02	; 2
    1418:	31 05       	cpc	r19, r1
    141a:	09 f4       	brne	.+2      	; 0x141e <DIO_SetPinMode+0x58>
    141c:	57 c0       	rjmp	.+174    	; 0x14cc <DIO_SetPinMode+0x106>
    141e:	88 85       	ldd	r24, Y+8	; 0x08
    1420:	99 85       	ldd	r25, Y+9	; 0x09
    1422:	83 30       	cpi	r24, 0x03	; 3
    1424:	91 05       	cpc	r25, r1
    1426:	09 f4       	brne	.+2      	; 0x142a <DIO_SetPinMode+0x64>
    1428:	79 c0       	rjmp	.+242    	; 0x151c <DIO_SetPinMode+0x156>
    142a:	d4 c1       	rjmp	.+936    	; 0x17d4 <DIO_SetPinMode+0x40e>
        {
        case DIO_PORTA:
            CLR_BIT(DDRA, pin);
    142c:	aa e3       	ldi	r26, 0x3A	; 58
    142e:	b0 e0       	ldi	r27, 0x00	; 0
    1430:	ea e3       	ldi	r30, 0x3A	; 58
    1432:	f0 e0       	ldi	r31, 0x00	; 0
    1434:	80 81       	ld	r24, Z
    1436:	48 2f       	mov	r20, r24
    1438:	8a 81       	ldd	r24, Y+2	; 0x02
    143a:	28 2f       	mov	r18, r24
    143c:	30 e0       	ldi	r19, 0x00	; 0
    143e:	81 e0       	ldi	r24, 0x01	; 1
    1440:	90 e0       	ldi	r25, 0x00	; 0
    1442:	02 c0       	rjmp	.+4      	; 0x1448 <DIO_SetPinMode+0x82>
    1444:	88 0f       	add	r24, r24
    1446:	99 1f       	adc	r25, r25
    1448:	2a 95       	dec	r18
    144a:	e2 f7       	brpl	.-8      	; 0x1444 <DIO_SetPinMode+0x7e>
    144c:	80 95       	com	r24
    144e:	84 23       	and	r24, r20
    1450:	8c 93       	st	X, r24
            CLR_BIT(PORTA, pin);
    1452:	ab e3       	ldi	r26, 0x3B	; 59
    1454:	b0 e0       	ldi	r27, 0x00	; 0
    1456:	eb e3       	ldi	r30, 0x3B	; 59
    1458:	f0 e0       	ldi	r31, 0x00	; 0
    145a:	80 81       	ld	r24, Z
    145c:	48 2f       	mov	r20, r24
    145e:	8a 81       	ldd	r24, Y+2	; 0x02
    1460:	28 2f       	mov	r18, r24
    1462:	30 e0       	ldi	r19, 0x00	; 0
    1464:	81 e0       	ldi	r24, 0x01	; 1
    1466:	90 e0       	ldi	r25, 0x00	; 0
    1468:	02 2e       	mov	r0, r18
    146a:	02 c0       	rjmp	.+4      	; 0x1470 <DIO_SetPinMode+0xaa>
    146c:	88 0f       	add	r24, r24
    146e:	99 1f       	adc	r25, r25
    1470:	0a 94       	dec	r0
    1472:	e2 f7       	brpl	.-8      	; 0x146c <DIO_SetPinMode+0xa6>
    1474:	80 95       	com	r24
    1476:	84 23       	and	r24, r20
    1478:	8c 93       	st	X, r24
    147a:	ac c1       	rjmp	.+856    	; 0x17d4 <DIO_SetPinMode+0x40e>
            break;
        case DIO_PORTB:
            CLR_BIT(DDRB, pin);
    147c:	a7 e3       	ldi	r26, 0x37	; 55
    147e:	b0 e0       	ldi	r27, 0x00	; 0
    1480:	e7 e3       	ldi	r30, 0x37	; 55
    1482:	f0 e0       	ldi	r31, 0x00	; 0
    1484:	80 81       	ld	r24, Z
    1486:	48 2f       	mov	r20, r24
    1488:	8a 81       	ldd	r24, Y+2	; 0x02
    148a:	28 2f       	mov	r18, r24
    148c:	30 e0       	ldi	r19, 0x00	; 0
    148e:	81 e0       	ldi	r24, 0x01	; 1
    1490:	90 e0       	ldi	r25, 0x00	; 0
    1492:	02 c0       	rjmp	.+4      	; 0x1498 <DIO_SetPinMode+0xd2>
    1494:	88 0f       	add	r24, r24
    1496:	99 1f       	adc	r25, r25
    1498:	2a 95       	dec	r18
    149a:	e2 f7       	brpl	.-8      	; 0x1494 <DIO_SetPinMode+0xce>
    149c:	80 95       	com	r24
    149e:	84 23       	and	r24, r20
    14a0:	8c 93       	st	X, r24
            CLR_BIT(PORTB, pin);
    14a2:	a8 e3       	ldi	r26, 0x38	; 56
    14a4:	b0 e0       	ldi	r27, 0x00	; 0
    14a6:	e8 e3       	ldi	r30, 0x38	; 56
    14a8:	f0 e0       	ldi	r31, 0x00	; 0
    14aa:	80 81       	ld	r24, Z
    14ac:	48 2f       	mov	r20, r24
    14ae:	8a 81       	ldd	r24, Y+2	; 0x02
    14b0:	28 2f       	mov	r18, r24
    14b2:	30 e0       	ldi	r19, 0x00	; 0
    14b4:	81 e0       	ldi	r24, 0x01	; 1
    14b6:	90 e0       	ldi	r25, 0x00	; 0
    14b8:	02 2e       	mov	r0, r18
    14ba:	02 c0       	rjmp	.+4      	; 0x14c0 <DIO_SetPinMode+0xfa>
    14bc:	88 0f       	add	r24, r24
    14be:	99 1f       	adc	r25, r25
    14c0:	0a 94       	dec	r0
    14c2:	e2 f7       	brpl	.-8      	; 0x14bc <DIO_SetPinMode+0xf6>
    14c4:	80 95       	com	r24
    14c6:	84 23       	and	r24, r20
    14c8:	8c 93       	st	X, r24
    14ca:	84 c1       	rjmp	.+776    	; 0x17d4 <DIO_SetPinMode+0x40e>
            break;
        case DIO_PORTC:
            CLR_BIT(DDRC, pin);
    14cc:	a4 e3       	ldi	r26, 0x34	; 52
    14ce:	b0 e0       	ldi	r27, 0x00	; 0
    14d0:	e4 e3       	ldi	r30, 0x34	; 52
    14d2:	f0 e0       	ldi	r31, 0x00	; 0
    14d4:	80 81       	ld	r24, Z
    14d6:	48 2f       	mov	r20, r24
    14d8:	8a 81       	ldd	r24, Y+2	; 0x02
    14da:	28 2f       	mov	r18, r24
    14dc:	30 e0       	ldi	r19, 0x00	; 0
    14de:	81 e0       	ldi	r24, 0x01	; 1
    14e0:	90 e0       	ldi	r25, 0x00	; 0
    14e2:	02 c0       	rjmp	.+4      	; 0x14e8 <DIO_SetPinMode+0x122>
    14e4:	88 0f       	add	r24, r24
    14e6:	99 1f       	adc	r25, r25
    14e8:	2a 95       	dec	r18
    14ea:	e2 f7       	brpl	.-8      	; 0x14e4 <DIO_SetPinMode+0x11e>
    14ec:	80 95       	com	r24
    14ee:	84 23       	and	r24, r20
    14f0:	8c 93       	st	X, r24
            CLR_BIT(PORTC, pin);
    14f2:	a5 e3       	ldi	r26, 0x35	; 53
    14f4:	b0 e0       	ldi	r27, 0x00	; 0
    14f6:	e5 e3       	ldi	r30, 0x35	; 53
    14f8:	f0 e0       	ldi	r31, 0x00	; 0
    14fa:	80 81       	ld	r24, Z
    14fc:	48 2f       	mov	r20, r24
    14fe:	8a 81       	ldd	r24, Y+2	; 0x02
    1500:	28 2f       	mov	r18, r24
    1502:	30 e0       	ldi	r19, 0x00	; 0
    1504:	81 e0       	ldi	r24, 0x01	; 1
    1506:	90 e0       	ldi	r25, 0x00	; 0
    1508:	02 2e       	mov	r0, r18
    150a:	02 c0       	rjmp	.+4      	; 0x1510 <DIO_SetPinMode+0x14a>
    150c:	88 0f       	add	r24, r24
    150e:	99 1f       	adc	r25, r25
    1510:	0a 94       	dec	r0
    1512:	e2 f7       	brpl	.-8      	; 0x150c <DIO_SetPinMode+0x146>
    1514:	80 95       	com	r24
    1516:	84 23       	and	r24, r20
    1518:	8c 93       	st	X, r24
    151a:	5c c1       	rjmp	.+696    	; 0x17d4 <DIO_SetPinMode+0x40e>
            break;
        case DIO_PORTD:
            CLR_BIT(DDRD, pin);
    151c:	a1 e3       	ldi	r26, 0x31	; 49
    151e:	b0 e0       	ldi	r27, 0x00	; 0
    1520:	e1 e3       	ldi	r30, 0x31	; 49
    1522:	f0 e0       	ldi	r31, 0x00	; 0
    1524:	80 81       	ld	r24, Z
    1526:	48 2f       	mov	r20, r24
    1528:	8a 81       	ldd	r24, Y+2	; 0x02
    152a:	28 2f       	mov	r18, r24
    152c:	30 e0       	ldi	r19, 0x00	; 0
    152e:	81 e0       	ldi	r24, 0x01	; 1
    1530:	90 e0       	ldi	r25, 0x00	; 0
    1532:	02 c0       	rjmp	.+4      	; 0x1538 <DIO_SetPinMode+0x172>
    1534:	88 0f       	add	r24, r24
    1536:	99 1f       	adc	r25, r25
    1538:	2a 95       	dec	r18
    153a:	e2 f7       	brpl	.-8      	; 0x1534 <DIO_SetPinMode+0x16e>
    153c:	80 95       	com	r24
    153e:	84 23       	and	r24, r20
    1540:	8c 93       	st	X, r24
            CLR_BIT(PORTD, pin);
    1542:	a2 e3       	ldi	r26, 0x32	; 50
    1544:	b0 e0       	ldi	r27, 0x00	; 0
    1546:	e2 e3       	ldi	r30, 0x32	; 50
    1548:	f0 e0       	ldi	r31, 0x00	; 0
    154a:	80 81       	ld	r24, Z
    154c:	48 2f       	mov	r20, r24
    154e:	8a 81       	ldd	r24, Y+2	; 0x02
    1550:	28 2f       	mov	r18, r24
    1552:	30 e0       	ldi	r19, 0x00	; 0
    1554:	81 e0       	ldi	r24, 0x01	; 1
    1556:	90 e0       	ldi	r25, 0x00	; 0
    1558:	02 2e       	mov	r0, r18
    155a:	02 c0       	rjmp	.+4      	; 0x1560 <DIO_SetPinMode+0x19a>
    155c:	88 0f       	add	r24, r24
    155e:	99 1f       	adc	r25, r25
    1560:	0a 94       	dec	r0
    1562:	e2 f7       	brpl	.-8      	; 0x155c <DIO_SetPinMode+0x196>
    1564:	80 95       	com	r24
    1566:	84 23       	and	r24, r20
    1568:	8c 93       	st	X, r24
    156a:	34 c1       	rjmp	.+616    	; 0x17d4 <DIO_SetPinMode+0x40e>
            break;
        default:
            break;
        }
    }
    else if (mode == DIO_INPUT_PULLUP)
    156c:	8b 81       	ldd	r24, Y+3	; 0x03
    156e:	81 30       	cpi	r24, 0x01	; 1
    1570:	09 f0       	breq	.+2      	; 0x1574 <DIO_SetPinMode+0x1ae>
    1572:	be c0       	rjmp	.+380    	; 0x16f0 <DIO_SetPinMode+0x32a>
    {
        switch (port)
    1574:	89 81       	ldd	r24, Y+1	; 0x01
    1576:	28 2f       	mov	r18, r24
    1578:	30 e0       	ldi	r19, 0x00	; 0
    157a:	3f 83       	std	Y+7, r19	; 0x07
    157c:	2e 83       	std	Y+6, r18	; 0x06
    157e:	8e 81       	ldd	r24, Y+6	; 0x06
    1580:	9f 81       	ldd	r25, Y+7	; 0x07
    1582:	81 30       	cpi	r24, 0x01	; 1
    1584:	91 05       	cpc	r25, r1
    1586:	09 f4       	brne	.+2      	; 0x158a <DIO_SetPinMode+0x1c4>
    1588:	3e c0       	rjmp	.+124    	; 0x1606 <DIO_SetPinMode+0x240>
    158a:	2e 81       	ldd	r18, Y+6	; 0x06
    158c:	3f 81       	ldd	r19, Y+7	; 0x07
    158e:	22 30       	cpi	r18, 0x02	; 2
    1590:	31 05       	cpc	r19, r1
    1592:	2c f4       	brge	.+10     	; 0x159e <DIO_SetPinMode+0x1d8>
    1594:	8e 81       	ldd	r24, Y+6	; 0x06
    1596:	9f 81       	ldd	r25, Y+7	; 0x07
    1598:	00 97       	sbiw	r24, 0x00	; 0
    159a:	71 f0       	breq	.+28     	; 0x15b8 <DIO_SetPinMode+0x1f2>
    159c:	1b c1       	rjmp	.+566    	; 0x17d4 <DIO_SetPinMode+0x40e>
    159e:	2e 81       	ldd	r18, Y+6	; 0x06
    15a0:	3f 81       	ldd	r19, Y+7	; 0x07
    15a2:	22 30       	cpi	r18, 0x02	; 2
    15a4:	31 05       	cpc	r19, r1
    15a6:	09 f4       	brne	.+2      	; 0x15aa <DIO_SetPinMode+0x1e4>
    15a8:	55 c0       	rjmp	.+170    	; 0x1654 <DIO_SetPinMode+0x28e>
    15aa:	8e 81       	ldd	r24, Y+6	; 0x06
    15ac:	9f 81       	ldd	r25, Y+7	; 0x07
    15ae:	83 30       	cpi	r24, 0x03	; 3
    15b0:	91 05       	cpc	r25, r1
    15b2:	09 f4       	brne	.+2      	; 0x15b6 <DIO_SetPinMode+0x1f0>
    15b4:	76 c0       	rjmp	.+236    	; 0x16a2 <DIO_SetPinMode+0x2dc>
    15b6:	0e c1       	rjmp	.+540    	; 0x17d4 <DIO_SetPinMode+0x40e>
        {
        case DIO_PORTA:
            CLR_BIT(DDRA, pin);
    15b8:	aa e3       	ldi	r26, 0x3A	; 58
    15ba:	b0 e0       	ldi	r27, 0x00	; 0
    15bc:	ea e3       	ldi	r30, 0x3A	; 58
    15be:	f0 e0       	ldi	r31, 0x00	; 0
    15c0:	80 81       	ld	r24, Z
    15c2:	48 2f       	mov	r20, r24
    15c4:	8a 81       	ldd	r24, Y+2	; 0x02
    15c6:	28 2f       	mov	r18, r24
    15c8:	30 e0       	ldi	r19, 0x00	; 0
    15ca:	81 e0       	ldi	r24, 0x01	; 1
    15cc:	90 e0       	ldi	r25, 0x00	; 0
    15ce:	02 c0       	rjmp	.+4      	; 0x15d4 <DIO_SetPinMode+0x20e>
    15d0:	88 0f       	add	r24, r24
    15d2:	99 1f       	adc	r25, r25
    15d4:	2a 95       	dec	r18
    15d6:	e2 f7       	brpl	.-8      	; 0x15d0 <DIO_SetPinMode+0x20a>
    15d8:	80 95       	com	r24
    15da:	84 23       	and	r24, r20
    15dc:	8c 93       	st	X, r24
            SET_BIT(PORTA, pin);
    15de:	ab e3       	ldi	r26, 0x3B	; 59
    15e0:	b0 e0       	ldi	r27, 0x00	; 0
    15e2:	eb e3       	ldi	r30, 0x3B	; 59
    15e4:	f0 e0       	ldi	r31, 0x00	; 0
    15e6:	80 81       	ld	r24, Z
    15e8:	48 2f       	mov	r20, r24
    15ea:	8a 81       	ldd	r24, Y+2	; 0x02
    15ec:	28 2f       	mov	r18, r24
    15ee:	30 e0       	ldi	r19, 0x00	; 0
    15f0:	81 e0       	ldi	r24, 0x01	; 1
    15f2:	90 e0       	ldi	r25, 0x00	; 0
    15f4:	02 2e       	mov	r0, r18
    15f6:	02 c0       	rjmp	.+4      	; 0x15fc <DIO_SetPinMode+0x236>
    15f8:	88 0f       	add	r24, r24
    15fa:	99 1f       	adc	r25, r25
    15fc:	0a 94       	dec	r0
    15fe:	e2 f7       	brpl	.-8      	; 0x15f8 <DIO_SetPinMode+0x232>
    1600:	84 2b       	or	r24, r20
    1602:	8c 93       	st	X, r24
    1604:	e7 c0       	rjmp	.+462    	; 0x17d4 <DIO_SetPinMode+0x40e>
            break;
        case DIO_PORTB:
            CLR_BIT(DDRB, pin);
    1606:	a7 e3       	ldi	r26, 0x37	; 55
    1608:	b0 e0       	ldi	r27, 0x00	; 0
    160a:	e7 e3       	ldi	r30, 0x37	; 55
    160c:	f0 e0       	ldi	r31, 0x00	; 0
    160e:	80 81       	ld	r24, Z
    1610:	48 2f       	mov	r20, r24
    1612:	8a 81       	ldd	r24, Y+2	; 0x02
    1614:	28 2f       	mov	r18, r24
    1616:	30 e0       	ldi	r19, 0x00	; 0
    1618:	81 e0       	ldi	r24, 0x01	; 1
    161a:	90 e0       	ldi	r25, 0x00	; 0
    161c:	02 c0       	rjmp	.+4      	; 0x1622 <DIO_SetPinMode+0x25c>
    161e:	88 0f       	add	r24, r24
    1620:	99 1f       	adc	r25, r25
    1622:	2a 95       	dec	r18
    1624:	e2 f7       	brpl	.-8      	; 0x161e <DIO_SetPinMode+0x258>
    1626:	80 95       	com	r24
    1628:	84 23       	and	r24, r20
    162a:	8c 93       	st	X, r24
            SET_BIT(PORTB, pin);
    162c:	a8 e3       	ldi	r26, 0x38	; 56
    162e:	b0 e0       	ldi	r27, 0x00	; 0
    1630:	e8 e3       	ldi	r30, 0x38	; 56
    1632:	f0 e0       	ldi	r31, 0x00	; 0
    1634:	80 81       	ld	r24, Z
    1636:	48 2f       	mov	r20, r24
    1638:	8a 81       	ldd	r24, Y+2	; 0x02
    163a:	28 2f       	mov	r18, r24
    163c:	30 e0       	ldi	r19, 0x00	; 0
    163e:	81 e0       	ldi	r24, 0x01	; 1
    1640:	90 e0       	ldi	r25, 0x00	; 0
    1642:	02 2e       	mov	r0, r18
    1644:	02 c0       	rjmp	.+4      	; 0x164a <DIO_SetPinMode+0x284>
    1646:	88 0f       	add	r24, r24
    1648:	99 1f       	adc	r25, r25
    164a:	0a 94       	dec	r0
    164c:	e2 f7       	brpl	.-8      	; 0x1646 <DIO_SetPinMode+0x280>
    164e:	84 2b       	or	r24, r20
    1650:	8c 93       	st	X, r24
    1652:	c0 c0       	rjmp	.+384    	; 0x17d4 <DIO_SetPinMode+0x40e>
            break;
        case DIO_PORTC:
            CLR_BIT(DDRC, pin);
    1654:	a4 e3       	ldi	r26, 0x34	; 52
    1656:	b0 e0       	ldi	r27, 0x00	; 0
    1658:	e4 e3       	ldi	r30, 0x34	; 52
    165a:	f0 e0       	ldi	r31, 0x00	; 0
    165c:	80 81       	ld	r24, Z
    165e:	48 2f       	mov	r20, r24
    1660:	8a 81       	ldd	r24, Y+2	; 0x02
    1662:	28 2f       	mov	r18, r24
    1664:	30 e0       	ldi	r19, 0x00	; 0
    1666:	81 e0       	ldi	r24, 0x01	; 1
    1668:	90 e0       	ldi	r25, 0x00	; 0
    166a:	02 c0       	rjmp	.+4      	; 0x1670 <DIO_SetPinMode+0x2aa>
    166c:	88 0f       	add	r24, r24
    166e:	99 1f       	adc	r25, r25
    1670:	2a 95       	dec	r18
    1672:	e2 f7       	brpl	.-8      	; 0x166c <DIO_SetPinMode+0x2a6>
    1674:	80 95       	com	r24
    1676:	84 23       	and	r24, r20
    1678:	8c 93       	st	X, r24
            SET_BIT(PORTC, pin);
    167a:	a5 e3       	ldi	r26, 0x35	; 53
    167c:	b0 e0       	ldi	r27, 0x00	; 0
    167e:	e5 e3       	ldi	r30, 0x35	; 53
    1680:	f0 e0       	ldi	r31, 0x00	; 0
    1682:	80 81       	ld	r24, Z
    1684:	48 2f       	mov	r20, r24
    1686:	8a 81       	ldd	r24, Y+2	; 0x02
    1688:	28 2f       	mov	r18, r24
    168a:	30 e0       	ldi	r19, 0x00	; 0
    168c:	81 e0       	ldi	r24, 0x01	; 1
    168e:	90 e0       	ldi	r25, 0x00	; 0
    1690:	02 2e       	mov	r0, r18
    1692:	02 c0       	rjmp	.+4      	; 0x1698 <DIO_SetPinMode+0x2d2>
    1694:	88 0f       	add	r24, r24
    1696:	99 1f       	adc	r25, r25
    1698:	0a 94       	dec	r0
    169a:	e2 f7       	brpl	.-8      	; 0x1694 <DIO_SetPinMode+0x2ce>
    169c:	84 2b       	or	r24, r20
    169e:	8c 93       	st	X, r24
    16a0:	99 c0       	rjmp	.+306    	; 0x17d4 <DIO_SetPinMode+0x40e>
            break;
        case DIO_PORTD:
            CLR_BIT(DDRD, pin);
    16a2:	a1 e3       	ldi	r26, 0x31	; 49
    16a4:	b0 e0       	ldi	r27, 0x00	; 0
    16a6:	e1 e3       	ldi	r30, 0x31	; 49
    16a8:	f0 e0       	ldi	r31, 0x00	; 0
    16aa:	80 81       	ld	r24, Z
    16ac:	48 2f       	mov	r20, r24
    16ae:	8a 81       	ldd	r24, Y+2	; 0x02
    16b0:	28 2f       	mov	r18, r24
    16b2:	30 e0       	ldi	r19, 0x00	; 0
    16b4:	81 e0       	ldi	r24, 0x01	; 1
    16b6:	90 e0       	ldi	r25, 0x00	; 0
    16b8:	02 c0       	rjmp	.+4      	; 0x16be <DIO_SetPinMode+0x2f8>
    16ba:	88 0f       	add	r24, r24
    16bc:	99 1f       	adc	r25, r25
    16be:	2a 95       	dec	r18
    16c0:	e2 f7       	brpl	.-8      	; 0x16ba <DIO_SetPinMode+0x2f4>
    16c2:	80 95       	com	r24
    16c4:	84 23       	and	r24, r20
    16c6:	8c 93       	st	X, r24
            SET_BIT(PORTD, pin);
    16c8:	a2 e3       	ldi	r26, 0x32	; 50
    16ca:	b0 e0       	ldi	r27, 0x00	; 0
    16cc:	e2 e3       	ldi	r30, 0x32	; 50
    16ce:	f0 e0       	ldi	r31, 0x00	; 0
    16d0:	80 81       	ld	r24, Z
    16d2:	48 2f       	mov	r20, r24
    16d4:	8a 81       	ldd	r24, Y+2	; 0x02
    16d6:	28 2f       	mov	r18, r24
    16d8:	30 e0       	ldi	r19, 0x00	; 0
    16da:	81 e0       	ldi	r24, 0x01	; 1
    16dc:	90 e0       	ldi	r25, 0x00	; 0
    16de:	02 2e       	mov	r0, r18
    16e0:	02 c0       	rjmp	.+4      	; 0x16e6 <DIO_SetPinMode+0x320>
    16e2:	88 0f       	add	r24, r24
    16e4:	99 1f       	adc	r25, r25
    16e6:	0a 94       	dec	r0
    16e8:	e2 f7       	brpl	.-8      	; 0x16e2 <DIO_SetPinMode+0x31c>
    16ea:	84 2b       	or	r24, r20
    16ec:	8c 93       	st	X, r24
    16ee:	72 c0       	rjmp	.+228    	; 0x17d4 <DIO_SetPinMode+0x40e>
            break;
        default:
            break;
        }
    }
    else if (mode == DIO_OUTPUT)
    16f0:	8b 81       	ldd	r24, Y+3	; 0x03
    16f2:	82 30       	cpi	r24, 0x02	; 2
    16f4:	09 f0       	breq	.+2      	; 0x16f8 <DIO_SetPinMode+0x332>
    16f6:	6e c0       	rjmp	.+220    	; 0x17d4 <DIO_SetPinMode+0x40e>
    {
        switch (port)
    16f8:	89 81       	ldd	r24, Y+1	; 0x01
    16fa:	28 2f       	mov	r18, r24
    16fc:	30 e0       	ldi	r19, 0x00	; 0
    16fe:	3d 83       	std	Y+5, r19	; 0x05
    1700:	2c 83       	std	Y+4, r18	; 0x04
    1702:	8c 81       	ldd	r24, Y+4	; 0x04
    1704:	9d 81       	ldd	r25, Y+5	; 0x05
    1706:	81 30       	cpi	r24, 0x01	; 1
    1708:	91 05       	cpc	r25, r1
    170a:	49 f1       	breq	.+82     	; 0x175e <DIO_SetPinMode+0x398>
    170c:	2c 81       	ldd	r18, Y+4	; 0x04
    170e:	3d 81       	ldd	r19, Y+5	; 0x05
    1710:	22 30       	cpi	r18, 0x02	; 2
    1712:	31 05       	cpc	r19, r1
    1714:	2c f4       	brge	.+10     	; 0x1720 <DIO_SetPinMode+0x35a>
    1716:	8c 81       	ldd	r24, Y+4	; 0x04
    1718:	9d 81       	ldd	r25, Y+5	; 0x05
    171a:	00 97       	sbiw	r24, 0x00	; 0
    171c:	61 f0       	breq	.+24     	; 0x1736 <DIO_SetPinMode+0x370>
    171e:	5a c0       	rjmp	.+180    	; 0x17d4 <DIO_SetPinMode+0x40e>
    1720:	2c 81       	ldd	r18, Y+4	; 0x04
    1722:	3d 81       	ldd	r19, Y+5	; 0x05
    1724:	22 30       	cpi	r18, 0x02	; 2
    1726:	31 05       	cpc	r19, r1
    1728:	71 f1       	breq	.+92     	; 0x1786 <DIO_SetPinMode+0x3c0>
    172a:	8c 81       	ldd	r24, Y+4	; 0x04
    172c:	9d 81       	ldd	r25, Y+5	; 0x05
    172e:	83 30       	cpi	r24, 0x03	; 3
    1730:	91 05       	cpc	r25, r1
    1732:	e9 f1       	breq	.+122    	; 0x17ae <DIO_SetPinMode+0x3e8>
    1734:	4f c0       	rjmp	.+158    	; 0x17d4 <DIO_SetPinMode+0x40e>
        {
        case DIO_PORTA:
            SET_BIT(DDRA, pin);
    1736:	aa e3       	ldi	r26, 0x3A	; 58
    1738:	b0 e0       	ldi	r27, 0x00	; 0
    173a:	ea e3       	ldi	r30, 0x3A	; 58
    173c:	f0 e0       	ldi	r31, 0x00	; 0
    173e:	80 81       	ld	r24, Z
    1740:	48 2f       	mov	r20, r24
    1742:	8a 81       	ldd	r24, Y+2	; 0x02
    1744:	28 2f       	mov	r18, r24
    1746:	30 e0       	ldi	r19, 0x00	; 0
    1748:	81 e0       	ldi	r24, 0x01	; 1
    174a:	90 e0       	ldi	r25, 0x00	; 0
    174c:	02 2e       	mov	r0, r18
    174e:	02 c0       	rjmp	.+4      	; 0x1754 <DIO_SetPinMode+0x38e>
    1750:	88 0f       	add	r24, r24
    1752:	99 1f       	adc	r25, r25
    1754:	0a 94       	dec	r0
    1756:	e2 f7       	brpl	.-8      	; 0x1750 <DIO_SetPinMode+0x38a>
    1758:	84 2b       	or	r24, r20
    175a:	8c 93       	st	X, r24
    175c:	3b c0       	rjmp	.+118    	; 0x17d4 <DIO_SetPinMode+0x40e>
            break;
        case DIO_PORTB:
            SET_BIT(DDRB, pin);
    175e:	a7 e3       	ldi	r26, 0x37	; 55
    1760:	b0 e0       	ldi	r27, 0x00	; 0
    1762:	e7 e3       	ldi	r30, 0x37	; 55
    1764:	f0 e0       	ldi	r31, 0x00	; 0
    1766:	80 81       	ld	r24, Z
    1768:	48 2f       	mov	r20, r24
    176a:	8a 81       	ldd	r24, Y+2	; 0x02
    176c:	28 2f       	mov	r18, r24
    176e:	30 e0       	ldi	r19, 0x00	; 0
    1770:	81 e0       	ldi	r24, 0x01	; 1
    1772:	90 e0       	ldi	r25, 0x00	; 0
    1774:	02 2e       	mov	r0, r18
    1776:	02 c0       	rjmp	.+4      	; 0x177c <DIO_SetPinMode+0x3b6>
    1778:	88 0f       	add	r24, r24
    177a:	99 1f       	adc	r25, r25
    177c:	0a 94       	dec	r0
    177e:	e2 f7       	brpl	.-8      	; 0x1778 <DIO_SetPinMode+0x3b2>
    1780:	84 2b       	or	r24, r20
    1782:	8c 93       	st	X, r24
    1784:	27 c0       	rjmp	.+78     	; 0x17d4 <DIO_SetPinMode+0x40e>
            break;
        case DIO_PORTC:
            SET_BIT(DDRC, pin);
    1786:	a4 e3       	ldi	r26, 0x34	; 52
    1788:	b0 e0       	ldi	r27, 0x00	; 0
    178a:	e4 e3       	ldi	r30, 0x34	; 52
    178c:	f0 e0       	ldi	r31, 0x00	; 0
    178e:	80 81       	ld	r24, Z
    1790:	48 2f       	mov	r20, r24
    1792:	8a 81       	ldd	r24, Y+2	; 0x02
    1794:	28 2f       	mov	r18, r24
    1796:	30 e0       	ldi	r19, 0x00	; 0
    1798:	81 e0       	ldi	r24, 0x01	; 1
    179a:	90 e0       	ldi	r25, 0x00	; 0
    179c:	02 2e       	mov	r0, r18
    179e:	02 c0       	rjmp	.+4      	; 0x17a4 <DIO_SetPinMode+0x3de>
    17a0:	88 0f       	add	r24, r24
    17a2:	99 1f       	adc	r25, r25
    17a4:	0a 94       	dec	r0
    17a6:	e2 f7       	brpl	.-8      	; 0x17a0 <DIO_SetPinMode+0x3da>
    17a8:	84 2b       	or	r24, r20
    17aa:	8c 93       	st	X, r24
    17ac:	13 c0       	rjmp	.+38     	; 0x17d4 <DIO_SetPinMode+0x40e>
            break;
        case DIO_PORTD:
            SET_BIT(DDRD, pin);
    17ae:	a1 e3       	ldi	r26, 0x31	; 49
    17b0:	b0 e0       	ldi	r27, 0x00	; 0
    17b2:	e1 e3       	ldi	r30, 0x31	; 49
    17b4:	f0 e0       	ldi	r31, 0x00	; 0
    17b6:	80 81       	ld	r24, Z
    17b8:	48 2f       	mov	r20, r24
    17ba:	8a 81       	ldd	r24, Y+2	; 0x02
    17bc:	28 2f       	mov	r18, r24
    17be:	30 e0       	ldi	r19, 0x00	; 0
    17c0:	81 e0       	ldi	r24, 0x01	; 1
    17c2:	90 e0       	ldi	r25, 0x00	; 0
    17c4:	02 2e       	mov	r0, r18
    17c6:	02 c0       	rjmp	.+4      	; 0x17cc <DIO_SetPinMode+0x406>
    17c8:	88 0f       	add	r24, r24
    17ca:	99 1f       	adc	r25, r25
    17cc:	0a 94       	dec	r0
    17ce:	e2 f7       	brpl	.-8      	; 0x17c8 <DIO_SetPinMode+0x402>
    17d0:	84 2b       	or	r24, r20
    17d2:	8c 93       	st	X, r24
        default:
            break;
        }

    }
}
    17d4:	29 96       	adiw	r28, 0x09	; 9
    17d6:	0f b6       	in	r0, 0x3f	; 63
    17d8:	f8 94       	cli
    17da:	de bf       	out	0x3e, r29	; 62
    17dc:	0f be       	out	0x3f, r0	; 63
    17de:	cd bf       	out	0x3d, r28	; 61
    17e0:	cf 91       	pop	r28
    17e2:	df 91       	pop	r29
    17e4:	08 95       	ret

000017e6 <DIO_SetPortMode>:

void DIO_SetPortMode(DIO_PortType port, DIO_ModeType mode) {
    17e6:	df 93       	push	r29
    17e8:	cf 93       	push	r28
    17ea:	cd b7       	in	r28, 0x3d	; 61
    17ec:	de b7       	in	r29, 0x3e	; 62
    17ee:	2a 97       	sbiw	r28, 0x0a	; 10
    17f0:	0f b6       	in	r0, 0x3f	; 63
    17f2:	f8 94       	cli
    17f4:	de bf       	out	0x3e, r29	; 62
    17f6:	0f be       	out	0x3f, r0	; 63
    17f8:	cd bf       	out	0x3d, r28	; 61
    17fa:	89 83       	std	Y+1, r24	; 0x01
    17fc:	6a 83       	std	Y+2, r22	; 0x02
    if (mode == DIO_INPUT_FLOATING)
    17fe:	8a 81       	ldd	r24, Y+2	; 0x02
    1800:	88 23       	and	r24, r24
    1802:	d9 f5       	brne	.+118    	; 0x187a <DIO_SetPortMode+0x94>
    {
        switch (port)
    1804:	89 81       	ldd	r24, Y+1	; 0x01
    1806:	28 2f       	mov	r18, r24
    1808:	30 e0       	ldi	r19, 0x00	; 0
    180a:	3a 87       	std	Y+10, r19	; 0x0a
    180c:	29 87       	std	Y+9, r18	; 0x09
    180e:	89 85       	ldd	r24, Y+9	; 0x09
    1810:	9a 85       	ldd	r25, Y+10	; 0x0a
    1812:	81 30       	cpi	r24, 0x01	; 1
    1814:	91 05       	cpc	r25, r1
    1816:	e1 f0       	breq	.+56     	; 0x1850 <DIO_SetPortMode+0x6a>
    1818:	29 85       	ldd	r18, Y+9	; 0x09
    181a:	3a 85       	ldd	r19, Y+10	; 0x0a
    181c:	22 30       	cpi	r18, 0x02	; 2
    181e:	31 05       	cpc	r19, r1
    1820:	2c f4       	brge	.+10     	; 0x182c <DIO_SetPortMode+0x46>
    1822:	89 85       	ldd	r24, Y+9	; 0x09
    1824:	9a 85       	ldd	r25, Y+10	; 0x0a
    1826:	00 97       	sbiw	r24, 0x00	; 0
    1828:	61 f0       	breq	.+24     	; 0x1842 <DIO_SetPortMode+0x5c>
    182a:	d2 c0       	rjmp	.+420    	; 0x19d0 <DIO_SetPortMode+0x1ea>
    182c:	29 85       	ldd	r18, Y+9	; 0x09
    182e:	3a 85       	ldd	r19, Y+10	; 0x0a
    1830:	22 30       	cpi	r18, 0x02	; 2
    1832:	31 05       	cpc	r19, r1
    1834:	a1 f0       	breq	.+40     	; 0x185e <DIO_SetPortMode+0x78>
    1836:	89 85       	ldd	r24, Y+9	; 0x09
    1838:	9a 85       	ldd	r25, Y+10	; 0x0a
    183a:	83 30       	cpi	r24, 0x03	; 3
    183c:	91 05       	cpc	r25, r1
    183e:	b1 f0       	breq	.+44     	; 0x186c <DIO_SetPortMode+0x86>
    1840:	c7 c0       	rjmp	.+398    	; 0x19d0 <DIO_SetPortMode+0x1ea>
        {
        case DIO_PORTA:
            DDRA = 0x00;
    1842:	ea e3       	ldi	r30, 0x3A	; 58
    1844:	f0 e0       	ldi	r31, 0x00	; 0
    1846:	10 82       	st	Z, r1
            PORTA = 0x00;
    1848:	eb e3       	ldi	r30, 0x3B	; 59
    184a:	f0 e0       	ldi	r31, 0x00	; 0
    184c:	10 82       	st	Z, r1
    184e:	c0 c0       	rjmp	.+384    	; 0x19d0 <DIO_SetPortMode+0x1ea>
            break;
        case DIO_PORTB:
            DDRB = 0x00;
    1850:	e7 e3       	ldi	r30, 0x37	; 55
    1852:	f0 e0       	ldi	r31, 0x00	; 0
    1854:	10 82       	st	Z, r1
            PORTB = 0x00;
    1856:	e8 e3       	ldi	r30, 0x38	; 56
    1858:	f0 e0       	ldi	r31, 0x00	; 0
    185a:	10 82       	st	Z, r1
    185c:	b9 c0       	rjmp	.+370    	; 0x19d0 <DIO_SetPortMode+0x1ea>
            break;
        case DIO_PORTC:
            DDRC = 0x00;
    185e:	e4 e3       	ldi	r30, 0x34	; 52
    1860:	f0 e0       	ldi	r31, 0x00	; 0
    1862:	10 82       	st	Z, r1
            PORTC = 0x00;
    1864:	e5 e3       	ldi	r30, 0x35	; 53
    1866:	f0 e0       	ldi	r31, 0x00	; 0
    1868:	10 82       	st	Z, r1
    186a:	b2 c0       	rjmp	.+356    	; 0x19d0 <DIO_SetPortMode+0x1ea>
            break;
        case DIO_PORTD:
            DDRD = 0x00;
    186c:	e1 e3       	ldi	r30, 0x31	; 49
    186e:	f0 e0       	ldi	r31, 0x00	; 0
    1870:	10 82       	st	Z, r1
            PORTD = 0x00;
    1872:	e2 e3       	ldi	r30, 0x32	; 50
    1874:	f0 e0       	ldi	r31, 0x00	; 0
    1876:	10 82       	st	Z, r1
    1878:	ab c0       	rjmp	.+342    	; 0x19d0 <DIO_SetPortMode+0x1ea>
            break;
        default:
            break;
        }
    }
    else if (mode == DIO_INPUT_PULLUP)
    187a:	8a 81       	ldd	r24, Y+2	; 0x02
    187c:	81 30       	cpi	r24, 0x01	; 1
    187e:	09 f0       	breq	.+2      	; 0x1882 <DIO_SetPortMode+0x9c>
    1880:	3f c0       	rjmp	.+126    	; 0x1900 <DIO_SetPortMode+0x11a>
    {
        switch (port)
    1882:	89 81       	ldd	r24, Y+1	; 0x01
    1884:	28 2f       	mov	r18, r24
    1886:	30 e0       	ldi	r19, 0x00	; 0
    1888:	38 87       	std	Y+8, r19	; 0x08
    188a:	2f 83       	std	Y+7, r18	; 0x07
    188c:	8f 81       	ldd	r24, Y+7	; 0x07
    188e:	98 85       	ldd	r25, Y+8	; 0x08
    1890:	81 30       	cpi	r24, 0x01	; 1
    1892:	91 05       	cpc	r25, r1
    1894:	e9 f0       	breq	.+58     	; 0x18d0 <DIO_SetPortMode+0xea>
    1896:	2f 81       	ldd	r18, Y+7	; 0x07
    1898:	38 85       	ldd	r19, Y+8	; 0x08
    189a:	22 30       	cpi	r18, 0x02	; 2
    189c:	31 05       	cpc	r19, r1
    189e:	2c f4       	brge	.+10     	; 0x18aa <DIO_SetPortMode+0xc4>
    18a0:	8f 81       	ldd	r24, Y+7	; 0x07
    18a2:	98 85       	ldd	r25, Y+8	; 0x08
    18a4:	00 97       	sbiw	r24, 0x00	; 0
    18a6:	61 f0       	breq	.+24     	; 0x18c0 <DIO_SetPortMode+0xda>
    18a8:	93 c0       	rjmp	.+294    	; 0x19d0 <DIO_SetPortMode+0x1ea>
    18aa:	2f 81       	ldd	r18, Y+7	; 0x07
    18ac:	38 85       	ldd	r19, Y+8	; 0x08
    18ae:	22 30       	cpi	r18, 0x02	; 2
    18b0:	31 05       	cpc	r19, r1
    18b2:	b1 f0       	breq	.+44     	; 0x18e0 <DIO_SetPortMode+0xfa>
    18b4:	8f 81       	ldd	r24, Y+7	; 0x07
    18b6:	98 85       	ldd	r25, Y+8	; 0x08
    18b8:	83 30       	cpi	r24, 0x03	; 3
    18ba:	91 05       	cpc	r25, r1
    18bc:	c9 f0       	breq	.+50     	; 0x18f0 <DIO_SetPortMode+0x10a>
    18be:	88 c0       	rjmp	.+272    	; 0x19d0 <DIO_SetPortMode+0x1ea>
        {
        case DIO_PORTA:
            DDRA = 0x00;
    18c0:	ea e3       	ldi	r30, 0x3A	; 58
    18c2:	f0 e0       	ldi	r31, 0x00	; 0
    18c4:	10 82       	st	Z, r1
            PORTA = 0xFF;
    18c6:	eb e3       	ldi	r30, 0x3B	; 59
    18c8:	f0 e0       	ldi	r31, 0x00	; 0
    18ca:	8f ef       	ldi	r24, 0xFF	; 255
    18cc:	80 83       	st	Z, r24
    18ce:	80 c0       	rjmp	.+256    	; 0x19d0 <DIO_SetPortMode+0x1ea>
            break;
        case DIO_PORTB:
            DDRB = 0x00;
    18d0:	e7 e3       	ldi	r30, 0x37	; 55
    18d2:	f0 e0       	ldi	r31, 0x00	; 0
    18d4:	10 82       	st	Z, r1
            PORTB = 0xFF;
    18d6:	e8 e3       	ldi	r30, 0x38	; 56
    18d8:	f0 e0       	ldi	r31, 0x00	; 0
    18da:	8f ef       	ldi	r24, 0xFF	; 255
    18dc:	80 83       	st	Z, r24
    18de:	78 c0       	rjmp	.+240    	; 0x19d0 <DIO_SetPortMode+0x1ea>
            break;
        case DIO_PORTC:
            DDRC = 0x00;
    18e0:	e4 e3       	ldi	r30, 0x34	; 52
    18e2:	f0 e0       	ldi	r31, 0x00	; 0
    18e4:	10 82       	st	Z, r1
            PORTC = 0xFF;
    18e6:	e5 e3       	ldi	r30, 0x35	; 53
    18e8:	f0 e0       	ldi	r31, 0x00	; 0
    18ea:	8f ef       	ldi	r24, 0xFF	; 255
    18ec:	80 83       	st	Z, r24
    18ee:	70 c0       	rjmp	.+224    	; 0x19d0 <DIO_SetPortMode+0x1ea>
            break;
        case DIO_PORTD:
            DDRD = 0x00;
    18f0:	e1 e3       	ldi	r30, 0x31	; 49
    18f2:	f0 e0       	ldi	r31, 0x00	; 0
    18f4:	10 82       	st	Z, r1
            PORTD = 0xFF;
    18f6:	e2 e3       	ldi	r30, 0x32	; 50
    18f8:	f0 e0       	ldi	r31, 0x00	; 0
    18fa:	8f ef       	ldi	r24, 0xFF	; 255
    18fc:	80 83       	st	Z, r24
    18fe:	68 c0       	rjmp	.+208    	; 0x19d0 <DIO_SetPortMode+0x1ea>
            break;
        default:
            break;
        }
    }
    else if (mode == DIO_OUTPUT)
    1900:	8a 81       	ldd	r24, Y+2	; 0x02
    1902:	82 30       	cpi	r24, 0x02	; 2
    1904:	99 f5       	brne	.+102    	; 0x196c <DIO_SetPortMode+0x186>
    {
        switch (port)
    1906:	89 81       	ldd	r24, Y+1	; 0x01
    1908:	28 2f       	mov	r18, r24
    190a:	30 e0       	ldi	r19, 0x00	; 0
    190c:	3e 83       	std	Y+6, r19	; 0x06
    190e:	2d 83       	std	Y+5, r18	; 0x05
    1910:	8d 81       	ldd	r24, Y+5	; 0x05
    1912:	9e 81       	ldd	r25, Y+6	; 0x06
    1914:	81 30       	cpi	r24, 0x01	; 1
    1916:	91 05       	cpc	r25, r1
    1918:	d1 f0       	breq	.+52     	; 0x194e <DIO_SetPortMode+0x168>
    191a:	2d 81       	ldd	r18, Y+5	; 0x05
    191c:	3e 81       	ldd	r19, Y+6	; 0x06
    191e:	22 30       	cpi	r18, 0x02	; 2
    1920:	31 05       	cpc	r19, r1
    1922:	2c f4       	brge	.+10     	; 0x192e <DIO_SetPortMode+0x148>
    1924:	8d 81       	ldd	r24, Y+5	; 0x05
    1926:	9e 81       	ldd	r25, Y+6	; 0x06
    1928:	00 97       	sbiw	r24, 0x00	; 0
    192a:	61 f0       	breq	.+24     	; 0x1944 <DIO_SetPortMode+0x15e>
    192c:	51 c0       	rjmp	.+162    	; 0x19d0 <DIO_SetPortMode+0x1ea>
    192e:	2d 81       	ldd	r18, Y+5	; 0x05
    1930:	3e 81       	ldd	r19, Y+6	; 0x06
    1932:	22 30       	cpi	r18, 0x02	; 2
    1934:	31 05       	cpc	r19, r1
    1936:	81 f0       	breq	.+32     	; 0x1958 <DIO_SetPortMode+0x172>
    1938:	8d 81       	ldd	r24, Y+5	; 0x05
    193a:	9e 81       	ldd	r25, Y+6	; 0x06
    193c:	83 30       	cpi	r24, 0x03	; 3
    193e:	91 05       	cpc	r25, r1
    1940:	81 f0       	breq	.+32     	; 0x1962 <DIO_SetPortMode+0x17c>
    1942:	46 c0       	rjmp	.+140    	; 0x19d0 <DIO_SetPortMode+0x1ea>
        {
        case DIO_PORTA:
            DDRA = 0xFF;
    1944:	ea e3       	ldi	r30, 0x3A	; 58
    1946:	f0 e0       	ldi	r31, 0x00	; 0
    1948:	8f ef       	ldi	r24, 0xFF	; 255
    194a:	80 83       	st	Z, r24
    194c:	41 c0       	rjmp	.+130    	; 0x19d0 <DIO_SetPortMode+0x1ea>
            break;
        case DIO_PORTB:
            DDRB = 0xFF;
    194e:	e7 e3       	ldi	r30, 0x37	; 55
    1950:	f0 e0       	ldi	r31, 0x00	; 0
    1952:	8f ef       	ldi	r24, 0xFF	; 255
    1954:	80 83       	st	Z, r24
    1956:	3c c0       	rjmp	.+120    	; 0x19d0 <DIO_SetPortMode+0x1ea>
            break;
        case DIO_PORTC:
            DDRC = 0xFF;
    1958:	e4 e3       	ldi	r30, 0x34	; 52
    195a:	f0 e0       	ldi	r31, 0x00	; 0
    195c:	8f ef       	ldi	r24, 0xFF	; 255
    195e:	80 83       	st	Z, r24
    1960:	37 c0       	rjmp	.+110    	; 0x19d0 <DIO_SetPortMode+0x1ea>
            break;
        case DIO_PORTD:
            DDRD = 0xFF;
    1962:	e1 e3       	ldi	r30, 0x31	; 49
    1964:	f0 e0       	ldi	r31, 0x00	; 0
    1966:	8f ef       	ldi	r24, 0xFF	; 255
    1968:	80 83       	st	Z, r24
    196a:	32 c0       	rjmp	.+100    	; 0x19d0 <DIO_SetPortMode+0x1ea>
        }

    }
    else
    {
        switch (port)
    196c:	89 81       	ldd	r24, Y+1	; 0x01
    196e:	28 2f       	mov	r18, r24
    1970:	30 e0       	ldi	r19, 0x00	; 0
    1972:	3c 83       	std	Y+4, r19	; 0x04
    1974:	2b 83       	std	Y+3, r18	; 0x03
    1976:	8b 81       	ldd	r24, Y+3	; 0x03
    1978:	9c 81       	ldd	r25, Y+4	; 0x04
    197a:	81 30       	cpi	r24, 0x01	; 1
    197c:	91 05       	cpc	r25, r1
    197e:	d1 f0       	breq	.+52     	; 0x19b4 <DIO_SetPortMode+0x1ce>
    1980:	2b 81       	ldd	r18, Y+3	; 0x03
    1982:	3c 81       	ldd	r19, Y+4	; 0x04
    1984:	22 30       	cpi	r18, 0x02	; 2
    1986:	31 05       	cpc	r19, r1
    1988:	2c f4       	brge	.+10     	; 0x1994 <DIO_SetPortMode+0x1ae>
    198a:	8b 81       	ldd	r24, Y+3	; 0x03
    198c:	9c 81       	ldd	r25, Y+4	; 0x04
    198e:	00 97       	sbiw	r24, 0x00	; 0
    1990:	61 f0       	breq	.+24     	; 0x19aa <DIO_SetPortMode+0x1c4>
    1992:	1e c0       	rjmp	.+60     	; 0x19d0 <DIO_SetPortMode+0x1ea>
    1994:	2b 81       	ldd	r18, Y+3	; 0x03
    1996:	3c 81       	ldd	r19, Y+4	; 0x04
    1998:	22 30       	cpi	r18, 0x02	; 2
    199a:	31 05       	cpc	r19, r1
    199c:	81 f0       	breq	.+32     	; 0x19be <DIO_SetPortMode+0x1d8>
    199e:	8b 81       	ldd	r24, Y+3	; 0x03
    19a0:	9c 81       	ldd	r25, Y+4	; 0x04
    19a2:	83 30       	cpi	r24, 0x03	; 3
    19a4:	91 05       	cpc	r25, r1
    19a6:	81 f0       	breq	.+32     	; 0x19c8 <DIO_SetPortMode+0x1e2>
    19a8:	13 c0       	rjmp	.+38     	; 0x19d0 <DIO_SetPortMode+0x1ea>
        {
        case DIO_PORTA:
            DDRA = mode;
    19aa:	ea e3       	ldi	r30, 0x3A	; 58
    19ac:	f0 e0       	ldi	r31, 0x00	; 0
    19ae:	8a 81       	ldd	r24, Y+2	; 0x02
    19b0:	80 83       	st	Z, r24
    19b2:	0e c0       	rjmp	.+28     	; 0x19d0 <DIO_SetPortMode+0x1ea>
            break;
        case DIO_PORTB:
            DDRB = mode;
    19b4:	e7 e3       	ldi	r30, 0x37	; 55
    19b6:	f0 e0       	ldi	r31, 0x00	; 0
    19b8:	8a 81       	ldd	r24, Y+2	; 0x02
    19ba:	80 83       	st	Z, r24
    19bc:	09 c0       	rjmp	.+18     	; 0x19d0 <DIO_SetPortMode+0x1ea>
            break;
        case DIO_PORTC:
            DDRC = mode;
    19be:	e4 e3       	ldi	r30, 0x34	; 52
    19c0:	f0 e0       	ldi	r31, 0x00	; 0
    19c2:	8a 81       	ldd	r24, Y+2	; 0x02
    19c4:	80 83       	st	Z, r24
    19c6:	04 c0       	rjmp	.+8      	; 0x19d0 <DIO_SetPortMode+0x1ea>
            break;
        case DIO_PORTD:
            DDRD = mode;
    19c8:	e1 e3       	ldi	r30, 0x31	; 49
    19ca:	f0 e0       	ldi	r31, 0x00	; 0
    19cc:	8a 81       	ldd	r24, Y+2	; 0x02
    19ce:	80 83       	st	Z, r24
        default:
            break;
        }

    }
}
    19d0:	2a 96       	adiw	r28, 0x0a	; 10
    19d2:	0f b6       	in	r0, 0x3f	; 63
    19d4:	f8 94       	cli
    19d6:	de bf       	out	0x3e, r29	; 62
    19d8:	0f be       	out	0x3f, r0	; 63
    19da:	cd bf       	out	0x3d, r28	; 61
    19dc:	cf 91       	pop	r28
    19de:	df 91       	pop	r29
    19e0:	08 95       	ret

000019e2 <DIO_SetPinLevel>:


void DIO_SetPinLevel(DIO_PortType port, DIO_PinType pin, DIO_LevelType level) {
    19e2:	df 93       	push	r29
    19e4:	cf 93       	push	r28
    19e6:	cd b7       	in	r28, 0x3d	; 61
    19e8:	de b7       	in	r29, 0x3e	; 62
    19ea:	27 97       	sbiw	r28, 0x07	; 7
    19ec:	0f b6       	in	r0, 0x3f	; 63
    19ee:	f8 94       	cli
    19f0:	de bf       	out	0x3e, r29	; 62
    19f2:	0f be       	out	0x3f, r0	; 63
    19f4:	cd bf       	out	0x3d, r28	; 61
    19f6:	89 83       	std	Y+1, r24	; 0x01
    19f8:	6a 83       	std	Y+2, r22	; 0x02
    19fa:	4b 83       	std	Y+3, r20	; 0x03
    if (level == DIO_HIGH)
    19fc:	8b 81       	ldd	r24, Y+3	; 0x03
    19fe:	81 30       	cpi	r24, 0x01	; 1
    1a00:	09 f0       	breq	.+2      	; 0x1a04 <DIO_SetPinLevel+0x22>
    1a02:	6f c0       	rjmp	.+222    	; 0x1ae2 <DIO_SetPinLevel+0x100>
    {
        switch (port)
    1a04:	89 81       	ldd	r24, Y+1	; 0x01
    1a06:	28 2f       	mov	r18, r24
    1a08:	30 e0       	ldi	r19, 0x00	; 0
    1a0a:	3f 83       	std	Y+7, r19	; 0x07
    1a0c:	2e 83       	std	Y+6, r18	; 0x06
    1a0e:	8e 81       	ldd	r24, Y+6	; 0x06
    1a10:	9f 81       	ldd	r25, Y+7	; 0x07
    1a12:	81 30       	cpi	r24, 0x01	; 1
    1a14:	91 05       	cpc	r25, r1
    1a16:	49 f1       	breq	.+82     	; 0x1a6a <DIO_SetPinLevel+0x88>
    1a18:	2e 81       	ldd	r18, Y+6	; 0x06
    1a1a:	3f 81       	ldd	r19, Y+7	; 0x07
    1a1c:	22 30       	cpi	r18, 0x02	; 2
    1a1e:	31 05       	cpc	r19, r1
    1a20:	2c f4       	brge	.+10     	; 0x1a2c <DIO_SetPinLevel+0x4a>
    1a22:	8e 81       	ldd	r24, Y+6	; 0x06
    1a24:	9f 81       	ldd	r25, Y+7	; 0x07
    1a26:	00 97       	sbiw	r24, 0x00	; 0
    1a28:	61 f0       	breq	.+24     	; 0x1a42 <DIO_SetPinLevel+0x60>
    1a2a:	d2 c0       	rjmp	.+420    	; 0x1bd0 <DIO_SetPinLevel+0x1ee>
    1a2c:	2e 81       	ldd	r18, Y+6	; 0x06
    1a2e:	3f 81       	ldd	r19, Y+7	; 0x07
    1a30:	22 30       	cpi	r18, 0x02	; 2
    1a32:	31 05       	cpc	r19, r1
    1a34:	71 f1       	breq	.+92     	; 0x1a92 <DIO_SetPinLevel+0xb0>
    1a36:	8e 81       	ldd	r24, Y+6	; 0x06
    1a38:	9f 81       	ldd	r25, Y+7	; 0x07
    1a3a:	83 30       	cpi	r24, 0x03	; 3
    1a3c:	91 05       	cpc	r25, r1
    1a3e:	e9 f1       	breq	.+122    	; 0x1aba <DIO_SetPinLevel+0xd8>
    1a40:	c7 c0       	rjmp	.+398    	; 0x1bd0 <DIO_SetPinLevel+0x1ee>
        {
        case DIO_PORTA:
            SET_BIT(PORTA, pin);
    1a42:	ab e3       	ldi	r26, 0x3B	; 59
    1a44:	b0 e0       	ldi	r27, 0x00	; 0
    1a46:	eb e3       	ldi	r30, 0x3B	; 59
    1a48:	f0 e0       	ldi	r31, 0x00	; 0
    1a4a:	80 81       	ld	r24, Z
    1a4c:	48 2f       	mov	r20, r24
    1a4e:	8a 81       	ldd	r24, Y+2	; 0x02
    1a50:	28 2f       	mov	r18, r24
    1a52:	30 e0       	ldi	r19, 0x00	; 0
    1a54:	81 e0       	ldi	r24, 0x01	; 1
    1a56:	90 e0       	ldi	r25, 0x00	; 0
    1a58:	02 2e       	mov	r0, r18
    1a5a:	02 c0       	rjmp	.+4      	; 0x1a60 <DIO_SetPinLevel+0x7e>
    1a5c:	88 0f       	add	r24, r24
    1a5e:	99 1f       	adc	r25, r25
    1a60:	0a 94       	dec	r0
    1a62:	e2 f7       	brpl	.-8      	; 0x1a5c <DIO_SetPinLevel+0x7a>
    1a64:	84 2b       	or	r24, r20
    1a66:	8c 93       	st	X, r24
    1a68:	b3 c0       	rjmp	.+358    	; 0x1bd0 <DIO_SetPinLevel+0x1ee>
            break;
        case DIO_PORTB:
            SET_BIT(PORTB, pin);
    1a6a:	a8 e3       	ldi	r26, 0x38	; 56
    1a6c:	b0 e0       	ldi	r27, 0x00	; 0
    1a6e:	e8 e3       	ldi	r30, 0x38	; 56
    1a70:	f0 e0       	ldi	r31, 0x00	; 0
    1a72:	80 81       	ld	r24, Z
    1a74:	48 2f       	mov	r20, r24
    1a76:	8a 81       	ldd	r24, Y+2	; 0x02
    1a78:	28 2f       	mov	r18, r24
    1a7a:	30 e0       	ldi	r19, 0x00	; 0
    1a7c:	81 e0       	ldi	r24, 0x01	; 1
    1a7e:	90 e0       	ldi	r25, 0x00	; 0
    1a80:	02 2e       	mov	r0, r18
    1a82:	02 c0       	rjmp	.+4      	; 0x1a88 <DIO_SetPinLevel+0xa6>
    1a84:	88 0f       	add	r24, r24
    1a86:	99 1f       	adc	r25, r25
    1a88:	0a 94       	dec	r0
    1a8a:	e2 f7       	brpl	.-8      	; 0x1a84 <DIO_SetPinLevel+0xa2>
    1a8c:	84 2b       	or	r24, r20
    1a8e:	8c 93       	st	X, r24
    1a90:	9f c0       	rjmp	.+318    	; 0x1bd0 <DIO_SetPinLevel+0x1ee>
            break;
        case DIO_PORTC:
            SET_BIT(PORTC, pin);
    1a92:	a5 e3       	ldi	r26, 0x35	; 53
    1a94:	b0 e0       	ldi	r27, 0x00	; 0
    1a96:	e5 e3       	ldi	r30, 0x35	; 53
    1a98:	f0 e0       	ldi	r31, 0x00	; 0
    1a9a:	80 81       	ld	r24, Z
    1a9c:	48 2f       	mov	r20, r24
    1a9e:	8a 81       	ldd	r24, Y+2	; 0x02
    1aa0:	28 2f       	mov	r18, r24
    1aa2:	30 e0       	ldi	r19, 0x00	; 0
    1aa4:	81 e0       	ldi	r24, 0x01	; 1
    1aa6:	90 e0       	ldi	r25, 0x00	; 0
    1aa8:	02 2e       	mov	r0, r18
    1aaa:	02 c0       	rjmp	.+4      	; 0x1ab0 <DIO_SetPinLevel+0xce>
    1aac:	88 0f       	add	r24, r24
    1aae:	99 1f       	adc	r25, r25
    1ab0:	0a 94       	dec	r0
    1ab2:	e2 f7       	brpl	.-8      	; 0x1aac <DIO_SetPinLevel+0xca>
    1ab4:	84 2b       	or	r24, r20
    1ab6:	8c 93       	st	X, r24
    1ab8:	8b c0       	rjmp	.+278    	; 0x1bd0 <DIO_SetPinLevel+0x1ee>
            break;
        case DIO_PORTD:
            SET_BIT(PORTD, pin);
    1aba:	a2 e3       	ldi	r26, 0x32	; 50
    1abc:	b0 e0       	ldi	r27, 0x00	; 0
    1abe:	e2 e3       	ldi	r30, 0x32	; 50
    1ac0:	f0 e0       	ldi	r31, 0x00	; 0
    1ac2:	80 81       	ld	r24, Z
    1ac4:	48 2f       	mov	r20, r24
    1ac6:	8a 81       	ldd	r24, Y+2	; 0x02
    1ac8:	28 2f       	mov	r18, r24
    1aca:	30 e0       	ldi	r19, 0x00	; 0
    1acc:	81 e0       	ldi	r24, 0x01	; 1
    1ace:	90 e0       	ldi	r25, 0x00	; 0
    1ad0:	02 2e       	mov	r0, r18
    1ad2:	02 c0       	rjmp	.+4      	; 0x1ad8 <DIO_SetPinLevel+0xf6>
    1ad4:	88 0f       	add	r24, r24
    1ad6:	99 1f       	adc	r25, r25
    1ad8:	0a 94       	dec	r0
    1ada:	e2 f7       	brpl	.-8      	; 0x1ad4 <DIO_SetPinLevel+0xf2>
    1adc:	84 2b       	or	r24, r20
    1ade:	8c 93       	st	X, r24
    1ae0:	77 c0       	rjmp	.+238    	; 0x1bd0 <DIO_SetPinLevel+0x1ee>
            break;
        default:
            break;
        }
    }
    else if (level == DIO_LOW)
    1ae2:	8b 81       	ldd	r24, Y+3	; 0x03
    1ae4:	88 23       	and	r24, r24
    1ae6:	09 f0       	breq	.+2      	; 0x1aea <DIO_SetPinLevel+0x108>
    1ae8:	73 c0       	rjmp	.+230    	; 0x1bd0 <DIO_SetPinLevel+0x1ee>
    {
        switch (port)
    1aea:	89 81       	ldd	r24, Y+1	; 0x01
    1aec:	28 2f       	mov	r18, r24
    1aee:	30 e0       	ldi	r19, 0x00	; 0
    1af0:	3d 83       	std	Y+5, r19	; 0x05
    1af2:	2c 83       	std	Y+4, r18	; 0x04
    1af4:	8c 81       	ldd	r24, Y+4	; 0x04
    1af6:	9d 81       	ldd	r25, Y+5	; 0x05
    1af8:	81 30       	cpi	r24, 0x01	; 1
    1afa:	91 05       	cpc	r25, r1
    1afc:	59 f1       	breq	.+86     	; 0x1b54 <DIO_SetPinLevel+0x172>
    1afe:	2c 81       	ldd	r18, Y+4	; 0x04
    1b00:	3d 81       	ldd	r19, Y+5	; 0x05
    1b02:	22 30       	cpi	r18, 0x02	; 2
    1b04:	31 05       	cpc	r19, r1
    1b06:	2c f4       	brge	.+10     	; 0x1b12 <DIO_SetPinLevel+0x130>
    1b08:	8c 81       	ldd	r24, Y+4	; 0x04
    1b0a:	9d 81       	ldd	r25, Y+5	; 0x05
    1b0c:	00 97       	sbiw	r24, 0x00	; 0
    1b0e:	69 f0       	breq	.+26     	; 0x1b2a <DIO_SetPinLevel+0x148>
    1b10:	5f c0       	rjmp	.+190    	; 0x1bd0 <DIO_SetPinLevel+0x1ee>
    1b12:	2c 81       	ldd	r18, Y+4	; 0x04
    1b14:	3d 81       	ldd	r19, Y+5	; 0x05
    1b16:	22 30       	cpi	r18, 0x02	; 2
    1b18:	31 05       	cpc	r19, r1
    1b1a:	89 f1       	breq	.+98     	; 0x1b7e <DIO_SetPinLevel+0x19c>
    1b1c:	8c 81       	ldd	r24, Y+4	; 0x04
    1b1e:	9d 81       	ldd	r25, Y+5	; 0x05
    1b20:	83 30       	cpi	r24, 0x03	; 3
    1b22:	91 05       	cpc	r25, r1
    1b24:	09 f4       	brne	.+2      	; 0x1b28 <DIO_SetPinLevel+0x146>
    1b26:	40 c0       	rjmp	.+128    	; 0x1ba8 <DIO_SetPinLevel+0x1c6>
    1b28:	53 c0       	rjmp	.+166    	; 0x1bd0 <DIO_SetPinLevel+0x1ee>
        {
        case DIO_PORTA:
            CLR_BIT(PORTA, pin);
    1b2a:	ab e3       	ldi	r26, 0x3B	; 59
    1b2c:	b0 e0       	ldi	r27, 0x00	; 0
    1b2e:	eb e3       	ldi	r30, 0x3B	; 59
    1b30:	f0 e0       	ldi	r31, 0x00	; 0
    1b32:	80 81       	ld	r24, Z
    1b34:	48 2f       	mov	r20, r24
    1b36:	8a 81       	ldd	r24, Y+2	; 0x02
    1b38:	28 2f       	mov	r18, r24
    1b3a:	30 e0       	ldi	r19, 0x00	; 0
    1b3c:	81 e0       	ldi	r24, 0x01	; 1
    1b3e:	90 e0       	ldi	r25, 0x00	; 0
    1b40:	02 2e       	mov	r0, r18
    1b42:	02 c0       	rjmp	.+4      	; 0x1b48 <DIO_SetPinLevel+0x166>
    1b44:	88 0f       	add	r24, r24
    1b46:	99 1f       	adc	r25, r25
    1b48:	0a 94       	dec	r0
    1b4a:	e2 f7       	brpl	.-8      	; 0x1b44 <DIO_SetPinLevel+0x162>
    1b4c:	80 95       	com	r24
    1b4e:	84 23       	and	r24, r20
    1b50:	8c 93       	st	X, r24
    1b52:	3e c0       	rjmp	.+124    	; 0x1bd0 <DIO_SetPinLevel+0x1ee>
            break;
        case DIO_PORTB:
            CLR_BIT(PORTB, pin);
    1b54:	a8 e3       	ldi	r26, 0x38	; 56
    1b56:	b0 e0       	ldi	r27, 0x00	; 0
    1b58:	e8 e3       	ldi	r30, 0x38	; 56
    1b5a:	f0 e0       	ldi	r31, 0x00	; 0
    1b5c:	80 81       	ld	r24, Z
    1b5e:	48 2f       	mov	r20, r24
    1b60:	8a 81       	ldd	r24, Y+2	; 0x02
    1b62:	28 2f       	mov	r18, r24
    1b64:	30 e0       	ldi	r19, 0x00	; 0
    1b66:	81 e0       	ldi	r24, 0x01	; 1
    1b68:	90 e0       	ldi	r25, 0x00	; 0
    1b6a:	02 2e       	mov	r0, r18
    1b6c:	02 c0       	rjmp	.+4      	; 0x1b72 <DIO_SetPinLevel+0x190>
    1b6e:	88 0f       	add	r24, r24
    1b70:	99 1f       	adc	r25, r25
    1b72:	0a 94       	dec	r0
    1b74:	e2 f7       	brpl	.-8      	; 0x1b6e <DIO_SetPinLevel+0x18c>
    1b76:	80 95       	com	r24
    1b78:	84 23       	and	r24, r20
    1b7a:	8c 93       	st	X, r24
    1b7c:	29 c0       	rjmp	.+82     	; 0x1bd0 <DIO_SetPinLevel+0x1ee>
            break;
        case DIO_PORTC:
            CLR_BIT(PORTC, pin);
    1b7e:	a5 e3       	ldi	r26, 0x35	; 53
    1b80:	b0 e0       	ldi	r27, 0x00	; 0
    1b82:	e5 e3       	ldi	r30, 0x35	; 53
    1b84:	f0 e0       	ldi	r31, 0x00	; 0
    1b86:	80 81       	ld	r24, Z
    1b88:	48 2f       	mov	r20, r24
    1b8a:	8a 81       	ldd	r24, Y+2	; 0x02
    1b8c:	28 2f       	mov	r18, r24
    1b8e:	30 e0       	ldi	r19, 0x00	; 0
    1b90:	81 e0       	ldi	r24, 0x01	; 1
    1b92:	90 e0       	ldi	r25, 0x00	; 0
    1b94:	02 2e       	mov	r0, r18
    1b96:	02 c0       	rjmp	.+4      	; 0x1b9c <DIO_SetPinLevel+0x1ba>
    1b98:	88 0f       	add	r24, r24
    1b9a:	99 1f       	adc	r25, r25
    1b9c:	0a 94       	dec	r0
    1b9e:	e2 f7       	brpl	.-8      	; 0x1b98 <DIO_SetPinLevel+0x1b6>
    1ba0:	80 95       	com	r24
    1ba2:	84 23       	and	r24, r20
    1ba4:	8c 93       	st	X, r24
    1ba6:	14 c0       	rjmp	.+40     	; 0x1bd0 <DIO_SetPinLevel+0x1ee>
            break;
        case DIO_PORTD:
            CLR_BIT(PORTD, pin);
    1ba8:	a2 e3       	ldi	r26, 0x32	; 50
    1baa:	b0 e0       	ldi	r27, 0x00	; 0
    1bac:	e2 e3       	ldi	r30, 0x32	; 50
    1bae:	f0 e0       	ldi	r31, 0x00	; 0
    1bb0:	80 81       	ld	r24, Z
    1bb2:	48 2f       	mov	r20, r24
    1bb4:	8a 81       	ldd	r24, Y+2	; 0x02
    1bb6:	28 2f       	mov	r18, r24
    1bb8:	30 e0       	ldi	r19, 0x00	; 0
    1bba:	81 e0       	ldi	r24, 0x01	; 1
    1bbc:	90 e0       	ldi	r25, 0x00	; 0
    1bbe:	02 2e       	mov	r0, r18
    1bc0:	02 c0       	rjmp	.+4      	; 0x1bc6 <DIO_SetPinLevel+0x1e4>
    1bc2:	88 0f       	add	r24, r24
    1bc4:	99 1f       	adc	r25, r25
    1bc6:	0a 94       	dec	r0
    1bc8:	e2 f7       	brpl	.-8      	; 0x1bc2 <DIO_SetPinLevel+0x1e0>
    1bca:	80 95       	com	r24
    1bcc:	84 23       	and	r24, r20
    1bce:	8c 93       	st	X, r24
            break;
        default:
            break;
        }
    }
}
    1bd0:	27 96       	adiw	r28, 0x07	; 7
    1bd2:	0f b6       	in	r0, 0x3f	; 63
    1bd4:	f8 94       	cli
    1bd6:	de bf       	out	0x3e, r29	; 62
    1bd8:	0f be       	out	0x3f, r0	; 63
    1bda:	cd bf       	out	0x3d, r28	; 61
    1bdc:	cf 91       	pop	r28
    1bde:	df 91       	pop	r29
    1be0:	08 95       	ret

00001be2 <DIO_SetPortLevel>:

void DIO_SetPortLevel (DIO_PortType port, DIO_LevelType level) {
    1be2:	df 93       	push	r29
    1be4:	cf 93       	push	r28
    1be6:	cd b7       	in	r28, 0x3d	; 61
    1be8:	de b7       	in	r29, 0x3e	; 62
    1bea:	28 97       	sbiw	r28, 0x08	; 8
    1bec:	0f b6       	in	r0, 0x3f	; 63
    1bee:	f8 94       	cli
    1bf0:	de bf       	out	0x3e, r29	; 62
    1bf2:	0f be       	out	0x3f, r0	; 63
    1bf4:	cd bf       	out	0x3d, r28	; 61
    1bf6:	89 83       	std	Y+1, r24	; 0x01
    1bf8:	6a 83       	std	Y+2, r22	; 0x02
    if (level == DIO_HIGH) {
    1bfa:	8a 81       	ldd	r24, Y+2	; 0x02
    1bfc:	81 30       	cpi	r24, 0x01	; 1
    1bfe:	99 f5       	brne	.+102    	; 0x1c66 <DIO_SetPortLevel+0x84>
        switch (port)
    1c00:	89 81       	ldd	r24, Y+1	; 0x01
    1c02:	28 2f       	mov	r18, r24
    1c04:	30 e0       	ldi	r19, 0x00	; 0
    1c06:	38 87       	std	Y+8, r19	; 0x08
    1c08:	2f 83       	std	Y+7, r18	; 0x07
    1c0a:	8f 81       	ldd	r24, Y+7	; 0x07
    1c0c:	98 85       	ldd	r25, Y+8	; 0x08
    1c0e:	81 30       	cpi	r24, 0x01	; 1
    1c10:	91 05       	cpc	r25, r1
    1c12:	d1 f0       	breq	.+52     	; 0x1c48 <DIO_SetPortLevel+0x66>
    1c14:	2f 81       	ldd	r18, Y+7	; 0x07
    1c16:	38 85       	ldd	r19, Y+8	; 0x08
    1c18:	22 30       	cpi	r18, 0x02	; 2
    1c1a:	31 05       	cpc	r19, r1
    1c1c:	2c f4       	brge	.+10     	; 0x1c28 <DIO_SetPortLevel+0x46>
    1c1e:	8f 81       	ldd	r24, Y+7	; 0x07
    1c20:	98 85       	ldd	r25, Y+8	; 0x08
    1c22:	00 97       	sbiw	r24, 0x00	; 0
    1c24:	61 f0       	breq	.+24     	; 0x1c3e <DIO_SetPortLevel+0x5c>
    1c26:	83 c0       	rjmp	.+262    	; 0x1d2e <DIO_SetPortLevel+0x14c>
    1c28:	2f 81       	ldd	r18, Y+7	; 0x07
    1c2a:	38 85       	ldd	r19, Y+8	; 0x08
    1c2c:	22 30       	cpi	r18, 0x02	; 2
    1c2e:	31 05       	cpc	r19, r1
    1c30:	81 f0       	breq	.+32     	; 0x1c52 <DIO_SetPortLevel+0x70>
    1c32:	8f 81       	ldd	r24, Y+7	; 0x07
    1c34:	98 85       	ldd	r25, Y+8	; 0x08
    1c36:	83 30       	cpi	r24, 0x03	; 3
    1c38:	91 05       	cpc	r25, r1
    1c3a:	81 f0       	breq	.+32     	; 0x1c5c <DIO_SetPortLevel+0x7a>
    1c3c:	78 c0       	rjmp	.+240    	; 0x1d2e <DIO_SetPortLevel+0x14c>
        {
        case DIO_PORTA:
            PORTA = 0xFF;
    1c3e:	eb e3       	ldi	r30, 0x3B	; 59
    1c40:	f0 e0       	ldi	r31, 0x00	; 0
    1c42:	8f ef       	ldi	r24, 0xFF	; 255
    1c44:	80 83       	st	Z, r24
    1c46:	73 c0       	rjmp	.+230    	; 0x1d2e <DIO_SetPortLevel+0x14c>
            break;
        case DIO_PORTB:
            PORTB = 0xFF;
    1c48:	e8 e3       	ldi	r30, 0x38	; 56
    1c4a:	f0 e0       	ldi	r31, 0x00	; 0
    1c4c:	8f ef       	ldi	r24, 0xFF	; 255
    1c4e:	80 83       	st	Z, r24
    1c50:	6e c0       	rjmp	.+220    	; 0x1d2e <DIO_SetPortLevel+0x14c>
            break;
        case DIO_PORTC:
            PORTC = 0xFF;
    1c52:	e5 e3       	ldi	r30, 0x35	; 53
    1c54:	f0 e0       	ldi	r31, 0x00	; 0
    1c56:	8f ef       	ldi	r24, 0xFF	; 255
    1c58:	80 83       	st	Z, r24
    1c5a:	69 c0       	rjmp	.+210    	; 0x1d2e <DIO_SetPortLevel+0x14c>
            break;
        case DIO_PORTD:
            PORTD = 0xFF;
    1c5c:	e2 e3       	ldi	r30, 0x32	; 50
    1c5e:	f0 e0       	ldi	r31, 0x00	; 0
    1c60:	8f ef       	ldi	r24, 0xFF	; 255
    1c62:	80 83       	st	Z, r24
    1c64:	64 c0       	rjmp	.+200    	; 0x1d2e <DIO_SetPortLevel+0x14c>
            break;
        default:
            break;
        }
    }
    else if (level == DIO_LOW) {
    1c66:	8a 81       	ldd	r24, Y+2	; 0x02
    1c68:	88 23       	and	r24, r24
    1c6a:	79 f5       	brne	.+94     	; 0x1cca <DIO_SetPortLevel+0xe8>
        switch (port)
    1c6c:	89 81       	ldd	r24, Y+1	; 0x01
    1c6e:	28 2f       	mov	r18, r24
    1c70:	30 e0       	ldi	r19, 0x00	; 0
    1c72:	3e 83       	std	Y+6, r19	; 0x06
    1c74:	2d 83       	std	Y+5, r18	; 0x05
    1c76:	8d 81       	ldd	r24, Y+5	; 0x05
    1c78:	9e 81       	ldd	r25, Y+6	; 0x06
    1c7a:	81 30       	cpi	r24, 0x01	; 1
    1c7c:	91 05       	cpc	r25, r1
    1c7e:	c9 f0       	breq	.+50     	; 0x1cb2 <DIO_SetPortLevel+0xd0>
    1c80:	2d 81       	ldd	r18, Y+5	; 0x05
    1c82:	3e 81       	ldd	r19, Y+6	; 0x06
    1c84:	22 30       	cpi	r18, 0x02	; 2
    1c86:	31 05       	cpc	r19, r1
    1c88:	2c f4       	brge	.+10     	; 0x1c94 <DIO_SetPortLevel+0xb2>
    1c8a:	8d 81       	ldd	r24, Y+5	; 0x05
    1c8c:	9e 81       	ldd	r25, Y+6	; 0x06
    1c8e:	00 97       	sbiw	r24, 0x00	; 0
    1c90:	61 f0       	breq	.+24     	; 0x1caa <DIO_SetPortLevel+0xc8>
    1c92:	4d c0       	rjmp	.+154    	; 0x1d2e <DIO_SetPortLevel+0x14c>
    1c94:	2d 81       	ldd	r18, Y+5	; 0x05
    1c96:	3e 81       	ldd	r19, Y+6	; 0x06
    1c98:	22 30       	cpi	r18, 0x02	; 2
    1c9a:	31 05       	cpc	r19, r1
    1c9c:	71 f0       	breq	.+28     	; 0x1cba <DIO_SetPortLevel+0xd8>
    1c9e:	8d 81       	ldd	r24, Y+5	; 0x05
    1ca0:	9e 81       	ldd	r25, Y+6	; 0x06
    1ca2:	83 30       	cpi	r24, 0x03	; 3
    1ca4:	91 05       	cpc	r25, r1
    1ca6:	69 f0       	breq	.+26     	; 0x1cc2 <DIO_SetPortLevel+0xe0>
    1ca8:	42 c0       	rjmp	.+132    	; 0x1d2e <DIO_SetPortLevel+0x14c>
        {
        case DIO_PORTA:
            PORTA = 0x00;
    1caa:	eb e3       	ldi	r30, 0x3B	; 59
    1cac:	f0 e0       	ldi	r31, 0x00	; 0
    1cae:	10 82       	st	Z, r1
    1cb0:	3e c0       	rjmp	.+124    	; 0x1d2e <DIO_SetPortLevel+0x14c>
            break;
        case DIO_PORTB:
            PORTB = 0x00;
    1cb2:	e8 e3       	ldi	r30, 0x38	; 56
    1cb4:	f0 e0       	ldi	r31, 0x00	; 0
    1cb6:	10 82       	st	Z, r1
    1cb8:	3a c0       	rjmp	.+116    	; 0x1d2e <DIO_SetPortLevel+0x14c>
            break;
        case DIO_PORTC:
            PORTC = 0x00;
    1cba:	e5 e3       	ldi	r30, 0x35	; 53
    1cbc:	f0 e0       	ldi	r31, 0x00	; 0
    1cbe:	10 82       	st	Z, r1
    1cc0:	36 c0       	rjmp	.+108    	; 0x1d2e <DIO_SetPortLevel+0x14c>
            break;
        case DIO_PORTD:
            PORTD = 0x00;
    1cc2:	e2 e3       	ldi	r30, 0x32	; 50
    1cc4:	f0 e0       	ldi	r31, 0x00	; 0
    1cc6:	10 82       	st	Z, r1
    1cc8:	32 c0       	rjmp	.+100    	; 0x1d2e <DIO_SetPortLevel+0x14c>
        default:
            break;
        }
    }
    else {
        switch (port)
    1cca:	89 81       	ldd	r24, Y+1	; 0x01
    1ccc:	28 2f       	mov	r18, r24
    1cce:	30 e0       	ldi	r19, 0x00	; 0
    1cd0:	3c 83       	std	Y+4, r19	; 0x04
    1cd2:	2b 83       	std	Y+3, r18	; 0x03
    1cd4:	8b 81       	ldd	r24, Y+3	; 0x03
    1cd6:	9c 81       	ldd	r25, Y+4	; 0x04
    1cd8:	81 30       	cpi	r24, 0x01	; 1
    1cda:	91 05       	cpc	r25, r1
    1cdc:	d1 f0       	breq	.+52     	; 0x1d12 <DIO_SetPortLevel+0x130>
    1cde:	2b 81       	ldd	r18, Y+3	; 0x03
    1ce0:	3c 81       	ldd	r19, Y+4	; 0x04
    1ce2:	22 30       	cpi	r18, 0x02	; 2
    1ce4:	31 05       	cpc	r19, r1
    1ce6:	2c f4       	brge	.+10     	; 0x1cf2 <DIO_SetPortLevel+0x110>
    1ce8:	8b 81       	ldd	r24, Y+3	; 0x03
    1cea:	9c 81       	ldd	r25, Y+4	; 0x04
    1cec:	00 97       	sbiw	r24, 0x00	; 0
    1cee:	61 f0       	breq	.+24     	; 0x1d08 <DIO_SetPortLevel+0x126>
    1cf0:	1e c0       	rjmp	.+60     	; 0x1d2e <DIO_SetPortLevel+0x14c>
    1cf2:	2b 81       	ldd	r18, Y+3	; 0x03
    1cf4:	3c 81       	ldd	r19, Y+4	; 0x04
    1cf6:	22 30       	cpi	r18, 0x02	; 2
    1cf8:	31 05       	cpc	r19, r1
    1cfa:	81 f0       	breq	.+32     	; 0x1d1c <DIO_SetPortLevel+0x13a>
    1cfc:	8b 81       	ldd	r24, Y+3	; 0x03
    1cfe:	9c 81       	ldd	r25, Y+4	; 0x04
    1d00:	83 30       	cpi	r24, 0x03	; 3
    1d02:	91 05       	cpc	r25, r1
    1d04:	81 f0       	breq	.+32     	; 0x1d26 <DIO_SetPortLevel+0x144>
    1d06:	13 c0       	rjmp	.+38     	; 0x1d2e <DIO_SetPortLevel+0x14c>
        {
        case DIO_PORTA:
            PORTA = level;
    1d08:	eb e3       	ldi	r30, 0x3B	; 59
    1d0a:	f0 e0       	ldi	r31, 0x00	; 0
    1d0c:	8a 81       	ldd	r24, Y+2	; 0x02
    1d0e:	80 83       	st	Z, r24
    1d10:	0e c0       	rjmp	.+28     	; 0x1d2e <DIO_SetPortLevel+0x14c>
            break;
        case DIO_PORTB:
            PORTB = level;
    1d12:	e8 e3       	ldi	r30, 0x38	; 56
    1d14:	f0 e0       	ldi	r31, 0x00	; 0
    1d16:	8a 81       	ldd	r24, Y+2	; 0x02
    1d18:	80 83       	st	Z, r24
    1d1a:	09 c0       	rjmp	.+18     	; 0x1d2e <DIO_SetPortLevel+0x14c>
            break;
        case DIO_PORTC:
            PORTC = level;
    1d1c:	e5 e3       	ldi	r30, 0x35	; 53
    1d1e:	f0 e0       	ldi	r31, 0x00	; 0
    1d20:	8a 81       	ldd	r24, Y+2	; 0x02
    1d22:	80 83       	st	Z, r24
    1d24:	04 c0       	rjmp	.+8      	; 0x1d2e <DIO_SetPortLevel+0x14c>
            break;
        case DIO_PORTD:
            PORTD = level;
    1d26:	e2 e3       	ldi	r30, 0x32	; 50
    1d28:	f0 e0       	ldi	r31, 0x00	; 0
    1d2a:	8a 81       	ldd	r24, Y+2	; 0x02
    1d2c:	80 83       	st	Z, r24
        default:
            break;
        }

    }
}
    1d2e:	28 96       	adiw	r28, 0x08	; 8
    1d30:	0f b6       	in	r0, 0x3f	; 63
    1d32:	f8 94       	cli
    1d34:	de bf       	out	0x3e, r29	; 62
    1d36:	0f be       	out	0x3f, r0	; 63
    1d38:	cd bf       	out	0x3d, r28	; 61
    1d3a:	cf 91       	pop	r28
    1d3c:	df 91       	pop	r29
    1d3e:	08 95       	ret

00001d40 <DIO_ReadPinLevel>:



DIO_LevelType DIO_ReadPinLevel(DIO_PortType port, DIO_PinType pin) {
    1d40:	df 93       	push	r29
    1d42:	cf 93       	push	r28
    1d44:	00 d0       	rcall	.+0      	; 0x1d46 <DIO_ReadPinLevel+0x6>
    1d46:	00 d0       	rcall	.+0      	; 0x1d48 <DIO_ReadPinLevel+0x8>
    1d48:	0f 92       	push	r0
    1d4a:	cd b7       	in	r28, 0x3d	; 61
    1d4c:	de b7       	in	r29, 0x3e	; 62
    1d4e:	8a 83       	std	Y+2, r24	; 0x02
    1d50:	6b 83       	std	Y+3, r22	; 0x03
    DIO_LevelType result = DIO_LOW;
    1d52:	19 82       	std	Y+1, r1	; 0x01
    switch (port)
    1d54:	8a 81       	ldd	r24, Y+2	; 0x02
    1d56:	28 2f       	mov	r18, r24
    1d58:	30 e0       	ldi	r19, 0x00	; 0
    1d5a:	3d 83       	std	Y+5, r19	; 0x05
    1d5c:	2c 83       	std	Y+4, r18	; 0x04
    1d5e:	4c 81       	ldd	r20, Y+4	; 0x04
    1d60:	5d 81       	ldd	r21, Y+5	; 0x05
    1d62:	41 30       	cpi	r20, 0x01	; 1
    1d64:	51 05       	cpc	r21, r1
    1d66:	41 f1       	breq	.+80     	; 0x1db8 <DIO_ReadPinLevel+0x78>
    1d68:	8c 81       	ldd	r24, Y+4	; 0x04
    1d6a:	9d 81       	ldd	r25, Y+5	; 0x05
    1d6c:	82 30       	cpi	r24, 0x02	; 2
    1d6e:	91 05       	cpc	r25, r1
    1d70:	34 f4       	brge	.+12     	; 0x1d7e <DIO_ReadPinLevel+0x3e>
    1d72:	2c 81       	ldd	r18, Y+4	; 0x04
    1d74:	3d 81       	ldd	r19, Y+5	; 0x05
    1d76:	21 15       	cp	r18, r1
    1d78:	31 05       	cpc	r19, r1
    1d7a:	61 f0       	breq	.+24     	; 0x1d94 <DIO_ReadPinLevel+0x54>
    1d7c:	52 c0       	rjmp	.+164    	; 0x1e22 <DIO_ReadPinLevel+0xe2>
    1d7e:	4c 81       	ldd	r20, Y+4	; 0x04
    1d80:	5d 81       	ldd	r21, Y+5	; 0x05
    1d82:	42 30       	cpi	r20, 0x02	; 2
    1d84:	51 05       	cpc	r21, r1
    1d86:	51 f1       	breq	.+84     	; 0x1ddc <DIO_ReadPinLevel+0x9c>
    1d88:	8c 81       	ldd	r24, Y+4	; 0x04
    1d8a:	9d 81       	ldd	r25, Y+5	; 0x05
    1d8c:	83 30       	cpi	r24, 0x03	; 3
    1d8e:	91 05       	cpc	r25, r1
    1d90:	b9 f1       	breq	.+110    	; 0x1e00 <DIO_ReadPinLevel+0xc0>
    1d92:	47 c0       	rjmp	.+142    	; 0x1e22 <DIO_ReadPinLevel+0xe2>
    {
    case DIO_PORTA:
        result = GET_BIT(PINA, pin);
    1d94:	e9 e3       	ldi	r30, 0x39	; 57
    1d96:	f0 e0       	ldi	r31, 0x00	; 0
    1d98:	80 81       	ld	r24, Z
    1d9a:	28 2f       	mov	r18, r24
    1d9c:	30 e0       	ldi	r19, 0x00	; 0
    1d9e:	8b 81       	ldd	r24, Y+3	; 0x03
    1da0:	88 2f       	mov	r24, r24
    1da2:	90 e0       	ldi	r25, 0x00	; 0
    1da4:	a9 01       	movw	r20, r18
    1da6:	02 c0       	rjmp	.+4      	; 0x1dac <DIO_ReadPinLevel+0x6c>
    1da8:	55 95       	asr	r21
    1daa:	47 95       	ror	r20
    1dac:	8a 95       	dec	r24
    1dae:	e2 f7       	brpl	.-8      	; 0x1da8 <DIO_ReadPinLevel+0x68>
    1db0:	ca 01       	movw	r24, r20
    1db2:	81 70       	andi	r24, 0x01	; 1
    1db4:	89 83       	std	Y+1, r24	; 0x01
    1db6:	35 c0       	rjmp	.+106    	; 0x1e22 <DIO_ReadPinLevel+0xe2>
        break;
    case DIO_PORTB:
        result = GET_BIT(PINB, pin);
    1db8:	e6 e3       	ldi	r30, 0x36	; 54
    1dba:	f0 e0       	ldi	r31, 0x00	; 0
    1dbc:	80 81       	ld	r24, Z
    1dbe:	28 2f       	mov	r18, r24
    1dc0:	30 e0       	ldi	r19, 0x00	; 0
    1dc2:	8b 81       	ldd	r24, Y+3	; 0x03
    1dc4:	88 2f       	mov	r24, r24
    1dc6:	90 e0       	ldi	r25, 0x00	; 0
    1dc8:	a9 01       	movw	r20, r18
    1dca:	02 c0       	rjmp	.+4      	; 0x1dd0 <DIO_ReadPinLevel+0x90>
    1dcc:	55 95       	asr	r21
    1dce:	47 95       	ror	r20
    1dd0:	8a 95       	dec	r24
    1dd2:	e2 f7       	brpl	.-8      	; 0x1dcc <DIO_ReadPinLevel+0x8c>
    1dd4:	ca 01       	movw	r24, r20
    1dd6:	81 70       	andi	r24, 0x01	; 1
    1dd8:	89 83       	std	Y+1, r24	; 0x01
    1dda:	23 c0       	rjmp	.+70     	; 0x1e22 <DIO_ReadPinLevel+0xe2>
        break;
    case DIO_PORTC:
        result = GET_BIT(PINC, pin);
    1ddc:	e3 e3       	ldi	r30, 0x33	; 51
    1dde:	f0 e0       	ldi	r31, 0x00	; 0
    1de0:	80 81       	ld	r24, Z
    1de2:	28 2f       	mov	r18, r24
    1de4:	30 e0       	ldi	r19, 0x00	; 0
    1de6:	8b 81       	ldd	r24, Y+3	; 0x03
    1de8:	88 2f       	mov	r24, r24
    1dea:	90 e0       	ldi	r25, 0x00	; 0
    1dec:	a9 01       	movw	r20, r18
    1dee:	02 c0       	rjmp	.+4      	; 0x1df4 <DIO_ReadPinLevel+0xb4>
    1df0:	55 95       	asr	r21
    1df2:	47 95       	ror	r20
    1df4:	8a 95       	dec	r24
    1df6:	e2 f7       	brpl	.-8      	; 0x1df0 <DIO_ReadPinLevel+0xb0>
    1df8:	ca 01       	movw	r24, r20
    1dfa:	81 70       	andi	r24, 0x01	; 1
    1dfc:	89 83       	std	Y+1, r24	; 0x01
    1dfe:	11 c0       	rjmp	.+34     	; 0x1e22 <DIO_ReadPinLevel+0xe2>
        break;
    case DIO_PORTD:
        result = GET_BIT(PIND, pin);
    1e00:	e0 e3       	ldi	r30, 0x30	; 48
    1e02:	f0 e0       	ldi	r31, 0x00	; 0
    1e04:	80 81       	ld	r24, Z
    1e06:	28 2f       	mov	r18, r24
    1e08:	30 e0       	ldi	r19, 0x00	; 0
    1e0a:	8b 81       	ldd	r24, Y+3	; 0x03
    1e0c:	88 2f       	mov	r24, r24
    1e0e:	90 e0       	ldi	r25, 0x00	; 0
    1e10:	a9 01       	movw	r20, r18
    1e12:	02 c0       	rjmp	.+4      	; 0x1e18 <DIO_ReadPinLevel+0xd8>
    1e14:	55 95       	asr	r21
    1e16:	47 95       	ror	r20
    1e18:	8a 95       	dec	r24
    1e1a:	e2 f7       	brpl	.-8      	; 0x1e14 <DIO_ReadPinLevel+0xd4>
    1e1c:	ca 01       	movw	r24, r20
    1e1e:	81 70       	andi	r24, 0x01	; 1
    1e20:	89 83       	std	Y+1, r24	; 0x01
        break;
    default:
        break;
    }
    return result;
    1e22:	89 81       	ldd	r24, Y+1	; 0x01
}
    1e24:	0f 90       	pop	r0
    1e26:	0f 90       	pop	r0
    1e28:	0f 90       	pop	r0
    1e2a:	0f 90       	pop	r0
    1e2c:	0f 90       	pop	r0
    1e2e:	cf 91       	pop	r28
    1e30:	df 91       	pop	r29
    1e32:	08 95       	ret

00001e34 <DIO_ReadPortLevel>:

DIO_LevelType DIO_ReadPortLevel (DIO_PortType port) {
    1e34:	df 93       	push	r29
    1e36:	cf 93       	push	r28
    1e38:	00 d0       	rcall	.+0      	; 0x1e3a <DIO_ReadPortLevel+0x6>
    1e3a:	00 d0       	rcall	.+0      	; 0x1e3c <DIO_ReadPortLevel+0x8>
    1e3c:	cd b7       	in	r28, 0x3d	; 61
    1e3e:	de b7       	in	r29, 0x3e	; 62
    1e40:	8a 83       	std	Y+2, r24	; 0x02
    u8 result = 0x00;
    1e42:	19 82       	std	Y+1, r1	; 0x01
    switch (port)
    1e44:	8a 81       	ldd	r24, Y+2	; 0x02
    1e46:	28 2f       	mov	r18, r24
    1e48:	30 e0       	ldi	r19, 0x00	; 0
    1e4a:	3c 83       	std	Y+4, r19	; 0x04
    1e4c:	2b 83       	std	Y+3, r18	; 0x03
    1e4e:	8b 81       	ldd	r24, Y+3	; 0x03
    1e50:	9c 81       	ldd	r25, Y+4	; 0x04
    1e52:	81 30       	cpi	r24, 0x01	; 1
    1e54:	91 05       	cpc	r25, r1
    1e56:	49 f1       	breq	.+82     	; 0x1eaa <DIO_ReadPortLevel+0x76>
    1e58:	2b 81       	ldd	r18, Y+3	; 0x03
    1e5a:	3c 81       	ldd	r19, Y+4	; 0x04
    1e5c:	22 30       	cpi	r18, 0x02	; 2
    1e5e:	31 05       	cpc	r19, r1
    1e60:	2c f4       	brge	.+10     	; 0x1e6c <DIO_ReadPortLevel+0x38>
    1e62:	8b 81       	ldd	r24, Y+3	; 0x03
    1e64:	9c 81       	ldd	r25, Y+4	; 0x04
    1e66:	00 97       	sbiw	r24, 0x00	; 0
    1e68:	61 f0       	breq	.+24     	; 0x1e82 <DIO_ReadPortLevel+0x4e>
    1e6a:	5a c0       	rjmp	.+180    	; 0x1f20 <DIO_ReadPortLevel+0xec>
    1e6c:	2b 81       	ldd	r18, Y+3	; 0x03
    1e6e:	3c 81       	ldd	r19, Y+4	; 0x04
    1e70:	22 30       	cpi	r18, 0x02	; 2
    1e72:	31 05       	cpc	r19, r1
    1e74:	71 f1       	breq	.+92     	; 0x1ed2 <DIO_ReadPortLevel+0x9e>
    1e76:	8b 81       	ldd	r24, Y+3	; 0x03
    1e78:	9c 81       	ldd	r25, Y+4	; 0x04
    1e7a:	83 30       	cpi	r24, 0x03	; 3
    1e7c:	91 05       	cpc	r25, r1
    1e7e:	e9 f1       	breq	.+122    	; 0x1efa <DIO_ReadPortLevel+0xc6>
    1e80:	4f c0       	rjmp	.+158    	; 0x1f20 <DIO_ReadPortLevel+0xec>
    {
    case DIO_PORTA:
        if (PINA == 0xFF) {
    1e82:	e9 e3       	ldi	r30, 0x39	; 57
    1e84:	f0 e0       	ldi	r31, 0x00	; 0
    1e86:	80 81       	ld	r24, Z
    1e88:	8f 3f       	cpi	r24, 0xFF	; 255
    1e8a:	19 f4       	brne	.+6      	; 0x1e92 <DIO_ReadPortLevel+0x5e>
            result = DIO_HIGH;
    1e8c:	81 e0       	ldi	r24, 0x01	; 1
    1e8e:	89 83       	std	Y+1, r24	; 0x01
    1e90:	47 c0       	rjmp	.+142    	; 0x1f20 <DIO_ReadPortLevel+0xec>
        }
        else if (PINA == 0x00) {
    1e92:	e9 e3       	ldi	r30, 0x39	; 57
    1e94:	f0 e0       	ldi	r31, 0x00	; 0
    1e96:	80 81       	ld	r24, Z
    1e98:	88 23       	and	r24, r24
    1e9a:	11 f4       	brne	.+4      	; 0x1ea0 <DIO_ReadPortLevel+0x6c>
            result = DIO_LOW;
    1e9c:	19 82       	std	Y+1, r1	; 0x01
    1e9e:	40 c0       	rjmp	.+128    	; 0x1f20 <DIO_ReadPortLevel+0xec>
        }
        else {
            result = PINA;
    1ea0:	e9 e3       	ldi	r30, 0x39	; 57
    1ea2:	f0 e0       	ldi	r31, 0x00	; 0
    1ea4:	80 81       	ld	r24, Z
    1ea6:	89 83       	std	Y+1, r24	; 0x01
    1ea8:	3b c0       	rjmp	.+118    	; 0x1f20 <DIO_ReadPortLevel+0xec>
        }
        break;
    case DIO_PORTB:
        if (PINB == 0xFF) {
    1eaa:	e6 e3       	ldi	r30, 0x36	; 54
    1eac:	f0 e0       	ldi	r31, 0x00	; 0
    1eae:	80 81       	ld	r24, Z
    1eb0:	8f 3f       	cpi	r24, 0xFF	; 255
    1eb2:	19 f4       	brne	.+6      	; 0x1eba <DIO_ReadPortLevel+0x86>
            result = DIO_HIGH;
    1eb4:	81 e0       	ldi	r24, 0x01	; 1
    1eb6:	89 83       	std	Y+1, r24	; 0x01
    1eb8:	33 c0       	rjmp	.+102    	; 0x1f20 <DIO_ReadPortLevel+0xec>
        }
        else if (PINB == 0x00) {
    1eba:	e6 e3       	ldi	r30, 0x36	; 54
    1ebc:	f0 e0       	ldi	r31, 0x00	; 0
    1ebe:	80 81       	ld	r24, Z
    1ec0:	88 23       	and	r24, r24
    1ec2:	11 f4       	brne	.+4      	; 0x1ec8 <DIO_ReadPortLevel+0x94>
            result = DIO_LOW;
    1ec4:	19 82       	std	Y+1, r1	; 0x01
    1ec6:	2c c0       	rjmp	.+88     	; 0x1f20 <DIO_ReadPortLevel+0xec>
        }
        else {
            result = PINB;
    1ec8:	e6 e3       	ldi	r30, 0x36	; 54
    1eca:	f0 e0       	ldi	r31, 0x00	; 0
    1ecc:	80 81       	ld	r24, Z
    1ece:	89 83       	std	Y+1, r24	; 0x01
    1ed0:	27 c0       	rjmp	.+78     	; 0x1f20 <DIO_ReadPortLevel+0xec>
        }
        break;
    case DIO_PORTC:
        if (PINC == 0xFF) {
    1ed2:	e3 e3       	ldi	r30, 0x33	; 51
    1ed4:	f0 e0       	ldi	r31, 0x00	; 0
    1ed6:	80 81       	ld	r24, Z
    1ed8:	8f 3f       	cpi	r24, 0xFF	; 255
    1eda:	19 f4       	brne	.+6      	; 0x1ee2 <DIO_ReadPortLevel+0xae>
            result = DIO_HIGH;
    1edc:	81 e0       	ldi	r24, 0x01	; 1
    1ede:	89 83       	std	Y+1, r24	; 0x01
    1ee0:	1f c0       	rjmp	.+62     	; 0x1f20 <DIO_ReadPortLevel+0xec>
        }
        else if (PINC == 0x00) {
    1ee2:	e3 e3       	ldi	r30, 0x33	; 51
    1ee4:	f0 e0       	ldi	r31, 0x00	; 0
    1ee6:	80 81       	ld	r24, Z
    1ee8:	88 23       	and	r24, r24
    1eea:	11 f4       	brne	.+4      	; 0x1ef0 <DIO_ReadPortLevel+0xbc>
            result = DIO_LOW;
    1eec:	19 82       	std	Y+1, r1	; 0x01
    1eee:	18 c0       	rjmp	.+48     	; 0x1f20 <DIO_ReadPortLevel+0xec>
        }
        else {
            result = PINC;
    1ef0:	e3 e3       	ldi	r30, 0x33	; 51
    1ef2:	f0 e0       	ldi	r31, 0x00	; 0
    1ef4:	80 81       	ld	r24, Z
    1ef6:	89 83       	std	Y+1, r24	; 0x01
    1ef8:	13 c0       	rjmp	.+38     	; 0x1f20 <DIO_ReadPortLevel+0xec>
        }
        break;
    case DIO_PORTD:
        if (PIND == 0xFF) {
    1efa:	e0 e3       	ldi	r30, 0x30	; 48
    1efc:	f0 e0       	ldi	r31, 0x00	; 0
    1efe:	80 81       	ld	r24, Z
    1f00:	8f 3f       	cpi	r24, 0xFF	; 255
    1f02:	19 f4       	brne	.+6      	; 0x1f0a <DIO_ReadPortLevel+0xd6>
            result = DIO_HIGH;
    1f04:	81 e0       	ldi	r24, 0x01	; 1
    1f06:	89 83       	std	Y+1, r24	; 0x01
    1f08:	0b c0       	rjmp	.+22     	; 0x1f20 <DIO_ReadPortLevel+0xec>
        }
        else if (PIND == 0x00) {
    1f0a:	e0 e3       	ldi	r30, 0x30	; 48
    1f0c:	f0 e0       	ldi	r31, 0x00	; 0
    1f0e:	80 81       	ld	r24, Z
    1f10:	88 23       	and	r24, r24
    1f12:	11 f4       	brne	.+4      	; 0x1f18 <DIO_ReadPortLevel+0xe4>
            result = DIO_LOW;
    1f14:	19 82       	std	Y+1, r1	; 0x01
    1f16:	04 c0       	rjmp	.+8      	; 0x1f20 <DIO_ReadPortLevel+0xec>
        }
        else {
            result = PIND;
    1f18:	e0 e3       	ldi	r30, 0x30	; 48
    1f1a:	f0 e0       	ldi	r31, 0x00	; 0
    1f1c:	80 81       	ld	r24, Z
    1f1e:	89 83       	std	Y+1, r24	; 0x01
        }
        break;
    default:
        break;
    }
    return result;
    1f20:	89 81       	ldd	r24, Y+1	; 0x01
}
    1f22:	0f 90       	pop	r0
    1f24:	0f 90       	pop	r0
    1f26:	0f 90       	pop	r0
    1f28:	0f 90       	pop	r0
    1f2a:	cf 91       	pop	r28
    1f2c:	df 91       	pop	r29
    1f2e:	08 95       	ret

00001f30 <__vector_1>:
void (*ExtInterrupt_INT0Callback) (void);
void (*ExtInterrupt_INT1Callback) (void);
void (*ExtInterrupt_INT2Callback) (void);

void __vector_1 (void) __attribute__ ((signal));
void __vector_1 (void) {
    1f30:	1f 92       	push	r1
    1f32:	0f 92       	push	r0
    1f34:	0f b6       	in	r0, 0x3f	; 63
    1f36:	0f 92       	push	r0
    1f38:	11 24       	eor	r1, r1
    1f3a:	2f 93       	push	r18
    1f3c:	3f 93       	push	r19
    1f3e:	4f 93       	push	r20
    1f40:	5f 93       	push	r21
    1f42:	6f 93       	push	r22
    1f44:	7f 93       	push	r23
    1f46:	8f 93       	push	r24
    1f48:	9f 93       	push	r25
    1f4a:	af 93       	push	r26
    1f4c:	bf 93       	push	r27
    1f4e:	ef 93       	push	r30
    1f50:	ff 93       	push	r31
    1f52:	df 93       	push	r29
    1f54:	cf 93       	push	r28
    1f56:	cd b7       	in	r28, 0x3d	; 61
    1f58:	de b7       	in	r29, 0x3e	; 62
	ExtInterrupt_INT0Callback();
    1f5a:	e0 91 76 01 	lds	r30, 0x0176
    1f5e:	f0 91 77 01 	lds	r31, 0x0177
    1f62:	09 95       	icall
}
    1f64:	cf 91       	pop	r28
    1f66:	df 91       	pop	r29
    1f68:	ff 91       	pop	r31
    1f6a:	ef 91       	pop	r30
    1f6c:	bf 91       	pop	r27
    1f6e:	af 91       	pop	r26
    1f70:	9f 91       	pop	r25
    1f72:	8f 91       	pop	r24
    1f74:	7f 91       	pop	r23
    1f76:	6f 91       	pop	r22
    1f78:	5f 91       	pop	r21
    1f7a:	4f 91       	pop	r20
    1f7c:	3f 91       	pop	r19
    1f7e:	2f 91       	pop	r18
    1f80:	0f 90       	pop	r0
    1f82:	0f be       	out	0x3f, r0	; 63
    1f84:	0f 90       	pop	r0
    1f86:	1f 90       	pop	r1
    1f88:	18 95       	reti

00001f8a <__vector_2>:
void __vector_2 (void) __attribute__ ((signal));
void __vector_2 (void) {
    1f8a:	1f 92       	push	r1
    1f8c:	0f 92       	push	r0
    1f8e:	0f b6       	in	r0, 0x3f	; 63
    1f90:	0f 92       	push	r0
    1f92:	11 24       	eor	r1, r1
    1f94:	2f 93       	push	r18
    1f96:	3f 93       	push	r19
    1f98:	4f 93       	push	r20
    1f9a:	5f 93       	push	r21
    1f9c:	6f 93       	push	r22
    1f9e:	7f 93       	push	r23
    1fa0:	8f 93       	push	r24
    1fa2:	9f 93       	push	r25
    1fa4:	af 93       	push	r26
    1fa6:	bf 93       	push	r27
    1fa8:	ef 93       	push	r30
    1faa:	ff 93       	push	r31
    1fac:	df 93       	push	r29
    1fae:	cf 93       	push	r28
    1fb0:	cd b7       	in	r28, 0x3d	; 61
    1fb2:	de b7       	in	r29, 0x3e	; 62
	ExtInterrupt_INT1Callback();
    1fb4:	e0 91 74 01 	lds	r30, 0x0174
    1fb8:	f0 91 75 01 	lds	r31, 0x0175
    1fbc:	09 95       	icall
}
    1fbe:	cf 91       	pop	r28
    1fc0:	df 91       	pop	r29
    1fc2:	ff 91       	pop	r31
    1fc4:	ef 91       	pop	r30
    1fc6:	bf 91       	pop	r27
    1fc8:	af 91       	pop	r26
    1fca:	9f 91       	pop	r25
    1fcc:	8f 91       	pop	r24
    1fce:	7f 91       	pop	r23
    1fd0:	6f 91       	pop	r22
    1fd2:	5f 91       	pop	r21
    1fd4:	4f 91       	pop	r20
    1fd6:	3f 91       	pop	r19
    1fd8:	2f 91       	pop	r18
    1fda:	0f 90       	pop	r0
    1fdc:	0f be       	out	0x3f, r0	; 63
    1fde:	0f 90       	pop	r0
    1fe0:	1f 90       	pop	r1
    1fe2:	18 95       	reti

00001fe4 <__vector_3>:
void __vector_3 (void) __attribute__ ((signal));
void __vector_3 (void) {
    1fe4:	1f 92       	push	r1
    1fe6:	0f 92       	push	r0
    1fe8:	0f b6       	in	r0, 0x3f	; 63
    1fea:	0f 92       	push	r0
    1fec:	11 24       	eor	r1, r1
    1fee:	2f 93       	push	r18
    1ff0:	3f 93       	push	r19
    1ff2:	4f 93       	push	r20
    1ff4:	5f 93       	push	r21
    1ff6:	6f 93       	push	r22
    1ff8:	7f 93       	push	r23
    1ffa:	8f 93       	push	r24
    1ffc:	9f 93       	push	r25
    1ffe:	af 93       	push	r26
    2000:	bf 93       	push	r27
    2002:	ef 93       	push	r30
    2004:	ff 93       	push	r31
    2006:	df 93       	push	r29
    2008:	cf 93       	push	r28
    200a:	cd b7       	in	r28, 0x3d	; 61
    200c:	de b7       	in	r29, 0x3e	; 62
	ExtInterrupt_INT2Callback();
    200e:	e0 91 78 01 	lds	r30, 0x0178
    2012:	f0 91 79 01 	lds	r31, 0x0179
    2016:	09 95       	icall
}
    2018:	cf 91       	pop	r28
    201a:	df 91       	pop	r29
    201c:	ff 91       	pop	r31
    201e:	ef 91       	pop	r30
    2020:	bf 91       	pop	r27
    2022:	af 91       	pop	r26
    2024:	9f 91       	pop	r25
    2026:	8f 91       	pop	r24
    2028:	7f 91       	pop	r23
    202a:	6f 91       	pop	r22
    202c:	5f 91       	pop	r21
    202e:	4f 91       	pop	r20
    2030:	3f 91       	pop	r19
    2032:	2f 91       	pop	r18
    2034:	0f 90       	pop	r0
    2036:	0f be       	out	0x3f, r0	; 63
    2038:	0f 90       	pop	r0
    203a:	1f 90       	pop	r1
    203c:	18 95       	reti

0000203e <ExtInterrupt_Init>:
//void __vector_1 (void) __attribute__ ((signal));
//void __vector_1 (void) {
//	// TODO
//}

void ExtInterrupt_Init(void) {
    203e:	df 93       	push	r29
    2040:	cf 93       	push	r28
    2042:	cd b7       	in	r28, 0x3d	; 61
    2044:	de b7       	in	r29, 0x3e	; 62

    /*************************** Interrupt 0 Init ***************************/
#ifdef EXT_INTERRUPT_INT0
    /* Interrupt Enable */
#if EXT_INTERRUPT_INT0_INT_ENABLE == EXT_INTERRUPT_ENABLE
    SET_BIT(GICR, GICR_INT0); // External Interrupt Request 0 Enable
    2046:	ab e5       	ldi	r26, 0x5B	; 91
    2048:	b0 e0       	ldi	r27, 0x00	; 0
    204a:	eb e5       	ldi	r30, 0x5B	; 91
    204c:	f0 e0       	ldi	r31, 0x00	; 0
    204e:	80 81       	ld	r24, Z
    2050:	80 64       	ori	r24, 0x40	; 64
    2052:	8c 93       	st	X, r24
    GlobalInterrupt_Enable(); // Global Interrupt Enable
    2054:	0e 94 96 10 	call	0x212c	; 0x212c <GlobalInterrupt_Enable>
    SET_BIT(MCUCR, MCUCR_ISC00);
    SET_BIT(MCUCR, MCUCR_ISC01);
    // TODO
#elif EXT_INTERRUPT_INT0_SENSE == EXT_INTERRUPT_ON_CHANGE
    /* Any logical change on INT0 generates an interrupt request. */
    SET_BIT(MCUCR, MCUCR_ISC00);
    2058:	a5 e5       	ldi	r26, 0x55	; 85
    205a:	b0 e0       	ldi	r27, 0x00	; 0
    205c:	e5 e5       	ldi	r30, 0x55	; 85
    205e:	f0 e0       	ldi	r31, 0x00	; 0
    2060:	80 81       	ld	r24, Z
    2062:	81 60       	ori	r24, 0x01	; 1
    2064:	8c 93       	st	X, r24
    CLR_BIT(MCUCR, MCUCR_ISC01);
    2066:	a5 e5       	ldi	r26, 0x55	; 85
    2068:	b0 e0       	ldi	r27, 0x00	; 0
    206a:	e5 e5       	ldi	r30, 0x55	; 85
    206c:	f0 e0       	ldi	r31, 0x00	; 0
    206e:	80 81       	ld	r24, Z
    2070:	8d 7f       	andi	r24, 0xFD	; 253
    2072:	8c 93       	st	X, r24
    /*************************** Interrupt 1 Init ***************************/

#ifdef EXT_INTERRUPT_INT1
    /* Interrupt Enable */
#if EXT_INTERRUPT_INT1_INT_ENABLE == EXT_INTERRUPT_ENABLE
    SET_BIT(GICR, GICR_INT1); // External Interrupt Request 1 Enable
    2074:	ab e5       	ldi	r26, 0x5B	; 91
    2076:	b0 e0       	ldi	r27, 0x00	; 0
    2078:	eb e5       	ldi	r30, 0x5B	; 91
    207a:	f0 e0       	ldi	r31, 0x00	; 0
    207c:	80 81       	ld	r24, Z
    207e:	80 68       	ori	r24, 0x80	; 128
    2080:	8c 93       	st	X, r24
#elif EXT_INTERRUPT_INT1_SENSE == EXT_INTERRUPT_RISING_EDGE
    SET_BIT(MCUCR, MCUCR_ISC10);
    SET_BIT(MCUCR, MCUCR_ISC11);
    // TODO
#elif EXT_INTERRUPT_INT1_SENSE == EXT_INTERRUPT_ON_CHANGE
    SET_BIT(MCUCR, MCUCR_ISC10);
    2082:	a5 e5       	ldi	r26, 0x55	; 85
    2084:	b0 e0       	ldi	r27, 0x00	; 0
    2086:	e5 e5       	ldi	r30, 0x55	; 85
    2088:	f0 e0       	ldi	r31, 0x00	; 0
    208a:	80 81       	ld	r24, Z
    208c:	84 60       	ori	r24, 0x04	; 4
    208e:	8c 93       	st	X, r24
    CLR_BIT(MCUCR, MCUCR_ISC11);
    2090:	a5 e5       	ldi	r26, 0x55	; 85
    2092:	b0 e0       	ldi	r27, 0x00	; 0
    2094:	e5 e5       	ldi	r30, 0x55	; 85
    2096:	f0 e0       	ldi	r31, 0x00	; 0
    2098:	80 81       	ld	r24, Z
    209a:	87 7f       	andi	r24, 0xF7	; 247
    209c:	8c 93       	st	X, r24

    /*************************** Interrupt 2 Init ***************************/
#ifdef EXT_INTERRUPT_INT2
    /* Interrupt Enable */
#if EXT_INTERRUPT_INT2_INT_ENABLE == EXT_INTERRUPT_ENABLE
    SET_BIT(GICR, GICR_INT2); // External Interrupt Request 1 Enable
    209e:	ab e5       	ldi	r26, 0x5B	; 91
    20a0:	b0 e0       	ldi	r27, 0x00	; 0
    20a2:	eb e5       	ldi	r30, 0x5B	; 91
    20a4:	f0 e0       	ldi	r31, 0x00	; 0
    20a6:	80 81       	ld	r24, Z
    20a8:	80 62       	ori	r24, 0x20	; 32
    20aa:	8c 93       	st	X, r24
    // TODO
#endif

    /* Sense Control */
#if EXT_INTERRUPT_INT2_SENSE == EXT_INTERRUPT_FALLING_EDGE
    CLR_BIT(MCUCR, MCUCSR_ISC2);
    20ac:	a5 e5       	ldi	r26, 0x55	; 85
    20ae:	b0 e0       	ldi	r27, 0x00	; 0
    20b0:	e5 e5       	ldi	r30, 0x55	; 85
    20b2:	f0 e0       	ldi	r31, 0x00	; 0
    20b4:	80 81       	ld	r24, Z
    20b6:	8f 7b       	andi	r24, 0xBF	; 191
    20b8:	8c 93       	st	X, r24
#endif
#endif



}
    20ba:	cf 91       	pop	r28
    20bc:	df 91       	pop	r29
    20be:	08 95       	ret

000020c0 <ExtInterrupt_SetINT0Callback>:

void ExtInterrupt_SetINT0Callback (void (*callback) (void)) {
    20c0:	df 93       	push	r29
    20c2:	cf 93       	push	r28
    20c4:	00 d0       	rcall	.+0      	; 0x20c6 <ExtInterrupt_SetINT0Callback+0x6>
    20c6:	cd b7       	in	r28, 0x3d	; 61
    20c8:	de b7       	in	r29, 0x3e	; 62
    20ca:	9a 83       	std	Y+2, r25	; 0x02
    20cc:	89 83       	std	Y+1, r24	; 0x01
    ExtInterrupt_INT0Callback = callback;
    20ce:	89 81       	ldd	r24, Y+1	; 0x01
    20d0:	9a 81       	ldd	r25, Y+2	; 0x02
    20d2:	90 93 77 01 	sts	0x0177, r25
    20d6:	80 93 76 01 	sts	0x0176, r24
}
    20da:	0f 90       	pop	r0
    20dc:	0f 90       	pop	r0
    20de:	cf 91       	pop	r28
    20e0:	df 91       	pop	r29
    20e2:	08 95       	ret

000020e4 <ExtInterrupt_SetINT1Callback>:

void ExtInterrupt_SetINT1Callback (void (*callback) (void)) {
    20e4:	df 93       	push	r29
    20e6:	cf 93       	push	r28
    20e8:	00 d0       	rcall	.+0      	; 0x20ea <ExtInterrupt_SetINT1Callback+0x6>
    20ea:	cd b7       	in	r28, 0x3d	; 61
    20ec:	de b7       	in	r29, 0x3e	; 62
    20ee:	9a 83       	std	Y+2, r25	; 0x02
    20f0:	89 83       	std	Y+1, r24	; 0x01
    ExtInterrupt_INT1Callback = callback;
    20f2:	89 81       	ldd	r24, Y+1	; 0x01
    20f4:	9a 81       	ldd	r25, Y+2	; 0x02
    20f6:	90 93 75 01 	sts	0x0175, r25
    20fa:	80 93 74 01 	sts	0x0174, r24
   // TODO
}
    20fe:	0f 90       	pop	r0
    2100:	0f 90       	pop	r0
    2102:	cf 91       	pop	r28
    2104:	df 91       	pop	r29
    2106:	08 95       	ret

00002108 <ExtInterrupt_SetINT2Callback>:

void ExtInterrupt_SetINT2Callback (void (*callback) (void)) {
    2108:	df 93       	push	r29
    210a:	cf 93       	push	r28
    210c:	00 d0       	rcall	.+0      	; 0x210e <ExtInterrupt_SetINT2Callback+0x6>
    210e:	cd b7       	in	r28, 0x3d	; 61
    2110:	de b7       	in	r29, 0x3e	; 62
    2112:	9a 83       	std	Y+2, r25	; 0x02
    2114:	89 83       	std	Y+1, r24	; 0x01
    ExtInterrupt_INT2Callback = callback;
    2116:	89 81       	ldd	r24, Y+1	; 0x01
    2118:	9a 81       	ldd	r25, Y+2	; 0x02
    211a:	90 93 79 01 	sts	0x0179, r25
    211e:	80 93 78 01 	sts	0x0178, r24
   // TODO
}
    2122:	0f 90       	pop	r0
    2124:	0f 90       	pop	r0
    2126:	cf 91       	pop	r28
    2128:	df 91       	pop	r29
    212a:	08 95       	ret

0000212c <GlobalInterrupt_Enable>:
#include "std_types.h"
#include "macros.h"
#include "Registers.h"
#include "GlobalInterrupt.h"

void GlobalInterrupt_Enable(void) {
    212c:	df 93       	push	r29
    212e:	cf 93       	push	r28
    2130:	cd b7       	in	r28, 0x3d	; 61
    2132:	de b7       	in	r29, 0x3e	; 62
	SET_BIT(SREG, SREG_I);
    2134:	af e5       	ldi	r26, 0x5F	; 95
    2136:	b0 e0       	ldi	r27, 0x00	; 0
    2138:	ef e5       	ldi	r30, 0x5F	; 95
    213a:	f0 e0       	ldi	r31, 0x00	; 0
    213c:	80 81       	ld	r24, Z
    213e:	80 68       	ori	r24, 0x80	; 128
    2140:	8c 93       	st	X, r24
}
    2142:	cf 91       	pop	r28
    2144:	df 91       	pop	r29
    2146:	08 95       	ret

00002148 <GlobalInterrupt_Disable>:

void GlobalInterrupt_Disable(void) {
    2148:	df 93       	push	r29
    214a:	cf 93       	push	r28
    214c:	cd b7       	in	r28, 0x3d	; 61
    214e:	de b7       	in	r29, 0x3e	; 62
	CLR_BIT(SREG, SREG_I);
    2150:	af e5       	ldi	r26, 0x5F	; 95
    2152:	b0 e0       	ldi	r27, 0x00	; 0
    2154:	ef e5       	ldi	r30, 0x5F	; 95
    2156:	f0 e0       	ldi	r31, 0x00	; 0
    2158:	80 81       	ld	r24, Z
    215a:	8f 77       	andi	r24, 0x7F	; 127
    215c:	8c 93       	st	X, r24
}
    215e:	cf 91       	pop	r28
    2160:	df 91       	pop	r29
    2162:	08 95       	ret

00002164 <__vector_10>:
void (*Gpt_Timer2_Callback_Ctc)(void);
void (*Gpt_Timer2_Callback_Normal)(void);

/************ ISR ************/
ISR(VECTOR_TIMER0_CTC)
{
    2164:	1f 92       	push	r1
    2166:	0f 92       	push	r0
    2168:	0f b6       	in	r0, 0x3f	; 63
    216a:	0f 92       	push	r0
    216c:	11 24       	eor	r1, r1
    216e:	2f 93       	push	r18
    2170:	3f 93       	push	r19
    2172:	4f 93       	push	r20
    2174:	5f 93       	push	r21
    2176:	6f 93       	push	r22
    2178:	7f 93       	push	r23
    217a:	8f 93       	push	r24
    217c:	9f 93       	push	r25
    217e:	af 93       	push	r26
    2180:	bf 93       	push	r27
    2182:	ef 93       	push	r30
    2184:	ff 93       	push	r31
    2186:	df 93       	push	r29
    2188:	cf 93       	push	r28
    218a:	cd b7       	in	r28, 0x3d	; 61
    218c:	de b7       	in	r29, 0x3e	; 62
    Gpt_Timer0_Callback_Ctc();
    218e:	e0 91 7a 01 	lds	r30, 0x017A
    2192:	f0 91 7b 01 	lds	r31, 0x017B
    2196:	09 95       	icall
}
    2198:	cf 91       	pop	r28
    219a:	df 91       	pop	r29
    219c:	ff 91       	pop	r31
    219e:	ef 91       	pop	r30
    21a0:	bf 91       	pop	r27
    21a2:	af 91       	pop	r26
    21a4:	9f 91       	pop	r25
    21a6:	8f 91       	pop	r24
    21a8:	7f 91       	pop	r23
    21aa:	6f 91       	pop	r22
    21ac:	5f 91       	pop	r21
    21ae:	4f 91       	pop	r20
    21b0:	3f 91       	pop	r19
    21b2:	2f 91       	pop	r18
    21b4:	0f 90       	pop	r0
    21b6:	0f be       	out	0x3f, r0	; 63
    21b8:	0f 90       	pop	r0
    21ba:	1f 90       	pop	r1
    21bc:	18 95       	reti

000021be <__vector_11>:
ISR(VECTOR_TIMER0_NORM)
{
    21be:	1f 92       	push	r1
    21c0:	0f 92       	push	r0
    21c2:	0f b6       	in	r0, 0x3f	; 63
    21c4:	0f 92       	push	r0
    21c6:	11 24       	eor	r1, r1
    21c8:	2f 93       	push	r18
    21ca:	3f 93       	push	r19
    21cc:	4f 93       	push	r20
    21ce:	5f 93       	push	r21
    21d0:	6f 93       	push	r22
    21d2:	7f 93       	push	r23
    21d4:	8f 93       	push	r24
    21d6:	9f 93       	push	r25
    21d8:	af 93       	push	r26
    21da:	bf 93       	push	r27
    21dc:	ef 93       	push	r30
    21de:	ff 93       	push	r31
    21e0:	df 93       	push	r29
    21e2:	cf 93       	push	r28
    21e4:	cd b7       	in	r28, 0x3d	; 61
    21e6:	de b7       	in	r29, 0x3e	; 62
    Gpt_Timer0_Callback_Normal();
    21e8:	e0 91 84 01 	lds	r30, 0x0184
    21ec:	f0 91 85 01 	lds	r31, 0x0185
    21f0:	09 95       	icall
}
    21f2:	cf 91       	pop	r28
    21f4:	df 91       	pop	r29
    21f6:	ff 91       	pop	r31
    21f8:	ef 91       	pop	r30
    21fa:	bf 91       	pop	r27
    21fc:	af 91       	pop	r26
    21fe:	9f 91       	pop	r25
    2200:	8f 91       	pop	r24
    2202:	7f 91       	pop	r23
    2204:	6f 91       	pop	r22
    2206:	5f 91       	pop	r21
    2208:	4f 91       	pop	r20
    220a:	3f 91       	pop	r19
    220c:	2f 91       	pop	r18
    220e:	0f 90       	pop	r0
    2210:	0f be       	out	0x3f, r0	; 63
    2212:	0f 90       	pop	r0
    2214:	1f 90       	pop	r1
    2216:	18 95       	reti

00002218 <__vector_7>:

ISR(VECTOR_TIMER1A_CTC)
{
    2218:	1f 92       	push	r1
    221a:	0f 92       	push	r0
    221c:	0f b6       	in	r0, 0x3f	; 63
    221e:	0f 92       	push	r0
    2220:	11 24       	eor	r1, r1
    2222:	2f 93       	push	r18
    2224:	3f 93       	push	r19
    2226:	4f 93       	push	r20
    2228:	5f 93       	push	r21
    222a:	6f 93       	push	r22
    222c:	7f 93       	push	r23
    222e:	8f 93       	push	r24
    2230:	9f 93       	push	r25
    2232:	af 93       	push	r26
    2234:	bf 93       	push	r27
    2236:	ef 93       	push	r30
    2238:	ff 93       	push	r31
    223a:	df 93       	push	r29
    223c:	cf 93       	push	r28
    223e:	cd b7       	in	r28, 0x3d	; 61
    2240:	de b7       	in	r29, 0x3e	; 62
    Gpt_Timer1A_Callback_Ctc();
    2242:	e0 91 82 01 	lds	r30, 0x0182
    2246:	f0 91 83 01 	lds	r31, 0x0183
    224a:	09 95       	icall
}
    224c:	cf 91       	pop	r28
    224e:	df 91       	pop	r29
    2250:	ff 91       	pop	r31
    2252:	ef 91       	pop	r30
    2254:	bf 91       	pop	r27
    2256:	af 91       	pop	r26
    2258:	9f 91       	pop	r25
    225a:	8f 91       	pop	r24
    225c:	7f 91       	pop	r23
    225e:	6f 91       	pop	r22
    2260:	5f 91       	pop	r21
    2262:	4f 91       	pop	r20
    2264:	3f 91       	pop	r19
    2266:	2f 91       	pop	r18
    2268:	0f 90       	pop	r0
    226a:	0f be       	out	0x3f, r0	; 63
    226c:	0f 90       	pop	r0
    226e:	1f 90       	pop	r1
    2270:	18 95       	reti

00002272 <__vector_9>:
ISR(VECTOR_TIMER1_NORM)
{
    2272:	1f 92       	push	r1
    2274:	0f 92       	push	r0
    2276:	0f b6       	in	r0, 0x3f	; 63
    2278:	0f 92       	push	r0
    227a:	11 24       	eor	r1, r1
    227c:	2f 93       	push	r18
    227e:	3f 93       	push	r19
    2280:	4f 93       	push	r20
    2282:	5f 93       	push	r21
    2284:	6f 93       	push	r22
    2286:	7f 93       	push	r23
    2288:	8f 93       	push	r24
    228a:	9f 93       	push	r25
    228c:	af 93       	push	r26
    228e:	bf 93       	push	r27
    2290:	ef 93       	push	r30
    2292:	ff 93       	push	r31
    2294:	df 93       	push	r29
    2296:	cf 93       	push	r28
    2298:	cd b7       	in	r28, 0x3d	; 61
    229a:	de b7       	in	r29, 0x3e	; 62
    Gpt_Timer1_Callback_Normal();
    229c:	e0 91 86 01 	lds	r30, 0x0186
    22a0:	f0 91 87 01 	lds	r31, 0x0187
    22a4:	09 95       	icall
}
    22a6:	cf 91       	pop	r28
    22a8:	df 91       	pop	r29
    22aa:	ff 91       	pop	r31
    22ac:	ef 91       	pop	r30
    22ae:	bf 91       	pop	r27
    22b0:	af 91       	pop	r26
    22b2:	9f 91       	pop	r25
    22b4:	8f 91       	pop	r24
    22b6:	7f 91       	pop	r23
    22b8:	6f 91       	pop	r22
    22ba:	5f 91       	pop	r21
    22bc:	4f 91       	pop	r20
    22be:	3f 91       	pop	r19
    22c0:	2f 91       	pop	r18
    22c2:	0f 90       	pop	r0
    22c4:	0f be       	out	0x3f, r0	; 63
    22c6:	0f 90       	pop	r0
    22c8:	1f 90       	pop	r1
    22ca:	18 95       	reti

000022cc <__vector_8>:

ISR(VECTOR_TIMER1B_CTC)
{
    22cc:	1f 92       	push	r1
    22ce:	0f 92       	push	r0
    22d0:	0f b6       	in	r0, 0x3f	; 63
    22d2:	0f 92       	push	r0
    22d4:	11 24       	eor	r1, r1
    22d6:	2f 93       	push	r18
    22d8:	3f 93       	push	r19
    22da:	4f 93       	push	r20
    22dc:	5f 93       	push	r21
    22de:	6f 93       	push	r22
    22e0:	7f 93       	push	r23
    22e2:	8f 93       	push	r24
    22e4:	9f 93       	push	r25
    22e6:	af 93       	push	r26
    22e8:	bf 93       	push	r27
    22ea:	ef 93       	push	r30
    22ec:	ff 93       	push	r31
    22ee:	df 93       	push	r29
    22f0:	cf 93       	push	r28
    22f2:	cd b7       	in	r28, 0x3d	; 61
    22f4:	de b7       	in	r29, 0x3e	; 62
    Gpt_Timer1B_Callback_Ctc();
    22f6:	e0 91 7e 01 	lds	r30, 0x017E
    22fa:	f0 91 7f 01 	lds	r31, 0x017F
    22fe:	09 95       	icall
}
    2300:	cf 91       	pop	r28
    2302:	df 91       	pop	r29
    2304:	ff 91       	pop	r31
    2306:	ef 91       	pop	r30
    2308:	bf 91       	pop	r27
    230a:	af 91       	pop	r26
    230c:	9f 91       	pop	r25
    230e:	8f 91       	pop	r24
    2310:	7f 91       	pop	r23
    2312:	6f 91       	pop	r22
    2314:	5f 91       	pop	r21
    2316:	4f 91       	pop	r20
    2318:	3f 91       	pop	r19
    231a:	2f 91       	pop	r18
    231c:	0f 90       	pop	r0
    231e:	0f be       	out	0x3f, r0	; 63
    2320:	0f 90       	pop	r0
    2322:	1f 90       	pop	r1
    2324:	18 95       	reti

00002326 <__vector_4>:


ISR(VECTOR_TIMER2_CTC)
{
    2326:	1f 92       	push	r1
    2328:	0f 92       	push	r0
    232a:	0f b6       	in	r0, 0x3f	; 63
    232c:	0f 92       	push	r0
    232e:	11 24       	eor	r1, r1
    2330:	2f 93       	push	r18
    2332:	3f 93       	push	r19
    2334:	4f 93       	push	r20
    2336:	5f 93       	push	r21
    2338:	6f 93       	push	r22
    233a:	7f 93       	push	r23
    233c:	8f 93       	push	r24
    233e:	9f 93       	push	r25
    2340:	af 93       	push	r26
    2342:	bf 93       	push	r27
    2344:	ef 93       	push	r30
    2346:	ff 93       	push	r31
    2348:	df 93       	push	r29
    234a:	cf 93       	push	r28
    234c:	cd b7       	in	r28, 0x3d	; 61
    234e:	de b7       	in	r29, 0x3e	; 62
    Gpt_Timer2_Callback_Ctc();
    2350:	e0 91 7c 01 	lds	r30, 0x017C
    2354:	f0 91 7d 01 	lds	r31, 0x017D
    2358:	09 95       	icall
}
    235a:	cf 91       	pop	r28
    235c:	df 91       	pop	r29
    235e:	ff 91       	pop	r31
    2360:	ef 91       	pop	r30
    2362:	bf 91       	pop	r27
    2364:	af 91       	pop	r26
    2366:	9f 91       	pop	r25
    2368:	8f 91       	pop	r24
    236a:	7f 91       	pop	r23
    236c:	6f 91       	pop	r22
    236e:	5f 91       	pop	r21
    2370:	4f 91       	pop	r20
    2372:	3f 91       	pop	r19
    2374:	2f 91       	pop	r18
    2376:	0f 90       	pop	r0
    2378:	0f be       	out	0x3f, r0	; 63
    237a:	0f 90       	pop	r0
    237c:	1f 90       	pop	r1
    237e:	18 95       	reti

00002380 <__vector_5>:
ISR(VECTOR_TIMER2_NORM)
{
    2380:	1f 92       	push	r1
    2382:	0f 92       	push	r0
    2384:	0f b6       	in	r0, 0x3f	; 63
    2386:	0f 92       	push	r0
    2388:	11 24       	eor	r1, r1
    238a:	2f 93       	push	r18
    238c:	3f 93       	push	r19
    238e:	4f 93       	push	r20
    2390:	5f 93       	push	r21
    2392:	6f 93       	push	r22
    2394:	7f 93       	push	r23
    2396:	8f 93       	push	r24
    2398:	9f 93       	push	r25
    239a:	af 93       	push	r26
    239c:	bf 93       	push	r27
    239e:	ef 93       	push	r30
    23a0:	ff 93       	push	r31
    23a2:	df 93       	push	r29
    23a4:	cf 93       	push	r28
    23a6:	cd b7       	in	r28, 0x3d	; 61
    23a8:	de b7       	in	r29, 0x3e	; 62
    Gpt_Timer2_Callback_Normal();
    23aa:	e0 91 80 01 	lds	r30, 0x0180
    23ae:	f0 91 81 01 	lds	r31, 0x0181
    23b2:	09 95       	icall
}
    23b4:	cf 91       	pop	r28
    23b6:	df 91       	pop	r29
    23b8:	ff 91       	pop	r31
    23ba:	ef 91       	pop	r30
    23bc:	bf 91       	pop	r27
    23be:	af 91       	pop	r26
    23c0:	9f 91       	pop	r25
    23c2:	8f 91       	pop	r24
    23c4:	7f 91       	pop	r23
    23c6:	6f 91       	pop	r22
    23c8:	5f 91       	pop	r21
    23ca:	4f 91       	pop	r20
    23cc:	3f 91       	pop	r19
    23ce:	2f 91       	pop	r18
    23d0:	0f 90       	pop	r0
    23d2:	0f be       	out	0x3f, r0	; 63
    23d4:	0f 90       	pop	r0
    23d6:	1f 90       	pop	r1
    23d8:	18 95       	reti

000023da <Gpt_Init>:



Gpt_ReturnType Gpt_Init(Gpt_ConfigType *config)
{
    23da:	df 93       	push	r29
    23dc:	cf 93       	push	r28
    23de:	cd b7       	in	r28, 0x3d	; 61
    23e0:	de b7       	in	r29, 0x3e	; 62
    23e2:	65 97       	sbiw	r28, 0x15	; 21
    23e4:	0f b6       	in	r0, 0x3f	; 63
    23e6:	f8 94       	cli
    23e8:	de bf       	out	0x3e, r29	; 62
    23ea:	0f be       	out	0x3f, r0	; 63
    23ec:	cd bf       	out	0x3d, r28	; 61
    23ee:	9b 83       	std	Y+3, r25	; 0x03
    23f0:	8a 83       	std	Y+2, r24	; 0x02
    Gpt_ReturnType returnValue = GPT_OK;
    23f2:	81 e0       	ldi	r24, 0x01	; 1
    23f4:	89 83       	std	Y+1, r24	; 0x01

    switch (config->channel)
    23f6:	ea 81       	ldd	r30, Y+2	; 0x02
    23f8:	fb 81       	ldd	r31, Y+3	; 0x03
    23fa:	80 81       	ld	r24, Z
    23fc:	28 2f       	mov	r18, r24
    23fe:	30 e0       	ldi	r19, 0x00	; 0
    2400:	3d 8b       	std	Y+21, r19	; 0x15
    2402:	2c 8b       	std	Y+20, r18	; 0x14
    2404:	8c 89       	ldd	r24, Y+20	; 0x14
    2406:	9d 89       	ldd	r25, Y+21	; 0x15
    2408:	81 30       	cpi	r24, 0x01	; 1
    240a:	91 05       	cpc	r25, r1
    240c:	09 f4       	brne	.+2      	; 0x2410 <Gpt_Init+0x36>
    240e:	ba c1       	rjmp	.+884    	; 0x2784 <Gpt_Init+0x3aa>
    2410:	2c 89       	ldd	r18, Y+20	; 0x14
    2412:	3d 89       	ldd	r19, Y+21	; 0x15
    2414:	22 30       	cpi	r18, 0x02	; 2
    2416:	31 05       	cpc	r19, r1
    2418:	2c f4       	brge	.+10     	; 0x2424 <Gpt_Init+0x4a>
    241a:	8c 89       	ldd	r24, Y+20	; 0x14
    241c:	9d 89       	ldd	r25, Y+21	; 0x15
    241e:	00 97       	sbiw	r24, 0x00	; 0
    2420:	71 f0       	breq	.+28     	; 0x243e <Gpt_Init+0x64>
    2422:	74 c6       	rjmp	.+3304   	; 0x310c <Gpt_Init+0xd32>
    2424:	2c 89       	ldd	r18, Y+20	; 0x14
    2426:	3d 89       	ldd	r19, Y+21	; 0x15
    2428:	22 30       	cpi	r18, 0x02	; 2
    242a:	31 05       	cpc	r19, r1
    242c:	09 f4       	brne	.+2      	; 0x2430 <Gpt_Init+0x56>
    242e:	63 c3       	rjmp	.+1734   	; 0x2af6 <Gpt_Init+0x71c>
    2430:	8c 89       	ldd	r24, Y+20	; 0x14
    2432:	9d 89       	ldd	r25, Y+21	; 0x15
    2434:	83 30       	cpi	r24, 0x03	; 3
    2436:	91 05       	cpc	r25, r1
    2438:	09 f4       	brne	.+2      	; 0x243c <Gpt_Init+0x62>
    243a:	f4 c4       	rjmp	.+2536   	; 0x2e24 <Gpt_Init+0xa4a>
    243c:	67 c6       	rjmp	.+3278   	; 0x310c <Gpt_Init+0xd32>
    {

    case GPT_CHANNEL_TIMER0:
        /*Waveform Generation Mode*/
        if (config->mode == GPT_MODE_NORMAL)
    243e:	ea 81       	ldd	r30, Y+2	; 0x02
    2440:	fb 81       	ldd	r31, Y+3	; 0x03
    2442:	81 81       	ldd	r24, Z+1	; 0x01
    2444:	88 23       	and	r24, r24
    2446:	79 f4       	brne	.+30     	; 0x2466 <Gpt_Init+0x8c>
        {
            CLR_BIT(TCCR0, TCCR0_WGM00);
    2448:	a3 e5       	ldi	r26, 0x53	; 83
    244a:	b0 e0       	ldi	r27, 0x00	; 0
    244c:	e3 e5       	ldi	r30, 0x53	; 83
    244e:	f0 e0       	ldi	r31, 0x00	; 0
    2450:	80 81       	ld	r24, Z
    2452:	8f 7b       	andi	r24, 0xBF	; 191
    2454:	8c 93       	st	X, r24
            CLR_BIT(TCCR0, TCCR0_WGM01);
    2456:	a3 e5       	ldi	r26, 0x53	; 83
    2458:	b0 e0       	ldi	r27, 0x00	; 0
    245a:	e3 e5       	ldi	r30, 0x53	; 83
    245c:	f0 e0       	ldi	r31, 0x00	; 0
    245e:	80 81       	ld	r24, Z
    2460:	87 7f       	andi	r24, 0xF7	; 247
    2462:	8c 93       	st	X, r24
    2464:	3d c0       	rjmp	.+122    	; 0x24e0 <Gpt_Init+0x106>
        }
        else if (config->mode == GPT_MODE_CTC)
    2466:	ea 81       	ldd	r30, Y+2	; 0x02
    2468:	fb 81       	ldd	r31, Y+3	; 0x03
    246a:	81 81       	ldd	r24, Z+1	; 0x01
    246c:	81 30       	cpi	r24, 0x01	; 1
    246e:	79 f4       	brne	.+30     	; 0x248e <Gpt_Init+0xb4>
        {
            CLR_BIT(TCCR0, TCCR0_WGM00);
    2470:	a3 e5       	ldi	r26, 0x53	; 83
    2472:	b0 e0       	ldi	r27, 0x00	; 0
    2474:	e3 e5       	ldi	r30, 0x53	; 83
    2476:	f0 e0       	ldi	r31, 0x00	; 0
    2478:	80 81       	ld	r24, Z
    247a:	8f 7b       	andi	r24, 0xBF	; 191
    247c:	8c 93       	st	X, r24
            SET_BIT(TCCR0, TCCR0_WGM01);
    247e:	a3 e5       	ldi	r26, 0x53	; 83
    2480:	b0 e0       	ldi	r27, 0x00	; 0
    2482:	e3 e5       	ldi	r30, 0x53	; 83
    2484:	f0 e0       	ldi	r31, 0x00	; 0
    2486:	80 81       	ld	r24, Z
    2488:	88 60       	ori	r24, 0x08	; 8
    248a:	8c 93       	st	X, r24
    248c:	29 c0       	rjmp	.+82     	; 0x24e0 <Gpt_Init+0x106>
        }
        else if (config->mode == SPT_MODE_Fast_PWM)
    248e:	ea 81       	ldd	r30, Y+2	; 0x02
    2490:	fb 81       	ldd	r31, Y+3	; 0x03
    2492:	81 81       	ldd	r24, Z+1	; 0x01
    2494:	83 30       	cpi	r24, 0x03	; 3
    2496:	79 f4       	brne	.+30     	; 0x24b6 <Gpt_Init+0xdc>
        {
            SET_BIT(TCCR0, TCCR0_WGM00);
    2498:	a3 e5       	ldi	r26, 0x53	; 83
    249a:	b0 e0       	ldi	r27, 0x00	; 0
    249c:	e3 e5       	ldi	r30, 0x53	; 83
    249e:	f0 e0       	ldi	r31, 0x00	; 0
    24a0:	80 81       	ld	r24, Z
    24a2:	80 64       	ori	r24, 0x40	; 64
    24a4:	8c 93       	st	X, r24
            CLR_BIT(TCCR0, TCCR0_WGM01);
    24a6:	a3 e5       	ldi	r26, 0x53	; 83
    24a8:	b0 e0       	ldi	r27, 0x00	; 0
    24aa:	e3 e5       	ldi	r30, 0x53	; 83
    24ac:	f0 e0       	ldi	r31, 0x00	; 0
    24ae:	80 81       	ld	r24, Z
    24b0:	87 7f       	andi	r24, 0xF7	; 247
    24b2:	8c 93       	st	X, r24
    24b4:	15 c0       	rjmp	.+42     	; 0x24e0 <Gpt_Init+0x106>
        }
        else if (config->mode == SPT_MODE_Fast_PWM)
    24b6:	ea 81       	ldd	r30, Y+2	; 0x02
    24b8:	fb 81       	ldd	r31, Y+3	; 0x03
    24ba:	81 81       	ldd	r24, Z+1	; 0x01
    24bc:	83 30       	cpi	r24, 0x03	; 3
    24be:	79 f4       	brne	.+30     	; 0x24de <Gpt_Init+0x104>
        {
            SET_BIT(TCCR0, TCCR0_WGM00);
    24c0:	a3 e5       	ldi	r26, 0x53	; 83
    24c2:	b0 e0       	ldi	r27, 0x00	; 0
    24c4:	e3 e5       	ldi	r30, 0x53	; 83
    24c6:	f0 e0       	ldi	r31, 0x00	; 0
    24c8:	80 81       	ld	r24, Z
    24ca:	80 64       	ori	r24, 0x40	; 64
    24cc:	8c 93       	st	X, r24
            SET_BIT(TCCR0, TCCR0_WGM01);
    24ce:	a3 e5       	ldi	r26, 0x53	; 83
    24d0:	b0 e0       	ldi	r27, 0x00	; 0
    24d2:	e3 e5       	ldi	r30, 0x53	; 83
    24d4:	f0 e0       	ldi	r31, 0x00	; 0
    24d6:	80 81       	ld	r24, Z
    24d8:	88 60       	ori	r24, 0x08	; 8
    24da:	8c 93       	st	X, r24
    24dc:	01 c0       	rjmp	.+2      	; 0x24e0 <Gpt_Init+0x106>
        }
        else
        {
            returnValue = GPT_ERROR;
    24de:	19 82       	std	Y+1, r1	; 0x01
        }

        /*Compare Match Output Mode*/
        switch (config->output)
    24e0:	ea 81       	ldd	r30, Y+2	; 0x02
    24e2:	fb 81       	ldd	r31, Y+3	; 0x03
    24e4:	82 81       	ldd	r24, Z+2	; 0x02
    24e6:	28 2f       	mov	r18, r24
    24e8:	30 e0       	ldi	r19, 0x00	; 0
    24ea:	3b 8b       	std	Y+19, r19	; 0x13
    24ec:	2a 8b       	std	Y+18, r18	; 0x12
    24ee:	8a 89       	ldd	r24, Y+18	; 0x12
    24f0:	9b 89       	ldd	r25, Y+19	; 0x13
    24f2:	81 30       	cpi	r24, 0x01	; 1
    24f4:	91 05       	cpc	r25, r1
    24f6:	21 f1       	breq	.+72     	; 0x2540 <Gpt_Init+0x166>
    24f8:	2a 89       	ldd	r18, Y+18	; 0x12
    24fa:	3b 89       	ldd	r19, Y+19	; 0x13
    24fc:	22 30       	cpi	r18, 0x02	; 2
    24fe:	31 05       	cpc	r19, r1
    2500:	2c f4       	brge	.+10     	; 0x250c <Gpt_Init+0x132>
    2502:	8a 89       	ldd	r24, Y+18	; 0x12
    2504:	9b 89       	ldd	r25, Y+19	; 0x13
    2506:	00 97       	sbiw	r24, 0x00	; 0
    2508:	61 f0       	breq	.+24     	; 0x2522 <Gpt_Init+0x148>
    250a:	47 c0       	rjmp	.+142    	; 0x259a <Gpt_Init+0x1c0>
    250c:	2a 89       	ldd	r18, Y+18	; 0x12
    250e:	3b 89       	ldd	r19, Y+19	; 0x13
    2510:	22 30       	cpi	r18, 0x02	; 2
    2512:	31 05       	cpc	r19, r1
    2514:	21 f1       	breq	.+72     	; 0x255e <Gpt_Init+0x184>
    2516:	8a 89       	ldd	r24, Y+18	; 0x12
    2518:	9b 89       	ldd	r25, Y+19	; 0x13
    251a:	83 30       	cpi	r24, 0x03	; 3
    251c:	91 05       	cpc	r25, r1
    251e:	71 f1       	breq	.+92     	; 0x257c <Gpt_Init+0x1a2>
    2520:	3c c0       	rjmp	.+120    	; 0x259a <Gpt_Init+0x1c0>
        {
        case GPT_OUTPUT_NORMAL:
            CLR_BIT(TCCR0, TCCR0_COM00);
    2522:	a3 e5       	ldi	r26, 0x53	; 83
    2524:	b0 e0       	ldi	r27, 0x00	; 0
    2526:	e3 e5       	ldi	r30, 0x53	; 83
    2528:	f0 e0       	ldi	r31, 0x00	; 0
    252a:	80 81       	ld	r24, Z
    252c:	8f 7e       	andi	r24, 0xEF	; 239
    252e:	8c 93       	st	X, r24
            CLR_BIT(TCCR0, TCCR0_COM01);
    2530:	a3 e5       	ldi	r26, 0x53	; 83
    2532:	b0 e0       	ldi	r27, 0x00	; 0
    2534:	e3 e5       	ldi	r30, 0x53	; 83
    2536:	f0 e0       	ldi	r31, 0x00	; 0
    2538:	80 81       	ld	r24, Z
    253a:	8f 7d       	andi	r24, 0xDF	; 223
    253c:	8c 93       	st	X, r24
    253e:	2e c0       	rjmp	.+92     	; 0x259c <Gpt_Init+0x1c2>
            break;
        case GPT_OUTPUT_TOGGLE:
            SET_BIT(TCCR0, TCCR0_COM00);
    2540:	a3 e5       	ldi	r26, 0x53	; 83
    2542:	b0 e0       	ldi	r27, 0x00	; 0
    2544:	e3 e5       	ldi	r30, 0x53	; 83
    2546:	f0 e0       	ldi	r31, 0x00	; 0
    2548:	80 81       	ld	r24, Z
    254a:	80 61       	ori	r24, 0x10	; 16
    254c:	8c 93       	st	X, r24
            CLR_BIT(TCCR0, TCCR0_COM01);
    254e:	a3 e5       	ldi	r26, 0x53	; 83
    2550:	b0 e0       	ldi	r27, 0x00	; 0
    2552:	e3 e5       	ldi	r30, 0x53	; 83
    2554:	f0 e0       	ldi	r31, 0x00	; 0
    2556:	80 81       	ld	r24, Z
    2558:	8f 7d       	andi	r24, 0xDF	; 223
    255a:	8c 93       	st	X, r24
    255c:	1f c0       	rjmp	.+62     	; 0x259c <Gpt_Init+0x1c2>
            // TODO
            break;
        case GPT_OUTPUT_SET:
            SET_BIT(TCCR0, TCCR0_COM00);
    255e:	a3 e5       	ldi	r26, 0x53	; 83
    2560:	b0 e0       	ldi	r27, 0x00	; 0
    2562:	e3 e5       	ldi	r30, 0x53	; 83
    2564:	f0 e0       	ldi	r31, 0x00	; 0
    2566:	80 81       	ld	r24, Z
    2568:	80 61       	ori	r24, 0x10	; 16
    256a:	8c 93       	st	X, r24
            SET_BIT(TCCR0, TCCR0_COM01);
    256c:	a3 e5       	ldi	r26, 0x53	; 83
    256e:	b0 e0       	ldi	r27, 0x00	; 0
    2570:	e3 e5       	ldi	r30, 0x53	; 83
    2572:	f0 e0       	ldi	r31, 0x00	; 0
    2574:	80 81       	ld	r24, Z
    2576:	80 62       	ori	r24, 0x20	; 32
    2578:	8c 93       	st	X, r24
    257a:	10 c0       	rjmp	.+32     	; 0x259c <Gpt_Init+0x1c2>
            // TODO
            break;
        case GPT_OUTPUT_CLEAR:
            CLR_BIT(TCCR0, TCCR0_COM00);
    257c:	a3 e5       	ldi	r26, 0x53	; 83
    257e:	b0 e0       	ldi	r27, 0x00	; 0
    2580:	e3 e5       	ldi	r30, 0x53	; 83
    2582:	f0 e0       	ldi	r31, 0x00	; 0
    2584:	80 81       	ld	r24, Z
    2586:	8f 7e       	andi	r24, 0xEF	; 239
    2588:	8c 93       	st	X, r24
            SET_BIT(TCCR0, TCCR0_COM01);
    258a:	a3 e5       	ldi	r26, 0x53	; 83
    258c:	b0 e0       	ldi	r27, 0x00	; 0
    258e:	e3 e5       	ldi	r30, 0x53	; 83
    2590:	f0 e0       	ldi	r31, 0x00	; 0
    2592:	80 81       	ld	r24, Z
    2594:	80 62       	ori	r24, 0x20	; 32
    2596:	8c 93       	st	X, r24
    2598:	01 c0       	rjmp	.+2      	; 0x259c <Gpt_Init+0x1c2>
            // TODO
            break;
        default:
            returnValue = GPT_ERROR;
    259a:	19 82       	std	Y+1, r1	; 0x01
            break;
        }

        /*Clock Select*/
        switch (config->prescaler)
    259c:	ea 81       	ldd	r30, Y+2	; 0x02
    259e:	fb 81       	ldd	r31, Y+3	; 0x03
    25a0:	83 81       	ldd	r24, Z+3	; 0x03
    25a2:	28 2f       	mov	r18, r24
    25a4:	30 e0       	ldi	r19, 0x00	; 0
    25a6:	39 8b       	std	Y+17, r19	; 0x11
    25a8:	28 8b       	std	Y+16, r18	; 0x10
    25aa:	88 89       	ldd	r24, Y+16	; 0x10
    25ac:	99 89       	ldd	r25, Y+17	; 0x11
    25ae:	84 30       	cpi	r24, 0x04	; 4
    25b0:	91 05       	cpc	r25, r1
    25b2:	09 f4       	brne	.+2      	; 0x25b6 <Gpt_Init+0x1dc>
    25b4:	77 c0       	rjmp	.+238    	; 0x26a4 <Gpt_Init+0x2ca>
    25b6:	28 89       	ldd	r18, Y+16	; 0x10
    25b8:	39 89       	ldd	r19, Y+17	; 0x11
    25ba:	25 30       	cpi	r18, 0x05	; 5
    25bc:	31 05       	cpc	r19, r1
    25be:	8c f4       	brge	.+34     	; 0x25e2 <Gpt_Init+0x208>
    25c0:	88 89       	ldd	r24, Y+16	; 0x10
    25c2:	99 89       	ldd	r25, Y+17	; 0x11
    25c4:	81 30       	cpi	r24, 0x01	; 1
    25c6:	91 05       	cpc	r25, r1
    25c8:	09 f4       	brne	.+2      	; 0x25cc <Gpt_Init+0x1f2>
    25ca:	40 c0       	rjmp	.+128    	; 0x264c <Gpt_Init+0x272>
    25cc:	28 89       	ldd	r18, Y+16	; 0x10
    25ce:	39 89       	ldd	r19, Y+17	; 0x11
    25d0:	22 30       	cpi	r18, 0x02	; 2
    25d2:	31 05       	cpc	r19, r1
    25d4:	09 f4       	brne	.+2      	; 0x25d8 <Gpt_Init+0x1fe>
    25d6:	50 c0       	rjmp	.+160    	; 0x2678 <Gpt_Init+0x29e>
    25d8:	88 89       	ldd	r24, Y+16	; 0x10
    25da:	99 89       	ldd	r25, Y+17	; 0x11
    25dc:	00 97       	sbiw	r24, 0x00	; 0
    25de:	01 f1       	breq	.+64     	; 0x2620 <Gpt_Init+0x246>
    25e0:	cf c0       	rjmp	.+414    	; 0x2780 <Gpt_Init+0x3a6>
    25e2:	28 89       	ldd	r18, Y+16	; 0x10
    25e4:	39 89       	ldd	r19, Y+17	; 0x11
    25e6:	27 30       	cpi	r18, 0x07	; 7
    25e8:	31 05       	cpc	r19, r1
    25ea:	09 f4       	brne	.+2      	; 0x25ee <Gpt_Init+0x214>
    25ec:	87 c0       	rjmp	.+270    	; 0x26fc <Gpt_Init+0x322>
    25ee:	88 89       	ldd	r24, Y+16	; 0x10
    25f0:	99 89       	ldd	r25, Y+17	; 0x11
    25f2:	88 30       	cpi	r24, 0x08	; 8
    25f4:	91 05       	cpc	r25, r1
    25f6:	3c f4       	brge	.+14     	; 0x2606 <Gpt_Init+0x22c>
    25f8:	28 89       	ldd	r18, Y+16	; 0x10
    25fa:	39 89       	ldd	r19, Y+17	; 0x11
    25fc:	26 30       	cpi	r18, 0x06	; 6
    25fe:	31 05       	cpc	r19, r1
    2600:	09 f4       	brne	.+2      	; 0x2604 <Gpt_Init+0x22a>
    2602:	66 c0       	rjmp	.+204    	; 0x26d0 <Gpt_Init+0x2f6>
    2604:	bd c0       	rjmp	.+378    	; 0x2780 <Gpt_Init+0x3a6>
    2606:	88 89       	ldd	r24, Y+16	; 0x10
    2608:	99 89       	ldd	r25, Y+17	; 0x11
    260a:	88 30       	cpi	r24, 0x08	; 8
    260c:	91 05       	cpc	r25, r1
    260e:	09 f4       	brne	.+2      	; 0x2612 <Gpt_Init+0x238>
    2610:	8b c0       	rjmp	.+278    	; 0x2728 <Gpt_Init+0x34e>
    2612:	28 89       	ldd	r18, Y+16	; 0x10
    2614:	39 89       	ldd	r19, Y+17	; 0x11
    2616:	29 30       	cpi	r18, 0x09	; 9
    2618:	31 05       	cpc	r19, r1
    261a:	09 f4       	brne	.+2      	; 0x261e <Gpt_Init+0x244>
    261c:	9b c0       	rjmp	.+310    	; 0x2754 <Gpt_Init+0x37a>
    261e:	b0 c0       	rjmp	.+352    	; 0x2780 <Gpt_Init+0x3a6>
        {
        case GPT_PRESCALER_0:
            CLR_BIT(TCCR0, TCCR0_CS00);
    2620:	a3 e5       	ldi	r26, 0x53	; 83
    2622:	b0 e0       	ldi	r27, 0x00	; 0
    2624:	e3 e5       	ldi	r30, 0x53	; 83
    2626:	f0 e0       	ldi	r31, 0x00	; 0
    2628:	80 81       	ld	r24, Z
    262a:	8e 7f       	andi	r24, 0xFE	; 254
    262c:	8c 93       	st	X, r24
            CLR_BIT(TCCR0, TCCR0_CS01);
    262e:	a3 e5       	ldi	r26, 0x53	; 83
    2630:	b0 e0       	ldi	r27, 0x00	; 0
    2632:	e3 e5       	ldi	r30, 0x53	; 83
    2634:	f0 e0       	ldi	r31, 0x00	; 0
    2636:	80 81       	ld	r24, Z
    2638:	8d 7f       	andi	r24, 0xFD	; 253
    263a:	8c 93       	st	X, r24
            CLR_BIT(TCCR0, TCCR0_CS02);
    263c:	a3 e5       	ldi	r26, 0x53	; 83
    263e:	b0 e0       	ldi	r27, 0x00	; 0
    2640:	e3 e5       	ldi	r30, 0x53	; 83
    2642:	f0 e0       	ldi	r31, 0x00	; 0
    2644:	80 81       	ld	r24, Z
    2646:	8b 7f       	andi	r24, 0xFB	; 251
    2648:	8c 93       	st	X, r24
    264a:	61 c5       	rjmp	.+2754   	; 0x310e <Gpt_Init+0xd34>
            break;
        case GPT_PRESCALER_1:
            SET_BIT(TCCR0, TCCR0_CS00);
    264c:	a3 e5       	ldi	r26, 0x53	; 83
    264e:	b0 e0       	ldi	r27, 0x00	; 0
    2650:	e3 e5       	ldi	r30, 0x53	; 83
    2652:	f0 e0       	ldi	r31, 0x00	; 0
    2654:	80 81       	ld	r24, Z
    2656:	81 60       	ori	r24, 0x01	; 1
    2658:	8c 93       	st	X, r24
            CLR_BIT(TCCR0, TCCR0_CS01);
    265a:	a3 e5       	ldi	r26, 0x53	; 83
    265c:	b0 e0       	ldi	r27, 0x00	; 0
    265e:	e3 e5       	ldi	r30, 0x53	; 83
    2660:	f0 e0       	ldi	r31, 0x00	; 0
    2662:	80 81       	ld	r24, Z
    2664:	8d 7f       	andi	r24, 0xFD	; 253
    2666:	8c 93       	st	X, r24
            CLR_BIT(TCCR0, TCCR0_CS02);
    2668:	a3 e5       	ldi	r26, 0x53	; 83
    266a:	b0 e0       	ldi	r27, 0x00	; 0
    266c:	e3 e5       	ldi	r30, 0x53	; 83
    266e:	f0 e0       	ldi	r31, 0x00	; 0
    2670:	80 81       	ld	r24, Z
    2672:	8b 7f       	andi	r24, 0xFB	; 251
    2674:	8c 93       	st	X, r24
    2676:	4b c5       	rjmp	.+2710   	; 0x310e <Gpt_Init+0xd34>
            break;
        case GPT_PRESCALER_8:
            CLR_BIT(TCCR0, TCCR0_CS00);
    2678:	a3 e5       	ldi	r26, 0x53	; 83
    267a:	b0 e0       	ldi	r27, 0x00	; 0
    267c:	e3 e5       	ldi	r30, 0x53	; 83
    267e:	f0 e0       	ldi	r31, 0x00	; 0
    2680:	80 81       	ld	r24, Z
    2682:	8e 7f       	andi	r24, 0xFE	; 254
    2684:	8c 93       	st	X, r24
            SET_BIT(TCCR0, TCCR0_CS01);
    2686:	a3 e5       	ldi	r26, 0x53	; 83
    2688:	b0 e0       	ldi	r27, 0x00	; 0
    268a:	e3 e5       	ldi	r30, 0x53	; 83
    268c:	f0 e0       	ldi	r31, 0x00	; 0
    268e:	80 81       	ld	r24, Z
    2690:	82 60       	ori	r24, 0x02	; 2
    2692:	8c 93       	st	X, r24
            CLR_BIT(TCCR0, TCCR0_CS02);
    2694:	a3 e5       	ldi	r26, 0x53	; 83
    2696:	b0 e0       	ldi	r27, 0x00	; 0
    2698:	e3 e5       	ldi	r30, 0x53	; 83
    269a:	f0 e0       	ldi	r31, 0x00	; 0
    269c:	80 81       	ld	r24, Z
    269e:	8b 7f       	andi	r24, 0xFB	; 251
    26a0:	8c 93       	st	X, r24
    26a2:	35 c5       	rjmp	.+2666   	; 0x310e <Gpt_Init+0xd34>
            break;
        case GPT_PRESCALER_64:
            SET_BIT(TCCR0, TCCR0_CS00);
    26a4:	a3 e5       	ldi	r26, 0x53	; 83
    26a6:	b0 e0       	ldi	r27, 0x00	; 0
    26a8:	e3 e5       	ldi	r30, 0x53	; 83
    26aa:	f0 e0       	ldi	r31, 0x00	; 0
    26ac:	80 81       	ld	r24, Z
    26ae:	81 60       	ori	r24, 0x01	; 1
    26b0:	8c 93       	st	X, r24
            SET_BIT(TCCR0, TCCR0_CS01);
    26b2:	a3 e5       	ldi	r26, 0x53	; 83
    26b4:	b0 e0       	ldi	r27, 0x00	; 0
    26b6:	e3 e5       	ldi	r30, 0x53	; 83
    26b8:	f0 e0       	ldi	r31, 0x00	; 0
    26ba:	80 81       	ld	r24, Z
    26bc:	82 60       	ori	r24, 0x02	; 2
    26be:	8c 93       	st	X, r24
            CLR_BIT(TCCR0, TCCR0_CS02);
    26c0:	a3 e5       	ldi	r26, 0x53	; 83
    26c2:	b0 e0       	ldi	r27, 0x00	; 0
    26c4:	e3 e5       	ldi	r30, 0x53	; 83
    26c6:	f0 e0       	ldi	r31, 0x00	; 0
    26c8:	80 81       	ld	r24, Z
    26ca:	8b 7f       	andi	r24, 0xFB	; 251
    26cc:	8c 93       	st	X, r24
    26ce:	1f c5       	rjmp	.+2622   	; 0x310e <Gpt_Init+0xd34>
            // TODO
            break;
        case GPT_PRESCALER_256:
            CLR_BIT(TCCR0, TCCR0_CS00);
    26d0:	a3 e5       	ldi	r26, 0x53	; 83
    26d2:	b0 e0       	ldi	r27, 0x00	; 0
    26d4:	e3 e5       	ldi	r30, 0x53	; 83
    26d6:	f0 e0       	ldi	r31, 0x00	; 0
    26d8:	80 81       	ld	r24, Z
    26da:	8e 7f       	andi	r24, 0xFE	; 254
    26dc:	8c 93       	st	X, r24
            CLR_BIT(TCCR0, TCCR0_CS01);
    26de:	a3 e5       	ldi	r26, 0x53	; 83
    26e0:	b0 e0       	ldi	r27, 0x00	; 0
    26e2:	e3 e5       	ldi	r30, 0x53	; 83
    26e4:	f0 e0       	ldi	r31, 0x00	; 0
    26e6:	80 81       	ld	r24, Z
    26e8:	8d 7f       	andi	r24, 0xFD	; 253
    26ea:	8c 93       	st	X, r24
            SET_BIT(TCCR0, TCCR0_CS02);
    26ec:	a3 e5       	ldi	r26, 0x53	; 83
    26ee:	b0 e0       	ldi	r27, 0x00	; 0
    26f0:	e3 e5       	ldi	r30, 0x53	; 83
    26f2:	f0 e0       	ldi	r31, 0x00	; 0
    26f4:	80 81       	ld	r24, Z
    26f6:	84 60       	ori	r24, 0x04	; 4
    26f8:	8c 93       	st	X, r24
    26fa:	09 c5       	rjmp	.+2578   	; 0x310e <Gpt_Init+0xd34>
            // TODO
            break;
        case GPT_PRESCALER_1024:
            SET_BIT(TCCR0, TCCR0_CS00);
    26fc:	a3 e5       	ldi	r26, 0x53	; 83
    26fe:	b0 e0       	ldi	r27, 0x00	; 0
    2700:	e3 e5       	ldi	r30, 0x53	; 83
    2702:	f0 e0       	ldi	r31, 0x00	; 0
    2704:	80 81       	ld	r24, Z
    2706:	81 60       	ori	r24, 0x01	; 1
    2708:	8c 93       	st	X, r24
            CLR_BIT(TCCR0, TCCR0_CS01);
    270a:	a3 e5       	ldi	r26, 0x53	; 83
    270c:	b0 e0       	ldi	r27, 0x00	; 0
    270e:	e3 e5       	ldi	r30, 0x53	; 83
    2710:	f0 e0       	ldi	r31, 0x00	; 0
    2712:	80 81       	ld	r24, Z
    2714:	8d 7f       	andi	r24, 0xFD	; 253
    2716:	8c 93       	st	X, r24
            SET_BIT(TCCR0, TCCR0_CS02);
    2718:	a3 e5       	ldi	r26, 0x53	; 83
    271a:	b0 e0       	ldi	r27, 0x00	; 0
    271c:	e3 e5       	ldi	r30, 0x53	; 83
    271e:	f0 e0       	ldi	r31, 0x00	; 0
    2720:	80 81       	ld	r24, Z
    2722:	84 60       	ori	r24, 0x04	; 4
    2724:	8c 93       	st	X, r24
    2726:	f3 c4       	rjmp	.+2534   	; 0x310e <Gpt_Init+0xd34>
            break;
        case GPT_PRESCALER_EXT_FALLING:
            CLR_BIT(TCCR0, TCCR0_CS00);
    2728:	a3 e5       	ldi	r26, 0x53	; 83
    272a:	b0 e0       	ldi	r27, 0x00	; 0
    272c:	e3 e5       	ldi	r30, 0x53	; 83
    272e:	f0 e0       	ldi	r31, 0x00	; 0
    2730:	80 81       	ld	r24, Z
    2732:	8e 7f       	andi	r24, 0xFE	; 254
    2734:	8c 93       	st	X, r24
            SET_BIT(TCCR0, TCCR0_CS01);
    2736:	a3 e5       	ldi	r26, 0x53	; 83
    2738:	b0 e0       	ldi	r27, 0x00	; 0
    273a:	e3 e5       	ldi	r30, 0x53	; 83
    273c:	f0 e0       	ldi	r31, 0x00	; 0
    273e:	80 81       	ld	r24, Z
    2740:	82 60       	ori	r24, 0x02	; 2
    2742:	8c 93       	st	X, r24
            SET_BIT(TCCR0, TCCR0_CS02);
    2744:	a3 e5       	ldi	r26, 0x53	; 83
    2746:	b0 e0       	ldi	r27, 0x00	; 0
    2748:	e3 e5       	ldi	r30, 0x53	; 83
    274a:	f0 e0       	ldi	r31, 0x00	; 0
    274c:	80 81       	ld	r24, Z
    274e:	84 60       	ori	r24, 0x04	; 4
    2750:	8c 93       	st	X, r24
    2752:	dd c4       	rjmp	.+2490   	; 0x310e <Gpt_Init+0xd34>
            // TODO
            break;
        case GPT_PRESCALER_EXT_RISING:
            SET_BIT(TCCR0, TCCR0_CS00);
    2754:	a3 e5       	ldi	r26, 0x53	; 83
    2756:	b0 e0       	ldi	r27, 0x00	; 0
    2758:	e3 e5       	ldi	r30, 0x53	; 83
    275a:	f0 e0       	ldi	r31, 0x00	; 0
    275c:	80 81       	ld	r24, Z
    275e:	81 60       	ori	r24, 0x01	; 1
    2760:	8c 93       	st	X, r24
            SET_BIT(TCCR0, TCCR0_CS01);
    2762:	a3 e5       	ldi	r26, 0x53	; 83
    2764:	b0 e0       	ldi	r27, 0x00	; 0
    2766:	e3 e5       	ldi	r30, 0x53	; 83
    2768:	f0 e0       	ldi	r31, 0x00	; 0
    276a:	80 81       	ld	r24, Z
    276c:	82 60       	ori	r24, 0x02	; 2
    276e:	8c 93       	st	X, r24
            SET_BIT(TCCR0, TCCR0_CS02);
    2770:	a3 e5       	ldi	r26, 0x53	; 83
    2772:	b0 e0       	ldi	r27, 0x00	; 0
    2774:	e3 e5       	ldi	r30, 0x53	; 83
    2776:	f0 e0       	ldi	r31, 0x00	; 0
    2778:	80 81       	ld	r24, Z
    277a:	84 60       	ori	r24, 0x04	; 4
    277c:	8c 93       	st	X, r24
    277e:	c7 c4       	rjmp	.+2446   	; 0x310e <Gpt_Init+0xd34>
            // TODO
            break;
        default:
            returnValue = GPT_ERROR;
    2780:	19 82       	std	Y+1, r1	; 0x01
    2782:	c5 c4       	rjmp	.+2442   	; 0x310e <Gpt_Init+0xd34>
            break;
        }
        break;
    case GPT_CHANNEL_TIMER1A:
        /*Waveform Generation Mode*/
        if (config->mode == GPT_MODE_NORMAL)
    2784:	ea 81       	ldd	r30, Y+2	; 0x02
    2786:	fb 81       	ldd	r31, Y+3	; 0x03
    2788:	81 81       	ldd	r24, Z+1	; 0x01
    278a:	88 23       	and	r24, r24
    278c:	e9 f4       	brne	.+58     	; 0x27c8 <Gpt_Init+0x3ee>
        {
            CLR_BIT(TCCR1A,TCCR1A_WGM10);
    278e:	af e4       	ldi	r26, 0x4F	; 79
    2790:	b0 e0       	ldi	r27, 0x00	; 0
    2792:	ef e4       	ldi	r30, 0x4F	; 79
    2794:	f0 e0       	ldi	r31, 0x00	; 0
    2796:	80 81       	ld	r24, Z
    2798:	8e 7f       	andi	r24, 0xFE	; 254
    279a:	8c 93       	st	X, r24
            CLR_BIT(TCCR1A,TCCR1A_WGM11);
    279c:	af e4       	ldi	r26, 0x4F	; 79
    279e:	b0 e0       	ldi	r27, 0x00	; 0
    27a0:	ef e4       	ldi	r30, 0x4F	; 79
    27a2:	f0 e0       	ldi	r31, 0x00	; 0
    27a4:	80 81       	ld	r24, Z
    27a6:	8d 7f       	andi	r24, 0xFD	; 253
    27a8:	8c 93       	st	X, r24
            CLR_BIT(TCCR1B,TCCR1B_WGM12);
    27aa:	ae e4       	ldi	r26, 0x4E	; 78
    27ac:	b0 e0       	ldi	r27, 0x00	; 0
    27ae:	ee e4       	ldi	r30, 0x4E	; 78
    27b0:	f0 e0       	ldi	r31, 0x00	; 0
    27b2:	80 81       	ld	r24, Z
    27b4:	87 7f       	andi	r24, 0xF7	; 247
    27b6:	8c 93       	st	X, r24
            CLR_BIT(TCCR1B,TCCR1B_WGM13);
    27b8:	ae e4       	ldi	r26, 0x4E	; 78
    27ba:	b0 e0       	ldi	r27, 0x00	; 0
    27bc:	ee e4       	ldi	r30, 0x4E	; 78
    27be:	f0 e0       	ldi	r31, 0x00	; 0
    27c0:	80 81       	ld	r24, Z
    27c2:	8f 7e       	andi	r24, 0xEF	; 239
    27c4:	8c 93       	st	X, r24
    27c6:	45 c0       	rjmp	.+138    	; 0x2852 <Gpt_Init+0x478>
            // TODO
            // TODO
        }
        else if (config->mode == GPT_MODE_CTC)
    27c8:	ea 81       	ldd	r30, Y+2	; 0x02
    27ca:	fb 81       	ldd	r31, Y+3	; 0x03
    27cc:	81 81       	ldd	r24, Z+1	; 0x01
    27ce:	81 30       	cpi	r24, 0x01	; 1
    27d0:	e9 f4       	brne	.+58     	; 0x280c <Gpt_Init+0x432>
        {
            CLR_BIT(TCCR1A,TCCR1A_WGM10);
    27d2:	af e4       	ldi	r26, 0x4F	; 79
    27d4:	b0 e0       	ldi	r27, 0x00	; 0
    27d6:	ef e4       	ldi	r30, 0x4F	; 79
    27d8:	f0 e0       	ldi	r31, 0x00	; 0
    27da:	80 81       	ld	r24, Z
    27dc:	8e 7f       	andi	r24, 0xFE	; 254
    27de:	8c 93       	st	X, r24
            CLR_BIT(TCCR1A,TCCR1A_WGM11);
    27e0:	af e4       	ldi	r26, 0x4F	; 79
    27e2:	b0 e0       	ldi	r27, 0x00	; 0
    27e4:	ef e4       	ldi	r30, 0x4F	; 79
    27e6:	f0 e0       	ldi	r31, 0x00	; 0
    27e8:	80 81       	ld	r24, Z
    27ea:	8d 7f       	andi	r24, 0xFD	; 253
    27ec:	8c 93       	st	X, r24
            SET_BIT(TCCR1B,TCCR1B_WGM12);
    27ee:	ae e4       	ldi	r26, 0x4E	; 78
    27f0:	b0 e0       	ldi	r27, 0x00	; 0
    27f2:	ee e4       	ldi	r30, 0x4E	; 78
    27f4:	f0 e0       	ldi	r31, 0x00	; 0
    27f6:	80 81       	ld	r24, Z
    27f8:	88 60       	ori	r24, 0x08	; 8
    27fa:	8c 93       	st	X, r24
            CLR_BIT(TCCR1B,TCCR1B_WGM13);
    27fc:	ae e4       	ldi	r26, 0x4E	; 78
    27fe:	b0 e0       	ldi	r27, 0x00	; 0
    2800:	ee e4       	ldi	r30, 0x4E	; 78
    2802:	f0 e0       	ldi	r31, 0x00	; 0
    2804:	80 81       	ld	r24, Z
    2806:	8f 7e       	andi	r24, 0xEF	; 239
    2808:	8c 93       	st	X, r24
    280a:	23 c0       	rjmp	.+70     	; 0x2852 <Gpt_Init+0x478>
            // TODO
            // TODO
        }else if (config->mode == SPT_MODE_Fast_PWM_mod14)
    280c:	ea 81       	ldd	r30, Y+2	; 0x02
    280e:	fb 81       	ldd	r31, Y+3	; 0x03
    2810:	81 81       	ldd	r24, Z+1	; 0x01
    2812:	84 30       	cpi	r24, 0x04	; 4
    2814:	e9 f4       	brne	.+58     	; 0x2850 <Gpt_Init+0x476>
        {
            CLR_BIT(TCCR1A,TCCR1A_WGM10);
    2816:	af e4       	ldi	r26, 0x4F	; 79
    2818:	b0 e0       	ldi	r27, 0x00	; 0
    281a:	ef e4       	ldi	r30, 0x4F	; 79
    281c:	f0 e0       	ldi	r31, 0x00	; 0
    281e:	80 81       	ld	r24, Z
    2820:	8e 7f       	andi	r24, 0xFE	; 254
    2822:	8c 93       	st	X, r24
            SET_BIT(TCCR1A,TCCR1A_WGM11);
    2824:	af e4       	ldi	r26, 0x4F	; 79
    2826:	b0 e0       	ldi	r27, 0x00	; 0
    2828:	ef e4       	ldi	r30, 0x4F	; 79
    282a:	f0 e0       	ldi	r31, 0x00	; 0
    282c:	80 81       	ld	r24, Z
    282e:	82 60       	ori	r24, 0x02	; 2
    2830:	8c 93       	st	X, r24
            SET_BIT(TCCR1B,TCCR1B_WGM12);
    2832:	ae e4       	ldi	r26, 0x4E	; 78
    2834:	b0 e0       	ldi	r27, 0x00	; 0
    2836:	ee e4       	ldi	r30, 0x4E	; 78
    2838:	f0 e0       	ldi	r31, 0x00	; 0
    283a:	80 81       	ld	r24, Z
    283c:	88 60       	ori	r24, 0x08	; 8
    283e:	8c 93       	st	X, r24
            SET_BIT(TCCR1B,TCCR1B_WGM13);
    2840:	ae e4       	ldi	r26, 0x4E	; 78
    2842:	b0 e0       	ldi	r27, 0x00	; 0
    2844:	ee e4       	ldi	r30, 0x4E	; 78
    2846:	f0 e0       	ldi	r31, 0x00	; 0
    2848:	80 81       	ld	r24, Z
    284a:	80 61       	ori	r24, 0x10	; 16
    284c:	8c 93       	st	X, r24
    284e:	01 c0       	rjmp	.+2      	; 0x2852 <Gpt_Init+0x478>
            // TODO
            // TODO
        }
        else
        {
            returnValue = GPT_ERROR;
    2850:	19 82       	std	Y+1, r1	; 0x01
        }
        /*Compare Match Output Mode*/
        switch (config->output)
    2852:	ea 81       	ldd	r30, Y+2	; 0x02
    2854:	fb 81       	ldd	r31, Y+3	; 0x03
    2856:	82 81       	ldd	r24, Z+2	; 0x02
    2858:	28 2f       	mov	r18, r24
    285a:	30 e0       	ldi	r19, 0x00	; 0
    285c:	3f 87       	std	Y+15, r19	; 0x0f
    285e:	2e 87       	std	Y+14, r18	; 0x0e
    2860:	8e 85       	ldd	r24, Y+14	; 0x0e
    2862:	9f 85       	ldd	r25, Y+15	; 0x0f
    2864:	81 30       	cpi	r24, 0x01	; 1
    2866:	91 05       	cpc	r25, r1
    2868:	21 f1       	breq	.+72     	; 0x28b2 <Gpt_Init+0x4d8>
    286a:	2e 85       	ldd	r18, Y+14	; 0x0e
    286c:	3f 85       	ldd	r19, Y+15	; 0x0f
    286e:	22 30       	cpi	r18, 0x02	; 2
    2870:	31 05       	cpc	r19, r1
    2872:	2c f4       	brge	.+10     	; 0x287e <Gpt_Init+0x4a4>
    2874:	8e 85       	ldd	r24, Y+14	; 0x0e
    2876:	9f 85       	ldd	r25, Y+15	; 0x0f
    2878:	00 97       	sbiw	r24, 0x00	; 0
    287a:	61 f0       	breq	.+24     	; 0x2894 <Gpt_Init+0x4ba>
    287c:	47 c0       	rjmp	.+142    	; 0x290c <Gpt_Init+0x532>
    287e:	2e 85       	ldd	r18, Y+14	; 0x0e
    2880:	3f 85       	ldd	r19, Y+15	; 0x0f
    2882:	22 30       	cpi	r18, 0x02	; 2
    2884:	31 05       	cpc	r19, r1
    2886:	21 f1       	breq	.+72     	; 0x28d0 <Gpt_Init+0x4f6>
    2888:	8e 85       	ldd	r24, Y+14	; 0x0e
    288a:	9f 85       	ldd	r25, Y+15	; 0x0f
    288c:	83 30       	cpi	r24, 0x03	; 3
    288e:	91 05       	cpc	r25, r1
    2890:	71 f1       	breq	.+92     	; 0x28ee <Gpt_Init+0x514>
    2892:	3c c0       	rjmp	.+120    	; 0x290c <Gpt_Init+0x532>
        {
        case GPT_OUTPUT_NORMAL:
            CLR_BIT(TCCR1A,TCCR1A_COM1A0);
    2894:	af e4       	ldi	r26, 0x4F	; 79
    2896:	b0 e0       	ldi	r27, 0x00	; 0
    2898:	ef e4       	ldi	r30, 0x4F	; 79
    289a:	f0 e0       	ldi	r31, 0x00	; 0
    289c:	80 81       	ld	r24, Z
    289e:	8f 7b       	andi	r24, 0xBF	; 191
    28a0:	8c 93       	st	X, r24
            CLR_BIT(TCCR1A,TCCR1A_COM1A1);
    28a2:	af e4       	ldi	r26, 0x4F	; 79
    28a4:	b0 e0       	ldi	r27, 0x00	; 0
    28a6:	ef e4       	ldi	r30, 0x4F	; 79
    28a8:	f0 e0       	ldi	r31, 0x00	; 0
    28aa:	80 81       	ld	r24, Z
    28ac:	8f 77       	andi	r24, 0x7F	; 127
    28ae:	8c 93       	st	X, r24
    28b0:	2e c0       	rjmp	.+92     	; 0x290e <Gpt_Init+0x534>
            
            // TODO
            break;
        case GPT_OUTPUT_TOGGLE:
            SET_BIT(TCCR1A,TCCR1A_COM1A0);
    28b2:	af e4       	ldi	r26, 0x4F	; 79
    28b4:	b0 e0       	ldi	r27, 0x00	; 0
    28b6:	ef e4       	ldi	r30, 0x4F	; 79
    28b8:	f0 e0       	ldi	r31, 0x00	; 0
    28ba:	80 81       	ld	r24, Z
    28bc:	80 64       	ori	r24, 0x40	; 64
    28be:	8c 93       	st	X, r24
            CLR_BIT(TCCR1A,TCCR1A_COM1A1);
    28c0:	af e4       	ldi	r26, 0x4F	; 79
    28c2:	b0 e0       	ldi	r27, 0x00	; 0
    28c4:	ef e4       	ldi	r30, 0x4F	; 79
    28c6:	f0 e0       	ldi	r31, 0x00	; 0
    28c8:	80 81       	ld	r24, Z
    28ca:	8f 77       	andi	r24, 0x7F	; 127
    28cc:	8c 93       	st	X, r24
    28ce:	1f c0       	rjmp	.+62     	; 0x290e <Gpt_Init+0x534>
            // TODO
            break;
        case GPT_OUTPUT_SET:
            SET_BIT(TCCR1A,TCCR1A_COM1A0);
    28d0:	af e4       	ldi	r26, 0x4F	; 79
    28d2:	b0 e0       	ldi	r27, 0x00	; 0
    28d4:	ef e4       	ldi	r30, 0x4F	; 79
    28d6:	f0 e0       	ldi	r31, 0x00	; 0
    28d8:	80 81       	ld	r24, Z
    28da:	80 64       	ori	r24, 0x40	; 64
    28dc:	8c 93       	st	X, r24
            SET_BIT(TCCR1A,TCCR1A_COM1A1);
    28de:	af e4       	ldi	r26, 0x4F	; 79
    28e0:	b0 e0       	ldi	r27, 0x00	; 0
    28e2:	ef e4       	ldi	r30, 0x4F	; 79
    28e4:	f0 e0       	ldi	r31, 0x00	; 0
    28e6:	80 81       	ld	r24, Z
    28e8:	80 68       	ori	r24, 0x80	; 128
    28ea:	8c 93       	st	X, r24
    28ec:	10 c0       	rjmp	.+32     	; 0x290e <Gpt_Init+0x534>
            // TODO
            break;
        case GPT_OUTPUT_CLEAR:
            CLR_BIT(TCCR1A,TCCR1A_COM1A0);
    28ee:	af e4       	ldi	r26, 0x4F	; 79
    28f0:	b0 e0       	ldi	r27, 0x00	; 0
    28f2:	ef e4       	ldi	r30, 0x4F	; 79
    28f4:	f0 e0       	ldi	r31, 0x00	; 0
    28f6:	80 81       	ld	r24, Z
    28f8:	8f 7b       	andi	r24, 0xBF	; 191
    28fa:	8c 93       	st	X, r24
            SET_BIT(TCCR1A,TCCR1A_COM1A1);
    28fc:	af e4       	ldi	r26, 0x4F	; 79
    28fe:	b0 e0       	ldi	r27, 0x00	; 0
    2900:	ef e4       	ldi	r30, 0x4F	; 79
    2902:	f0 e0       	ldi	r31, 0x00	; 0
    2904:	80 81       	ld	r24, Z
    2906:	80 68       	ori	r24, 0x80	; 128
    2908:	8c 93       	st	X, r24
    290a:	01 c0       	rjmp	.+2      	; 0x290e <Gpt_Init+0x534>
            // TODO
            break;
        default:
            returnValue = GPT_ERROR;
    290c:	19 82       	std	Y+1, r1	; 0x01
            break;
        }

        /*Clock Select*/
        switch (config->prescaler)
    290e:	ea 81       	ldd	r30, Y+2	; 0x02
    2910:	fb 81       	ldd	r31, Y+3	; 0x03
    2912:	83 81       	ldd	r24, Z+3	; 0x03
    2914:	28 2f       	mov	r18, r24
    2916:	30 e0       	ldi	r19, 0x00	; 0
    2918:	3d 87       	std	Y+13, r19	; 0x0d
    291a:	2c 87       	std	Y+12, r18	; 0x0c
    291c:	8c 85       	ldd	r24, Y+12	; 0x0c
    291e:	9d 85       	ldd	r25, Y+13	; 0x0d
    2920:	84 30       	cpi	r24, 0x04	; 4
    2922:	91 05       	cpc	r25, r1
    2924:	09 f4       	brne	.+2      	; 0x2928 <Gpt_Init+0x54e>
    2926:	77 c0       	rjmp	.+238    	; 0x2a16 <Gpt_Init+0x63c>
    2928:	2c 85       	ldd	r18, Y+12	; 0x0c
    292a:	3d 85       	ldd	r19, Y+13	; 0x0d
    292c:	25 30       	cpi	r18, 0x05	; 5
    292e:	31 05       	cpc	r19, r1
    2930:	8c f4       	brge	.+34     	; 0x2954 <Gpt_Init+0x57a>
    2932:	8c 85       	ldd	r24, Y+12	; 0x0c
    2934:	9d 85       	ldd	r25, Y+13	; 0x0d
    2936:	81 30       	cpi	r24, 0x01	; 1
    2938:	91 05       	cpc	r25, r1
    293a:	09 f4       	brne	.+2      	; 0x293e <Gpt_Init+0x564>
    293c:	40 c0       	rjmp	.+128    	; 0x29be <Gpt_Init+0x5e4>
    293e:	2c 85       	ldd	r18, Y+12	; 0x0c
    2940:	3d 85       	ldd	r19, Y+13	; 0x0d
    2942:	22 30       	cpi	r18, 0x02	; 2
    2944:	31 05       	cpc	r19, r1
    2946:	09 f4       	brne	.+2      	; 0x294a <Gpt_Init+0x570>
    2948:	50 c0       	rjmp	.+160    	; 0x29ea <Gpt_Init+0x610>
    294a:	8c 85       	ldd	r24, Y+12	; 0x0c
    294c:	9d 85       	ldd	r25, Y+13	; 0x0d
    294e:	00 97       	sbiw	r24, 0x00	; 0
    2950:	01 f1       	breq	.+64     	; 0x2992 <Gpt_Init+0x5b8>
    2952:	cf c0       	rjmp	.+414    	; 0x2af2 <Gpt_Init+0x718>
    2954:	2c 85       	ldd	r18, Y+12	; 0x0c
    2956:	3d 85       	ldd	r19, Y+13	; 0x0d
    2958:	27 30       	cpi	r18, 0x07	; 7
    295a:	31 05       	cpc	r19, r1
    295c:	09 f4       	brne	.+2      	; 0x2960 <Gpt_Init+0x586>
    295e:	87 c0       	rjmp	.+270    	; 0x2a6e <Gpt_Init+0x694>
    2960:	8c 85       	ldd	r24, Y+12	; 0x0c
    2962:	9d 85       	ldd	r25, Y+13	; 0x0d
    2964:	88 30       	cpi	r24, 0x08	; 8
    2966:	91 05       	cpc	r25, r1
    2968:	3c f4       	brge	.+14     	; 0x2978 <Gpt_Init+0x59e>
    296a:	2c 85       	ldd	r18, Y+12	; 0x0c
    296c:	3d 85       	ldd	r19, Y+13	; 0x0d
    296e:	26 30       	cpi	r18, 0x06	; 6
    2970:	31 05       	cpc	r19, r1
    2972:	09 f4       	brne	.+2      	; 0x2976 <Gpt_Init+0x59c>
    2974:	66 c0       	rjmp	.+204    	; 0x2a42 <Gpt_Init+0x668>
    2976:	bd c0       	rjmp	.+378    	; 0x2af2 <Gpt_Init+0x718>
    2978:	8c 85       	ldd	r24, Y+12	; 0x0c
    297a:	9d 85       	ldd	r25, Y+13	; 0x0d
    297c:	88 30       	cpi	r24, 0x08	; 8
    297e:	91 05       	cpc	r25, r1
    2980:	09 f4       	brne	.+2      	; 0x2984 <Gpt_Init+0x5aa>
    2982:	8b c0       	rjmp	.+278    	; 0x2a9a <Gpt_Init+0x6c0>
    2984:	2c 85       	ldd	r18, Y+12	; 0x0c
    2986:	3d 85       	ldd	r19, Y+13	; 0x0d
    2988:	29 30       	cpi	r18, 0x09	; 9
    298a:	31 05       	cpc	r19, r1
    298c:	09 f4       	brne	.+2      	; 0x2990 <Gpt_Init+0x5b6>
    298e:	9b c0       	rjmp	.+310    	; 0x2ac6 <Gpt_Init+0x6ec>
    2990:	b0 c0       	rjmp	.+352    	; 0x2af2 <Gpt_Init+0x718>
        {
        case GPT_PRESCALER_0:
            CLR_BIT(TCCR1B,TCCR1B_CS10);
    2992:	ae e4       	ldi	r26, 0x4E	; 78
    2994:	b0 e0       	ldi	r27, 0x00	; 0
    2996:	ee e4       	ldi	r30, 0x4E	; 78
    2998:	f0 e0       	ldi	r31, 0x00	; 0
    299a:	80 81       	ld	r24, Z
    299c:	8e 7f       	andi	r24, 0xFE	; 254
    299e:	8c 93       	st	X, r24
            CLR_BIT(TCCR1B,TCCR1B_CS11);
    29a0:	ae e4       	ldi	r26, 0x4E	; 78
    29a2:	b0 e0       	ldi	r27, 0x00	; 0
    29a4:	ee e4       	ldi	r30, 0x4E	; 78
    29a6:	f0 e0       	ldi	r31, 0x00	; 0
    29a8:	80 81       	ld	r24, Z
    29aa:	8d 7f       	andi	r24, 0xFD	; 253
    29ac:	8c 93       	st	X, r24
            CLR_BIT(TCCR1B,TCCR1B_CS12);
    29ae:	ae e4       	ldi	r26, 0x4E	; 78
    29b0:	b0 e0       	ldi	r27, 0x00	; 0
    29b2:	ee e4       	ldi	r30, 0x4E	; 78
    29b4:	f0 e0       	ldi	r31, 0x00	; 0
    29b6:	80 81       	ld	r24, Z
    29b8:	8b 7f       	andi	r24, 0xFB	; 251
    29ba:	8c 93       	st	X, r24
    29bc:	a8 c3       	rjmp	.+1872   	; 0x310e <Gpt_Init+0xd34>
            // TODO
            break;
        case GPT_PRESCALER_1:
            SET_BIT(TCCR1B,TCCR1B_CS10);
    29be:	ae e4       	ldi	r26, 0x4E	; 78
    29c0:	b0 e0       	ldi	r27, 0x00	; 0
    29c2:	ee e4       	ldi	r30, 0x4E	; 78
    29c4:	f0 e0       	ldi	r31, 0x00	; 0
    29c6:	80 81       	ld	r24, Z
    29c8:	81 60       	ori	r24, 0x01	; 1
    29ca:	8c 93       	st	X, r24
            CLR_BIT(TCCR1B,TCCR1B_CS11);
    29cc:	ae e4       	ldi	r26, 0x4E	; 78
    29ce:	b0 e0       	ldi	r27, 0x00	; 0
    29d0:	ee e4       	ldi	r30, 0x4E	; 78
    29d2:	f0 e0       	ldi	r31, 0x00	; 0
    29d4:	80 81       	ld	r24, Z
    29d6:	8d 7f       	andi	r24, 0xFD	; 253
    29d8:	8c 93       	st	X, r24
            CLR_BIT(TCCR1B,TCCR1B_CS12);        
    29da:	ae e4       	ldi	r26, 0x4E	; 78
    29dc:	b0 e0       	ldi	r27, 0x00	; 0
    29de:	ee e4       	ldi	r30, 0x4E	; 78
    29e0:	f0 e0       	ldi	r31, 0x00	; 0
    29e2:	80 81       	ld	r24, Z
    29e4:	8b 7f       	andi	r24, 0xFB	; 251
    29e6:	8c 93       	st	X, r24
    29e8:	92 c3       	rjmp	.+1828   	; 0x310e <Gpt_Init+0xd34>
            // TODO
            break;
        case GPT_PRESCALER_8:
            CLR_BIT(TCCR1B,TCCR1B_CS10);
    29ea:	ae e4       	ldi	r26, 0x4E	; 78
    29ec:	b0 e0       	ldi	r27, 0x00	; 0
    29ee:	ee e4       	ldi	r30, 0x4E	; 78
    29f0:	f0 e0       	ldi	r31, 0x00	; 0
    29f2:	80 81       	ld	r24, Z
    29f4:	8e 7f       	andi	r24, 0xFE	; 254
    29f6:	8c 93       	st	X, r24
            SET_BIT(TCCR1B,TCCR1B_CS11);
    29f8:	ae e4       	ldi	r26, 0x4E	; 78
    29fa:	b0 e0       	ldi	r27, 0x00	; 0
    29fc:	ee e4       	ldi	r30, 0x4E	; 78
    29fe:	f0 e0       	ldi	r31, 0x00	; 0
    2a00:	80 81       	ld	r24, Z
    2a02:	82 60       	ori	r24, 0x02	; 2
    2a04:	8c 93       	st	X, r24
            CLR_BIT(TCCR1B,TCCR1B_CS12);
    2a06:	ae e4       	ldi	r26, 0x4E	; 78
    2a08:	b0 e0       	ldi	r27, 0x00	; 0
    2a0a:	ee e4       	ldi	r30, 0x4E	; 78
    2a0c:	f0 e0       	ldi	r31, 0x00	; 0
    2a0e:	80 81       	ld	r24, Z
    2a10:	8b 7f       	andi	r24, 0xFB	; 251
    2a12:	8c 93       	st	X, r24
    2a14:	7c c3       	rjmp	.+1784   	; 0x310e <Gpt_Init+0xd34>
            // TODO
            break;
        case GPT_PRESCALER_64:
            SET_BIT(TCCR1B,TCCR1B_CS10);
    2a16:	ae e4       	ldi	r26, 0x4E	; 78
    2a18:	b0 e0       	ldi	r27, 0x00	; 0
    2a1a:	ee e4       	ldi	r30, 0x4E	; 78
    2a1c:	f0 e0       	ldi	r31, 0x00	; 0
    2a1e:	80 81       	ld	r24, Z
    2a20:	81 60       	ori	r24, 0x01	; 1
    2a22:	8c 93       	st	X, r24
            SET_BIT(TCCR1B,TCCR1B_CS11);
    2a24:	ae e4       	ldi	r26, 0x4E	; 78
    2a26:	b0 e0       	ldi	r27, 0x00	; 0
    2a28:	ee e4       	ldi	r30, 0x4E	; 78
    2a2a:	f0 e0       	ldi	r31, 0x00	; 0
    2a2c:	80 81       	ld	r24, Z
    2a2e:	82 60       	ori	r24, 0x02	; 2
    2a30:	8c 93       	st	X, r24
            CLR_BIT(TCCR1B,TCCR1B_CS12);
    2a32:	ae e4       	ldi	r26, 0x4E	; 78
    2a34:	b0 e0       	ldi	r27, 0x00	; 0
    2a36:	ee e4       	ldi	r30, 0x4E	; 78
    2a38:	f0 e0       	ldi	r31, 0x00	; 0
    2a3a:	80 81       	ld	r24, Z
    2a3c:	8b 7f       	andi	r24, 0xFB	; 251
    2a3e:	8c 93       	st	X, r24
    2a40:	66 c3       	rjmp	.+1740   	; 0x310e <Gpt_Init+0xd34>
            // TODO
            break;
        case GPT_PRESCALER_256:
            CLR_BIT(TCCR1B,TCCR1B_CS10);
    2a42:	ae e4       	ldi	r26, 0x4E	; 78
    2a44:	b0 e0       	ldi	r27, 0x00	; 0
    2a46:	ee e4       	ldi	r30, 0x4E	; 78
    2a48:	f0 e0       	ldi	r31, 0x00	; 0
    2a4a:	80 81       	ld	r24, Z
    2a4c:	8e 7f       	andi	r24, 0xFE	; 254
    2a4e:	8c 93       	st	X, r24
            CLR_BIT(TCCR1B,TCCR1B_CS11);
    2a50:	ae e4       	ldi	r26, 0x4E	; 78
    2a52:	b0 e0       	ldi	r27, 0x00	; 0
    2a54:	ee e4       	ldi	r30, 0x4E	; 78
    2a56:	f0 e0       	ldi	r31, 0x00	; 0
    2a58:	80 81       	ld	r24, Z
    2a5a:	8d 7f       	andi	r24, 0xFD	; 253
    2a5c:	8c 93       	st	X, r24
            SET_BIT(TCCR1B,TCCR1B_CS12);
    2a5e:	ae e4       	ldi	r26, 0x4E	; 78
    2a60:	b0 e0       	ldi	r27, 0x00	; 0
    2a62:	ee e4       	ldi	r30, 0x4E	; 78
    2a64:	f0 e0       	ldi	r31, 0x00	; 0
    2a66:	80 81       	ld	r24, Z
    2a68:	84 60       	ori	r24, 0x04	; 4
    2a6a:	8c 93       	st	X, r24
    2a6c:	50 c3       	rjmp	.+1696   	; 0x310e <Gpt_Init+0xd34>
            // TODO
            break;
        case GPT_PRESCALER_1024:
            SET_BIT(TCCR1B,TCCR1B_CS10);
    2a6e:	ae e4       	ldi	r26, 0x4E	; 78
    2a70:	b0 e0       	ldi	r27, 0x00	; 0
    2a72:	ee e4       	ldi	r30, 0x4E	; 78
    2a74:	f0 e0       	ldi	r31, 0x00	; 0
    2a76:	80 81       	ld	r24, Z
    2a78:	81 60       	ori	r24, 0x01	; 1
    2a7a:	8c 93       	st	X, r24
            CLR_BIT(TCCR1B,TCCR1B_CS11);
    2a7c:	ae e4       	ldi	r26, 0x4E	; 78
    2a7e:	b0 e0       	ldi	r27, 0x00	; 0
    2a80:	ee e4       	ldi	r30, 0x4E	; 78
    2a82:	f0 e0       	ldi	r31, 0x00	; 0
    2a84:	80 81       	ld	r24, Z
    2a86:	8d 7f       	andi	r24, 0xFD	; 253
    2a88:	8c 93       	st	X, r24
            SET_BIT(TCCR1B,TCCR1B_CS12);
    2a8a:	ae e4       	ldi	r26, 0x4E	; 78
    2a8c:	b0 e0       	ldi	r27, 0x00	; 0
    2a8e:	ee e4       	ldi	r30, 0x4E	; 78
    2a90:	f0 e0       	ldi	r31, 0x00	; 0
    2a92:	80 81       	ld	r24, Z
    2a94:	84 60       	ori	r24, 0x04	; 4
    2a96:	8c 93       	st	X, r24
    2a98:	3a c3       	rjmp	.+1652   	; 0x310e <Gpt_Init+0xd34>
            // TODO
            break;
        case GPT_PRESCALER_EXT_FALLING:
            CLR_BIT(TCCR1B,TCCR1B_CS10);
    2a9a:	ae e4       	ldi	r26, 0x4E	; 78
    2a9c:	b0 e0       	ldi	r27, 0x00	; 0
    2a9e:	ee e4       	ldi	r30, 0x4E	; 78
    2aa0:	f0 e0       	ldi	r31, 0x00	; 0
    2aa2:	80 81       	ld	r24, Z
    2aa4:	8e 7f       	andi	r24, 0xFE	; 254
    2aa6:	8c 93       	st	X, r24
            SET_BIT(TCCR1B,TCCR1B_CS11);
    2aa8:	ae e4       	ldi	r26, 0x4E	; 78
    2aaa:	b0 e0       	ldi	r27, 0x00	; 0
    2aac:	ee e4       	ldi	r30, 0x4E	; 78
    2aae:	f0 e0       	ldi	r31, 0x00	; 0
    2ab0:	80 81       	ld	r24, Z
    2ab2:	82 60       	ori	r24, 0x02	; 2
    2ab4:	8c 93       	st	X, r24
            SET_BIT(TCCR1B,TCCR1B_CS12);
    2ab6:	ae e4       	ldi	r26, 0x4E	; 78
    2ab8:	b0 e0       	ldi	r27, 0x00	; 0
    2aba:	ee e4       	ldi	r30, 0x4E	; 78
    2abc:	f0 e0       	ldi	r31, 0x00	; 0
    2abe:	80 81       	ld	r24, Z
    2ac0:	84 60       	ori	r24, 0x04	; 4
    2ac2:	8c 93       	st	X, r24
    2ac4:	24 c3       	rjmp	.+1608   	; 0x310e <Gpt_Init+0xd34>
            // TODO
            break;
        case GPT_PRESCALER_EXT_RISING:
            SET_BIT(TCCR1B,TCCR1B_CS10);
    2ac6:	ae e4       	ldi	r26, 0x4E	; 78
    2ac8:	b0 e0       	ldi	r27, 0x00	; 0
    2aca:	ee e4       	ldi	r30, 0x4E	; 78
    2acc:	f0 e0       	ldi	r31, 0x00	; 0
    2ace:	80 81       	ld	r24, Z
    2ad0:	81 60       	ori	r24, 0x01	; 1
    2ad2:	8c 93       	st	X, r24
            SET_BIT(TCCR1B,TCCR1B_CS11);
    2ad4:	ae e4       	ldi	r26, 0x4E	; 78
    2ad6:	b0 e0       	ldi	r27, 0x00	; 0
    2ad8:	ee e4       	ldi	r30, 0x4E	; 78
    2ada:	f0 e0       	ldi	r31, 0x00	; 0
    2adc:	80 81       	ld	r24, Z
    2ade:	82 60       	ori	r24, 0x02	; 2
    2ae0:	8c 93       	st	X, r24
            SET_BIT(TCCR1B,TCCR1B_CS12);
    2ae2:	ae e4       	ldi	r26, 0x4E	; 78
    2ae4:	b0 e0       	ldi	r27, 0x00	; 0
    2ae6:	ee e4       	ldi	r30, 0x4E	; 78
    2ae8:	f0 e0       	ldi	r31, 0x00	; 0
    2aea:	80 81       	ld	r24, Z
    2aec:	84 60       	ori	r24, 0x04	; 4
    2aee:	8c 93       	st	X, r24
    2af0:	0e c3       	rjmp	.+1564   	; 0x310e <Gpt_Init+0xd34>
            // TODO
            break;
        default:
            returnValue = GPT_ERROR;
    2af2:	19 82       	std	Y+1, r1	; 0x01
    2af4:	0c c3       	rjmp	.+1560   	; 0x310e <Gpt_Init+0xd34>
        }
        break;

    case GPT_CHANNEL_TIMER1B:
        /*Waveform Generation Mode*/
        if (config->mode == GPT_MODE_NORMAL)
    2af6:	ea 81       	ldd	r30, Y+2	; 0x02
    2af8:	fb 81       	ldd	r31, Y+3	; 0x03
    2afa:	81 81       	ldd	r24, Z+1	; 0x01
    2afc:	88 23       	and	r24, r24
    2afe:	e9 f4       	brne	.+58     	; 0x2b3a <Gpt_Init+0x760>
        {
            CLR_BIT(TCCR1A,TCCR1A_WGM10);
    2b00:	af e4       	ldi	r26, 0x4F	; 79
    2b02:	b0 e0       	ldi	r27, 0x00	; 0
    2b04:	ef e4       	ldi	r30, 0x4F	; 79
    2b06:	f0 e0       	ldi	r31, 0x00	; 0
    2b08:	80 81       	ld	r24, Z
    2b0a:	8e 7f       	andi	r24, 0xFE	; 254
    2b0c:	8c 93       	st	X, r24
            CLR_BIT(TCCR1A,TCCR1A_WGM11);
    2b0e:	af e4       	ldi	r26, 0x4F	; 79
    2b10:	b0 e0       	ldi	r27, 0x00	; 0
    2b12:	ef e4       	ldi	r30, 0x4F	; 79
    2b14:	f0 e0       	ldi	r31, 0x00	; 0
    2b16:	80 81       	ld	r24, Z
    2b18:	8d 7f       	andi	r24, 0xFD	; 253
    2b1a:	8c 93       	st	X, r24
            CLR_BIT(TCCR1B,TCCR1B_WGM12);
    2b1c:	ae e4       	ldi	r26, 0x4E	; 78
    2b1e:	b0 e0       	ldi	r27, 0x00	; 0
    2b20:	ee e4       	ldi	r30, 0x4E	; 78
    2b22:	f0 e0       	ldi	r31, 0x00	; 0
    2b24:	80 81       	ld	r24, Z
    2b26:	87 7f       	andi	r24, 0xF7	; 247
    2b28:	8c 93       	st	X, r24
            CLR_BIT(TCCR1B,TCCR1B_WGM13);
    2b2a:	ae e4       	ldi	r26, 0x4E	; 78
    2b2c:	b0 e0       	ldi	r27, 0x00	; 0
    2b2e:	ee e4       	ldi	r30, 0x4E	; 78
    2b30:	f0 e0       	ldi	r31, 0x00	; 0
    2b32:	80 81       	ld	r24, Z
    2b34:	8f 7e       	andi	r24, 0xEF	; 239
    2b36:	8c 93       	st	X, r24
    2b38:	23 c0       	rjmp	.+70     	; 0x2b80 <Gpt_Init+0x7a6>
            // TODO
            // TODO
        }
        else if (config->mode == GPT_MODE_CTC)
    2b3a:	ea 81       	ldd	r30, Y+2	; 0x02
    2b3c:	fb 81       	ldd	r31, Y+3	; 0x03
    2b3e:	81 81       	ldd	r24, Z+1	; 0x01
    2b40:	81 30       	cpi	r24, 0x01	; 1
    2b42:	e9 f4       	brne	.+58     	; 0x2b7e <Gpt_Init+0x7a4>
        {
            CLR_BIT(TCCR1A,TCCR1A_WGM10);
    2b44:	af e4       	ldi	r26, 0x4F	; 79
    2b46:	b0 e0       	ldi	r27, 0x00	; 0
    2b48:	ef e4       	ldi	r30, 0x4F	; 79
    2b4a:	f0 e0       	ldi	r31, 0x00	; 0
    2b4c:	80 81       	ld	r24, Z
    2b4e:	8e 7f       	andi	r24, 0xFE	; 254
    2b50:	8c 93       	st	X, r24
            CLR_BIT(TCCR1A,TCCR1A_WGM11);
    2b52:	af e4       	ldi	r26, 0x4F	; 79
    2b54:	b0 e0       	ldi	r27, 0x00	; 0
    2b56:	ef e4       	ldi	r30, 0x4F	; 79
    2b58:	f0 e0       	ldi	r31, 0x00	; 0
    2b5a:	80 81       	ld	r24, Z
    2b5c:	8d 7f       	andi	r24, 0xFD	; 253
    2b5e:	8c 93       	st	X, r24
            SET_BIT(TCCR1B,TCCR1B_WGM12);
    2b60:	ae e4       	ldi	r26, 0x4E	; 78
    2b62:	b0 e0       	ldi	r27, 0x00	; 0
    2b64:	ee e4       	ldi	r30, 0x4E	; 78
    2b66:	f0 e0       	ldi	r31, 0x00	; 0
    2b68:	80 81       	ld	r24, Z
    2b6a:	88 60       	ori	r24, 0x08	; 8
    2b6c:	8c 93       	st	X, r24
            CLR_BIT(TCCR1B,TCCR1B_WGM13);
    2b6e:	ae e4       	ldi	r26, 0x4E	; 78
    2b70:	b0 e0       	ldi	r27, 0x00	; 0
    2b72:	ee e4       	ldi	r30, 0x4E	; 78
    2b74:	f0 e0       	ldi	r31, 0x00	; 0
    2b76:	80 81       	ld	r24, Z
    2b78:	8f 7e       	andi	r24, 0xEF	; 239
    2b7a:	8c 93       	st	X, r24
    2b7c:	01 c0       	rjmp	.+2      	; 0x2b80 <Gpt_Init+0x7a6>
            // TODO
            // TODO
        }
        else
        {
            returnValue = GPT_ERROR;
    2b7e:	19 82       	std	Y+1, r1	; 0x01
        }

        /*Compare Match Output Mode*/
        switch (config->output)
    2b80:	ea 81       	ldd	r30, Y+2	; 0x02
    2b82:	fb 81       	ldd	r31, Y+3	; 0x03
    2b84:	82 81       	ldd	r24, Z+2	; 0x02
    2b86:	28 2f       	mov	r18, r24
    2b88:	30 e0       	ldi	r19, 0x00	; 0
    2b8a:	3b 87       	std	Y+11, r19	; 0x0b
    2b8c:	2a 87       	std	Y+10, r18	; 0x0a
    2b8e:	8a 85       	ldd	r24, Y+10	; 0x0a
    2b90:	9b 85       	ldd	r25, Y+11	; 0x0b
    2b92:	81 30       	cpi	r24, 0x01	; 1
    2b94:	91 05       	cpc	r25, r1
    2b96:	21 f1       	breq	.+72     	; 0x2be0 <Gpt_Init+0x806>
    2b98:	2a 85       	ldd	r18, Y+10	; 0x0a
    2b9a:	3b 85       	ldd	r19, Y+11	; 0x0b
    2b9c:	22 30       	cpi	r18, 0x02	; 2
    2b9e:	31 05       	cpc	r19, r1
    2ba0:	2c f4       	brge	.+10     	; 0x2bac <Gpt_Init+0x7d2>
    2ba2:	8a 85       	ldd	r24, Y+10	; 0x0a
    2ba4:	9b 85       	ldd	r25, Y+11	; 0x0b
    2ba6:	00 97       	sbiw	r24, 0x00	; 0
    2ba8:	61 f0       	breq	.+24     	; 0x2bc2 <Gpt_Init+0x7e8>
    2baa:	47 c0       	rjmp	.+142    	; 0x2c3a <Gpt_Init+0x860>
    2bac:	2a 85       	ldd	r18, Y+10	; 0x0a
    2bae:	3b 85       	ldd	r19, Y+11	; 0x0b
    2bb0:	22 30       	cpi	r18, 0x02	; 2
    2bb2:	31 05       	cpc	r19, r1
    2bb4:	21 f1       	breq	.+72     	; 0x2bfe <Gpt_Init+0x824>
    2bb6:	8a 85       	ldd	r24, Y+10	; 0x0a
    2bb8:	9b 85       	ldd	r25, Y+11	; 0x0b
    2bba:	83 30       	cpi	r24, 0x03	; 3
    2bbc:	91 05       	cpc	r25, r1
    2bbe:	71 f1       	breq	.+92     	; 0x2c1c <Gpt_Init+0x842>
    2bc0:	3c c0       	rjmp	.+120    	; 0x2c3a <Gpt_Init+0x860>
        {
        case GPT_OUTPUT_NORMAL:
            CLR_BIT(TCCR1A,TCCR1A_COM1B0);
    2bc2:	af e4       	ldi	r26, 0x4F	; 79
    2bc4:	b0 e0       	ldi	r27, 0x00	; 0
    2bc6:	ef e4       	ldi	r30, 0x4F	; 79
    2bc8:	f0 e0       	ldi	r31, 0x00	; 0
    2bca:	80 81       	ld	r24, Z
    2bcc:	8f 7e       	andi	r24, 0xEF	; 239
    2bce:	8c 93       	st	X, r24
            CLR_BIT(TCCR1A,TCCR1A_COM1B1);
    2bd0:	af e4       	ldi	r26, 0x4F	; 79
    2bd2:	b0 e0       	ldi	r27, 0x00	; 0
    2bd4:	ef e4       	ldi	r30, 0x4F	; 79
    2bd6:	f0 e0       	ldi	r31, 0x00	; 0
    2bd8:	80 81       	ld	r24, Z
    2bda:	8f 7d       	andi	r24, 0xDF	; 223
    2bdc:	8c 93       	st	X, r24
    2bde:	2e c0       	rjmp	.+92     	; 0x2c3c <Gpt_Init+0x862>
            
            // TODO
            break;
        case GPT_OUTPUT_TOGGLE:
            SET_BIT(TCCR1A,TCCR1A_COM1B0);
    2be0:	af e4       	ldi	r26, 0x4F	; 79
    2be2:	b0 e0       	ldi	r27, 0x00	; 0
    2be4:	ef e4       	ldi	r30, 0x4F	; 79
    2be6:	f0 e0       	ldi	r31, 0x00	; 0
    2be8:	80 81       	ld	r24, Z
    2bea:	80 61       	ori	r24, 0x10	; 16
    2bec:	8c 93       	st	X, r24
            CLR_BIT(TCCR1A,TCCR1A_COM1B1);
    2bee:	af e4       	ldi	r26, 0x4F	; 79
    2bf0:	b0 e0       	ldi	r27, 0x00	; 0
    2bf2:	ef e4       	ldi	r30, 0x4F	; 79
    2bf4:	f0 e0       	ldi	r31, 0x00	; 0
    2bf6:	80 81       	ld	r24, Z
    2bf8:	8f 7d       	andi	r24, 0xDF	; 223
    2bfa:	8c 93       	st	X, r24
    2bfc:	1f c0       	rjmp	.+62     	; 0x2c3c <Gpt_Init+0x862>
            // TODO
            break;
        case GPT_OUTPUT_SET:
            SET_BIT(TCCR1A,TCCR1A_COM1B0);
    2bfe:	af e4       	ldi	r26, 0x4F	; 79
    2c00:	b0 e0       	ldi	r27, 0x00	; 0
    2c02:	ef e4       	ldi	r30, 0x4F	; 79
    2c04:	f0 e0       	ldi	r31, 0x00	; 0
    2c06:	80 81       	ld	r24, Z
    2c08:	80 61       	ori	r24, 0x10	; 16
    2c0a:	8c 93       	st	X, r24
            SET_BIT(TCCR1A,TCCR1A_COM1B1);
    2c0c:	af e4       	ldi	r26, 0x4F	; 79
    2c0e:	b0 e0       	ldi	r27, 0x00	; 0
    2c10:	ef e4       	ldi	r30, 0x4F	; 79
    2c12:	f0 e0       	ldi	r31, 0x00	; 0
    2c14:	80 81       	ld	r24, Z
    2c16:	80 62       	ori	r24, 0x20	; 32
    2c18:	8c 93       	st	X, r24
    2c1a:	10 c0       	rjmp	.+32     	; 0x2c3c <Gpt_Init+0x862>
            // TODO
            break;
        case GPT_OUTPUT_CLEAR:
            CLR_BIT(TCCR1A,TCCR1A_COM1B0);
    2c1c:	af e4       	ldi	r26, 0x4F	; 79
    2c1e:	b0 e0       	ldi	r27, 0x00	; 0
    2c20:	ef e4       	ldi	r30, 0x4F	; 79
    2c22:	f0 e0       	ldi	r31, 0x00	; 0
    2c24:	80 81       	ld	r24, Z
    2c26:	8f 7e       	andi	r24, 0xEF	; 239
    2c28:	8c 93       	st	X, r24
            SET_BIT(TCCR1A,TCCR1A_COM1B1);
    2c2a:	af e4       	ldi	r26, 0x4F	; 79
    2c2c:	b0 e0       	ldi	r27, 0x00	; 0
    2c2e:	ef e4       	ldi	r30, 0x4F	; 79
    2c30:	f0 e0       	ldi	r31, 0x00	; 0
    2c32:	80 81       	ld	r24, Z
    2c34:	80 62       	ori	r24, 0x20	; 32
    2c36:	8c 93       	st	X, r24
    2c38:	01 c0       	rjmp	.+2      	; 0x2c3c <Gpt_Init+0x862>
            // TODO
            break;
        default:
            returnValue = GPT_ERROR;
    2c3a:	19 82       	std	Y+1, r1	; 0x01
            break;
        }

        /*Clock Select*/
        switch (config->prescaler)
    2c3c:	ea 81       	ldd	r30, Y+2	; 0x02
    2c3e:	fb 81       	ldd	r31, Y+3	; 0x03
    2c40:	83 81       	ldd	r24, Z+3	; 0x03
    2c42:	28 2f       	mov	r18, r24
    2c44:	30 e0       	ldi	r19, 0x00	; 0
    2c46:	39 87       	std	Y+9, r19	; 0x09
    2c48:	28 87       	std	Y+8, r18	; 0x08
    2c4a:	88 85       	ldd	r24, Y+8	; 0x08
    2c4c:	99 85       	ldd	r25, Y+9	; 0x09
    2c4e:	84 30       	cpi	r24, 0x04	; 4
    2c50:	91 05       	cpc	r25, r1
    2c52:	09 f4       	brne	.+2      	; 0x2c56 <Gpt_Init+0x87c>
    2c54:	77 c0       	rjmp	.+238    	; 0x2d44 <Gpt_Init+0x96a>
    2c56:	28 85       	ldd	r18, Y+8	; 0x08
    2c58:	39 85       	ldd	r19, Y+9	; 0x09
    2c5a:	25 30       	cpi	r18, 0x05	; 5
    2c5c:	31 05       	cpc	r19, r1
    2c5e:	8c f4       	brge	.+34     	; 0x2c82 <Gpt_Init+0x8a8>
    2c60:	88 85       	ldd	r24, Y+8	; 0x08
    2c62:	99 85       	ldd	r25, Y+9	; 0x09
    2c64:	81 30       	cpi	r24, 0x01	; 1
    2c66:	91 05       	cpc	r25, r1
    2c68:	09 f4       	brne	.+2      	; 0x2c6c <Gpt_Init+0x892>
    2c6a:	40 c0       	rjmp	.+128    	; 0x2cec <Gpt_Init+0x912>
    2c6c:	28 85       	ldd	r18, Y+8	; 0x08
    2c6e:	39 85       	ldd	r19, Y+9	; 0x09
    2c70:	22 30       	cpi	r18, 0x02	; 2
    2c72:	31 05       	cpc	r19, r1
    2c74:	09 f4       	brne	.+2      	; 0x2c78 <Gpt_Init+0x89e>
    2c76:	50 c0       	rjmp	.+160    	; 0x2d18 <Gpt_Init+0x93e>
    2c78:	88 85       	ldd	r24, Y+8	; 0x08
    2c7a:	99 85       	ldd	r25, Y+9	; 0x09
    2c7c:	00 97       	sbiw	r24, 0x00	; 0
    2c7e:	01 f1       	breq	.+64     	; 0x2cc0 <Gpt_Init+0x8e6>
    2c80:	cf c0       	rjmp	.+414    	; 0x2e20 <Gpt_Init+0xa46>
    2c82:	28 85       	ldd	r18, Y+8	; 0x08
    2c84:	39 85       	ldd	r19, Y+9	; 0x09
    2c86:	27 30       	cpi	r18, 0x07	; 7
    2c88:	31 05       	cpc	r19, r1
    2c8a:	09 f4       	brne	.+2      	; 0x2c8e <Gpt_Init+0x8b4>
    2c8c:	87 c0       	rjmp	.+270    	; 0x2d9c <Gpt_Init+0x9c2>
    2c8e:	88 85       	ldd	r24, Y+8	; 0x08
    2c90:	99 85       	ldd	r25, Y+9	; 0x09
    2c92:	88 30       	cpi	r24, 0x08	; 8
    2c94:	91 05       	cpc	r25, r1
    2c96:	3c f4       	brge	.+14     	; 0x2ca6 <Gpt_Init+0x8cc>
    2c98:	28 85       	ldd	r18, Y+8	; 0x08
    2c9a:	39 85       	ldd	r19, Y+9	; 0x09
    2c9c:	26 30       	cpi	r18, 0x06	; 6
    2c9e:	31 05       	cpc	r19, r1
    2ca0:	09 f4       	brne	.+2      	; 0x2ca4 <Gpt_Init+0x8ca>
    2ca2:	66 c0       	rjmp	.+204    	; 0x2d70 <Gpt_Init+0x996>
    2ca4:	bd c0       	rjmp	.+378    	; 0x2e20 <Gpt_Init+0xa46>
    2ca6:	88 85       	ldd	r24, Y+8	; 0x08
    2ca8:	99 85       	ldd	r25, Y+9	; 0x09
    2caa:	88 30       	cpi	r24, 0x08	; 8
    2cac:	91 05       	cpc	r25, r1
    2cae:	09 f4       	brne	.+2      	; 0x2cb2 <Gpt_Init+0x8d8>
    2cb0:	8b c0       	rjmp	.+278    	; 0x2dc8 <Gpt_Init+0x9ee>
    2cb2:	28 85       	ldd	r18, Y+8	; 0x08
    2cb4:	39 85       	ldd	r19, Y+9	; 0x09
    2cb6:	29 30       	cpi	r18, 0x09	; 9
    2cb8:	31 05       	cpc	r19, r1
    2cba:	09 f4       	brne	.+2      	; 0x2cbe <Gpt_Init+0x8e4>
    2cbc:	9b c0       	rjmp	.+310    	; 0x2df4 <Gpt_Init+0xa1a>
    2cbe:	b0 c0       	rjmp	.+352    	; 0x2e20 <Gpt_Init+0xa46>
        {
        case GPT_PRESCALER_0:
            CLR_BIT(TCCR0, TCCR0_CS00);
    2cc0:	a3 e5       	ldi	r26, 0x53	; 83
    2cc2:	b0 e0       	ldi	r27, 0x00	; 0
    2cc4:	e3 e5       	ldi	r30, 0x53	; 83
    2cc6:	f0 e0       	ldi	r31, 0x00	; 0
    2cc8:	80 81       	ld	r24, Z
    2cca:	8e 7f       	andi	r24, 0xFE	; 254
    2ccc:	8c 93       	st	X, r24
            CLR_BIT(TCCR0, TCCR0_CS01);
    2cce:	a3 e5       	ldi	r26, 0x53	; 83
    2cd0:	b0 e0       	ldi	r27, 0x00	; 0
    2cd2:	e3 e5       	ldi	r30, 0x53	; 83
    2cd4:	f0 e0       	ldi	r31, 0x00	; 0
    2cd6:	80 81       	ld	r24, Z
    2cd8:	8d 7f       	andi	r24, 0xFD	; 253
    2cda:	8c 93       	st	X, r24
            CLR_BIT(TCCR0, TCCR0_CS02);
    2cdc:	a3 e5       	ldi	r26, 0x53	; 83
    2cde:	b0 e0       	ldi	r27, 0x00	; 0
    2ce0:	e3 e5       	ldi	r30, 0x53	; 83
    2ce2:	f0 e0       	ldi	r31, 0x00	; 0
    2ce4:	80 81       	ld	r24, Z
    2ce6:	8b 7f       	andi	r24, 0xFB	; 251
    2ce8:	8c 93       	st	X, r24
    2cea:	11 c2       	rjmp	.+1058   	; 0x310e <Gpt_Init+0xd34>
            break;
        case GPT_PRESCALER_1:
            SET_BIT(TCCR0, TCCR0_CS00);
    2cec:	a3 e5       	ldi	r26, 0x53	; 83
    2cee:	b0 e0       	ldi	r27, 0x00	; 0
    2cf0:	e3 e5       	ldi	r30, 0x53	; 83
    2cf2:	f0 e0       	ldi	r31, 0x00	; 0
    2cf4:	80 81       	ld	r24, Z
    2cf6:	81 60       	ori	r24, 0x01	; 1
    2cf8:	8c 93       	st	X, r24
            CLR_BIT(TCCR0, TCCR0_CS01);
    2cfa:	a3 e5       	ldi	r26, 0x53	; 83
    2cfc:	b0 e0       	ldi	r27, 0x00	; 0
    2cfe:	e3 e5       	ldi	r30, 0x53	; 83
    2d00:	f0 e0       	ldi	r31, 0x00	; 0
    2d02:	80 81       	ld	r24, Z
    2d04:	8d 7f       	andi	r24, 0xFD	; 253
    2d06:	8c 93       	st	X, r24
            CLR_BIT(TCCR0, TCCR0_CS02);
    2d08:	a3 e5       	ldi	r26, 0x53	; 83
    2d0a:	b0 e0       	ldi	r27, 0x00	; 0
    2d0c:	e3 e5       	ldi	r30, 0x53	; 83
    2d0e:	f0 e0       	ldi	r31, 0x00	; 0
    2d10:	80 81       	ld	r24, Z
    2d12:	8b 7f       	andi	r24, 0xFB	; 251
    2d14:	8c 93       	st	X, r24
    2d16:	fb c1       	rjmp	.+1014   	; 0x310e <Gpt_Init+0xd34>
            break;
        case GPT_PRESCALER_8:
            CLR_BIT(TCCR0, TCCR0_CS00);
    2d18:	a3 e5       	ldi	r26, 0x53	; 83
    2d1a:	b0 e0       	ldi	r27, 0x00	; 0
    2d1c:	e3 e5       	ldi	r30, 0x53	; 83
    2d1e:	f0 e0       	ldi	r31, 0x00	; 0
    2d20:	80 81       	ld	r24, Z
    2d22:	8e 7f       	andi	r24, 0xFE	; 254
    2d24:	8c 93       	st	X, r24
            SET_BIT(TCCR0, TCCR0_CS01);
    2d26:	a3 e5       	ldi	r26, 0x53	; 83
    2d28:	b0 e0       	ldi	r27, 0x00	; 0
    2d2a:	e3 e5       	ldi	r30, 0x53	; 83
    2d2c:	f0 e0       	ldi	r31, 0x00	; 0
    2d2e:	80 81       	ld	r24, Z
    2d30:	82 60       	ori	r24, 0x02	; 2
    2d32:	8c 93       	st	X, r24
            CLR_BIT(TCCR0, TCCR0_CS02);
    2d34:	a3 e5       	ldi	r26, 0x53	; 83
    2d36:	b0 e0       	ldi	r27, 0x00	; 0
    2d38:	e3 e5       	ldi	r30, 0x53	; 83
    2d3a:	f0 e0       	ldi	r31, 0x00	; 0
    2d3c:	80 81       	ld	r24, Z
    2d3e:	8b 7f       	andi	r24, 0xFB	; 251
    2d40:	8c 93       	st	X, r24
    2d42:	e5 c1       	rjmp	.+970    	; 0x310e <Gpt_Init+0xd34>
            break;
        case GPT_PRESCALER_64:
            SET_BIT(TCCR0, TCCR0_CS00);
    2d44:	a3 e5       	ldi	r26, 0x53	; 83
    2d46:	b0 e0       	ldi	r27, 0x00	; 0
    2d48:	e3 e5       	ldi	r30, 0x53	; 83
    2d4a:	f0 e0       	ldi	r31, 0x00	; 0
    2d4c:	80 81       	ld	r24, Z
    2d4e:	81 60       	ori	r24, 0x01	; 1
    2d50:	8c 93       	st	X, r24
            SET_BIT(TCCR0, TCCR0_CS01);
    2d52:	a3 e5       	ldi	r26, 0x53	; 83
    2d54:	b0 e0       	ldi	r27, 0x00	; 0
    2d56:	e3 e5       	ldi	r30, 0x53	; 83
    2d58:	f0 e0       	ldi	r31, 0x00	; 0
    2d5a:	80 81       	ld	r24, Z
    2d5c:	82 60       	ori	r24, 0x02	; 2
    2d5e:	8c 93       	st	X, r24
            CLR_BIT(TCCR0, TCCR0_CS02);
    2d60:	a3 e5       	ldi	r26, 0x53	; 83
    2d62:	b0 e0       	ldi	r27, 0x00	; 0
    2d64:	e3 e5       	ldi	r30, 0x53	; 83
    2d66:	f0 e0       	ldi	r31, 0x00	; 0
    2d68:	80 81       	ld	r24, Z
    2d6a:	8b 7f       	andi	r24, 0xFB	; 251
    2d6c:	8c 93       	st	X, r24
    2d6e:	cf c1       	rjmp	.+926    	; 0x310e <Gpt_Init+0xd34>
            // TODO
            break;
        case GPT_PRESCALER_256:
            CLR_BIT(TCCR0, TCCR0_CS00);
    2d70:	a3 e5       	ldi	r26, 0x53	; 83
    2d72:	b0 e0       	ldi	r27, 0x00	; 0
    2d74:	e3 e5       	ldi	r30, 0x53	; 83
    2d76:	f0 e0       	ldi	r31, 0x00	; 0
    2d78:	80 81       	ld	r24, Z
    2d7a:	8e 7f       	andi	r24, 0xFE	; 254
    2d7c:	8c 93       	st	X, r24
            CLR_BIT(TCCR0, TCCR0_CS01);
    2d7e:	a3 e5       	ldi	r26, 0x53	; 83
    2d80:	b0 e0       	ldi	r27, 0x00	; 0
    2d82:	e3 e5       	ldi	r30, 0x53	; 83
    2d84:	f0 e0       	ldi	r31, 0x00	; 0
    2d86:	80 81       	ld	r24, Z
    2d88:	8d 7f       	andi	r24, 0xFD	; 253
    2d8a:	8c 93       	st	X, r24
            SET_BIT(TCCR0, TCCR0_CS02);
    2d8c:	a3 e5       	ldi	r26, 0x53	; 83
    2d8e:	b0 e0       	ldi	r27, 0x00	; 0
    2d90:	e3 e5       	ldi	r30, 0x53	; 83
    2d92:	f0 e0       	ldi	r31, 0x00	; 0
    2d94:	80 81       	ld	r24, Z
    2d96:	84 60       	ori	r24, 0x04	; 4
    2d98:	8c 93       	st	X, r24
    2d9a:	b9 c1       	rjmp	.+882    	; 0x310e <Gpt_Init+0xd34>
            // TODO
            break;
        case GPT_PRESCALER_1024:
            SET_BIT(TCCR0, TCCR0_CS00);
    2d9c:	a3 e5       	ldi	r26, 0x53	; 83
    2d9e:	b0 e0       	ldi	r27, 0x00	; 0
    2da0:	e3 e5       	ldi	r30, 0x53	; 83
    2da2:	f0 e0       	ldi	r31, 0x00	; 0
    2da4:	80 81       	ld	r24, Z
    2da6:	81 60       	ori	r24, 0x01	; 1
    2da8:	8c 93       	st	X, r24
            CLR_BIT(TCCR0, TCCR0_CS01);
    2daa:	a3 e5       	ldi	r26, 0x53	; 83
    2dac:	b0 e0       	ldi	r27, 0x00	; 0
    2dae:	e3 e5       	ldi	r30, 0x53	; 83
    2db0:	f0 e0       	ldi	r31, 0x00	; 0
    2db2:	80 81       	ld	r24, Z
    2db4:	8d 7f       	andi	r24, 0xFD	; 253
    2db6:	8c 93       	st	X, r24
            SET_BIT(TCCR0, TCCR0_CS02);
    2db8:	a3 e5       	ldi	r26, 0x53	; 83
    2dba:	b0 e0       	ldi	r27, 0x00	; 0
    2dbc:	e3 e5       	ldi	r30, 0x53	; 83
    2dbe:	f0 e0       	ldi	r31, 0x00	; 0
    2dc0:	80 81       	ld	r24, Z
    2dc2:	84 60       	ori	r24, 0x04	; 4
    2dc4:	8c 93       	st	X, r24
    2dc6:	a3 c1       	rjmp	.+838    	; 0x310e <Gpt_Init+0xd34>
            break;
        case GPT_PRESCALER_EXT_FALLING:
            CLR_BIT(TCCR0, TCCR0_CS00);
    2dc8:	a3 e5       	ldi	r26, 0x53	; 83
    2dca:	b0 e0       	ldi	r27, 0x00	; 0
    2dcc:	e3 e5       	ldi	r30, 0x53	; 83
    2dce:	f0 e0       	ldi	r31, 0x00	; 0
    2dd0:	80 81       	ld	r24, Z
    2dd2:	8e 7f       	andi	r24, 0xFE	; 254
    2dd4:	8c 93       	st	X, r24
            SET_BIT(TCCR0, TCCR0_CS01);
    2dd6:	a3 e5       	ldi	r26, 0x53	; 83
    2dd8:	b0 e0       	ldi	r27, 0x00	; 0
    2dda:	e3 e5       	ldi	r30, 0x53	; 83
    2ddc:	f0 e0       	ldi	r31, 0x00	; 0
    2dde:	80 81       	ld	r24, Z
    2de0:	82 60       	ori	r24, 0x02	; 2
    2de2:	8c 93       	st	X, r24
            SET_BIT(TCCR0, TCCR0_CS02);
    2de4:	a3 e5       	ldi	r26, 0x53	; 83
    2de6:	b0 e0       	ldi	r27, 0x00	; 0
    2de8:	e3 e5       	ldi	r30, 0x53	; 83
    2dea:	f0 e0       	ldi	r31, 0x00	; 0
    2dec:	80 81       	ld	r24, Z
    2dee:	84 60       	ori	r24, 0x04	; 4
    2df0:	8c 93       	st	X, r24
    2df2:	8d c1       	rjmp	.+794    	; 0x310e <Gpt_Init+0xd34>
            // TODO
            break;
        case GPT_PRESCALER_EXT_RISING:
            SET_BIT(TCCR0, TCCR0_CS00);
    2df4:	a3 e5       	ldi	r26, 0x53	; 83
    2df6:	b0 e0       	ldi	r27, 0x00	; 0
    2df8:	e3 e5       	ldi	r30, 0x53	; 83
    2dfa:	f0 e0       	ldi	r31, 0x00	; 0
    2dfc:	80 81       	ld	r24, Z
    2dfe:	81 60       	ori	r24, 0x01	; 1
    2e00:	8c 93       	st	X, r24
            SET_BIT(TCCR0, TCCR0_CS01);
    2e02:	a3 e5       	ldi	r26, 0x53	; 83
    2e04:	b0 e0       	ldi	r27, 0x00	; 0
    2e06:	e3 e5       	ldi	r30, 0x53	; 83
    2e08:	f0 e0       	ldi	r31, 0x00	; 0
    2e0a:	80 81       	ld	r24, Z
    2e0c:	82 60       	ori	r24, 0x02	; 2
    2e0e:	8c 93       	st	X, r24
            SET_BIT(TCCR0, TCCR0_CS02);
    2e10:	a3 e5       	ldi	r26, 0x53	; 83
    2e12:	b0 e0       	ldi	r27, 0x00	; 0
    2e14:	e3 e5       	ldi	r30, 0x53	; 83
    2e16:	f0 e0       	ldi	r31, 0x00	; 0
    2e18:	80 81       	ld	r24, Z
    2e1a:	84 60       	ori	r24, 0x04	; 4
    2e1c:	8c 93       	st	X, r24
    2e1e:	77 c1       	rjmp	.+750    	; 0x310e <Gpt_Init+0xd34>
            // TODO
            break;
        default:
            returnValue = GPT_ERROR;
    2e20:	19 82       	std	Y+1, r1	; 0x01
    2e22:	75 c1       	rjmp	.+746    	; 0x310e <Gpt_Init+0xd34>
        }
        break;

    case GPT_CHANNEL_TIMER2:
        /*Waveform Generation Mode*/
        if (config->mode == GPT_MODE_NORMAL)
    2e24:	ea 81       	ldd	r30, Y+2	; 0x02
    2e26:	fb 81       	ldd	r31, Y+3	; 0x03
    2e28:	81 81       	ldd	r24, Z+1	; 0x01
    2e2a:	88 23       	and	r24, r24
    2e2c:	79 f4       	brne	.+30     	; 0x2e4c <Gpt_Init+0xa72>
        {
            CLR_BIT(TCCR2, TCCR2_WGM20);
    2e2e:	a5 e4       	ldi	r26, 0x45	; 69
    2e30:	b0 e0       	ldi	r27, 0x00	; 0
    2e32:	e5 e4       	ldi	r30, 0x45	; 69
    2e34:	f0 e0       	ldi	r31, 0x00	; 0
    2e36:	80 81       	ld	r24, Z
    2e38:	8f 7b       	andi	r24, 0xBF	; 191
    2e3a:	8c 93       	st	X, r24
            CLR_BIT(TCCR2, TCCR2_WGM21);
    2e3c:	a5 e4       	ldi	r26, 0x45	; 69
    2e3e:	b0 e0       	ldi	r27, 0x00	; 0
    2e40:	e5 e4       	ldi	r30, 0x45	; 69
    2e42:	f0 e0       	ldi	r31, 0x00	; 0
    2e44:	80 81       	ld	r24, Z
    2e46:	87 7f       	andi	r24, 0xF7	; 247
    2e48:	8c 93       	st	X, r24
    2e4a:	15 c0       	rjmp	.+42     	; 0x2e76 <Gpt_Init+0xa9c>
            // TODO
            // TODO
        }
        else if (config->mode == GPT_MODE_CTC)
    2e4c:	ea 81       	ldd	r30, Y+2	; 0x02
    2e4e:	fb 81       	ldd	r31, Y+3	; 0x03
    2e50:	81 81       	ldd	r24, Z+1	; 0x01
    2e52:	81 30       	cpi	r24, 0x01	; 1
    2e54:	79 f4       	brne	.+30     	; 0x2e74 <Gpt_Init+0xa9a>
        {
            CLR_BIT(TCCR2, TCCR2_WGM20);
    2e56:	a5 e4       	ldi	r26, 0x45	; 69
    2e58:	b0 e0       	ldi	r27, 0x00	; 0
    2e5a:	e5 e4       	ldi	r30, 0x45	; 69
    2e5c:	f0 e0       	ldi	r31, 0x00	; 0
    2e5e:	80 81       	ld	r24, Z
    2e60:	8f 7b       	andi	r24, 0xBF	; 191
    2e62:	8c 93       	st	X, r24
            SET_BIT(TCCR2, TCCR2_WGM21);
    2e64:	a5 e4       	ldi	r26, 0x45	; 69
    2e66:	b0 e0       	ldi	r27, 0x00	; 0
    2e68:	e5 e4       	ldi	r30, 0x45	; 69
    2e6a:	f0 e0       	ldi	r31, 0x00	; 0
    2e6c:	80 81       	ld	r24, Z
    2e6e:	88 60       	ori	r24, 0x08	; 8
    2e70:	8c 93       	st	X, r24
    2e72:	01 c0       	rjmp	.+2      	; 0x2e76 <Gpt_Init+0xa9c>
            // TODO
            // TODO
        }
        else
        {
            returnValue = GPT_ERROR;
    2e74:	19 82       	std	Y+1, r1	; 0x01
        }

        /*Compare Match Output Mode*/
        switch (config->output)
    2e76:	ea 81       	ldd	r30, Y+2	; 0x02
    2e78:	fb 81       	ldd	r31, Y+3	; 0x03
    2e7a:	82 81       	ldd	r24, Z+2	; 0x02
    2e7c:	28 2f       	mov	r18, r24
    2e7e:	30 e0       	ldi	r19, 0x00	; 0
    2e80:	3f 83       	std	Y+7, r19	; 0x07
    2e82:	2e 83       	std	Y+6, r18	; 0x06
    2e84:	8e 81       	ldd	r24, Y+6	; 0x06
    2e86:	9f 81       	ldd	r25, Y+7	; 0x07
    2e88:	81 30       	cpi	r24, 0x01	; 1
    2e8a:	91 05       	cpc	r25, r1
    2e8c:	21 f1       	breq	.+72     	; 0x2ed6 <Gpt_Init+0xafc>
    2e8e:	2e 81       	ldd	r18, Y+6	; 0x06
    2e90:	3f 81       	ldd	r19, Y+7	; 0x07
    2e92:	22 30       	cpi	r18, 0x02	; 2
    2e94:	31 05       	cpc	r19, r1
    2e96:	2c f4       	brge	.+10     	; 0x2ea2 <Gpt_Init+0xac8>
    2e98:	8e 81       	ldd	r24, Y+6	; 0x06
    2e9a:	9f 81       	ldd	r25, Y+7	; 0x07
    2e9c:	00 97       	sbiw	r24, 0x00	; 0
    2e9e:	61 f0       	breq	.+24     	; 0x2eb8 <Gpt_Init+0xade>
    2ea0:	47 c0       	rjmp	.+142    	; 0x2f30 <Gpt_Init+0xb56>
    2ea2:	2e 81       	ldd	r18, Y+6	; 0x06
    2ea4:	3f 81       	ldd	r19, Y+7	; 0x07
    2ea6:	22 30       	cpi	r18, 0x02	; 2
    2ea8:	31 05       	cpc	r19, r1
    2eaa:	21 f1       	breq	.+72     	; 0x2ef4 <Gpt_Init+0xb1a>
    2eac:	8e 81       	ldd	r24, Y+6	; 0x06
    2eae:	9f 81       	ldd	r25, Y+7	; 0x07
    2eb0:	83 30       	cpi	r24, 0x03	; 3
    2eb2:	91 05       	cpc	r25, r1
    2eb4:	71 f1       	breq	.+92     	; 0x2f12 <Gpt_Init+0xb38>
    2eb6:	3c c0       	rjmp	.+120    	; 0x2f30 <Gpt_Init+0xb56>
        {
        case GPT_OUTPUT_NORMAL:
            CLR_BIT(TCCR2, TCCR2_COM20);
    2eb8:	a5 e4       	ldi	r26, 0x45	; 69
    2eba:	b0 e0       	ldi	r27, 0x00	; 0
    2ebc:	e5 e4       	ldi	r30, 0x45	; 69
    2ebe:	f0 e0       	ldi	r31, 0x00	; 0
    2ec0:	80 81       	ld	r24, Z
    2ec2:	8f 7e       	andi	r24, 0xEF	; 239
    2ec4:	8c 93       	st	X, r24
            CLR_BIT(TCCR2, TCCR2_COM21);
    2ec6:	a5 e4       	ldi	r26, 0x45	; 69
    2ec8:	b0 e0       	ldi	r27, 0x00	; 0
    2eca:	e5 e4       	ldi	r30, 0x45	; 69
    2ecc:	f0 e0       	ldi	r31, 0x00	; 0
    2ece:	80 81       	ld	r24, Z
    2ed0:	8f 7d       	andi	r24, 0xDF	; 223
    2ed2:	8c 93       	st	X, r24
    2ed4:	2e c0       	rjmp	.+92     	; 0x2f32 <Gpt_Init+0xb58>
            // TODO
            break;
        case GPT_OUTPUT_TOGGLE:
            SET_BIT(TCCR2, TCCR2_COM20);
    2ed6:	a5 e4       	ldi	r26, 0x45	; 69
    2ed8:	b0 e0       	ldi	r27, 0x00	; 0
    2eda:	e5 e4       	ldi	r30, 0x45	; 69
    2edc:	f0 e0       	ldi	r31, 0x00	; 0
    2ede:	80 81       	ld	r24, Z
    2ee0:	80 61       	ori	r24, 0x10	; 16
    2ee2:	8c 93       	st	X, r24
            CLR_BIT(TCCR2, TCCR2_COM21);
    2ee4:	a5 e4       	ldi	r26, 0x45	; 69
    2ee6:	b0 e0       	ldi	r27, 0x00	; 0
    2ee8:	e5 e4       	ldi	r30, 0x45	; 69
    2eea:	f0 e0       	ldi	r31, 0x00	; 0
    2eec:	80 81       	ld	r24, Z
    2eee:	8f 7d       	andi	r24, 0xDF	; 223
    2ef0:	8c 93       	st	X, r24
    2ef2:	1f c0       	rjmp	.+62     	; 0x2f32 <Gpt_Init+0xb58>
            // TODO
            break;
        case GPT_OUTPUT_SET:
            SET_BIT(TCCR2, TCCR2_COM20);
    2ef4:	a5 e4       	ldi	r26, 0x45	; 69
    2ef6:	b0 e0       	ldi	r27, 0x00	; 0
    2ef8:	e5 e4       	ldi	r30, 0x45	; 69
    2efa:	f0 e0       	ldi	r31, 0x00	; 0
    2efc:	80 81       	ld	r24, Z
    2efe:	80 61       	ori	r24, 0x10	; 16
    2f00:	8c 93       	st	X, r24
            SET_BIT(TCCR2, TCCR2_COM21);
    2f02:	a5 e4       	ldi	r26, 0x45	; 69
    2f04:	b0 e0       	ldi	r27, 0x00	; 0
    2f06:	e5 e4       	ldi	r30, 0x45	; 69
    2f08:	f0 e0       	ldi	r31, 0x00	; 0
    2f0a:	80 81       	ld	r24, Z
    2f0c:	80 62       	ori	r24, 0x20	; 32
    2f0e:	8c 93       	st	X, r24
    2f10:	10 c0       	rjmp	.+32     	; 0x2f32 <Gpt_Init+0xb58>
            // TODO
            break;
        case GPT_OUTPUT_CLEAR:
            CLR_BIT(TCCR2, TCCR2_COM20);
    2f12:	a5 e4       	ldi	r26, 0x45	; 69
    2f14:	b0 e0       	ldi	r27, 0x00	; 0
    2f16:	e5 e4       	ldi	r30, 0x45	; 69
    2f18:	f0 e0       	ldi	r31, 0x00	; 0
    2f1a:	80 81       	ld	r24, Z
    2f1c:	8f 7e       	andi	r24, 0xEF	; 239
    2f1e:	8c 93       	st	X, r24
            SET_BIT(TCCR2, TCCR2_COM21);
    2f20:	a5 e4       	ldi	r26, 0x45	; 69
    2f22:	b0 e0       	ldi	r27, 0x00	; 0
    2f24:	e5 e4       	ldi	r30, 0x45	; 69
    2f26:	f0 e0       	ldi	r31, 0x00	; 0
    2f28:	80 81       	ld	r24, Z
    2f2a:	80 62       	ori	r24, 0x20	; 32
    2f2c:	8c 93       	st	X, r24
    2f2e:	01 c0       	rjmp	.+2      	; 0x2f32 <Gpt_Init+0xb58>
            // TODO
            break;
        default:
            returnValue = GPT_ERROR;
    2f30:	19 82       	std	Y+1, r1	; 0x01
            break;
        }

        /*Clock Select*/
        switch (config->prescaler)
    2f32:	ea 81       	ldd	r30, Y+2	; 0x02
    2f34:	fb 81       	ldd	r31, Y+3	; 0x03
    2f36:	83 81       	ldd	r24, Z+3	; 0x03
    2f38:	28 2f       	mov	r18, r24
    2f3a:	30 e0       	ldi	r19, 0x00	; 0
    2f3c:	3d 83       	std	Y+5, r19	; 0x05
    2f3e:	2c 83       	std	Y+4, r18	; 0x04
    2f40:	8c 81       	ldd	r24, Y+4	; 0x04
    2f42:	9d 81       	ldd	r25, Y+5	; 0x05
    2f44:	83 30       	cpi	r24, 0x03	; 3
    2f46:	91 05       	cpc	r25, r1
    2f48:	09 f4       	brne	.+2      	; 0x2f4c <Gpt_Init+0xb72>
    2f4a:	70 c0       	rjmp	.+224    	; 0x302c <Gpt_Init+0xc52>
    2f4c:	2c 81       	ldd	r18, Y+4	; 0x04
    2f4e:	3d 81       	ldd	r19, Y+5	; 0x05
    2f50:	24 30       	cpi	r18, 0x04	; 4
    2f52:	31 05       	cpc	r19, r1
    2f54:	84 f4       	brge	.+32     	; 0x2f76 <Gpt_Init+0xb9c>
    2f56:	8c 81       	ldd	r24, Y+4	; 0x04
    2f58:	9d 81       	ldd	r25, Y+5	; 0x05
    2f5a:	81 30       	cpi	r24, 0x01	; 1
    2f5c:	91 05       	cpc	r25, r1
    2f5e:	d1 f1       	breq	.+116    	; 0x2fd4 <Gpt_Init+0xbfa>
    2f60:	2c 81       	ldd	r18, Y+4	; 0x04
    2f62:	3d 81       	ldd	r19, Y+5	; 0x05
    2f64:	22 30       	cpi	r18, 0x02	; 2
    2f66:	31 05       	cpc	r19, r1
    2f68:	0c f0       	brlt	.+2      	; 0x2f6c <Gpt_Init+0xb92>
    2f6a:	4a c0       	rjmp	.+148    	; 0x3000 <Gpt_Init+0xc26>
    2f6c:	8c 81       	ldd	r24, Y+4	; 0x04
    2f6e:	9d 81       	ldd	r25, Y+5	; 0x05
    2f70:	00 97       	sbiw	r24, 0x00	; 0
    2f72:	d1 f0       	breq	.+52     	; 0x2fa8 <Gpt_Init+0xbce>
    2f74:	c9 c0       	rjmp	.+402    	; 0x3108 <Gpt_Init+0xd2e>
    2f76:	2c 81       	ldd	r18, Y+4	; 0x04
    2f78:	3d 81       	ldd	r19, Y+5	; 0x05
    2f7a:	25 30       	cpi	r18, 0x05	; 5
    2f7c:	31 05       	cpc	r19, r1
    2f7e:	09 f4       	brne	.+2      	; 0x2f82 <Gpt_Init+0xba8>
    2f80:	81 c0       	rjmp	.+258    	; 0x3084 <Gpt_Init+0xcaa>
    2f82:	8c 81       	ldd	r24, Y+4	; 0x04
    2f84:	9d 81       	ldd	r25, Y+5	; 0x05
    2f86:	85 30       	cpi	r24, 0x05	; 5
    2f88:	91 05       	cpc	r25, r1
    2f8a:	0c f4       	brge	.+2      	; 0x2f8e <Gpt_Init+0xbb4>
    2f8c:	65 c0       	rjmp	.+202    	; 0x3058 <Gpt_Init+0xc7e>
    2f8e:	2c 81       	ldd	r18, Y+4	; 0x04
    2f90:	3d 81       	ldd	r19, Y+5	; 0x05
    2f92:	26 30       	cpi	r18, 0x06	; 6
    2f94:	31 05       	cpc	r19, r1
    2f96:	09 f4       	brne	.+2      	; 0x2f9a <Gpt_Init+0xbc0>
    2f98:	8b c0       	rjmp	.+278    	; 0x30b0 <Gpt_Init+0xcd6>
    2f9a:	8c 81       	ldd	r24, Y+4	; 0x04
    2f9c:	9d 81       	ldd	r25, Y+5	; 0x05
    2f9e:	87 30       	cpi	r24, 0x07	; 7
    2fa0:	91 05       	cpc	r25, r1
    2fa2:	09 f4       	brne	.+2      	; 0x2fa6 <Gpt_Init+0xbcc>
    2fa4:	9b c0       	rjmp	.+310    	; 0x30dc <Gpt_Init+0xd02>
    2fa6:	b0 c0       	rjmp	.+352    	; 0x3108 <Gpt_Init+0xd2e>
        {
        case GPT_PRESCALER_0:
            CLR_BIT(TCCR0, TCCR0_CS00);
    2fa8:	a3 e5       	ldi	r26, 0x53	; 83
    2faa:	b0 e0       	ldi	r27, 0x00	; 0
    2fac:	e3 e5       	ldi	r30, 0x53	; 83
    2fae:	f0 e0       	ldi	r31, 0x00	; 0
    2fb0:	80 81       	ld	r24, Z
    2fb2:	8e 7f       	andi	r24, 0xFE	; 254
    2fb4:	8c 93       	st	X, r24
            CLR_BIT(TCCR0, TCCR0_CS01);
    2fb6:	a3 e5       	ldi	r26, 0x53	; 83
    2fb8:	b0 e0       	ldi	r27, 0x00	; 0
    2fba:	e3 e5       	ldi	r30, 0x53	; 83
    2fbc:	f0 e0       	ldi	r31, 0x00	; 0
    2fbe:	80 81       	ld	r24, Z
    2fc0:	8d 7f       	andi	r24, 0xFD	; 253
    2fc2:	8c 93       	st	X, r24
            CLR_BIT(TCCR0, TCCR0_CS02);
    2fc4:	a3 e5       	ldi	r26, 0x53	; 83
    2fc6:	b0 e0       	ldi	r27, 0x00	; 0
    2fc8:	e3 e5       	ldi	r30, 0x53	; 83
    2fca:	f0 e0       	ldi	r31, 0x00	; 0
    2fcc:	80 81       	ld	r24, Z
    2fce:	8b 7f       	andi	r24, 0xFB	; 251
    2fd0:	8c 93       	st	X, r24
    2fd2:	9d c0       	rjmp	.+314    	; 0x310e <Gpt_Init+0xd34>
            break;
        case GPT_PRESCALER_1:
            SET_BIT(TCCR0, TCCR0_CS00);
    2fd4:	a3 e5       	ldi	r26, 0x53	; 83
    2fd6:	b0 e0       	ldi	r27, 0x00	; 0
    2fd8:	e3 e5       	ldi	r30, 0x53	; 83
    2fda:	f0 e0       	ldi	r31, 0x00	; 0
    2fdc:	80 81       	ld	r24, Z
    2fde:	81 60       	ori	r24, 0x01	; 1
    2fe0:	8c 93       	st	X, r24
            CLR_BIT(TCCR0, TCCR0_CS01);
    2fe2:	a3 e5       	ldi	r26, 0x53	; 83
    2fe4:	b0 e0       	ldi	r27, 0x00	; 0
    2fe6:	e3 e5       	ldi	r30, 0x53	; 83
    2fe8:	f0 e0       	ldi	r31, 0x00	; 0
    2fea:	80 81       	ld	r24, Z
    2fec:	8d 7f       	andi	r24, 0xFD	; 253
    2fee:	8c 93       	st	X, r24
            CLR_BIT(TCCR0, TCCR0_CS02);
    2ff0:	a3 e5       	ldi	r26, 0x53	; 83
    2ff2:	b0 e0       	ldi	r27, 0x00	; 0
    2ff4:	e3 e5       	ldi	r30, 0x53	; 83
    2ff6:	f0 e0       	ldi	r31, 0x00	; 0
    2ff8:	80 81       	ld	r24, Z
    2ffa:	8b 7f       	andi	r24, 0xFB	; 251
    2ffc:	8c 93       	st	X, r24
    2ffe:	87 c0       	rjmp	.+270    	; 0x310e <Gpt_Init+0xd34>
            break;
        case GPT_PRESCALER_8:
            CLR_BIT(TCCR0, TCCR0_CS00);
    3000:	a3 e5       	ldi	r26, 0x53	; 83
    3002:	b0 e0       	ldi	r27, 0x00	; 0
    3004:	e3 e5       	ldi	r30, 0x53	; 83
    3006:	f0 e0       	ldi	r31, 0x00	; 0
    3008:	80 81       	ld	r24, Z
    300a:	8e 7f       	andi	r24, 0xFE	; 254
    300c:	8c 93       	st	X, r24
            SET_BIT(TCCR0, TCCR0_CS01);
    300e:	a3 e5       	ldi	r26, 0x53	; 83
    3010:	b0 e0       	ldi	r27, 0x00	; 0
    3012:	e3 e5       	ldi	r30, 0x53	; 83
    3014:	f0 e0       	ldi	r31, 0x00	; 0
    3016:	80 81       	ld	r24, Z
    3018:	82 60       	ori	r24, 0x02	; 2
    301a:	8c 93       	st	X, r24
            CLR_BIT(TCCR0, TCCR0_CS02);
    301c:	a3 e5       	ldi	r26, 0x53	; 83
    301e:	b0 e0       	ldi	r27, 0x00	; 0
    3020:	e3 e5       	ldi	r30, 0x53	; 83
    3022:	f0 e0       	ldi	r31, 0x00	; 0
    3024:	80 81       	ld	r24, Z
    3026:	8b 7f       	andi	r24, 0xFB	; 251
    3028:	8c 93       	st	X, r24
    302a:	71 c0       	rjmp	.+226    	; 0x310e <Gpt_Init+0xd34>
            break;
        case GPT_PRESCALER_32:
            SET_BIT(TCCR0, TCCR0_CS00);
    302c:	a3 e5       	ldi	r26, 0x53	; 83
    302e:	b0 e0       	ldi	r27, 0x00	; 0
    3030:	e3 e5       	ldi	r30, 0x53	; 83
    3032:	f0 e0       	ldi	r31, 0x00	; 0
    3034:	80 81       	ld	r24, Z
    3036:	81 60       	ori	r24, 0x01	; 1
    3038:	8c 93       	st	X, r24
            SET_BIT(TCCR0, TCCR0_CS01);
    303a:	a3 e5       	ldi	r26, 0x53	; 83
    303c:	b0 e0       	ldi	r27, 0x00	; 0
    303e:	e3 e5       	ldi	r30, 0x53	; 83
    3040:	f0 e0       	ldi	r31, 0x00	; 0
    3042:	80 81       	ld	r24, Z
    3044:	82 60       	ori	r24, 0x02	; 2
    3046:	8c 93       	st	X, r24
            CLR_BIT(TCCR0, TCCR0_CS02);
    3048:	a3 e5       	ldi	r26, 0x53	; 83
    304a:	b0 e0       	ldi	r27, 0x00	; 0
    304c:	e3 e5       	ldi	r30, 0x53	; 83
    304e:	f0 e0       	ldi	r31, 0x00	; 0
    3050:	80 81       	ld	r24, Z
    3052:	8b 7f       	andi	r24, 0xFB	; 251
    3054:	8c 93       	st	X, r24
    3056:	5b c0       	rjmp	.+182    	; 0x310e <Gpt_Init+0xd34>
            // TODO
            break;
        case GPT_PRESCALER_64:
            CLR_BIT(TCCR0, TCCR0_CS00);
    3058:	a3 e5       	ldi	r26, 0x53	; 83
    305a:	b0 e0       	ldi	r27, 0x00	; 0
    305c:	e3 e5       	ldi	r30, 0x53	; 83
    305e:	f0 e0       	ldi	r31, 0x00	; 0
    3060:	80 81       	ld	r24, Z
    3062:	8e 7f       	andi	r24, 0xFE	; 254
    3064:	8c 93       	st	X, r24
            CLR_BIT(TCCR0, TCCR0_CS01);
    3066:	a3 e5       	ldi	r26, 0x53	; 83
    3068:	b0 e0       	ldi	r27, 0x00	; 0
    306a:	e3 e5       	ldi	r30, 0x53	; 83
    306c:	f0 e0       	ldi	r31, 0x00	; 0
    306e:	80 81       	ld	r24, Z
    3070:	8d 7f       	andi	r24, 0xFD	; 253
    3072:	8c 93       	st	X, r24
            SET_BIT(TCCR0, TCCR0_CS02);
    3074:	a3 e5       	ldi	r26, 0x53	; 83
    3076:	b0 e0       	ldi	r27, 0x00	; 0
    3078:	e3 e5       	ldi	r30, 0x53	; 83
    307a:	f0 e0       	ldi	r31, 0x00	; 0
    307c:	80 81       	ld	r24, Z
    307e:	84 60       	ori	r24, 0x04	; 4
    3080:	8c 93       	st	X, r24
    3082:	45 c0       	rjmp	.+138    	; 0x310e <Gpt_Init+0xd34>
            // TODO
            break;
        case GPT_PRESCALER_128:
            SET_BIT(TCCR0, TCCR0_CS00);
    3084:	a3 e5       	ldi	r26, 0x53	; 83
    3086:	b0 e0       	ldi	r27, 0x00	; 0
    3088:	e3 e5       	ldi	r30, 0x53	; 83
    308a:	f0 e0       	ldi	r31, 0x00	; 0
    308c:	80 81       	ld	r24, Z
    308e:	81 60       	ori	r24, 0x01	; 1
    3090:	8c 93       	st	X, r24
            CLR_BIT(TCCR0, TCCR0_CS01);
    3092:	a3 e5       	ldi	r26, 0x53	; 83
    3094:	b0 e0       	ldi	r27, 0x00	; 0
    3096:	e3 e5       	ldi	r30, 0x53	; 83
    3098:	f0 e0       	ldi	r31, 0x00	; 0
    309a:	80 81       	ld	r24, Z
    309c:	8d 7f       	andi	r24, 0xFD	; 253
    309e:	8c 93       	st	X, r24
            SET_BIT(TCCR0, TCCR0_CS02);
    30a0:	a3 e5       	ldi	r26, 0x53	; 83
    30a2:	b0 e0       	ldi	r27, 0x00	; 0
    30a4:	e3 e5       	ldi	r30, 0x53	; 83
    30a6:	f0 e0       	ldi	r31, 0x00	; 0
    30a8:	80 81       	ld	r24, Z
    30aa:	84 60       	ori	r24, 0x04	; 4
    30ac:	8c 93       	st	X, r24
    30ae:	2f c0       	rjmp	.+94     	; 0x310e <Gpt_Init+0xd34>
            break;
        case GPT_PRESCALER_256:
            CLR_BIT(TCCR0, TCCR0_CS00);
    30b0:	a3 e5       	ldi	r26, 0x53	; 83
    30b2:	b0 e0       	ldi	r27, 0x00	; 0
    30b4:	e3 e5       	ldi	r30, 0x53	; 83
    30b6:	f0 e0       	ldi	r31, 0x00	; 0
    30b8:	80 81       	ld	r24, Z
    30ba:	8e 7f       	andi	r24, 0xFE	; 254
    30bc:	8c 93       	st	X, r24
            SET_BIT(TCCR0, TCCR0_CS01);
    30be:	a3 e5       	ldi	r26, 0x53	; 83
    30c0:	b0 e0       	ldi	r27, 0x00	; 0
    30c2:	e3 e5       	ldi	r30, 0x53	; 83
    30c4:	f0 e0       	ldi	r31, 0x00	; 0
    30c6:	80 81       	ld	r24, Z
    30c8:	82 60       	ori	r24, 0x02	; 2
    30ca:	8c 93       	st	X, r24
            SET_BIT(TCCR0, TCCR0_CS02);
    30cc:	a3 e5       	ldi	r26, 0x53	; 83
    30ce:	b0 e0       	ldi	r27, 0x00	; 0
    30d0:	e3 e5       	ldi	r30, 0x53	; 83
    30d2:	f0 e0       	ldi	r31, 0x00	; 0
    30d4:	80 81       	ld	r24, Z
    30d6:	84 60       	ori	r24, 0x04	; 4
    30d8:	8c 93       	st	X, r24
    30da:	19 c0       	rjmp	.+50     	; 0x310e <Gpt_Init+0xd34>
            // TODO
            break;
        case GPT_PRESCALER_1024:
            SET_BIT(TCCR0, TCCR0_CS00);
    30dc:	a3 e5       	ldi	r26, 0x53	; 83
    30de:	b0 e0       	ldi	r27, 0x00	; 0
    30e0:	e3 e5       	ldi	r30, 0x53	; 83
    30e2:	f0 e0       	ldi	r31, 0x00	; 0
    30e4:	80 81       	ld	r24, Z
    30e6:	81 60       	ori	r24, 0x01	; 1
    30e8:	8c 93       	st	X, r24
            SET_BIT(TCCR0, TCCR0_CS01);
    30ea:	a3 e5       	ldi	r26, 0x53	; 83
    30ec:	b0 e0       	ldi	r27, 0x00	; 0
    30ee:	e3 e5       	ldi	r30, 0x53	; 83
    30f0:	f0 e0       	ldi	r31, 0x00	; 0
    30f2:	80 81       	ld	r24, Z
    30f4:	82 60       	ori	r24, 0x02	; 2
    30f6:	8c 93       	st	X, r24
            SET_BIT(TCCR0, TCCR0_CS02);
    30f8:	a3 e5       	ldi	r26, 0x53	; 83
    30fa:	b0 e0       	ldi	r27, 0x00	; 0
    30fc:	e3 e5       	ldi	r30, 0x53	; 83
    30fe:	f0 e0       	ldi	r31, 0x00	; 0
    3100:	80 81       	ld	r24, Z
    3102:	84 60       	ori	r24, 0x04	; 4
    3104:	8c 93       	st	X, r24
    3106:	03 c0       	rjmp	.+6      	; 0x310e <Gpt_Init+0xd34>
            // TODO
            break;
        default:
            returnValue = GPT_ERROR;
    3108:	19 82       	std	Y+1, r1	; 0x01
    310a:	01 c0       	rjmp	.+2      	; 0x310e <Gpt_Init+0xd34>
            break;
        }
        break;

    default:
        returnValue = GPT_ERROR;
    310c:	19 82       	std	Y+1, r1	; 0x01
    }
    return returnValue;
    310e:	89 81       	ldd	r24, Y+1	; 0x01
}
    3110:	65 96       	adiw	r28, 0x15	; 21
    3112:	0f b6       	in	r0, 0x3f	; 63
    3114:	f8 94       	cli
    3116:	de bf       	out	0x3e, r29	; 62
    3118:	0f be       	out	0x3f, r0	; 63
    311a:	cd bf       	out	0x3d, r28	; 61
    311c:	cf 91       	pop	r28
    311e:	df 91       	pop	r29
    3120:	08 95       	ret

00003122 <Gpt_StartTimer>:

Gpt_ReturnType Gpt_StartTimer(Gpt_ChannelType channel, u16 value)
{
    3122:	df 93       	push	r29
    3124:	cf 93       	push	r28
    3126:	00 d0       	rcall	.+0      	; 0x3128 <Gpt_StartTimer+0x6>
    3128:	00 d0       	rcall	.+0      	; 0x312a <Gpt_StartTimer+0x8>
    312a:	00 d0       	rcall	.+0      	; 0x312c <Gpt_StartTimer+0xa>
    312c:	cd b7       	in	r28, 0x3d	; 61
    312e:	de b7       	in	r29, 0x3e	; 62
    3130:	8a 83       	std	Y+2, r24	; 0x02
    3132:	7c 83       	std	Y+4, r23	; 0x04
    3134:	6b 83       	std	Y+3, r22	; 0x03
    Gpt_ReturnType returnValue = GPT_OK;
    3136:	81 e0       	ldi	r24, 0x01	; 1
    3138:	89 83       	std	Y+1, r24	; 0x01
    switch (channel)
    313a:	8a 81       	ldd	r24, Y+2	; 0x02
    313c:	28 2f       	mov	r18, r24
    313e:	30 e0       	ldi	r19, 0x00	; 0
    3140:	3e 83       	std	Y+6, r19	; 0x06
    3142:	2d 83       	std	Y+5, r18	; 0x05
    3144:	8d 81       	ldd	r24, Y+5	; 0x05
    3146:	9e 81       	ldd	r25, Y+6	; 0x06
    3148:	81 30       	cpi	r24, 0x01	; 1
    314a:	91 05       	cpc	r25, r1
    314c:	11 f1       	breq	.+68     	; 0x3192 <Gpt_StartTimer+0x70>
    314e:	2d 81       	ldd	r18, Y+5	; 0x05
    3150:	3e 81       	ldd	r19, Y+6	; 0x06
    3152:	22 30       	cpi	r18, 0x02	; 2
    3154:	31 05       	cpc	r19, r1
    3156:	2c f4       	brge	.+10     	; 0x3162 <Gpt_StartTimer+0x40>
    3158:	8d 81       	ldd	r24, Y+5	; 0x05
    315a:	9e 81       	ldd	r25, Y+6	; 0x06
    315c:	00 97       	sbiw	r24, 0x00	; 0
    315e:	61 f0       	breq	.+24     	; 0x3178 <Gpt_StartTimer+0x56>
    3160:	4c c0       	rjmp	.+152    	; 0x31fa <Gpt_StartTimer+0xd8>
    3162:	2d 81       	ldd	r18, Y+5	; 0x05
    3164:	3e 81       	ldd	r19, Y+6	; 0x06
    3166:	22 30       	cpi	r18, 0x02	; 2
    3168:	31 05       	cpc	r19, r1
    316a:	39 f1       	breq	.+78     	; 0x31ba <Gpt_StartTimer+0x98>
    316c:	8d 81       	ldd	r24, Y+5	; 0x05
    316e:	9e 81       	ldd	r25, Y+6	; 0x06
    3170:	83 30       	cpi	r24, 0x03	; 3
    3172:	91 05       	cpc	r25, r1
    3174:	b1 f1       	breq	.+108    	; 0x31e2 <Gpt_StartTimer+0xc0>
    3176:	41 c0       	rjmp	.+130    	; 0x31fa <Gpt_StartTimer+0xd8>
    {
    case GPT_CHANNEL_TIMER0:
        if (value < 256)
    3178:	8b 81       	ldd	r24, Y+3	; 0x03
    317a:	9c 81       	ldd	r25, Y+4	; 0x04
    317c:	8f 3f       	cpi	r24, 0xFF	; 255
    317e:	91 05       	cpc	r25, r1
    3180:	09 f0       	breq	.+2      	; 0x3184 <Gpt_StartTimer+0x62>
    3182:	28 f4       	brcc	.+10     	; 0x318e <Gpt_StartTimer+0x6c>
        {
            OCR0 = value;
    3184:	ec e5       	ldi	r30, 0x5C	; 92
    3186:	f0 e0       	ldi	r31, 0x00	; 0
    3188:	8b 81       	ldd	r24, Y+3	; 0x03
    318a:	80 83       	st	Z, r24
    318c:	36 c0       	rjmp	.+108    	; 0x31fa <Gpt_StartTimer+0xd8>
        }
        else
        {
            returnValue = GPT_ERROR;
    318e:	19 82       	std	Y+1, r1	; 0x01
    3190:	34 c0       	rjmp	.+104    	; 0x31fa <Gpt_StartTimer+0xd8>
        }
        break;
    case GPT_CHANNEL_TIMER1A:
        if (value < 0xFFFF)
    3192:	8b 81       	ldd	r24, Y+3	; 0x03
    3194:	9c 81       	ldd	r25, Y+4	; 0x04
    3196:	2f ef       	ldi	r18, 0xFF	; 255
    3198:	8f 3f       	cpi	r24, 0xFF	; 255
    319a:	92 07       	cpc	r25, r18
    319c:	61 f0       	breq	.+24     	; 0x31b6 <Gpt_StartTimer+0x94>
        {
            OCR1AL=(0X0FF & value);
    319e:	ea e4       	ldi	r30, 0x4A	; 74
    31a0:	f0 e0       	ldi	r31, 0x00	; 0
    31a2:	8b 81       	ldd	r24, Y+3	; 0x03
    31a4:	80 83       	st	Z, r24
            OCR1AH=(value>>8);
    31a6:	eb e4       	ldi	r30, 0x4B	; 75
    31a8:	f0 e0       	ldi	r31, 0x00	; 0
    31aa:	8b 81       	ldd	r24, Y+3	; 0x03
    31ac:	9c 81       	ldd	r25, Y+4	; 0x04
    31ae:	89 2f       	mov	r24, r25
    31b0:	99 27       	eor	r25, r25
    31b2:	80 83       	st	Z, r24
    31b4:	22 c0       	rjmp	.+68     	; 0x31fa <Gpt_StartTimer+0xd8>
        }
        else
        {
            returnValue = GPT_ERROR;
    31b6:	19 82       	std	Y+1, r1	; 0x01
    31b8:	20 c0       	rjmp	.+64     	; 0x31fa <Gpt_StartTimer+0xd8>
        }
        // TODO
        break;
    case GPT_CHANNEL_TIMER1B:
        if (value < 0xFFFF)
    31ba:	8b 81       	ldd	r24, Y+3	; 0x03
    31bc:	9c 81       	ldd	r25, Y+4	; 0x04
    31be:	3f ef       	ldi	r19, 0xFF	; 255
    31c0:	8f 3f       	cpi	r24, 0xFF	; 255
    31c2:	93 07       	cpc	r25, r19
    31c4:	61 f0       	breq	.+24     	; 0x31de <Gpt_StartTimer+0xbc>
        {
            OCR1BL=(0X0FF & value);
    31c6:	e8 e4       	ldi	r30, 0x48	; 72
    31c8:	f0 e0       	ldi	r31, 0x00	; 0
    31ca:	8b 81       	ldd	r24, Y+3	; 0x03
    31cc:	80 83       	st	Z, r24
            OCR1BH=(value>>8);
    31ce:	e9 e4       	ldi	r30, 0x49	; 73
    31d0:	f0 e0       	ldi	r31, 0x00	; 0
    31d2:	8b 81       	ldd	r24, Y+3	; 0x03
    31d4:	9c 81       	ldd	r25, Y+4	; 0x04
    31d6:	89 2f       	mov	r24, r25
    31d8:	99 27       	eor	r25, r25
    31da:	80 83       	st	Z, r24
    31dc:	0e c0       	rjmp	.+28     	; 0x31fa <Gpt_StartTimer+0xd8>
        }
        else
        {
            returnValue = GPT_ERROR;
    31de:	19 82       	std	Y+1, r1	; 0x01
    31e0:	0c c0       	rjmp	.+24     	; 0x31fa <Gpt_StartTimer+0xd8>
        }
        // TODO
        break;
    case GPT_CHANNEL_TIMER2:
        if (value < 256)
    31e2:	8b 81       	ldd	r24, Y+3	; 0x03
    31e4:	9c 81       	ldd	r25, Y+4	; 0x04
    31e6:	8f 3f       	cpi	r24, 0xFF	; 255
    31e8:	91 05       	cpc	r25, r1
    31ea:	09 f0       	breq	.+2      	; 0x31ee <Gpt_StartTimer+0xcc>
    31ec:	28 f4       	brcc	.+10     	; 0x31f8 <Gpt_StartTimer+0xd6>
        {
            OCR2 = value;
    31ee:	e3 e4       	ldi	r30, 0x43	; 67
    31f0:	f0 e0       	ldi	r31, 0x00	; 0
    31f2:	8b 81       	ldd	r24, Y+3	; 0x03
    31f4:	80 83       	st	Z, r24
    31f6:	01 c0       	rjmp	.+2      	; 0x31fa <Gpt_StartTimer+0xd8>
        }
        else
        {
            returnValue = GPT_ERROR;
    31f8:	19 82       	std	Y+1, r1	; 0x01
        break;

    default:
        break;
    }
    return returnValue;
    31fa:	89 81       	ldd	r24, Y+1	; 0x01
}
    31fc:	26 96       	adiw	r28, 0x06	; 6
    31fe:	0f b6       	in	r0, 0x3f	; 63
    3200:	f8 94       	cli
    3202:	de bf       	out	0x3e, r29	; 62
    3204:	0f be       	out	0x3f, r0	; 63
    3206:	cd bf       	out	0x3d, r28	; 61
    3208:	cf 91       	pop	r28
    320a:	df 91       	pop	r29
    320c:	08 95       	ret

0000320e <Gpt_GetTimeElapsed>:

u16 Gpt_GetTimeElapsed(Gpt_ChannelType channel)
{
    320e:	df 93       	push	r29
    3210:	cf 93       	push	r28
    3212:	00 d0       	rcall	.+0      	; 0x3214 <Gpt_GetTimeElapsed+0x6>
    3214:	00 d0       	rcall	.+0      	; 0x3216 <Gpt_GetTimeElapsed+0x8>
    3216:	0f 92       	push	r0
    3218:	cd b7       	in	r28, 0x3d	; 61
    321a:	de b7       	in	r29, 0x3e	; 62
    321c:	8b 83       	std	Y+3, r24	; 0x03
    u16 value = 0;
    321e:	1a 82       	std	Y+2, r1	; 0x02
    3220:	19 82       	std	Y+1, r1	; 0x01
    switch (channel)
    3222:	8b 81       	ldd	r24, Y+3	; 0x03
    3224:	28 2f       	mov	r18, r24
    3226:	30 e0       	ldi	r19, 0x00	; 0
    3228:	3d 83       	std	Y+5, r19	; 0x05
    322a:	2c 83       	std	Y+4, r18	; 0x04
    322c:	8c 81       	ldd	r24, Y+4	; 0x04
    322e:	9d 81       	ldd	r25, Y+5	; 0x05
    3230:	81 30       	cpi	r24, 0x01	; 1
    3232:	91 05       	cpc	r25, r1
    3234:	e9 f0       	breq	.+58     	; 0x3270 <Gpt_GetTimeElapsed+0x62>
    3236:	2c 81       	ldd	r18, Y+4	; 0x04
    3238:	3d 81       	ldd	r19, Y+5	; 0x05
    323a:	22 30       	cpi	r18, 0x02	; 2
    323c:	31 05       	cpc	r19, r1
    323e:	2c f4       	brge	.+10     	; 0x324a <Gpt_GetTimeElapsed+0x3c>
    3240:	8c 81       	ldd	r24, Y+4	; 0x04
    3242:	9d 81       	ldd	r25, Y+5	; 0x05
    3244:	00 97       	sbiw	r24, 0x00	; 0
    3246:	61 f0       	breq	.+24     	; 0x3260 <Gpt_GetTimeElapsed+0x52>
    3248:	28 c0       	rjmp	.+80     	; 0x329a <Gpt_GetTimeElapsed+0x8c>
    324a:	2c 81       	ldd	r18, Y+4	; 0x04
    324c:	3d 81       	ldd	r19, Y+5	; 0x05
    324e:	22 30       	cpi	r18, 0x02	; 2
    3250:	31 05       	cpc	r19, r1
    3252:	a9 f0       	breq	.+42     	; 0x327e <Gpt_GetTimeElapsed+0x70>
    3254:	8c 81       	ldd	r24, Y+4	; 0x04
    3256:	9d 81       	ldd	r25, Y+5	; 0x05
    3258:	83 30       	cpi	r24, 0x03	; 3
    325a:	91 05       	cpc	r25, r1
    325c:	b9 f0       	breq	.+46     	; 0x328c <Gpt_GetTimeElapsed+0x7e>
    325e:	1d c0       	rjmp	.+58     	; 0x329a <Gpt_GetTimeElapsed+0x8c>
    {
    case GPT_CHANNEL_TIMER0:
        value = TCNT0;
    3260:	e2 e5       	ldi	r30, 0x52	; 82
    3262:	f0 e0       	ldi	r31, 0x00	; 0
    3264:	80 81       	ld	r24, Z
    3266:	88 2f       	mov	r24, r24
    3268:	90 e0       	ldi	r25, 0x00	; 0
    326a:	9a 83       	std	Y+2, r25	; 0x02
    326c:	89 83       	std	Y+1, r24	; 0x01
    326e:	15 c0       	rjmp	.+42     	; 0x329a <Gpt_GetTimeElapsed+0x8c>
        break;
    case GPT_CHANNEL_TIMER1A:
        // u16 dummy=(0XFFFF & TCNT1H);
        // dummy = dummy <<8;
        value=TCNT1HL_DATA_REGISTER;
    3270:	ec e4       	ldi	r30, 0x4C	; 76
    3272:	f0 e0       	ldi	r31, 0x00	; 0
    3274:	80 81       	ld	r24, Z
    3276:	91 81       	ldd	r25, Z+1	; 0x01
    3278:	9a 83       	std	Y+2, r25	; 0x02
    327a:	89 83       	std	Y+1, r24	; 0x01
    327c:	0e c0       	rjmp	.+28     	; 0x329a <Gpt_GetTimeElapsed+0x8c>
        // TODO
        break;
    case GPT_CHANNEL_TIMER1B:
        value=TCNT1HL_DATA_REGISTER;
    327e:	ec e4       	ldi	r30, 0x4C	; 76
    3280:	f0 e0       	ldi	r31, 0x00	; 0
    3282:	80 81       	ld	r24, Z
    3284:	91 81       	ldd	r25, Z+1	; 0x01
    3286:	9a 83       	std	Y+2, r25	; 0x02
    3288:	89 83       	std	Y+1, r24	; 0x01
    328a:	07 c0       	rjmp	.+14     	; 0x329a <Gpt_GetTimeElapsed+0x8c>
        // TODO
        break;
    case GPT_CHANNEL_TIMER2:
        value = TCNT2;
    328c:	e4 e4       	ldi	r30, 0x44	; 68
    328e:	f0 e0       	ldi	r31, 0x00	; 0
    3290:	80 81       	ld	r24, Z
    3292:	88 2f       	mov	r24, r24
    3294:	90 e0       	ldi	r25, 0x00	; 0
    3296:	9a 83       	std	Y+2, r25	; 0x02
    3298:	89 83       	std	Y+1, r24	; 0x01
        // TODO
        break;
    default:
        break;
    }
    return value;
    329a:	89 81       	ldd	r24, Y+1	; 0x01
    329c:	9a 81       	ldd	r25, Y+2	; 0x02
}
    329e:	0f 90       	pop	r0
    32a0:	0f 90       	pop	r0
    32a2:	0f 90       	pop	r0
    32a4:	0f 90       	pop	r0
    32a6:	0f 90       	pop	r0
    32a8:	cf 91       	pop	r28
    32aa:	df 91       	pop	r29
    32ac:	08 95       	ret

000032ae <Gpt_GetTimeRemaining>:

u16 Gpt_GetTimeRemaining(Gpt_ChannelType channel, Gpt_ModeType mode)
{
    32ae:	df 93       	push	r29
    32b0:	cf 93       	push	r28
    32b2:	00 d0       	rcall	.+0      	; 0x32b4 <Gpt_GetTimeRemaining+0x6>
    32b4:	00 d0       	rcall	.+0      	; 0x32b6 <Gpt_GetTimeRemaining+0x8>
    32b6:	00 d0       	rcall	.+0      	; 0x32b8 <Gpt_GetTimeRemaining+0xa>
    32b8:	cd b7       	in	r28, 0x3d	; 61
    32ba:	de b7       	in	r29, 0x3e	; 62
    32bc:	8b 83       	std	Y+3, r24	; 0x03
    32be:	6c 83       	std	Y+4, r22	; 0x04
    u16 value = 0;
    32c0:	1a 82       	std	Y+2, r1	; 0x02
    32c2:	19 82       	std	Y+1, r1	; 0x01
    switch (channel)
    32c4:	8b 81       	ldd	r24, Y+3	; 0x03
    32c6:	28 2f       	mov	r18, r24
    32c8:	30 e0       	ldi	r19, 0x00	; 0
    32ca:	3e 83       	std	Y+6, r19	; 0x06
    32cc:	2d 83       	std	Y+5, r18	; 0x05
    32ce:	4d 81       	ldd	r20, Y+5	; 0x05
    32d0:	5e 81       	ldd	r21, Y+6	; 0x06
    32d2:	41 30       	cpi	r20, 0x01	; 1
    32d4:	51 05       	cpc	r21, r1
    32d6:	e1 f1       	breq	.+120    	; 0x3350 <Gpt_GetTimeRemaining+0xa2>
    32d8:	8d 81       	ldd	r24, Y+5	; 0x05
    32da:	9e 81       	ldd	r25, Y+6	; 0x06
    32dc:	82 30       	cpi	r24, 0x02	; 2
    32de:	91 05       	cpc	r25, r1
    32e0:	34 f4       	brge	.+12     	; 0x32ee <Gpt_GetTimeRemaining+0x40>
    32e2:	2d 81       	ldd	r18, Y+5	; 0x05
    32e4:	3e 81       	ldd	r19, Y+6	; 0x06
    32e6:	21 15       	cp	r18, r1
    32e8:	31 05       	cpc	r19, r1
    32ea:	71 f0       	breq	.+28     	; 0x3308 <Gpt_GetTimeRemaining+0x5a>
    32ec:	92 c0       	rjmp	.+292    	; 0x3412 <Gpt_GetTimeRemaining+0x164>
    32ee:	4d 81       	ldd	r20, Y+5	; 0x05
    32f0:	5e 81       	ldd	r21, Y+6	; 0x06
    32f2:	42 30       	cpi	r20, 0x02	; 2
    32f4:	51 05       	cpc	r21, r1
    32f6:	09 f4       	brne	.+2      	; 0x32fa <Gpt_GetTimeRemaining+0x4c>
    32f8:	4a c0       	rjmp	.+148    	; 0x338e <Gpt_GetTimeRemaining+0xe0>
    32fa:	8d 81       	ldd	r24, Y+5	; 0x05
    32fc:	9e 81       	ldd	r25, Y+6	; 0x06
    32fe:	83 30       	cpi	r24, 0x03	; 3
    3300:	91 05       	cpc	r25, r1
    3302:	09 f4       	brne	.+2      	; 0x3306 <Gpt_GetTimeRemaining+0x58>
    3304:	64 c0       	rjmp	.+200    	; 0x33ce <Gpt_GetTimeRemaining+0x120>
    3306:	85 c0       	rjmp	.+266    	; 0x3412 <Gpt_GetTimeRemaining+0x164>
    {
    case GPT_CHANNEL_TIMER0:
        if (mode == GPT_MODE_NORMAL)
    3308:	8c 81       	ldd	r24, Y+4	; 0x04
    330a:	88 23       	and	r24, r24
    330c:	61 f4       	brne	.+24     	; 0x3326 <Gpt_GetTimeRemaining+0x78>
        {
            value = 0xFF - TCNT0;
    330e:	e2 e5       	ldi	r30, 0x52	; 82
    3310:	f0 e0       	ldi	r31, 0x00	; 0
    3312:	80 81       	ld	r24, Z
    3314:	28 2f       	mov	r18, r24
    3316:	30 e0       	ldi	r19, 0x00	; 0
    3318:	8f ef       	ldi	r24, 0xFF	; 255
    331a:	90 e0       	ldi	r25, 0x00	; 0
    331c:	82 1b       	sub	r24, r18
    331e:	93 0b       	sbc	r25, r19
    3320:	9a 83       	std	Y+2, r25	; 0x02
    3322:	89 83       	std	Y+1, r24	; 0x01
    3324:	76 c0       	rjmp	.+236    	; 0x3412 <Gpt_GetTimeRemaining+0x164>
        }
        else if (mode == GPT_MODE_CTC)
    3326:	8c 81       	ldd	r24, Y+4	; 0x04
    3328:	81 30       	cpi	r24, 0x01	; 1
    332a:	09 f0       	breq	.+2      	; 0x332e <Gpt_GetTimeRemaining+0x80>
    332c:	72 c0       	rjmp	.+228    	; 0x3412 <Gpt_GetTimeRemaining+0x164>
        {
            value = OCR0 - TCNT0;
    332e:	ec e5       	ldi	r30, 0x5C	; 92
    3330:	f0 e0       	ldi	r31, 0x00	; 0
    3332:	80 81       	ld	r24, Z
    3334:	28 2f       	mov	r18, r24
    3336:	30 e0       	ldi	r19, 0x00	; 0
    3338:	e2 e5       	ldi	r30, 0x52	; 82
    333a:	f0 e0       	ldi	r31, 0x00	; 0
    333c:	80 81       	ld	r24, Z
    333e:	88 2f       	mov	r24, r24
    3340:	90 e0       	ldi	r25, 0x00	; 0
    3342:	a9 01       	movw	r20, r18
    3344:	48 1b       	sub	r20, r24
    3346:	59 0b       	sbc	r21, r25
    3348:	ca 01       	movw	r24, r20
    334a:	9a 83       	std	Y+2, r25	; 0x02
    334c:	89 83       	std	Y+1, r24	; 0x01
    334e:	61 c0       	rjmp	.+194    	; 0x3412 <Gpt_GetTimeRemaining+0x164>
        }
        break;
    case GPT_CHANNEL_TIMER1A:
        if (mode == GPT_MODE_NORMAL)
    3350:	8c 81       	ldd	r24, Y+4	; 0x04
    3352:	88 23       	and	r24, r24
    3354:	49 f4       	brne	.+18     	; 0x3368 <Gpt_GetTimeRemaining+0xba>
        {
            value = 0xFFFF - TCNT1HL_DATA_REGISTER;
    3356:	ec e4       	ldi	r30, 0x4C	; 76
    3358:	f0 e0       	ldi	r31, 0x00	; 0
    335a:	80 81       	ld	r24, Z
    335c:	91 81       	ldd	r25, Z+1	; 0x01
    335e:	80 95       	com	r24
    3360:	90 95       	com	r25
    3362:	9a 83       	std	Y+2, r25	; 0x02
    3364:	89 83       	std	Y+1, r24	; 0x01
    3366:	55 c0       	rjmp	.+170    	; 0x3412 <Gpt_GetTimeRemaining+0x164>
        }
        else if (mode == GPT_MODE_CTC)
    3368:	8c 81       	ldd	r24, Y+4	; 0x04
    336a:	81 30       	cpi	r24, 0x01	; 1
    336c:	09 f0       	breq	.+2      	; 0x3370 <Gpt_GetTimeRemaining+0xc2>
    336e:	51 c0       	rjmp	.+162    	; 0x3412 <Gpt_GetTimeRemaining+0x164>
        {
            value = OCR1AHL_DATA_REGISTER - TCNT1HL_DATA_REGISTER;
    3370:	ea e4       	ldi	r30, 0x4A	; 74
    3372:	f0 e0       	ldi	r31, 0x00	; 0
    3374:	20 81       	ld	r18, Z
    3376:	31 81       	ldd	r19, Z+1	; 0x01
    3378:	ec e4       	ldi	r30, 0x4C	; 76
    337a:	f0 e0       	ldi	r31, 0x00	; 0
    337c:	80 81       	ld	r24, Z
    337e:	91 81       	ldd	r25, Z+1	; 0x01
    3380:	a9 01       	movw	r20, r18
    3382:	48 1b       	sub	r20, r24
    3384:	59 0b       	sbc	r21, r25
    3386:	ca 01       	movw	r24, r20
    3388:	9a 83       	std	Y+2, r25	; 0x02
    338a:	89 83       	std	Y+1, r24	; 0x01
    338c:	42 c0       	rjmp	.+132    	; 0x3412 <Gpt_GetTimeRemaining+0x164>
        }
        // TODO
        break;
    case GPT_CHANNEL_TIMER1B:
        if (mode == GPT_MODE_NORMAL)
    338e:	8c 81       	ldd	r24, Y+4	; 0x04
    3390:	88 23       	and	r24, r24
    3392:	59 f4       	brne	.+22     	; 0x33aa <Gpt_GetTimeRemaining+0xfc>
        {
            value = 0xFF - TCNT1HL_DATA_REGISTER;
    3394:	ec e4       	ldi	r30, 0x4C	; 76
    3396:	f0 e0       	ldi	r31, 0x00	; 0
    3398:	20 81       	ld	r18, Z
    339a:	31 81       	ldd	r19, Z+1	; 0x01
    339c:	8f ef       	ldi	r24, 0xFF	; 255
    339e:	90 e0       	ldi	r25, 0x00	; 0
    33a0:	82 1b       	sub	r24, r18
    33a2:	93 0b       	sbc	r25, r19
    33a4:	9a 83       	std	Y+2, r25	; 0x02
    33a6:	89 83       	std	Y+1, r24	; 0x01
    33a8:	34 c0       	rjmp	.+104    	; 0x3412 <Gpt_GetTimeRemaining+0x164>
        }
        else if (mode == GPT_MODE_CTC)
    33aa:	8c 81       	ldd	r24, Y+4	; 0x04
    33ac:	81 30       	cpi	r24, 0x01	; 1
    33ae:	89 f5       	brne	.+98     	; 0x3412 <Gpt_GetTimeRemaining+0x164>
        {
            value = OCR1BHL_DATA_REGISTER - TCNT1HL_DATA_REGISTER;
    33b0:	e8 e4       	ldi	r30, 0x48	; 72
    33b2:	f0 e0       	ldi	r31, 0x00	; 0
    33b4:	20 81       	ld	r18, Z
    33b6:	31 81       	ldd	r19, Z+1	; 0x01
    33b8:	ec e4       	ldi	r30, 0x4C	; 76
    33ba:	f0 e0       	ldi	r31, 0x00	; 0
    33bc:	80 81       	ld	r24, Z
    33be:	91 81       	ldd	r25, Z+1	; 0x01
    33c0:	a9 01       	movw	r20, r18
    33c2:	48 1b       	sub	r20, r24
    33c4:	59 0b       	sbc	r21, r25
    33c6:	ca 01       	movw	r24, r20
    33c8:	9a 83       	std	Y+2, r25	; 0x02
    33ca:	89 83       	std	Y+1, r24	; 0x01
    33cc:	22 c0       	rjmp	.+68     	; 0x3412 <Gpt_GetTimeRemaining+0x164>
        }
        // TODO
        break;
    case GPT_CHANNEL_TIMER2:
        if (mode == GPT_MODE_NORMAL)
    33ce:	8c 81       	ldd	r24, Y+4	; 0x04
    33d0:	88 23       	and	r24, r24
    33d2:	61 f4       	brne	.+24     	; 0x33ec <Gpt_GetTimeRemaining+0x13e>
        {
            value = 0xFF - TCNT2;
    33d4:	e4 e4       	ldi	r30, 0x44	; 68
    33d6:	f0 e0       	ldi	r31, 0x00	; 0
    33d8:	80 81       	ld	r24, Z
    33da:	28 2f       	mov	r18, r24
    33dc:	30 e0       	ldi	r19, 0x00	; 0
    33de:	8f ef       	ldi	r24, 0xFF	; 255
    33e0:	90 e0       	ldi	r25, 0x00	; 0
    33e2:	82 1b       	sub	r24, r18
    33e4:	93 0b       	sbc	r25, r19
    33e6:	9a 83       	std	Y+2, r25	; 0x02
    33e8:	89 83       	std	Y+1, r24	; 0x01
    33ea:	13 c0       	rjmp	.+38     	; 0x3412 <Gpt_GetTimeRemaining+0x164>
        }
        else if (mode == GPT_MODE_CTC)
    33ec:	8c 81       	ldd	r24, Y+4	; 0x04
    33ee:	81 30       	cpi	r24, 0x01	; 1
    33f0:	81 f4       	brne	.+32     	; 0x3412 <Gpt_GetTimeRemaining+0x164>
        {
            value = OCR2 - TCNT2;
    33f2:	e3 e4       	ldi	r30, 0x43	; 67
    33f4:	f0 e0       	ldi	r31, 0x00	; 0
    33f6:	80 81       	ld	r24, Z
    33f8:	28 2f       	mov	r18, r24
    33fa:	30 e0       	ldi	r19, 0x00	; 0
    33fc:	e4 e4       	ldi	r30, 0x44	; 68
    33fe:	f0 e0       	ldi	r31, 0x00	; 0
    3400:	80 81       	ld	r24, Z
    3402:	88 2f       	mov	r24, r24
    3404:	90 e0       	ldi	r25, 0x00	; 0
    3406:	a9 01       	movw	r20, r18
    3408:	48 1b       	sub	r20, r24
    340a:	59 0b       	sbc	r21, r25
    340c:	ca 01       	movw	r24, r20
    340e:	9a 83       	std	Y+2, r25	; 0x02
    3410:	89 83       	std	Y+1, r24	; 0x01
        // TODO
        break;
    default:
        break;
    }
    return value;
    3412:	89 81       	ldd	r24, Y+1	; 0x01
    3414:	9a 81       	ldd	r25, Y+2	; 0x02
}
    3416:	26 96       	adiw	r28, 0x06	; 6
    3418:	0f b6       	in	r0, 0x3f	; 63
    341a:	f8 94       	cli
    341c:	de bf       	out	0x3e, r29	; 62
    341e:	0f be       	out	0x3f, r0	; 63
    3420:	cd bf       	out	0x3d, r28	; 61
    3422:	cf 91       	pop	r28
    3424:	df 91       	pop	r29
    3426:	08 95       	ret

00003428 <Gpt_EnableNotification>:

void Gpt_EnableNotification(Gpt_ChannelType channel, Gpt_ModeType mode, void (*callback)(void))
{
    3428:	df 93       	push	r29
    342a:	cf 93       	push	r28
    342c:	00 d0       	rcall	.+0      	; 0x342e <Gpt_EnableNotification+0x6>
    342e:	00 d0       	rcall	.+0      	; 0x3430 <Gpt_EnableNotification+0x8>
    3430:	00 d0       	rcall	.+0      	; 0x3432 <Gpt_EnableNotification+0xa>
    3432:	cd b7       	in	r28, 0x3d	; 61
    3434:	de b7       	in	r29, 0x3e	; 62
    3436:	89 83       	std	Y+1, r24	; 0x01
    3438:	6a 83       	std	Y+2, r22	; 0x02
    343a:	5c 83       	std	Y+4, r21	; 0x04
    343c:	4b 83       	std	Y+3, r20	; 0x03
    switch (channel)
    343e:	89 81       	ldd	r24, Y+1	; 0x01
    3440:	28 2f       	mov	r18, r24
    3442:	30 e0       	ldi	r19, 0x00	; 0
    3444:	3e 83       	std	Y+6, r19	; 0x06
    3446:	2d 83       	std	Y+5, r18	; 0x05
    3448:	8d 81       	ldd	r24, Y+5	; 0x05
    344a:	9e 81       	ldd	r25, Y+6	; 0x06
    344c:	81 30       	cpi	r24, 0x01	; 1
    344e:	91 05       	cpc	r25, r1
    3450:	d1 f1       	breq	.+116    	; 0x34c6 <Gpt_EnableNotification+0x9e>
    3452:	2d 81       	ldd	r18, Y+5	; 0x05
    3454:	3e 81       	ldd	r19, Y+6	; 0x06
    3456:	22 30       	cpi	r18, 0x02	; 2
    3458:	31 05       	cpc	r19, r1
    345a:	2c f4       	brge	.+10     	; 0x3466 <Gpt_EnableNotification+0x3e>
    345c:	8d 81       	ldd	r24, Y+5	; 0x05
    345e:	9e 81       	ldd	r25, Y+6	; 0x06
    3460:	00 97       	sbiw	r24, 0x00	; 0
    3462:	71 f0       	breq	.+28     	; 0x3480 <Gpt_EnableNotification+0x58>
    3464:	96 c0       	rjmp	.+300    	; 0x3592 <Gpt_EnableNotification+0x16a>
    3466:	2d 81       	ldd	r18, Y+5	; 0x05
    3468:	3e 81       	ldd	r19, Y+6	; 0x06
    346a:	22 30       	cpi	r18, 0x02	; 2
    346c:	31 05       	cpc	r19, r1
    346e:	09 f4       	brne	.+2      	; 0x3472 <Gpt_EnableNotification+0x4a>
    3470:	4d c0       	rjmp	.+154    	; 0x350c <Gpt_EnableNotification+0xe4>
    3472:	8d 81       	ldd	r24, Y+5	; 0x05
    3474:	9e 81       	ldd	r25, Y+6	; 0x06
    3476:	83 30       	cpi	r24, 0x03	; 3
    3478:	91 05       	cpc	r25, r1
    347a:	09 f4       	brne	.+2      	; 0x347e <Gpt_EnableNotification+0x56>
    347c:	69 c0       	rjmp	.+210    	; 0x3550 <Gpt_EnableNotification+0x128>
    347e:	89 c0       	rjmp	.+274    	; 0x3592 <Gpt_EnableNotification+0x16a>
    {
    case GPT_CHANNEL_TIMER0:
        if (mode == GPT_MODE_NORMAL)
    3480:	8a 81       	ldd	r24, Y+2	; 0x02
    3482:	88 23       	and	r24, r24
    3484:	71 f4       	brne	.+28     	; 0x34a2 <Gpt_EnableNotification+0x7a>
        {
            Gpt_Timer0_Callback_Normal = callback;
    3486:	8b 81       	ldd	r24, Y+3	; 0x03
    3488:	9c 81       	ldd	r25, Y+4	; 0x04
    348a:	90 93 85 01 	sts	0x0185, r25
    348e:	80 93 84 01 	sts	0x0184, r24
            SET_BIT(TIMSK, TIMSK_TOIE0);
    3492:	a9 e5       	ldi	r26, 0x59	; 89
    3494:	b0 e0       	ldi	r27, 0x00	; 0
    3496:	e9 e5       	ldi	r30, 0x59	; 89
    3498:	f0 e0       	ldi	r31, 0x00	; 0
    349a:	80 81       	ld	r24, Z
    349c:	81 60       	ori	r24, 0x01	; 1
    349e:	8c 93       	st	X, r24
    34a0:	78 c0       	rjmp	.+240    	; 0x3592 <Gpt_EnableNotification+0x16a>
        }
        else if (mode == GPT_MODE_CTC)
    34a2:	8a 81       	ldd	r24, Y+2	; 0x02
    34a4:	81 30       	cpi	r24, 0x01	; 1
    34a6:	09 f0       	breq	.+2      	; 0x34aa <Gpt_EnableNotification+0x82>
    34a8:	74 c0       	rjmp	.+232    	; 0x3592 <Gpt_EnableNotification+0x16a>
        {
            Gpt_Timer0_Callback_Ctc = callback;
    34aa:	8b 81       	ldd	r24, Y+3	; 0x03
    34ac:	9c 81       	ldd	r25, Y+4	; 0x04
    34ae:	90 93 7b 01 	sts	0x017B, r25
    34b2:	80 93 7a 01 	sts	0x017A, r24
            SET_BIT(TIMSK, TIMSK_OCIE0);
    34b6:	a9 e5       	ldi	r26, 0x59	; 89
    34b8:	b0 e0       	ldi	r27, 0x00	; 0
    34ba:	e9 e5       	ldi	r30, 0x59	; 89
    34bc:	f0 e0       	ldi	r31, 0x00	; 0
    34be:	80 81       	ld	r24, Z
    34c0:	82 60       	ori	r24, 0x02	; 2
    34c2:	8c 93       	st	X, r24
    34c4:	66 c0       	rjmp	.+204    	; 0x3592 <Gpt_EnableNotification+0x16a>
        }
        break;

    case GPT_CHANNEL_TIMER1A:
        if (mode == GPT_MODE_NORMAL)
    34c6:	8a 81       	ldd	r24, Y+2	; 0x02
    34c8:	88 23       	and	r24, r24
    34ca:	71 f4       	brne	.+28     	; 0x34e8 <Gpt_EnableNotification+0xc0>
        {
            Gpt_Timer1_Callback_Normal = callback;
    34cc:	8b 81       	ldd	r24, Y+3	; 0x03
    34ce:	9c 81       	ldd	r25, Y+4	; 0x04
    34d0:	90 93 87 01 	sts	0x0187, r25
    34d4:	80 93 86 01 	sts	0x0186, r24
            SET_BIT(TIMSK, TIMSK_TOIE1);
    34d8:	a9 e5       	ldi	r26, 0x59	; 89
    34da:	b0 e0       	ldi	r27, 0x00	; 0
    34dc:	e9 e5       	ldi	r30, 0x59	; 89
    34de:	f0 e0       	ldi	r31, 0x00	; 0
    34e0:	80 81       	ld	r24, Z
    34e2:	84 60       	ori	r24, 0x04	; 4
    34e4:	8c 93       	st	X, r24
    34e6:	55 c0       	rjmp	.+170    	; 0x3592 <Gpt_EnableNotification+0x16a>
            // TODO
        }
        else if (mode == GPT_MODE_CTC)
    34e8:	8a 81       	ldd	r24, Y+2	; 0x02
    34ea:	81 30       	cpi	r24, 0x01	; 1
    34ec:	09 f0       	breq	.+2      	; 0x34f0 <Gpt_EnableNotification+0xc8>
    34ee:	51 c0       	rjmp	.+162    	; 0x3592 <Gpt_EnableNotification+0x16a>
        {
            Gpt_Timer1A_Callback_Ctc = callback;
    34f0:	8b 81       	ldd	r24, Y+3	; 0x03
    34f2:	9c 81       	ldd	r25, Y+4	; 0x04
    34f4:	90 93 83 01 	sts	0x0183, r25
    34f8:	80 93 82 01 	sts	0x0182, r24
            SET_BIT(TIMSK, TIMSK_OCIE1A);
    34fc:	a9 e5       	ldi	r26, 0x59	; 89
    34fe:	b0 e0       	ldi	r27, 0x00	; 0
    3500:	e9 e5       	ldi	r30, 0x59	; 89
    3502:	f0 e0       	ldi	r31, 0x00	; 0
    3504:	80 81       	ld	r24, Z
    3506:	80 61       	ori	r24, 0x10	; 16
    3508:	8c 93       	st	X, r24
    350a:	43 c0       	rjmp	.+134    	; 0x3592 <Gpt_EnableNotification+0x16a>
            // TODO
        }
        break;

    case GPT_CHANNEL_TIMER1B:
        if (mode == GPT_MODE_NORMAL)
    350c:	8a 81       	ldd	r24, Y+2	; 0x02
    350e:	88 23       	and	r24, r24
    3510:	71 f4       	brne	.+28     	; 0x352e <Gpt_EnableNotification+0x106>
        {
            Gpt_Timer1_Callback_Normal = callback;
    3512:	8b 81       	ldd	r24, Y+3	; 0x03
    3514:	9c 81       	ldd	r25, Y+4	; 0x04
    3516:	90 93 87 01 	sts	0x0187, r25
    351a:	80 93 86 01 	sts	0x0186, r24
            SET_BIT(TIMSK, TIMSK_TOIE1);
    351e:	a9 e5       	ldi	r26, 0x59	; 89
    3520:	b0 e0       	ldi	r27, 0x00	; 0
    3522:	e9 e5       	ldi	r30, 0x59	; 89
    3524:	f0 e0       	ldi	r31, 0x00	; 0
    3526:	80 81       	ld	r24, Z
    3528:	84 60       	ori	r24, 0x04	; 4
    352a:	8c 93       	st	X, r24
    352c:	32 c0       	rjmp	.+100    	; 0x3592 <Gpt_EnableNotification+0x16a>
            // TODO
        }
        else if (mode == GPT_MODE_CTC)
    352e:	8a 81       	ldd	r24, Y+2	; 0x02
    3530:	81 30       	cpi	r24, 0x01	; 1
    3532:	79 f5       	brne	.+94     	; 0x3592 <Gpt_EnableNotification+0x16a>
        {
            Gpt_Timer1B_Callback_Ctc = callback;
    3534:	8b 81       	ldd	r24, Y+3	; 0x03
    3536:	9c 81       	ldd	r25, Y+4	; 0x04
    3538:	90 93 7f 01 	sts	0x017F, r25
    353c:	80 93 7e 01 	sts	0x017E, r24
            SET_BIT(TIMSK, TIMSK_OCIE1B);
    3540:	a9 e5       	ldi	r26, 0x59	; 89
    3542:	b0 e0       	ldi	r27, 0x00	; 0
    3544:	e9 e5       	ldi	r30, 0x59	; 89
    3546:	f0 e0       	ldi	r31, 0x00	; 0
    3548:	80 81       	ld	r24, Z
    354a:	88 60       	ori	r24, 0x08	; 8
    354c:	8c 93       	st	X, r24
    354e:	21 c0       	rjmp	.+66     	; 0x3592 <Gpt_EnableNotification+0x16a>
            // TODO
        }
        break;

    case GPT_CHANNEL_TIMER2:
        if (mode == GPT_MODE_NORMAL)
    3550:	8a 81       	ldd	r24, Y+2	; 0x02
    3552:	88 23       	and	r24, r24
    3554:	71 f4       	brne	.+28     	; 0x3572 <Gpt_EnableNotification+0x14a>
        {
            Gpt_Timer2_Callback_Normal = callback;
    3556:	8b 81       	ldd	r24, Y+3	; 0x03
    3558:	9c 81       	ldd	r25, Y+4	; 0x04
    355a:	90 93 81 01 	sts	0x0181, r25
    355e:	80 93 80 01 	sts	0x0180, r24
            SET_BIT(TIMSK, TIMSK_TOIE2);
    3562:	a9 e5       	ldi	r26, 0x59	; 89
    3564:	b0 e0       	ldi	r27, 0x00	; 0
    3566:	e9 e5       	ldi	r30, 0x59	; 89
    3568:	f0 e0       	ldi	r31, 0x00	; 0
    356a:	80 81       	ld	r24, Z
    356c:	80 64       	ori	r24, 0x40	; 64
    356e:	8c 93       	st	X, r24
    3570:	10 c0       	rjmp	.+32     	; 0x3592 <Gpt_EnableNotification+0x16a>
            // TODO
        }
        else if (mode == GPT_MODE_CTC)
    3572:	8a 81       	ldd	r24, Y+2	; 0x02
    3574:	81 30       	cpi	r24, 0x01	; 1
    3576:	69 f4       	brne	.+26     	; 0x3592 <Gpt_EnableNotification+0x16a>
        {
            Gpt_Timer2_Callback_Ctc = callback;
    3578:	8b 81       	ldd	r24, Y+3	; 0x03
    357a:	9c 81       	ldd	r25, Y+4	; 0x04
    357c:	90 93 7d 01 	sts	0x017D, r25
    3580:	80 93 7c 01 	sts	0x017C, r24
            SET_BIT(TIMSK, TIMSK_OCIE2);
    3584:	a9 e5       	ldi	r26, 0x59	; 89
    3586:	b0 e0       	ldi	r27, 0x00	; 0
    3588:	e9 e5       	ldi	r30, 0x59	; 89
    358a:	f0 e0       	ldi	r31, 0x00	; 0
    358c:	80 81       	ld	r24, Z
    358e:	80 68       	ori	r24, 0x80	; 128
    3590:	8c 93       	st	X, r24
        break;

    default:
        break;
    }
}
    3592:	26 96       	adiw	r28, 0x06	; 6
    3594:	0f b6       	in	r0, 0x3f	; 63
    3596:	f8 94       	cli
    3598:	de bf       	out	0x3e, r29	; 62
    359a:	0f be       	out	0x3f, r0	; 63
    359c:	cd bf       	out	0x3d, r28	; 61
    359e:	cf 91       	pop	r28
    35a0:	df 91       	pop	r29
    35a2:	08 95       	ret

000035a4 <Gpt_DisableNotification>:

void Gpt_DisableNotification(Gpt_ChannelType channel, Gpt_ModeType mode)
{
    35a4:	df 93       	push	r29
    35a6:	cf 93       	push	r28
    35a8:	00 d0       	rcall	.+0      	; 0x35aa <Gpt_DisableNotification+0x6>
    35aa:	00 d0       	rcall	.+0      	; 0x35ac <Gpt_DisableNotification+0x8>
    35ac:	cd b7       	in	r28, 0x3d	; 61
    35ae:	de b7       	in	r29, 0x3e	; 62
    35b0:	89 83       	std	Y+1, r24	; 0x01
    35b2:	6a 83       	std	Y+2, r22	; 0x02
    switch (channel)
    35b4:	89 81       	ldd	r24, Y+1	; 0x01
    35b6:	28 2f       	mov	r18, r24
    35b8:	30 e0       	ldi	r19, 0x00	; 0
    35ba:	3c 83       	std	Y+4, r19	; 0x04
    35bc:	2b 83       	std	Y+3, r18	; 0x03
    35be:	8b 81       	ldd	r24, Y+3	; 0x03
    35c0:	9c 81       	ldd	r25, Y+4	; 0x04
    35c2:	81 30       	cpi	r24, 0x01	; 1
    35c4:	91 05       	cpc	r25, r1
    35c6:	69 f1       	breq	.+90     	; 0x3622 <Gpt_DisableNotification+0x7e>
    35c8:	2b 81       	ldd	r18, Y+3	; 0x03
    35ca:	3c 81       	ldd	r19, Y+4	; 0x04
    35cc:	22 30       	cpi	r18, 0x02	; 2
    35ce:	31 05       	cpc	r19, r1
    35d0:	2c f4       	brge	.+10     	; 0x35dc <Gpt_DisableNotification+0x38>
    35d2:	8b 81       	ldd	r24, Y+3	; 0x03
    35d4:	9c 81       	ldd	r25, Y+4	; 0x04
    35d6:	00 97       	sbiw	r24, 0x00	; 0
    35d8:	69 f0       	breq	.+26     	; 0x35f4 <Gpt_DisableNotification+0x50>
    35da:	64 c0       	rjmp	.+200    	; 0x36a4 <Gpt_DisableNotification+0x100>
    35dc:	2b 81       	ldd	r18, Y+3	; 0x03
    35de:	3c 81       	ldd	r19, Y+4	; 0x04
    35e0:	22 30       	cpi	r18, 0x02	; 2
    35e2:	31 05       	cpc	r19, r1
    35e4:	a1 f1       	breq	.+104    	; 0x364e <Gpt_DisableNotification+0xaa>
    35e6:	8b 81       	ldd	r24, Y+3	; 0x03
    35e8:	9c 81       	ldd	r25, Y+4	; 0x04
    35ea:	83 30       	cpi	r24, 0x03	; 3
    35ec:	91 05       	cpc	r25, r1
    35ee:	09 f4       	brne	.+2      	; 0x35f2 <Gpt_DisableNotification+0x4e>
    35f0:	44 c0       	rjmp	.+136    	; 0x367a <Gpt_DisableNotification+0xd6>
    35f2:	58 c0       	rjmp	.+176    	; 0x36a4 <Gpt_DisableNotification+0x100>
    {
    case GPT_CHANNEL_TIMER0:
        if (mode == GPT_MODE_NORMAL)
    35f4:	8a 81       	ldd	r24, Y+2	; 0x02
    35f6:	88 23       	and	r24, r24
    35f8:	41 f4       	brne	.+16     	; 0x360a <Gpt_DisableNotification+0x66>
        {
            CLR_BIT(TIMSK, TIMSK_TOIE0);
    35fa:	a9 e5       	ldi	r26, 0x59	; 89
    35fc:	b0 e0       	ldi	r27, 0x00	; 0
    35fe:	e9 e5       	ldi	r30, 0x59	; 89
    3600:	f0 e0       	ldi	r31, 0x00	; 0
    3602:	80 81       	ld	r24, Z
    3604:	8e 7f       	andi	r24, 0xFE	; 254
    3606:	8c 93       	st	X, r24
    3608:	4d c0       	rjmp	.+154    	; 0x36a4 <Gpt_DisableNotification+0x100>
        }
        else if (mode == GPT_MODE_CTC)
    360a:	8a 81       	ldd	r24, Y+2	; 0x02
    360c:	81 30       	cpi	r24, 0x01	; 1
    360e:	09 f0       	breq	.+2      	; 0x3612 <Gpt_DisableNotification+0x6e>
    3610:	49 c0       	rjmp	.+146    	; 0x36a4 <Gpt_DisableNotification+0x100>
        {
            CLR_BIT(TIMSK, TIMSK_OCIE0);
    3612:	a9 e5       	ldi	r26, 0x59	; 89
    3614:	b0 e0       	ldi	r27, 0x00	; 0
    3616:	e9 e5       	ldi	r30, 0x59	; 89
    3618:	f0 e0       	ldi	r31, 0x00	; 0
    361a:	80 81       	ld	r24, Z
    361c:	8d 7f       	andi	r24, 0xFD	; 253
    361e:	8c 93       	st	X, r24
    3620:	41 c0       	rjmp	.+130    	; 0x36a4 <Gpt_DisableNotification+0x100>
        }
        break;

    case GPT_CHANNEL_TIMER1A:
        if (mode == GPT_MODE_NORMAL)
    3622:	8a 81       	ldd	r24, Y+2	; 0x02
    3624:	88 23       	and	r24, r24
    3626:	41 f4       	brne	.+16     	; 0x3638 <Gpt_DisableNotification+0x94>
        {
            CLR_BIT(TIMSK, TIMSK_TOIE1);
    3628:	a9 e5       	ldi	r26, 0x59	; 89
    362a:	b0 e0       	ldi	r27, 0x00	; 0
    362c:	e9 e5       	ldi	r30, 0x59	; 89
    362e:	f0 e0       	ldi	r31, 0x00	; 0
    3630:	80 81       	ld	r24, Z
    3632:	8b 7f       	andi	r24, 0xFB	; 251
    3634:	8c 93       	st	X, r24
    3636:	36 c0       	rjmp	.+108    	; 0x36a4 <Gpt_DisableNotification+0x100>
            // TODO
        }
        else if (mode == GPT_MODE_CTC)
    3638:	8a 81       	ldd	r24, Y+2	; 0x02
    363a:	81 30       	cpi	r24, 0x01	; 1
    363c:	99 f5       	brne	.+102    	; 0x36a4 <Gpt_DisableNotification+0x100>
        {
            CLR_BIT(TIMSK, TIMSK_OCIE1A);
    363e:	a9 e5       	ldi	r26, 0x59	; 89
    3640:	b0 e0       	ldi	r27, 0x00	; 0
    3642:	e9 e5       	ldi	r30, 0x59	; 89
    3644:	f0 e0       	ldi	r31, 0x00	; 0
    3646:	80 81       	ld	r24, Z
    3648:	8f 7e       	andi	r24, 0xEF	; 239
    364a:	8c 93       	st	X, r24
    364c:	2b c0       	rjmp	.+86     	; 0x36a4 <Gpt_DisableNotification+0x100>
            // TODO
        }
        break;

    case GPT_CHANNEL_TIMER1B:
        if (mode == GPT_MODE_NORMAL)
    364e:	8a 81       	ldd	r24, Y+2	; 0x02
    3650:	88 23       	and	r24, r24
    3652:	41 f4       	brne	.+16     	; 0x3664 <Gpt_DisableNotification+0xc0>
        {
            CLR_BIT(TIMSK, TIMSK_TOIE1);
    3654:	a9 e5       	ldi	r26, 0x59	; 89
    3656:	b0 e0       	ldi	r27, 0x00	; 0
    3658:	e9 e5       	ldi	r30, 0x59	; 89
    365a:	f0 e0       	ldi	r31, 0x00	; 0
    365c:	80 81       	ld	r24, Z
    365e:	8b 7f       	andi	r24, 0xFB	; 251
    3660:	8c 93       	st	X, r24
    3662:	20 c0       	rjmp	.+64     	; 0x36a4 <Gpt_DisableNotification+0x100>
            // TODO
        }
        else if (mode == GPT_MODE_CTC)
    3664:	8a 81       	ldd	r24, Y+2	; 0x02
    3666:	81 30       	cpi	r24, 0x01	; 1
    3668:	e9 f4       	brne	.+58     	; 0x36a4 <Gpt_DisableNotification+0x100>
        {
            CLR_BIT(TIMSK, TIMSK_OCIE1B);
    366a:	a9 e5       	ldi	r26, 0x59	; 89
    366c:	b0 e0       	ldi	r27, 0x00	; 0
    366e:	e9 e5       	ldi	r30, 0x59	; 89
    3670:	f0 e0       	ldi	r31, 0x00	; 0
    3672:	80 81       	ld	r24, Z
    3674:	87 7f       	andi	r24, 0xF7	; 247
    3676:	8c 93       	st	X, r24
    3678:	15 c0       	rjmp	.+42     	; 0x36a4 <Gpt_DisableNotification+0x100>
            // TODO
        }
        break;

    case GPT_CHANNEL_TIMER2:
        if (mode == GPT_MODE_NORMAL)
    367a:	8a 81       	ldd	r24, Y+2	; 0x02
    367c:	88 23       	and	r24, r24
    367e:	41 f4       	brne	.+16     	; 0x3690 <Gpt_DisableNotification+0xec>
        {
            CLR_BIT(TIMSK, TIMSK_TOIE2);
    3680:	a9 e5       	ldi	r26, 0x59	; 89
    3682:	b0 e0       	ldi	r27, 0x00	; 0
    3684:	e9 e5       	ldi	r30, 0x59	; 89
    3686:	f0 e0       	ldi	r31, 0x00	; 0
    3688:	80 81       	ld	r24, Z
    368a:	8f 7b       	andi	r24, 0xBF	; 191
    368c:	8c 93       	st	X, r24
    368e:	0a c0       	rjmp	.+20     	; 0x36a4 <Gpt_DisableNotification+0x100>
            // TODO
        }
        else if (mode == GPT_MODE_CTC)
    3690:	8a 81       	ldd	r24, Y+2	; 0x02
    3692:	81 30       	cpi	r24, 0x01	; 1
    3694:	39 f4       	brne	.+14     	; 0x36a4 <Gpt_DisableNotification+0x100>
        {
            CLR_BIT(TIMSK, TIMSK_OCIE2);
    3696:	a9 e5       	ldi	r26, 0x59	; 89
    3698:	b0 e0       	ldi	r27, 0x00	; 0
    369a:	e9 e5       	ldi	r30, 0x59	; 89
    369c:	f0 e0       	ldi	r31, 0x00	; 0
    369e:	80 81       	ld	r24, Z
    36a0:	8f 77       	andi	r24, 0x7F	; 127
    36a2:	8c 93       	st	X, r24
        break;

    default:
        break;
    }
}
    36a4:	0f 90       	pop	r0
    36a6:	0f 90       	pop	r0
    36a8:	0f 90       	pop	r0
    36aa:	0f 90       	pop	r0
    36ac:	cf 91       	pop	r28
    36ae:	df 91       	pop	r29
    36b0:	08 95       	ret

000036b2 <servo>:


void servo(u8 angle){
    36b2:	df 93       	push	r29
    36b4:	cf 93       	push	r28
    36b6:	00 d0       	rcall	.+0      	; 0x36b8 <servo+0x6>
    36b8:	00 d0       	rcall	.+0      	; 0x36ba <servo+0x8>
    36ba:	0f 92       	push	r0
    36bc:	cd b7       	in	r28, 0x3d	; 61
    36be:	de b7       	in	r29, 0x3e	; 62
    36c0:	8d 83       	std	Y+5, r24	; 0x05
    Gpt_ConfigType config = {GPT_CHANNEL_TIMER1A, SPT_MODE_Fast_PWM_mod14, GPT_OUTPUT_CLEAR, GPT_PRESCALER_8};
    36c2:	81 e0       	ldi	r24, 0x01	; 1
    36c4:	89 83       	std	Y+1, r24	; 0x01
    36c6:	84 e0       	ldi	r24, 0x04	; 4
    36c8:	8a 83       	std	Y+2, r24	; 0x02
    36ca:	83 e0       	ldi	r24, 0x03	; 3
    36cc:	8b 83       	std	Y+3, r24	; 0x03
    36ce:	82 e0       	ldi	r24, 0x02	; 2
    36d0:	8c 83       	std	Y+4, r24	; 0x04

    // CLR_BIT(TCCR1A,TCCR1A_WGM10);
    // SET_BIT(TCCR1A,TCCR1A_WGM11);
    // SET_BIT(TCCR1B,TCCR1B_WGM12);
    // SET_BIT(TCCR1B,TCCR1B_WGM13);
    Gpt_Init(&config);
    36d2:	ce 01       	movw	r24, r28
    36d4:	01 96       	adiw	r24, 0x01	; 1
    36d6:	0e 94 ed 11 	call	0x23da	; 0x23da <Gpt_Init>
    ICR1_LH=0x0000;
    36da:	e6 e4       	ldi	r30, 0x46	; 70
    36dc:	f0 e0       	ldi	r31, 0x00	; 0
    36de:	11 82       	std	Z+1, r1	; 0x01
    36e0:	10 82       	st	Z, r1
    ICR1_LH=20000*8;
    36e2:	e6 e4       	ldi	r30, 0x46	; 70
    36e4:	f0 e0       	ldi	r31, 0x00	; 0
    36e6:	80 e0       	ldi	r24, 0x00	; 0
    36e8:	91 e7       	ldi	r25, 0x71	; 113
    36ea:	91 83       	std	Z+1, r25	; 0x01
    36ec:	80 83       	st	Z, r24
    OCR1BHL_DATA_REGISTER=20000;
    36ee:	e8 e4       	ldi	r30, 0x48	; 72
    36f0:	f0 e0       	ldi	r31, 0x00	; 0
    36f2:	80 e2       	ldi	r24, 0x20	; 32
    36f4:	9e e4       	ldi	r25, 0x4E	; 78
    36f6:	91 83       	std	Z+1, r25	; 0x01
    36f8:	80 83       	st	Z, r24
    OCR1AHL_DATA_REGISTER=0x0000;
    36fa:	ea e4       	ldi	r30, 0x4A	; 74
    36fc:	f0 e0       	ldi	r31, 0x00	; 0
    36fe:	11 82       	std	Z+1, r1	; 0x01
    3700:	10 82       	st	Z, r1
    OCR1AHL_DATA_REGISTER=((90 *1000)/180 +1000);
    3702:	ea e4       	ldi	r30, 0x4A	; 74
    3704:	f0 e0       	ldi	r31, 0x00	; 0
    3706:	8f e6       	ldi	r24, 0x6F	; 111
    3708:	94 e0       	ldi	r25, 0x04	; 4
    370a:	91 83       	std	Z+1, r25	; 0x01
    370c:	80 83       	st	Z, r24
    // OCR1AHL_DATA_REGISTER=2000;

   
    
}
    370e:	0f 90       	pop	r0
    3710:	0f 90       	pop	r0
    3712:	0f 90       	pop	r0
    3714:	0f 90       	pop	r0
    3716:	0f 90       	pop	r0
    3718:	cf 91       	pop	r28
    371a:	df 91       	pop	r29
    371c:	08 95       	ret

0000371e <Keypad_Init>:
#include "std_types.h"
#include "macros.h"
#include "DIO.h"
#include "Keypad.h"

void Keypad_Init(void) {
    371e:	df 93       	push	r29
    3720:	cf 93       	push	r28
    3722:	cd b7       	in	r28, 0x3d	; 61
    3724:	de b7       	in	r29, 0x3e	; 62
    /* Set all rows to input pullup */
    DIO_SetPinMode(KEYPAD_PIN_R0, DIO_INPUT_PULLUP);
    3726:	83 e0       	ldi	r24, 0x03	; 3
    3728:	60 e0       	ldi	r22, 0x00	; 0
    372a:	41 e0       	ldi	r20, 0x01	; 1
    372c:	0e 94 e3 09 	call	0x13c6	; 0x13c6 <DIO_SetPinMode>
    DIO_SetPinMode(KEYPAD_PIN_R1, DIO_INPUT_PULLUP);
    3730:	83 e0       	ldi	r24, 0x03	; 3
    3732:	61 e0       	ldi	r22, 0x01	; 1
    3734:	41 e0       	ldi	r20, 0x01	; 1
    3736:	0e 94 e3 09 	call	0x13c6	; 0x13c6 <DIO_SetPinMode>
    DIO_SetPinMode(KEYPAD_PIN_R2, DIO_INPUT_PULLUP);
    373a:	83 e0       	ldi	r24, 0x03	; 3
    373c:	62 e0       	ldi	r22, 0x02	; 2
    373e:	41 e0       	ldi	r20, 0x01	; 1
    3740:	0e 94 e3 09 	call	0x13c6	; 0x13c6 <DIO_SetPinMode>
    DIO_SetPinMode(KEYPAD_PIN_R3, DIO_INPUT_PULLUP);
    3744:	83 e0       	ldi	r24, 0x03	; 3
    3746:	63 e0       	ldi	r22, 0x03	; 3
    3748:	41 e0       	ldi	r20, 0x01	; 1
    374a:	0e 94 e3 09 	call	0x13c6	; 0x13c6 <DIO_SetPinMode>
    /* Set all columns to output */
    DIO_SetPinMode(KEYPAD_PIN_C0, DIO_OUTPUT);
    374e:	83 e0       	ldi	r24, 0x03	; 3
    3750:	64 e0       	ldi	r22, 0x04	; 4
    3752:	42 e0       	ldi	r20, 0x02	; 2
    3754:	0e 94 e3 09 	call	0x13c6	; 0x13c6 <DIO_SetPinMode>
    DIO_SetPinMode(KEYPAD_PIN_C1, DIO_OUTPUT);
    3758:	83 e0       	ldi	r24, 0x03	; 3
    375a:	65 e0       	ldi	r22, 0x05	; 5
    375c:	42 e0       	ldi	r20, 0x02	; 2
    375e:	0e 94 e3 09 	call	0x13c6	; 0x13c6 <DIO_SetPinMode>
    DIO_SetPinMode(KEYPAD_PIN_C2, DIO_OUTPUT);
    3762:	83 e0       	ldi	r24, 0x03	; 3
    3764:	66 e0       	ldi	r22, 0x06	; 6
    3766:	42 e0       	ldi	r20, 0x02	; 2
    3768:	0e 94 e3 09 	call	0x13c6	; 0x13c6 <DIO_SetPinMode>
    DIO_SetPinMode(KEYPAD_PIN_C3, DIO_OUTPUT);
    376c:	83 e0       	ldi	r24, 0x03	; 3
    376e:	67 e0       	ldi	r22, 0x07	; 7
    3770:	42 e0       	ldi	r20, 0x02	; 2
    3772:	0e 94 e3 09 	call	0x13c6	; 0x13c6 <DIO_SetPinMode>
}
    3776:	cf 91       	pop	r28
    3778:	df 91       	pop	r29
    377a:	08 95       	ret

0000377c <Keypad_GetButtonState>:
	low  -> Pressed

*/


Keypad_StateType Keypad_GetButtonState(Keypad_ButtonType button) {
    377c:	df 93       	push	r29
    377e:	cf 93       	push	r28
    3780:	cd b7       	in	r28, 0x3d	; 61
    3782:	de b7       	in	r29, 0x3e	; 62
    3784:	28 97       	sbiw	r28, 0x08	; 8
    3786:	0f b6       	in	r0, 0x3f	; 63
    3788:	f8 94       	cli
    378a:	de bf       	out	0x3e, r29	; 62
    378c:	0f be       	out	0x3f, r0	; 63
    378e:	cd bf       	out	0x3d, r28	; 61
    3790:	8c 83       	std	Y+4, r24	; 0x04
    Keypad_StateType state = KEYPAD_STATE_NOT_PRESSED;
    3792:	81 e0       	ldi	r24, 0x01	; 1
    3794:	8b 83       	std	Y+3, r24	; 0x03
    u8 row = button / 4;
    3796:	8c 81       	ldd	r24, Y+4	; 0x04
    3798:	86 95       	lsr	r24
    379a:	86 95       	lsr	r24
    379c:	8a 83       	std	Y+2, r24	; 0x02
    u8 column = button % 4;
    379e:	8c 81       	ldd	r24, Y+4	; 0x04
    37a0:	83 70       	andi	r24, 0x03	; 3
    37a2:	89 83       	std	Y+1, r24	; 0x01
    DIO_SetPinLevel(KEYPAD_PIN_C0, DIO_HIGH);
    37a4:	83 e0       	ldi	r24, 0x03	; 3
    37a6:	64 e0       	ldi	r22, 0x04	; 4
    37a8:	41 e0       	ldi	r20, 0x01	; 1
    37aa:	0e 94 f1 0c 	call	0x19e2	; 0x19e2 <DIO_SetPinLevel>
    DIO_SetPinLevel(KEYPAD_PIN_C1, DIO_HIGH);
    37ae:	83 e0       	ldi	r24, 0x03	; 3
    37b0:	65 e0       	ldi	r22, 0x05	; 5
    37b2:	41 e0       	ldi	r20, 0x01	; 1
    37b4:	0e 94 f1 0c 	call	0x19e2	; 0x19e2 <DIO_SetPinLevel>
    DIO_SetPinLevel(KEYPAD_PIN_C2, DIO_HIGH);
    37b8:	83 e0       	ldi	r24, 0x03	; 3
    37ba:	66 e0       	ldi	r22, 0x06	; 6
    37bc:	41 e0       	ldi	r20, 0x01	; 1
    37be:	0e 94 f1 0c 	call	0x19e2	; 0x19e2 <DIO_SetPinLevel>
    DIO_SetPinLevel(KEYPAD_PIN_C3, DIO_HIGH);
    37c2:	83 e0       	ldi	r24, 0x03	; 3
    37c4:	67 e0       	ldi	r22, 0x07	; 7
    37c6:	41 e0       	ldi	r20, 0x01	; 1
    37c8:	0e 94 f1 0c 	call	0x19e2	; 0x19e2 <DIO_SetPinLevel>
    switch (column)
    37cc:	89 81       	ldd	r24, Y+1	; 0x01
    37ce:	28 2f       	mov	r18, r24
    37d0:	30 e0       	ldi	r19, 0x00	; 0
    37d2:	38 87       	std	Y+8, r19	; 0x08
    37d4:	2f 83       	std	Y+7, r18	; 0x07
    37d6:	8f 81       	ldd	r24, Y+7	; 0x07
    37d8:	98 85       	ldd	r25, Y+8	; 0x08
    37da:	81 30       	cpi	r24, 0x01	; 1
    37dc:	91 05       	cpc	r25, r1
    37de:	d9 f0       	breq	.+54     	; 0x3816 <Keypad_GetButtonState+0x9a>
    37e0:	2f 81       	ldd	r18, Y+7	; 0x07
    37e2:	38 85       	ldd	r19, Y+8	; 0x08
    37e4:	22 30       	cpi	r18, 0x02	; 2
    37e6:	31 05       	cpc	r19, r1
    37e8:	2c f4       	brge	.+10     	; 0x37f4 <Keypad_GetButtonState+0x78>
    37ea:	8f 81       	ldd	r24, Y+7	; 0x07
    37ec:	98 85       	ldd	r25, Y+8	; 0x08
    37ee:	00 97       	sbiw	r24, 0x00	; 0
    37f0:	61 f0       	breq	.+24     	; 0x380a <Keypad_GetButtonState+0x8e>
    37f2:	22 c0       	rjmp	.+68     	; 0x3838 <Keypad_GetButtonState+0xbc>
    37f4:	2f 81       	ldd	r18, Y+7	; 0x07
    37f6:	38 85       	ldd	r19, Y+8	; 0x08
    37f8:	22 30       	cpi	r18, 0x02	; 2
    37fa:	31 05       	cpc	r19, r1
    37fc:	91 f0       	breq	.+36     	; 0x3822 <Keypad_GetButtonState+0xa6>
    37fe:	8f 81       	ldd	r24, Y+7	; 0x07
    3800:	98 85       	ldd	r25, Y+8	; 0x08
    3802:	83 30       	cpi	r24, 0x03	; 3
    3804:	91 05       	cpc	r25, r1
    3806:	99 f0       	breq	.+38     	; 0x382e <Keypad_GetButtonState+0xb2>
    3808:	17 c0       	rjmp	.+46     	; 0x3838 <Keypad_GetButtonState+0xbc>
    {
    case 0:
        DIO_SetPinLevel(KEYPAD_PIN_C0, DIO_LOW);
    380a:	83 e0       	ldi	r24, 0x03	; 3
    380c:	64 e0       	ldi	r22, 0x04	; 4
    380e:	40 e0       	ldi	r20, 0x00	; 0
    3810:	0e 94 f1 0c 	call	0x19e2	; 0x19e2 <DIO_SetPinLevel>
    3814:	11 c0       	rjmp	.+34     	; 0x3838 <Keypad_GetButtonState+0xbc>
        break;
    case 1:
        DIO_SetPinLevel(KEYPAD_PIN_C1, DIO_LOW);
    3816:	83 e0       	ldi	r24, 0x03	; 3
    3818:	65 e0       	ldi	r22, 0x05	; 5
    381a:	40 e0       	ldi	r20, 0x00	; 0
    381c:	0e 94 f1 0c 	call	0x19e2	; 0x19e2 <DIO_SetPinLevel>
    3820:	0b c0       	rjmp	.+22     	; 0x3838 <Keypad_GetButtonState+0xbc>
        break;
    case 2:
        DIO_SetPinLevel(KEYPAD_PIN_C2, DIO_LOW);
    3822:	83 e0       	ldi	r24, 0x03	; 3
    3824:	66 e0       	ldi	r22, 0x06	; 6
    3826:	40 e0       	ldi	r20, 0x00	; 0
    3828:	0e 94 f1 0c 	call	0x19e2	; 0x19e2 <DIO_SetPinLevel>
    382c:	05 c0       	rjmp	.+10     	; 0x3838 <Keypad_GetButtonState+0xbc>
        break;
    case 3:
        DIO_SetPinLevel(KEYPAD_PIN_C3, DIO_LOW);
    382e:	83 e0       	ldi	r24, 0x03	; 3
    3830:	67 e0       	ldi	r22, 0x07	; 7
    3832:	40 e0       	ldi	r20, 0x00	; 0
    3834:	0e 94 f1 0c 	call	0x19e2	; 0x19e2 <DIO_SetPinLevel>
        break;
    default:
        break;
    }
    switch (row)
    3838:	8a 81       	ldd	r24, Y+2	; 0x02
    383a:	28 2f       	mov	r18, r24
    383c:	30 e0       	ldi	r19, 0x00	; 0
    383e:	3e 83       	std	Y+6, r19	; 0x06
    3840:	2d 83       	std	Y+5, r18	; 0x05
    3842:	8d 81       	ldd	r24, Y+5	; 0x05
    3844:	9e 81       	ldd	r25, Y+6	; 0x06
    3846:	81 30       	cpi	r24, 0x01	; 1
    3848:	91 05       	cpc	r25, r1
    384a:	e9 f0       	breq	.+58     	; 0x3886 <Keypad_GetButtonState+0x10a>
    384c:	2d 81       	ldd	r18, Y+5	; 0x05
    384e:	3e 81       	ldd	r19, Y+6	; 0x06
    3850:	22 30       	cpi	r18, 0x02	; 2
    3852:	31 05       	cpc	r19, r1
    3854:	2c f4       	brge	.+10     	; 0x3860 <Keypad_GetButtonState+0xe4>
    3856:	8d 81       	ldd	r24, Y+5	; 0x05
    3858:	9e 81       	ldd	r25, Y+6	; 0x06
    385a:	00 97       	sbiw	r24, 0x00	; 0
    385c:	61 f0       	breq	.+24     	; 0x3876 <Keypad_GetButtonState+0xfa>
    385e:	2a c0       	rjmp	.+84     	; 0x38b4 <Keypad_GetButtonState+0x138>
    3860:	2d 81       	ldd	r18, Y+5	; 0x05
    3862:	3e 81       	ldd	r19, Y+6	; 0x06
    3864:	22 30       	cpi	r18, 0x02	; 2
    3866:	31 05       	cpc	r19, r1
    3868:	b1 f0       	breq	.+44     	; 0x3896 <Keypad_GetButtonState+0x11a>
    386a:	8d 81       	ldd	r24, Y+5	; 0x05
    386c:	9e 81       	ldd	r25, Y+6	; 0x06
    386e:	83 30       	cpi	r24, 0x03	; 3
    3870:	91 05       	cpc	r25, r1
    3872:	c9 f0       	breq	.+50     	; 0x38a6 <Keypad_GetButtonState+0x12a>
    3874:	1f c0       	rjmp	.+62     	; 0x38b4 <Keypad_GetButtonState+0x138>
    {
    case 0:
        if (DIO_ReadPinLevel(KEYPAD_PIN_R0) == DIO_LOW) {
    3876:	83 e0       	ldi	r24, 0x03	; 3
    3878:	60 e0       	ldi	r22, 0x00	; 0
    387a:	0e 94 a0 0e 	call	0x1d40	; 0x1d40 <DIO_ReadPinLevel>
    387e:	88 23       	and	r24, r24
    3880:	c9 f4       	brne	.+50     	; 0x38b4 <Keypad_GetButtonState+0x138>
            state = KEYPAD_STATE_PRESSED;
    3882:	1b 82       	std	Y+3, r1	; 0x03
    3884:	17 c0       	rjmp	.+46     	; 0x38b4 <Keypad_GetButtonState+0x138>
        }
        break;
    case 1:
        if (DIO_ReadPinLevel(KEYPAD_PIN_R1) == DIO_LOW) {
    3886:	83 e0       	ldi	r24, 0x03	; 3
    3888:	61 e0       	ldi	r22, 0x01	; 1
    388a:	0e 94 a0 0e 	call	0x1d40	; 0x1d40 <DIO_ReadPinLevel>
    388e:	88 23       	and	r24, r24
    3890:	89 f4       	brne	.+34     	; 0x38b4 <Keypad_GetButtonState+0x138>
            state = KEYPAD_STATE_PRESSED;
    3892:	1b 82       	std	Y+3, r1	; 0x03
    3894:	0f c0       	rjmp	.+30     	; 0x38b4 <Keypad_GetButtonState+0x138>
        }
        break;
    case 2:
        if (DIO_ReadPinLevel(KEYPAD_PIN_R2) == DIO_LOW) {
    3896:	83 e0       	ldi	r24, 0x03	; 3
    3898:	62 e0       	ldi	r22, 0x02	; 2
    389a:	0e 94 a0 0e 	call	0x1d40	; 0x1d40 <DIO_ReadPinLevel>
    389e:	88 23       	and	r24, r24
    38a0:	49 f4       	brne	.+18     	; 0x38b4 <Keypad_GetButtonState+0x138>
            state = KEYPAD_STATE_PRESSED;
    38a2:	1b 82       	std	Y+3, r1	; 0x03
    38a4:	07 c0       	rjmp	.+14     	; 0x38b4 <Keypad_GetButtonState+0x138>
        }
        break;
    case 3:
        if (DIO_ReadPinLevel(KEYPAD_PIN_R3) == DIO_LOW) {
    38a6:	83 e0       	ldi	r24, 0x03	; 3
    38a8:	63 e0       	ldi	r22, 0x03	; 3
    38aa:	0e 94 a0 0e 	call	0x1d40	; 0x1d40 <DIO_ReadPinLevel>
    38ae:	88 23       	and	r24, r24
    38b0:	09 f4       	brne	.+2      	; 0x38b4 <Keypad_GetButtonState+0x138>
            state = KEYPAD_STATE_PRESSED;
    38b2:	1b 82       	std	Y+3, r1	; 0x03
        }
        break;
    default:
        break;
    }
    return state;
    38b4:	8b 81       	ldd	r24, Y+3	; 0x03
}
    38b6:	28 96       	adiw	r28, 0x08	; 8
    38b8:	0f b6       	in	r0, 0x3f	; 63
    38ba:	f8 94       	cli
    38bc:	de bf       	out	0x3e, r29	; 62
    38be:	0f be       	out	0x3f, r0	; 63
    38c0:	cd bf       	out	0x3d, r28	; 61
    38c2:	cf 91       	pop	r28
    38c4:	df 91       	pop	r29
    38c6:	08 95       	ret

000038c8 <Keypad_GetButtonStatePooling>:

Keypad_StateType Keypad_GetButtonStatePooling(Keypad_ButtonType button) {
    38c8:	df 93       	push	r29
    38ca:	cf 93       	push	r28
    38cc:	cd b7       	in	r28, 0x3d	; 61
    38ce:	de b7       	in	r29, 0x3e	; 62
    38d0:	28 97       	sbiw	r28, 0x08	; 8
    38d2:	0f b6       	in	r0, 0x3f	; 63
    38d4:	f8 94       	cli
    38d6:	de bf       	out	0x3e, r29	; 62
    38d8:	0f be       	out	0x3f, r0	; 63
    38da:	cd bf       	out	0x3d, r28	; 61
    38dc:	8c 83       	std	Y+4, r24	; 0x04
    Keypad_StateType state = KEYPAD_STATE_NOT_PRESSED;
    38de:	81 e0       	ldi	r24, 0x01	; 1
    38e0:	8b 83       	std	Y+3, r24	; 0x03
    u8 row = button / 4;
    38e2:	8c 81       	ldd	r24, Y+4	; 0x04
    38e4:	86 95       	lsr	r24
    38e6:	86 95       	lsr	r24
    38e8:	8a 83       	std	Y+2, r24	; 0x02
    u8 column = button % 4;
    38ea:	8c 81       	ldd	r24, Y+4	; 0x04
    38ec:	83 70       	andi	r24, 0x03	; 3
    38ee:	89 83       	std	Y+1, r24	; 0x01
    DIO_SetPinLevel(KEYPAD_PIN_C0, DIO_HIGH);
    38f0:	83 e0       	ldi	r24, 0x03	; 3
    38f2:	64 e0       	ldi	r22, 0x04	; 4
    38f4:	41 e0       	ldi	r20, 0x01	; 1
    38f6:	0e 94 f1 0c 	call	0x19e2	; 0x19e2 <DIO_SetPinLevel>
    DIO_SetPinLevel(KEYPAD_PIN_C1, DIO_HIGH);
    38fa:	83 e0       	ldi	r24, 0x03	; 3
    38fc:	65 e0       	ldi	r22, 0x05	; 5
    38fe:	41 e0       	ldi	r20, 0x01	; 1
    3900:	0e 94 f1 0c 	call	0x19e2	; 0x19e2 <DIO_SetPinLevel>
    DIO_SetPinLevel(KEYPAD_PIN_C2, DIO_HIGH);
    3904:	83 e0       	ldi	r24, 0x03	; 3
    3906:	66 e0       	ldi	r22, 0x06	; 6
    3908:	41 e0       	ldi	r20, 0x01	; 1
    390a:	0e 94 f1 0c 	call	0x19e2	; 0x19e2 <DIO_SetPinLevel>
    DIO_SetPinLevel(KEYPAD_PIN_C3, DIO_HIGH);
    390e:	83 e0       	ldi	r24, 0x03	; 3
    3910:	67 e0       	ldi	r22, 0x07	; 7
    3912:	41 e0       	ldi	r20, 0x01	; 1
    3914:	0e 94 f1 0c 	call	0x19e2	; 0x19e2 <DIO_SetPinLevel>
    switch (column)
    3918:	89 81       	ldd	r24, Y+1	; 0x01
    391a:	28 2f       	mov	r18, r24
    391c:	30 e0       	ldi	r19, 0x00	; 0
    391e:	38 87       	std	Y+8, r19	; 0x08
    3920:	2f 83       	std	Y+7, r18	; 0x07
    3922:	8f 81       	ldd	r24, Y+7	; 0x07
    3924:	98 85       	ldd	r25, Y+8	; 0x08
    3926:	81 30       	cpi	r24, 0x01	; 1
    3928:	91 05       	cpc	r25, r1
    392a:	d9 f0       	breq	.+54     	; 0x3962 <Keypad_GetButtonStatePooling+0x9a>
    392c:	2f 81       	ldd	r18, Y+7	; 0x07
    392e:	38 85       	ldd	r19, Y+8	; 0x08
    3930:	22 30       	cpi	r18, 0x02	; 2
    3932:	31 05       	cpc	r19, r1
    3934:	2c f4       	brge	.+10     	; 0x3940 <Keypad_GetButtonStatePooling+0x78>
    3936:	8f 81       	ldd	r24, Y+7	; 0x07
    3938:	98 85       	ldd	r25, Y+8	; 0x08
    393a:	00 97       	sbiw	r24, 0x00	; 0
    393c:	61 f0       	breq	.+24     	; 0x3956 <Keypad_GetButtonStatePooling+0x8e>
    393e:	22 c0       	rjmp	.+68     	; 0x3984 <Keypad_GetButtonStatePooling+0xbc>
    3940:	2f 81       	ldd	r18, Y+7	; 0x07
    3942:	38 85       	ldd	r19, Y+8	; 0x08
    3944:	22 30       	cpi	r18, 0x02	; 2
    3946:	31 05       	cpc	r19, r1
    3948:	91 f0       	breq	.+36     	; 0x396e <Keypad_GetButtonStatePooling+0xa6>
    394a:	8f 81       	ldd	r24, Y+7	; 0x07
    394c:	98 85       	ldd	r25, Y+8	; 0x08
    394e:	83 30       	cpi	r24, 0x03	; 3
    3950:	91 05       	cpc	r25, r1
    3952:	99 f0       	breq	.+38     	; 0x397a <Keypad_GetButtonStatePooling+0xb2>
    3954:	17 c0       	rjmp	.+46     	; 0x3984 <Keypad_GetButtonStatePooling+0xbc>
    {
    case 0:
        DIO_SetPinLevel(KEYPAD_PIN_C0, DIO_LOW);
    3956:	83 e0       	ldi	r24, 0x03	; 3
    3958:	64 e0       	ldi	r22, 0x04	; 4
    395a:	40 e0       	ldi	r20, 0x00	; 0
    395c:	0e 94 f1 0c 	call	0x19e2	; 0x19e2 <DIO_SetPinLevel>
    3960:	11 c0       	rjmp	.+34     	; 0x3984 <Keypad_GetButtonStatePooling+0xbc>
        break;
    case 1:
        DIO_SetPinLevel(KEYPAD_PIN_C1, DIO_LOW);
    3962:	83 e0       	ldi	r24, 0x03	; 3
    3964:	65 e0       	ldi	r22, 0x05	; 5
    3966:	40 e0       	ldi	r20, 0x00	; 0
    3968:	0e 94 f1 0c 	call	0x19e2	; 0x19e2 <DIO_SetPinLevel>
    396c:	0b c0       	rjmp	.+22     	; 0x3984 <Keypad_GetButtonStatePooling+0xbc>
        break;
    case 2:
        DIO_SetPinLevel(KEYPAD_PIN_C2, DIO_LOW);
    396e:	83 e0       	ldi	r24, 0x03	; 3
    3970:	66 e0       	ldi	r22, 0x06	; 6
    3972:	40 e0       	ldi	r20, 0x00	; 0
    3974:	0e 94 f1 0c 	call	0x19e2	; 0x19e2 <DIO_SetPinLevel>
    3978:	05 c0       	rjmp	.+10     	; 0x3984 <Keypad_GetButtonStatePooling+0xbc>
        break;
    case 3:
        DIO_SetPinLevel(KEYPAD_PIN_C3, DIO_LOW);
    397a:	83 e0       	ldi	r24, 0x03	; 3
    397c:	67 e0       	ldi	r22, 0x07	; 7
    397e:	40 e0       	ldi	r20, 0x00	; 0
    3980:	0e 94 f1 0c 	call	0x19e2	; 0x19e2 <DIO_SetPinLevel>
        break;
    default:
        break;
    }
    switch (row)
    3984:	8a 81       	ldd	r24, Y+2	; 0x02
    3986:	28 2f       	mov	r18, r24
    3988:	30 e0       	ldi	r19, 0x00	; 0
    398a:	3e 83       	std	Y+6, r19	; 0x06
    398c:	2d 83       	std	Y+5, r18	; 0x05
    398e:	8d 81       	ldd	r24, Y+5	; 0x05
    3990:	9e 81       	ldd	r25, Y+6	; 0x06
    3992:	81 30       	cpi	r24, 0x01	; 1
    3994:	91 05       	cpc	r25, r1
    3996:	19 f1       	breq	.+70     	; 0x39de <Keypad_GetButtonStatePooling+0x116>
    3998:	2d 81       	ldd	r18, Y+5	; 0x05
    399a:	3e 81       	ldd	r19, Y+6	; 0x06
    399c:	22 30       	cpi	r18, 0x02	; 2
    399e:	31 05       	cpc	r19, r1
    39a0:	2c f4       	brge	.+10     	; 0x39ac <Keypad_GetButtonStatePooling+0xe4>
    39a2:	8d 81       	ldd	r24, Y+5	; 0x05
    39a4:	9e 81       	ldd	r25, Y+6	; 0x06
    39a6:	00 97       	sbiw	r24, 0x00	; 0
    39a8:	61 f0       	breq	.+24     	; 0x39c2 <Keypad_GetButtonStatePooling+0xfa>
    39aa:	42 c0       	rjmp	.+132    	; 0x3a30 <Keypad_GetButtonStatePooling+0x168>
    39ac:	2d 81       	ldd	r18, Y+5	; 0x05
    39ae:	3e 81       	ldd	r19, Y+6	; 0x06
    39b0:	22 30       	cpi	r18, 0x02	; 2
    39b2:	31 05       	cpc	r19, r1
    39b4:	11 f1       	breq	.+68     	; 0x39fa <Keypad_GetButtonStatePooling+0x132>
    39b6:	8d 81       	ldd	r24, Y+5	; 0x05
    39b8:	9e 81       	ldd	r25, Y+6	; 0x06
    39ba:	83 30       	cpi	r24, 0x03	; 3
    39bc:	91 05       	cpc	r25, r1
    39be:	59 f1       	breq	.+86     	; 0x3a16 <Keypad_GetButtonStatePooling+0x14e>
    39c0:	37 c0       	rjmp	.+110    	; 0x3a30 <Keypad_GetButtonStatePooling+0x168>
    {
    case 0:
        if (DIO_ReadPinLevel(KEYPAD_PIN_R0) == DIO_LOW) {
    39c2:	83 e0       	ldi	r24, 0x03	; 3
    39c4:	60 e0       	ldi	r22, 0x00	; 0
    39c6:	0e 94 a0 0e 	call	0x1d40	; 0x1d40 <DIO_ReadPinLevel>
    39ca:	88 23       	and	r24, r24
    39cc:	89 f5       	brne	.+98     	; 0x3a30 <Keypad_GetButtonStatePooling+0x168>
            state = KEYPAD_STATE_PRESSED;
    39ce:	1b 82       	std	Y+3, r1	; 0x03
            while (DIO_ReadPinLevel(KEYPAD_PIN_R0) == DIO_LOW);
    39d0:	83 e0       	ldi	r24, 0x03	; 3
    39d2:	60 e0       	ldi	r22, 0x00	; 0
    39d4:	0e 94 a0 0e 	call	0x1d40	; 0x1d40 <DIO_ReadPinLevel>
    39d8:	88 23       	and	r24, r24
    39da:	d1 f3       	breq	.-12     	; 0x39d0 <Keypad_GetButtonStatePooling+0x108>
    39dc:	29 c0       	rjmp	.+82     	; 0x3a30 <Keypad_GetButtonStatePooling+0x168>
        }
        break;
    case 1:
        if (DIO_ReadPinLevel(KEYPAD_PIN_R1) == DIO_LOW) {
    39de:	83 e0       	ldi	r24, 0x03	; 3
    39e0:	61 e0       	ldi	r22, 0x01	; 1
    39e2:	0e 94 a0 0e 	call	0x1d40	; 0x1d40 <DIO_ReadPinLevel>
    39e6:	88 23       	and	r24, r24
    39e8:	19 f5       	brne	.+70     	; 0x3a30 <Keypad_GetButtonStatePooling+0x168>
            state = KEYPAD_STATE_PRESSED;
    39ea:	1b 82       	std	Y+3, r1	; 0x03
            while (DIO_ReadPinLevel(KEYPAD_PIN_R1) == DIO_LOW);
    39ec:	83 e0       	ldi	r24, 0x03	; 3
    39ee:	61 e0       	ldi	r22, 0x01	; 1
    39f0:	0e 94 a0 0e 	call	0x1d40	; 0x1d40 <DIO_ReadPinLevel>
    39f4:	88 23       	and	r24, r24
    39f6:	d1 f3       	breq	.-12     	; 0x39ec <Keypad_GetButtonStatePooling+0x124>
    39f8:	1b c0       	rjmp	.+54     	; 0x3a30 <Keypad_GetButtonStatePooling+0x168>
        }
        break;
    case 2:
        if (DIO_ReadPinLevel(KEYPAD_PIN_R2) == DIO_LOW) {
    39fa:	83 e0       	ldi	r24, 0x03	; 3
    39fc:	62 e0       	ldi	r22, 0x02	; 2
    39fe:	0e 94 a0 0e 	call	0x1d40	; 0x1d40 <DIO_ReadPinLevel>
    3a02:	88 23       	and	r24, r24
    3a04:	a9 f4       	brne	.+42     	; 0x3a30 <Keypad_GetButtonStatePooling+0x168>
            state = KEYPAD_STATE_PRESSED;
    3a06:	1b 82       	std	Y+3, r1	; 0x03
            while (DIO_ReadPinLevel(KEYPAD_PIN_R2) == DIO_LOW);
    3a08:	83 e0       	ldi	r24, 0x03	; 3
    3a0a:	62 e0       	ldi	r22, 0x02	; 2
    3a0c:	0e 94 a0 0e 	call	0x1d40	; 0x1d40 <DIO_ReadPinLevel>
    3a10:	88 23       	and	r24, r24
    3a12:	d1 f3       	breq	.-12     	; 0x3a08 <Keypad_GetButtonStatePooling+0x140>
    3a14:	0d c0       	rjmp	.+26     	; 0x3a30 <Keypad_GetButtonStatePooling+0x168>
        }
        break;
    case 3:
        if (DIO_ReadPinLevel(KEYPAD_PIN_R3) == DIO_LOW) {
    3a16:	83 e0       	ldi	r24, 0x03	; 3
    3a18:	63 e0       	ldi	r22, 0x03	; 3
    3a1a:	0e 94 a0 0e 	call	0x1d40	; 0x1d40 <DIO_ReadPinLevel>
    3a1e:	88 23       	and	r24, r24
    3a20:	39 f4       	brne	.+14     	; 0x3a30 <Keypad_GetButtonStatePooling+0x168>
            state = KEYPAD_STATE_PRESSED;
    3a22:	1b 82       	std	Y+3, r1	; 0x03
            while (DIO_ReadPinLevel(KEYPAD_PIN_R3) == DIO_LOW);
    3a24:	83 e0       	ldi	r24, 0x03	; 3
    3a26:	63 e0       	ldi	r22, 0x03	; 3
    3a28:	0e 94 a0 0e 	call	0x1d40	; 0x1d40 <DIO_ReadPinLevel>
    3a2c:	88 23       	and	r24, r24
    3a2e:	d1 f3       	breq	.-12     	; 0x3a24 <Keypad_GetButtonStatePooling+0x15c>
        }
        break;
    default:
        break;
    }
    return state;
    3a30:	8b 81       	ldd	r24, Y+3	; 0x03
}
    3a32:	28 96       	adiw	r28, 0x08	; 8
    3a34:	0f b6       	in	r0, 0x3f	; 63
    3a36:	f8 94       	cli
    3a38:	de bf       	out	0x3e, r29	; 62
    3a3a:	0f be       	out	0x3f, r0	; 63
    3a3c:	cd bf       	out	0x3d, r28	; 61
    3a3e:	cf 91       	pop	r28
    3a40:	df 91       	pop	r29
    3a42:	08 95       	ret

00003a44 <Keypad_GetPressedButton>:


Keypad_ButtonType Keypad_GetPressedButton(void) {
    3a44:	df 93       	push	r29
    3a46:	cf 93       	push	r28
    3a48:	00 d0       	rcall	.+0      	; 0x3a4a <Keypad_GetPressedButton+0x6>
    3a4a:	cd b7       	in	r28, 0x3d	; 61
    3a4c:	de b7       	in	r29, 0x3e	; 62
    u8 i=0;
    3a4e:	1a 82       	std	Y+2, r1	; 0x02
    Keypad_ButtonType pressed_button = KEYPAD_BUTTON_INVALID;
    3a50:	80 e1       	ldi	r24, 0x10	; 16
    3a52:	89 83       	std	Y+1, r24	; 0x01
    for (i=0; i<16; i++) {
    3a54:	1a 82       	std	Y+2, r1	; 0x02
    3a56:	0b c0       	rjmp	.+22     	; 0x3a6e <Keypad_GetPressedButton+0x2a>
        if (Keypad_GetButtonStatePooling(i) == KEYPAD_STATE_PRESSED) {
    3a58:	8a 81       	ldd	r24, Y+2	; 0x02
    3a5a:	0e 94 64 1c 	call	0x38c8	; 0x38c8 <Keypad_GetButtonStatePooling>
    3a5e:	88 23       	and	r24, r24
    3a60:	19 f4       	brne	.+6      	; 0x3a68 <Keypad_GetPressedButton+0x24>
            pressed_button = i;
    3a62:	8a 81       	ldd	r24, Y+2	; 0x02
    3a64:	89 83       	std	Y+1, r24	; 0x01
    3a66:	06 c0       	rjmp	.+12     	; 0x3a74 <Keypad_GetPressedButton+0x30>


Keypad_ButtonType Keypad_GetPressedButton(void) {
    u8 i=0;
    Keypad_ButtonType pressed_button = KEYPAD_BUTTON_INVALID;
    for (i=0; i<16; i++) {
    3a68:	8a 81       	ldd	r24, Y+2	; 0x02
    3a6a:	8f 5f       	subi	r24, 0xFF	; 255
    3a6c:	8a 83       	std	Y+2, r24	; 0x02
    3a6e:	8a 81       	ldd	r24, Y+2	; 0x02
    3a70:	80 31       	cpi	r24, 0x10	; 16
    3a72:	90 f3       	brcs	.-28     	; 0x3a58 <Keypad_GetPressedButton+0x14>
        if (Keypad_GetButtonStatePooling(i) == KEYPAD_STATE_PRESSED) {
            pressed_button = i;
            break;
        }
    }
    return pressed_button;
    3a74:	89 81       	ldd	r24, Y+1	; 0x01
}
    3a76:	0f 90       	pop	r0
    3a78:	0f 90       	pop	r0
    3a7a:	cf 91       	pop	r28
    3a7c:	df 91       	pop	r29
    3a7e:	08 95       	ret

00003a80 <LCD_Init>:

static void LCD_SendData(u8 data);
static void LCD_SendCommand(u8 command);
static void LCD_InitPinsMode(void);

void LCD_Init(void) {
    3a80:	df 93       	push	r29
    3a82:	cf 93       	push	r28
    3a84:	cd b7       	in	r28, 0x3d	; 61
    3a86:	de b7       	in	r29, 0x3e	; 62
    3a88:	2f 97       	sbiw	r28, 0x0f	; 15
    3a8a:	0f b6       	in	r0, 0x3f	; 63
    3a8c:	f8 94       	cli
    3a8e:	de bf       	out	0x3e, r29	; 62
    3a90:	0f be       	out	0x3f, r0	; 63
    3a92:	cd bf       	out	0x3d, r28	; 61
    u8 command = 0;
    3a94:	1f 86       	std	Y+15, r1	; 0x0f
    LCD_InitPinsMode();
    3a96:	0e 94 17 21 	call	0x422e	; 0x422e <LCD_InitPinsMode>
    3a9a:	80 e0       	ldi	r24, 0x00	; 0
    3a9c:	90 e0       	ldi	r25, 0x00	; 0
    3a9e:	a0 ef       	ldi	r26, 0xF0	; 240
    3aa0:	b1 e4       	ldi	r27, 0x41	; 65
    3aa2:	8b 87       	std	Y+11, r24	; 0x0b
    3aa4:	9c 87       	std	Y+12, r25	; 0x0c
    3aa6:	ad 87       	std	Y+13, r26	; 0x0d
    3aa8:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    3aaa:	6b 85       	ldd	r22, Y+11	; 0x0b
    3aac:	7c 85       	ldd	r23, Y+12	; 0x0c
    3aae:	8d 85       	ldd	r24, Y+13	; 0x0d
    3ab0:	9e 85       	ldd	r25, Y+14	; 0x0e
    3ab2:	20 e0       	ldi	r18, 0x00	; 0
    3ab4:	30 e0       	ldi	r19, 0x00	; 0
    3ab6:	4a ef       	ldi	r20, 0xFA	; 250
    3ab8:	54 e4       	ldi	r21, 0x44	; 68
    3aba:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    3abe:	dc 01       	movw	r26, r24
    3ac0:	cb 01       	movw	r24, r22
    3ac2:	8f 83       	std	Y+7, r24	; 0x07
    3ac4:	98 87       	std	Y+8, r25	; 0x08
    3ac6:	a9 87       	std	Y+9, r26	; 0x09
    3ac8:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    3aca:	6f 81       	ldd	r22, Y+7	; 0x07
    3acc:	78 85       	ldd	r23, Y+8	; 0x08
    3ace:	89 85       	ldd	r24, Y+9	; 0x09
    3ad0:	9a 85       	ldd	r25, Y+10	; 0x0a
    3ad2:	20 e0       	ldi	r18, 0x00	; 0
    3ad4:	30 e0       	ldi	r19, 0x00	; 0
    3ad6:	40 e8       	ldi	r20, 0x80	; 128
    3ad8:	5f e3       	ldi	r21, 0x3F	; 63
    3ada:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    3ade:	88 23       	and	r24, r24
    3ae0:	2c f4       	brge	.+10     	; 0x3aec <LCD_Init+0x6c>
		__ticks = 1;
    3ae2:	81 e0       	ldi	r24, 0x01	; 1
    3ae4:	90 e0       	ldi	r25, 0x00	; 0
    3ae6:	9e 83       	std	Y+6, r25	; 0x06
    3ae8:	8d 83       	std	Y+5, r24	; 0x05
    3aea:	3f c0       	rjmp	.+126    	; 0x3b6a <LCD_Init+0xea>
	else if (__tmp > 65535)
    3aec:	6f 81       	ldd	r22, Y+7	; 0x07
    3aee:	78 85       	ldd	r23, Y+8	; 0x08
    3af0:	89 85       	ldd	r24, Y+9	; 0x09
    3af2:	9a 85       	ldd	r25, Y+10	; 0x0a
    3af4:	20 e0       	ldi	r18, 0x00	; 0
    3af6:	3f ef       	ldi	r19, 0xFF	; 255
    3af8:	4f e7       	ldi	r20, 0x7F	; 127
    3afa:	57 e4       	ldi	r21, 0x47	; 71
    3afc:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    3b00:	18 16       	cp	r1, r24
    3b02:	4c f5       	brge	.+82     	; 0x3b56 <LCD_Init+0xd6>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    3b04:	6b 85       	ldd	r22, Y+11	; 0x0b
    3b06:	7c 85       	ldd	r23, Y+12	; 0x0c
    3b08:	8d 85       	ldd	r24, Y+13	; 0x0d
    3b0a:	9e 85       	ldd	r25, Y+14	; 0x0e
    3b0c:	20 e0       	ldi	r18, 0x00	; 0
    3b0e:	30 e0       	ldi	r19, 0x00	; 0
    3b10:	40 e2       	ldi	r20, 0x20	; 32
    3b12:	51 e4       	ldi	r21, 0x41	; 65
    3b14:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    3b18:	dc 01       	movw	r26, r24
    3b1a:	cb 01       	movw	r24, r22
    3b1c:	bc 01       	movw	r22, r24
    3b1e:	cd 01       	movw	r24, r26
    3b20:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    3b24:	dc 01       	movw	r26, r24
    3b26:	cb 01       	movw	r24, r22
    3b28:	9e 83       	std	Y+6, r25	; 0x06
    3b2a:	8d 83       	std	Y+5, r24	; 0x05
    3b2c:	0f c0       	rjmp	.+30     	; 0x3b4c <LCD_Init+0xcc>
    3b2e:	88 ec       	ldi	r24, 0xC8	; 200
    3b30:	90 e0       	ldi	r25, 0x00	; 0
    3b32:	9c 83       	std	Y+4, r25	; 0x04
    3b34:	8b 83       	std	Y+3, r24	; 0x03
    milliseconds can be achieved.
 */
void
_delay_loop_2(uint16_t __count)
{
	__asm__ volatile (
    3b36:	8b 81       	ldd	r24, Y+3	; 0x03
    3b38:	9c 81       	ldd	r25, Y+4	; 0x04
    3b3a:	01 97       	sbiw	r24, 0x01	; 1
    3b3c:	f1 f7       	brne	.-4      	; 0x3b3a <LCD_Init+0xba>
    3b3e:	9c 83       	std	Y+4, r25	; 0x04
    3b40:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    3b42:	8d 81       	ldd	r24, Y+5	; 0x05
    3b44:	9e 81       	ldd	r25, Y+6	; 0x06
    3b46:	01 97       	sbiw	r24, 0x01	; 1
    3b48:	9e 83       	std	Y+6, r25	; 0x06
    3b4a:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    3b4c:	8d 81       	ldd	r24, Y+5	; 0x05
    3b4e:	9e 81       	ldd	r25, Y+6	; 0x06
    3b50:	00 97       	sbiw	r24, 0x00	; 0
    3b52:	69 f7       	brne	.-38     	; 0x3b2e <LCD_Init+0xae>
    3b54:	14 c0       	rjmp	.+40     	; 0x3b7e <LCD_Init+0xfe>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    3b56:	6f 81       	ldd	r22, Y+7	; 0x07
    3b58:	78 85       	ldd	r23, Y+8	; 0x08
    3b5a:	89 85       	ldd	r24, Y+9	; 0x09
    3b5c:	9a 85       	ldd	r25, Y+10	; 0x0a
    3b5e:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    3b62:	dc 01       	movw	r26, r24
    3b64:	cb 01       	movw	r24, r22
    3b66:	9e 83       	std	Y+6, r25	; 0x06
    3b68:	8d 83       	std	Y+5, r24	; 0x05
    3b6a:	8d 81       	ldd	r24, Y+5	; 0x05
    3b6c:	9e 81       	ldd	r25, Y+6	; 0x06
    3b6e:	9a 83       	std	Y+2, r25	; 0x02
    3b70:	89 83       	std	Y+1, r24	; 0x01
    3b72:	89 81       	ldd	r24, Y+1	; 0x01
    3b74:	9a 81       	ldd	r25, Y+2	; 0x02
    3b76:	01 97       	sbiw	r24, 0x01	; 1
    3b78:	f1 f7       	brne	.-4      	; 0x3b76 <LCD_Init+0xf6>
    3b7a:	9a 83       	std	Y+2, r25	; 0x02
    3b7c:	89 83       	std	Y+1, r24	; 0x01

    /* Function Set:
        N: 1 (two lines)
        F: 0 (5x7)
    */
    command = 0b00110000;
    3b7e:	80 e3       	ldi	r24, 0x30	; 48
    3b80:	8f 87       	std	Y+15, r24	; 0x0f
    #if (LCD_MODE_LINES == LCD_TWO_LINES)
        SET_BIT(command, 3);
    3b82:	8f 85       	ldd	r24, Y+15	; 0x0f
    3b84:	88 60       	ori	r24, 0x08	; 8
    3b86:	8f 87       	std	Y+15, r24	; 0x0f
    #endif
    #if (LCD_MODE_DOTS == LCD_DOTS_5X10)
        SET_BIT(command, 2);
    3b88:	8f 85       	ldd	r24, Y+15	; 0x0f
    3b8a:	84 60       	ori	r24, 0x04	; 4
    3b8c:	8f 87       	std	Y+15, r24	; 0x0f
    #endif
    LCD_SendCommand(command);
    3b8e:	8f 85       	ldd	r24, Y+15	; 0x0f
    3b90:	0e 94 41 1f 	call	0x3e82	; 0x3e82 <LCD_SendCommand>
    /* Display ON/OFF
        D: 1 (Display ON)
        C: 0 (Cursor off)
        B: 0 (Cursor not blink)
    */
    command = 0b00001000;
    3b94:	88 e0       	ldi	r24, 0x08	; 8
    3b96:	8f 87       	std	Y+15, r24	; 0x0f
    #if (LCD_MODE_DISPLAY == LCD_DISPLAY_ON)
        SET_BIT(command, 2);
    3b98:	8f 85       	ldd	r24, Y+15	; 0x0f
    3b9a:	84 60       	ori	r24, 0x04	; 4
    3b9c:	8f 87       	std	Y+15, r24	; 0x0f
    #endif
    #if (LCD_MODE_CURSOR == LCD_CURSOR_ON_BLINK)
        SET_BIT(command, 0);
    3b9e:	8f 85       	ldd	r24, Y+15	; 0x0f
    3ba0:	81 60       	ori	r24, 0x01	; 1
    3ba2:	8f 87       	std	Y+15, r24	; 0x0f
        SET_BIT(command, 1);
    3ba4:	8f 85       	ldd	r24, Y+15	; 0x0f
    3ba6:	82 60       	ori	r24, 0x02	; 2
    3ba8:	8f 87       	std	Y+15, r24	; 0x0f
    #endif
    #if (LCD_MODE_CURSOR == LCD_CURSOR_ON_NO_BLINK)
        SET_BIT(command, 1);
    3baa:	8f 85       	ldd	r24, Y+15	; 0x0f
    3bac:	82 60       	ori	r24, 0x02	; 2
    3bae:	8f 87       	std	Y+15, r24	; 0x0f
    #endif
    LCD_SendCommand(command);
    3bb0:	8f 85       	ldd	r24, Y+15	; 0x0f
    3bb2:	0e 94 41 1f 	call	0x3e82	; 0x3e82 <LCD_SendCommand>

    /* Display Clear */
    LCD_SendCommand(0b00000001);
    3bb6:	81 e0       	ldi	r24, 0x01	; 1
    3bb8:	0e 94 41 1f 	call	0x3e82	; 0x3e82 <LCD_SendCommand>
}
    3bbc:	2f 96       	adiw	r28, 0x0f	; 15
    3bbe:	0f b6       	in	r0, 0x3f	; 63
    3bc0:	f8 94       	cli
    3bc2:	de bf       	out	0x3e, r29	; 62
    3bc4:	0f be       	out	0x3f, r0	; 63
    3bc6:	cd bf       	out	0x3d, r28	; 61
    3bc8:	cf 91       	pop	r28
    3bca:	df 91       	pop	r29
    3bcc:	08 95       	ret

00003bce <LCD_Clear>:


void LCD_Clear (void) {
    3bce:	df 93       	push	r29
    3bd0:	cf 93       	push	r28
    3bd2:	cd b7       	in	r28, 0x3d	; 61
    3bd4:	de b7       	in	r29, 0x3e	; 62
    LCD_SendCommand(0b00000001);
    3bd6:	81 e0       	ldi	r24, 0x01	; 1
    3bd8:	0e 94 41 1f 	call	0x3e82	; 0x3e82 <LCD_SendCommand>
}
    3bdc:	cf 91       	pop	r28
    3bde:	df 91       	pop	r29
    3be0:	08 95       	ret

00003be2 <LCD_DisplayCharacter>:

void LCD_DisplayCharacter (u8 data) {
    3be2:	df 93       	push	r29
    3be4:	cf 93       	push	r28
    3be6:	0f 92       	push	r0
    3be8:	cd b7       	in	r28, 0x3d	; 61
    3bea:	de b7       	in	r29, 0x3e	; 62
    3bec:	89 83       	std	Y+1, r24	; 0x01
    LCD_SendData(data);
    3bee:	89 81       	ldd	r24, Y+1	; 0x01
    3bf0:	0e 94 2c 20 	call	0x4058	; 0x4058 <LCD_SendData>
}
    3bf4:	0f 90       	pop	r0
    3bf6:	cf 91       	pop	r28
    3bf8:	df 91       	pop	r29
    3bfa:	08 95       	ret

00003bfc <LCD_DisplayString>:

void LCD_DisplayString (u8 *str) {
    3bfc:	df 93       	push	r29
    3bfe:	cf 93       	push	r28
    3c00:	00 d0       	rcall	.+0      	; 0x3c02 <LCD_DisplayString+0x6>
    3c02:	0f 92       	push	r0
    3c04:	cd b7       	in	r28, 0x3d	; 61
    3c06:	de b7       	in	r29, 0x3e	; 62
    3c08:	9b 83       	std	Y+3, r25	; 0x03
    3c0a:	8a 83       	std	Y+2, r24	; 0x02
    u8 i=0;
    3c0c:	19 82       	std	Y+1, r1	; 0x01
    3c0e:	0e c0       	rjmp	.+28     	; 0x3c2c <LCD_DisplayString+0x30>
    while(str[i] != '\0') {
        LCD_DisplayCharacter(str[i]);
    3c10:	89 81       	ldd	r24, Y+1	; 0x01
    3c12:	28 2f       	mov	r18, r24
    3c14:	30 e0       	ldi	r19, 0x00	; 0
    3c16:	8a 81       	ldd	r24, Y+2	; 0x02
    3c18:	9b 81       	ldd	r25, Y+3	; 0x03
    3c1a:	fc 01       	movw	r30, r24
    3c1c:	e2 0f       	add	r30, r18
    3c1e:	f3 1f       	adc	r31, r19
    3c20:	80 81       	ld	r24, Z
    3c22:	0e 94 f1 1d 	call	0x3be2	; 0x3be2 <LCD_DisplayCharacter>
        i++;
    3c26:	89 81       	ldd	r24, Y+1	; 0x01
    3c28:	8f 5f       	subi	r24, 0xFF	; 255
    3c2a:	89 83       	std	Y+1, r24	; 0x01
    LCD_SendData(data);
}

void LCD_DisplayString (u8 *str) {
    u8 i=0;
    while(str[i] != '\0') {
    3c2c:	89 81       	ldd	r24, Y+1	; 0x01
    3c2e:	28 2f       	mov	r18, r24
    3c30:	30 e0       	ldi	r19, 0x00	; 0
    3c32:	8a 81       	ldd	r24, Y+2	; 0x02
    3c34:	9b 81       	ldd	r25, Y+3	; 0x03
    3c36:	fc 01       	movw	r30, r24
    3c38:	e2 0f       	add	r30, r18
    3c3a:	f3 1f       	adc	r31, r19
    3c3c:	80 81       	ld	r24, Z
    3c3e:	88 23       	and	r24, r24
    3c40:	39 f7       	brne	.-50     	; 0x3c10 <LCD_DisplayString+0x14>
        LCD_DisplayCharacter(str[i]);
        i++;
    }
}
    3c42:	0f 90       	pop	r0
    3c44:	0f 90       	pop	r0
    3c46:	0f 90       	pop	r0
    3c48:	cf 91       	pop	r28
    3c4a:	df 91       	pop	r29
    3c4c:	08 95       	ret

00003c4e <LCD_SetCursorPosition>:

void LCD_SetCursorPosition(u8 row, u8 column) {
    3c4e:	df 93       	push	r29
    3c50:	cf 93       	push	r28
    3c52:	00 d0       	rcall	.+0      	; 0x3c54 <LCD_SetCursorPosition+0x6>
    3c54:	0f 92       	push	r0
    3c56:	cd b7       	in	r28, 0x3d	; 61
    3c58:	de b7       	in	r29, 0x3e	; 62
    3c5a:	8a 83       	std	Y+2, r24	; 0x02
    3c5c:	6b 83       	std	Y+3, r22	; 0x03
    u8 address = column + row*0x40;
    3c5e:	8a 81       	ldd	r24, Y+2	; 0x02
    3c60:	88 2f       	mov	r24, r24
    3c62:	90 e0       	ldi	r25, 0x00	; 0
    3c64:	00 24       	eor	r0, r0
    3c66:	96 95       	lsr	r25
    3c68:	87 95       	ror	r24
    3c6a:	07 94       	ror	r0
    3c6c:	96 95       	lsr	r25
    3c6e:	87 95       	ror	r24
    3c70:	07 94       	ror	r0
    3c72:	98 2f       	mov	r25, r24
    3c74:	80 2d       	mov	r24, r0
    3c76:	98 2f       	mov	r25, r24
    3c78:	8b 81       	ldd	r24, Y+3	; 0x03
    3c7a:	89 0f       	add	r24, r25
    3c7c:	89 83       	std	Y+1, r24	; 0x01
    SET_BIT(address, 7);
    3c7e:	89 81       	ldd	r24, Y+1	; 0x01
    3c80:	80 68       	ori	r24, 0x80	; 128
    3c82:	89 83       	std	Y+1, r24	; 0x01
    LCD_SendCommand(address);
    3c84:	89 81       	ldd	r24, Y+1	; 0x01
    3c86:	0e 94 41 1f 	call	0x3e82	; 0x3e82 <LCD_SendCommand>
}
    3c8a:	0f 90       	pop	r0
    3c8c:	0f 90       	pop	r0
    3c8e:	0f 90       	pop	r0
    3c90:	cf 91       	pop	r28
    3c92:	df 91       	pop	r29
    3c94:	08 95       	ret

00003c96 <LCD_DisplayNumber>:


void LCD_DisplayNumber (s32 number) {
    3c96:	ef 92       	push	r14
    3c98:	ff 92       	push	r15
    3c9a:	0f 93       	push	r16
    3c9c:	1f 93       	push	r17
    3c9e:	df 93       	push	r29
    3ca0:	cf 93       	push	r28
    3ca2:	cd b7       	in	r28, 0x3d	; 61
    3ca4:	de b7       	in	r29, 0x3e	; 62
    3ca6:	2a 97       	sbiw	r28, 0x0a	; 10
    3ca8:	0f b6       	in	r0, 0x3f	; 63
    3caa:	f8 94       	cli
    3cac:	de bf       	out	0x3e, r29	; 62
    3cae:	0f be       	out	0x3f, r0	; 63
    3cb0:	cd bf       	out	0x3d, r28	; 61
    3cb2:	6f 83       	std	Y+7, r22	; 0x07
    3cb4:	78 87       	std	Y+8, r23	; 0x08
    3cb6:	89 87       	std	Y+9, r24	; 0x09
    3cb8:	9a 87       	std	Y+10, r25	; 0x0a
    u32 reversed_number = 0;
    3cba:	1b 82       	std	Y+3, r1	; 0x03
    3cbc:	1c 82       	std	Y+4, r1	; 0x04
    3cbe:	1d 82       	std	Y+5, r1	; 0x05
    3cc0:	1e 82       	std	Y+6, r1	; 0x06
    u8 digits = 0;
    3cc2:	1a 82       	std	Y+2, r1	; 0x02
    if (number < 0) {
    3cc4:	8f 81       	ldd	r24, Y+7	; 0x07
    3cc6:	98 85       	ldd	r25, Y+8	; 0x08
    3cc8:	a9 85       	ldd	r26, Y+9	; 0x09
    3cca:	ba 85       	ldd	r27, Y+10	; 0x0a
    3ccc:	bb 23       	and	r27, r27
    3cce:	9c f4       	brge	.+38     	; 0x3cf6 <LCD_DisplayNumber+0x60>
        number = number*-1;
    3cd0:	8f 81       	ldd	r24, Y+7	; 0x07
    3cd2:	98 85       	ldd	r25, Y+8	; 0x08
    3cd4:	a9 85       	ldd	r26, Y+9	; 0x09
    3cd6:	ba 85       	ldd	r27, Y+10	; 0x0a
    3cd8:	b0 95       	com	r27
    3cda:	a0 95       	com	r26
    3cdc:	90 95       	com	r25
    3cde:	81 95       	neg	r24
    3ce0:	9f 4f       	sbci	r25, 0xFF	; 255
    3ce2:	af 4f       	sbci	r26, 0xFF	; 255
    3ce4:	bf 4f       	sbci	r27, 0xFF	; 255
    3ce6:	8f 83       	std	Y+7, r24	; 0x07
    3ce8:	98 87       	std	Y+8, r25	; 0x08
    3cea:	a9 87       	std	Y+9, r26	; 0x09
    3cec:	ba 87       	std	Y+10, r27	; 0x0a
        LCD_DisplayCharacter('-');
    3cee:	8d e2       	ldi	r24, 0x2D	; 45
    3cf0:	0e 94 f1 1d 	call	0x3be2	; 0x3be2 <LCD_DisplayCharacter>
    3cf4:	45 c0       	rjmp	.+138    	; 0x3d80 <LCD_DisplayNumber+0xea>
    }
    else if (number == 0) {
    3cf6:	8f 81       	ldd	r24, Y+7	; 0x07
    3cf8:	98 85       	ldd	r25, Y+8	; 0x08
    3cfa:	a9 85       	ldd	r26, Y+9	; 0x09
    3cfc:	ba 85       	ldd	r27, Y+10	; 0x0a
    3cfe:	00 97       	sbiw	r24, 0x00	; 0
    3d00:	a1 05       	cpc	r26, r1
    3d02:	b1 05       	cpc	r27, r1
    3d04:	e9 f5       	brne	.+122    	; 0x3d80 <LCD_DisplayNumber+0xea>
        LCD_DisplayCharacter('0');
    3d06:	80 e3       	ldi	r24, 0x30	; 48
    3d08:	0e 94 f1 1d 	call	0x3be2	; 0x3be2 <LCD_DisplayCharacter>
    3d0c:	39 c0       	rjmp	.+114    	; 0x3d80 <LCD_DisplayNumber+0xea>
    }
    while (number != 0)
    {
        reversed_number = (reversed_number*10) + (number%10);
    3d0e:	8b 81       	ldd	r24, Y+3	; 0x03
    3d10:	9c 81       	ldd	r25, Y+4	; 0x04
    3d12:	ad 81       	ldd	r26, Y+5	; 0x05
    3d14:	be 81       	ldd	r27, Y+6	; 0x06
    3d16:	2a e0       	ldi	r18, 0x0A	; 10
    3d18:	30 e0       	ldi	r19, 0x00	; 0
    3d1a:	40 e0       	ldi	r20, 0x00	; 0
    3d1c:	50 e0       	ldi	r21, 0x00	; 0
    3d1e:	bc 01       	movw	r22, r24
    3d20:	cd 01       	movw	r24, r26
    3d22:	0e 94 5d 28 	call	0x50ba	; 0x50ba <__mulsi3>
    3d26:	7b 01       	movw	r14, r22
    3d28:	8c 01       	movw	r16, r24
    3d2a:	8f 81       	ldd	r24, Y+7	; 0x07
    3d2c:	98 85       	ldd	r25, Y+8	; 0x08
    3d2e:	a9 85       	ldd	r26, Y+9	; 0x09
    3d30:	ba 85       	ldd	r27, Y+10	; 0x0a
    3d32:	2a e0       	ldi	r18, 0x0A	; 10
    3d34:	30 e0       	ldi	r19, 0x00	; 0
    3d36:	40 e0       	ldi	r20, 0x00	; 0
    3d38:	50 e0       	ldi	r21, 0x00	; 0
    3d3a:	bc 01       	movw	r22, r24
    3d3c:	cd 01       	movw	r24, r26
    3d3e:	0e 94 aa 28 	call	0x5154	; 0x5154 <__divmodsi4>
    3d42:	dc 01       	movw	r26, r24
    3d44:	cb 01       	movw	r24, r22
    3d46:	8e 0d       	add	r24, r14
    3d48:	9f 1d       	adc	r25, r15
    3d4a:	a0 1f       	adc	r26, r16
    3d4c:	b1 1f       	adc	r27, r17
    3d4e:	8b 83       	std	Y+3, r24	; 0x03
    3d50:	9c 83       	std	Y+4, r25	; 0x04
    3d52:	ad 83       	std	Y+5, r26	; 0x05
    3d54:	be 83       	std	Y+6, r27	; 0x06
        number = number / 10;
    3d56:	8f 81       	ldd	r24, Y+7	; 0x07
    3d58:	98 85       	ldd	r25, Y+8	; 0x08
    3d5a:	a9 85       	ldd	r26, Y+9	; 0x09
    3d5c:	ba 85       	ldd	r27, Y+10	; 0x0a
    3d5e:	2a e0       	ldi	r18, 0x0A	; 10
    3d60:	30 e0       	ldi	r19, 0x00	; 0
    3d62:	40 e0       	ldi	r20, 0x00	; 0
    3d64:	50 e0       	ldi	r21, 0x00	; 0
    3d66:	bc 01       	movw	r22, r24
    3d68:	cd 01       	movw	r24, r26
    3d6a:	0e 94 aa 28 	call	0x5154	; 0x5154 <__divmodsi4>
    3d6e:	da 01       	movw	r26, r20
    3d70:	c9 01       	movw	r24, r18
    3d72:	8f 83       	std	Y+7, r24	; 0x07
    3d74:	98 87       	std	Y+8, r25	; 0x08
    3d76:	a9 87       	std	Y+9, r26	; 0x09
    3d78:	ba 87       	std	Y+10, r27	; 0x0a
        digits++;
    3d7a:	8a 81       	ldd	r24, Y+2	; 0x02
    3d7c:	8f 5f       	subi	r24, 0xFF	; 255
    3d7e:	8a 83       	std	Y+2, r24	; 0x02
        LCD_DisplayCharacter('-');
    }
    else if (number == 0) {
        LCD_DisplayCharacter('0');
    }
    while (number != 0)
    3d80:	8f 81       	ldd	r24, Y+7	; 0x07
    3d82:	98 85       	ldd	r25, Y+8	; 0x08
    3d84:	a9 85       	ldd	r26, Y+9	; 0x09
    3d86:	ba 85       	ldd	r27, Y+10	; 0x0a
    3d88:	00 97       	sbiw	r24, 0x00	; 0
    3d8a:	a1 05       	cpc	r26, r1
    3d8c:	b1 05       	cpc	r27, r1
    3d8e:	09 f0       	breq	.+2      	; 0x3d92 <LCD_DisplayNumber+0xfc>
    3d90:	be cf       	rjmp	.-132    	; 0x3d0e <LCD_DisplayNumber+0x78>
    3d92:	2a c0       	rjmp	.+84     	; 0x3de8 <LCD_DisplayNumber+0x152>
        number = number / 10;
        digits++;
    }
    while (reversed_number != 0)
    {
        u8 data = reversed_number % 10;
    3d94:	8b 81       	ldd	r24, Y+3	; 0x03
    3d96:	9c 81       	ldd	r25, Y+4	; 0x04
    3d98:	ad 81       	ldd	r26, Y+5	; 0x05
    3d9a:	be 81       	ldd	r27, Y+6	; 0x06
    3d9c:	2a e0       	ldi	r18, 0x0A	; 10
    3d9e:	30 e0       	ldi	r19, 0x00	; 0
    3da0:	40 e0       	ldi	r20, 0x00	; 0
    3da2:	50 e0       	ldi	r21, 0x00	; 0
    3da4:	bc 01       	movw	r22, r24
    3da6:	cd 01       	movw	r24, r26
    3da8:	0e 94 88 28 	call	0x5110	; 0x5110 <__udivmodsi4>
    3dac:	dc 01       	movw	r26, r24
    3dae:	cb 01       	movw	r24, r22
    3db0:	89 83       	std	Y+1, r24	; 0x01
        data = data + '0';
    3db2:	89 81       	ldd	r24, Y+1	; 0x01
    3db4:	80 5d       	subi	r24, 0xD0	; 208
    3db6:	89 83       	std	Y+1, r24	; 0x01
        LCD_DisplayCharacter(data);
    3db8:	89 81       	ldd	r24, Y+1	; 0x01
    3dba:	0e 94 f1 1d 	call	0x3be2	; 0x3be2 <LCD_DisplayCharacter>
        reversed_number = reversed_number / 10;
    3dbe:	8b 81       	ldd	r24, Y+3	; 0x03
    3dc0:	9c 81       	ldd	r25, Y+4	; 0x04
    3dc2:	ad 81       	ldd	r26, Y+5	; 0x05
    3dc4:	be 81       	ldd	r27, Y+6	; 0x06
    3dc6:	2a e0       	ldi	r18, 0x0A	; 10
    3dc8:	30 e0       	ldi	r19, 0x00	; 0
    3dca:	40 e0       	ldi	r20, 0x00	; 0
    3dcc:	50 e0       	ldi	r21, 0x00	; 0
    3dce:	bc 01       	movw	r22, r24
    3dd0:	cd 01       	movw	r24, r26
    3dd2:	0e 94 88 28 	call	0x5110	; 0x5110 <__udivmodsi4>
    3dd6:	da 01       	movw	r26, r20
    3dd8:	c9 01       	movw	r24, r18
    3dda:	8b 83       	std	Y+3, r24	; 0x03
    3ddc:	9c 83       	std	Y+4, r25	; 0x04
    3dde:	ad 83       	std	Y+5, r26	; 0x05
    3de0:	be 83       	std	Y+6, r27	; 0x06
        digits--;
    3de2:	8a 81       	ldd	r24, Y+2	; 0x02
    3de4:	81 50       	subi	r24, 0x01	; 1
    3de6:	8a 83       	std	Y+2, r24	; 0x02
    {
        reversed_number = (reversed_number*10) + (number%10);
        number = number / 10;
        digits++;
    }
    while (reversed_number != 0)
    3de8:	8b 81       	ldd	r24, Y+3	; 0x03
    3dea:	9c 81       	ldd	r25, Y+4	; 0x04
    3dec:	ad 81       	ldd	r26, Y+5	; 0x05
    3dee:	be 81       	ldd	r27, Y+6	; 0x06
    3df0:	00 97       	sbiw	r24, 0x00	; 0
    3df2:	a1 05       	cpc	r26, r1
    3df4:	b1 05       	cpc	r27, r1
    3df6:	71 f6       	brne	.-100    	; 0x3d94 <LCD_DisplayNumber+0xfe>
    3df8:	06 c0       	rjmp	.+12     	; 0x3e06 <LCD_DisplayNumber+0x170>
        LCD_DisplayCharacter(data);
        reversed_number = reversed_number / 10;
        digits--;
    }
    while (digits != 0) {
        LCD_DisplayCharacter('0');
    3dfa:	80 e3       	ldi	r24, 0x30	; 48
    3dfc:	0e 94 f1 1d 	call	0x3be2	; 0x3be2 <LCD_DisplayCharacter>
        digits--;
    3e00:	8a 81       	ldd	r24, Y+2	; 0x02
    3e02:	81 50       	subi	r24, 0x01	; 1
    3e04:	8a 83       	std	Y+2, r24	; 0x02
        data = data + '0';
        LCD_DisplayCharacter(data);
        reversed_number = reversed_number / 10;
        digits--;
    }
    while (digits != 0) {
    3e06:	8a 81       	ldd	r24, Y+2	; 0x02
    3e08:	88 23       	and	r24, r24
    3e0a:	b9 f7       	brne	.-18     	; 0x3dfa <LCD_DisplayNumber+0x164>
        LCD_DisplayCharacter('0');
        digits--;
    }

}
    3e0c:	2a 96       	adiw	r28, 0x0a	; 10
    3e0e:	0f b6       	in	r0, 0x3f	; 63
    3e10:	f8 94       	cli
    3e12:	de bf       	out	0x3e, r29	; 62
    3e14:	0f be       	out	0x3f, r0	; 63
    3e16:	cd bf       	out	0x3d, r28	; 61
    3e18:	cf 91       	pop	r28
    3e1a:	df 91       	pop	r29
    3e1c:	1f 91       	pop	r17
    3e1e:	0f 91       	pop	r16
    3e20:	ff 90       	pop	r15
    3e22:	ef 90       	pop	r14
    3e24:	08 95       	ret

00003e26 <LCD_ShiftLeft>:

void LCD_ShiftLeft (u8 counter) {
    3e26:	df 93       	push	r29
    3e28:	cf 93       	push	r28
    3e2a:	00 d0       	rcall	.+0      	; 0x3e2c <LCD_ShiftLeft+0x6>
    3e2c:	cd b7       	in	r28, 0x3d	; 61
    3e2e:	de b7       	in	r29, 0x3e	; 62
    3e30:	8a 83       	std	Y+2, r24	; 0x02
    u8 i;
    for (i=0; i<counter; i++) {
    3e32:	19 82       	std	Y+1, r1	; 0x01
    3e34:	06 c0       	rjmp	.+12     	; 0x3e42 <LCD_ShiftLeft+0x1c>
        LCD_SendCommand(0b00011000);
    3e36:	88 e1       	ldi	r24, 0x18	; 24
    3e38:	0e 94 41 1f 	call	0x3e82	; 0x3e82 <LCD_SendCommand>

}

void LCD_ShiftLeft (u8 counter) {
    u8 i;
    for (i=0; i<counter; i++) {
    3e3c:	89 81       	ldd	r24, Y+1	; 0x01
    3e3e:	8f 5f       	subi	r24, 0xFF	; 255
    3e40:	89 83       	std	Y+1, r24	; 0x01
    3e42:	99 81       	ldd	r25, Y+1	; 0x01
    3e44:	8a 81       	ldd	r24, Y+2	; 0x02
    3e46:	98 17       	cp	r25, r24
    3e48:	b0 f3       	brcs	.-20     	; 0x3e36 <LCD_ShiftLeft+0x10>
        LCD_SendCommand(0b00011000);
    }
}
    3e4a:	0f 90       	pop	r0
    3e4c:	0f 90       	pop	r0
    3e4e:	cf 91       	pop	r28
    3e50:	df 91       	pop	r29
    3e52:	08 95       	ret

00003e54 <LCD_ShiftRight>:
void LCD_ShiftRight (u8 counter) {
    3e54:	df 93       	push	r29
    3e56:	cf 93       	push	r28
    3e58:	00 d0       	rcall	.+0      	; 0x3e5a <LCD_ShiftRight+0x6>
    3e5a:	cd b7       	in	r28, 0x3d	; 61
    3e5c:	de b7       	in	r29, 0x3e	; 62
    3e5e:	8a 83       	std	Y+2, r24	; 0x02
    u8 i;
    for (i=0; i<counter; i++) {
    3e60:	19 82       	std	Y+1, r1	; 0x01
    3e62:	06 c0       	rjmp	.+12     	; 0x3e70 <LCD_ShiftRight+0x1c>
        LCD_SendCommand(0b00011100);
    3e64:	8c e1       	ldi	r24, 0x1C	; 28
    3e66:	0e 94 41 1f 	call	0x3e82	; 0x3e82 <LCD_SendCommand>
        LCD_SendCommand(0b00011000);
    }
}
void LCD_ShiftRight (u8 counter) {
    u8 i;
    for (i=0; i<counter; i++) {
    3e6a:	89 81       	ldd	r24, Y+1	; 0x01
    3e6c:	8f 5f       	subi	r24, 0xFF	; 255
    3e6e:	89 83       	std	Y+1, r24	; 0x01
    3e70:	99 81       	ldd	r25, Y+1	; 0x01
    3e72:	8a 81       	ldd	r24, Y+2	; 0x02
    3e74:	98 17       	cp	r25, r24
    3e76:	b0 f3       	brcs	.-20     	; 0x3e64 <LCD_ShiftRight+0x10>
        LCD_SendCommand(0b00011100);
    }
}
    3e78:	0f 90       	pop	r0
    3e7a:	0f 90       	pop	r0
    3e7c:	cf 91       	pop	r28
    3e7e:	df 91       	pop	r29
    3e80:	08 95       	ret

00003e82 <LCD_SendCommand>:

static void LCD_SendCommand(u8 command) {
    3e82:	df 93       	push	r29
    3e84:	cf 93       	push	r28
    3e86:	cd b7       	in	r28, 0x3d	; 61
    3e88:	de b7       	in	r29, 0x3e	; 62
    3e8a:	2f 97       	sbiw	r28, 0x0f	; 15
    3e8c:	0f b6       	in	r0, 0x3f	; 63
    3e8e:	f8 94       	cli
    3e90:	de bf       	out	0x3e, r29	; 62
    3e92:	0f be       	out	0x3f, r0	; 63
    3e94:	cd bf       	out	0x3d, r28	; 61
    3e96:	8f 87       	std	Y+15, r24	; 0x0f
    /* Set Control Pins:
        RS : 0 Command
        RW : 0 Write
    */
    DIO_SetPinLevel(LCD_PIN_RS, DIO_LOW);
    3e98:	81 e0       	ldi	r24, 0x01	; 1
    3e9a:	62 e0       	ldi	r22, 0x02	; 2
    3e9c:	40 e0       	ldi	r20, 0x00	; 0
    3e9e:	0e 94 f1 0c 	call	0x19e2	; 0x19e2 <DIO_SetPinLevel>
    DIO_SetPinLevel(LCD_PIN_RW, DIO_LOW);
    3ea2:	81 e0       	ldi	r24, 0x01	; 1
    3ea4:	61 e0       	ldi	r22, 0x01	; 1
    3ea6:	40 e0       	ldi	r20, 0x00	; 0
    3ea8:	0e 94 f1 0c 	call	0x19e2	; 0x19e2 <DIO_SetPinLevel>

    /* Set Data Pins */
    DIO_SetPinLevel(LCD_PIN_D0, GET_BIT(command, 0));
    3eac:	8f 85       	ldd	r24, Y+15	; 0x0f
    3eae:	98 2f       	mov	r25, r24
    3eb0:	91 70       	andi	r25, 0x01	; 1
    3eb2:	82 e0       	ldi	r24, 0x02	; 2
    3eb4:	67 e0       	ldi	r22, 0x07	; 7
    3eb6:	49 2f       	mov	r20, r25
    3eb8:	0e 94 f1 0c 	call	0x19e2	; 0x19e2 <DIO_SetPinLevel>
    DIO_SetPinLevel(LCD_PIN_D1, GET_BIT(command, 1));
    3ebc:	8f 85       	ldd	r24, Y+15	; 0x0f
    3ebe:	86 95       	lsr	r24
    3ec0:	98 2f       	mov	r25, r24
    3ec2:	91 70       	andi	r25, 0x01	; 1
    3ec4:	82 e0       	ldi	r24, 0x02	; 2
    3ec6:	66 e0       	ldi	r22, 0x06	; 6
    3ec8:	49 2f       	mov	r20, r25
    3eca:	0e 94 f1 0c 	call	0x19e2	; 0x19e2 <DIO_SetPinLevel>
    DIO_SetPinLevel(LCD_PIN_D2, GET_BIT(command, 2));
    3ece:	8f 85       	ldd	r24, Y+15	; 0x0f
    3ed0:	86 95       	lsr	r24
    3ed2:	86 95       	lsr	r24
    3ed4:	98 2f       	mov	r25, r24
    3ed6:	91 70       	andi	r25, 0x01	; 1
    3ed8:	82 e0       	ldi	r24, 0x02	; 2
    3eda:	65 e0       	ldi	r22, 0x05	; 5
    3edc:	49 2f       	mov	r20, r25
    3ede:	0e 94 f1 0c 	call	0x19e2	; 0x19e2 <DIO_SetPinLevel>
    DIO_SetPinLevel(LCD_PIN_D3, GET_BIT(command, 3));
    3ee2:	8f 85       	ldd	r24, Y+15	; 0x0f
    3ee4:	86 95       	lsr	r24
    3ee6:	86 95       	lsr	r24
    3ee8:	86 95       	lsr	r24
    3eea:	98 2f       	mov	r25, r24
    3eec:	91 70       	andi	r25, 0x01	; 1
    3eee:	82 e0       	ldi	r24, 0x02	; 2
    3ef0:	64 e0       	ldi	r22, 0x04	; 4
    3ef2:	49 2f       	mov	r20, r25
    3ef4:	0e 94 f1 0c 	call	0x19e2	; 0x19e2 <DIO_SetPinLevel>
    DIO_SetPinLevel(LCD_PIN_D4, GET_BIT(command, 4));
    3ef8:	8f 85       	ldd	r24, Y+15	; 0x0f
    3efa:	82 95       	swap	r24
    3efc:	8f 70       	andi	r24, 0x0F	; 15
    3efe:	98 2f       	mov	r25, r24
    3f00:	91 70       	andi	r25, 0x01	; 1
    3f02:	82 e0       	ldi	r24, 0x02	; 2
    3f04:	63 e0       	ldi	r22, 0x03	; 3
    3f06:	49 2f       	mov	r20, r25
    3f08:	0e 94 f1 0c 	call	0x19e2	; 0x19e2 <DIO_SetPinLevel>
    DIO_SetPinLevel(LCD_PIN_D5, GET_BIT(command, 5));
    3f0c:	8f 85       	ldd	r24, Y+15	; 0x0f
    3f0e:	82 95       	swap	r24
    3f10:	86 95       	lsr	r24
    3f12:	87 70       	andi	r24, 0x07	; 7
    3f14:	98 2f       	mov	r25, r24
    3f16:	91 70       	andi	r25, 0x01	; 1
    3f18:	82 e0       	ldi	r24, 0x02	; 2
    3f1a:	62 e0       	ldi	r22, 0x02	; 2
    3f1c:	49 2f       	mov	r20, r25
    3f1e:	0e 94 f1 0c 	call	0x19e2	; 0x19e2 <DIO_SetPinLevel>
    DIO_SetPinLevel(LCD_PIN_D6, GET_BIT(command, 6));
    3f22:	8f 85       	ldd	r24, Y+15	; 0x0f
    3f24:	82 95       	swap	r24
    3f26:	86 95       	lsr	r24
    3f28:	86 95       	lsr	r24
    3f2a:	83 70       	andi	r24, 0x03	; 3
    3f2c:	98 2f       	mov	r25, r24
    3f2e:	91 70       	andi	r25, 0x01	; 1
    3f30:	82 e0       	ldi	r24, 0x02	; 2
    3f32:	61 e0       	ldi	r22, 0x01	; 1
    3f34:	49 2f       	mov	r20, r25
    3f36:	0e 94 f1 0c 	call	0x19e2	; 0x19e2 <DIO_SetPinLevel>
    DIO_SetPinLevel(LCD_PIN_D7, GET_BIT(command, 7));
    3f3a:	8f 85       	ldd	r24, Y+15	; 0x0f
    3f3c:	98 2f       	mov	r25, r24
    3f3e:	99 1f       	adc	r25, r25
    3f40:	99 27       	eor	r25, r25
    3f42:	99 1f       	adc	r25, r25
    3f44:	82 e0       	ldi	r24, 0x02	; 2
    3f46:	60 e0       	ldi	r22, 0x00	; 0
    3f48:	49 2f       	mov	r20, r25
    3f4a:	0e 94 f1 0c 	call	0x19e2	; 0x19e2 <DIO_SetPinLevel>

    DIO_SetPinLevel(LCD_PIN_E, DIO_HIGH);
    3f4e:	81 e0       	ldi	r24, 0x01	; 1
    3f50:	60 e0       	ldi	r22, 0x00	; 0
    3f52:	41 e0       	ldi	r20, 0x01	; 1
    3f54:	0e 94 f1 0c 	call	0x19e2	; 0x19e2 <DIO_SetPinLevel>
    3f58:	80 e0       	ldi	r24, 0x00	; 0
    3f5a:	90 e0       	ldi	r25, 0x00	; 0
    3f5c:	a0 e0       	ldi	r26, 0x00	; 0
    3f5e:	b0 e4       	ldi	r27, 0x40	; 64
    3f60:	8b 87       	std	Y+11, r24	; 0x0b
    3f62:	9c 87       	std	Y+12, r25	; 0x0c
    3f64:	ad 87       	std	Y+13, r26	; 0x0d
    3f66:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    3f68:	6b 85       	ldd	r22, Y+11	; 0x0b
    3f6a:	7c 85       	ldd	r23, Y+12	; 0x0c
    3f6c:	8d 85       	ldd	r24, Y+13	; 0x0d
    3f6e:	9e 85       	ldd	r25, Y+14	; 0x0e
    3f70:	20 e0       	ldi	r18, 0x00	; 0
    3f72:	30 e0       	ldi	r19, 0x00	; 0
    3f74:	4a ef       	ldi	r20, 0xFA	; 250
    3f76:	54 e4       	ldi	r21, 0x44	; 68
    3f78:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    3f7c:	dc 01       	movw	r26, r24
    3f7e:	cb 01       	movw	r24, r22
    3f80:	8f 83       	std	Y+7, r24	; 0x07
    3f82:	98 87       	std	Y+8, r25	; 0x08
    3f84:	a9 87       	std	Y+9, r26	; 0x09
    3f86:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    3f88:	6f 81       	ldd	r22, Y+7	; 0x07
    3f8a:	78 85       	ldd	r23, Y+8	; 0x08
    3f8c:	89 85       	ldd	r24, Y+9	; 0x09
    3f8e:	9a 85       	ldd	r25, Y+10	; 0x0a
    3f90:	20 e0       	ldi	r18, 0x00	; 0
    3f92:	30 e0       	ldi	r19, 0x00	; 0
    3f94:	40 e8       	ldi	r20, 0x80	; 128
    3f96:	5f e3       	ldi	r21, 0x3F	; 63
    3f98:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    3f9c:	88 23       	and	r24, r24
    3f9e:	2c f4       	brge	.+10     	; 0x3faa <LCD_SendCommand+0x128>
		__ticks = 1;
    3fa0:	81 e0       	ldi	r24, 0x01	; 1
    3fa2:	90 e0       	ldi	r25, 0x00	; 0
    3fa4:	9e 83       	std	Y+6, r25	; 0x06
    3fa6:	8d 83       	std	Y+5, r24	; 0x05
    3fa8:	3f c0       	rjmp	.+126    	; 0x4028 <LCD_SendCommand+0x1a6>
	else if (__tmp > 65535)
    3faa:	6f 81       	ldd	r22, Y+7	; 0x07
    3fac:	78 85       	ldd	r23, Y+8	; 0x08
    3fae:	89 85       	ldd	r24, Y+9	; 0x09
    3fb0:	9a 85       	ldd	r25, Y+10	; 0x0a
    3fb2:	20 e0       	ldi	r18, 0x00	; 0
    3fb4:	3f ef       	ldi	r19, 0xFF	; 255
    3fb6:	4f e7       	ldi	r20, 0x7F	; 127
    3fb8:	57 e4       	ldi	r21, 0x47	; 71
    3fba:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    3fbe:	18 16       	cp	r1, r24
    3fc0:	4c f5       	brge	.+82     	; 0x4014 <LCD_SendCommand+0x192>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    3fc2:	6b 85       	ldd	r22, Y+11	; 0x0b
    3fc4:	7c 85       	ldd	r23, Y+12	; 0x0c
    3fc6:	8d 85       	ldd	r24, Y+13	; 0x0d
    3fc8:	9e 85       	ldd	r25, Y+14	; 0x0e
    3fca:	20 e0       	ldi	r18, 0x00	; 0
    3fcc:	30 e0       	ldi	r19, 0x00	; 0
    3fce:	40 e2       	ldi	r20, 0x20	; 32
    3fd0:	51 e4       	ldi	r21, 0x41	; 65
    3fd2:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    3fd6:	dc 01       	movw	r26, r24
    3fd8:	cb 01       	movw	r24, r22
    3fda:	bc 01       	movw	r22, r24
    3fdc:	cd 01       	movw	r24, r26
    3fde:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    3fe2:	dc 01       	movw	r26, r24
    3fe4:	cb 01       	movw	r24, r22
    3fe6:	9e 83       	std	Y+6, r25	; 0x06
    3fe8:	8d 83       	std	Y+5, r24	; 0x05
    3fea:	0f c0       	rjmp	.+30     	; 0x400a <LCD_SendCommand+0x188>
    3fec:	88 ec       	ldi	r24, 0xC8	; 200
    3fee:	90 e0       	ldi	r25, 0x00	; 0
    3ff0:	9c 83       	std	Y+4, r25	; 0x04
    3ff2:	8b 83       	std	Y+3, r24	; 0x03
    3ff4:	8b 81       	ldd	r24, Y+3	; 0x03
    3ff6:	9c 81       	ldd	r25, Y+4	; 0x04
    3ff8:	01 97       	sbiw	r24, 0x01	; 1
    3ffa:	f1 f7       	brne	.-4      	; 0x3ff8 <LCD_SendCommand+0x176>
    3ffc:	9c 83       	std	Y+4, r25	; 0x04
    3ffe:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    4000:	8d 81       	ldd	r24, Y+5	; 0x05
    4002:	9e 81       	ldd	r25, Y+6	; 0x06
    4004:	01 97       	sbiw	r24, 0x01	; 1
    4006:	9e 83       	std	Y+6, r25	; 0x06
    4008:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    400a:	8d 81       	ldd	r24, Y+5	; 0x05
    400c:	9e 81       	ldd	r25, Y+6	; 0x06
    400e:	00 97       	sbiw	r24, 0x00	; 0
    4010:	69 f7       	brne	.-38     	; 0x3fec <LCD_SendCommand+0x16a>
    4012:	14 c0       	rjmp	.+40     	; 0x403c <LCD_SendCommand+0x1ba>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    4014:	6f 81       	ldd	r22, Y+7	; 0x07
    4016:	78 85       	ldd	r23, Y+8	; 0x08
    4018:	89 85       	ldd	r24, Y+9	; 0x09
    401a:	9a 85       	ldd	r25, Y+10	; 0x0a
    401c:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    4020:	dc 01       	movw	r26, r24
    4022:	cb 01       	movw	r24, r22
    4024:	9e 83       	std	Y+6, r25	; 0x06
    4026:	8d 83       	std	Y+5, r24	; 0x05
    4028:	8d 81       	ldd	r24, Y+5	; 0x05
    402a:	9e 81       	ldd	r25, Y+6	; 0x06
    402c:	9a 83       	std	Y+2, r25	; 0x02
    402e:	89 83       	std	Y+1, r24	; 0x01
    4030:	89 81       	ldd	r24, Y+1	; 0x01
    4032:	9a 81       	ldd	r25, Y+2	; 0x02
    4034:	01 97       	sbiw	r24, 0x01	; 1
    4036:	f1 f7       	brne	.-4      	; 0x4034 <LCD_SendCommand+0x1b2>
    4038:	9a 83       	std	Y+2, r25	; 0x02
    403a:	89 83       	std	Y+1, r24	; 0x01
    _delay_ms(2);
    DIO_SetPinLevel(LCD_PIN_E, DIO_LOW);
    403c:	81 e0       	ldi	r24, 0x01	; 1
    403e:	60 e0       	ldi	r22, 0x00	; 0
    4040:	40 e0       	ldi	r20, 0x00	; 0
    4042:	0e 94 f1 0c 	call	0x19e2	; 0x19e2 <DIO_SetPinLevel>
}
    4046:	2f 96       	adiw	r28, 0x0f	; 15
    4048:	0f b6       	in	r0, 0x3f	; 63
    404a:	f8 94       	cli
    404c:	de bf       	out	0x3e, r29	; 62
    404e:	0f be       	out	0x3f, r0	; 63
    4050:	cd bf       	out	0x3d, r28	; 61
    4052:	cf 91       	pop	r28
    4054:	df 91       	pop	r29
    4056:	08 95       	ret

00004058 <LCD_SendData>:

static void LCD_SendData(u8 data) {
    4058:	df 93       	push	r29
    405a:	cf 93       	push	r28
    405c:	cd b7       	in	r28, 0x3d	; 61
    405e:	de b7       	in	r29, 0x3e	; 62
    4060:	2f 97       	sbiw	r28, 0x0f	; 15
    4062:	0f b6       	in	r0, 0x3f	; 63
    4064:	f8 94       	cli
    4066:	de bf       	out	0x3e, r29	; 62
    4068:	0f be       	out	0x3f, r0	; 63
    406a:	cd bf       	out	0x3d, r28	; 61
    406c:	8f 87       	std	Y+15, r24	; 0x0f
    /* Set Control Pins:
        RS : 1 Data
        RW : 0 Write
    */
    DIO_SetPinLevel(LCD_PIN_RS, DIO_HIGH);
    406e:	81 e0       	ldi	r24, 0x01	; 1
    4070:	62 e0       	ldi	r22, 0x02	; 2
    4072:	41 e0       	ldi	r20, 0x01	; 1
    4074:	0e 94 f1 0c 	call	0x19e2	; 0x19e2 <DIO_SetPinLevel>
    DIO_SetPinLevel(LCD_PIN_RW, DIO_LOW);
    4078:	81 e0       	ldi	r24, 0x01	; 1
    407a:	61 e0       	ldi	r22, 0x01	; 1
    407c:	40 e0       	ldi	r20, 0x00	; 0
    407e:	0e 94 f1 0c 	call	0x19e2	; 0x19e2 <DIO_SetPinLevel>

    /* Set Data Pins */
    DIO_SetPinLevel(LCD_PIN_D0, GET_BIT(data, 0));
    4082:	8f 85       	ldd	r24, Y+15	; 0x0f
    4084:	98 2f       	mov	r25, r24
    4086:	91 70       	andi	r25, 0x01	; 1
    4088:	82 e0       	ldi	r24, 0x02	; 2
    408a:	67 e0       	ldi	r22, 0x07	; 7
    408c:	49 2f       	mov	r20, r25
    408e:	0e 94 f1 0c 	call	0x19e2	; 0x19e2 <DIO_SetPinLevel>
    DIO_SetPinLevel(LCD_PIN_D1, GET_BIT(data, 1));
    4092:	8f 85       	ldd	r24, Y+15	; 0x0f
    4094:	86 95       	lsr	r24
    4096:	98 2f       	mov	r25, r24
    4098:	91 70       	andi	r25, 0x01	; 1
    409a:	82 e0       	ldi	r24, 0x02	; 2
    409c:	66 e0       	ldi	r22, 0x06	; 6
    409e:	49 2f       	mov	r20, r25
    40a0:	0e 94 f1 0c 	call	0x19e2	; 0x19e2 <DIO_SetPinLevel>
    DIO_SetPinLevel(LCD_PIN_D2, GET_BIT(data, 2));
    40a4:	8f 85       	ldd	r24, Y+15	; 0x0f
    40a6:	86 95       	lsr	r24
    40a8:	86 95       	lsr	r24
    40aa:	98 2f       	mov	r25, r24
    40ac:	91 70       	andi	r25, 0x01	; 1
    40ae:	82 e0       	ldi	r24, 0x02	; 2
    40b0:	65 e0       	ldi	r22, 0x05	; 5
    40b2:	49 2f       	mov	r20, r25
    40b4:	0e 94 f1 0c 	call	0x19e2	; 0x19e2 <DIO_SetPinLevel>
    DIO_SetPinLevel(LCD_PIN_D3, GET_BIT(data, 3));
    40b8:	8f 85       	ldd	r24, Y+15	; 0x0f
    40ba:	86 95       	lsr	r24
    40bc:	86 95       	lsr	r24
    40be:	86 95       	lsr	r24
    40c0:	98 2f       	mov	r25, r24
    40c2:	91 70       	andi	r25, 0x01	; 1
    40c4:	82 e0       	ldi	r24, 0x02	; 2
    40c6:	64 e0       	ldi	r22, 0x04	; 4
    40c8:	49 2f       	mov	r20, r25
    40ca:	0e 94 f1 0c 	call	0x19e2	; 0x19e2 <DIO_SetPinLevel>
    DIO_SetPinLevel(LCD_PIN_D4, GET_BIT(data, 4));
    40ce:	8f 85       	ldd	r24, Y+15	; 0x0f
    40d0:	82 95       	swap	r24
    40d2:	8f 70       	andi	r24, 0x0F	; 15
    40d4:	98 2f       	mov	r25, r24
    40d6:	91 70       	andi	r25, 0x01	; 1
    40d8:	82 e0       	ldi	r24, 0x02	; 2
    40da:	63 e0       	ldi	r22, 0x03	; 3
    40dc:	49 2f       	mov	r20, r25
    40de:	0e 94 f1 0c 	call	0x19e2	; 0x19e2 <DIO_SetPinLevel>
    DIO_SetPinLevel(LCD_PIN_D5, GET_BIT(data, 5));
    40e2:	8f 85       	ldd	r24, Y+15	; 0x0f
    40e4:	82 95       	swap	r24
    40e6:	86 95       	lsr	r24
    40e8:	87 70       	andi	r24, 0x07	; 7
    40ea:	98 2f       	mov	r25, r24
    40ec:	91 70       	andi	r25, 0x01	; 1
    40ee:	82 e0       	ldi	r24, 0x02	; 2
    40f0:	62 e0       	ldi	r22, 0x02	; 2
    40f2:	49 2f       	mov	r20, r25
    40f4:	0e 94 f1 0c 	call	0x19e2	; 0x19e2 <DIO_SetPinLevel>
    DIO_SetPinLevel(LCD_PIN_D6, GET_BIT(data, 6));
    40f8:	8f 85       	ldd	r24, Y+15	; 0x0f
    40fa:	82 95       	swap	r24
    40fc:	86 95       	lsr	r24
    40fe:	86 95       	lsr	r24
    4100:	83 70       	andi	r24, 0x03	; 3
    4102:	98 2f       	mov	r25, r24
    4104:	91 70       	andi	r25, 0x01	; 1
    4106:	82 e0       	ldi	r24, 0x02	; 2
    4108:	61 e0       	ldi	r22, 0x01	; 1
    410a:	49 2f       	mov	r20, r25
    410c:	0e 94 f1 0c 	call	0x19e2	; 0x19e2 <DIO_SetPinLevel>
    DIO_SetPinLevel(LCD_PIN_D7, GET_BIT(data, 7));
    4110:	8f 85       	ldd	r24, Y+15	; 0x0f
    4112:	98 2f       	mov	r25, r24
    4114:	99 1f       	adc	r25, r25
    4116:	99 27       	eor	r25, r25
    4118:	99 1f       	adc	r25, r25
    411a:	82 e0       	ldi	r24, 0x02	; 2
    411c:	60 e0       	ldi	r22, 0x00	; 0
    411e:	49 2f       	mov	r20, r25
    4120:	0e 94 f1 0c 	call	0x19e2	; 0x19e2 <DIO_SetPinLevel>

    DIO_SetPinLevel(LCD_PIN_E, DIO_HIGH);
    4124:	81 e0       	ldi	r24, 0x01	; 1
    4126:	60 e0       	ldi	r22, 0x00	; 0
    4128:	41 e0       	ldi	r20, 0x01	; 1
    412a:	0e 94 f1 0c 	call	0x19e2	; 0x19e2 <DIO_SetPinLevel>
    412e:	80 e0       	ldi	r24, 0x00	; 0
    4130:	90 e0       	ldi	r25, 0x00	; 0
    4132:	a0 e0       	ldi	r26, 0x00	; 0
    4134:	b0 e4       	ldi	r27, 0x40	; 64
    4136:	8b 87       	std	Y+11, r24	; 0x0b
    4138:	9c 87       	std	Y+12, r25	; 0x0c
    413a:	ad 87       	std	Y+13, r26	; 0x0d
    413c:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    413e:	6b 85       	ldd	r22, Y+11	; 0x0b
    4140:	7c 85       	ldd	r23, Y+12	; 0x0c
    4142:	8d 85       	ldd	r24, Y+13	; 0x0d
    4144:	9e 85       	ldd	r25, Y+14	; 0x0e
    4146:	20 e0       	ldi	r18, 0x00	; 0
    4148:	30 e0       	ldi	r19, 0x00	; 0
    414a:	4a ef       	ldi	r20, 0xFA	; 250
    414c:	54 e4       	ldi	r21, 0x44	; 68
    414e:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    4152:	dc 01       	movw	r26, r24
    4154:	cb 01       	movw	r24, r22
    4156:	8f 83       	std	Y+7, r24	; 0x07
    4158:	98 87       	std	Y+8, r25	; 0x08
    415a:	a9 87       	std	Y+9, r26	; 0x09
    415c:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    415e:	6f 81       	ldd	r22, Y+7	; 0x07
    4160:	78 85       	ldd	r23, Y+8	; 0x08
    4162:	89 85       	ldd	r24, Y+9	; 0x09
    4164:	9a 85       	ldd	r25, Y+10	; 0x0a
    4166:	20 e0       	ldi	r18, 0x00	; 0
    4168:	30 e0       	ldi	r19, 0x00	; 0
    416a:	40 e8       	ldi	r20, 0x80	; 128
    416c:	5f e3       	ldi	r21, 0x3F	; 63
    416e:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    4172:	88 23       	and	r24, r24
    4174:	2c f4       	brge	.+10     	; 0x4180 <LCD_SendData+0x128>
		__ticks = 1;
    4176:	81 e0       	ldi	r24, 0x01	; 1
    4178:	90 e0       	ldi	r25, 0x00	; 0
    417a:	9e 83       	std	Y+6, r25	; 0x06
    417c:	8d 83       	std	Y+5, r24	; 0x05
    417e:	3f c0       	rjmp	.+126    	; 0x41fe <LCD_SendData+0x1a6>
	else if (__tmp > 65535)
    4180:	6f 81       	ldd	r22, Y+7	; 0x07
    4182:	78 85       	ldd	r23, Y+8	; 0x08
    4184:	89 85       	ldd	r24, Y+9	; 0x09
    4186:	9a 85       	ldd	r25, Y+10	; 0x0a
    4188:	20 e0       	ldi	r18, 0x00	; 0
    418a:	3f ef       	ldi	r19, 0xFF	; 255
    418c:	4f e7       	ldi	r20, 0x7F	; 127
    418e:	57 e4       	ldi	r21, 0x47	; 71
    4190:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    4194:	18 16       	cp	r1, r24
    4196:	4c f5       	brge	.+82     	; 0x41ea <LCD_SendData+0x192>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    4198:	6b 85       	ldd	r22, Y+11	; 0x0b
    419a:	7c 85       	ldd	r23, Y+12	; 0x0c
    419c:	8d 85       	ldd	r24, Y+13	; 0x0d
    419e:	9e 85       	ldd	r25, Y+14	; 0x0e
    41a0:	20 e0       	ldi	r18, 0x00	; 0
    41a2:	30 e0       	ldi	r19, 0x00	; 0
    41a4:	40 e2       	ldi	r20, 0x20	; 32
    41a6:	51 e4       	ldi	r21, 0x41	; 65
    41a8:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    41ac:	dc 01       	movw	r26, r24
    41ae:	cb 01       	movw	r24, r22
    41b0:	bc 01       	movw	r22, r24
    41b2:	cd 01       	movw	r24, r26
    41b4:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    41b8:	dc 01       	movw	r26, r24
    41ba:	cb 01       	movw	r24, r22
    41bc:	9e 83       	std	Y+6, r25	; 0x06
    41be:	8d 83       	std	Y+5, r24	; 0x05
    41c0:	0f c0       	rjmp	.+30     	; 0x41e0 <LCD_SendData+0x188>
    41c2:	88 ec       	ldi	r24, 0xC8	; 200
    41c4:	90 e0       	ldi	r25, 0x00	; 0
    41c6:	9c 83       	std	Y+4, r25	; 0x04
    41c8:	8b 83       	std	Y+3, r24	; 0x03
    41ca:	8b 81       	ldd	r24, Y+3	; 0x03
    41cc:	9c 81       	ldd	r25, Y+4	; 0x04
    41ce:	01 97       	sbiw	r24, 0x01	; 1
    41d0:	f1 f7       	brne	.-4      	; 0x41ce <LCD_SendData+0x176>
    41d2:	9c 83       	std	Y+4, r25	; 0x04
    41d4:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    41d6:	8d 81       	ldd	r24, Y+5	; 0x05
    41d8:	9e 81       	ldd	r25, Y+6	; 0x06
    41da:	01 97       	sbiw	r24, 0x01	; 1
    41dc:	9e 83       	std	Y+6, r25	; 0x06
    41de:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    41e0:	8d 81       	ldd	r24, Y+5	; 0x05
    41e2:	9e 81       	ldd	r25, Y+6	; 0x06
    41e4:	00 97       	sbiw	r24, 0x00	; 0
    41e6:	69 f7       	brne	.-38     	; 0x41c2 <LCD_SendData+0x16a>
    41e8:	14 c0       	rjmp	.+40     	; 0x4212 <LCD_SendData+0x1ba>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    41ea:	6f 81       	ldd	r22, Y+7	; 0x07
    41ec:	78 85       	ldd	r23, Y+8	; 0x08
    41ee:	89 85       	ldd	r24, Y+9	; 0x09
    41f0:	9a 85       	ldd	r25, Y+10	; 0x0a
    41f2:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    41f6:	dc 01       	movw	r26, r24
    41f8:	cb 01       	movw	r24, r22
    41fa:	9e 83       	std	Y+6, r25	; 0x06
    41fc:	8d 83       	std	Y+5, r24	; 0x05
    41fe:	8d 81       	ldd	r24, Y+5	; 0x05
    4200:	9e 81       	ldd	r25, Y+6	; 0x06
    4202:	9a 83       	std	Y+2, r25	; 0x02
    4204:	89 83       	std	Y+1, r24	; 0x01
    4206:	89 81       	ldd	r24, Y+1	; 0x01
    4208:	9a 81       	ldd	r25, Y+2	; 0x02
    420a:	01 97       	sbiw	r24, 0x01	; 1
    420c:	f1 f7       	brne	.-4      	; 0x420a <LCD_SendData+0x1b2>
    420e:	9a 83       	std	Y+2, r25	; 0x02
    4210:	89 83       	std	Y+1, r24	; 0x01
    _delay_ms(2);
    DIO_SetPinLevel(LCD_PIN_E, DIO_LOW);
    4212:	81 e0       	ldi	r24, 0x01	; 1
    4214:	60 e0       	ldi	r22, 0x00	; 0
    4216:	40 e0       	ldi	r20, 0x00	; 0
    4218:	0e 94 f1 0c 	call	0x19e2	; 0x19e2 <DIO_SetPinLevel>
}
    421c:	2f 96       	adiw	r28, 0x0f	; 15
    421e:	0f b6       	in	r0, 0x3f	; 63
    4220:	f8 94       	cli
    4222:	de bf       	out	0x3e, r29	; 62
    4224:	0f be       	out	0x3f, r0	; 63
    4226:	cd bf       	out	0x3d, r28	; 61
    4228:	cf 91       	pop	r28
    422a:	df 91       	pop	r29
    422c:	08 95       	ret

0000422e <LCD_InitPinsMode>:


static void LCD_InitPinsMode(void) {
    422e:	df 93       	push	r29
    4230:	cf 93       	push	r28
    4232:	cd b7       	in	r28, 0x3d	; 61
    4234:	de b7       	in	r29, 0x3e	; 62
    DIO_SetPinMode(LCD_PIN_RS, DIO_OUTPUT);
    4236:	81 e0       	ldi	r24, 0x01	; 1
    4238:	62 e0       	ldi	r22, 0x02	; 2
    423a:	42 e0       	ldi	r20, 0x02	; 2
    423c:	0e 94 e3 09 	call	0x13c6	; 0x13c6 <DIO_SetPinMode>
    DIO_SetPinMode(LCD_PIN_RW, DIO_OUTPUT);
    4240:	81 e0       	ldi	r24, 0x01	; 1
    4242:	61 e0       	ldi	r22, 0x01	; 1
    4244:	42 e0       	ldi	r20, 0x02	; 2
    4246:	0e 94 e3 09 	call	0x13c6	; 0x13c6 <DIO_SetPinMode>
    DIO_SetPinMode(LCD_PIN_E , DIO_OUTPUT);
    424a:	81 e0       	ldi	r24, 0x01	; 1
    424c:	60 e0       	ldi	r22, 0x00	; 0
    424e:	42 e0       	ldi	r20, 0x02	; 2
    4250:	0e 94 e3 09 	call	0x13c6	; 0x13c6 <DIO_SetPinMode>
    DIO_SetPinMode(LCD_PIN_D0, DIO_OUTPUT);
    4254:	82 e0       	ldi	r24, 0x02	; 2
    4256:	67 e0       	ldi	r22, 0x07	; 7
    4258:	42 e0       	ldi	r20, 0x02	; 2
    425a:	0e 94 e3 09 	call	0x13c6	; 0x13c6 <DIO_SetPinMode>
    DIO_SetPinMode(LCD_PIN_D1, DIO_OUTPUT);
    425e:	82 e0       	ldi	r24, 0x02	; 2
    4260:	66 e0       	ldi	r22, 0x06	; 6
    4262:	42 e0       	ldi	r20, 0x02	; 2
    4264:	0e 94 e3 09 	call	0x13c6	; 0x13c6 <DIO_SetPinMode>
    DIO_SetPinMode(LCD_PIN_D2, DIO_OUTPUT);
    4268:	82 e0       	ldi	r24, 0x02	; 2
    426a:	65 e0       	ldi	r22, 0x05	; 5
    426c:	42 e0       	ldi	r20, 0x02	; 2
    426e:	0e 94 e3 09 	call	0x13c6	; 0x13c6 <DIO_SetPinMode>
    DIO_SetPinMode(LCD_PIN_D3, DIO_OUTPUT);
    4272:	82 e0       	ldi	r24, 0x02	; 2
    4274:	64 e0       	ldi	r22, 0x04	; 4
    4276:	42 e0       	ldi	r20, 0x02	; 2
    4278:	0e 94 e3 09 	call	0x13c6	; 0x13c6 <DIO_SetPinMode>
    DIO_SetPinMode(LCD_PIN_D4, DIO_OUTPUT);
    427c:	82 e0       	ldi	r24, 0x02	; 2
    427e:	63 e0       	ldi	r22, 0x03	; 3
    4280:	42 e0       	ldi	r20, 0x02	; 2
    4282:	0e 94 e3 09 	call	0x13c6	; 0x13c6 <DIO_SetPinMode>
    DIO_SetPinMode(LCD_PIN_D5, DIO_OUTPUT);
    4286:	82 e0       	ldi	r24, 0x02	; 2
    4288:	62 e0       	ldi	r22, 0x02	; 2
    428a:	42 e0       	ldi	r20, 0x02	; 2
    428c:	0e 94 e3 09 	call	0x13c6	; 0x13c6 <DIO_SetPinMode>
    DIO_SetPinMode(LCD_PIN_D6, DIO_OUTPUT);
    4290:	82 e0       	ldi	r24, 0x02	; 2
    4292:	61 e0       	ldi	r22, 0x01	; 1
    4294:	42 e0       	ldi	r20, 0x02	; 2
    4296:	0e 94 e3 09 	call	0x13c6	; 0x13c6 <DIO_SetPinMode>
    DIO_SetPinMode(LCD_PIN_D7, DIO_OUTPUT);
    429a:	82 e0       	ldi	r24, 0x02	; 2
    429c:	60 e0       	ldi	r22, 0x00	; 0
    429e:	42 e0       	ldi	r20, 0x02	; 2
    42a0:	0e 94 e3 09 	call	0x13c6	; 0x13c6 <DIO_SetPinMode>
}
    42a4:	cf 91       	pop	r28
    42a6:	df 91       	pop	r29
    42a8:	08 95       	ret

000042aa <SPI_Init>:
#include"SPI.h"
#include"SPI_confg.h"
#include "DIO.h"


void SPI_Init(){
    42aa:	df 93       	push	r29
    42ac:	cf 93       	push	r28
    42ae:	cd b7       	in	r28, 0x3d	; 61
    42b0:	de b7       	in	r29, 0x3e	; 62


    SET_BIT(SPCR,SPCR_SPE);
    42b2:	ad e2       	ldi	r26, 0x2D	; 45
    42b4:	b0 e0       	ldi	r27, 0x00	; 0
    42b6:	ed e2       	ldi	r30, 0x2D	; 45
    42b8:	f0 e0       	ldi	r31, 0x00	; 0
    42ba:	80 81       	ld	r24, Z
    42bc:	80 64       	ori	r24, 0x40	; 64
    42be:	8c 93       	st	X, r24
        DIO_SetPinMode(DIO_PORTB,DIO_PIN5,DIO_OUTPUT);
        DIO_SetPinMode(DIO_PORTB,DIO_PIN6,DIO_INPUT_FLOATING);
        DIO_SetPinMode(DIO_PORTB,DIO_PIN7,DIO_OUTPUT);
        DIO_SetPinMode(DIO_PORTB,DIO_PIN4,DIO_OUTPUT);
    #elif (1 || SPI_Mode == SPI_Slave)
        CLR_BIT(SPCR,SPCR_MSTR);
    42c0:	ad e2       	ldi	r26, 0x2D	; 45
    42c2:	b0 e0       	ldi	r27, 0x00	; 0
    42c4:	ed e2       	ldi	r30, 0x2D	; 45
    42c6:	f0 e0       	ldi	r31, 0x00	; 0
    42c8:	80 81       	ld	r24, Z
    42ca:	8f 7e       	andi	r24, 0xEF	; 239
    42cc:	8c 93       	st	X, r24
        DIO_SetPinMode(DIO_PORTB,DIO_PIN5,DIO_INPUT_FLOATING);
    42ce:	81 e0       	ldi	r24, 0x01	; 1
    42d0:	65 e0       	ldi	r22, 0x05	; 5
    42d2:	40 e0       	ldi	r20, 0x00	; 0
    42d4:	0e 94 e3 09 	call	0x13c6	; 0x13c6 <DIO_SetPinMode>
        DIO_SetPinMode(DIO_PORTB,DIO_PIN6,DIO_OUTPUT);
    42d8:	81 e0       	ldi	r24, 0x01	; 1
    42da:	66 e0       	ldi	r22, 0x06	; 6
    42dc:	42 e0       	ldi	r20, 0x02	; 2
    42de:	0e 94 e3 09 	call	0x13c6	; 0x13c6 <DIO_SetPinMode>
        DIO_SetPinMode(DIO_PORTB,DIO_PIN7,DIO_INPUT_FLOATING);
    42e2:	81 e0       	ldi	r24, 0x01	; 1
    42e4:	67 e0       	ldi	r22, 0x07	; 7
    42e6:	40 e0       	ldi	r20, 0x00	; 0
    42e8:	0e 94 e3 09 	call	0x13c6	; 0x13c6 <DIO_SetPinMode>
        DIO_SetPinMode(DIO_PORTB,DIO_PIN4,DIO_INPUT_FLOATING);
    42ec:	81 e0       	ldi	r24, 0x01	; 1
    42ee:	64 e0       	ldi	r22, 0x04	; 4
    42f0:	40 e0       	ldi	r20, 0x00	; 0
    42f2:	0e 94 e3 09 	call	0x13c6	; 0x13c6 <DIO_SetPinMode>
    #endif
    #if (SPI_Direction == LSB)
        SET_BIT(SPCR,SPCR_DORD);
    42f6:	ad e2       	ldi	r26, 0x2D	; 45
    42f8:	b0 e0       	ldi	r27, 0x00	; 0
    42fa:	ed e2       	ldi	r30, 0x2D	; 45
    42fc:	f0 e0       	ldi	r31, 0x00	; 0
    42fe:	80 81       	ld	r24, Z
    4300:	80 62       	ori	r24, 0x20	; 32
    4302:	8c 93       	st	X, r24
    #elif (SPI_Direction == MSB)
        CLR_BIT(SPCR,SPCR_DORD);
    #endif

    
}
    4304:	cf 91       	pop	r28
    4306:	df 91       	pop	r29
    4308:	08 95       	ret

0000430a <SPI_Send_Data>:

void SPI_Send_Data(u8 data){
    430a:	df 93       	push	r29
    430c:	cf 93       	push	r28
    430e:	0f 92       	push	r0
    4310:	cd b7       	in	r28, 0x3d	; 61
    4312:	de b7       	in	r29, 0x3e	; 62
    4314:	89 83       	std	Y+1, r24	; 0x01
    SPDR=data;
    4316:	ef e2       	ldi	r30, 0x2F	; 47
    4318:	f0 e0       	ldi	r31, 0x00	; 0
    431a:	89 81       	ldd	r24, Y+1	; 0x01
    431c:	80 83       	st	Z, r24
    while (GET_BIT(SPSR,7)==0);
    431e:	ee e2       	ldi	r30, 0x2E	; 46
    4320:	f0 e0       	ldi	r31, 0x00	; 0
    4322:	80 81       	ld	r24, Z
    4324:	88 23       	and	r24, r24
    4326:	dc f7       	brge	.-10     	; 0x431e <SPI_Send_Data+0x14>
}
    4328:	0f 90       	pop	r0
    432a:	cf 91       	pop	r28
    432c:	df 91       	pop	r29
    432e:	08 95       	ret

00004330 <SPI_Recieve_Data>:

u8 SPI_Recieve_Data()
{
    4330:	df 93       	push	r29
    4332:	cf 93       	push	r28
    4334:	cd b7       	in	r28, 0x3d	; 61
    4336:	de b7       	in	r29, 0x3e	; 62
    while (GET_BIT(SPSR,7)==0);
    4338:	ee e2       	ldi	r30, 0x2E	; 46
    433a:	f0 e0       	ldi	r31, 0x00	; 0
    433c:	80 81       	ld	r24, Z
    433e:	88 23       	and	r24, r24
    4340:	dc f7       	brge	.-10     	; 0x4338 <SPI_Recieve_Data+0x8>
    return SPDR;
    4342:	ef e2       	ldi	r30, 0x2F	; 47
    4344:	f0 e0       	ldi	r31, 0x00	; 0
    4346:	80 81       	ld	r24, Z
}
    4348:	cf 91       	pop	r28
    434a:	df 91       	pop	r29
    434c:	08 95       	ret

0000434e <SSD_Init>:
	_delay_ms(500);
	PORTD = 0b01101111; // Print 9
	_delay_ms(500);
	PORTD = 0b00000000; // off*/

void SSD_Init(void) {
    434e:	df 93       	push	r29
    4350:	cf 93       	push	r28
    4352:	cd b7       	in	r28, 0x3d	; 61
    4354:	de b7       	in	r29, 0x3e	; 62
    DIO_SetPinMode(SSD_PIN_A, DIO_OUTPUT);
    4356:	82 e0       	ldi	r24, 0x02	; 2
    4358:	60 e0       	ldi	r22, 0x00	; 0
    435a:	42 e0       	ldi	r20, 0x02	; 2
    435c:	0e 94 e3 09 	call	0x13c6	; 0x13c6 <DIO_SetPinMode>
    DIO_SetPinMode(SSD_PIN_B, DIO_OUTPUT);
    4360:	82 e0       	ldi	r24, 0x02	; 2
    4362:	61 e0       	ldi	r22, 0x01	; 1
    4364:	42 e0       	ldi	r20, 0x02	; 2
    4366:	0e 94 e3 09 	call	0x13c6	; 0x13c6 <DIO_SetPinMode>
    DIO_SetPinMode(SSD_PIN_C, DIO_OUTPUT);
    436a:	82 e0       	ldi	r24, 0x02	; 2
    436c:	62 e0       	ldi	r22, 0x02	; 2
    436e:	42 e0       	ldi	r20, 0x02	; 2
    4370:	0e 94 e3 09 	call	0x13c6	; 0x13c6 <DIO_SetPinMode>
    DIO_SetPinMode(SSD_PIN_D, DIO_OUTPUT);
    4374:	82 e0       	ldi	r24, 0x02	; 2
    4376:	63 e0       	ldi	r22, 0x03	; 3
    4378:	42 e0       	ldi	r20, 0x02	; 2
    437a:	0e 94 e3 09 	call	0x13c6	; 0x13c6 <DIO_SetPinMode>
    DIO_SetPinMode(SSD_PIN_E, DIO_OUTPUT);
    437e:	82 e0       	ldi	r24, 0x02	; 2
    4380:	64 e0       	ldi	r22, 0x04	; 4
    4382:	42 e0       	ldi	r20, 0x02	; 2
    4384:	0e 94 e3 09 	call	0x13c6	; 0x13c6 <DIO_SetPinMode>
    DIO_SetPinMode(SSD_PIN_F, DIO_OUTPUT);
    4388:	82 e0       	ldi	r24, 0x02	; 2
    438a:	65 e0       	ldi	r22, 0x05	; 5
    438c:	42 e0       	ldi	r20, 0x02	; 2
    438e:	0e 94 e3 09 	call	0x13c6	; 0x13c6 <DIO_SetPinMode>
    DIO_SetPinMode(SSD_PIN_G, DIO_OUTPUT);
    4392:	82 e0       	ldi	r24, 0x02	; 2
    4394:	66 e0       	ldi	r22, 0x06	; 6
    4396:	42 e0       	ldi	r20, 0x02	; 2
    4398:	0e 94 e3 09 	call	0x13c6	; 0x13c6 <DIO_SetPinMode>

}
    439c:	cf 91       	pop	r28
    439e:	df 91       	pop	r29
    43a0:	08 95       	ret

000043a2 <SSD_Write>:
void SSD_Write (SSD_NumberType number) {
    43a2:	df 93       	push	r29
    43a4:	cf 93       	push	r28
    43a6:	00 d0       	rcall	.+0      	; 0x43a8 <SSD_Write+0x6>
    43a8:	0f 92       	push	r0
    43aa:	cd b7       	in	r28, 0x3d	; 61
    43ac:	de b7       	in	r29, 0x3e	; 62
    43ae:	89 83       	std	Y+1, r24	; 0x01
    switch (number)
    43b0:	89 81       	ldd	r24, Y+1	; 0x01
    43b2:	28 2f       	mov	r18, r24
    43b4:	30 e0       	ldi	r19, 0x00	; 0
    43b6:	3b 83       	std	Y+3, r19	; 0x03
    43b8:	2a 83       	std	Y+2, r18	; 0x02
    43ba:	8a 81       	ldd	r24, Y+2	; 0x02
    43bc:	9b 81       	ldd	r25, Y+3	; 0x03
    43be:	84 30       	cpi	r24, 0x04	; 4
    43c0:	91 05       	cpc	r25, r1
    43c2:	09 f4       	brne	.+2      	; 0x43c6 <SSD_Write+0x24>
    43c4:	d7 c0       	rjmp	.+430    	; 0x4574 <SSD_Write+0x1d2>
    43c6:	2a 81       	ldd	r18, Y+2	; 0x02
    43c8:	3b 81       	ldd	r19, Y+3	; 0x03
    43ca:	25 30       	cpi	r18, 0x05	; 5
    43cc:	31 05       	cpc	r19, r1
    43ce:	ec f4       	brge	.+58     	; 0x440a <SSD_Write+0x68>
    43d0:	8a 81       	ldd	r24, Y+2	; 0x02
    43d2:	9b 81       	ldd	r25, Y+3	; 0x03
    43d4:	81 30       	cpi	r24, 0x01	; 1
    43d6:	91 05       	cpc	r25, r1
    43d8:	09 f4       	brne	.+2      	; 0x43dc <SSD_Write+0x3a>
    43da:	60 c0       	rjmp	.+192    	; 0x449c <SSD_Write+0xfa>
    43dc:	2a 81       	ldd	r18, Y+2	; 0x02
    43de:	3b 81       	ldd	r19, Y+3	; 0x03
    43e0:	22 30       	cpi	r18, 0x02	; 2
    43e2:	31 05       	cpc	r19, r1
    43e4:	2c f4       	brge	.+10     	; 0x43f0 <SSD_Write+0x4e>
    43e6:	8a 81       	ldd	r24, Y+2	; 0x02
    43e8:	9b 81       	ldd	r25, Y+3	; 0x03
    43ea:	00 97       	sbiw	r24, 0x00	; 0
    43ec:	99 f1       	breq	.+102    	; 0x4454 <SSD_Write+0xb2>
    43ee:	9a c1       	rjmp	.+820    	; 0x4724 <SSD_Write+0x382>
    43f0:	2a 81       	ldd	r18, Y+2	; 0x02
    43f2:	3b 81       	ldd	r19, Y+3	; 0x03
    43f4:	22 30       	cpi	r18, 0x02	; 2
    43f6:	31 05       	cpc	r19, r1
    43f8:	09 f4       	brne	.+2      	; 0x43fc <SSD_Write+0x5a>
    43fa:	74 c0       	rjmp	.+232    	; 0x44e4 <SSD_Write+0x142>
    43fc:	8a 81       	ldd	r24, Y+2	; 0x02
    43fe:	9b 81       	ldd	r25, Y+3	; 0x03
    4400:	83 30       	cpi	r24, 0x03	; 3
    4402:	91 05       	cpc	r25, r1
    4404:	09 f4       	brne	.+2      	; 0x4408 <SSD_Write+0x66>
    4406:	92 c0       	rjmp	.+292    	; 0x452c <SSD_Write+0x18a>
    4408:	8d c1       	rjmp	.+794    	; 0x4724 <SSD_Write+0x382>
    440a:	2a 81       	ldd	r18, Y+2	; 0x02
    440c:	3b 81       	ldd	r19, Y+3	; 0x03
    440e:	27 30       	cpi	r18, 0x07	; 7
    4410:	31 05       	cpc	r19, r1
    4412:	09 f4       	brne	.+2      	; 0x4416 <SSD_Write+0x74>
    4414:	1b c1       	rjmp	.+566    	; 0x464c <SSD_Write+0x2aa>
    4416:	8a 81       	ldd	r24, Y+2	; 0x02
    4418:	9b 81       	ldd	r25, Y+3	; 0x03
    441a:	88 30       	cpi	r24, 0x08	; 8
    441c:	91 05       	cpc	r25, r1
    441e:	6c f4       	brge	.+26     	; 0x443a <SSD_Write+0x98>
    4420:	2a 81       	ldd	r18, Y+2	; 0x02
    4422:	3b 81       	ldd	r19, Y+3	; 0x03
    4424:	25 30       	cpi	r18, 0x05	; 5
    4426:	31 05       	cpc	r19, r1
    4428:	09 f4       	brne	.+2      	; 0x442c <SSD_Write+0x8a>
    442a:	c8 c0       	rjmp	.+400    	; 0x45bc <SSD_Write+0x21a>
    442c:	8a 81       	ldd	r24, Y+2	; 0x02
    442e:	9b 81       	ldd	r25, Y+3	; 0x03
    4430:	86 30       	cpi	r24, 0x06	; 6
    4432:	91 05       	cpc	r25, r1
    4434:	09 f4       	brne	.+2      	; 0x4438 <SSD_Write+0x96>
    4436:	e6 c0       	rjmp	.+460    	; 0x4604 <SSD_Write+0x262>
    4438:	75 c1       	rjmp	.+746    	; 0x4724 <SSD_Write+0x382>
    443a:	2a 81       	ldd	r18, Y+2	; 0x02
    443c:	3b 81       	ldd	r19, Y+3	; 0x03
    443e:	28 30       	cpi	r18, 0x08	; 8
    4440:	31 05       	cpc	r19, r1
    4442:	09 f4       	brne	.+2      	; 0x4446 <SSD_Write+0xa4>
    4444:	27 c1       	rjmp	.+590    	; 0x4694 <SSD_Write+0x2f2>
    4446:	8a 81       	ldd	r24, Y+2	; 0x02
    4448:	9b 81       	ldd	r25, Y+3	; 0x03
    444a:	89 30       	cpi	r24, 0x09	; 9
    444c:	91 05       	cpc	r25, r1
    444e:	09 f4       	brne	.+2      	; 0x4452 <SSD_Write+0xb0>
    4450:	45 c1       	rjmp	.+650    	; 0x46dc <SSD_Write+0x33a>
    4452:	68 c1       	rjmp	.+720    	; 0x4724 <SSD_Write+0x382>
    {

    case SSD_NUMBER_0: // 0b00111111
    #if SSD_TYPE == COMM_CATHODE
        DIO_SetPinLevel(SSD_PIN_A, DIO_HIGH);
    4454:	82 e0       	ldi	r24, 0x02	; 2
    4456:	60 e0       	ldi	r22, 0x00	; 0
    4458:	41 e0       	ldi	r20, 0x01	; 1
    445a:	0e 94 f1 0c 	call	0x19e2	; 0x19e2 <DIO_SetPinLevel>
        DIO_SetPinLevel(SSD_PIN_B, DIO_HIGH);
    445e:	82 e0       	ldi	r24, 0x02	; 2
    4460:	61 e0       	ldi	r22, 0x01	; 1
    4462:	41 e0       	ldi	r20, 0x01	; 1
    4464:	0e 94 f1 0c 	call	0x19e2	; 0x19e2 <DIO_SetPinLevel>
        DIO_SetPinLevel(SSD_PIN_C, DIO_HIGH);
    4468:	82 e0       	ldi	r24, 0x02	; 2
    446a:	62 e0       	ldi	r22, 0x02	; 2
    446c:	41 e0       	ldi	r20, 0x01	; 1
    446e:	0e 94 f1 0c 	call	0x19e2	; 0x19e2 <DIO_SetPinLevel>
        DIO_SetPinLevel(SSD_PIN_D, DIO_HIGH);
    4472:	82 e0       	ldi	r24, 0x02	; 2
    4474:	63 e0       	ldi	r22, 0x03	; 3
    4476:	41 e0       	ldi	r20, 0x01	; 1
    4478:	0e 94 f1 0c 	call	0x19e2	; 0x19e2 <DIO_SetPinLevel>
        DIO_SetPinLevel(SSD_PIN_E, DIO_HIGH);
    447c:	82 e0       	ldi	r24, 0x02	; 2
    447e:	64 e0       	ldi	r22, 0x04	; 4
    4480:	41 e0       	ldi	r20, 0x01	; 1
    4482:	0e 94 f1 0c 	call	0x19e2	; 0x19e2 <DIO_SetPinLevel>
        DIO_SetPinLevel(SSD_PIN_F, DIO_HIGH);
    4486:	82 e0       	ldi	r24, 0x02	; 2
    4488:	65 e0       	ldi	r22, 0x05	; 5
    448a:	41 e0       	ldi	r20, 0x01	; 1
    448c:	0e 94 f1 0c 	call	0x19e2	; 0x19e2 <DIO_SetPinLevel>
        DIO_SetPinLevel(SSD_PIN_G, DIO_LOW);
    4490:	82 e0       	ldi	r24, 0x02	; 2
    4492:	66 e0       	ldi	r22, 0x06	; 6
    4494:	40 e0       	ldi	r20, 0x00	; 0
    4496:	0e 94 f1 0c 	call	0x19e2	; 0x19e2 <DIO_SetPinLevel>
    449a:	67 c1       	rjmp	.+718    	; 0x476a <SSD_Write+0x3c8>
    #endif
        break;

    case SSD_NUMBER_1: // 0b00000110
    #if SSD_TYPE == COMM_CATHODE
        DIO_SetPinLevel(SSD_PIN_A, DIO_LOW);
    449c:	82 e0       	ldi	r24, 0x02	; 2
    449e:	60 e0       	ldi	r22, 0x00	; 0
    44a0:	40 e0       	ldi	r20, 0x00	; 0
    44a2:	0e 94 f1 0c 	call	0x19e2	; 0x19e2 <DIO_SetPinLevel>
        DIO_SetPinLevel(SSD_PIN_B, DIO_HIGH);
    44a6:	82 e0       	ldi	r24, 0x02	; 2
    44a8:	61 e0       	ldi	r22, 0x01	; 1
    44aa:	41 e0       	ldi	r20, 0x01	; 1
    44ac:	0e 94 f1 0c 	call	0x19e2	; 0x19e2 <DIO_SetPinLevel>
        DIO_SetPinLevel(SSD_PIN_C, DIO_HIGH);
    44b0:	82 e0       	ldi	r24, 0x02	; 2
    44b2:	62 e0       	ldi	r22, 0x02	; 2
    44b4:	41 e0       	ldi	r20, 0x01	; 1
    44b6:	0e 94 f1 0c 	call	0x19e2	; 0x19e2 <DIO_SetPinLevel>
        DIO_SetPinLevel(SSD_PIN_D, DIO_LOW);
    44ba:	82 e0       	ldi	r24, 0x02	; 2
    44bc:	63 e0       	ldi	r22, 0x03	; 3
    44be:	40 e0       	ldi	r20, 0x00	; 0
    44c0:	0e 94 f1 0c 	call	0x19e2	; 0x19e2 <DIO_SetPinLevel>
        DIO_SetPinLevel(SSD_PIN_E, DIO_LOW);
    44c4:	82 e0       	ldi	r24, 0x02	; 2
    44c6:	64 e0       	ldi	r22, 0x04	; 4
    44c8:	40 e0       	ldi	r20, 0x00	; 0
    44ca:	0e 94 f1 0c 	call	0x19e2	; 0x19e2 <DIO_SetPinLevel>
        DIO_SetPinLevel(SSD_PIN_F, DIO_LOW);
    44ce:	82 e0       	ldi	r24, 0x02	; 2
    44d0:	65 e0       	ldi	r22, 0x05	; 5
    44d2:	40 e0       	ldi	r20, 0x00	; 0
    44d4:	0e 94 f1 0c 	call	0x19e2	; 0x19e2 <DIO_SetPinLevel>
        DIO_SetPinLevel(SSD_PIN_G, DIO_LOW);
    44d8:	82 e0       	ldi	r24, 0x02	; 2
    44da:	66 e0       	ldi	r22, 0x06	; 6
    44dc:	40 e0       	ldi	r20, 0x00	; 0
    44de:	0e 94 f1 0c 	call	0x19e2	; 0x19e2 <DIO_SetPinLevel>
    44e2:	43 c1       	rjmp	.+646    	; 0x476a <SSD_Write+0x3c8>
    #endif
        break;

    case SSD_NUMBER_2: // 0b01011011
    #if SSD_TYPE == COMM_CATHODE
        DIO_SetPinLevel(SSD_PIN_A, DIO_HIGH);
    44e4:	82 e0       	ldi	r24, 0x02	; 2
    44e6:	60 e0       	ldi	r22, 0x00	; 0
    44e8:	41 e0       	ldi	r20, 0x01	; 1
    44ea:	0e 94 f1 0c 	call	0x19e2	; 0x19e2 <DIO_SetPinLevel>
        DIO_SetPinLevel(SSD_PIN_B, DIO_HIGH);
    44ee:	82 e0       	ldi	r24, 0x02	; 2
    44f0:	61 e0       	ldi	r22, 0x01	; 1
    44f2:	41 e0       	ldi	r20, 0x01	; 1
    44f4:	0e 94 f1 0c 	call	0x19e2	; 0x19e2 <DIO_SetPinLevel>
        DIO_SetPinLevel(SSD_PIN_C, DIO_LOW);
    44f8:	82 e0       	ldi	r24, 0x02	; 2
    44fa:	62 e0       	ldi	r22, 0x02	; 2
    44fc:	40 e0       	ldi	r20, 0x00	; 0
    44fe:	0e 94 f1 0c 	call	0x19e2	; 0x19e2 <DIO_SetPinLevel>
        DIO_SetPinLevel(SSD_PIN_D, DIO_HIGH);
    4502:	82 e0       	ldi	r24, 0x02	; 2
    4504:	63 e0       	ldi	r22, 0x03	; 3
    4506:	41 e0       	ldi	r20, 0x01	; 1
    4508:	0e 94 f1 0c 	call	0x19e2	; 0x19e2 <DIO_SetPinLevel>
        DIO_SetPinLevel(SSD_PIN_E, DIO_HIGH);
    450c:	82 e0       	ldi	r24, 0x02	; 2
    450e:	64 e0       	ldi	r22, 0x04	; 4
    4510:	41 e0       	ldi	r20, 0x01	; 1
    4512:	0e 94 f1 0c 	call	0x19e2	; 0x19e2 <DIO_SetPinLevel>
        DIO_SetPinLevel(SSD_PIN_F, DIO_LOW);
    4516:	82 e0       	ldi	r24, 0x02	; 2
    4518:	65 e0       	ldi	r22, 0x05	; 5
    451a:	40 e0       	ldi	r20, 0x00	; 0
    451c:	0e 94 f1 0c 	call	0x19e2	; 0x19e2 <DIO_SetPinLevel>
        DIO_SetPinLevel(SSD_PIN_G, DIO_HIGH);
    4520:	82 e0       	ldi	r24, 0x02	; 2
    4522:	66 e0       	ldi	r22, 0x06	; 6
    4524:	41 e0       	ldi	r20, 0x01	; 1
    4526:	0e 94 f1 0c 	call	0x19e2	; 0x19e2 <DIO_SetPinLevel>
    452a:	1f c1       	rjmp	.+574    	; 0x476a <SSD_Write+0x3c8>

        break;

    case SSD_NUMBER_3: // 0b01001111
    #if SSD_TYPE == COMM_CATHODE
        DIO_SetPinLevel(SSD_PIN_A, DIO_HIGH);
    452c:	82 e0       	ldi	r24, 0x02	; 2
    452e:	60 e0       	ldi	r22, 0x00	; 0
    4530:	41 e0       	ldi	r20, 0x01	; 1
    4532:	0e 94 f1 0c 	call	0x19e2	; 0x19e2 <DIO_SetPinLevel>
        DIO_SetPinLevel(SSD_PIN_B, DIO_HIGH);
    4536:	82 e0       	ldi	r24, 0x02	; 2
    4538:	61 e0       	ldi	r22, 0x01	; 1
    453a:	41 e0       	ldi	r20, 0x01	; 1
    453c:	0e 94 f1 0c 	call	0x19e2	; 0x19e2 <DIO_SetPinLevel>
        DIO_SetPinLevel(SSD_PIN_C, DIO_HIGH);
    4540:	82 e0       	ldi	r24, 0x02	; 2
    4542:	62 e0       	ldi	r22, 0x02	; 2
    4544:	41 e0       	ldi	r20, 0x01	; 1
    4546:	0e 94 f1 0c 	call	0x19e2	; 0x19e2 <DIO_SetPinLevel>
        DIO_SetPinLevel(SSD_PIN_D, DIO_HIGH);
    454a:	82 e0       	ldi	r24, 0x02	; 2
    454c:	63 e0       	ldi	r22, 0x03	; 3
    454e:	41 e0       	ldi	r20, 0x01	; 1
    4550:	0e 94 f1 0c 	call	0x19e2	; 0x19e2 <DIO_SetPinLevel>
        DIO_SetPinLevel(SSD_PIN_E, DIO_LOW);
    4554:	82 e0       	ldi	r24, 0x02	; 2
    4556:	64 e0       	ldi	r22, 0x04	; 4
    4558:	40 e0       	ldi	r20, 0x00	; 0
    455a:	0e 94 f1 0c 	call	0x19e2	; 0x19e2 <DIO_SetPinLevel>
        DIO_SetPinLevel(SSD_PIN_F, DIO_LOW);
    455e:	82 e0       	ldi	r24, 0x02	; 2
    4560:	65 e0       	ldi	r22, 0x05	; 5
    4562:	40 e0       	ldi	r20, 0x00	; 0
    4564:	0e 94 f1 0c 	call	0x19e2	; 0x19e2 <DIO_SetPinLevel>
        DIO_SetPinLevel(SSD_PIN_G, DIO_HIGH);
    4568:	82 e0       	ldi	r24, 0x02	; 2
    456a:	66 e0       	ldi	r22, 0x06	; 6
    456c:	41 e0       	ldi	r20, 0x01	; 1
    456e:	0e 94 f1 0c 	call	0x19e2	; 0x19e2 <DIO_SetPinLevel>
    4572:	fb c0       	rjmp	.+502    	; 0x476a <SSD_Write+0x3c8>
    #endif

        break;
    case SSD_NUMBER_4: // 0b01100110
    #if SSD_TYPE == COMM_CATHODE
        DIO_SetPinLevel(SSD_PIN_A, DIO_LOW);
    4574:	82 e0       	ldi	r24, 0x02	; 2
    4576:	60 e0       	ldi	r22, 0x00	; 0
    4578:	40 e0       	ldi	r20, 0x00	; 0
    457a:	0e 94 f1 0c 	call	0x19e2	; 0x19e2 <DIO_SetPinLevel>
        DIO_SetPinLevel(SSD_PIN_B, DIO_HIGH);
    457e:	82 e0       	ldi	r24, 0x02	; 2
    4580:	61 e0       	ldi	r22, 0x01	; 1
    4582:	41 e0       	ldi	r20, 0x01	; 1
    4584:	0e 94 f1 0c 	call	0x19e2	; 0x19e2 <DIO_SetPinLevel>
        DIO_SetPinLevel(SSD_PIN_C, DIO_HIGH);
    4588:	82 e0       	ldi	r24, 0x02	; 2
    458a:	62 e0       	ldi	r22, 0x02	; 2
    458c:	41 e0       	ldi	r20, 0x01	; 1
    458e:	0e 94 f1 0c 	call	0x19e2	; 0x19e2 <DIO_SetPinLevel>
        DIO_SetPinLevel(SSD_PIN_D, DIO_LOW);
    4592:	82 e0       	ldi	r24, 0x02	; 2
    4594:	63 e0       	ldi	r22, 0x03	; 3
    4596:	40 e0       	ldi	r20, 0x00	; 0
    4598:	0e 94 f1 0c 	call	0x19e2	; 0x19e2 <DIO_SetPinLevel>
        DIO_SetPinLevel(SSD_PIN_E, DIO_LOW);
    459c:	82 e0       	ldi	r24, 0x02	; 2
    459e:	64 e0       	ldi	r22, 0x04	; 4
    45a0:	40 e0       	ldi	r20, 0x00	; 0
    45a2:	0e 94 f1 0c 	call	0x19e2	; 0x19e2 <DIO_SetPinLevel>
        DIO_SetPinLevel(SSD_PIN_F, DIO_HIGH);
    45a6:	82 e0       	ldi	r24, 0x02	; 2
    45a8:	65 e0       	ldi	r22, 0x05	; 5
    45aa:	41 e0       	ldi	r20, 0x01	; 1
    45ac:	0e 94 f1 0c 	call	0x19e2	; 0x19e2 <DIO_SetPinLevel>
        DIO_SetPinLevel(SSD_PIN_G, DIO_HIGH);
    45b0:	82 e0       	ldi	r24, 0x02	; 2
    45b2:	66 e0       	ldi	r22, 0x06	; 6
    45b4:	41 e0       	ldi	r20, 0x01	; 1
    45b6:	0e 94 f1 0c 	call	0x19e2	; 0x19e2 <DIO_SetPinLevel>
    45ba:	d7 c0       	rjmp	.+430    	; 0x476a <SSD_Write+0x3c8>
    #endif

        break;
    case SSD_NUMBER_5: // 0b01101101
    #if SSD_TYPE == COMM_CATHODE
        DIO_SetPinLevel(SSD_PIN_A, DIO_HIGH);
    45bc:	82 e0       	ldi	r24, 0x02	; 2
    45be:	60 e0       	ldi	r22, 0x00	; 0
    45c0:	41 e0       	ldi	r20, 0x01	; 1
    45c2:	0e 94 f1 0c 	call	0x19e2	; 0x19e2 <DIO_SetPinLevel>
        DIO_SetPinLevel(SSD_PIN_B, DIO_LOW);
    45c6:	82 e0       	ldi	r24, 0x02	; 2
    45c8:	61 e0       	ldi	r22, 0x01	; 1
    45ca:	40 e0       	ldi	r20, 0x00	; 0
    45cc:	0e 94 f1 0c 	call	0x19e2	; 0x19e2 <DIO_SetPinLevel>
        DIO_SetPinLevel(SSD_PIN_C, DIO_HIGH);
    45d0:	82 e0       	ldi	r24, 0x02	; 2
    45d2:	62 e0       	ldi	r22, 0x02	; 2
    45d4:	41 e0       	ldi	r20, 0x01	; 1
    45d6:	0e 94 f1 0c 	call	0x19e2	; 0x19e2 <DIO_SetPinLevel>
        DIO_SetPinLevel(SSD_PIN_D, DIO_HIGH);
    45da:	82 e0       	ldi	r24, 0x02	; 2
    45dc:	63 e0       	ldi	r22, 0x03	; 3
    45de:	41 e0       	ldi	r20, 0x01	; 1
    45e0:	0e 94 f1 0c 	call	0x19e2	; 0x19e2 <DIO_SetPinLevel>
        DIO_SetPinLevel(SSD_PIN_E, DIO_LOW);
    45e4:	82 e0       	ldi	r24, 0x02	; 2
    45e6:	64 e0       	ldi	r22, 0x04	; 4
    45e8:	40 e0       	ldi	r20, 0x00	; 0
    45ea:	0e 94 f1 0c 	call	0x19e2	; 0x19e2 <DIO_SetPinLevel>
        DIO_SetPinLevel(SSD_PIN_F, DIO_HIGH);
    45ee:	82 e0       	ldi	r24, 0x02	; 2
    45f0:	65 e0       	ldi	r22, 0x05	; 5
    45f2:	41 e0       	ldi	r20, 0x01	; 1
    45f4:	0e 94 f1 0c 	call	0x19e2	; 0x19e2 <DIO_SetPinLevel>
        DIO_SetPinLevel(SSD_PIN_G, DIO_HIGH);
    45f8:	82 e0       	ldi	r24, 0x02	; 2
    45fa:	66 e0       	ldi	r22, 0x06	; 6
    45fc:	41 e0       	ldi	r20, 0x01	; 1
    45fe:	0e 94 f1 0c 	call	0x19e2	; 0x19e2 <DIO_SetPinLevel>
    4602:	b3 c0       	rjmp	.+358    	; 0x476a <SSD_Write+0x3c8>
    #endif

        break;
    case SSD_NUMBER_6: // 0b01111101
            #if SSD_TYPE == COMM_CATHODE
        DIO_SetPinLevel(SSD_PIN_A, DIO_HIGH);
    4604:	82 e0       	ldi	r24, 0x02	; 2
    4606:	60 e0       	ldi	r22, 0x00	; 0
    4608:	41 e0       	ldi	r20, 0x01	; 1
    460a:	0e 94 f1 0c 	call	0x19e2	; 0x19e2 <DIO_SetPinLevel>
        DIO_SetPinLevel(SSD_PIN_B, DIO_LOW);
    460e:	82 e0       	ldi	r24, 0x02	; 2
    4610:	61 e0       	ldi	r22, 0x01	; 1
    4612:	40 e0       	ldi	r20, 0x00	; 0
    4614:	0e 94 f1 0c 	call	0x19e2	; 0x19e2 <DIO_SetPinLevel>
        DIO_SetPinLevel(SSD_PIN_C, DIO_HIGH);
    4618:	82 e0       	ldi	r24, 0x02	; 2
    461a:	62 e0       	ldi	r22, 0x02	; 2
    461c:	41 e0       	ldi	r20, 0x01	; 1
    461e:	0e 94 f1 0c 	call	0x19e2	; 0x19e2 <DIO_SetPinLevel>
        DIO_SetPinLevel(SSD_PIN_D, DIO_HIGH);
    4622:	82 e0       	ldi	r24, 0x02	; 2
    4624:	63 e0       	ldi	r22, 0x03	; 3
    4626:	41 e0       	ldi	r20, 0x01	; 1
    4628:	0e 94 f1 0c 	call	0x19e2	; 0x19e2 <DIO_SetPinLevel>
        DIO_SetPinLevel(SSD_PIN_E, DIO_HIGH);
    462c:	82 e0       	ldi	r24, 0x02	; 2
    462e:	64 e0       	ldi	r22, 0x04	; 4
    4630:	41 e0       	ldi	r20, 0x01	; 1
    4632:	0e 94 f1 0c 	call	0x19e2	; 0x19e2 <DIO_SetPinLevel>
        DIO_SetPinLevel(SSD_PIN_F, DIO_HIGH);
    4636:	82 e0       	ldi	r24, 0x02	; 2
    4638:	65 e0       	ldi	r22, 0x05	; 5
    463a:	41 e0       	ldi	r20, 0x01	; 1
    463c:	0e 94 f1 0c 	call	0x19e2	; 0x19e2 <DIO_SetPinLevel>
        DIO_SetPinLevel(SSD_PIN_G, DIO_HIGH);
    4640:	82 e0       	ldi	r24, 0x02	; 2
    4642:	66 e0       	ldi	r22, 0x06	; 6
    4644:	41 e0       	ldi	r20, 0x01	; 1
    4646:	0e 94 f1 0c 	call	0x19e2	; 0x19e2 <DIO_SetPinLevel>
    464a:	8f c0       	rjmp	.+286    	; 0x476a <SSD_Write+0x3c8>
        #error "Invalid SSD Type"
    #endif
        break;
    case SSD_NUMBER_7: // 0b00000111
        #if SSD_TYPE == COMM_CATHODE
        DIO_SetPinLevel(SSD_PIN_A, DIO_HIGH);
    464c:	82 e0       	ldi	r24, 0x02	; 2
    464e:	60 e0       	ldi	r22, 0x00	; 0
    4650:	41 e0       	ldi	r20, 0x01	; 1
    4652:	0e 94 f1 0c 	call	0x19e2	; 0x19e2 <DIO_SetPinLevel>
        DIO_SetPinLevel(SSD_PIN_B, DIO_HIGH);
    4656:	82 e0       	ldi	r24, 0x02	; 2
    4658:	61 e0       	ldi	r22, 0x01	; 1
    465a:	41 e0       	ldi	r20, 0x01	; 1
    465c:	0e 94 f1 0c 	call	0x19e2	; 0x19e2 <DIO_SetPinLevel>
        DIO_SetPinLevel(SSD_PIN_C, DIO_HIGH);
    4660:	82 e0       	ldi	r24, 0x02	; 2
    4662:	62 e0       	ldi	r22, 0x02	; 2
    4664:	41 e0       	ldi	r20, 0x01	; 1
    4666:	0e 94 f1 0c 	call	0x19e2	; 0x19e2 <DIO_SetPinLevel>
        DIO_SetPinLevel(SSD_PIN_D, DIO_LOW);
    466a:	82 e0       	ldi	r24, 0x02	; 2
    466c:	63 e0       	ldi	r22, 0x03	; 3
    466e:	40 e0       	ldi	r20, 0x00	; 0
    4670:	0e 94 f1 0c 	call	0x19e2	; 0x19e2 <DIO_SetPinLevel>
        DIO_SetPinLevel(SSD_PIN_E, DIO_LOW);
    4674:	82 e0       	ldi	r24, 0x02	; 2
    4676:	64 e0       	ldi	r22, 0x04	; 4
    4678:	40 e0       	ldi	r20, 0x00	; 0
    467a:	0e 94 f1 0c 	call	0x19e2	; 0x19e2 <DIO_SetPinLevel>
        DIO_SetPinLevel(SSD_PIN_F, DIO_LOW);
    467e:	82 e0       	ldi	r24, 0x02	; 2
    4680:	65 e0       	ldi	r22, 0x05	; 5
    4682:	40 e0       	ldi	r20, 0x00	; 0
    4684:	0e 94 f1 0c 	call	0x19e2	; 0x19e2 <DIO_SetPinLevel>
        DIO_SetPinLevel(SSD_PIN_G, DIO_LOW);
    4688:	82 e0       	ldi	r24, 0x02	; 2
    468a:	66 e0       	ldi	r22, 0x06	; 6
    468c:	40 e0       	ldi	r20, 0x00	; 0
    468e:	0e 94 f1 0c 	call	0x19e2	; 0x19e2 <DIO_SetPinLevel>
    4692:	6b c0       	rjmp	.+214    	; 0x476a <SSD_Write+0x3c8>
    #endif

        break;
    case SSD_NUMBER_8: // 0b01111111
    #if SSD_TYPE == COMM_CATHODE
        DIO_SetPinLevel(SSD_PIN_A, DIO_HIGH);
    4694:	82 e0       	ldi	r24, 0x02	; 2
    4696:	60 e0       	ldi	r22, 0x00	; 0
    4698:	41 e0       	ldi	r20, 0x01	; 1
    469a:	0e 94 f1 0c 	call	0x19e2	; 0x19e2 <DIO_SetPinLevel>
        DIO_SetPinLevel(SSD_PIN_B, DIO_HIGH);
    469e:	82 e0       	ldi	r24, 0x02	; 2
    46a0:	61 e0       	ldi	r22, 0x01	; 1
    46a2:	41 e0       	ldi	r20, 0x01	; 1
    46a4:	0e 94 f1 0c 	call	0x19e2	; 0x19e2 <DIO_SetPinLevel>
        DIO_SetPinLevel(SSD_PIN_C, DIO_HIGH);
    46a8:	82 e0       	ldi	r24, 0x02	; 2
    46aa:	62 e0       	ldi	r22, 0x02	; 2
    46ac:	41 e0       	ldi	r20, 0x01	; 1
    46ae:	0e 94 f1 0c 	call	0x19e2	; 0x19e2 <DIO_SetPinLevel>
        DIO_SetPinLevel(SSD_PIN_D, DIO_HIGH);
    46b2:	82 e0       	ldi	r24, 0x02	; 2
    46b4:	63 e0       	ldi	r22, 0x03	; 3
    46b6:	41 e0       	ldi	r20, 0x01	; 1
    46b8:	0e 94 f1 0c 	call	0x19e2	; 0x19e2 <DIO_SetPinLevel>
        DIO_SetPinLevel(SSD_PIN_E, DIO_HIGH);
    46bc:	82 e0       	ldi	r24, 0x02	; 2
    46be:	64 e0       	ldi	r22, 0x04	; 4
    46c0:	41 e0       	ldi	r20, 0x01	; 1
    46c2:	0e 94 f1 0c 	call	0x19e2	; 0x19e2 <DIO_SetPinLevel>
        DIO_SetPinLevel(SSD_PIN_F, DIO_HIGH);
    46c6:	82 e0       	ldi	r24, 0x02	; 2
    46c8:	65 e0       	ldi	r22, 0x05	; 5
    46ca:	41 e0       	ldi	r20, 0x01	; 1
    46cc:	0e 94 f1 0c 	call	0x19e2	; 0x19e2 <DIO_SetPinLevel>
        DIO_SetPinLevel(SSD_PIN_G, DIO_HIGH);
    46d0:	82 e0       	ldi	r24, 0x02	; 2
    46d2:	66 e0       	ldi	r22, 0x06	; 6
    46d4:	41 e0       	ldi	r20, 0x01	; 1
    46d6:	0e 94 f1 0c 	call	0x19e2	; 0x19e2 <DIO_SetPinLevel>
    46da:	47 c0       	rjmp	.+142    	; 0x476a <SSD_Write+0x3c8>
    #endif

        break;
    case SSD_NUMBER_9: // 0b01101111
    #if SSD_TYPE == COMM_CATHODE
        DIO_SetPinLevel(SSD_PIN_A, DIO_HIGH);
    46dc:	82 e0       	ldi	r24, 0x02	; 2
    46de:	60 e0       	ldi	r22, 0x00	; 0
    46e0:	41 e0       	ldi	r20, 0x01	; 1
    46e2:	0e 94 f1 0c 	call	0x19e2	; 0x19e2 <DIO_SetPinLevel>
        DIO_SetPinLevel(SSD_PIN_B, DIO_HIGH);
    46e6:	82 e0       	ldi	r24, 0x02	; 2
    46e8:	61 e0       	ldi	r22, 0x01	; 1
    46ea:	41 e0       	ldi	r20, 0x01	; 1
    46ec:	0e 94 f1 0c 	call	0x19e2	; 0x19e2 <DIO_SetPinLevel>
        DIO_SetPinLevel(SSD_PIN_C, DIO_HIGH);
    46f0:	82 e0       	ldi	r24, 0x02	; 2
    46f2:	62 e0       	ldi	r22, 0x02	; 2
    46f4:	41 e0       	ldi	r20, 0x01	; 1
    46f6:	0e 94 f1 0c 	call	0x19e2	; 0x19e2 <DIO_SetPinLevel>
        DIO_SetPinLevel(SSD_PIN_D, DIO_HIGH);
    46fa:	82 e0       	ldi	r24, 0x02	; 2
    46fc:	63 e0       	ldi	r22, 0x03	; 3
    46fe:	41 e0       	ldi	r20, 0x01	; 1
    4700:	0e 94 f1 0c 	call	0x19e2	; 0x19e2 <DIO_SetPinLevel>
        DIO_SetPinLevel(SSD_PIN_E, DIO_LOW);
    4704:	82 e0       	ldi	r24, 0x02	; 2
    4706:	64 e0       	ldi	r22, 0x04	; 4
    4708:	40 e0       	ldi	r20, 0x00	; 0
    470a:	0e 94 f1 0c 	call	0x19e2	; 0x19e2 <DIO_SetPinLevel>
        DIO_SetPinLevel(SSD_PIN_F, DIO_HIGH);
    470e:	82 e0       	ldi	r24, 0x02	; 2
    4710:	65 e0       	ldi	r22, 0x05	; 5
    4712:	41 e0       	ldi	r20, 0x01	; 1
    4714:	0e 94 f1 0c 	call	0x19e2	; 0x19e2 <DIO_SetPinLevel>
        DIO_SetPinLevel(SSD_PIN_G, DIO_HIGH);
    4718:	82 e0       	ldi	r24, 0x02	; 2
    471a:	66 e0       	ldi	r22, 0x06	; 6
    471c:	41 e0       	ldi	r20, 0x01	; 1
    471e:	0e 94 f1 0c 	call	0x19e2	; 0x19e2 <DIO_SetPinLevel>
    4722:	23 c0       	rjmp	.+70     	; 0x476a <SSD_Write+0x3c8>
        break;

    case SSD_OFF:
    default:
    #if SSD_TYPE == COMM_CATHODE
        DIO_SetPinLevel(SSD_PIN_A, DIO_LOW);
    4724:	82 e0       	ldi	r24, 0x02	; 2
    4726:	60 e0       	ldi	r22, 0x00	; 0
    4728:	40 e0       	ldi	r20, 0x00	; 0
    472a:	0e 94 f1 0c 	call	0x19e2	; 0x19e2 <DIO_SetPinLevel>
        DIO_SetPinLevel(SSD_PIN_B, DIO_LOW);
    472e:	82 e0       	ldi	r24, 0x02	; 2
    4730:	61 e0       	ldi	r22, 0x01	; 1
    4732:	40 e0       	ldi	r20, 0x00	; 0
    4734:	0e 94 f1 0c 	call	0x19e2	; 0x19e2 <DIO_SetPinLevel>
        DIO_SetPinLevel(SSD_PIN_C, DIO_LOW);
    4738:	82 e0       	ldi	r24, 0x02	; 2
    473a:	62 e0       	ldi	r22, 0x02	; 2
    473c:	40 e0       	ldi	r20, 0x00	; 0
    473e:	0e 94 f1 0c 	call	0x19e2	; 0x19e2 <DIO_SetPinLevel>
        DIO_SetPinLevel(SSD_PIN_D, DIO_LOW);
    4742:	82 e0       	ldi	r24, 0x02	; 2
    4744:	63 e0       	ldi	r22, 0x03	; 3
    4746:	40 e0       	ldi	r20, 0x00	; 0
    4748:	0e 94 f1 0c 	call	0x19e2	; 0x19e2 <DIO_SetPinLevel>
        DIO_SetPinLevel(SSD_PIN_E, DIO_LOW);
    474c:	82 e0       	ldi	r24, 0x02	; 2
    474e:	64 e0       	ldi	r22, 0x04	; 4
    4750:	40 e0       	ldi	r20, 0x00	; 0
    4752:	0e 94 f1 0c 	call	0x19e2	; 0x19e2 <DIO_SetPinLevel>
        DIO_SetPinLevel(SSD_PIN_F, DIO_LOW);
    4756:	82 e0       	ldi	r24, 0x02	; 2
    4758:	65 e0       	ldi	r22, 0x05	; 5
    475a:	40 e0       	ldi	r20, 0x00	; 0
    475c:	0e 94 f1 0c 	call	0x19e2	; 0x19e2 <DIO_SetPinLevel>
        DIO_SetPinLevel(SSD_PIN_G, DIO_LOW);
    4760:	82 e0       	ldi	r24, 0x02	; 2
    4762:	66 e0       	ldi	r22, 0x06	; 6
    4764:	40 e0       	ldi	r20, 0x00	; 0
    4766:	0e 94 f1 0c 	call	0x19e2	; 0x19e2 <DIO_SetPinLevel>
    #else
        #error "Invalid SSD Type"
    #endif
        break;
    }
}
    476a:	0f 90       	pop	r0
    476c:	0f 90       	pop	r0
    476e:	0f 90       	pop	r0
    4770:	cf 91       	pop	r28
    4772:	df 91       	pop	r29
    4774:	08 95       	ret

00004776 <UART_Init>:
#include "UART.h"
#include "Registers.h"
#include "DIO.h"

void UART_Init(USART_Mode_Select mode,Parity_Mode pmode,Stop_Bit_Select sbit,Character_Size csize,Baud_Rate_Setting brate)
{
    4776:	0f 93       	push	r16
    4778:	df 93       	push	r29
    477a:	cf 93       	push	r28
    477c:	cd b7       	in	r28, 0x3d	; 61
    477e:	de b7       	in	r29, 0x3e	; 62
    4780:	2b 97       	sbiw	r28, 0x0b	; 11
    4782:	0f b6       	in	r0, 0x3f	; 63
    4784:	f8 94       	cli
    4786:	de bf       	out	0x3e, r29	; 62
    4788:	0f be       	out	0x3f, r0	; 63
    478a:	cd bf       	out	0x3d, r28	; 61
    478c:	89 83       	std	Y+1, r24	; 0x01
    478e:	6a 83       	std	Y+2, r22	; 0x02
    4790:	4b 83       	std	Y+3, r20	; 0x03
    4792:	2c 83       	std	Y+4, r18	; 0x04
    4794:	0d 83       	std	Y+5, r16	; 0x05
    SET_BIT(UCSRC, UCSRC_URSEL); // 3shan tekhali uart to play
    4796:	a0 e4       	ldi	r26, 0x40	; 64
    4798:	b0 e0       	ldi	r27, 0x00	; 0
    479a:	e0 e4       	ldi	r30, 0x40	; 64
    479c:	f0 e0       	ldi	r31, 0x00	; 0
    479e:	80 81       	ld	r24, Z
    47a0:	80 68       	ori	r24, 0x80	; 128
    47a2:	8c 93       	st	X, r24
    DIO_SetPinMode(DIO_PORTD, DIO_PIN0, DIO_INPUT_FLOATING);
    47a4:	83 e0       	ldi	r24, 0x03	; 3
    47a6:	60 e0       	ldi	r22, 0x00	; 0
    47a8:	40 e0       	ldi	r20, 0x00	; 0
    47aa:	0e 94 e3 09 	call	0x13c6	; 0x13c6 <DIO_SetPinMode>
	DIO_SetPinMode(DIO_PORTD, DIO_PIN1, DIO_OUTPUT);
    47ae:	83 e0       	ldi	r24, 0x03	; 3
    47b0:	61 e0       	ldi	r22, 0x01	; 1
    47b2:	42 e0       	ldi	r20, 0x02	; 2
    47b4:	0e 94 e3 09 	call	0x13c6	; 0x13c6 <DIO_SetPinMode>


    if(mode == Asynchronous)
    47b8:	89 81       	ldd	r24, Y+1	; 0x01
    47ba:	88 23       	and	r24, r24
    47bc:	41 f4       	brne	.+16     	; 0x47ce <UART_Init+0x58>
    {
        CLR_BIT(UCSRC,UCSRC_UMSEL);
    47be:	a0 e4       	ldi	r26, 0x40	; 64
    47c0:	b0 e0       	ldi	r27, 0x00	; 0
    47c2:	e0 e4       	ldi	r30, 0x40	; 64
    47c4:	f0 e0       	ldi	r31, 0x00	; 0
    47c6:	80 81       	ld	r24, Z
    47c8:	8f 7b       	andi	r24, 0xBF	; 191
    47ca:	8c 93       	st	X, r24
    47cc:	0a c0       	rjmp	.+20     	; 0x47e2 <UART_Init+0x6c>
    }else if(mode == Synchronous)
    47ce:	89 81       	ldd	r24, Y+1	; 0x01
    47d0:	81 30       	cpi	r24, 0x01	; 1
    47d2:	39 f4       	brne	.+14     	; 0x47e2 <UART_Init+0x6c>
    {
        SET_BIT(UCSRC,UCSRC_UMSEL);
    47d4:	a0 e4       	ldi	r26, 0x40	; 64
    47d6:	b0 e0       	ldi	r27, 0x00	; 0
    47d8:	e0 e4       	ldi	r30, 0x40	; 64
    47da:	f0 e0       	ldi	r31, 0x00	; 0
    47dc:	80 81       	ld	r24, Z
    47de:	80 64       	ori	r24, 0x40	; 64
    47e0:	8c 93       	st	X, r24

    }

    switch (pmode)
    47e2:	8a 81       	ldd	r24, Y+2	; 0x02
    47e4:	28 2f       	mov	r18, r24
    47e6:	30 e0       	ldi	r19, 0x00	; 0
    47e8:	3b 87       	std	Y+11, r19	; 0x0b
    47ea:	2a 87       	std	Y+10, r18	; 0x0a
    47ec:	8a 85       	ldd	r24, Y+10	; 0x0a
    47ee:	9b 85       	ldd	r25, Y+11	; 0x0b
    47f0:	81 30       	cpi	r24, 0x01	; 1
    47f2:	91 05       	cpc	r25, r1
    47f4:	c1 f0       	breq	.+48     	; 0x4826 <UART_Init+0xb0>
    47f6:	2a 85       	ldd	r18, Y+10	; 0x0a
    47f8:	3b 85       	ldd	r19, Y+11	; 0x0b
    47fa:	22 30       	cpi	r18, 0x02	; 2
    47fc:	31 05       	cpc	r19, r1
    47fe:	11 f1       	breq	.+68     	; 0x4844 <UART_Init+0xce>
    4800:	8a 85       	ldd	r24, Y+10	; 0x0a
    4802:	9b 85       	ldd	r25, Y+11	; 0x0b
    4804:	00 97       	sbiw	r24, 0x00	; 0
    4806:	61 f5       	brne	.+88     	; 0x4860 <UART_Init+0xea>
    {
    case Disabled_parity:
        CLR_BIT(UCSRC,UCSRC_UPM0);
    4808:	a0 e4       	ldi	r26, 0x40	; 64
    480a:	b0 e0       	ldi	r27, 0x00	; 0
    480c:	e0 e4       	ldi	r30, 0x40	; 64
    480e:	f0 e0       	ldi	r31, 0x00	; 0
    4810:	80 81       	ld	r24, Z
    4812:	8f 7e       	andi	r24, 0xEF	; 239
    4814:	8c 93       	st	X, r24
        CLR_BIT(UCSRC,UCSRC_UPM1);
    4816:	a0 e4       	ldi	r26, 0x40	; 64
    4818:	b0 e0       	ldi	r27, 0x00	; 0
    481a:	e0 e4       	ldi	r30, 0x40	; 64
    481c:	f0 e0       	ldi	r31, 0x00	; 0
    481e:	80 81       	ld	r24, Z
    4820:	8f 7d       	andi	r24, 0xDF	; 223
    4822:	8c 93       	st	X, r24
    4824:	1d c0       	rjmp	.+58     	; 0x4860 <UART_Init+0xea>
        /* code */
        break;
    case Even_Parity:
        CLR_BIT(UCSRC,UCSRC_UPM0);
    4826:	a0 e4       	ldi	r26, 0x40	; 64
    4828:	b0 e0       	ldi	r27, 0x00	; 0
    482a:	e0 e4       	ldi	r30, 0x40	; 64
    482c:	f0 e0       	ldi	r31, 0x00	; 0
    482e:	80 81       	ld	r24, Z
    4830:	8f 7e       	andi	r24, 0xEF	; 239
    4832:	8c 93       	st	X, r24
        SET_BIT(UCSRC,UCSRC_UPM1);
    4834:	a0 e4       	ldi	r26, 0x40	; 64
    4836:	b0 e0       	ldi	r27, 0x00	; 0
    4838:	e0 e4       	ldi	r30, 0x40	; 64
    483a:	f0 e0       	ldi	r31, 0x00	; 0
    483c:	80 81       	ld	r24, Z
    483e:	80 62       	ori	r24, 0x20	; 32
    4840:	8c 93       	st	X, r24
    4842:	0e c0       	rjmp	.+28     	; 0x4860 <UART_Init+0xea>
        /* code */
        break;
    case Odd_Parity:
        SET_BIT(UCSRC,UCSRC_UPM0);
    4844:	a0 e4       	ldi	r26, 0x40	; 64
    4846:	b0 e0       	ldi	r27, 0x00	; 0
    4848:	e0 e4       	ldi	r30, 0x40	; 64
    484a:	f0 e0       	ldi	r31, 0x00	; 0
    484c:	80 81       	ld	r24, Z
    484e:	80 61       	ori	r24, 0x10	; 16
    4850:	8c 93       	st	X, r24
        SET_BIT(UCSRC,UCSRC_UPM1);
    4852:	a0 e4       	ldi	r26, 0x40	; 64
    4854:	b0 e0       	ldi	r27, 0x00	; 0
    4856:	e0 e4       	ldi	r30, 0x40	; 64
    4858:	f0 e0       	ldi	r31, 0x00	; 0
    485a:	80 81       	ld	r24, Z
    485c:	80 62       	ori	r24, 0x20	; 32
    485e:	8c 93       	st	X, r24
        break;
    
    default:
        break;
    }
    if(sbit==one_Stop_bit)
    4860:	8b 81       	ldd	r24, Y+3	; 0x03
    4862:	88 23       	and	r24, r24
    4864:	41 f4       	brne	.+16     	; 0x4876 <UART_Init+0x100>
    {
        CLR_BIT(UCSRC,UCSRC_USBS);
    4866:	a0 e4       	ldi	r26, 0x40	; 64
    4868:	b0 e0       	ldi	r27, 0x00	; 0
    486a:	e0 e4       	ldi	r30, 0x40	; 64
    486c:	f0 e0       	ldi	r31, 0x00	; 0
    486e:	80 81       	ld	r24, Z
    4870:	87 7f       	andi	r24, 0xF7	; 247
    4872:	8c 93       	st	X, r24
    4874:	0a c0       	rjmp	.+20     	; 0x488a <UART_Init+0x114>
    }else if( sbit==two_Stop_bit)
    4876:	8b 81       	ldd	r24, Y+3	; 0x03
    4878:	81 30       	cpi	r24, 0x01	; 1
    487a:	39 f4       	brne	.+14     	; 0x488a <UART_Init+0x114>
    {
        SET_BIT(UCSRC,UCSRC_USBS);
    487c:	a0 e4       	ldi	r26, 0x40	; 64
    487e:	b0 e0       	ldi	r27, 0x00	; 0
    4880:	e0 e4       	ldi	r30, 0x40	; 64
    4882:	f0 e0       	ldi	r31, 0x00	; 0
    4884:	80 81       	ld	r24, Z
    4886:	88 60       	ori	r24, 0x08	; 8
    4888:	8c 93       	st	X, r24
    }
    switch (csize)
    488a:	8c 81       	ldd	r24, Y+4	; 0x04
    488c:	28 2f       	mov	r18, r24
    488e:	30 e0       	ldi	r19, 0x00	; 0
    4890:	39 87       	std	Y+9, r19	; 0x09
    4892:	28 87       	std	Y+8, r18	; 0x08
    4894:	88 85       	ldd	r24, Y+8	; 0x08
    4896:	99 85       	ldd	r25, Y+9	; 0x09
    4898:	82 30       	cpi	r24, 0x02	; 2
    489a:	91 05       	cpc	r25, r1
    489c:	09 f4       	brne	.+2      	; 0x48a0 <UART_Init+0x12a>
    489e:	48 c0       	rjmp	.+144    	; 0x4930 <UART_Init+0x1ba>
    48a0:	28 85       	ldd	r18, Y+8	; 0x08
    48a2:	39 85       	ldd	r19, Y+9	; 0x09
    48a4:	23 30       	cpi	r18, 0x03	; 3
    48a6:	31 05       	cpc	r19, r1
    48a8:	54 f4       	brge	.+20     	; 0x48be <UART_Init+0x148>
    48aa:	88 85       	ldd	r24, Y+8	; 0x08
    48ac:	99 85       	ldd	r25, Y+9	; 0x09
    48ae:	00 97       	sbiw	r24, 0x00	; 0
    48b0:	99 f0       	breq	.+38     	; 0x48d8 <UART_Init+0x162>
    48b2:	28 85       	ldd	r18, Y+8	; 0x08
    48b4:	39 85       	ldd	r19, Y+9	; 0x09
    48b6:	21 30       	cpi	r18, 0x01	; 1
    48b8:	31 05       	cpc	r19, r1
    48ba:	21 f1       	breq	.+72     	; 0x4904 <UART_Init+0x18e>
    48bc:	7a c0       	rjmp	.+244    	; 0x49b2 <UART_Init+0x23c>
    48be:	88 85       	ldd	r24, Y+8	; 0x08
    48c0:	99 85       	ldd	r25, Y+9	; 0x09
    48c2:	83 30       	cpi	r24, 0x03	; 3
    48c4:	91 05       	cpc	r25, r1
    48c6:	09 f4       	brne	.+2      	; 0x48ca <UART_Init+0x154>
    48c8:	49 c0       	rjmp	.+146    	; 0x495c <UART_Init+0x1e6>
    48ca:	28 85       	ldd	r18, Y+8	; 0x08
    48cc:	39 85       	ldd	r19, Y+9	; 0x09
    48ce:	24 30       	cpi	r18, 0x04	; 4
    48d0:	31 05       	cpc	r19, r1
    48d2:	09 f4       	brne	.+2      	; 0x48d6 <UART_Init+0x160>
    48d4:	59 c0       	rjmp	.+178    	; 0x4988 <UART_Init+0x212>
    48d6:	6d c0       	rjmp	.+218    	; 0x49b2 <UART_Init+0x23c>
    {
    case _5_bit:
        CLR_BIT(UCSRC,UCSRC_UCSZ0);
    48d8:	a0 e4       	ldi	r26, 0x40	; 64
    48da:	b0 e0       	ldi	r27, 0x00	; 0
    48dc:	e0 e4       	ldi	r30, 0x40	; 64
    48de:	f0 e0       	ldi	r31, 0x00	; 0
    48e0:	80 81       	ld	r24, Z
    48e2:	8d 7f       	andi	r24, 0xFD	; 253
    48e4:	8c 93       	st	X, r24
        CLR_BIT(UCSRC,UCSRC_UCSZ1);
    48e6:	a0 e4       	ldi	r26, 0x40	; 64
    48e8:	b0 e0       	ldi	r27, 0x00	; 0
    48ea:	e0 e4       	ldi	r30, 0x40	; 64
    48ec:	f0 e0       	ldi	r31, 0x00	; 0
    48ee:	80 81       	ld	r24, Z
    48f0:	8b 7f       	andi	r24, 0xFB	; 251
    48f2:	8c 93       	st	X, r24
        CLR_BIT(UCSRC,UCSRB_UCSZ2);
    48f4:	a0 e4       	ldi	r26, 0x40	; 64
    48f6:	b0 e0       	ldi	r27, 0x00	; 0
    48f8:	e0 e4       	ldi	r30, 0x40	; 64
    48fa:	f0 e0       	ldi	r31, 0x00	; 0
    48fc:	80 81       	ld	r24, Z
    48fe:	8b 7f       	andi	r24, 0xFB	; 251
    4900:	8c 93       	st	X, r24
    4902:	57 c0       	rjmp	.+174    	; 0x49b2 <UART_Init+0x23c>
        /* code */
        break;
    case _6_bit:
        CLR_BIT(UCSRC,UCSRC_UCSZ0);
    4904:	a0 e4       	ldi	r26, 0x40	; 64
    4906:	b0 e0       	ldi	r27, 0x00	; 0
    4908:	e0 e4       	ldi	r30, 0x40	; 64
    490a:	f0 e0       	ldi	r31, 0x00	; 0
    490c:	80 81       	ld	r24, Z
    490e:	8d 7f       	andi	r24, 0xFD	; 253
    4910:	8c 93       	st	X, r24
        CLR_BIT(UCSRC,UCSRC_UCSZ1);
    4912:	a0 e4       	ldi	r26, 0x40	; 64
    4914:	b0 e0       	ldi	r27, 0x00	; 0
    4916:	e0 e4       	ldi	r30, 0x40	; 64
    4918:	f0 e0       	ldi	r31, 0x00	; 0
    491a:	80 81       	ld	r24, Z
    491c:	8b 7f       	andi	r24, 0xFB	; 251
    491e:	8c 93       	st	X, r24
        CLR_BIT(UCSRC,UCSRB_UCSZ2);
    4920:	a0 e4       	ldi	r26, 0x40	; 64
    4922:	b0 e0       	ldi	r27, 0x00	; 0
    4924:	e0 e4       	ldi	r30, 0x40	; 64
    4926:	f0 e0       	ldi	r31, 0x00	; 0
    4928:	80 81       	ld	r24, Z
    492a:	8b 7f       	andi	r24, 0xFB	; 251
    492c:	8c 93       	st	X, r24
    492e:	41 c0       	rjmp	.+130    	; 0x49b2 <UART_Init+0x23c>
        /* code */
        break;
    case _7_bit:
        CLR_BIT(UCSRC,UCSRC_UCSZ0);
    4930:	a0 e4       	ldi	r26, 0x40	; 64
    4932:	b0 e0       	ldi	r27, 0x00	; 0
    4934:	e0 e4       	ldi	r30, 0x40	; 64
    4936:	f0 e0       	ldi	r31, 0x00	; 0
    4938:	80 81       	ld	r24, Z
    493a:	8d 7f       	andi	r24, 0xFD	; 253
    493c:	8c 93       	st	X, r24
        SET_BIT(UCSRC,UCSRC_UCSZ1);
    493e:	a0 e4       	ldi	r26, 0x40	; 64
    4940:	b0 e0       	ldi	r27, 0x00	; 0
    4942:	e0 e4       	ldi	r30, 0x40	; 64
    4944:	f0 e0       	ldi	r31, 0x00	; 0
    4946:	80 81       	ld	r24, Z
    4948:	84 60       	ori	r24, 0x04	; 4
    494a:	8c 93       	st	X, r24
        CLR_BIT(UCSRC,UCSRB_UCSZ2);
    494c:	a0 e4       	ldi	r26, 0x40	; 64
    494e:	b0 e0       	ldi	r27, 0x00	; 0
    4950:	e0 e4       	ldi	r30, 0x40	; 64
    4952:	f0 e0       	ldi	r31, 0x00	; 0
    4954:	80 81       	ld	r24, Z
    4956:	8b 7f       	andi	r24, 0xFB	; 251
    4958:	8c 93       	st	X, r24
    495a:	2b c0       	rjmp	.+86     	; 0x49b2 <UART_Init+0x23c>
        /* code */
        break;
    case _8_bit:
        SET_BIT(UCSRC,UCSRC_UCSZ0);
    495c:	a0 e4       	ldi	r26, 0x40	; 64
    495e:	b0 e0       	ldi	r27, 0x00	; 0
    4960:	e0 e4       	ldi	r30, 0x40	; 64
    4962:	f0 e0       	ldi	r31, 0x00	; 0
    4964:	80 81       	ld	r24, Z
    4966:	82 60       	ori	r24, 0x02	; 2
    4968:	8c 93       	st	X, r24
        SET_BIT(UCSRC,UCSRC_UCSZ1);
    496a:	a0 e4       	ldi	r26, 0x40	; 64
    496c:	b0 e0       	ldi	r27, 0x00	; 0
    496e:	e0 e4       	ldi	r30, 0x40	; 64
    4970:	f0 e0       	ldi	r31, 0x00	; 0
    4972:	80 81       	ld	r24, Z
    4974:	84 60       	ori	r24, 0x04	; 4
    4976:	8c 93       	st	X, r24
        CLR_BIT(UCSRC,UCSRB_UCSZ2);
    4978:	a0 e4       	ldi	r26, 0x40	; 64
    497a:	b0 e0       	ldi	r27, 0x00	; 0
    497c:	e0 e4       	ldi	r30, 0x40	; 64
    497e:	f0 e0       	ldi	r31, 0x00	; 0
    4980:	80 81       	ld	r24, Z
    4982:	8b 7f       	andi	r24, 0xFB	; 251
    4984:	8c 93       	st	X, r24
    4986:	15 c0       	rjmp	.+42     	; 0x49b2 <UART_Init+0x23c>
        /* code */
        break;
    case _9_bit:
        SET_BIT(UCSRC,UCSRC_UCSZ0);
    4988:	a0 e4       	ldi	r26, 0x40	; 64
    498a:	b0 e0       	ldi	r27, 0x00	; 0
    498c:	e0 e4       	ldi	r30, 0x40	; 64
    498e:	f0 e0       	ldi	r31, 0x00	; 0
    4990:	80 81       	ld	r24, Z
    4992:	82 60       	ori	r24, 0x02	; 2
    4994:	8c 93       	st	X, r24
        SET_BIT(UCSRC,UCSRC_UCSZ1);
    4996:	a0 e4       	ldi	r26, 0x40	; 64
    4998:	b0 e0       	ldi	r27, 0x00	; 0
    499a:	e0 e4       	ldi	r30, 0x40	; 64
    499c:	f0 e0       	ldi	r31, 0x00	; 0
    499e:	80 81       	ld	r24, Z
    49a0:	84 60       	ori	r24, 0x04	; 4
    49a2:	8c 93       	st	X, r24
        SET_BIT(UCSRC,UCSRB_UCSZ2);
    49a4:	a0 e4       	ldi	r26, 0x40	; 64
    49a6:	b0 e0       	ldi	r27, 0x00	; 0
    49a8:	e0 e4       	ldi	r30, 0x40	; 64
    49aa:	f0 e0       	ldi	r31, 0x00	; 0
    49ac:	80 81       	ld	r24, Z
    49ae:	84 60       	ori	r24, 0x04	; 4
    49b0:	8c 93       	st	X, r24
        break;
    
    default:
        break;
    }
    switch (brate)
    49b2:	8d 81       	ldd	r24, Y+5	; 0x05
    49b4:	28 2f       	mov	r18, r24
    49b6:	30 e0       	ldi	r19, 0x00	; 0
    49b8:	3f 83       	std	Y+7, r19	; 0x07
    49ba:	2e 83       	std	Y+6, r18	; 0x06
    49bc:	8e 81       	ldd	r24, Y+6	; 0x06
    49be:	9f 81       	ldd	r25, Y+7	; 0x07
    49c0:	81 30       	cpi	r24, 0x01	; 1
    49c2:	91 05       	cpc	r25, r1
    49c4:	71 f0       	breq	.+28     	; 0x49e2 <UART_Init+0x26c>
    49c6:	2e 81       	ldd	r18, Y+6	; 0x06
    49c8:	3f 81       	ldd	r19, Y+7	; 0x07
    49ca:	22 30       	cpi	r18, 0x02	; 2
    49cc:	31 05       	cpc	r19, r1
    49ce:	71 f0       	breq	.+28     	; 0x49ec <UART_Init+0x276>
    49d0:	8e 81       	ldd	r24, Y+6	; 0x06
    49d2:	9f 81       	ldd	r25, Y+7	; 0x07
    49d4:	00 97       	sbiw	r24, 0x00	; 0
    49d6:	71 f4       	brne	.+28     	; 0x49f4 <UART_Init+0x27e>
    {
    case _2400:
        UBRRL=416;
    49d8:	e9 e2       	ldi	r30, 0x29	; 41
    49da:	f0 e0       	ldi	r31, 0x00	; 0
    49dc:	80 ea       	ldi	r24, 0xA0	; 160
    49de:	80 83       	st	Z, r24
    49e0:	09 c0       	rjmp	.+18     	; 0x49f4 <UART_Init+0x27e>
        /* code */
        break;
    case _4800:
        UBRRL=207;
    49e2:	e9 e2       	ldi	r30, 0x29	; 41
    49e4:	f0 e0       	ldi	r31, 0x00	; 0
    49e6:	8f ec       	ldi	r24, 0xCF	; 207
    49e8:	80 83       	st	Z, r24
    49ea:	04 c0       	rjmp	.+8      	; 0x49f4 <UART_Init+0x27e>
        /* code */
        break;
    case _9600:
        UBRRL=103;
    49ec:	e9 e2       	ldi	r30, 0x29	; 41
    49ee:	f0 e0       	ldi	r31, 0x00	; 0
    49f0:	87 e6       	ldi	r24, 0x67	; 103
    49f2:	80 83       	st	Z, r24
        break;
    
    default:
        break;
    }
    SET_BIT(UCSRB,UCSRB_RXEN);
    49f4:	aa e2       	ldi	r26, 0x2A	; 42
    49f6:	b0 e0       	ldi	r27, 0x00	; 0
    49f8:	ea e2       	ldi	r30, 0x2A	; 42
    49fa:	f0 e0       	ldi	r31, 0x00	; 0
    49fc:	80 81       	ld	r24, Z
    49fe:	80 61       	ori	r24, 0x10	; 16
    4a00:	8c 93       	st	X, r24
    SET_BIT(UCSRB,UCSRB_TXEN);
    4a02:	aa e2       	ldi	r26, 0x2A	; 42
    4a04:	b0 e0       	ldi	r27, 0x00	; 0
    4a06:	ea e2       	ldi	r30, 0x2A	; 42
    4a08:	f0 e0       	ldi	r31, 0x00	; 0
    4a0a:	80 81       	ld	r24, Z
    4a0c:	88 60       	ori	r24, 0x08	; 8
    4a0e:	8c 93       	st	X, r24
}
    4a10:	2b 96       	adiw	r28, 0x0b	; 11
    4a12:	0f b6       	in	r0, 0x3f	; 63
    4a14:	f8 94       	cli
    4a16:	de bf       	out	0x3e, r29	; 62
    4a18:	0f be       	out	0x3f, r0	; 63
    4a1a:	cd bf       	out	0x3d, r28	; 61
    4a1c:	cf 91       	pop	r28
    4a1e:	df 91       	pop	r29
    4a20:	0f 91       	pop	r16
    4a22:	08 95       	ret

00004a24 <UART_Send_Data>:


void UART_Send_Data(u8 data){
    4a24:	df 93       	push	r29
    4a26:	cf 93       	push	r28
    4a28:	0f 92       	push	r0
    4a2a:	cd b7       	in	r28, 0x3d	; 61
    4a2c:	de b7       	in	r29, 0x3e	; 62
    4a2e:	89 83       	std	Y+1, r24	; 0x01
    
    UDR=data;
    4a30:	ec e2       	ldi	r30, 0x2C	; 44
    4a32:	f0 e0       	ldi	r31, 0x00	; 0
    4a34:	89 81       	ldd	r24, Y+1	; 0x01
    4a36:	80 83       	st	Z, r24
    while (GET_BIT(UCSRA,UCSRA_TXC)==0);
    4a38:	eb e2       	ldi	r30, 0x2B	; 43
    4a3a:	f0 e0       	ldi	r31, 0x00	; 0
    4a3c:	80 81       	ld	r24, Z
    4a3e:	82 95       	swap	r24
    4a40:	86 95       	lsr	r24
    4a42:	86 95       	lsr	r24
    4a44:	83 70       	andi	r24, 0x03	; 3
    4a46:	88 2f       	mov	r24, r24
    4a48:	90 e0       	ldi	r25, 0x00	; 0
    4a4a:	81 70       	andi	r24, 0x01	; 1
    4a4c:	90 70       	andi	r25, 0x00	; 0
    4a4e:	00 97       	sbiw	r24, 0x00	; 0
    4a50:	99 f3       	breq	.-26     	; 0x4a38 <UART_Send_Data+0x14>
}
    4a52:	0f 90       	pop	r0
    4a54:	cf 91       	pop	r28
    4a56:	df 91       	pop	r29
    4a58:	08 95       	ret

00004a5a <Recieve_Data>:

u8 Recieve_Data(){
    4a5a:	df 93       	push	r29
    4a5c:	cf 93       	push	r28
    4a5e:	cd b7       	in	r28, 0x3d	; 61
    4a60:	de b7       	in	r29, 0x3e	; 62
    while (GET_BIT(UCSRA,UCSRA_RCX)==0);
    4a62:	eb e2       	ldi	r30, 0x2B	; 43
    4a64:	f0 e0       	ldi	r31, 0x00	; 0
    4a66:	80 81       	ld	r24, Z
    4a68:	88 23       	and	r24, r24
    4a6a:	dc f7       	brge	.-10     	; 0x4a62 <Recieve_Data+0x8>
    return UDR;
    4a6c:	ec e2       	ldi	r30, 0x2C	; 44
    4a6e:	f0 e0       	ldi	r31, 0x00	; 0
    4a70:	80 81       	ld	r24, Z
}
    4a72:	cf 91       	pop	r28
    4a74:	df 91       	pop	r29
    4a76:	08 95       	ret

00004a78 <main>:

//////////STEPPER///////////////////


int main (void)
{
    4a78:	0f 93       	push	r16
    4a7a:	1f 93       	push	r17
    4a7c:	df 93       	push	r29
    4a7e:	cf 93       	push	r28
    4a80:	cd b7       	in	r28, 0x3d	; 61
    4a82:	de b7       	in	r29, 0x3e	; 62
    4a84:	cc 54       	subi	r28, 0x4C	; 76
    4a86:	d0 40       	sbci	r29, 0x00	; 0
    4a88:	0f b6       	in	r0, 0x3f	; 63
    4a8a:	f8 94       	cli
    4a8c:	de bf       	out	0x3e, r29	; 62
    4a8e:	0f be       	out	0x3f, r0	; 63
    4a90:	cd bf       	out	0x3d, r28	; 61
    4a92:	fe 01       	movw	r30, r28
    4a94:	ed 5b       	subi	r30, 0xBD	; 189
    4a96:	ff 4f       	sbci	r31, 0xFF	; 255
    4a98:	80 e0       	ldi	r24, 0x00	; 0
    4a9a:	90 e0       	ldi	r25, 0x00	; 0
    4a9c:	a8 ec       	ldi	r26, 0xC8	; 200
    4a9e:	b2 e4       	ldi	r27, 0x42	; 66
    4aa0:	80 83       	st	Z, r24
    4aa2:	91 83       	std	Z+1, r25	; 0x01
    4aa4:	a2 83       	std	Z+2, r26	; 0x02
    4aa6:	b3 83       	std	Z+3, r27	; 0x03
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    4aa8:	8e 01       	movw	r16, r28
    4aaa:	01 5c       	subi	r16, 0xC1	; 193
    4aac:	1f 4f       	sbci	r17, 0xFF	; 255
    4aae:	fe 01       	movw	r30, r28
    4ab0:	ed 5b       	subi	r30, 0xBD	; 189
    4ab2:	ff 4f       	sbci	r31, 0xFF	; 255
    4ab4:	60 81       	ld	r22, Z
    4ab6:	71 81       	ldd	r23, Z+1	; 0x01
    4ab8:	82 81       	ldd	r24, Z+2	; 0x02
    4aba:	93 81       	ldd	r25, Z+3	; 0x03
    4abc:	20 e0       	ldi	r18, 0x00	; 0
    4abe:	30 e0       	ldi	r19, 0x00	; 0
    4ac0:	4a ef       	ldi	r20, 0xFA	; 250
    4ac2:	54 e4       	ldi	r21, 0x44	; 68
    4ac4:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    4ac8:	dc 01       	movw	r26, r24
    4aca:	cb 01       	movw	r24, r22
    4acc:	f8 01       	movw	r30, r16
    4ace:	80 83       	st	Z, r24
    4ad0:	91 83       	std	Z+1, r25	; 0x01
    4ad2:	a2 83       	std	Z+2, r26	; 0x02
    4ad4:	b3 83       	std	Z+3, r27	; 0x03
	if (__tmp < 1.0)
    4ad6:	fe 01       	movw	r30, r28
    4ad8:	ff 96       	adiw	r30, 0x3f	; 63
    4ada:	60 81       	ld	r22, Z
    4adc:	71 81       	ldd	r23, Z+1	; 0x01
    4ade:	82 81       	ldd	r24, Z+2	; 0x02
    4ae0:	93 81       	ldd	r25, Z+3	; 0x03
    4ae2:	20 e0       	ldi	r18, 0x00	; 0
    4ae4:	30 e0       	ldi	r19, 0x00	; 0
    4ae6:	40 e8       	ldi	r20, 0x80	; 128
    4ae8:	5f e3       	ldi	r21, 0x3F	; 63
    4aea:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    4aee:	88 23       	and	r24, r24
    4af0:	2c f4       	brge	.+10     	; 0x4afc <main+0x84>
		__ticks = 1;
    4af2:	81 e0       	ldi	r24, 0x01	; 1
    4af4:	90 e0       	ldi	r25, 0x00	; 0
    4af6:	9e af       	std	Y+62, r25	; 0x3e
    4af8:	8d af       	std	Y+61, r24	; 0x3d
    4afa:	46 c0       	rjmp	.+140    	; 0x4b88 <main+0x110>
	else if (__tmp > 65535)
    4afc:	fe 01       	movw	r30, r28
    4afe:	ff 96       	adiw	r30, 0x3f	; 63
    4b00:	60 81       	ld	r22, Z
    4b02:	71 81       	ldd	r23, Z+1	; 0x01
    4b04:	82 81       	ldd	r24, Z+2	; 0x02
    4b06:	93 81       	ldd	r25, Z+3	; 0x03
    4b08:	20 e0       	ldi	r18, 0x00	; 0
    4b0a:	3f ef       	ldi	r19, 0xFF	; 255
    4b0c:	4f e7       	ldi	r20, 0x7F	; 127
    4b0e:	57 e4       	ldi	r21, 0x47	; 71
    4b10:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    4b14:	18 16       	cp	r1, r24
    4b16:	64 f5       	brge	.+88     	; 0x4b70 <main+0xf8>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    4b18:	fe 01       	movw	r30, r28
    4b1a:	ed 5b       	subi	r30, 0xBD	; 189
    4b1c:	ff 4f       	sbci	r31, 0xFF	; 255
    4b1e:	60 81       	ld	r22, Z
    4b20:	71 81       	ldd	r23, Z+1	; 0x01
    4b22:	82 81       	ldd	r24, Z+2	; 0x02
    4b24:	93 81       	ldd	r25, Z+3	; 0x03
    4b26:	20 e0       	ldi	r18, 0x00	; 0
    4b28:	30 e0       	ldi	r19, 0x00	; 0
    4b2a:	40 e2       	ldi	r20, 0x20	; 32
    4b2c:	51 e4       	ldi	r21, 0x41	; 65
    4b2e:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    4b32:	dc 01       	movw	r26, r24
    4b34:	cb 01       	movw	r24, r22
    4b36:	bc 01       	movw	r22, r24
    4b38:	cd 01       	movw	r24, r26
    4b3a:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    4b3e:	dc 01       	movw	r26, r24
    4b40:	cb 01       	movw	r24, r22
    4b42:	9e af       	std	Y+62, r25	; 0x3e
    4b44:	8d af       	std	Y+61, r24	; 0x3d
    4b46:	0f c0       	rjmp	.+30     	; 0x4b66 <main+0xee>
    4b48:	88 ec       	ldi	r24, 0xC8	; 200
    4b4a:	90 e0       	ldi	r25, 0x00	; 0
    4b4c:	9c af       	std	Y+60, r25	; 0x3c
    4b4e:	8b af       	std	Y+59, r24	; 0x3b
    4b50:	8b ad       	ldd	r24, Y+59	; 0x3b
    4b52:	9c ad       	ldd	r25, Y+60	; 0x3c
    4b54:	01 97       	sbiw	r24, 0x01	; 1
    4b56:	f1 f7       	brne	.-4      	; 0x4b54 <main+0xdc>
    4b58:	9c af       	std	Y+60, r25	; 0x3c
    4b5a:	8b af       	std	Y+59, r24	; 0x3b
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    4b5c:	8d ad       	ldd	r24, Y+61	; 0x3d
    4b5e:	9e ad       	ldd	r25, Y+62	; 0x3e
    4b60:	01 97       	sbiw	r24, 0x01	; 1
    4b62:	9e af       	std	Y+62, r25	; 0x3e
    4b64:	8d af       	std	Y+61, r24	; 0x3d
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    4b66:	8d ad       	ldd	r24, Y+61	; 0x3d
    4b68:	9e ad       	ldd	r25, Y+62	; 0x3e
    4b6a:	00 97       	sbiw	r24, 0x00	; 0
    4b6c:	69 f7       	brne	.-38     	; 0x4b48 <main+0xd0>
    4b6e:	16 c0       	rjmp	.+44     	; 0x4b9c <main+0x124>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    4b70:	fe 01       	movw	r30, r28
    4b72:	ff 96       	adiw	r30, 0x3f	; 63
    4b74:	60 81       	ld	r22, Z
    4b76:	71 81       	ldd	r23, Z+1	; 0x01
    4b78:	82 81       	ldd	r24, Z+2	; 0x02
    4b7a:	93 81       	ldd	r25, Z+3	; 0x03
    4b7c:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    4b80:	dc 01       	movw	r26, r24
    4b82:	cb 01       	movw	r24, r22
    4b84:	9e af       	std	Y+62, r25	; 0x3e
    4b86:	8d af       	std	Y+61, r24	; 0x3d
    4b88:	8d ad       	ldd	r24, Y+61	; 0x3d
    4b8a:	9e ad       	ldd	r25, Y+62	; 0x3e
    4b8c:	9a af       	std	Y+58, r25	; 0x3a
    4b8e:	89 af       	std	Y+57, r24	; 0x39
    4b90:	89 ad       	ldd	r24, Y+57	; 0x39
    4b92:	9a ad       	ldd	r25, Y+58	; 0x3a
    4b94:	01 97       	sbiw	r24, 0x01	; 1
    4b96:	f1 f7       	brne	.-4      	; 0x4b94 <main+0x11c>
    4b98:	9a af       	std	Y+58, r25	; 0x3a
    4b9a:	89 af       	std	Y+57, r24	; 0x39
	_delay_ms(100);
	DIO_SetPinMode(DIO_PORTC,DIO_PIN0,DIO_OUTPUT);
    4b9c:	82 e0       	ldi	r24, 0x02	; 2
    4b9e:	60 e0       	ldi	r22, 0x00	; 0
    4ba0:	42 e0       	ldi	r20, 0x02	; 2
    4ba2:	0e 94 e3 09 	call	0x13c6	; 0x13c6 <DIO_SetPinMode>
	DIO_SetPinMode(DIO_PORTC,DIO_PIN1,DIO_OUTPUT);
    4ba6:	82 e0       	ldi	r24, 0x02	; 2
    4ba8:	61 e0       	ldi	r22, 0x01	; 1
    4baa:	42 e0       	ldi	r20, 0x02	; 2
    4bac:	0e 94 e3 09 	call	0x13c6	; 0x13c6 <DIO_SetPinMode>
	DIO_SetPinMode(DIO_PORTC,DIO_PIN2,DIO_OUTPUT);
    4bb0:	82 e0       	ldi	r24, 0x02	; 2
    4bb2:	62 e0       	ldi	r22, 0x02	; 2
    4bb4:	42 e0       	ldi	r20, 0x02	; 2
    4bb6:	0e 94 e3 09 	call	0x13c6	; 0x13c6 <DIO_SetPinMode>
	DIO_SetPinMode(DIO_PORTC,DIO_PIN3,DIO_OUTPUT);
    4bba:	82 e0       	ldi	r24, 0x02	; 2
    4bbc:	63 e0       	ldi	r22, 0x03	; 3
    4bbe:	42 e0       	ldi	r20, 0x02	; 2
    4bc0:	0e 94 e3 09 	call	0x13c6	; 0x13c6 <DIO_SetPinMode>

	u16 degree=180;
    4bc4:	fe 01       	movw	r30, r28
    4bc6:	e5 5b       	subi	r30, 0xB5	; 181
    4bc8:	ff 4f       	sbci	r31, 0xFF	; 255
    4bca:	84 eb       	ldi	r24, 0xB4	; 180
    4bcc:	90 e0       	ldi	r25, 0x00	; 0
    4bce:	91 83       	std	Z+1, r25	; 0x01
    4bd0:	80 83       	st	Z, r24

	u16 iteration=(degree/5.625)/4;
    4bd2:	fe 01       	movw	r30, r28
    4bd4:	e5 5b       	subi	r30, 0xB5	; 181
    4bd6:	ff 4f       	sbci	r31, 0xFF	; 255
    4bd8:	80 81       	ld	r24, Z
    4bda:	91 81       	ldd	r25, Z+1	; 0x01
    4bdc:	cc 01       	movw	r24, r24
    4bde:	a0 e0       	ldi	r26, 0x00	; 0
    4be0:	b0 e0       	ldi	r27, 0x00	; 0
    4be2:	bc 01       	movw	r22, r24
    4be4:	cd 01       	movw	r24, r26
    4be6:	0e 94 a9 04 	call	0x952	; 0x952 <__floatunsisf>
    4bea:	dc 01       	movw	r26, r24
    4bec:	cb 01       	movw	r24, r22
    4bee:	bc 01       	movw	r22, r24
    4bf0:	cd 01       	movw	r24, r26
    4bf2:	20 e0       	ldi	r18, 0x00	; 0
    4bf4:	30 e0       	ldi	r19, 0x00	; 0
    4bf6:	44 eb       	ldi	r20, 0xB4	; 180
    4bf8:	50 e4       	ldi	r21, 0x40	; 64
    4bfa:	0e 94 19 03 	call	0x632	; 0x632 <__divsf3>
    4bfe:	dc 01       	movw	r26, r24
    4c00:	cb 01       	movw	r24, r22
    4c02:	bc 01       	movw	r22, r24
    4c04:	cd 01       	movw	r24, r26
    4c06:	20 e0       	ldi	r18, 0x00	; 0
    4c08:	30 e0       	ldi	r19, 0x00	; 0
    4c0a:	40 e8       	ldi	r20, 0x80	; 128
    4c0c:	50 e4       	ldi	r21, 0x40	; 64
    4c0e:	0e 94 19 03 	call	0x632	; 0x632 <__divsf3>
    4c12:	dc 01       	movw	r26, r24
    4c14:	cb 01       	movw	r24, r22
    4c16:	8e 01       	movw	r16, r28
    4c18:	07 5b       	subi	r16, 0xB7	; 183
    4c1a:	1f 4f       	sbci	r17, 0xFF	; 255
    4c1c:	bc 01       	movw	r22, r24
    4c1e:	cd 01       	movw	r24, r26
    4c20:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    4c24:	dc 01       	movw	r26, r24
    4c26:	cb 01       	movw	r24, r22
    4c28:	f8 01       	movw	r30, r16
    4c2a:	91 83       	std	Z+1, r25	; 0x01
    4c2c:	80 83       	st	Z, r24
	for (u16 i=0;i<iteration;i++)
    4c2e:	fe 01       	movw	r30, r28
    4c30:	e9 5b       	subi	r30, 0xB9	; 185
    4c32:	ff 4f       	sbci	r31, 0xFF	; 255
    4c34:	11 82       	std	Z+1, r1	; 0x01
    4c36:	10 82       	st	Z, r1
    4c38:	23 c2       	rjmp	.+1094   	; 0x5080 <main+0x608>
	{
		DIO_SetPinLevel(DIO_PORTC,DIO_PIN0,DIO_LOW);
    4c3a:	82 e0       	ldi	r24, 0x02	; 2
    4c3c:	60 e0       	ldi	r22, 0x00	; 0
    4c3e:	40 e0       	ldi	r20, 0x00	; 0
    4c40:	0e 94 f1 0c 	call	0x19e2	; 0x19e2 <DIO_SetPinLevel>
		DIO_SetPinLevel(DIO_PORTC,DIO_PIN1,DIO_HIGH);
    4c44:	82 e0       	ldi	r24, 0x02	; 2
    4c46:	61 e0       	ldi	r22, 0x01	; 1
    4c48:	41 e0       	ldi	r20, 0x01	; 1
    4c4a:	0e 94 f1 0c 	call	0x19e2	; 0x19e2 <DIO_SetPinLevel>
		DIO_SetPinLevel(DIO_PORTC,DIO_PIN2,DIO_HIGH);
    4c4e:	82 e0       	ldi	r24, 0x02	; 2
    4c50:	62 e0       	ldi	r22, 0x02	; 2
    4c52:	41 e0       	ldi	r20, 0x01	; 1
    4c54:	0e 94 f1 0c 	call	0x19e2	; 0x19e2 <DIO_SetPinLevel>
		DIO_SetPinLevel(DIO_PORTC,DIO_PIN3,DIO_HIGH);
    4c58:	82 e0       	ldi	r24, 0x02	; 2
    4c5a:	63 e0       	ldi	r22, 0x03	; 3
    4c5c:	41 e0       	ldi	r20, 0x01	; 1
    4c5e:	0e 94 f1 0c 	call	0x19e2	; 0x19e2 <DIO_SetPinLevel>
    4c62:	80 e0       	ldi	r24, 0x00	; 0
    4c64:	90 e0       	ldi	r25, 0x00	; 0
    4c66:	aa ef       	ldi	r26, 0xFA	; 250
    4c68:	b3 e4       	ldi	r27, 0x43	; 67
    4c6a:	8d ab       	std	Y+53, r24	; 0x35
    4c6c:	9e ab       	std	Y+54, r25	; 0x36
    4c6e:	af ab       	std	Y+55, r26	; 0x37
    4c70:	b8 af       	std	Y+56, r27	; 0x38
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    4c72:	6d a9       	ldd	r22, Y+53	; 0x35
    4c74:	7e a9       	ldd	r23, Y+54	; 0x36
    4c76:	8f a9       	ldd	r24, Y+55	; 0x37
    4c78:	98 ad       	ldd	r25, Y+56	; 0x38
    4c7a:	20 e0       	ldi	r18, 0x00	; 0
    4c7c:	30 e0       	ldi	r19, 0x00	; 0
    4c7e:	4a ef       	ldi	r20, 0xFA	; 250
    4c80:	54 e4       	ldi	r21, 0x44	; 68
    4c82:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    4c86:	dc 01       	movw	r26, r24
    4c88:	cb 01       	movw	r24, r22
    4c8a:	89 ab       	std	Y+49, r24	; 0x31
    4c8c:	9a ab       	std	Y+50, r25	; 0x32
    4c8e:	ab ab       	std	Y+51, r26	; 0x33
    4c90:	bc ab       	std	Y+52, r27	; 0x34
	if (__tmp < 1.0)
    4c92:	69 a9       	ldd	r22, Y+49	; 0x31
    4c94:	7a a9       	ldd	r23, Y+50	; 0x32
    4c96:	8b a9       	ldd	r24, Y+51	; 0x33
    4c98:	9c a9       	ldd	r25, Y+52	; 0x34
    4c9a:	20 e0       	ldi	r18, 0x00	; 0
    4c9c:	30 e0       	ldi	r19, 0x00	; 0
    4c9e:	40 e8       	ldi	r20, 0x80	; 128
    4ca0:	5f e3       	ldi	r21, 0x3F	; 63
    4ca2:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    4ca6:	88 23       	and	r24, r24
    4ca8:	2c f4       	brge	.+10     	; 0x4cb4 <main+0x23c>
		__ticks = 1;
    4caa:	81 e0       	ldi	r24, 0x01	; 1
    4cac:	90 e0       	ldi	r25, 0x00	; 0
    4cae:	98 ab       	std	Y+48, r25	; 0x30
    4cb0:	8f a7       	std	Y+47, r24	; 0x2f
    4cb2:	3f c0       	rjmp	.+126    	; 0x4d32 <main+0x2ba>
	else if (__tmp > 65535)
    4cb4:	69 a9       	ldd	r22, Y+49	; 0x31
    4cb6:	7a a9       	ldd	r23, Y+50	; 0x32
    4cb8:	8b a9       	ldd	r24, Y+51	; 0x33
    4cba:	9c a9       	ldd	r25, Y+52	; 0x34
    4cbc:	20 e0       	ldi	r18, 0x00	; 0
    4cbe:	3f ef       	ldi	r19, 0xFF	; 255
    4cc0:	4f e7       	ldi	r20, 0x7F	; 127
    4cc2:	57 e4       	ldi	r21, 0x47	; 71
    4cc4:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    4cc8:	18 16       	cp	r1, r24
    4cca:	4c f5       	brge	.+82     	; 0x4d1e <main+0x2a6>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    4ccc:	6d a9       	ldd	r22, Y+53	; 0x35
    4cce:	7e a9       	ldd	r23, Y+54	; 0x36
    4cd0:	8f a9       	ldd	r24, Y+55	; 0x37
    4cd2:	98 ad       	ldd	r25, Y+56	; 0x38
    4cd4:	20 e0       	ldi	r18, 0x00	; 0
    4cd6:	30 e0       	ldi	r19, 0x00	; 0
    4cd8:	40 e2       	ldi	r20, 0x20	; 32
    4cda:	51 e4       	ldi	r21, 0x41	; 65
    4cdc:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    4ce0:	dc 01       	movw	r26, r24
    4ce2:	cb 01       	movw	r24, r22
    4ce4:	bc 01       	movw	r22, r24
    4ce6:	cd 01       	movw	r24, r26
    4ce8:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    4cec:	dc 01       	movw	r26, r24
    4cee:	cb 01       	movw	r24, r22
    4cf0:	98 ab       	std	Y+48, r25	; 0x30
    4cf2:	8f a7       	std	Y+47, r24	; 0x2f
    4cf4:	0f c0       	rjmp	.+30     	; 0x4d14 <main+0x29c>
    4cf6:	88 ec       	ldi	r24, 0xC8	; 200
    4cf8:	90 e0       	ldi	r25, 0x00	; 0
    4cfa:	9e a7       	std	Y+46, r25	; 0x2e
    4cfc:	8d a7       	std	Y+45, r24	; 0x2d
    4cfe:	8d a5       	ldd	r24, Y+45	; 0x2d
    4d00:	9e a5       	ldd	r25, Y+46	; 0x2e
    4d02:	01 97       	sbiw	r24, 0x01	; 1
    4d04:	f1 f7       	brne	.-4      	; 0x4d02 <main+0x28a>
    4d06:	9e a7       	std	Y+46, r25	; 0x2e
    4d08:	8d a7       	std	Y+45, r24	; 0x2d
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    4d0a:	8f a5       	ldd	r24, Y+47	; 0x2f
    4d0c:	98 a9       	ldd	r25, Y+48	; 0x30
    4d0e:	01 97       	sbiw	r24, 0x01	; 1
    4d10:	98 ab       	std	Y+48, r25	; 0x30
    4d12:	8f a7       	std	Y+47, r24	; 0x2f
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    4d14:	8f a5       	ldd	r24, Y+47	; 0x2f
    4d16:	98 a9       	ldd	r25, Y+48	; 0x30
    4d18:	00 97       	sbiw	r24, 0x00	; 0
    4d1a:	69 f7       	brne	.-38     	; 0x4cf6 <main+0x27e>
    4d1c:	14 c0       	rjmp	.+40     	; 0x4d46 <main+0x2ce>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    4d1e:	69 a9       	ldd	r22, Y+49	; 0x31
    4d20:	7a a9       	ldd	r23, Y+50	; 0x32
    4d22:	8b a9       	ldd	r24, Y+51	; 0x33
    4d24:	9c a9       	ldd	r25, Y+52	; 0x34
    4d26:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    4d2a:	dc 01       	movw	r26, r24
    4d2c:	cb 01       	movw	r24, r22
    4d2e:	98 ab       	std	Y+48, r25	; 0x30
    4d30:	8f a7       	std	Y+47, r24	; 0x2f
    4d32:	8f a5       	ldd	r24, Y+47	; 0x2f
    4d34:	98 a9       	ldd	r25, Y+48	; 0x30
    4d36:	9c a7       	std	Y+44, r25	; 0x2c
    4d38:	8b a7       	std	Y+43, r24	; 0x2b
    4d3a:	8b a5       	ldd	r24, Y+43	; 0x2b
    4d3c:	9c a5       	ldd	r25, Y+44	; 0x2c
    4d3e:	01 97       	sbiw	r24, 0x01	; 1
    4d40:	f1 f7       	brne	.-4      	; 0x4d3e <main+0x2c6>
    4d42:	9c a7       	std	Y+44, r25	; 0x2c
    4d44:	8b a7       	std	Y+43, r24	; 0x2b
		_delay_ms(500);

		DIO_SetPinLevel(DIO_PORTC,DIO_PIN0,DIO_HIGH);
    4d46:	82 e0       	ldi	r24, 0x02	; 2
    4d48:	60 e0       	ldi	r22, 0x00	; 0
    4d4a:	41 e0       	ldi	r20, 0x01	; 1
    4d4c:	0e 94 f1 0c 	call	0x19e2	; 0x19e2 <DIO_SetPinLevel>
		DIO_SetPinLevel(DIO_PORTC,DIO_PIN1,DIO_LOW);
    4d50:	82 e0       	ldi	r24, 0x02	; 2
    4d52:	61 e0       	ldi	r22, 0x01	; 1
    4d54:	40 e0       	ldi	r20, 0x00	; 0
    4d56:	0e 94 f1 0c 	call	0x19e2	; 0x19e2 <DIO_SetPinLevel>
		DIO_SetPinLevel(DIO_PORTC,DIO_PIN2,DIO_HIGH);
    4d5a:	82 e0       	ldi	r24, 0x02	; 2
    4d5c:	62 e0       	ldi	r22, 0x02	; 2
    4d5e:	41 e0       	ldi	r20, 0x01	; 1
    4d60:	0e 94 f1 0c 	call	0x19e2	; 0x19e2 <DIO_SetPinLevel>
		DIO_SetPinLevel(DIO_PORTC,DIO_PIN3,DIO_HIGH);
    4d64:	82 e0       	ldi	r24, 0x02	; 2
    4d66:	63 e0       	ldi	r22, 0x03	; 3
    4d68:	41 e0       	ldi	r20, 0x01	; 1
    4d6a:	0e 94 f1 0c 	call	0x19e2	; 0x19e2 <DIO_SetPinLevel>
    4d6e:	80 e0       	ldi	r24, 0x00	; 0
    4d70:	90 e0       	ldi	r25, 0x00	; 0
    4d72:	aa ef       	ldi	r26, 0xFA	; 250
    4d74:	b3 e4       	ldi	r27, 0x43	; 67
    4d76:	8f a3       	std	Y+39, r24	; 0x27
    4d78:	98 a7       	std	Y+40, r25	; 0x28
    4d7a:	a9 a7       	std	Y+41, r26	; 0x29
    4d7c:	ba a7       	std	Y+42, r27	; 0x2a
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    4d7e:	6f a1       	ldd	r22, Y+39	; 0x27
    4d80:	78 a5       	ldd	r23, Y+40	; 0x28
    4d82:	89 a5       	ldd	r24, Y+41	; 0x29
    4d84:	9a a5       	ldd	r25, Y+42	; 0x2a
    4d86:	20 e0       	ldi	r18, 0x00	; 0
    4d88:	30 e0       	ldi	r19, 0x00	; 0
    4d8a:	4a ef       	ldi	r20, 0xFA	; 250
    4d8c:	54 e4       	ldi	r21, 0x44	; 68
    4d8e:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    4d92:	dc 01       	movw	r26, r24
    4d94:	cb 01       	movw	r24, r22
    4d96:	8b a3       	std	Y+35, r24	; 0x23
    4d98:	9c a3       	std	Y+36, r25	; 0x24
    4d9a:	ad a3       	std	Y+37, r26	; 0x25
    4d9c:	be a3       	std	Y+38, r27	; 0x26
	if (__tmp < 1.0)
    4d9e:	6b a1       	ldd	r22, Y+35	; 0x23
    4da0:	7c a1       	ldd	r23, Y+36	; 0x24
    4da2:	8d a1       	ldd	r24, Y+37	; 0x25
    4da4:	9e a1       	ldd	r25, Y+38	; 0x26
    4da6:	20 e0       	ldi	r18, 0x00	; 0
    4da8:	30 e0       	ldi	r19, 0x00	; 0
    4daa:	40 e8       	ldi	r20, 0x80	; 128
    4dac:	5f e3       	ldi	r21, 0x3F	; 63
    4dae:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    4db2:	88 23       	and	r24, r24
    4db4:	2c f4       	brge	.+10     	; 0x4dc0 <main+0x348>
		__ticks = 1;
    4db6:	81 e0       	ldi	r24, 0x01	; 1
    4db8:	90 e0       	ldi	r25, 0x00	; 0
    4dba:	9a a3       	std	Y+34, r25	; 0x22
    4dbc:	89 a3       	std	Y+33, r24	; 0x21
    4dbe:	3f c0       	rjmp	.+126    	; 0x4e3e <main+0x3c6>
	else if (__tmp > 65535)
    4dc0:	6b a1       	ldd	r22, Y+35	; 0x23
    4dc2:	7c a1       	ldd	r23, Y+36	; 0x24
    4dc4:	8d a1       	ldd	r24, Y+37	; 0x25
    4dc6:	9e a1       	ldd	r25, Y+38	; 0x26
    4dc8:	20 e0       	ldi	r18, 0x00	; 0
    4dca:	3f ef       	ldi	r19, 0xFF	; 255
    4dcc:	4f e7       	ldi	r20, 0x7F	; 127
    4dce:	57 e4       	ldi	r21, 0x47	; 71
    4dd0:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    4dd4:	18 16       	cp	r1, r24
    4dd6:	4c f5       	brge	.+82     	; 0x4e2a <main+0x3b2>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    4dd8:	6f a1       	ldd	r22, Y+39	; 0x27
    4dda:	78 a5       	ldd	r23, Y+40	; 0x28
    4ddc:	89 a5       	ldd	r24, Y+41	; 0x29
    4dde:	9a a5       	ldd	r25, Y+42	; 0x2a
    4de0:	20 e0       	ldi	r18, 0x00	; 0
    4de2:	30 e0       	ldi	r19, 0x00	; 0
    4de4:	40 e2       	ldi	r20, 0x20	; 32
    4de6:	51 e4       	ldi	r21, 0x41	; 65
    4de8:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    4dec:	dc 01       	movw	r26, r24
    4dee:	cb 01       	movw	r24, r22
    4df0:	bc 01       	movw	r22, r24
    4df2:	cd 01       	movw	r24, r26
    4df4:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    4df8:	dc 01       	movw	r26, r24
    4dfa:	cb 01       	movw	r24, r22
    4dfc:	9a a3       	std	Y+34, r25	; 0x22
    4dfe:	89 a3       	std	Y+33, r24	; 0x21
    4e00:	0f c0       	rjmp	.+30     	; 0x4e20 <main+0x3a8>
    4e02:	88 ec       	ldi	r24, 0xC8	; 200
    4e04:	90 e0       	ldi	r25, 0x00	; 0
    4e06:	98 a3       	std	Y+32, r25	; 0x20
    4e08:	8f 8f       	std	Y+31, r24	; 0x1f
    4e0a:	8f 8d       	ldd	r24, Y+31	; 0x1f
    4e0c:	98 a1       	ldd	r25, Y+32	; 0x20
    4e0e:	01 97       	sbiw	r24, 0x01	; 1
    4e10:	f1 f7       	brne	.-4      	; 0x4e0e <main+0x396>
    4e12:	98 a3       	std	Y+32, r25	; 0x20
    4e14:	8f 8f       	std	Y+31, r24	; 0x1f
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    4e16:	89 a1       	ldd	r24, Y+33	; 0x21
    4e18:	9a a1       	ldd	r25, Y+34	; 0x22
    4e1a:	01 97       	sbiw	r24, 0x01	; 1
    4e1c:	9a a3       	std	Y+34, r25	; 0x22
    4e1e:	89 a3       	std	Y+33, r24	; 0x21
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    4e20:	89 a1       	ldd	r24, Y+33	; 0x21
    4e22:	9a a1       	ldd	r25, Y+34	; 0x22
    4e24:	00 97       	sbiw	r24, 0x00	; 0
    4e26:	69 f7       	brne	.-38     	; 0x4e02 <main+0x38a>
    4e28:	14 c0       	rjmp	.+40     	; 0x4e52 <main+0x3da>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    4e2a:	6b a1       	ldd	r22, Y+35	; 0x23
    4e2c:	7c a1       	ldd	r23, Y+36	; 0x24
    4e2e:	8d a1       	ldd	r24, Y+37	; 0x25
    4e30:	9e a1       	ldd	r25, Y+38	; 0x26
    4e32:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    4e36:	dc 01       	movw	r26, r24
    4e38:	cb 01       	movw	r24, r22
    4e3a:	9a a3       	std	Y+34, r25	; 0x22
    4e3c:	89 a3       	std	Y+33, r24	; 0x21
    4e3e:	89 a1       	ldd	r24, Y+33	; 0x21
    4e40:	9a a1       	ldd	r25, Y+34	; 0x22
    4e42:	9e 8f       	std	Y+30, r25	; 0x1e
    4e44:	8d 8f       	std	Y+29, r24	; 0x1d
    4e46:	8d 8d       	ldd	r24, Y+29	; 0x1d
    4e48:	9e 8d       	ldd	r25, Y+30	; 0x1e
    4e4a:	01 97       	sbiw	r24, 0x01	; 1
    4e4c:	f1 f7       	brne	.-4      	; 0x4e4a <main+0x3d2>
    4e4e:	9e 8f       	std	Y+30, r25	; 0x1e
    4e50:	8d 8f       	std	Y+29, r24	; 0x1d
		_delay_ms(500);

		DIO_SetPinLevel(DIO_PORTC,DIO_PIN0,DIO_HIGH);
    4e52:	82 e0       	ldi	r24, 0x02	; 2
    4e54:	60 e0       	ldi	r22, 0x00	; 0
    4e56:	41 e0       	ldi	r20, 0x01	; 1
    4e58:	0e 94 f1 0c 	call	0x19e2	; 0x19e2 <DIO_SetPinLevel>
		DIO_SetPinLevel(DIO_PORTC,DIO_PIN1,DIO_HIGH);
    4e5c:	82 e0       	ldi	r24, 0x02	; 2
    4e5e:	61 e0       	ldi	r22, 0x01	; 1
    4e60:	41 e0       	ldi	r20, 0x01	; 1
    4e62:	0e 94 f1 0c 	call	0x19e2	; 0x19e2 <DIO_SetPinLevel>
		DIO_SetPinLevel(DIO_PORTC,DIO_PIN2,DIO_LOW);
    4e66:	82 e0       	ldi	r24, 0x02	; 2
    4e68:	62 e0       	ldi	r22, 0x02	; 2
    4e6a:	40 e0       	ldi	r20, 0x00	; 0
    4e6c:	0e 94 f1 0c 	call	0x19e2	; 0x19e2 <DIO_SetPinLevel>
		DIO_SetPinLevel(DIO_PORTC,DIO_PIN3,DIO_HIGH);
    4e70:	82 e0       	ldi	r24, 0x02	; 2
    4e72:	63 e0       	ldi	r22, 0x03	; 3
    4e74:	41 e0       	ldi	r20, 0x01	; 1
    4e76:	0e 94 f1 0c 	call	0x19e2	; 0x19e2 <DIO_SetPinLevel>
    4e7a:	80 e0       	ldi	r24, 0x00	; 0
    4e7c:	90 e0       	ldi	r25, 0x00	; 0
    4e7e:	aa ef       	ldi	r26, 0xFA	; 250
    4e80:	b3 e4       	ldi	r27, 0x43	; 67
    4e82:	89 8f       	std	Y+25, r24	; 0x19
    4e84:	9a 8f       	std	Y+26, r25	; 0x1a
    4e86:	ab 8f       	std	Y+27, r26	; 0x1b
    4e88:	bc 8f       	std	Y+28, r27	; 0x1c
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    4e8a:	69 8d       	ldd	r22, Y+25	; 0x19
    4e8c:	7a 8d       	ldd	r23, Y+26	; 0x1a
    4e8e:	8b 8d       	ldd	r24, Y+27	; 0x1b
    4e90:	9c 8d       	ldd	r25, Y+28	; 0x1c
    4e92:	20 e0       	ldi	r18, 0x00	; 0
    4e94:	30 e0       	ldi	r19, 0x00	; 0
    4e96:	4a ef       	ldi	r20, 0xFA	; 250
    4e98:	54 e4       	ldi	r21, 0x44	; 68
    4e9a:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    4e9e:	dc 01       	movw	r26, r24
    4ea0:	cb 01       	movw	r24, r22
    4ea2:	8d 8b       	std	Y+21, r24	; 0x15
    4ea4:	9e 8b       	std	Y+22, r25	; 0x16
    4ea6:	af 8b       	std	Y+23, r26	; 0x17
    4ea8:	b8 8f       	std	Y+24, r27	; 0x18
	if (__tmp < 1.0)
    4eaa:	6d 89       	ldd	r22, Y+21	; 0x15
    4eac:	7e 89       	ldd	r23, Y+22	; 0x16
    4eae:	8f 89       	ldd	r24, Y+23	; 0x17
    4eb0:	98 8d       	ldd	r25, Y+24	; 0x18
    4eb2:	20 e0       	ldi	r18, 0x00	; 0
    4eb4:	30 e0       	ldi	r19, 0x00	; 0
    4eb6:	40 e8       	ldi	r20, 0x80	; 128
    4eb8:	5f e3       	ldi	r21, 0x3F	; 63
    4eba:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    4ebe:	88 23       	and	r24, r24
    4ec0:	2c f4       	brge	.+10     	; 0x4ecc <main+0x454>
		__ticks = 1;
    4ec2:	81 e0       	ldi	r24, 0x01	; 1
    4ec4:	90 e0       	ldi	r25, 0x00	; 0
    4ec6:	9c 8b       	std	Y+20, r25	; 0x14
    4ec8:	8b 8b       	std	Y+19, r24	; 0x13
    4eca:	3f c0       	rjmp	.+126    	; 0x4f4a <main+0x4d2>
	else if (__tmp > 65535)
    4ecc:	6d 89       	ldd	r22, Y+21	; 0x15
    4ece:	7e 89       	ldd	r23, Y+22	; 0x16
    4ed0:	8f 89       	ldd	r24, Y+23	; 0x17
    4ed2:	98 8d       	ldd	r25, Y+24	; 0x18
    4ed4:	20 e0       	ldi	r18, 0x00	; 0
    4ed6:	3f ef       	ldi	r19, 0xFF	; 255
    4ed8:	4f e7       	ldi	r20, 0x7F	; 127
    4eda:	57 e4       	ldi	r21, 0x47	; 71
    4edc:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    4ee0:	18 16       	cp	r1, r24
    4ee2:	4c f5       	brge	.+82     	; 0x4f36 <main+0x4be>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    4ee4:	69 8d       	ldd	r22, Y+25	; 0x19
    4ee6:	7a 8d       	ldd	r23, Y+26	; 0x1a
    4ee8:	8b 8d       	ldd	r24, Y+27	; 0x1b
    4eea:	9c 8d       	ldd	r25, Y+28	; 0x1c
    4eec:	20 e0       	ldi	r18, 0x00	; 0
    4eee:	30 e0       	ldi	r19, 0x00	; 0
    4ef0:	40 e2       	ldi	r20, 0x20	; 32
    4ef2:	51 e4       	ldi	r21, 0x41	; 65
    4ef4:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    4ef8:	dc 01       	movw	r26, r24
    4efa:	cb 01       	movw	r24, r22
    4efc:	bc 01       	movw	r22, r24
    4efe:	cd 01       	movw	r24, r26
    4f00:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    4f04:	dc 01       	movw	r26, r24
    4f06:	cb 01       	movw	r24, r22
    4f08:	9c 8b       	std	Y+20, r25	; 0x14
    4f0a:	8b 8b       	std	Y+19, r24	; 0x13
    4f0c:	0f c0       	rjmp	.+30     	; 0x4f2c <main+0x4b4>
    4f0e:	88 ec       	ldi	r24, 0xC8	; 200
    4f10:	90 e0       	ldi	r25, 0x00	; 0
    4f12:	9a 8b       	std	Y+18, r25	; 0x12
    4f14:	89 8b       	std	Y+17, r24	; 0x11
    4f16:	89 89       	ldd	r24, Y+17	; 0x11
    4f18:	9a 89       	ldd	r25, Y+18	; 0x12
    4f1a:	01 97       	sbiw	r24, 0x01	; 1
    4f1c:	f1 f7       	brne	.-4      	; 0x4f1a <main+0x4a2>
    4f1e:	9a 8b       	std	Y+18, r25	; 0x12
    4f20:	89 8b       	std	Y+17, r24	; 0x11
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    4f22:	8b 89       	ldd	r24, Y+19	; 0x13
    4f24:	9c 89       	ldd	r25, Y+20	; 0x14
    4f26:	01 97       	sbiw	r24, 0x01	; 1
    4f28:	9c 8b       	std	Y+20, r25	; 0x14
    4f2a:	8b 8b       	std	Y+19, r24	; 0x13
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    4f2c:	8b 89       	ldd	r24, Y+19	; 0x13
    4f2e:	9c 89       	ldd	r25, Y+20	; 0x14
    4f30:	00 97       	sbiw	r24, 0x00	; 0
    4f32:	69 f7       	brne	.-38     	; 0x4f0e <main+0x496>
    4f34:	14 c0       	rjmp	.+40     	; 0x4f5e <main+0x4e6>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    4f36:	6d 89       	ldd	r22, Y+21	; 0x15
    4f38:	7e 89       	ldd	r23, Y+22	; 0x16
    4f3a:	8f 89       	ldd	r24, Y+23	; 0x17
    4f3c:	98 8d       	ldd	r25, Y+24	; 0x18
    4f3e:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    4f42:	dc 01       	movw	r26, r24
    4f44:	cb 01       	movw	r24, r22
    4f46:	9c 8b       	std	Y+20, r25	; 0x14
    4f48:	8b 8b       	std	Y+19, r24	; 0x13
    4f4a:	8b 89       	ldd	r24, Y+19	; 0x13
    4f4c:	9c 89       	ldd	r25, Y+20	; 0x14
    4f4e:	98 8b       	std	Y+16, r25	; 0x10
    4f50:	8f 87       	std	Y+15, r24	; 0x0f
    4f52:	8f 85       	ldd	r24, Y+15	; 0x0f
    4f54:	98 89       	ldd	r25, Y+16	; 0x10
    4f56:	01 97       	sbiw	r24, 0x01	; 1
    4f58:	f1 f7       	brne	.-4      	; 0x4f56 <main+0x4de>
    4f5a:	98 8b       	std	Y+16, r25	; 0x10
    4f5c:	8f 87       	std	Y+15, r24	; 0x0f
		_delay_ms(500);

		DIO_SetPinLevel(DIO_PORTC,DIO_PIN0,DIO_HIGH);
    4f5e:	82 e0       	ldi	r24, 0x02	; 2
    4f60:	60 e0       	ldi	r22, 0x00	; 0
    4f62:	41 e0       	ldi	r20, 0x01	; 1
    4f64:	0e 94 f1 0c 	call	0x19e2	; 0x19e2 <DIO_SetPinLevel>
		DIO_SetPinLevel(DIO_PORTC,DIO_PIN1,DIO_HIGH);
    4f68:	82 e0       	ldi	r24, 0x02	; 2
    4f6a:	61 e0       	ldi	r22, 0x01	; 1
    4f6c:	41 e0       	ldi	r20, 0x01	; 1
    4f6e:	0e 94 f1 0c 	call	0x19e2	; 0x19e2 <DIO_SetPinLevel>
		DIO_SetPinLevel(DIO_PORTC,DIO_PIN2,DIO_HIGH);
    4f72:	82 e0       	ldi	r24, 0x02	; 2
    4f74:	62 e0       	ldi	r22, 0x02	; 2
    4f76:	41 e0       	ldi	r20, 0x01	; 1
    4f78:	0e 94 f1 0c 	call	0x19e2	; 0x19e2 <DIO_SetPinLevel>
		DIO_SetPinLevel(DIO_PORTC,DIO_PIN3,DIO_LOW);
    4f7c:	82 e0       	ldi	r24, 0x02	; 2
    4f7e:	63 e0       	ldi	r22, 0x03	; 3
    4f80:	40 e0       	ldi	r20, 0x00	; 0
    4f82:	0e 94 f1 0c 	call	0x19e2	; 0x19e2 <DIO_SetPinLevel>
    4f86:	80 e0       	ldi	r24, 0x00	; 0
    4f88:	90 e0       	ldi	r25, 0x00	; 0
    4f8a:	aa ef       	ldi	r26, 0xFA	; 250
    4f8c:	b3 e4       	ldi	r27, 0x43	; 67
    4f8e:	8b 87       	std	Y+11, r24	; 0x0b
    4f90:	9c 87       	std	Y+12, r25	; 0x0c
    4f92:	ad 87       	std	Y+13, r26	; 0x0d
    4f94:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    4f96:	6b 85       	ldd	r22, Y+11	; 0x0b
    4f98:	7c 85       	ldd	r23, Y+12	; 0x0c
    4f9a:	8d 85       	ldd	r24, Y+13	; 0x0d
    4f9c:	9e 85       	ldd	r25, Y+14	; 0x0e
    4f9e:	20 e0       	ldi	r18, 0x00	; 0
    4fa0:	30 e0       	ldi	r19, 0x00	; 0
    4fa2:	4a ef       	ldi	r20, 0xFA	; 250
    4fa4:	54 e4       	ldi	r21, 0x44	; 68
    4fa6:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    4faa:	dc 01       	movw	r26, r24
    4fac:	cb 01       	movw	r24, r22
    4fae:	8f 83       	std	Y+7, r24	; 0x07
    4fb0:	98 87       	std	Y+8, r25	; 0x08
    4fb2:	a9 87       	std	Y+9, r26	; 0x09
    4fb4:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    4fb6:	6f 81       	ldd	r22, Y+7	; 0x07
    4fb8:	78 85       	ldd	r23, Y+8	; 0x08
    4fba:	89 85       	ldd	r24, Y+9	; 0x09
    4fbc:	9a 85       	ldd	r25, Y+10	; 0x0a
    4fbe:	20 e0       	ldi	r18, 0x00	; 0
    4fc0:	30 e0       	ldi	r19, 0x00	; 0
    4fc2:	40 e8       	ldi	r20, 0x80	; 128
    4fc4:	5f e3       	ldi	r21, 0x3F	; 63
    4fc6:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    4fca:	88 23       	and	r24, r24
    4fcc:	2c f4       	brge	.+10     	; 0x4fd8 <main+0x560>
		__ticks = 1;
    4fce:	81 e0       	ldi	r24, 0x01	; 1
    4fd0:	90 e0       	ldi	r25, 0x00	; 0
    4fd2:	9e 83       	std	Y+6, r25	; 0x06
    4fd4:	8d 83       	std	Y+5, r24	; 0x05
    4fd6:	3f c0       	rjmp	.+126    	; 0x5056 <main+0x5de>
	else if (__tmp > 65535)
    4fd8:	6f 81       	ldd	r22, Y+7	; 0x07
    4fda:	78 85       	ldd	r23, Y+8	; 0x08
    4fdc:	89 85       	ldd	r24, Y+9	; 0x09
    4fde:	9a 85       	ldd	r25, Y+10	; 0x0a
    4fe0:	20 e0       	ldi	r18, 0x00	; 0
    4fe2:	3f ef       	ldi	r19, 0xFF	; 255
    4fe4:	4f e7       	ldi	r20, 0x7F	; 127
    4fe6:	57 e4       	ldi	r21, 0x47	; 71
    4fe8:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    4fec:	18 16       	cp	r1, r24
    4fee:	4c f5       	brge	.+82     	; 0x5042 <main+0x5ca>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    4ff0:	6b 85       	ldd	r22, Y+11	; 0x0b
    4ff2:	7c 85       	ldd	r23, Y+12	; 0x0c
    4ff4:	8d 85       	ldd	r24, Y+13	; 0x0d
    4ff6:	9e 85       	ldd	r25, Y+14	; 0x0e
    4ff8:	20 e0       	ldi	r18, 0x00	; 0
    4ffa:	30 e0       	ldi	r19, 0x00	; 0
    4ffc:	40 e2       	ldi	r20, 0x20	; 32
    4ffe:	51 e4       	ldi	r21, 0x41	; 65
    5000:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    5004:	dc 01       	movw	r26, r24
    5006:	cb 01       	movw	r24, r22
    5008:	bc 01       	movw	r22, r24
    500a:	cd 01       	movw	r24, r26
    500c:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    5010:	dc 01       	movw	r26, r24
    5012:	cb 01       	movw	r24, r22
    5014:	9e 83       	std	Y+6, r25	; 0x06
    5016:	8d 83       	std	Y+5, r24	; 0x05
    5018:	0f c0       	rjmp	.+30     	; 0x5038 <main+0x5c0>
    501a:	88 ec       	ldi	r24, 0xC8	; 200
    501c:	90 e0       	ldi	r25, 0x00	; 0
    501e:	9c 83       	std	Y+4, r25	; 0x04
    5020:	8b 83       	std	Y+3, r24	; 0x03
    5022:	8b 81       	ldd	r24, Y+3	; 0x03
    5024:	9c 81       	ldd	r25, Y+4	; 0x04
    5026:	01 97       	sbiw	r24, 0x01	; 1
    5028:	f1 f7       	brne	.-4      	; 0x5026 <main+0x5ae>
    502a:	9c 83       	std	Y+4, r25	; 0x04
    502c:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    502e:	8d 81       	ldd	r24, Y+5	; 0x05
    5030:	9e 81       	ldd	r25, Y+6	; 0x06
    5032:	01 97       	sbiw	r24, 0x01	; 1
    5034:	9e 83       	std	Y+6, r25	; 0x06
    5036:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    5038:	8d 81       	ldd	r24, Y+5	; 0x05
    503a:	9e 81       	ldd	r25, Y+6	; 0x06
    503c:	00 97       	sbiw	r24, 0x00	; 0
    503e:	69 f7       	brne	.-38     	; 0x501a <main+0x5a2>
    5040:	14 c0       	rjmp	.+40     	; 0x506a <main+0x5f2>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    5042:	6f 81       	ldd	r22, Y+7	; 0x07
    5044:	78 85       	ldd	r23, Y+8	; 0x08
    5046:	89 85       	ldd	r24, Y+9	; 0x09
    5048:	9a 85       	ldd	r25, Y+10	; 0x0a
    504a:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    504e:	dc 01       	movw	r26, r24
    5050:	cb 01       	movw	r24, r22
    5052:	9e 83       	std	Y+6, r25	; 0x06
    5054:	8d 83       	std	Y+5, r24	; 0x05
    5056:	8d 81       	ldd	r24, Y+5	; 0x05
    5058:	9e 81       	ldd	r25, Y+6	; 0x06
    505a:	9a 83       	std	Y+2, r25	; 0x02
    505c:	89 83       	std	Y+1, r24	; 0x01
    505e:	89 81       	ldd	r24, Y+1	; 0x01
    5060:	9a 81       	ldd	r25, Y+2	; 0x02
    5062:	01 97       	sbiw	r24, 0x01	; 1
    5064:	f1 f7       	brne	.-4      	; 0x5062 <main+0x5ea>
    5066:	9a 83       	std	Y+2, r25	; 0x02
    5068:	89 83       	std	Y+1, r24	; 0x01
	DIO_SetPinMode(DIO_PORTC,DIO_PIN3,DIO_OUTPUT);

	u16 degree=180;

	u16 iteration=(degree/5.625)/4;
	for (u16 i=0;i<iteration;i++)
    506a:	de 01       	movw	r26, r28
    506c:	a9 5b       	subi	r26, 0xB9	; 185
    506e:	bf 4f       	sbci	r27, 0xFF	; 255
    5070:	fe 01       	movw	r30, r28
    5072:	e9 5b       	subi	r30, 0xB9	; 185
    5074:	ff 4f       	sbci	r31, 0xFF	; 255
    5076:	80 81       	ld	r24, Z
    5078:	91 81       	ldd	r25, Z+1	; 0x01
    507a:	01 96       	adiw	r24, 0x01	; 1
    507c:	8d 93       	st	X+, r24
    507e:	9c 93       	st	X, r25
    5080:	fe 01       	movw	r30, r28
    5082:	e9 5b       	subi	r30, 0xB9	; 185
    5084:	ff 4f       	sbci	r31, 0xFF	; 255
    5086:	de 01       	movw	r26, r28
    5088:	a7 5b       	subi	r26, 0xB7	; 183
    508a:	bf 4f       	sbci	r27, 0xFF	; 255
    508c:	20 81       	ld	r18, Z
    508e:	31 81       	ldd	r19, Z+1	; 0x01
    5090:	8d 91       	ld	r24, X+
    5092:	9c 91       	ld	r25, X
    5094:	11 97       	sbiw	r26, 0x01	; 1
    5096:	28 17       	cp	r18, r24
    5098:	39 07       	cpc	r19, r25
    509a:	08 f4       	brcc	.+2      	; 0x509e <main+0x626>
    509c:	ce cd       	rjmp	.-1124   	; 0x4c3a <main+0x1c2>
    509e:	80 e0       	ldi	r24, 0x00	; 0
    50a0:	90 e0       	ldi	r25, 0x00	; 0
		DIO_SetPinLevel(DIO_PORTC,DIO_PIN1,DIO_HIGH);
		DIO_SetPinLevel(DIO_PORTC,DIO_PIN2,DIO_HIGH);
		DIO_SetPinLevel(DIO_PORTC,DIO_PIN3,DIO_LOW);
		_delay_ms(500);
	}
}
    50a2:	c4 5b       	subi	r28, 0xB4	; 180
    50a4:	df 4f       	sbci	r29, 0xFF	; 255
    50a6:	0f b6       	in	r0, 0x3f	; 63
    50a8:	f8 94       	cli
    50aa:	de bf       	out	0x3e, r29	; 62
    50ac:	0f be       	out	0x3f, r0	; 63
    50ae:	cd bf       	out	0x3d, r28	; 61
    50b0:	cf 91       	pop	r28
    50b2:	df 91       	pop	r29
    50b4:	1f 91       	pop	r17
    50b6:	0f 91       	pop	r16
    50b8:	08 95       	ret

000050ba <__mulsi3>:
    50ba:	62 9f       	mul	r22, r18
    50bc:	d0 01       	movw	r26, r0
    50be:	73 9f       	mul	r23, r19
    50c0:	f0 01       	movw	r30, r0
    50c2:	82 9f       	mul	r24, r18
    50c4:	e0 0d       	add	r30, r0
    50c6:	f1 1d       	adc	r31, r1
    50c8:	64 9f       	mul	r22, r20
    50ca:	e0 0d       	add	r30, r0
    50cc:	f1 1d       	adc	r31, r1
    50ce:	92 9f       	mul	r25, r18
    50d0:	f0 0d       	add	r31, r0
    50d2:	83 9f       	mul	r24, r19
    50d4:	f0 0d       	add	r31, r0
    50d6:	74 9f       	mul	r23, r20
    50d8:	f0 0d       	add	r31, r0
    50da:	65 9f       	mul	r22, r21
    50dc:	f0 0d       	add	r31, r0
    50de:	99 27       	eor	r25, r25
    50e0:	72 9f       	mul	r23, r18
    50e2:	b0 0d       	add	r27, r0
    50e4:	e1 1d       	adc	r30, r1
    50e6:	f9 1f       	adc	r31, r25
    50e8:	63 9f       	mul	r22, r19
    50ea:	b0 0d       	add	r27, r0
    50ec:	e1 1d       	adc	r30, r1
    50ee:	f9 1f       	adc	r31, r25
    50f0:	bd 01       	movw	r22, r26
    50f2:	cf 01       	movw	r24, r30
    50f4:	11 24       	eor	r1, r1
    50f6:	08 95       	ret

000050f8 <__udivmodqi4>:
    50f8:	99 1b       	sub	r25, r25
    50fa:	79 e0       	ldi	r23, 0x09	; 9
    50fc:	04 c0       	rjmp	.+8      	; 0x5106 <__udivmodqi4_ep>

000050fe <__udivmodqi4_loop>:
    50fe:	99 1f       	adc	r25, r25
    5100:	96 17       	cp	r25, r22
    5102:	08 f0       	brcs	.+2      	; 0x5106 <__udivmodqi4_ep>
    5104:	96 1b       	sub	r25, r22

00005106 <__udivmodqi4_ep>:
    5106:	88 1f       	adc	r24, r24
    5108:	7a 95       	dec	r23
    510a:	c9 f7       	brne	.-14     	; 0x50fe <__udivmodqi4_loop>
    510c:	80 95       	com	r24
    510e:	08 95       	ret

00005110 <__udivmodsi4>:
    5110:	a1 e2       	ldi	r26, 0x21	; 33
    5112:	1a 2e       	mov	r1, r26
    5114:	aa 1b       	sub	r26, r26
    5116:	bb 1b       	sub	r27, r27
    5118:	fd 01       	movw	r30, r26
    511a:	0d c0       	rjmp	.+26     	; 0x5136 <__udivmodsi4_ep>

0000511c <__udivmodsi4_loop>:
    511c:	aa 1f       	adc	r26, r26
    511e:	bb 1f       	adc	r27, r27
    5120:	ee 1f       	adc	r30, r30
    5122:	ff 1f       	adc	r31, r31
    5124:	a2 17       	cp	r26, r18
    5126:	b3 07       	cpc	r27, r19
    5128:	e4 07       	cpc	r30, r20
    512a:	f5 07       	cpc	r31, r21
    512c:	20 f0       	brcs	.+8      	; 0x5136 <__udivmodsi4_ep>
    512e:	a2 1b       	sub	r26, r18
    5130:	b3 0b       	sbc	r27, r19
    5132:	e4 0b       	sbc	r30, r20
    5134:	f5 0b       	sbc	r31, r21

00005136 <__udivmodsi4_ep>:
    5136:	66 1f       	adc	r22, r22
    5138:	77 1f       	adc	r23, r23
    513a:	88 1f       	adc	r24, r24
    513c:	99 1f       	adc	r25, r25
    513e:	1a 94       	dec	r1
    5140:	69 f7       	brne	.-38     	; 0x511c <__udivmodsi4_loop>
    5142:	60 95       	com	r22
    5144:	70 95       	com	r23
    5146:	80 95       	com	r24
    5148:	90 95       	com	r25
    514a:	9b 01       	movw	r18, r22
    514c:	ac 01       	movw	r20, r24
    514e:	bd 01       	movw	r22, r26
    5150:	cf 01       	movw	r24, r30
    5152:	08 95       	ret

00005154 <__divmodsi4>:
    5154:	97 fb       	bst	r25, 7
    5156:	09 2e       	mov	r0, r25
    5158:	05 26       	eor	r0, r21
    515a:	0e d0       	rcall	.+28     	; 0x5178 <__divmodsi4_neg1>
    515c:	57 fd       	sbrc	r21, 7
    515e:	04 d0       	rcall	.+8      	; 0x5168 <__divmodsi4_neg2>
    5160:	d7 df       	rcall	.-82     	; 0x5110 <__udivmodsi4>
    5162:	0a d0       	rcall	.+20     	; 0x5178 <__divmodsi4_neg1>
    5164:	00 1c       	adc	r0, r0
    5166:	38 f4       	brcc	.+14     	; 0x5176 <__divmodsi4_exit>

00005168 <__divmodsi4_neg2>:
    5168:	50 95       	com	r21
    516a:	40 95       	com	r20
    516c:	30 95       	com	r19
    516e:	21 95       	neg	r18
    5170:	3f 4f       	sbci	r19, 0xFF	; 255
    5172:	4f 4f       	sbci	r20, 0xFF	; 255
    5174:	5f 4f       	sbci	r21, 0xFF	; 255

00005176 <__divmodsi4_exit>:
    5176:	08 95       	ret

00005178 <__divmodsi4_neg1>:
    5178:	f6 f7       	brtc	.-4      	; 0x5176 <__divmodsi4_exit>
    517a:	90 95       	com	r25
    517c:	80 95       	com	r24
    517e:	70 95       	com	r23
    5180:	61 95       	neg	r22
    5182:	7f 4f       	sbci	r23, 0xFF	; 255
    5184:	8f 4f       	sbci	r24, 0xFF	; 255
    5186:	9f 4f       	sbci	r25, 0xFF	; 255
    5188:	08 95       	ret

0000518a <__prologue_saves__>:
    518a:	2f 92       	push	r2
    518c:	3f 92       	push	r3
    518e:	4f 92       	push	r4
    5190:	5f 92       	push	r5
    5192:	6f 92       	push	r6
    5194:	7f 92       	push	r7
    5196:	8f 92       	push	r8
    5198:	9f 92       	push	r9
    519a:	af 92       	push	r10
    519c:	bf 92       	push	r11
    519e:	cf 92       	push	r12
    51a0:	df 92       	push	r13
    51a2:	ef 92       	push	r14
    51a4:	ff 92       	push	r15
    51a6:	0f 93       	push	r16
    51a8:	1f 93       	push	r17
    51aa:	cf 93       	push	r28
    51ac:	df 93       	push	r29
    51ae:	cd b7       	in	r28, 0x3d	; 61
    51b0:	de b7       	in	r29, 0x3e	; 62
    51b2:	ca 1b       	sub	r28, r26
    51b4:	db 0b       	sbc	r29, r27
    51b6:	0f b6       	in	r0, 0x3f	; 63
    51b8:	f8 94       	cli
    51ba:	de bf       	out	0x3e, r29	; 62
    51bc:	0f be       	out	0x3f, r0	; 63
    51be:	cd bf       	out	0x3d, r28	; 61
    51c0:	09 94       	ijmp

000051c2 <__epilogue_restores__>:
    51c2:	2a 88       	ldd	r2, Y+18	; 0x12
    51c4:	39 88       	ldd	r3, Y+17	; 0x11
    51c6:	48 88       	ldd	r4, Y+16	; 0x10
    51c8:	5f 84       	ldd	r5, Y+15	; 0x0f
    51ca:	6e 84       	ldd	r6, Y+14	; 0x0e
    51cc:	7d 84       	ldd	r7, Y+13	; 0x0d
    51ce:	8c 84       	ldd	r8, Y+12	; 0x0c
    51d0:	9b 84       	ldd	r9, Y+11	; 0x0b
    51d2:	aa 84       	ldd	r10, Y+10	; 0x0a
    51d4:	b9 84       	ldd	r11, Y+9	; 0x09
    51d6:	c8 84       	ldd	r12, Y+8	; 0x08
    51d8:	df 80       	ldd	r13, Y+7	; 0x07
    51da:	ee 80       	ldd	r14, Y+6	; 0x06
    51dc:	fd 80       	ldd	r15, Y+5	; 0x05
    51de:	0c 81       	ldd	r16, Y+4	; 0x04
    51e0:	1b 81       	ldd	r17, Y+3	; 0x03
    51e2:	aa 81       	ldd	r26, Y+2	; 0x02
    51e4:	b9 81       	ldd	r27, Y+1	; 0x01
    51e6:	ce 0f       	add	r28, r30
    51e8:	d1 1d       	adc	r29, r1
    51ea:	0f b6       	in	r0, 0x3f	; 63
    51ec:	f8 94       	cli
    51ee:	de bf       	out	0x3e, r29	; 62
    51f0:	0f be       	out	0x3f, r0	; 63
    51f2:	cd bf       	out	0x3d, r28	; 61
    51f4:	ed 01       	movw	r28, r26
    51f6:	08 95       	ret

000051f8 <_exit>:
    51f8:	f8 94       	cli

000051fa <__stop_program>:
    51fa:	ff cf       	rjmp	.-2      	; 0x51fa <__stop_program>
